FILE: moreSpecificAmbiguousExtensions.kt
    public abstract interface IA : R|kotlin/Any| {
    }
    public abstract interface IB : R|IA| {
    }
    public final fun R|IA|.extFun(x: R|IB|): R|kotlin/Unit| {
    }
    public final fun R|IB|.extFun(x: R|IA|): R|kotlin/Unit| {
    }
    public final fun test(): R|kotlin/Unit| {
        lval extFun1: R|@ExtensionFunctionType kotlin/reflect/KFunction2<IA, IB, kotlin/Unit>| = Q|IA|::R|/extFun|
        lval extFun2: <ERROR TYPE REF: Ambiguity: extFun, [/extFun, /extFun]> = Q|IB|::<Ambiguity: extFun, [/extFun, /extFun]>#
    }
    public final fun testWithExpectedType(): R|kotlin/Unit| {
        lval extFun_AB_A: R|IA.(IB) -> kotlin/Unit| = Q|IA|::R|/extFun|
        lval extFun_AA_B: R|IA.(IA) -> kotlin/Unit| = Q|IB|::<Unresolved reference: extFun>#
        lval extFun_BB_A: R|IB.(IB) -> kotlin/Unit| = Q|IA|::R|/extFun|
        lval extFun_BA_B: R|IB.(IA) -> kotlin/Unit| = Q|IB|::R|/extFun|
        lval extFun_BB_B: R|IB.(IB) -> kotlin/Unit| = Q|IB|::<Ambiguity: extFun, [/extFun, /extFun]>#
    }
