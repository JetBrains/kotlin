// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * <pre>
 * Let's try to map IrElement as well as IrStatement to IrStatement.
 * </pre>
 *
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement}
 */
public  final class IrStatement extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrStatement, IrStatement.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)
    IrStatementOrBuilder {
  private IrStatement() {
  }
  private int bitField0_;
  private int statementCase_ = 0;
  private java.lang.Object statement_;
  public enum StatementCase {
    DECLARATION(2),
    EXPRESSION(3),
    BLOCK_BODY(4),
    BRANCH(5),
    CATCH(6),
    SYNTHETIC_BODY(7),
    STATEMENT_NOT_SET(0);
    private final int value;
    private StatementCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StatementCase valueOf(int value) {
      return forNumber(value);
    }

    public static StatementCase forNumber(int value) {
      switch (value) {
        case 2: return DECLARATION;
        case 3: return EXPRESSION;
        case 4: return BLOCK_BODY;
        case 5: return BRANCH;
        case 6: return CATCH;
        case 7: return SYNTHETIC_BODY;
        case 0: return STATEMENT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public StatementCase
  getStatementCase() {
    return StatementCase.forNumber(
        statementCase_);
  }

  private void clearStatement() {
    statementCase_ = 0;
    statement_ = null;
  }

  public static final int COORDINATES_FIELD_NUMBER = 1;
  private long coordinates_;
  /**
   * <code>int64 coordinates = 1 [features = { ... }</code>
   * @return Whether the coordinates field is set.
   */
  @java.lang.Override
  public boolean hasCoordinates() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>int64 coordinates = 1 [features = { ... }</code>
   * @return The coordinates.
   */
  @java.lang.Override
  public long getCoordinates() {
    return coordinates_;
  }
  /**
   * <code>int64 coordinates = 1 [features = { ... }</code>
   * @param value The coordinates to set.
   */
  private void setCoordinates(long value) {
    bitField0_ |= 0x00000001;
    coordinates_ = value;
  }
  /**
   * <code>int64 coordinates = 1 [features = { ... }</code>
   */
  private void clearCoordinates() {
    bitField0_ = (bitField0_ & ~0x00000001);
    coordinates_ = 0L;
  }

  public static final int DECLARATION_FIELD_NUMBER = 2;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
   */
  @java.lang.Override
  public boolean hasDeclaration() {
    return statementCase_ == 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration() {
    if (statementCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
    value.getClass();  // minimal bytecode null check
    statement_ = value;
    statementCase_ = 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
    value.getClass();  // minimal bytecode null check
    if (statementCase_ == 2 &&
        statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance()) {
      statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration) statement_)
          .mergeFrom(value).buildPartial();
    } else {
      statement_ = value;
    }
    statementCase_ = 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
   */
  private void clearDeclaration() {
    if (statementCase_ == 2) {
      statementCase_ = 0;
      statement_ = null;
    }
  }

  public static final int EXPRESSION_FIELD_NUMBER = 3;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
   */
  @java.lang.Override
  public boolean hasExpression() {
    return statementCase_ == 3;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
    if (statementCase_ == 3) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    statement_ = value;
    statementCase_ = 3;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    if (statementCase_ == 3 &&
        statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
      statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) statement_)
          .mergeFrom(value).buildPartial();
    } else {
      statement_ = value;
    }
    statementCase_ = 3;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
   */
  private void clearExpression() {
    if (statementCase_ == 3) {
      statementCase_ = 0;
      statement_ = null;
    }
  }

  public static final int BLOCK_BODY_FIELD_NUMBER = 4;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
   */
  @java.lang.Override
  public boolean hasBlockBody() {
    return statementCase_ == 4;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody getBlockBody() {
    if (statementCase_ == 4) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setBlockBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody value) {
    value.getClass();  // minimal bytecode null check
    statement_ = value;
    statementCase_ = 4;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeBlockBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody value) {
    value.getClass();  // minimal bytecode null check
    if (statementCase_ == 4 &&
        statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.getDefaultInstance()) {
      statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody) statement_)
          .mergeFrom(value).buildPartial();
    } else {
      statement_ = value;
    }
    statementCase_ = 4;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
   */
  private void clearBlockBody() {
    if (statementCase_ == 4) {
      statementCase_ = 0;
      statement_ = null;
    }
  }

  public static final int BRANCH_FIELD_NUMBER = 5;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
   */
  @java.lang.Override
  public boolean hasBranch() {
    return statementCase_ == 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch getBranch() {
    if (statementCase_ == 5) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setBranch(org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch value) {
    value.getClass();  // minimal bytecode null check
    statement_ = value;
    statementCase_ = 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeBranch(org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch value) {
    value.getClass();  // minimal bytecode null check
    if (statementCase_ == 5 &&
        statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.getDefaultInstance()) {
      statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch) statement_)
          .mergeFrom(value).buildPartial();
    } else {
      statement_ = value;
    }
    statementCase_ = 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
   */
  private void clearBranch() {
    if (statementCase_ == 5) {
      statementCase_ = 0;
      statement_ = null;
    }
  }

  public static final int CATCH_FIELD_NUMBER = 6;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
   */
  @java.lang.Override
  public boolean hasCatch() {
    return statementCase_ == 6;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch getCatch() {
    if (statementCase_ == 6) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setCatch(org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch value) {
    value.getClass();  // minimal bytecode null check
    statement_ = value;
    statementCase_ = 6;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeCatch(org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch value) {
    value.getClass();  // minimal bytecode null check
    if (statementCase_ == 6 &&
        statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.getDefaultInstance()) {
      statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch) statement_)
          .mergeFrom(value).buildPartial();
    } else {
      statement_ = value;
    }
    statementCase_ = 6;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
   */
  private void clearCatch() {
    if (statementCase_ == 6) {
      statementCase_ = 0;
      statement_ = null;
    }
  }

  public static final int SYNTHETIC_BODY_FIELD_NUMBER = 7;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
   */
  @java.lang.Override
  public boolean hasSyntheticBody() {
    return statementCase_ == 7;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody getSyntheticBody() {
    if (statementCase_ == 7) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setSyntheticBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody value) {
    value.getClass();  // minimal bytecode null check
    statement_ = value;
    statementCase_ = 7;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeSyntheticBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody value) {
    value.getClass();  // minimal bytecode null check
    if (statementCase_ == 7 &&
        statement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.getDefaultInstance()) {
      statement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody) statement_)
          .mergeFrom(value).buildPartial();
    } else {
      statement_ = value;
    }
    statementCase_ = 7;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
   */
  private void clearSyntheticBody() {
    if (statementCase_ == 7) {
      statementCase_ = 0;
      statement_ = null;
    }
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Let's try to map IrElement as well as IrStatement to IrStatement.
   * </pre>
   *
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public StatementCase
        getStatementCase() {
      return instance.getStatementCase();
    }

    public Builder clearStatement() {
      copyOnWrite();
      instance.clearStatement();
      return this;
    }


    /**
     * <code>int64 coordinates = 1 [features = { ... }</code>
     * @return Whether the coordinates field is set.
     */
    @java.lang.Override
    public boolean hasCoordinates() {
      return instance.hasCoordinates();
    }
    /**
     * <code>int64 coordinates = 1 [features = { ... }</code>
     * @return The coordinates.
     */
    @java.lang.Override
    public long getCoordinates() {
      return instance.getCoordinates();
    }
    /**
     * <code>int64 coordinates = 1 [features = { ... }</code>
     * @param value The coordinates to set.
     * @return This builder for chaining.
     */
    public Builder setCoordinates(long value) {
      copyOnWrite();
      instance.setCoordinates(value);
      return this;
    }
    /**
     * <code>int64 coordinates = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearCoordinates() {
      copyOnWrite();
      instance.clearCoordinates();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    @java.lang.Override
    public boolean hasDeclaration() {
      return instance.hasDeclaration();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration() {
      return instance.getDeclaration();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public Builder setDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
      copyOnWrite();
      instance.setDeclaration(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public Builder setDeclaration(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
      copyOnWrite();
      instance.setDeclaration(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public Builder mergeDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
      copyOnWrite();
      instance.mergeDeclaration(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 2;</code>
     */
    public Builder clearDeclaration() {
      copyOnWrite();
      instance.clearDeclaration();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return instance.hasExpression();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
      return instance.getExpression();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public Builder setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.setExpression(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public Builder setExpression(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setExpression(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public Builder mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.mergeExpression(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 3;</code>
     */
    public Builder clearExpression() {
      copyOnWrite();
      instance.clearExpression();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    @java.lang.Override
    public boolean hasBlockBody() {
      return instance.hasBlockBody();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody getBlockBody() {
      return instance.getBlockBody();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public Builder setBlockBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody value) {
      copyOnWrite();
      instance.setBlockBody(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public Builder setBlockBody(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.Builder builderForValue) {
      copyOnWrite();
      instance.setBlockBody(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public Builder mergeBlockBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody value) {
      copyOnWrite();
      instance.mergeBlockBody(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody block_body = 4;</code>
     */
    public Builder clearBlockBody() {
      copyOnWrite();
      instance.clearBlockBody();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    @java.lang.Override
    public boolean hasBranch() {
      return instance.hasBranch();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch getBranch() {
      return instance.getBranch();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public Builder setBranch(org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch value) {
      copyOnWrite();
      instance.setBranch(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public Builder setBranch(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.Builder builderForValue) {
      copyOnWrite();
      instance.setBranch(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public Builder mergeBranch(org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch value) {
      copyOnWrite();
      instance.mergeBranch(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch branch = 5;</code>
     */
    public Builder clearBranch() {
      copyOnWrite();
      instance.clearBranch();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    @java.lang.Override
    public boolean hasCatch() {
      return instance.hasCatch();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch getCatch() {
      return instance.getCatch();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public Builder setCatch(org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch value) {
      copyOnWrite();
      instance.setCatch(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public Builder setCatch(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.Builder builderForValue) {
      copyOnWrite();
      instance.setCatch(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public Builder mergeCatch(org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch value) {
      copyOnWrite();
      instance.mergeCatch(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch catch = 6;</code>
     */
    public Builder clearCatch() {
      copyOnWrite();
      instance.clearCatch();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    @java.lang.Override
    public boolean hasSyntheticBody() {
      return instance.hasSyntheticBody();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody getSyntheticBody() {
      return instance.getSyntheticBody();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public Builder setSyntheticBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody value) {
      copyOnWrite();
      instance.setSyntheticBody(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public Builder setSyntheticBody(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.Builder builderForValue) {
      copyOnWrite();
      instance.setSyntheticBody(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public Builder mergeSyntheticBody(org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody value) {
      copyOnWrite();
      instance.mergeSyntheticBody(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody synthetic_body = 7;</code>
     */
    public Builder clearSyntheticBody() {
      copyOnWrite();
      instance.clearSyntheticBody();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "statement_",
            "statementCase_",
            "bitField0_",
            "coordinates_",
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.IrBlockBody.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.IrBranch.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.IrCatch.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.IrSyntheticBody.class,
          };
          java.lang.String info =
              "\u0004\u0007\u0001\u0001\u0001\u0007\u0007\u0000\u0000\u0007\u0001\u1502\u0000\u0002" +
              "\u043c\u0000\u0003\u043c\u0000\u0004\u043c\u0000\u0005\u043c\u0000\u0006\u043c\u0000" +
              "\u0007\u043c\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement DEFAULT_INSTANCE;
  static {
    IrStatement defaultInstance = new IrStatement();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrStatement.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrStatement> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrStatement> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
