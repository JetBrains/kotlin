@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/Int>>
  context -> FirFieldSymbol second/MyClass.$$delegate_0
  anchor -> [FirRegularClassSymbol second/MyClass]

@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/Int>
  context -> FirFieldSymbol second/MyClass.$$delegate_0
  anchor -> [FirRegularClassSymbol second/MyClass]

@R|second/Anno|(LAZY_EXPRESSION)  kotlin/Int
  context -> FirFieldSymbol second/MyClass.$$delegate_0
  anchor -> [FirRegularClassSymbol second/MyClass]

FILE: [ResolvedTo(IMPORTS)] delegatedFieldNestedName.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=second/Anno.i] i: Int): R|second/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val i: Int = R|<local>/i|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): Int

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Base<[ResolvedTo(SUPER_TYPES)] A> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Second<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
    }
    public? final? const [ResolvedTo(RAW_FIR)] val outer: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public? final? const [ResolvedTo(RAW_FIR)] val inner: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? [ResolvedTo(TYPES)] [DelegateFieldsMapKey={0=FirFieldSymbol second/MyClass.$$delegate_0, 1=FirFieldSymbol second/MyClass.$$delegate_1}] class MyClass : R|@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/Int>>|, R|@R|second/Anno|(LAZY_EXPRESSION)  second/Second<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/String>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(TYPES)] field $$delegate_0: R|@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  second/Base<@R|second/Anno|(LAZY_EXPRESSION)  kotlin/Int>>| = LAZY_EXPRESSION

        private final [ResolvedTo(RAW_FIR)] field $$delegate_1: @R|second/Anno|[Unresolved](LAZY_EXPRESSION) Second<R|@R|second/Anno|(LAZY_EXPRESSION)  kotlin/String|> = LAZY_EXPRESSION

        public final? companion [ResolvedTo(RAW_FIR)] object Companion : @Anno[Unresolved](LAZY_EXPRESSION) Base<@Anno[Unresolved](LAZY_EXPRESSION) Base<@Anno[Unresolved](LAZY_EXPRESSION) Int>> {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|second/MyClass.Companion| {
                LAZY_super<<implicit>>
            }

            public? final? const [ResolvedTo(RAW_FIR)] val outer: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): <implicit>

            public? final? const [ResolvedTo(RAW_FIR)] val inner: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): <implicit>

        }

        public final? [ResolvedTo(RAW_FIR)] object NestedObject : @Anno[Unresolved](LAZY_EXPRESSION) Second<@Anno[Unresolved](LAZY_EXPRESSION) String> {
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedObject] constructor(): R|second/MyClass.NestedObject| {
                LAZY_super<<implicit>>
            }

        }

    }
