package

public fun createBlock(/*0*/ block: () -> kotlin.Unit): kotlin.Unit
public suspend fun fun1(/*0*/ arg: kotlin.String): kotlin.Unit
public suspend fun mySuspend(/*0*/ arg: kotlin.Any): kotlin.Unit
public fun receiver(/*0*/ block: suspend (context: kotlin.Any) -> kotlin.Unit): kotlin.Unit
public fun </*0*/ T> runBlocking(/*0*/ block: suspend () -> T): T
public suspend fun </*0*/ A, /*1*/ B> takeRef(/*0*/ supplier: suspend () -> kotlin.reflect.KSuspendFunction1<A, B>): kotlin.Unit
public fun test1(): kotlin.Unit
public suspend fun test2(): kotlin.Unit
public fun test3(): kotlin.Unit

public object Foo {
    private constructor Foo()
    public final suspend fun bar(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

