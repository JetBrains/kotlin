KtFile: annotationValueArgumentsAmbiguity.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('foo')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      ANNOTATED_EXPRESSION
        ANNOTATION_ENTRY
          PsiElement(AT)('@')
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('ann')
          PsiWhiteSpace(' ')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            VALUE_ARGUMENT
              LAMBDA_EXPRESSION
                FUNCTION_LITERAL
                  PsiElement(LBRACE)('{')
                  PsiWhiteSpace(' ')
                  VALUE_PARAMETER_LIST
                    VALUE_PARAMETER
                      PsiElement(IDENTIFIER)('it')
                  PsiWhiteSpace(' ')
                  PsiElement(ARROW)('->')
                  PsiWhiteSpace(' ')
                  BLOCK
                    BINARY_EXPRESSION
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('it')
                      PsiWhiteSpace(' ')
                      OPERATION_REFERENCE
                        PsiElement(PLUS)('+')
                      PsiWhiteSpace(' ')
                      INTEGER_CONSTANT
                        PsiElement(INTEGER_LITERAL)('1')
                  PsiElement(RBRACE)('}')
            PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiComment(EOL_COMMENT)('// lambda parsed as argument of annotation, and annotated expression is "print(1)"')
        PsiWhiteSpace('\n    ')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('print')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            VALUE_ARGUMENT
              INTEGER_CONSTANT
                PsiElement(INTEGER_LITERAL)('1')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      ANNOTATED_EXPRESSION
        ANNOTATION_ENTRY
          PsiElement(AT)('@')
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('ann')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PARENTHESIZED
          PsiElement(LPAR)('(')
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              VALUE_PARAMETER_LIST
                VALUE_PARAMETER
                  PsiElement(IDENTIFIER)('it')
              PsiWhiteSpace(' ')
              PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              BLOCK
                BINARY_EXPRESSION
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('it')
                  PsiWhiteSpace(' ')
                  OPERATION_REFERENCE
                    PsiElement(PLUS)('+')
                  PsiWhiteSpace(' ')
                  INTEGER_CONSTANT
                    PsiElement(INTEGER_LITERAL)('1')
              PsiElement(RBRACE)('}')
          PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      PsiComment(EOL_COMMENT)('// lambda in parenthesises annotated, "print(1)" is separated expression')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('print')
        VALUE_ARGUMENT_LIST
          PsiElement(LPAR)('(')
          VALUE_ARGUMENT
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
          PsiElement(RPAR)(')')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
