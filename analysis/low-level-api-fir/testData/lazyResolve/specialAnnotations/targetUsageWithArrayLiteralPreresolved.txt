RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @KaCachedService[Unresolved]() private final? [ResolvedTo(RAW_FIR)] val foo: Int = LAZY_EXPRESSION
        private [ResolvedTo(RAW_FIR)] get(): Int

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @KaCachedService[Unresolved]() private final? [ResolvedTo(RAW_FIR)] val foo: Int = LAZY_EXPRESSION
        private [ResolvedTo(RAW_FIR)] get(): Int

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @KaCachedService[Unresolved]() private final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val foo: Int = LAZY_EXPRESSION
        private [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] get(): Int

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @KaCachedService[Unresolved]() private final? [ResolvedTo(COMPANION_GENERATION)] val foo: Int = LAZY_EXPRESSION
        private [ResolvedTo(COMPANION_GENERATION)] get(): Int

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @KaCachedService[Unresolved]() private final? [ResolvedTo(SUPER_TYPES)] val foo: Int = LAZY_EXPRESSION
        private [ResolvedTo(SUPER_TYPES)] get(): Int

TYPES:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final? [ResolvedTo(TYPES)] val foo: R|kotlin/Int| = LAZY_EXPRESSION
        private [ResolvedTo(TYPES)] get(): R|kotlin/Int|

STATUS:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final [ResolvedTo(STATUS)] val foo: R|kotlin/Int| = LAZY_EXPRESSION
        private [ResolvedTo(STATUS)] get(): R|kotlin/Int|

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val foo: R|kotlin/Int| = LAZY_EXPRESSION
        private [ResolvedTo(EXPECT_ACTUAL_MATCHING)] get(): R|kotlin/Int|

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final [ResolvedTo(CONTRACTS)] val foo: R|kotlin/Int| = LAZY_EXPRESSION
        private [ResolvedTo(CONTRACTS)] get(): R|kotlin/Int|

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val foo: R|kotlin/Int| = LAZY_EXPRESSION
        private [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final [ResolvedTo(CONSTANT_EVALUATION)] val foo: R|kotlin/Int| = LAZY_EXPRESSION
        private [ResolvedTo(CONSTANT_EVALUATION)] get(): R|kotlin/Int|

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final [ResolvedTo(ANNOTATION_ARGUMENTS)] val foo: R|kotlin/Int| = LAZY_EXPRESSION
        private [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): R|kotlin/Int|

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final [ResolvedTo(BODY_RESOLVE)] val foo: R|kotlin/Int| = Int(0)
        private [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] targetUsageWithArrayLiteralPreresolved.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(*<collectionLiteralCall>(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FIELD|))) public final [ResolvedTo(BODY_RESOLVE)] annotation class KaCachedService : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KaCachedService] constructor(): R|KaCachedService| {
            super<R|kotlin/Any|>()
        }

    }
    @R|KaCachedService|[Types]() private final [ResolvedTo(BODY_RESOLVE)] val foo: R|kotlin/Int| = Int(0)
        private [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|
