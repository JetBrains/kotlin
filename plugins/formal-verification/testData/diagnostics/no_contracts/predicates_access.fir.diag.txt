/predicates_access.kt:(209,232): info: Generated Viper text for accessSuperTypeProperty:
field class_A$member_a: Ref

field class_B$member_b: Ref

field class_C$member_x: Ref

field class_C$member_y: Ref

predicate T_class_global$class_A(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_A$member_a, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_A$member_a),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_B(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_B$member_b, wildcard) &&
  acc(T_class_global$class_A(special$class$predicate$subject), wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_B$member_b),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_C(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_C$member_x, wildcard) &&
  acc(T_class_global$class_A(special$class$predicate$subject.class_C$member_x), wildcard) &&
  acc(T_class_global$class_D(special$class$predicate$subject), wildcard) &&
  acc(T_class_global$class_B(special$class$predicate$subject), wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_C$member_x),
  dom$RuntimeType$T_class_global$class_A())
}

predicate T_class_global$class_D(special$class$predicate$subject: Ref) {
  true
}

method class_D$getter_d(this: Ref) returns (ret: Ref)
  requires acc(T_class_global$class_D(this), wildcard)
  ensures acc(T_class_global$class_D(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


method global$fun_accessSuperTypeProperty$fun_take$T_class_global$class_C$return$T_Unit(local$c: Ref)
  returns (ret$0: Ref)
  requires acc(T_class_global$class_C(local$c), wildcard)
  ensures acc(T_class_global$class_C(local$c), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$temp: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$c), dom$RuntimeType$T_class_global$class_C())
  ret$0 := dom$RuntimeType$unitValue()
  unfold acc(T_class_global$class_C(local$c), wildcard)
  unfold acc(T_class_global$class_B(local$c), wildcard)
  unfold acc(T_class_global$class_A(local$c), wildcard)
  local0$temp := local$c.class_A$member_a
  label label$ret$0
}

/predicates_access.kt:(266,278): info: Generated Viper text for accessNested:
field class_A$member_a: Ref

field class_B$member_b: Ref

field class_C$member_x: Ref

field class_C$member_y: Ref

predicate T_class_global$class_A(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_A$member_a, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_A$member_a),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_B(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_B$member_b, wildcard) &&
  acc(T_class_global$class_A(special$class$predicate$subject), wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_B$member_b),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_C(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_C$member_x, wildcard) &&
  acc(T_class_global$class_A(special$class$predicate$subject.class_C$member_x), wildcard) &&
  acc(T_class_global$class_D(special$class$predicate$subject), wildcard) &&
  acc(T_class_global$class_B(special$class$predicate$subject), wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_C$member_x),
  dom$RuntimeType$T_class_global$class_A())
}

predicate T_class_global$class_D(special$class$predicate$subject: Ref) {
  true
}

method class_D$getter_d(this: Ref) returns (ret: Ref)
  requires acc(T_class_global$class_D(this), wildcard)
  ensures acc(T_class_global$class_D(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


method global$fun_accessNested$fun_take$T_class_global$class_C$return$T_Unit(local$c: Ref)
  returns (ret$0: Ref)
  requires acc(T_class_global$class_C(local$c), wildcard)
  ensures acc(T_class_global$class_C(local$c), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$temp: Ref
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$c), dom$RuntimeType$T_class_global$class_C())
  ret$0 := dom$RuntimeType$unitValue()
  unfold acc(T_class_global$class_C(local$c), wildcard)
  anonymous$0 := local$c.class_C$member_x
  unfold acc(T_class_global$class_A(anonymous$0), wildcard)
  local0$temp := anonymous$0.class_A$member_a
  label label$ret$0
}

/predicates_access.kt:(314,328): info: Generated Viper text for accessNullable:
field class_A$member_a: Ref

predicate T_class_global$class_A(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_A$member_a, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_A$member_a),
  dom$RuntimeType$intType())
}

method global$fun_accessNullable$fun_take$NT_class_global$class_A$return$T_Unit(local$x: Ref)
  returns (ret$0: Ref)
  requires local$x != dom$RuntimeType$nullValue() ==>
    acc(T_class_global$class_A(local$x), wildcard)
  ensures local$x != dom$RuntimeType$nullValue() ==>
    acc(T_class_global$class_A(local$x), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$n: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$T_class_global$class_A()))
  ret$0 := dom$RuntimeType$unitValue()
  if (!(local$x == dom$RuntimeType$nullValue())) {
    unfold acc(T_class_global$class_A(local$x), wildcard)
    local0$n := local$x.class_A$member_a
  }
  label label$ret$0
}

/predicates_access.kt:(402,412): info: Generated Viper text for accessCast:
field class_A$member_a: Ref

field class_B$member_b: Ref

predicate T_class_global$class_A(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_A$member_a, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_A$member_a),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_B(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_B$member_b, wildcard) &&
  acc(T_class_global$class_A(special$class$predicate$subject), wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_B$member_b),
  dom$RuntimeType$intType())
}

method global$fun_accessCast$fun_take$T_class_global$class_A$return$T_Unit(local$x: Ref)
  returns (ret$0: Ref)
  requires acc(T_class_global$class_A(local$x), wildcard)
  ensures acc(T_class_global$class_A(local$x), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$n: Ref
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$T_class_global$class_A())
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := local$x
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$T_class_global$class_B())
  inhale acc(T_class_global$class_B(anonymous$0), wildcard)
  unfold acc(T_class_global$class_B(anonymous$0), wildcard)
  local0$n := anonymous$0.class_B$member_b
  label label$ret$0
}

/predicates_access.kt:(461,475): info: Generated Viper text for accessSafeCast:
field class_A$member_a: Ref

field class_B$member_b: Ref

predicate T_class_global$class_A(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_A$member_a, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_A$member_a),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_B(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_B$member_b, wildcard) &&
  acc(T_class_global$class_A(special$class$predicate$subject), wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_B$member_b),
  dom$RuntimeType$intType())
}

method global$fun_accessSafeCast$fun_take$T_class_global$class_A$return$T_Unit(local$x: Ref)
  returns (ret$0: Ref)
  requires acc(T_class_global$class_A(local$x), wildcard)
  ensures acc(T_class_global$class_A(local$x), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$n: Ref
  var local0$y: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$T_class_global$class_A())
  ret$0 := dom$RuntimeType$unitValue()
  local0$n := dom$RuntimeType$intToRef(0)
  if (dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$T_class_global$class_B())) {
    local0$y := local$x
  } else {
    local0$y := dom$RuntimeType$nullValue()}
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local0$y), dom$RuntimeType$nullable(dom$RuntimeType$T_class_global$class_B()))
  inhale local0$y != dom$RuntimeType$nullValue() ==>
    acc(T_class_global$class_B(local0$y), wildcard)
  if (!(local0$y == dom$RuntimeType$nullValue())) {
    unfold acc(T_class_global$class_B(local0$y), wildcard)
    local0$n := local0$y.class_B$member_b
  }
  label label$ret$0
}

/predicates_access.kt:(572,587): info: Generated Viper text for accessSmartCast:
field class_A$member_a: Ref

field class_B$member_b: Ref

predicate T_class_global$class_A(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_A$member_a, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_A$member_a),
  dom$RuntimeType$intType())
}

predicate T_class_global$class_B(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_B$member_b, wildcard) &&
  acc(T_class_global$class_A(special$class$predicate$subject), wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_B$member_b),
  dom$RuntimeType$intType())
}

method global$fun_accessSmartCast$fun_take$T_class_global$class_A$return$T_Unit(local$x: Ref)
  returns (ret$0: Ref)
  requires acc(T_class_global$class_A(local$x), wildcard)
  ensures acc(T_class_global$class_A(local$x), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$n: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$T_class_global$class_A())
  ret$0 := dom$RuntimeType$unitValue()
  local0$n := dom$RuntimeType$intToRef(0)
  if (dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$T_class_global$class_B())) {
    var anonymous$0: Ref
    anonymous$0 := local$x
    inhale acc(T_class_global$class_B(anonymous$0), wildcard)
    unfold acc(T_class_global$class_B(anonymous$0), wildcard)
    local0$n := anonymous$0.class_B$member_b
  }
  label label$ret$0
}
