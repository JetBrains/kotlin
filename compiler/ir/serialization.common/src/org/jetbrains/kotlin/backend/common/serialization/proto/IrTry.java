// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrTry}
 */
public  final class IrTry extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrTry, IrTry.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrTry)
    IrTryOrBuilder {
  private IrTry() {
    catch_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int RESULT_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public boolean hasResult() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getResult() {
    return result_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : result_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setResult(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    result_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeResult(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    if (result_ != null &&
        result_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
      result_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder(result_).mergeFrom(value).buildPartial();
    } else {
      result_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
   */
  private void clearResult() {  result_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int CATCH_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement> catch_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  @java.lang.Override
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement> getCatchList() {
    return catch_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder> 
      getCatchOrBuilderList() {
    return catch_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  @java.lang.Override
  public int getCatchCount() {
    return catch_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getCatch(int index) {
    return catch_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder getCatchOrBuilder(
      int index) {
    return catch_.get(index);
  }
  private void ensureCatchIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement> tmp = catch_;
    if (!tmp.isModifiable()) {
      catch_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setCatch(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
    value.getClass();  // minimal bytecode null check
    ensureCatchIsMutable();
    catch_.set(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addCatch(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
    value.getClass();  // minimal bytecode null check
    ensureCatchIsMutable();
    catch_.add(value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addCatch(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
    value.getClass();  // minimal bytecode null check
    ensureCatchIsMutable();
    catch_.add(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  private void addAllCatch(
      java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement> values) {
    ensureCatchIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, catch_);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  private void clearCatch() {
    catch_ = emptyProtobufList();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
   */
  private void removeCatch(int index) {
    ensureCatchIsMutable();
    catch_.remove(index);
  }

  public static final int FINALLY_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
   */
  @java.lang.Override
  public boolean hasFinally() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getFinally() {
    return finally_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : finally_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setFinally(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    finally_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeFinally(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    if (finally_ != null &&
        finally_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
      finally_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder(finally_).mergeFrom(value).buildPartial();
    } else {
      finally_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
   */
  private void clearFinally() {  finally_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrTry prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrTry}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrTry, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrTry)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrTryOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrTry.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasResult() {
      return instance.hasResult();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getResult() {
      return instance.getResult();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
     */
    public Builder setResult(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.setResult(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
     */
    public Builder setResult(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setResult(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
     */
    public Builder mergeResult(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.mergeResult(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1 [features = { ... }</code>
     */
    public Builder clearResult() {  copyOnWrite();
      instance.clearResult();
      return this;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement> getCatchList() {
      return java.util.Collections.unmodifiableList(
          instance.getCatchList());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    @java.lang.Override
    public int getCatchCount() {
      return instance.getCatchCount();
    }/**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getCatch(int index) {
      return instance.getCatch(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder setCatch(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
      copyOnWrite();
      instance.setCatch(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder setCatch(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder builderForValue) {
      copyOnWrite();
      instance.setCatch(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder addCatch(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
      copyOnWrite();
      instance.addCatch(value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder addCatch(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
      copyOnWrite();
      instance.addCatch(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder addCatch(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder builderForValue) {
      copyOnWrite();
      instance.addCatch(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder addCatch(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder builderForValue) {
      copyOnWrite();
      instance.addCatch(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder addAllCatch(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement> values) {
      copyOnWrite();
      instance.addAllCatch(values);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder clearCatch() {
      copyOnWrite();
      instance.clearCatch();
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public Builder removeCatch(int index) {
      copyOnWrite();
      instance.removeCatch(index);
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
     */
    @java.lang.Override
    public boolean hasFinally() {
      return instance.hasFinally();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getFinally() {
      return instance.getFinally();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
     */
    public Builder setFinally(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.setFinally(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
     */
    public Builder setFinally(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setFinally(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
     */
    public Builder mergeFinally(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.mergeFinally(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
     */
    public Builder clearFinally() {  copyOnWrite();
      instance.clearFinally();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrTry)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrTry();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "result_",
            "catch_",
            org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.class,
            "finally_",
          };
          java.lang.String info =
              "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0001\u0003\u0001\u1509\u0000\u0002" +
              "\u041b\u0003\u1409\u0001";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrTry> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrTry.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrTry>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrTry)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrTry DEFAULT_INSTANCE;
  static {
    IrTry defaultInstance = new IrTry();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrTry.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTry getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrTry> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrTry> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
