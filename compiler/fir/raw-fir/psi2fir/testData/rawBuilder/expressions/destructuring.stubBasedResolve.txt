FILE: [ResolvedTo(BODY_RESOLVE)] destructuring.kt
    public final data [ResolvedTo(BODY_RESOLVE)] class Some : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Some.first] first: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Some.second] second: R|kotlin/Double|, [ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Some.third] third: R|kotlin/String|): R|Some| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Some.component1, IsFromPrimaryConstructor=true] val first: R|kotlin/Int| = R|<local>/first|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] get(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Some.component2, IsFromPrimaryConstructor=true] val second: R|kotlin/Double| = R|<local>/second|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] get(): R|kotlin/Double|

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Some.component3, IsFromPrimaryConstructor=true] val third: R|kotlin/String| = R|<local>/third|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] get(): R|kotlin/String|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component1(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component2(): R|kotlin/Double|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component3(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] fun copy([ResolvedTo(BODY_RESOLVE)] first: R|kotlin/Int| = this@R|/Some|.R|/Some.first|, [ResolvedTo(BODY_RESOLVE)] second: R|kotlin/Double| = this@R|/Some|.R|/Some.second|, [ResolvedTo(BODY_RESOLVE)] third: R|kotlin/String| = this@R|/Some|.R|/Some.third|): R|Some|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo([ResolvedTo(ANNOTATION_ARGUMENTS)] some: R|Some|): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun bar([ResolvedTo(ANNOTATION_ARGUMENTS)] some: R|Some|): R|kotlin/Unit| { LAZY_BLOCK }