/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.annotation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/annotation-collector/testData/collectToFile")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class AnnotationProcessorBoxTestGenerated extends AbstractAnnotationProcessorBoxTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
    }

    public void testAllFilesPresentInCollectToFile() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/annotation-collector/testData/collectToFile"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
    }

    @TestMetadata("annotatedGettersSetters")
    public void testAnnotatedGettersSetters() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/annotatedGettersSetters/");
    }

    @TestMetadata("annotationInSameFile")
    public void testAnnotationInSameFile() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/annotationInSameFile/");
    }

    @TestMetadata("anonymousClasses")
    public void testAnonymousClasses() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/anonymousClasses/");
    }

    @TestMetadata("classAnnotations")
    public void testClassAnnotations() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/classAnnotations/");
    }

    @TestMetadata("constructors")
    public void testConstructors() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/constructors/");
    }

    @TestMetadata("defaultPackage")
    public void testDefaultPackage() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/defaultPackage/");
    }

    @TestMetadata("fieldAnnotations")
    public void testFieldAnnotations() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/fieldAnnotations/");
    }

    @TestMetadata("inheritedComplex")
    public void testInheritedComplex() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/inheritedComplex/");
    }

    @TestMetadata("inheritedSimple")
    public void testInheritedSimple() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/inheritedSimple/");
    }

    @TestMetadata("inheritedTopLevel")
    public void testInheritedTopLevel() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/inheritedTopLevel/");
    }

    @TestMetadata("localClasses")
    public void testLocalClasses() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/localClasses/");
    }

    @TestMetadata("localFunctions")
    public void testLocalFunctions() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/localFunctions/");
    }

    @TestMetadata("methodAnnotations")
    public void testMethodAnnotations() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/methodAnnotations/");
    }

    @TestMetadata("multiFileTopLevelAnnotated")
    public void testMultiFileTopLevelAnnotated() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/multiFileTopLevelAnnotated/");
    }

    @TestMetadata("nestedClasses")
    public void testNestedClasses() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/nestedClasses/");
    }

    @TestMetadata("platformStatic")
    public void testPlatformStatic() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/platformStatic/");
    }

    @TestMetadata("retentionPoliciesJavaAnnotations")
    public void testRetentionPoliciesJavaAnnotations() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/retentionPoliciesJavaAnnotations/");
    }

    @TestMetadata("retentionPoliciesJavaAnnotationsStubs")
    public void testRetentionPoliciesJavaAnnotationsStubs() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/retentionPoliciesJavaAnnotationsStubs/");
    }

    @TestMetadata("retentionPoliciesKotlinAnnotations")
    public void testRetentionPoliciesKotlinAnnotations() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/retentionPoliciesKotlinAnnotations/");
    }

    @TestMetadata("retentionPoliciesKotlinAnnotationsStubs")
    public void testRetentionPoliciesKotlinAnnotationsStubs() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/retentionPoliciesKotlinAnnotationsStubs/");
    }

    @TestMetadata("topLevelAnnotated")
    public void testTopLevelAnnotated() throws Exception {
        runTest("plugins/annotation-collector/testData/collectToFile/topLevelAnnotated/");
    }
}
