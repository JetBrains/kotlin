/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.quickfix;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.quickfix.AbstractQuickFixTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/quickfix")
@InnerTestClasses({QuickFixTestGenerated.Abstract.class, QuickFixTestGenerated.AddStarProjections.class, QuickFixTestGenerated.AutoImports.class, QuickFixTestGenerated.ChangeSignature.class, QuickFixTestGenerated.CheckArguments.class, QuickFixTestGenerated.CreateFromUsage.class, QuickFixTestGenerated.Expressions.class, QuickFixTestGenerated.Migration.class, QuickFixTestGenerated.Modifiers.class, QuickFixTestGenerated.Nullables.class, QuickFixTestGenerated.Override.class, QuickFixTestGenerated.PlatformClasses.class, QuickFixTestGenerated.Supercalls.class, QuickFixTestGenerated.SupertypeInitialization.class, QuickFixTestGenerated.TypeAddition.class, QuickFixTestGenerated.TypeImports.class, QuickFixTestGenerated.TypeMismatch.class, QuickFixTestGenerated.TypeProjection.class, QuickFixTestGenerated.UselessImports.class, QuickFixTestGenerated.Variables.class, QuickFixTestGenerated.When.class})
public class QuickFixTestGenerated extends AbstractQuickFixTest {
    public void testAllFilesPresentInQuickfix() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix"), Pattern.compile("^before(\\w+)\\.kt$"), true);
    }
    
    @TestMetadata("idea/testData/quickfix/abstract")
    public static class Abstract extends AbstractQuickFixTest {
        @TestMetadata("beforeAbstractFunctionInNonAbstractClass.kt")
        public void testAbstractFunctionInNonAbstractClass() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractFunctionInNonAbstractClass.kt");
        }
        
        @TestMetadata("beforeAbstractFunctionWithBody.kt")
        public void testAbstractFunctionWithBody() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractFunctionWithBody.kt");
        }
        
        @TestMetadata("beforeAbstractFunctionWithBody2.kt")
        public void testAbstractFunctionWithBody2() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractFunctionWithBody2.kt");
        }
        
        @TestMetadata("beforeAbstractFunctionWithBody3.kt")
        public void testAbstractFunctionWithBody3() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractFunctionWithBody3.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyInNonAbstractClass1.kt")
        public void testAbstractPropertyInNonAbstractClass1() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyInNonAbstractClass1.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyInNonAbstractClass2.kt")
        public void testAbstractPropertyInNonAbstractClass2() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyInNonAbstractClass2.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyInPrimaryConstructorParameters.kt")
        public void testAbstractPropertyInPrimaryConstructorParameters() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyInPrimaryConstructorParameters.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyNotInClass.kt")
        public void testAbstractPropertyNotInClass() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyNotInClass.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyWIthInitializer2.kt")
        public void testAbstractPropertyWIthInitializer2() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyWIthInitializer2.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyWIthInitializer3.kt")
        public void testAbstractPropertyWIthInitializer3() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyWIthInitializer3.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyWithGetter1.kt")
        public void testAbstractPropertyWithGetter1() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyWithGetter1.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyWithGetter2.kt")
        public void testAbstractPropertyWithGetter2() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyWithGetter2.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyWithInitializer1.kt")
        public void testAbstractPropertyWithInitializer1() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyWithInitializer1.kt");
        }
        
        @TestMetadata("beforeAbstractPropertyWithSetter.kt")
        public void testAbstractPropertyWithSetter() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeAbstractPropertyWithSetter.kt");
        }
        
        public void testAllFilesPresentInAbstract() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/abstract"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeMustBeInitializedOrBeAbstract.kt")
        public void testMustBeInitializedOrBeAbstract() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeMustBeInitializedOrBeAbstract.kt");
        }
        
        @TestMetadata("beforeNonAbstractFunctionWithNoBody.kt")
        public void testNonAbstractFunctionWithNoBody() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeNonAbstractFunctionWithNoBody.kt");
        }
        
        @TestMetadata("beforeNonMemberAbstractFunction.kt")
        public void testNonMemberAbstractFunction() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeNonMemberAbstractFunction.kt");
        }
        
        @TestMetadata("beforeNonMemberFunctionNoBody.kt")
        public void testNonMemberFunctionNoBody() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeNonMemberFunctionNoBody.kt");
        }
        
        @TestMetadata("beforeRedundantAbstract.kt")
        public void testRedundantAbstract() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeRedundantAbstract.kt");
        }
        
        @TestMetadata("beforeReplaceOpen.kt")
        public void testReplaceOpen() throws Exception {
            doTest("idea/testData/quickfix/abstract/beforeReplaceOpen.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/addStarProjections")
    @InnerTestClasses({AddStarProjections.Cast.class, AddStarProjections.CheckType.class, AddStarProjections.JavaClass.class, AddStarProjections.When.class})
    public static class AddStarProjections extends AbstractQuickFixTest {
        public void testAllFilesPresentInAddStarProjections() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/addStarProjections"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeQualifiedArrayList.kt")
        public void testQualifiedArrayList() throws Exception {
            doTest("idea/testData/quickfix/addStarProjections/beforeQualifiedArrayList.kt");
        }
        
        @TestMetadata("beforeQualifiedList.kt")
        public void testQualifiedList() throws Exception {
            doTest("idea/testData/quickfix/addStarProjections/beforeQualifiedList.kt");
        }
        
        @TestMetadata("beforeQualifiedMap.kt")
        public void testQualifiedMap() throws Exception {
            doTest("idea/testData/quickfix/addStarProjections/beforeQualifiedMap.kt");
        }
        
        @TestMetadata("beforeUnqualifiedList.kt")
        public void testUnqualifiedList() throws Exception {
            doTest("idea/testData/quickfix/addStarProjections/beforeUnqualifiedList.kt");
        }
        
        @TestMetadata("beforeUnqualifiedMap.kt")
        public void testUnqualifiedMap() throws Exception {
            doTest("idea/testData/quickfix/addStarProjections/beforeUnqualifiedMap.kt");
        }
        
        @TestMetadata("beforeUnqualifiedMapOneArg.kt")
        public void testUnqualifiedMapOneArg() throws Exception {
            doTest("idea/testData/quickfix/addStarProjections/beforeUnqualifiedMapOneArg.kt");
        }
        
        @TestMetadata("idea/testData/quickfix/addStarProjections/cast")
        public static class Cast extends AbstractQuickFixTest {
            public void testAllFilesPresentInCast() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/addStarProjections/cast"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeChangeToStarProjection.kt")
            public void testChangeToStarProjection() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/cast/beforeChangeToStarProjection.kt");
            }
            
            @TestMetadata("beforeChangeToStarProjectionNullable.kt")
            public void testChangeToStarProjectionNullable() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/cast/beforeChangeToStarProjectionNullable.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/addStarProjections/checkType")
        public static class CheckType extends AbstractQuickFixTest {
            public void testAllFilesPresentInCheckType() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/addStarProjections/checkType"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeChangeToStarProjectionMultipleParameters.kt")
            public void testChangeToStarProjectionMultipleParameters() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/checkType/beforeChangeToStarProjectionMultipleParameters.kt");
            }
            
            @TestMetadata("beforeChangeToStarProjectionNullable.kt")
            public void testChangeToStarProjectionNullable() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/checkType/beforeChangeToStarProjectionNullable.kt");
            }
            
            @TestMetadata("beforeChangeToStarProjectionSingleParameter.kt")
            public void testChangeToStarProjectionSingleParameter() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/checkType/beforeChangeToStarProjectionSingleParameter.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/addStarProjections/javaClass")
        public static class JavaClass extends AbstractQuickFixTest {
            public void testAllFilesPresentInJavaClass() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/addStarProjections/javaClass"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeFooOfC2.kt")
            public void testFooOfC2() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/javaClass/beforeFooOfC2.kt");
            }
            
            @TestMetadata("beforeJavaClassOfC1Runtime.kt")
            public void testJavaClassOfC1Runtime() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/javaClass/beforeJavaClassOfC1Runtime.kt");
            }
            
            @TestMetadata("beforeJavaClassOfC2Runtime.kt")
            public void testJavaClassOfC2Runtime() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/javaClass/beforeJavaClassOfC2Runtime.kt");
            }
            
            @TestMetadata("beforeJavaClassOfCRuntime.kt")
            public void testJavaClassOfCRuntime() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/javaClass/beforeJavaClassOfCRuntime.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/addStarProjections/when")
        public static class When extends AbstractQuickFixTest {
            public void testAllFilesPresentInWhen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/addStarProjections/when"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeQualifiedArrayList.kt")
            public void testQualifiedArrayList() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/when/beforeQualifiedArrayList.kt");
            }
            
            @TestMetadata("beforeQualifiedList.kt")
            public void testQualifiedList() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/when/beforeQualifiedList.kt");
            }
            
            @TestMetadata("beforeQualifiedMap.kt")
            public void testQualifiedMap() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/when/beforeQualifiedMap.kt");
            }
            
            @TestMetadata("beforeUnqualifiedList.kt")
            public void testUnqualifiedList() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/when/beforeUnqualifiedList.kt");
            }
            
            @TestMetadata("beforeUnqualifiedMap.kt")
            public void testUnqualifiedMap() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/when/beforeUnqualifiedMap.kt");
            }
            
            @TestMetadata("beforeUnqualifiedMapOneArg.kt")
            public void testUnqualifiedMapOneArg() throws Exception {
                doTest("idea/testData/quickfix/addStarProjections/when/beforeUnqualifiedMapOneArg.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("AddStarProjections");
            suite.addTestSuite(AddStarProjections.class);
            suite.addTestSuite(Cast.class);
            suite.addTestSuite(CheckType.class);
            suite.addTestSuite(JavaClass.class);
            suite.addTestSuite(When.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/quickfix/autoImports")
    public static class AutoImports extends AbstractQuickFixTest {
        public void testAllFilesPresentInAutoImports() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/autoImports"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeCheckNoStackOverflowInImportInnerClassInCurrentFile.kt")
        public void testCheckNoStackOverflowInImportInnerClassInCurrentFile() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeCheckNoStackOverflowInImportInnerClassInCurrentFile.kt");
        }
        
        @TestMetadata("beforeLibraryTopLevelFunctionImportRuntime.kt")
        public void testLibraryTopLevelFunctionImportRuntime() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeLibraryTopLevelFunctionImportRuntime.kt");
        }
        
        @TestMetadata("beforeNamelessClass.kt")
        public void testNamelessClass() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeNamelessClass.kt");
        }
        
        @TestMetadata("beforeNamelessFunction.kt")
        public void testNamelessFunction() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeNamelessFunction.kt");
        }
        
        @TestMetadata("beforeNamelessObject.kt")
        public void testNamelessObject() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeNamelessObject.kt");
        }
        
        @TestMetadata("beforeNamelessParameter.kt")
        public void testNamelessParameter() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeNamelessParameter.kt");
        }
        
        @TestMetadata("beforeNamelessProperty.kt")
        public void testNamelessProperty() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeNamelessProperty.kt");
        }
        
        @TestMetadata("beforeNoImportForAlreadyImported.kt")
        public void testNoImportForAlreadyImported() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeNoImportForAlreadyImported.kt");
        }
        
        @TestMetadata("beforeNoImportForIndex.kt")
        public void testNoImportForIndex() throws Exception {
            doTest("idea/testData/quickfix/autoImports/beforeNoImportForIndex.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/changeSignature")
    public static class ChangeSignature extends AbstractQuickFixTest {
        @TestMetadata("beforeAddConstructorParameter.kt")
        public void testAddConstructorParameter() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeAddConstructorParameter.kt");
        }
        
        @TestMetadata("beforeAddFunctionParameter.kt")
        public void testAddFunctionParameter() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeAddFunctionParameter.kt");
        }
        
        @TestMetadata("beforeAddFunctionParameterAndChangeTypes.kt")
        public void testAddFunctionParameterAndChangeTypes() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeAddFunctionParameterAndChangeTypes.kt");
        }
        
        public void testAllFilesPresentInChangeSignature() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/changeSignature"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeChangeFunctionLiteralParameters1.kt")
        public void testChangeFunctionLiteralParameters1() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeChangeFunctionLiteralParameters1.kt");
        }
        
        @TestMetadata("beforeChangeFunctionLiteralParameters2.kt")
        public void testChangeFunctionLiteralParameters2() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeChangeFunctionLiteralParameters2.kt");
        }
        
        @TestMetadata("beforeRemoveConstructorParameter.kt")
        public void testRemoveConstructorParameter() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeRemoveConstructorParameter.kt");
        }
        
        @TestMetadata("beforeRemoveFunctionFirstParameter.kt")
        public void testRemoveFunctionFirstParameter() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeRemoveFunctionFirstParameter.kt");
        }
        
        @TestMetadata("beforeRemoveFunctionSecondParameter1.kt")
        public void testRemoveFunctionSecondParameter1() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeRemoveFunctionSecondParameter1.kt");
        }
        
        @TestMetadata("beforeRemoveFunctionSecondParameter2.kt")
        public void testRemoveFunctionSecondParameter2() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeRemoveFunctionSecondParameter2.kt");
        }
        
        @TestMetadata("beforeRemoveNamedParameter.kt")
        public void testRemoveNamedParameter() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeRemoveNamedParameter.kt");
        }
        
        @TestMetadata("beforeRemoveUnusedParameter.kt")
        public void testRemoveUnusedParameter() throws Exception {
            doTest("idea/testData/quickfix/changeSignature/beforeRemoveUnusedParameter.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/checkArguments")
    public static class CheckArguments extends AbstractQuickFixTest {
        public void testAllFilesPresentInCheckArguments() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/checkArguments"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeMixedNamedAndPositionalArguments.kt")
        public void testMixedNamedAndPositionalArguments() throws Exception {
            doTest("idea/testData/quickfix/checkArguments/beforeMixedNamedAndPositionalArguments.kt");
        }
        
        @TestMetadata("beforeMixedNamedAndPositionalArgumentsConstructor.kt")
        public void testMixedNamedAndPositionalArgumentsConstructor() throws Exception {
            doTest("idea/testData/quickfix/checkArguments/beforeMixedNamedAndPositionalArgumentsConstructor.kt");
        }
        
        @TestMetadata("beforeMixedNamedAndPositionalArgumentsMultiple.kt")
        public void testMixedNamedAndPositionalArgumentsMultiple() throws Exception {
            doTest("idea/testData/quickfix/checkArguments/beforeMixedNamedAndPositionalArgumentsMultiple.kt");
        }
        
        @TestMetadata("beforeMixedNamedAndPositionalArgumentsSubtype.kt")
        public void testMixedNamedAndPositionalArgumentsSubtype() throws Exception {
            doTest("idea/testData/quickfix/checkArguments/beforeMixedNamedAndPositionalArgumentsSubtype.kt");
        }
        
        @TestMetadata("beforeMixedNamedAndPositionalArgumentsUsedNamed.kt")
        public void testMixedNamedAndPositionalArgumentsUsedNamed() throws Exception {
            doTest("idea/testData/quickfix/checkArguments/beforeMixedNamedAndPositionalArgumentsUsedNamed.kt");
        }
        
        @TestMetadata("beforeMixedNamedAndPositionalArgumentsUsedPositional.kt")
        public void testMixedNamedAndPositionalArgumentsUsedPositional() throws Exception {
            doTest("idea/testData/quickfix/checkArguments/beforeMixedNamedAndPositionalArgumentsUsedPositional.kt");
        }
        
        @TestMetadata("beforeNonVarargSpread.kt")
        public void testNonVarargSpread() throws Exception {
            doTest("idea/testData/quickfix/checkArguments/beforeNonVarargSpread.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/createFromUsage")
    @InnerTestClasses({CreateFromUsage.Component.class, CreateFromUsage.Get.class, CreateFromUsage.HasNext.class, CreateFromUsage.Iterator.class, CreateFromUsage.Next.class, CreateFromUsage.Set.class})
    public static class CreateFromUsage extends AbstractQuickFixTest {
        public void testAllFilesPresentInCreateFromUsage() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/createFromUsage"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("idea/testData/quickfix/createFromUsage/component")
        public static class Component extends AbstractQuickFixTest {
            public void testAllFilesPresentInComponent() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/createFromUsage/component"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeCreateComponentFromUsage1.kt")
            public void testCreateComponentFromUsage1() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/component/beforeCreateComponentFromUsage1.kt");
            }
            
            @TestMetadata("beforeCreateComponentFromUsage2.kt")
            public void testCreateComponentFromUsage2() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/component/beforeCreateComponentFromUsage2.kt");
            }
            
            @TestMetadata("beforeCreateComponentFromUsage3.kt")
            public void testCreateComponentFromUsage3() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/component/beforeCreateComponentFromUsage3.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/createFromUsage/get")
        public static class Get extends AbstractQuickFixTest {
            public void testAllFilesPresentInGet() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/createFromUsage/get"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeCreateGetFromUsage1.kt")
            public void testCreateGetFromUsage1() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage1.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage10.kt")
            public void testCreateGetFromUsage10() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage10.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage11.kt")
            public void testCreateGetFromUsage11() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage11.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage12.kt")
            public void testCreateGetFromUsage12() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage12.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage13.kt")
            public void testCreateGetFromUsage13() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage13.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage2.kt")
            public void testCreateGetFromUsage2() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage2.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage3.kt")
            public void testCreateGetFromUsage3() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage3.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage4.kt")
            public void testCreateGetFromUsage4() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage4.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage5.kt")
            public void testCreateGetFromUsage5() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage5.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage6.kt")
            public void testCreateGetFromUsage6() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage6.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage7.kt")
            public void testCreateGetFromUsage7() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage7.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage8.kt")
            public void testCreateGetFromUsage8() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage8.kt");
            }
            
            @TestMetadata("beforeCreateGetFromUsage9.kt")
            public void testCreateGetFromUsage9() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/get/beforeCreateGetFromUsage9.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/createFromUsage/hasNext")
        public static class HasNext extends AbstractQuickFixTest {
            public void testAllFilesPresentInHasNext() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/createFromUsage/hasNext"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeCreateHasNextFromUsage1.kt")
            public void testCreateHasNextFromUsage1() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/hasNext/beforeCreateHasNextFromUsage1.kt");
            }
            
            @TestMetadata("beforeCreateHasNextFromUsage2.kt")
            public void testCreateHasNextFromUsage2() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/hasNext/beforeCreateHasNextFromUsage2.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/createFromUsage/iterator")
        public static class Iterator extends AbstractQuickFixTest {
            public void testAllFilesPresentInIterator() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/createFromUsage/iterator"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeCreateIteratorFromUsage1.kt")
            public void testCreateIteratorFromUsage1() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/iterator/beforeCreateIteratorFromUsage1.kt");
            }
            
            @TestMetadata("beforeCreateIteratorFromUsage2.kt")
            public void testCreateIteratorFromUsage2() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/iterator/beforeCreateIteratorFromUsage2.kt");
            }
            
            @TestMetadata("beforeCreateIteratorFromUsage3.kt")
            public void testCreateIteratorFromUsage3() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/iterator/beforeCreateIteratorFromUsage3.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/createFromUsage/next")
        public static class Next extends AbstractQuickFixTest {
            public void testAllFilesPresentInNext() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/createFromUsage/next"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeCreateNextFromUsage1.kt")
            public void testCreateNextFromUsage1() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/next/beforeCreateNextFromUsage1.kt");
            }
            
            @TestMetadata("beforeCreateNextFromUsage2.kt")
            public void testCreateNextFromUsage2() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/next/beforeCreateNextFromUsage2.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/createFromUsage/set")
        public static class Set extends AbstractQuickFixTest {
            public void testAllFilesPresentInSet() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/createFromUsage/set"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeCreateSetFromUsage1.kt")
            public void testCreateSetFromUsage1() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/set/beforeCreateSetFromUsage1.kt");
            }
            
            @TestMetadata("beforeCreateSetFromUsage2.kt")
            public void testCreateSetFromUsage2() throws Exception {
                doTest("idea/testData/quickfix/createFromUsage/set/beforeCreateSetFromUsage2.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("CreateFromUsage");
            suite.addTestSuite(CreateFromUsage.class);
            suite.addTestSuite(Component.class);
            suite.addTestSuite(Get.class);
            suite.addTestSuite(HasNext.class);
            suite.addTestSuite(Iterator.class);
            suite.addTestSuite(Next.class);
            suite.addTestSuite(Set.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/quickfix/expressions")
    public static class Expressions extends AbstractQuickFixTest {
        public void testAllFilesPresentInExpressions() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/expressions"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeDanglingFunctionLiteralArgument.kt")
        public void testDanglingFunctionLiteralArgument() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeDanglingFunctionLiteralArgument.kt");
        }
        
        @TestMetadata("beforeUnnecessaryNonNullAssertion1.kt")
        public void testUnnecessaryNonNullAssertion1() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUnnecessaryNonNullAssertion1.kt");
        }
        
        @TestMetadata("beforeUnnecessaryNonNullAssertion2.kt")
        public void testUnnecessaryNonNullAssertion2() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUnnecessaryNonNullAssertion2.kt");
        }
        
        @TestMetadata("beforeUnnecessaryNonNullAssertion3.kt")
        public void testUnnecessaryNonNullAssertion3() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUnnecessaryNonNullAssertion3.kt");
        }
        
        @TestMetadata("beforeUnnecessarySafeCall1.kt")
        public void testUnnecessarySafeCall1() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUnnecessarySafeCall1.kt");
        }
        
        @TestMetadata("beforeUnsafeCall1.kt")
        public void testUnsafeCall1() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUnsafeCall1.kt");
        }
        
        @TestMetadata("beforeUnsafeCall2.kt")
        public void testUnsafeCall2() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUnsafeCall2.kt");
        }
        
        @TestMetadata("beforeUnsafeCall3.kt")
        public void testUnsafeCall3() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUnsafeCall3.kt");
        }
        
        @TestMetadata("beforeUselessCast.kt")
        public void testUselessCast() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUselessCast.kt");
        }
        
        @TestMetadata("beforeUselessCastStaticAssertIsFine.kt")
        public void testUselessCastStaticAssertIsFine() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUselessCastStaticAssertIsFine.kt");
        }
        
        @TestMetadata("beforeUselessElvis.kt")
        public void testUselessElvis() throws Exception {
            doTest("idea/testData/quickfix/expressions/beforeUselessElvis.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/migration")
    public static class Migration extends AbstractQuickFixTest {
        public void testAllFilesPresentInMigration() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/migration"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeBareSure.kt")
        public void testBareSure() throws Exception {
            doTest("idea/testData/quickfix/migration/beforeBareSure.kt");
        }
        
        @TestMetadata("beforeSure.kt")
        public void testSure() throws Exception {
            doTest("idea/testData/quickfix/migration/beforeSure.kt");
        }
        
        @TestMetadata("beforeValVarFromParameters.kt")
        public void testValVarFromParameters() throws Exception {
            doTest("idea/testData/quickfix/migration/beforeValVarFromParameters.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/modifiers")
    @InnerTestClasses({Modifiers.AddOpenToClassDeclaration.class})
    public static class Modifiers extends AbstractQuickFixTest {
        @TestMetadata("beforeAddInnerModifier.kt")
        public void testAddInnerModifier() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeAddInnerModifier.kt");
        }
        
        public void testAllFilesPresentInModifiers() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/modifiers"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeCannotMakeClassAnnotation.kt")
        public void testCannotMakeClassAnnotation() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeCannotMakeClassAnnotation.kt");
        }
        
        @TestMetadata("beforeFinalTrait.kt")
        public void testFinalTrait() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeFinalTrait.kt");
        }
        
        @TestMetadata("beforeIllegalEnumAnnotation1.kt")
        public void testIllegalEnumAnnotation1() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeIllegalEnumAnnotation1.kt");
        }
        
        @TestMetadata("beforeIllegalEnumAnnotation2.kt")
        public void testIllegalEnumAnnotation2() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeIllegalEnumAnnotation2.kt");
        }
        
        @TestMetadata("beforeNestedClassNotAllowed.kt")
        public void testNestedClassNotAllowed() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeNestedClassNotAllowed.kt");
        }
        
        @TestMetadata("beforeNotAnAnnotationClass.kt")
        public void testNotAnAnnotationClass() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeNotAnAnnotationClass.kt");
        }
        
        @TestMetadata("beforeOpenMemberInFinalClass1.kt")
        public void testOpenMemberInFinalClass1() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeOpenMemberInFinalClass1.kt");
        }
        
        @TestMetadata("beforeOpenMemberInFinalClass2.kt")
        public void testOpenMemberInFinalClass2() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeOpenMemberInFinalClass2.kt");
        }
        
        @TestMetadata("beforeOpenModifierInEnum.kt")
        public void testOpenModifierInEnum() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeOpenModifierInEnum.kt");
        }
        
        @TestMetadata("beforePackageMemberCannotBeProtected.kt")
        public void testPackageMemberCannotBeProtected() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforePackageMemberCannotBeProtected.kt");
        }
        
        @TestMetadata("beforeRemoveIncompatibleModifier.kt")
        public void testRemoveIncompatibleModifier() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeRemoveIncompatibleModifier.kt");
        }
        
        @TestMetadata("beforeRemoveRedundantModifier1.kt")
        public void testRemoveRedundantModifier1() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeRemoveRedundantModifier1.kt");
        }
        
        @TestMetadata("beforeRemoveRedundantModifier2.kt")
        public void testRemoveRedundantModifier2() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeRemoveRedundantModifier2.kt");
        }
        
        @TestMetadata("beforeRemoveRedundantModifier3.kt")
        public void testRemoveRedundantModifier3() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeRemoveRedundantModifier3.kt");
        }
        
        @TestMetadata("beforeRemoveSupertype1.kt")
        public void testRemoveSupertype1() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeRemoveSupertype1.kt");
        }
        
        @TestMetadata("beforeRemoveSupertype2.kt")
        public void testRemoveSupertype2() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeRemoveSupertype2.kt");
        }
        
        @TestMetadata("beforeRemoveSupertype3.kt")
        public void testRemoveSupertype3() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeRemoveSupertype3.kt");
        }
        
        @TestMetadata("beforeRemoveSupertype4.kt")
        public void testRemoveSupertype4() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeRemoveSupertype4.kt");
        }
        
        @TestMetadata("beforeVisibilityModifer1.kt")
        public void testVisibilityModifer1() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeVisibilityModifer1.kt");
        }
        
        @TestMetadata("beforeVisibilityModifer2.kt")
        public void testVisibilityModifer2() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeVisibilityModifer2.kt");
        }
        
        @TestMetadata("beforeVisibilityModiferParameter.kt")
        public void testVisibilityModiferParameter() throws Exception {
            doTest("idea/testData/quickfix/modifiers/beforeVisibilityModiferParameter.kt");
        }
        
        @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration")
        @InnerTestClasses({AddOpenToClassDeclaration.FinalJavaClass.class})
        public static class AddOpenToClassDeclaration extends AbstractQuickFixTest {
            public void testAllFilesPresentInAddOpenToClassDeclaration() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeEnumSupertype.kt")
            public void testEnumSupertype() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeEnumSupertype.kt");
            }
            
            @TestMetadata("beforeEnumUpperBound.kt")
            public void testEnumUpperBound() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeEnumUpperBound.kt");
            }
            
            @TestMetadata("beforeExplicitlyFinalSupertype.kt")
            public void testExplicitlyFinalSupertype() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeExplicitlyFinalSupertype.kt");
            }
            
            @TestMetadata("beforeExplicitlyFinalUpperBound.kt")
            public void testExplicitlyFinalUpperBound() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeExplicitlyFinalUpperBound.kt");
            }
            
            @TestMetadata("beforeFinalLibrarySupertype.kt")
            public void testFinalLibrarySupertype() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeFinalLibrarySupertype.kt");
            }
            
            @TestMetadata("beforeFinalLibraryUpperBound.kt")
            public void testFinalLibraryUpperBound() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeFinalLibraryUpperBound.kt");
            }
            
            @TestMetadata("beforeFinalSupertype.kt")
            public void testFinalSupertype() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeFinalSupertype.kt");
            }
            
            @TestMetadata("beforeFinalUpperBound.kt")
            public void testFinalUpperBound() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeFinalUpperBound.kt");
            }
            
            @TestMetadata("beforeImplementTraitFinalSupertype.kt")
            public void testImplementTraitFinalSupertype() throws Exception {
                doTest("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/beforeImplementTraitFinalSupertype.kt");
            }
            
            @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass")
            @InnerTestClasses({FinalJavaClass.JavaCode.class})
            public static class FinalJavaClass extends AbstractQuickFixTest {
                public void testAllFilesPresentInFinalJavaClass() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass"), Pattern.compile("^before(\\w+)\\.kt$"), true);
                }
                
                @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass/javaCode")
                @InnerTestClasses({})
                public static class JavaCode extends AbstractQuickFixTest {
                    public void testAllFilesPresentInJavaCode() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass/javaCode"), Pattern.compile("^before(\\w+)\\.kt$"), true);
                    }
                    
                    public static Test innerSuite() {
                        TestSuite suite = new TestSuite("JavaCode");
                        suite.addTestSuite(JavaCode.class);
                        return suite;
                    }
                }
                
                public static Test innerSuite() {
                    TestSuite suite = new TestSuite("FinalJavaClass");
                    suite.addTestSuite(FinalJavaClass.class);
                    suite.addTest(JavaCode.innerSuite());
                    return suite;
                }
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("AddOpenToClassDeclaration");
                suite.addTestSuite(AddOpenToClassDeclaration.class);
                suite.addTest(FinalJavaClass.innerSuite());
                return suite;
            }
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Modifiers");
            suite.addTestSuite(Modifiers.class);
            suite.addTest(AddOpenToClassDeclaration.innerSuite());
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/quickfix/nullables")
    @InnerTestClasses({Nullables.UnsafeInfixCall.class})
    public static class Nullables extends AbstractQuickFixTest {
        public void testAllFilesPresentInNullables() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/nullables"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeRemoveRedundantNullable.kt")
        public void testRemoveRedundantNullable() throws Exception {
            doTest("idea/testData/quickfix/nullables/beforeRemoveRedundantNullable.kt");
        }
        
        @TestMetadata("beforeRemoveSupertypeNullable1.kt")
        public void testRemoveSupertypeNullable1() throws Exception {
            doTest("idea/testData/quickfix/nullables/beforeRemoveSupertypeNullable1.kt");
        }
        
        @TestMetadata("beforeRemoveSupertypeNullable2.kt")
        public void testRemoveSupertypeNullable2() throws Exception {
            doTest("idea/testData/quickfix/nullables/beforeRemoveSupertypeNullable2.kt");
        }
        
        @TestMetadata("beforeRemoveUselessNullable.kt")
        public void testRemoveUselessNullable() throws Exception {
            doTest("idea/testData/quickfix/nullables/beforeRemoveUselessNullable.kt");
        }
        
        @TestMetadata("idea/testData/quickfix/nullables/unsafeInfixCall")
        public static class UnsafeInfixCall extends AbstractQuickFixTest {
            public void testAllFilesPresentInUnsafeInfixCall() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/nullables/unsafeInfixCall"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeUnsafeInfixCall.kt")
            public void testUnsafeInfixCall() throws Exception {
                doTest("idea/testData/quickfix/nullables/unsafeInfixCall/beforeUnsafeInfixCall.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Nullables");
            suite.addTestSuite(Nullables.class);
            suite.addTestSuite(UnsafeInfixCall.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/quickfix/override")
    @InnerTestClasses({Override.NothingToOverride.class, Override.TypeMismatchOnOverride.class})
    public static class Override extends AbstractQuickFixTest {
        public void testAllFilesPresentInOverride() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/override"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeChangeToInvocation.kt")
        public void testChangeToInvocation() throws Exception {
            doTest("idea/testData/quickfix/override/beforeChangeToInvocation.kt");
        }
        
        @TestMetadata("beforeOverriddingMultipleFinalMethods.kt")
        public void testOverriddingMultipleFinalMethods() throws Exception {
            doTest("idea/testData/quickfix/override/beforeOverriddingMultipleFinalMethods.kt");
        }
        
        @TestMetadata("beforeOverridingFinalJavaMethod.kt")
        public void testOverridingFinalJavaMethod() throws Exception {
            doTest("idea/testData/quickfix/override/beforeOverridingFinalJavaMethod.kt");
        }
        
        @TestMetadata("beforeOverridingFinalMethod.kt")
        public void testOverridingFinalMethod() throws Exception {
            doTest("idea/testData/quickfix/override/beforeOverridingFinalMethod.kt");
        }
        
        @TestMetadata("beforeOverridingFinalProperty.kt")
        public void testOverridingFinalProperty() throws Exception {
            doTest("idea/testData/quickfix/override/beforeOverridingFinalProperty.kt");
        }
        
        @TestMetadata("beforeOverridingWritableAndNotWritableFinalMembers.kt")
        public void testOverridingWritableAndNotWritableFinalMembers() throws Exception {
            doTest("idea/testData/quickfix/override/beforeOverridingWritableAndNotWritableFinalMembers.kt");
        }
        
        @TestMetadata("beforeParameterNameChangedAmbiguousRename.kt")
        public void testParameterNameChangedAmbiguousRename() throws Exception {
            doTest("idea/testData/quickfix/override/beforeParameterNameChangedAmbiguousRename.kt");
        }
        
        @TestMetadata("beforeParameterNameChangedMultipleOverrideRenamePossible.kt")
        public void testParameterNameChangedMultipleOverrideRenamePossible() throws Exception {
            doTest("idea/testData/quickfix/override/beforeParameterNameChangedMultipleOverrideRenamePossible.kt");
        }
        
        @TestMetadata("beforeParameterNameChangedRenamePossible.kt")
        public void testParameterNameChangedRenamePossible() throws Exception {
            doTest("idea/testData/quickfix/override/beforeParameterNameChangedRenamePossible.kt");
        }
        
        @TestMetadata("beforeVirtualMethodHidden.kt")
        public void testVirtualMethodHidden() throws Exception {
            doTest("idea/testData/quickfix/override/beforeVirtualMethodHidden.kt");
        }
        
        @TestMetadata("idea/testData/quickfix/override/nothingToOverride")
        public static class NothingToOverride extends AbstractQuickFixTest {
            @TestMetadata("beforeAddFunction.kt")
            public void testAddFunction() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddFunction.kt");
            }
            
            @TestMetadata("beforeAddFunctionAbstractClass.kt")
            public void testAddFunctionAbstractClass() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddFunctionAbstractClass.kt");
            }
            
            @TestMetadata("beforeAddFunctionNoBody.kt")
            public void testAddFunctionNoBody() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddFunctionNoBody.kt");
            }
            
            @TestMetadata("beforeAddFunctionNonUnitReturnType.kt")
            public void testAddFunctionNonUnitReturnType() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddFunctionNonUnitReturnType.kt");
            }
            
            @TestMetadata("beforeAddFunctionTrait.kt")
            public void testAddFunctionTrait() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddFunctionTrait.kt");
            }
            
            @TestMetadata("beforeAddFunctionTwoSuperclasses.kt")
            public void testAddFunctionTwoSuperclasses() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddFunctionTwoSuperclasses.kt");
            }
            
            @TestMetadata("beforeAddFunctionTwoTraits.kt")
            public void testAddFunctionTwoTraits() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddFunctionTwoTraits.kt");
            }
            
            @TestMetadata("beforeAddParameter.kt")
            public void testAddParameter() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddParameter.kt");
            }
            
            @TestMetadata("beforeAddParameterGenericClass.kt")
            public void testAddParameterGenericClass() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddParameterGenericClass.kt");
            }
            
            @TestMetadata("beforeAddParameterMultiple.kt")
            public void testAddParameterMultiple() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddParameterMultiple.kt");
            }
            
            @TestMetadata("beforeAddParameterPreserveVisibility.kt")
            public void testAddParameterPreserveVisibility() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddParameterPreserveVisibility.kt");
            }
            
            @TestMetadata("beforeAddParameterTwoSupertraits.kt")
            public void testAddParameterTwoSupertraits() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddParameterTwoSupertraits.kt");
            }
            
            @TestMetadata("beforeAddParameterTwoSupertypes.kt")
            public void testAddParameterTwoSupertypes() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeAddParameterTwoSupertypes.kt");
            }
            
            public void testAllFilesPresentInNothingToOverride() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/override/nothingToOverride"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeChangeParameterType.kt")
            public void testChangeParameterType() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeParameterType.kt");
            }
            
            @TestMetadata("beforeChangeParameterTypeAbstractSuperclass.kt")
            public void testChangeParameterTypeAbstractSuperclass() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeParameterTypeAbstractSuperclass.kt");
            }
            
            @TestMetadata("beforeChangeParameterTypeInTrait.kt")
            public void testChangeParameterTypeInTrait() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeParameterTypeInTrait.kt");
            }
            
            @TestMetadata("beforeChangeParameterTypeMatchNames.kt")
            public void testChangeParameterTypeMatchNames() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeParameterTypeMatchNames.kt");
            }
            
            @TestMetadata("beforeChangeParameterTypeModifyOrder.kt")
            public void testChangeParameterTypeModifyOrder() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeParameterTypeModifyOrder.kt");
            }
            
            @TestMetadata("beforeChangeParameterTypeOpenOverride.kt")
            public void testChangeParameterTypeOpenOverride() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeParameterTypeOpenOverride.kt");
            }
            
            @TestMetadata("beforeChangeParameterTypeSingleExpressionFunction.kt")
            public void testChangeParameterTypeSingleExpressionFunction() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeParameterTypeSingleExpressionFunction.kt");
            }
            
            @TestMetadata("beforeChangeParameterTypeSuperTrait.kt")
            public void testChangeParameterTypeSuperTrait() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeParameterTypeSuperTrait.kt");
            }
            
            @TestMetadata("beforeChangeReturnType.kt")
            public void testChangeReturnType() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeChangeReturnType.kt");
            }
            
            @TestMetadata("beforeNoOpenSuperFunction.kt")
            public void testNoOpenSuperFunction() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeNoOpenSuperFunction.kt");
            }
            
            @TestMetadata("beforeOverrideJavaMethod.kt")
            public void testOverrideJavaMethod() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeOverrideJavaMethod.kt");
            }
            
            @TestMetadata("beforeRemoveOverride.kt")
            public void testRemoveOverride() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeRemoveOverride.kt");
            }
            
            @TestMetadata("beforeRemoveParameter.kt")
            public void testRemoveParameter() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeRemoveParameter.kt");
            }
            
            @TestMetadata("beforeRemoveParameterTwoTraits.kt")
            public void testRemoveParameterTwoTraits() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeRemoveParameterTwoTraits.kt");
            }
            
            @TestMetadata("beforeSwapParametersGenericClass.kt")
            public void testSwapParametersGenericClass() throws Exception {
                doTest("idea/testData/quickfix/override/nothingToOverride/beforeSwapParametersGenericClass.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/override/typeMismatchOnOverride")
        public static class TypeMismatchOnOverride extends AbstractQuickFixTest {
            public void testAllFilesPresentInTypeMismatchOnOverride() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/override/typeMismatchOnOverride"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeCantChangeMultipleOverriddenPropertiesTypes.kt")
            public void testCantChangeMultipleOverriddenPropertiesTypes() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeCantChangeMultipleOverriddenPropertiesTypes.kt");
            }
            
            @TestMetadata("beforeCantChangeOverriddenPropertyTypeToMatchOverridingProperty.kt")
            public void testCantChangeOverriddenPropertyTypeToMatchOverridingProperty() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeCantChangeOverriddenPropertyTypeToMatchOverridingProperty.kt");
            }
            
            @TestMetadata("beforeCantChangePropertyTypeToMatchOverridenProperties.kt")
            public void testCantChangePropertyTypeToMatchOverridenProperties() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeCantChangePropertyTypeToMatchOverridenProperties.kt");
            }
            
            @TestMetadata("beforeCantChangeReturnTypeOfOverriddenFunction.kt")
            public void testCantChangeReturnTypeOfOverriddenFunction() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeCantChangeReturnTypeOfOverriddenFunction.kt");
            }
            
            @TestMetadata("beforeChangeOverriddenPropertyType1.kt")
            public void testChangeOverriddenPropertyType1() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeChangeOverriddenPropertyType1.kt");
            }
            
            @TestMetadata("beforeChangeOverriddenPropertyType2.kt")
            public void testChangeOverriddenPropertyType2() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeChangeOverriddenPropertyType2.kt");
            }
            
            @TestMetadata("beforeChangeOverridingPropertyTypeToFunctionType.kt")
            public void testChangeOverridingPropertyTypeToFunctionType() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeChangeOverridingPropertyTypeToFunctionType.kt");
            }
            
            @TestMetadata("beforeChangeReturnTypeOfOverriddenFunction.kt")
            public void testChangeReturnTypeOfOverriddenFunction() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeChangeReturnTypeOfOverriddenFunction.kt");
            }
            
            @TestMetadata("beforePropertyReturnTypeMismatchOnOverride.kt")
            public void testPropertyReturnTypeMismatchOnOverride() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforePropertyReturnTypeMismatchOnOverride.kt");
            }
            
            @TestMetadata("beforePropertyTypeMismatchOnOverrideIntLong.kt")
            public void testPropertyTypeMismatchOnOverrideIntLong() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforePropertyTypeMismatchOnOverrideIntLong.kt");
            }
            
            @TestMetadata("beforePropertyTypeMismatchOnOverrideIntUnit.kt")
            public void testPropertyTypeMismatchOnOverrideIntUnit() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforePropertyTypeMismatchOnOverrideIntUnit.kt");
            }
            
            @TestMetadata("beforeReturnTypeMismatchOnMultipleOverride.kt")
            public void testReturnTypeMismatchOnMultipleOverride() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeReturnTypeMismatchOnMultipleOverride.kt");
            }
            
            @TestMetadata("beforeReturnTypeMismatchOnMultipleOverrideAmbiguity.kt")
            public void testReturnTypeMismatchOnMultipleOverrideAmbiguity() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeReturnTypeMismatchOnMultipleOverrideAmbiguity.kt");
            }
            
            @TestMetadata("beforeReturnTypeMismatchOnOverrideIntLong.kt")
            public void testReturnTypeMismatchOnOverrideIntLong() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeReturnTypeMismatchOnOverrideIntLong.kt");
            }
            
            @TestMetadata("beforeReturnTypeMismatchOnOverrideIntUnit.kt")
            public void testReturnTypeMismatchOnOverrideIntUnit() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeReturnTypeMismatchOnOverrideIntUnit.kt");
            }
            
            @TestMetadata("beforeReturnTypeMismatchOnOverrideUnitInt.kt")
            public void testReturnTypeMismatchOnOverrideUnitInt() throws Exception {
                doTest("idea/testData/quickfix/override/typeMismatchOnOverride/beforeReturnTypeMismatchOnOverrideUnitInt.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Override");
            suite.addTestSuite(Override.class);
            suite.addTestSuite(NothingToOverride.class);
            suite.addTestSuite(TypeMismatchOnOverride.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/quickfix/platformClasses")
    public static class PlatformClasses extends AbstractQuickFixTest {
        public void testAllFilesPresentInPlatformClasses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/platformClasses"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeMapPlatformClassToKotlin1.kt")
        public void testMapPlatformClassToKotlin1() throws Exception {
            doTest("idea/testData/quickfix/platformClasses/beforeMapPlatformClassToKotlin1.kt");
        }
        
        @TestMetadata("beforeMapPlatformClassToKotlin2.kt")
        public void testMapPlatformClassToKotlin2() throws Exception {
            doTest("idea/testData/quickfix/platformClasses/beforeMapPlatformClassToKotlin2.kt");
        }
        
        @TestMetadata("beforeMapPlatformClassToKotlin3.kt")
        public void testMapPlatformClassToKotlin3() throws Exception {
            doTest("idea/testData/quickfix/platformClasses/beforeMapPlatformClassToKotlin3.kt");
        }
        
        @TestMetadata("beforeMapPlatformClassToKotlin4.kt")
        public void testMapPlatformClassToKotlin4() throws Exception {
            doTest("idea/testData/quickfix/platformClasses/beforeMapPlatformClassToKotlin4.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/supercalls")
    public static class Supercalls extends AbstractQuickFixTest {
        public void testAllFilesPresentInSupercalls() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/supercalls"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeTypeArgumentsRedundantInSuperQualifier.kt")
        public void testTypeArgumentsRedundantInSuperQualifier() throws Exception {
            doTest("idea/testData/quickfix/supercalls/beforeTypeArgumentsRedundantInSuperQualifier.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/supertypeInitialization")
    public static class SupertypeInitialization extends AbstractQuickFixTest {
        public void testAllFilesPresentInSupertypeInitialization() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/supertypeInitialization"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeSupertypeNotInitialized.kt")
        public void testSupertypeNotInitialized() throws Exception {
            doTest("idea/testData/quickfix/supertypeInitialization/beforeSupertypeNotInitialized.kt");
        }
        
        @TestMetadata("beforeSupertypeNotInitializedDefaultParameters.kt")
        public void testSupertypeNotInitializedDefaultParameters() throws Exception {
            doTest("idea/testData/quickfix/supertypeInitialization/beforeSupertypeNotInitializedDefaultParameters.kt");
        }
        
        @TestMetadata("beforeSupertypeNotInitializedEmptyConstructor.kt")
        public void testSupertypeNotInitializedEmptyConstructor() throws Exception {
            doTest("idea/testData/quickfix/supertypeInitialization/beforeSupertypeNotInitializedEmptyConstructor.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/typeAddition")
    public static class TypeAddition extends AbstractQuickFixTest {
        public void testAllFilesPresentInTypeAddition() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeAddition"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeAmbiguousFunctionReturnType.kt")
        public void testAmbiguousFunctionReturnType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforeAmbiguousFunctionReturnType.kt");
        }
        
        @TestMetadata("beforeAmbiguousPropertyReturnType.kt")
        public void testAmbiguousPropertyReturnType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforeAmbiguousPropertyReturnType.kt");
        }
        
        @TestMetadata("beforeChangeAccessorTypeToFunctionType.kt")
        public void testChangeAccessorTypeToFunctionType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforeChangeAccessorTypeToFunctionType.kt");
        }
        
        @TestMetadata("beforeNoAddErrorType.kt")
        public void testNoAddErrorType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforeNoAddErrorType.kt");
        }
        
        @TestMetadata("beforeProtectedFunWithoutReturnType.kt")
        public void testProtectedFunWithoutReturnType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforeProtectedFunWithoutReturnType.kt");
        }
        
        @TestMetadata("beforePublicFunWithoutBody.kt")
        public void testPublicFunWithoutBody() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforePublicFunWithoutBody.kt");
        }
        
        @TestMetadata("beforePublicFunWithoutReturnType.kt")
        public void testPublicFunWithoutReturnType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforePublicFunWithoutReturnType.kt");
        }
        
        @TestMetadata("beforePublicFunWithoutReturnTypeCaretOnParameter.kt")
        public void testPublicFunWithoutReturnTypeCaretOnParameter() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforePublicFunWithoutReturnTypeCaretOnParameter.kt");
        }
        
        @TestMetadata("beforePublicValWithoutReturnType.kt")
        public void testPublicValWithoutReturnType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforePublicValWithoutReturnType.kt");
        }
        
        @TestMetadata("beforePublicValWithoutReturnTypeCaretOnPublic.kt")
        public void testPublicValWithoutReturnTypeCaretOnPublic() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforePublicValWithoutReturnTypeCaretOnPublic.kt");
        }
        
        @TestMetadata("beforeWrongGetterParameterType.kt")
        public void testWrongGetterParameterType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforeWrongGetterParameterType.kt");
        }
        
        @TestMetadata("beforeWrongSetterParameterType.kt")
        public void testWrongSetterParameterType() throws Exception {
            doTest("idea/testData/quickfix/typeAddition/beforeWrongSetterParameterType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/typeImports")
    public static class TypeImports extends AbstractQuickFixTest {
        public void testAllFilesPresentInTypeImports() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeImports"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeHasThisImport.kt")
        public void testHasThisImport() throws Exception {
            doTest("idea/testData/quickfix/typeImports/beforeHasThisImport.kt");
        }
        
        @TestMetadata("beforeNoImportFromTheSameFile.kt")
        public void testNoImportFromTheSameFile() throws Exception {
            doTest("idea/testData/quickfix/typeImports/beforeNoImportFromTheSameFile.kt");
        }
        
        @TestMetadata("beforeNoImportJavaLang.kt")
        public void testNoImportJavaLang() throws Exception {
            doTest("idea/testData/quickfix/typeImports/beforeNoImportJavaLang.kt");
        }
        
        @TestMetadata("beforeNoImportJetStandard.kt")
        public void testNoImportJetStandard() throws Exception {
            doTest("idea/testData/quickfix/typeImports/beforeNoImportJetStandard.kt");
        }
        
        @TestMetadata("beforeToImport1.kt")
        public void testToImport1() throws Exception {
            doTest("idea/testData/quickfix/typeImports/beforeToImport1.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/typeMismatch")
    @InnerTestClasses({TypeMismatch.Casts.class, TypeMismatch.ComponentFunctionReturnTypeMismatch.class, TypeMismatch.FixOverloadedOperator.class, TypeMismatch.ParameterTypeMismatch.class, TypeMismatch.TypeMismatchOnReturnedExpression.class})
    public static class TypeMismatch extends AbstractQuickFixTest {
        public void testAllFilesPresentInTypeMismatch() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeMismatch"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeChangeFunctionLiteralParameterTypeToFunctionType.kt")
        public void testChangeFunctionLiteralParameterTypeToFunctionType() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeChangeFunctionLiteralParameterTypeToFunctionType.kt");
        }
        
        @TestMetadata("beforeChangeFunctionReturnTypeToMatchExpectedTypeOfCall.kt")
        public void testChangeFunctionReturnTypeToMatchExpectedTypeOfCall() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeChangeFunctionReturnTypeToMatchExpectedTypeOfCall.kt");
        }
        
        @TestMetadata("beforeChangeReturnTypeWhenFunctionNameIsMissing.kt")
        public void testChangeReturnTypeWhenFunctionNameIsMissing() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeChangeReturnTypeWhenFunctionNameIsMissing.kt");
        }
        
        @TestMetadata("beforeChangeReturnTypeWhenValueParameterListIsAbsent.kt")
        public void testChangeReturnTypeWhenValueParameterListIsAbsent() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeChangeReturnTypeWhenValueParameterListIsAbsent.kt");
        }
        
        @TestMetadata("beforeCompareToTypeMismatch.kt")
        public void testCompareToTypeMismatch() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeCompareToTypeMismatch.kt");
        }
        
        @TestMetadata("beforeDontChangeOverriddenPropertyTypeToErrorType.kt")
        public void testDontChangeOverriddenPropertyTypeToErrorType() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeDontChangeOverriddenPropertyTypeToErrorType.kt");
        }
        
        @TestMetadata("beforeExpectedParameterTypeMismatch.kt")
        public void testExpectedParameterTypeMismatch() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeExpectedParameterTypeMismatch.kt");
        }
        
        @TestMetadata("beforeExpectedReturnTypeMismatch.kt")
        public void testExpectedReturnTypeMismatch() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeExpectedReturnTypeMismatch.kt");
        }
        
        @TestMetadata("beforeHasNextFunctionReturnTypeMismatch.kt")
        public void testHasNextFunctionReturnTypeMismatch() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeHasNextFunctionReturnTypeMismatch.kt");
        }
        
        @TestMetadata("beforeNoReturnInFunctionWithBlockBody.kt")
        public void testNoReturnInFunctionWithBlockBody() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeNoReturnInFunctionWithBlockBody.kt");
        }
        
        @TestMetadata("beforePropertyTypeMismatch.kt")
        public void testPropertyTypeMismatch() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforePropertyTypeMismatch.kt");
        }
        
        @TestMetadata("beforeReturnTypeMismatch.kt")
        public void testReturnTypeMismatch() throws Exception {
            doTest("idea/testData/quickfix/typeMismatch/beforeReturnTypeMismatch.kt");
        }
        
        @TestMetadata("idea/testData/quickfix/typeMismatch/casts")
        public static class Casts extends AbstractQuickFixTest {
            public void testAllFilesPresentInCasts() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeMismatch/casts"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeAutocastImpossible1.kt")
            public void testAutocastImpossible1() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeAutocastImpossible1.kt");
            }
            
            @TestMetadata("beforeAutocastImpossible2.kt")
            public void testAutocastImpossible2() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeAutocastImpossible2.kt");
            }
            
            @TestMetadata("beforeAutocastImpossible3.kt")
            public void testAutocastImpossible3() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeAutocastImpossible3.kt");
            }
            
            @TestMetadata("beforeCastToFunctionType.kt")
            public void testCastToFunctionType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeCastToFunctionType.kt");
            }
            
            @TestMetadata("beforeTypeMismatch1.kt")
            public void testTypeMismatch1() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeTypeMismatch1.kt");
            }
            
            @TestMetadata("beforeTypeMismatch2.kt")
            public void testTypeMismatch2() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeTypeMismatch2.kt");
            }
            
            @TestMetadata("beforeTypeMismatch3.kt")
            public void testTypeMismatch3() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeTypeMismatch3.kt");
            }
            
            @TestMetadata("beforeTypeMismatch4.kt")
            public void testTypeMismatch4() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeTypeMismatch4.kt");
            }
            
            @TestMetadata("beforeTypeMismatch5.kt")
            public void testTypeMismatch5() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/casts/beforeTypeMismatch5.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch")
        public static class ComponentFunctionReturnTypeMismatch extends AbstractQuickFixTest {
            public void testAllFilesPresentInComponentFunctionReturnTypeMismatch() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeComponentFunctionReturnTypeMismatch1.kt")
            public void testComponentFunctionReturnTypeMismatch1() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/beforeComponentFunctionReturnTypeMismatch1.kt");
            }
            
            @TestMetadata("beforeComponentFunctionReturnTypeMismatch2.kt")
            public void testComponentFunctionReturnTypeMismatch2() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/beforeComponentFunctionReturnTypeMismatch2.kt");
            }
            
            @TestMetadata("beforeComponentFunctionReturnTypeMismatch3.kt")
            public void testComponentFunctionReturnTypeMismatch3() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/beforeComponentFunctionReturnTypeMismatch3.kt");
            }
            
            @TestMetadata("beforeComponentFunctionReturnTypeMismatch4.kt")
            public void testComponentFunctionReturnTypeMismatch4() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/beforeComponentFunctionReturnTypeMismatch4.kt");
            }
            
            @TestMetadata("beforeComponentFunctionReturnTypeMismatch5.kt")
            public void testComponentFunctionReturnTypeMismatch5() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/componentFunctionReturnTypeMismatch/beforeComponentFunctionReturnTypeMismatch5.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/typeMismatch/fixOverloadedOperator")
        public static class FixOverloadedOperator extends AbstractQuickFixTest {
            public void testAllFilesPresentInFixOverloadedOperator() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeMismatch/fixOverloadedOperator"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeChangeNotFunctionReturnType.kt")
            public void testChangeNotFunctionReturnType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/fixOverloadedOperator/beforeChangeNotFunctionReturnType.kt");
            }
            
            @TestMetadata("beforeChangePlusFunctionReturnType.kt")
            public void testChangePlusFunctionReturnType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/fixOverloadedOperator/beforeChangePlusFunctionReturnType.kt");
            }
            
            @TestMetadata("beforeChangeTimesFunctionParameterType.kt")
            public void testChangeTimesFunctionParameterType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/fixOverloadedOperator/beforeChangeTimesFunctionParameterType.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/typeMismatch/parameterTypeMismatch")
        public static class ParameterTypeMismatch extends AbstractQuickFixTest {
            public void testAllFilesPresentInParameterTypeMismatch() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeMismatch/parameterTypeMismatch"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeChangeFunctionParameterType1.kt")
            public void testChangeFunctionParameterType1() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/parameterTypeMismatch/beforeChangeFunctionParameterType1.kt");
            }
            
            @TestMetadata("beforeChangeFunctionParameterType2.kt")
            public void testChangeFunctionParameterType2() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/parameterTypeMismatch/beforeChangeFunctionParameterType2.kt");
            }
            
            @TestMetadata("beforeChangeFunctionParameterType3.kt")
            public void testChangeFunctionParameterType3() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/parameterTypeMismatch/beforeChangeFunctionParameterType3.kt");
            }
            
            @TestMetadata("beforeChangeFunctionParameterType4.kt")
            public void testChangeFunctionParameterType4() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/parameterTypeMismatch/beforeChangeFunctionParameterType4.kt");
            }
            
            @TestMetadata("beforeChangeFunctionParameterType5.kt")
            public void testChangeFunctionParameterType5() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/parameterTypeMismatch/beforeChangeFunctionParameterType5.kt");
            }
            
            @TestMetadata("beforeChangePrimaryConstructorParameterType.kt")
            public void testChangePrimaryConstructorParameterType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/parameterTypeMismatch/beforeChangePrimaryConstructorParameterType.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression")
        public static class TypeMismatchOnReturnedExpression extends AbstractQuickFixTest {
            public void testAllFilesPresentInTypeMismatchOnReturnedExpression() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeAssignmentTypeMismatch.kt")
            public void testAssignmentTypeMismatch() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeAssignmentTypeMismatch.kt");
            }
            
            @TestMetadata("beforeChangeFunctionLiteralTypeWithoutChangingFunctionParameterType.kt")
            public void testChangeFunctionLiteralTypeWithoutChangingFunctionParameterType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeChangeFunctionLiteralTypeWithoutChangingFunctionParameterType.kt");
            }
            
            @TestMetadata("beforeChangeFunctionLiteralTypeWithoutChangingPropertyType.kt")
            public void testChangeFunctionLiteralTypeWithoutChangingPropertyType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeChangeFunctionLiteralTypeWithoutChangingPropertyType.kt");
            }
            
            @TestMetadata("beforeChangeFunctionReturnTypeToFunctionType.kt")
            public void testChangeFunctionReturnTypeToFunctionType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeChangeFunctionReturnTypeToFunctionType.kt");
            }
            
            @TestMetadata("beforeChangeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral.kt")
            public void testChangeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeChangeFunctionReturnTypeToMatchReturnTypeOfReturnedLiteral.kt");
            }
            
            @TestMetadata("beforeDontChangeFunctionReturnTypeToErrorType.kt")
            public void testDontChangeFunctionReturnTypeToErrorType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeDontChangeFunctionReturnTypeToErrorType.kt");
            }
            
            @TestMetadata("beforeExpectedTypeMismatch.kt")
            public void testExpectedTypeMismatch() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeExpectedTypeMismatch.kt");
            }
            
            @TestMetadata("beforePropertyGetterInitializerTypeMismatch.kt")
            public void testPropertyGetterInitializerTypeMismatch() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforePropertyGetterInitializerTypeMismatch.kt");
            }
            
            @TestMetadata("beforeReturnedExpresionCantEvaluateToExpresionThatTypeMismatch.kt")
            public void testReturnedExpresionCantEvaluateToExpresionThatTypeMismatch() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeReturnedExpresionCantEvaluateToExpresionThatTypeMismatch.kt");
            }
            
            @TestMetadata("beforeReturnedExpressionTypeMismatchFunctionParameterType.kt")
            public void testReturnedExpressionTypeMismatchFunctionParameterType() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeReturnedExpressionTypeMismatchFunctionParameterType.kt");
            }
            
            @TestMetadata("beforeTypeMismatchInIfStatementReturnedByFunction.kt")
            public void testTypeMismatchInIfStatementReturnedByFunction() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeTypeMismatchInIfStatementReturnedByFunction.kt");
            }
            
            @TestMetadata("beforeTypeMismatchInIfStatementReturnedByLiteral.kt")
            public void testTypeMismatchInIfStatementReturnedByLiteral() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeTypeMismatchInIfStatementReturnedByLiteral.kt");
            }
            
            @TestMetadata("beforeTypeMismatchInInitializer.kt")
            public void testTypeMismatchInInitializer() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeTypeMismatchInInitializer.kt");
            }
            
            @TestMetadata("beforeTypeMismatchInReturnStatement.kt")
            public void testTypeMismatchInReturnStatement() throws Exception {
                doTest("idea/testData/quickfix/typeMismatch/typeMismatchOnReturnedExpression/beforeTypeMismatchInReturnStatement.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("TypeMismatch");
            suite.addTestSuite(TypeMismatch.class);
            suite.addTestSuite(Casts.class);
            suite.addTestSuite(ComponentFunctionReturnTypeMismatch.class);
            suite.addTestSuite(FixOverloadedOperator.class);
            suite.addTestSuite(ParameterTypeMismatch.class);
            suite.addTestSuite(TypeMismatchOnReturnedExpression.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/quickfix/typeProjection")
    public static class TypeProjection extends AbstractQuickFixTest {
        public void testAllFilesPresentInTypeProjection() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/typeProjection"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeConflictingProjection.kt")
        public void testConflictingProjection() throws Exception {
            doTest("idea/testData/quickfix/typeProjection/beforeConflictingProjection.kt");
        }
        
        @TestMetadata("beforeProjectionInImmediateArgumentToSupertype.kt")
        public void testProjectionInImmediateArgumentToSupertype() throws Exception {
            doTest("idea/testData/quickfix/typeProjection/beforeProjectionInImmediateArgumentToSupertype.kt");
        }
        
        @TestMetadata("beforeProjectionOnNonClassTypeArgument1.kt")
        public void testProjectionOnNonClassTypeArgument1() throws Exception {
            doTest("idea/testData/quickfix/typeProjection/beforeProjectionOnNonClassTypeArgument1.kt");
        }
        
        @TestMetadata("beforeProjectionOnNonClassTypeArgument2.kt")
        public void testProjectionOnNonClassTypeArgument2() throws Exception {
            doTest("idea/testData/quickfix/typeProjection/beforeProjectionOnNonClassTypeArgument2.kt");
        }
        
        @TestMetadata("beforeRemoveRedundantProjection1.kt")
        public void testRemoveRedundantProjection1() throws Exception {
            doTest("idea/testData/quickfix/typeProjection/beforeRemoveRedundantProjection1.kt");
        }
        
        @TestMetadata("beforeRemoveRedundantProjection2.kt")
        public void testRemoveRedundantProjection2() throws Exception {
            doTest("idea/testData/quickfix/typeProjection/beforeRemoveRedundantProjection2.kt");
        }
        
        @TestMetadata("beforeRemoveVariance.kt")
        public void testRemoveVariance() throws Exception {
            doTest("idea/testData/quickfix/typeProjection/beforeRemoveVariance.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/uselessImports")
    public static class UselessImports extends AbstractQuickFixTest {
        public void testAllFilesPresentInUselessImports() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/uselessImports"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeRemoveUselessHiddenImport.kt")
        public void testRemoveUselessHiddenImport() throws Exception {
            doTest("idea/testData/quickfix/uselessImports/beforeRemoveUselessHiddenImport.kt");
        }
        
        @TestMetadata("beforeRemoveUselessImport.kt")
        public void testRemoveUselessImport() throws Exception {
            doTest("idea/testData/quickfix/uselessImports/beforeRemoveUselessImport.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/quickfix/variables")
    @InnerTestClasses({Variables.ChangeMutability.class, Variables.ChangeToBackingField.class, Variables.ChangeToFunctionInvocation.class, Variables.ChangeToPropertyName.class})
    public static class Variables extends AbstractQuickFixTest {
        public void testAllFilesPresentInVariables() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/variables"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeUnusedVariableWithInitializer.kt")
        public void testUnusedVariableWithInitializer() throws Exception {
            doTest("idea/testData/quickfix/variables/beforeUnusedVariableWithInitializer.kt");
        }
        
        @TestMetadata("beforeUnusedVariableWithoutInitializer.kt")
        public void testUnusedVariableWithoutInitializer() throws Exception {
            doTest("idea/testData/quickfix/variables/beforeUnusedVariableWithoutInitializer.kt");
        }
        
        @TestMetadata("idea/testData/quickfix/variables/changeMutability")
        public static class ChangeMutability extends AbstractQuickFixTest {
            public void testAllFilesPresentInChangeMutability() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/variables/changeMutability"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeValOverrideVar.kt")
            public void testValOverrideVar() throws Exception {
                doTest("idea/testData/quickfix/variables/changeMutability/beforeValOverrideVar.kt");
            }
            
            @TestMetadata("beforeValReassignmentLocal.kt")
            public void testValReassignmentLocal() throws Exception {
                doTest("idea/testData/quickfix/variables/changeMutability/beforeValReassignmentLocal.kt");
            }
            
            @TestMetadata("beforeValReassignmentOuterDecl.kt")
            public void testValReassignmentOuterDecl() throws Exception {
                doTest("idea/testData/quickfix/variables/changeMutability/beforeValReassignmentOuterDecl.kt");
            }
            
            @TestMetadata("beforeValReassignmentProperty.kt")
            public void testValReassignmentProperty() throws Exception {
                doTest("idea/testData/quickfix/variables/changeMutability/beforeValReassignmentProperty.kt");
            }
            
            @TestMetadata("beforeValWithSetter.kt")
            public void testValWithSetter() throws Exception {
                doTest("idea/testData/quickfix/variables/changeMutability/beforeValWithSetter.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/variables/changeToBackingField")
        public static class ChangeToBackingField extends AbstractQuickFixTest {
            public void testAllFilesPresentInChangeToBackingField() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/variables/changeToBackingField"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeBFRequired.kt")
            public void testBFRequired() throws Exception {
                doTest("idea/testData/quickfix/variables/changeToBackingField/beforeBFRequired.kt");
            }
            
            @TestMetadata("beforeKt510.kt")
            public void testKt510() throws Exception {
                doTest("idea/testData/quickfix/variables/changeToBackingField/beforeKt510.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/variables/changeToFunctionInvocation")
        public static class ChangeToFunctionInvocation extends AbstractQuickFixTest {
            public void testAllFilesPresentInChangeToFunctionInvocation() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/variables/changeToFunctionInvocation"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeFunInvWithoutParentheses.kt")
            public void testFunInvWithoutParentheses() throws Exception {
                doTest("idea/testData/quickfix/variables/changeToFunctionInvocation/beforeFunInvWithoutParentheses.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/quickfix/variables/changeToPropertyName")
        public static class ChangeToPropertyName extends AbstractQuickFixTest {
            @TestMetadata("beforeAbstractProperty.kt")
            public void testAbstractProperty() throws Exception {
                doTest("idea/testData/quickfix/variables/changeToPropertyName/beforeAbstractProperty.kt");
            }
            
            @TestMetadata("beforeAbstractPropertyThis.kt")
            public void testAbstractPropertyThis() throws Exception {
                doTest("idea/testData/quickfix/variables/changeToPropertyName/beforeAbstractPropertyThis.kt");
            }
            
            public void testAllFilesPresentInChangeToPropertyName() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/variables/changeToPropertyName"), Pattern.compile("^before(\\w+)\\.kt$"), true);
            }
            
            @TestMetadata("beforeCustomAccessors.kt")
            public void testCustomAccessors() throws Exception {
                doTest("idea/testData/quickfix/variables/changeToPropertyName/beforeCustomAccessors.kt");
            }
            
            @TestMetadata("beforeInaccessibleBackingField.kt")
            public void testInaccessibleBackingField() throws Exception {
                doTest("idea/testData/quickfix/variables/changeToPropertyName/beforeInaccessibleBackingField.kt");
            }
            
            @TestMetadata("beforeInaccessibleBackingFieldQualified.kt")
            public void testInaccessibleBackingFieldQualified() throws Exception {
                doTest("idea/testData/quickfix/variables/changeToPropertyName/beforeInaccessibleBackingFieldQualified.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Variables");
            suite.addTestSuite(Variables.class);
            suite.addTestSuite(ChangeMutability.class);
            suite.addTestSuite(ChangeToBackingField.class);
            suite.addTestSuite(ChangeToFunctionInvocation.class);
            suite.addTestSuite(ChangeToPropertyName.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/quickfix/when")
    public static class When extends AbstractQuickFixTest {
        public void testAllFilesPresentInWhen() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/quickfix/when"), Pattern.compile("^before(\\w+)\\.kt$"), true);
        }
        
        @TestMetadata("beforeElseNotLastInWhen.kt")
        public void testElseNotLastInWhen() throws Exception {
            doTest("idea/testData/quickfix/when/beforeElseNotLastInWhen.kt");
        }
        
        @TestMetadata("beforeNoElseInWhenWithBranches.kt")
        public void testNoElseInWhenWithBranches() throws Exception {
            doTest("idea/testData/quickfix/when/beforeNoElseInWhenWithBranches.kt");
        }
        
        @TestMetadata("beforeNoElseInWhenWithoutBranches.kt")
        public void testNoElseInWhenWithoutBranches() throws Exception {
            doTest("idea/testData/quickfix/when/beforeNoElseInWhenWithoutBranches.kt");
        }
        
        @TestMetadata("beforeTwoElseBranchesInWhen.kt")
        public void testTwoElseBranchesInWhen() throws Exception {
            doTest("idea/testData/quickfix/when/beforeTwoElseBranchesInWhen.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("QuickFixTestGenerated");
        suite.addTestSuite(QuickFixTestGenerated.class);
        suite.addTestSuite(Abstract.class);
        suite.addTest(AddStarProjections.innerSuite());
        suite.addTestSuite(AutoImports.class);
        suite.addTestSuite(ChangeSignature.class);
        suite.addTestSuite(CheckArguments.class);
        suite.addTest(CreateFromUsage.innerSuite());
        suite.addTestSuite(Expressions.class);
        suite.addTestSuite(Migration.class);
        suite.addTest(Modifiers.innerSuite());
        suite.addTest(Nullables.innerSuite());
        suite.addTest(Override.innerSuite());
        suite.addTestSuite(PlatformClasses.class);
        suite.addTestSuite(Supercalls.class);
        suite.addTestSuite(SupertypeInitialization.class);
        suite.addTestSuite(TypeAddition.class);
        suite.addTestSuite(TypeImports.class);
        suite.addTest(TypeMismatch.innerSuite());
        suite.addTestSuite(TypeProjection.class);
        suite.addTestSuite(UselessImports.class);
        suite.addTest(Variables.innerSuite());
        suite.addTestSuite(When.class);
        return suite;
    }
}
