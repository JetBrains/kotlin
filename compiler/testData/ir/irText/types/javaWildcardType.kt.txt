interface K {
  abstract fun kf1(): Collection<out CharSequence> 
  abstract fun kf2(): Collection<CharSequence> 
  abstract fun kg1(c: Collection<out CharSequence>) 
  abstract fun kg2(c: Collection<CharSequence>) 

}

class C : J, K {
  constructor(j: J, k: K) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private /* final field */ val $$delegate_0: J = j
  override fun jf1(): @FlexibleNullability MutableCollection<out @FlexibleNullability CharSequence?>? {
    return <this>.#$$delegate_0.jf1()
  }

  override fun jf2(): @FlexibleNullability MutableCollection<@FlexibleNullability CharSequence?>? {
    return <this>.#$$delegate_0.jf2()
  }

  override fun jg1(c: @FlexibleNullability MutableCollection<out @FlexibleNullability CharSequence?>?) {
    <this>.#$$delegate_0.jg1(c = c)
  }

  override fun jg2(c: @FlexibleNullability MutableCollection<@FlexibleNullability CharSequence?>?) {
    <this>.#$$delegate_0.jg2(c = c)
  }

  private /* final field */ val $$delegate_1: K = k
  override fun kf1(): Collection<out CharSequence> {
    return <this>.#$$delegate_1.kf1()
  }

  override fun kf2(): Collection<CharSequence> {
    return <this>.#$$delegate_1.kf2()
  }

  override fun kg1(c: Collection<out CharSequence>) {
    <this>.#$$delegate_1.kg1(c = c)
  }

  override fun kg2(c: Collection<CharSequence>) {
    <this>.#$$delegate_1.kg2(c = c)
  }

}

