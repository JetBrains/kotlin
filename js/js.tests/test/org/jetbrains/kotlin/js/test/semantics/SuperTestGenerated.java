/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box/super")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class SuperTestGenerated extends AbstractSuperTest {
    public void testAllFilesPresentInSuper() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/super"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("basicmethodSuperClass.kt")
    public void testBasicmethodSuperClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/basicmethodSuperClass.kt");
        doTest(fileName);
    }

    @TestMetadata("basicmethodSuperTrait.kt")
    public void testBasicmethodSuperTrait() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/basicmethodSuperTrait.kt");
        doTest(fileName);
    }

    @TestMetadata("basicproperty.kt")
    public void testBasicproperty() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/basicproperty.kt");
        doTest(fileName);
    }

    @TestMetadata("enclosedFun.kt")
    public void testEnclosedFun() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/enclosedFun.kt");
        doTest(fileName);
    }

    @TestMetadata("enclosedVar.kt")
    public void testEnclosedVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/enclosedVar.kt");
        doTest(fileName);
    }

    @TestMetadata("innerClassLabeledSuper.kt")
    public void testInnerClassLabeledSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/innerClassLabeledSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("innerClassLabeledSuper2.kt")
    public void testInnerClassLabeledSuper2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/innerClassLabeledSuper2.kt");
        doTest(fileName);
    }

    @TestMetadata("innerClassLabeledSuperProperty.kt")
    public void testInnerClassLabeledSuperProperty() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty.kt");
        doTest(fileName);
    }

    @TestMetadata("innerClassLabeledSuperProperty2.kt")
    public void testInnerClassLabeledSuperProperty2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty2.kt");
        doTest(fileName);
    }

    @TestMetadata("innerClassQualifiedFunctionCall.kt")
    public void testInnerClassQualifiedFunctionCall() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/innerClassQualifiedFunctionCall.kt");
        doTest(fileName);
    }

    @TestMetadata("innerClassQualifiedPropertyAccess.kt")
    public void testInnerClassQualifiedPropertyAccess() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/innerClassQualifiedPropertyAccess.kt");
        doTest(fileName);
    }

    @TestMetadata("kt14243.kt")
    public void testKt14243() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt14243.kt");
        doTest(fileName);
    }

    @TestMetadata("kt14243_2.kt")
    public void testKt14243_2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt14243_2.kt");
        doTest(fileName);
    }

    @TestMetadata("kt14243_class.kt")
    public void testKt14243_class() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt14243_class.kt");
        doTest(fileName);
    }

    @TestMetadata("kt14243_prop.kt")
    public void testKt14243_prop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt14243_prop.kt");
        doTest(fileName);
    }

    @TestMetadata("kt3492ClassFun.kt")
    public void testKt3492ClassFun() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt3492ClassFun.kt");
        doTest(fileName);
    }

    @TestMetadata("kt3492ClassProperty.kt")
    public void testKt3492ClassProperty() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt3492ClassProperty.kt");
        doTest(fileName);
    }

    @TestMetadata("kt3492TraitFun.kt")
    public void testKt3492TraitFun() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt3492TraitFun.kt");
        doTest(fileName);
    }

    @TestMetadata("kt3492TraitProperty.kt")
    public void testKt3492TraitProperty() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt3492TraitProperty.kt");
        doTest(fileName);
    }

    @TestMetadata("kt4173.kt")
    public void testKt4173() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt4173.kt");
        doTest(fileName);
    }

    @TestMetadata("kt4173_2.kt")
    public void testKt4173_2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt4173_2.kt");
        doTest(fileName);
    }

    @TestMetadata("kt4173_3.kt")
    public void testKt4173_3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt4173_3.kt");
        doTest(fileName);
    }

    @TestMetadata("kt4982.kt")
    public void testKt4982() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/kt4982.kt");
        doTest(fileName);
    }

    @TestMetadata("multipleSuperTraits.kt")
    public void testMultipleSuperTraits() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/multipleSuperTraits.kt");
        doTest(fileName);
    }

    @TestMetadata("traitproperty.kt")
    public void testTraitproperty() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/traitproperty.kt");
        doTest(fileName);
    }

    @TestMetadata("unqualifiedSuper.kt")
    public void testUnqualifiedSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/unqualifiedSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
    public void testUnqualifiedSuperWithDeeperHierarchies() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/unqualifiedSuperWithDeeperHierarchies.kt");
        doTest(fileName);
    }

    @TestMetadata("unqualifiedSuperWithMethodsOfAny.kt")
    public void testUnqualifiedSuperWithMethodsOfAny() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/super/unqualifiedSuperWithMethodsOfAny.kt");
        doTest(fileName);
    }
}
