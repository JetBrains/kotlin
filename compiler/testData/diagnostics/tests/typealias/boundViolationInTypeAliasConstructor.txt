package

public val x1: Num<kotlin.String>
public val x2: N<kotlin.String> /* = Num<kotlin.String> */
public val x3: N2<kotlin.String> /* = Num<kotlin.String> */
public val y1: TColl<kotlin.Any, kotlin.Any>
public val y2: TC<kotlin.Any, kotlin.Any> /* = TColl<kotlin.Any, kotlin.Any> */
public val y3: TC2<kotlin.Any, kotlin.Any> /* = TColl<kotlin.Any, kotlin.Any> */

public final class Num</*0*/ T : kotlin.Number> {
    public constructor Num</*0*/ T : kotlin.Number>(/*0*/ x: T)
    public final val x: T
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class TColl</*0*/ T, /*1*/ C : kotlin.collections.Collection<T>> {
    public constructor TColl</*0*/ T, /*1*/ C : kotlin.collections.Collection<T>>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
public typealias N</*0*/ T>  = Num<T>
public typealias N2</*0*/ T>  = N<T>
public typealias TC</*0*/ T, /*1*/ C>  = TColl<T, C>
public typealias TC2</*0*/ T, /*1*/ C>  = TC<T, C>
