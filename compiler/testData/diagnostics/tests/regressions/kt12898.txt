package

public fun f(/*0*/ b: B<*, kotlin.Any>): kotlin.Unit
public fun main(): kotlin.Unit

public interface B</*0*/ T : S?, /*1*/ S : kotlin.Any> {
    public abstract val t: T
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class C : B<kotlin.Any?, kotlin.Any> {
    public constructor C(/*0*/ t: kotlin.Any?)
    public open override /*1*/ val t: kotlin.Any?
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
