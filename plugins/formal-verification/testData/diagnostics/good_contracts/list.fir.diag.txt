/list.kt:(77,88): info: Generated Viper text for declaration:
field special$size: Ref

method global$fun_declaration$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$l1: Ref
  var local0$l2: Ref
  var local0$l3: Ref
  ret$0 := dom$RuntimeType$unitValue()
  label label$ret$0
}

/list.kt:(187,201): info: Generated Viper text for initialization:
field special$size: Ref

method global$fun_initialization$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Unit(local$l: Ref)
  returns (ret$0: Ref)
  requires acc(local$l.special$size, write)
  requires dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_List(local$l), wildcard)
  ensures acc(local$l.special$size, write)
  ensures dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(local$l), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$myList: Ref
  var local0$myEmptyList: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$l), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  ret$0 := dom$RuntimeType$unitValue()
  local0$myList := local$l
  local0$myEmptyList := pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  label label$ret$0
}

method pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures dom$RuntimeType$intFromRef(ret.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(ret), wildcard)
  ensures dom$RuntimeType$intFromRef(ret.special$size) == 0


/list.kt:(297,304): info: Generated Viper text for add_get:
field special$size: Ref

method global$fun_add_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$return$T_Unit(local$l: Ref)
  returns (ret$0: Ref)
  requires acc(local$l.special$size, write)
  requires dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_MutableList(local$l), wildcard)
  ensures acc(local$l.special$size, write)
  ensures dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_MutableList(local$l), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var anonymous$0: Ref
  var local0$n: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$l), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_MutableList())
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := pkg$kotlin$collections$class_MutableList$fun_add$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Boolean(local$l,
    dom$RuntimeType$intToRef(1))
  local0$n := pkg$kotlin$collections$class_MutableList$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Int(local$l,
    dom$RuntimeType$intToRef(0))
  label label$ret$0
}

method pkg$kotlin$collections$class_MutableList$fun_add$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Boolean(this: Ref,
  local$element: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_MutableList(this), wildcard)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_MutableList(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size)) + 1


method pkg$kotlin$collections$class_MutableList$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_MutableList(this), wildcard)
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_MutableList(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


/list.kt:(379,391): info: Generated Viper text for last_or_null:
field special$size: Ref

method global$fun_last_or_null$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$NT_Int(local$l: Ref)
  returns (ret$0: Ref)
  requires acc(local$l.special$size, write)
  requires dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_List(local$l), wildcard)
  ensures acc(local$l.special$size, write)
  ensures dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(local$l), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
{
  var local0$size: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$l), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  local0$size := local$l.special$size
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local0$size), dom$RuntimeType$intType())
  if (!(dom$RuntimeType$intFromRef(local0$size) == 0)) {
    var anonymous$0: Ref
    anonymous$0 := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$l,
      special$minusInts(local0$size, dom$RuntimeType$intToRef(1)))
    ret$0 := anonymous$0
    goto label$ret$0
  } else {
    ret$0 := dom$RuntimeType$nullValue()
    goto label$ret$0
  }
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


/list.kt:(545,553): info: Generated Viper text for is_empty:
field special$size: Ref

method global$fun_is_empty$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Int(local$l: Ref)
  returns (ret$0: Ref)
  requires acc(local$l.special$size, write)
  requires dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_List(local$l), wildcard)
  ensures acc(local$l.special$size, write)
  ensures dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(local$l), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$l), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  anonymous$0 := pkg$kotlin$collections$class_List$fun_isEmpty$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Boolean(local$l)
  if (!dom$RuntimeType$boolFromRef(anonymous$0)) {
    ret$0 := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$l,
      dom$RuntimeType$intToRef(0))
  } else {
    ret$0 := dom$RuntimeType$intToRef(1)}
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


method pkg$kotlin$collections$class_List$fun_isEmpty$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Boolean(this: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))
  ensures dom$RuntimeType$boolFromRef(ret) ==>
    dom$RuntimeType$intFromRef(this.special$size) == 0
  ensures !dom$RuntimeType$boolFromRef(ret) ==>
    dom$RuntimeType$intFromRef(this.special$size) > 0


/list.kt:(670,683): info: Generated Viper text for nullable_list:
field special$size: Ref

method global$fun_nullable_list$fun_take$NT_class_pkg$kotlin$collections$global$class_List$return$T_Unit(local$l: Ref)
  returns (ret$0: Ref)
  requires local$l != dom$RuntimeType$nullValue() ==>
    acc(local$l.special$size, write)
  requires local$l != dom$RuntimeType$nullValue() ==>
    dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  requires local$l != dom$RuntimeType$nullValue() ==>
    acc(T_class_pkg$kotlin$collections$global$class_List(local$l), wildcard)
  ensures local$l != dom$RuntimeType$nullValue() ==>
    acc(local$l.special$size, write)
  ensures local$l != dom$RuntimeType$nullValue() ==>
    dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures local$l != dom$RuntimeType$nullValue() ==>
    acc(T_class_pkg$kotlin$collections$global$class_List(local$l), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$l), dom$RuntimeType$nullable(dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List()))
  ret$0 := dom$RuntimeType$unitValue()
  if (!(local$l == dom$RuntimeType$nullValue())) {
    var anonymous$1: Ref
    anonymous$1 := pkg$kotlin$collections$class_List$fun_isEmpty$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Boolean(local$l)
    anonymous$0 := special$notBool(anonymous$1)
  } else {
    anonymous$0 := dom$RuntimeType$boolToRef(false)}
  if (dom$RuntimeType$boolFromRef(anonymous$0)) {
    var local2$x: Ref
    var anonymous$2: Ref
    anonymous$2 := local$l.special$size
    inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
    local2$x := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$l,
      special$minusInts(anonymous$2, dom$RuntimeType$intToRef(1)))
  }
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


method pkg$kotlin$collections$class_List$fun_isEmpty$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Boolean(this: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(T_class_pkg$kotlin$collections$global$class_List(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))
  ensures dom$RuntimeType$boolFromRef(ret) ==>
    dom$RuntimeType$intFromRef(this.special$size) == 0
  ensures !dom$RuntimeType$boolFromRef(ret) ==>
    dom$RuntimeType$intFromRef(this.special$size) > 0

