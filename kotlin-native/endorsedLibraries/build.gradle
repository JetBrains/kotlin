import org.jetbrains.kotlin.UtilsKt
import org.jetbrains.kotlin.gradle.plugin.konan.tasks.KonanCacheTask
import org.jetbrains.kotlin.EndorsedLibraryInfo
import org.jetbrains.kotlin.UtilsKt

apply plugin: 'konan'

buildscript {
    repositories {
        if (UtilsKt.getCacheRedirectorEnabled(project))
            maven { url 'https://cache-redirector.jetbrains.com/jcenter' }
        else
            jcenter()
    }
}

ext {
    endorsedLibraries = [
        new EndorsedLibraryInfo(project('kotlinx.cli'), "org.jetbrains.kotlinx.kotlinx-cli")
    ].collectEntries { [it.project, it] }
}

Collection<EndorsedLibraryInfo> endorsedLibrariesList = ext.endorsedLibraries.values()

tasks.named("clean") {
    doFirst {
        delete buildDir
    }
}

task jvmJar {
    endorsedLibrariesList.each { library ->
        dependsOn "$library.projectName:jvmJar"
    }
}

// Build all default libraries.
targetList.each { target ->
    task("${target}EndorsedLibraries") {
        endorsedLibrariesList.each { library ->
            dependsOn task("${target}${library.name}EndorsedLibraries", type: Copy) {
                dependsOn "$library.projectName:${target}${library.taskName}"
                destinationDir project.file("${project.buildDir}/${library.name}")

                from(library.project.file("build/${target}${library.taskName}")) {
                    include('**')
                    eachFile {
                        if (name == 'manifest') {
                            def existingManifest = file("$destinationDir/$path")
                            if (existingManifest.exists()) {
                                UtilsKt.mergeManifestsByTargets(project, file, existingManifest)
                                exclude()
                            }
                        }
                    }
                }
            }
        }
    }

    if (target in cacheableTargetNames) {
        def cacheTask = task("${target}Cache", type: Copy) {
            destinationDir project.file("${project.buildDir}/cache/$target")

            endorsedLibrariesList.each { library ->
                from(library.project.file("build/cache/$target")) {
                    include('**')
                }
            }
        }

        endorsedLibrariesList.each { library ->
            def dist = UtilsKt.getKotlinNativeDist(project)
            task("${target}${library.taskName}Cache", type: KonanCacheTask) {
                it.target = target
                originalKlib = library.project.file("build/${target}${library.taskName}")
                cacheRoot = library.project.file("build/cache/$target").path
                compilerDistributionPath.set(distDir)
                // TODO: should depend on stdlib producer task and its properties
                def clibs = [:]
                clibs.put(project.file("$dist/klib/common/stdlib"), project.file("$dist/klib/cache/${target}-g$cacheKind/stdlib-cache"))
                cachedLibraries = clibs

                dependsOn "$library.projectName:${target}${library.taskName}"
                dependsOn ":kotlin-native:${target}CrossDistRuntime"
                dependsOn ":kotlin-native:${target}StdlibCache"

                cacheTask.dependsOn it
            }
        }
    }
}

endorsedLibrariesList.each { library ->
    task("${library.taskName}CommonSources", type: Zip) {
        destinationDirectory = file("${UtilsKt.getKotlinNativeDist(project)}/sources")
        archiveFileName = "${library.name}-common-sources.zip"

        includeEmptyDirs = false
        include('**/*.kt')

        from(library.project.file('src/main/kotlin'))
    }
    task("${library.taskName}NativeSources", type: Zip) {
        destinationDirectory = file("${UtilsKt.getKotlinNativeDist(project)}/sources")
        archiveFileName = "${library.name}-native-sources.zip"

        includeEmptyDirs = false
        include('**/*.kt')

        from(library.project.file('src/main/kotlin-native'))
    }
}

task endorsedLibsSources {
    endorsedLibrariesList.each { library ->
        dependsOn "${library.taskName}CommonSources"
        dependsOn "${library.taskName}NativeSources"
    }
}
