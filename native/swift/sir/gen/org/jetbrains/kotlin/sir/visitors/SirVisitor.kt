/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See native/swift/sir/tree-generator/Readme.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.sir.visitors

import org.jetbrains.kotlin.sir.*

/**
 * Auto-generated by [org.jetbrains.kotlin.sir.tree.generator.printer.VisitorPrinter]
 */
abstract class SirVisitor<out R, in D> {

    abstract fun visitElement(element: SirElement, data: D): R

    open fun visitDeclarationContainer(declarationContainer: SirDeclarationContainer, data: D): R =
        visitElement(declarationContainer, data)

    open fun visitMutableDeclarationContainer(mutableDeclarationContainer: SirMutableDeclarationContainer, data: D): R =
        visitElement(mutableDeclarationContainer, data)

    open fun visitModule(module: SirModule, data: D): R =
        visitElement(module, data)

    open fun visitDeclaration(declaration: SirDeclaration, data: D): R =
        visitElement(declaration, data)

    open fun visitExtension(extension: SirExtension, data: D): R =
        visitDeclaration(extension, data)

    open fun visitNamedDeclaration(declaration: SirNamedDeclaration, data: D): R =
        visitDeclaration(declaration, data)

    open fun visitEnum(enum: SirEnum, data: D): R =
        visitNamedDeclaration(enum, data)

    open fun visitStruct(struct: SirStruct, data: D): R =
        visitNamedDeclaration(struct, data)

    open fun visitClass(klass: SirClass, data: D): R =
        visitNamedDeclaration(klass, data)

    open fun visitCallable(callable: SirCallable, data: D): R =
        visitDeclaration(callable, data)

    open fun visitInit(init: SirInit, data: D): R =
        visitCallable(init, data)

    open fun visitFunction(function: SirFunction, data: D): R =
        visitCallable(function, data)

    open fun visitAccessor(accessor: SirAccessor, data: D): R =
        visitCallable(accessor, data)

    open fun visitGetter(getter: SirGetter, data: D): R =
        visitAccessor(getter, data)

    open fun visitSetter(setter: SirSetter, data: D): R =
        visitAccessor(setter, data)

    open fun visitVariable(variable: SirVariable, data: D): R =
        visitDeclaration(variable, data)

    open fun visitImport(import: SirImport, data: D): R =
        visitDeclaration(import, data)
}
