val spentTime: Column
  field = integer(name = "spentTime")
  get

class ArgumentsBuilder {
  val arguments: MutableList<Expression>
    field = mutableListOf<Expression>()
    get

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun Expression.unaryPlus() {
    <this>.<get-arguments>().add(element = <this>) /*~> Unit */
  }

}

class Column {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class Expression {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

private fun countIssues(restrictionsBuilder: @ExtensionFunctionType Function1<ArgumentsBuilder, Unit>) {
}

fun <I : Any?> id(arg: I): I {
  return arg
}

fun integer(name: String): Column {
  return Column()
}

infix fun <T : Comparable<T>> Column.lessEq(t: T): Expression {
  return Expression()
}

fun <T : Comparable<T>> Column.select(t: T, r: T): Expression {
  return Expression()
}

private fun test(x: Long) {
  return countIssues(restrictionsBuilder = local fun ArgumentsBuilder.<anonymous>() {
    $this$countIssues.unaryPlus(/* <this> = lessEq<Int>(/* <this> = <get-spentTime>(), */ t = 2.times(other = 60)) */)
    $this$countIssues.unaryPlus(/* <this> = lessEq<Int>(/* <this> = <get-spentTime>(), */ t = id<Int>(arg = 2.times(other = 60))) */)
    $this$countIssues.unaryPlus(/* <this> = select<Long>(/* <this> = <get-spentTime>(), */ t = 2.times(other = 60).toLong(), r = x) */)
  }
)
}

