FILE fqName:<root> fileName:/whenWithSubjectVariable.kt
  FUN name:foo visibility:public modality:FINAL <> () returnType:kotlin.Any flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='foo(): Any'
        CONST Int type=kotlin.Int value=1
  FUN name:test visibility:public modality:FINAL <> () returnType:kotlin.Int flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test(): Int'
        BLOCK type=kotlin.Int origin=WHEN
          VAR name:y type:kotlin.Any flags:val
            CALL 'foo(): Any' type=kotlin.Any origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'y: Any' type=kotlin.Any origin=null
                arg1: CONST Int type=kotlin.Int value=42
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
                typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:String modality:FINAL visibility:public flags: superTypes:[kotlin.Comparable<kotlin.String>; kotlin.CharSequence; java.io.Serializable]
                GET_VAR 'y: Any' type=kotlin.Any origin=null
              then: CALL '<get-length>(): Int' type=kotlin.Int origin=GET_PROPERTY
                $this: TYPE_OP type=kotlin.String origin=IMPLICIT_CAST typeOperand=kotlin.String
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:String modality:FINAL visibility:public flags: superTypes:[kotlin.Comparable<kotlin.String>; kotlin.CharSequence; java.io.Serializable]
                  GET_VAR 'y: Any' type=kotlin.Any origin=null
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags: superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Int>; java.io.Serializable]
                GET_VAR 'y: Any' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=2
            BRANCH
              if: CALL 'contains(Int): Boolean' type=kotlin.Boolean origin=IN
                $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange origin=RANGE
                  $this: CONST Int type=kotlin.Int value=0
                  other: CONST Int type=kotlin.Int value=10
                value: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags: superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Int>; java.io.Serializable]
                  GET_VAR 'y: Any' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=3
            BRANCH
              if: CALL 'NOT(Boolean): Boolean' type=kotlin.Boolean origin=EXCL
                arg0: CALL 'contains(Int): Boolean' type=kotlin.Boolean origin=NOT_IN
                  $this: CALL 'rangeTo(Int): IntRange' type=kotlin.ranges.IntRange origin=RANGE
                    $this: CONST Int type=kotlin.Int value=10
                    other: CONST Int type=kotlin.Int value=20
                  value: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                    typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags: superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Int>; java.io.Serializable]
                    GET_VAR 'y: Any' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=4
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=-1

