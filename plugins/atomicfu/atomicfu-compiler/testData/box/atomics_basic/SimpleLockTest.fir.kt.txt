class SimpleLock {
  private var _locked$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#_locked$volatile
    }
    private set(value: Int) {
      return <this>.#_locked$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_0: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_0)
    }
  }

  fun <T : Any?> withLock(res: T): T {
    try { // BLOCK
      <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <_locked$volatile-getter>(): Int {
        return SimpleLock<this>::_locked$volatile
      }
, action$atomicfu = local fun <anonymous>(locked: Int) {
        check(value = EQEQ(arg0 = locked, arg1 = 0))
        when {
          compareAndSetField<Int>(/* <this> = SimpleLock<this>::_locked$volatile, */ expectedValue = 0, newValue = 1).not() -> return Unit
        }
        return res
      }
)
    }
    finally { // BLOCK
      atomicSetField<Int>(/* <this> = SimpleLock<this>::_locked$volatile, */ newValue = 0)
    }
  }

}

class SimpleLockTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun withLock() {
    val lock: SimpleLock = SimpleLock()
    val res: String = lock.withLock<String>(res = "OK")
    assertEquals<String>(expected = "OK", actual = res)
  }

}

fun box(): String {
  val testClass: SimpleLockTest = SimpleLockTest()
  testClass.withLock()
  return "OK"
}
