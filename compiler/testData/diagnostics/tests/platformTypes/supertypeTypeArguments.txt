package

public interface ExtMap</*0*/ K, /*1*/ V> : kotlin.collections.Map<K, V> {
    public abstract override /*1*/ /*fake_override*/ val entries: kotlin.collections.Set<kotlin.collections.Map.Entry<K, V>>
    public abstract override /*1*/ /*fake_override*/ val keys: kotlin.collections.Set<K>
    public abstract override /*1*/ /*fake_override*/ val size: kotlin.Int
    public abstract override /*1*/ /*fake_override*/ val values: kotlin.collections.Collection<V>
    public abstract override /*1*/ /*fake_override*/ fun containsKey(/*0*/ key: K): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun containsValue(/*0*/ value: V): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun get(/*0*/ key: K): V?
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class HashMapEx</*0*/ K, /*1*/ V> : java.util.HashMap<K, V>, ExtMap<K, V> {
    public constructor HashMapEx</*0*/ K, /*1*/ V>()
    public open override /*2*/ /*fake_override*/ val entries: kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<K, V>>
    invisible_fake final override /*1*/ /*fake_override*/ var entrySet: kotlin.collections.(Mutable)Set<kotlin.collections.(Mutable)Map.(Mutable)Entry<K!, V!>!>!
    invisible_fake final override /*1*/ /*fake_override*/ var hashSeed: kotlin.Int
    invisible_fake final override /*1*/ /*fake_override*/ var keySet: kotlin.collections.(Mutable)Set<K!>!
    public open override /*2*/ /*fake_override*/ val keys: kotlin.collections.MutableSet<K>
    invisible_fake final override /*1*/ /*fake_override*/ val loadFactor: kotlin.Float
    invisible_fake final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
    invisible_fake final override /*1*/ /*fake_override*/ var size: kotlin.Int
    public open override /*2*/ /*fake_override*/ val size: kotlin.Int
    invisible_fake final override /*1*/ /*fake_override*/ var table: kotlin.Array<(out) java.util.HashMap.Entry<K!, V!>!>!
    invisible_fake final override /*1*/ /*fake_override*/ var threshold: kotlin.Int
    invisible_fake final override /*1*/ /*fake_override*/ var values: kotlin.collections.(Mutable)Collection<V!>!
    public open override /*2*/ /*fake_override*/ val values: kotlin.collections.MutableCollection<V>
    invisible_fake open override /*1*/ /*fake_override*/ fun addEntry(/*0*/ hash: kotlin.Int, /*1*/ key: K!, /*2*/ value: V!, /*3*/ bucketIndex: kotlin.Int): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun capacity(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public open override /*2*/ /*fake_override*/ fun containsKey(/*0*/ key: K): kotlin.Boolean
    invisible_fake open override /*1*/ /*fake_override*/ fun containsNullValue(): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun containsValue(/*0*/ value: V): kotlin.Boolean
    invisible_fake open override /*1*/ /*fake_override*/ fun createEntry(/*0*/ hash: kotlin.Int, /*1*/ key: K!, /*2*/ value: V!, /*3*/ bucketIndex: kotlin.Int): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun entrySet0(): kotlin.collections.(Mutable)Set<kotlin.collections.(Mutable)Map.(Mutable)Entry<K!, V!>!>!
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun get(/*0*/ key: K): V?
    invisible_fake final override /*1*/ /*fake_override*/ fun getEntry(/*0*/ key: kotlin.Any!): java.util.HashMap.Entry<K!, V!>!
    invisible_fake open override /*1*/ /*fake_override*/ fun getForNullKey(): V!
    invisible_fake final override /*1*/ /*fake_override*/ fun hash(/*0*/ k: kotlin.Any!): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    invisible_fake open override /*1*/ /*fake_override*/ fun inflateTable(/*0*/ toSize: kotlin.Int): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun init(): kotlin.Unit
    invisible_fake final override /*1*/ /*fake_override*/ fun initHashSeedAsNeeded(/*0*/ capacity: kotlin.Int): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
    invisible_fake open override /*1*/ /*fake_override*/ fun loadFactor(): kotlin.Float
    invisible_fake open override /*1*/ /*fake_override*/ fun newEntryIterator(): kotlin.collections.(Mutable)Iterator<kotlin.collections.(Mutable)Map.(Mutable)Entry<K!, V!>!>!
    invisible_fake open override /*1*/ /*fake_override*/ fun newKeyIterator(): kotlin.collections.(Mutable)Iterator<K!>!
    invisible_fake open override /*1*/ /*fake_override*/ fun newValueIterator(): kotlin.collections.(Mutable)Iterator<V!>!
    public open override /*1*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
    public open override /*1*/ /*fake_override*/ fun putAll(/*0*/ from: kotlin.collections.Map<out K, V>): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun putAllForCreate(/*0*/ m: (kotlin.collections.MutableMap<out K!, out V!>..kotlin.collections.Map<out K!, V!>?)): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun putForCreate(/*0*/ key: K!, /*1*/ value: V!): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun putForNullKey(/*0*/ value: V!): V!
    invisible_fake open override /*1*/ /*fake_override*/ fun readObject(/*0*/ s: java.io.ObjectInputStream!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun remove(/*0*/ key: K): V?
    invisible_fake final override /*1*/ /*fake_override*/ fun removeEntryForKey(/*0*/ key: kotlin.Any!): java.util.HashMap.Entry<K!, V!>!
    invisible_fake final override /*1*/ /*fake_override*/ fun removeMapping(/*0*/ o: kotlin.Any!): java.util.HashMap.Entry<K!, V!>!
    invisible_fake open override /*1*/ /*fake_override*/ fun resize(/*0*/ newCapacity: kotlin.Int): kotlin.Unit
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    invisible_fake open override /*1*/ /*fake_override*/ fun transfer(/*0*/ newTable: kotlin.Array<(out) java.util.HashMap.Entry<(raw) kotlin.Any!, (raw) kotlin.Any!>!>!, /*1*/ rehash: kotlin.Boolean): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun writeObject(/*0*/ s: java.io.ObjectOutputStream!): kotlin.Unit
}
