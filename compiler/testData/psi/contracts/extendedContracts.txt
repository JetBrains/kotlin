KtFile: extendedContracts.kt
  PsiComment(EOL_COMMENT)('// LANGUAGE: +ConditionImpliesReturnsContracts')
  PsiWhiteSpace('\n')
  PsiComment(EOL_COMMENT)('// LANGUAGE: +HoldsInContracts')
  PsiWhiteSpace('\n\n')
  PACKAGE_DIRECTIVE
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    REFERENCE_EXPRESSION
      PsiElement(IDENTIFIER)('test')
  PsiWhiteSpace('\n\n')
  IMPORT_LIST
    IMPORT_DIRECTIVE
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      DOT_QUALIFIED_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('kotlin')
        PsiElement(DOT)('.')
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('contracts')
      PsiElement(DOT)('.')
      PsiElement(MUL)('*')
  PsiWhiteSpace('\n\n')
  FUN
    MODIFIER_LIST
      ANNOTATION_ENTRY
        PsiElement(AT)('@')
        CONSTRUCTOR_CALLEE
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('OptIn')
        VALUE_ARGUMENT_LIST
          PsiElement(LPAR)('(')
          VALUE_ARGUMENT
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('ExperimentalContracts')
              PsiElement(COLONCOLON)('::')
              PsiElement(class)('class')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          VALUE_ARGUMENT
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('ExperimentalExtendedContracts')
              PsiElement(COLONCOLON)('::')
              PsiElement(class)('class')
          PsiElement(RPAR)(')')
    PsiWhiteSpace('\n')
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('decode')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      VALUE_PARAMETER
        PsiElement(IDENTIFIER)('encoded')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          NULLABLE_TYPE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('String')
            PsiElement(QUEST)('?')
      PsiElement(RPAR)(')')
    PsiElement(COLON)(':')
    PsiWhiteSpace(' ')
    TYPE_REFERENCE
      NULLABLE_TYPE
        USER_TYPE
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('String')
        PsiElement(QUEST)('?')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('contract')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace('\n        ')
              BLOCK
                BINARY_EXPRESSION
                  PARENTHESIZED
                    PsiElement(LPAR)('(')
                    BINARY_EXPRESSION
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('encoded')
                      PsiWhiteSpace(' ')
                      OPERATION_REFERENCE
                        PsiElement(EXCLEQ)('!=')
                      PsiWhiteSpace(' ')
                      NULL
                        PsiElement(null)('null')
                    PsiElement(RPAR)(')')
                  PsiWhiteSpace(' ')
                  OPERATION_REFERENCE
                    PsiElement(IDENTIFIER)('implies')
                  PsiWhiteSpace(' ')
                  PARENTHESIZED
                    PsiElement(LPAR)('(')
                    CALL_EXPRESSION
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('returnsNotNull')
                      VALUE_ARGUMENT_LIST
                        PsiElement(LPAR)('(')
                        PsiElement(RPAR)(')')
                    PsiElement(RPAR)(')')
              PsiWhiteSpace('\n    ')
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          BINARY_EXPRESSION
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('encoded')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(EQEQ)('==')
            PsiWhiteSpace(' ')
            NULL
              PsiElement(null)('null')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        THEN
          RETURN
            PsiElement(return)('return')
            PsiWhiteSpace(' ')
            NULL
              PsiElement(null)('null')
      PsiWhiteSpace('\n    ')
      RETURN
        PsiElement(return)('return')
        PsiWhiteSpace(' ')
        BINARY_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('encoded')
          PsiWhiteSpace(' ')
          OPERATION_REFERENCE
            PsiElement(PLUS)('+')
          PsiWhiteSpace(' ')
          STRING_TEMPLATE
            PsiElement(OPEN_QUOTE)('"')
            LITERAL_STRING_TEMPLATE_ENTRY
              PsiElement(REGULAR_STRING_PART)('a')
            PsiElement(CLOSING_QUOTE)('"')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    MODIFIER_LIST
      ANNOTATION_ENTRY
        PsiElement(AT)('@')
        CONSTRUCTOR_CALLEE
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('OptIn')
        VALUE_ARGUMENT_LIST
          PsiElement(LPAR)('(')
          VALUE_ARGUMENT
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('ExperimentalContracts')
              PsiElement(COLONCOLON)('::')
              PsiElement(class)('class')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          VALUE_ARGUMENT
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('ExperimentalExtendedContracts')
              PsiElement(COLONCOLON)('::')
              PsiElement(class)('class')
          PsiElement(RPAR)(')')
      PsiWhiteSpace('\n')
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    TYPE_PARAMETER_LIST
      PsiElement(LT)('<')
      TYPE_PARAMETER
        PsiElement(IDENTIFIER)('R')
      PsiElement(GT)('>')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('runIf')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      VALUE_PARAMETER
        PsiElement(IDENTIFIER)('condition')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('Boolean')
      PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      VALUE_PARAMETER
        PsiElement(IDENTIFIER)('block')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          FUNCTION_TYPE
            VALUE_PARAMETER_LIST
              PsiElement(LPAR)('(')
              PsiElement(RPAR)(')')
            PsiWhiteSpace(' ')
            PsiElement(ARROW)('->')
            PsiWhiteSpace(' ')
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('R')
      PsiElement(RPAR)(')')
    PsiElement(COLON)(':')
    PsiWhiteSpace(' ')
    TYPE_REFERENCE
      NULLABLE_TYPE
        USER_TYPE
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('R')
        PsiElement(QUEST)('?')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('contract')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              BLOCK
                BINARY_EXPRESSION
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('condition')
                  PsiWhiteSpace(' ')
                  OPERATION_REFERENCE
                    PsiElement(IDENTIFIER)('holdsIn')
                  PsiWhiteSpace(' ')
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('block')
              PsiWhiteSpace(' ')
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      RETURN
        PsiElement(return)('return')
        PsiWhiteSpace(' ')
        IF
          PsiElement(if)('if')
          PsiWhiteSpace(' ')
          PsiElement(LPAR)('(')
          CONDITION
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('condition')
          PsiElement(RPAR)(')')
          PsiWhiteSpace(' ')
          THEN
            BLOCK
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              CALL_EXPRESSION
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('block')
                VALUE_ARGUMENT_LIST
                  PsiElement(LPAR)('(')
                  PsiElement(RPAR)(')')
              PsiWhiteSpace(' ')
              PsiElement(RBRACE)('}')
          PsiWhiteSpace(' ')
          PsiElement(else)('else')
          PsiWhiteSpace(' ')
          ELSE
            NULL
              PsiElement(null)('null')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')