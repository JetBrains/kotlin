FILE /when.kt
  CLASS OBJECT A
    $this: VALUE_PARAMETER this@A: A
    CONSTRUCTOR private constructor A()
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
        INSTANCE_INITIALIZER_CALL classDescriptor='A'
    FUN FAKE_OVERRIDE public open override fun equals(other: kotlin.Any?): kotlin.Boolean
      $this: VALUE_PARAMETER this@Any: Any
      VALUE_PARAMETER value-parameter other: kotlin.Any?
    FUN FAKE_OVERRIDE public open override fun hashCode(): kotlin.Int
      $this: VALUE_PARAMETER this@Any: Any
    FUN FAKE_OVERRIDE public open override fun toString(): kotlin.String
      $this: VALUE_PARAMETER this@Any: Any
  FUN public fun testWithSubject(x: kotlin.Any?): kotlin.String
    VALUE_PARAMETER value-parameter x: kotlin.Any?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='testWithSubject(Any?): String'
        BLOCK type=kotlin.String origin=WHEN
          VAR IR_TEMPORARY_VARIABLE val tmp0_subject: kotlin.Any?
            GET_VAR 'value-parameter x: Any?' type=kotlin.Any? origin=null
          WHEN type=kotlin.String origin=WHEN
            BRANCH
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'tmp0_subject: Any?' type=kotlin.Any? origin=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST String type=kotlin.String value='null'
            BRANCH
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'tmp0_subject: Any?' type=kotlin.Any? origin=null
                arg1: GET_OBJECT 'A' type=A
              then: CONST String type=kotlin.String value='A'
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
                GET_VAR 'tmp0_subject: Any?' type=kotlin.Any? origin=null
              then: CONST String type=kotlin.String value='String'
            BRANCH
              if: CALL 'contains(Any) on Iterable<Any>: Boolean' type=kotlin.Boolean origin=IN
                <T>: Any
                $receiver: CALL 'setOf(): Set<Nothing>' type=kotlin.collections.Set<kotlin.Nothing> origin=null
                  <T>: Nothing
                element: GET_VAR 'tmp0_subject: Any?' type=kotlin.Any? origin=null
              then: CONST String type=kotlin.String value='nothingness?'
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value='true'
              then: CONST String type=kotlin.String value='something'
  FUN public fun test(x: kotlin.Any?): kotlin.String
    VALUE_PARAMETER value-parameter x: kotlin.Any?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test(Any?): String'
        WHEN type=kotlin.String origin=WHEN
          BRANCH
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'value-parameter x: Any?' type=kotlin.Any? origin=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CONST String type=kotlin.String value='null'
          BRANCH
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'value-parameter x: Any?' type=kotlin.Any? origin=null
              arg1: GET_OBJECT 'A' type=A
            then: CONST String type=kotlin.String value='A'
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
              GET_VAR 'value-parameter x: Any?' type=kotlin.Any? origin=null
            then: CONST String type=kotlin.String value='String'
          BRANCH
            if: CALL 'contains(Any) on Iterable<Any>: Boolean' type=kotlin.Boolean origin=IN
              <T>: Any
              $receiver: CALL 'setOf(): Set<Nothing>' type=kotlin.collections.Set<kotlin.Nothing> origin=null
                <T>: Nothing
              element: GET_VAR 'value-parameter x: Any?' type=kotlin.Any? origin=null
            then: CONST String type=kotlin.String value='nothingness?'
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value='true'
            then: CONST String type=kotlin.String value='something'
  FUN public fun testComma(x: kotlin.Int): kotlin.String
    VALUE_PARAMETER value-parameter x: kotlin.Int
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='testComma(Int): String'
        BLOCK type=kotlin.String origin=WHEN
          VAR IR_TEMPORARY_VARIABLE val tmp0_subject: kotlin.Int
            GET_VAR 'value-parameter x: Int' type=kotlin.Int origin=null
          WHEN type=kotlin.String origin=WHEN
            BRANCH
              if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                BRANCH
                  if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                    BRANCH
                      if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                        BRANCH
                          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                            arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                            arg1: CONST Int type=kotlin.Int value='1'
                          then: CONST Boolean type=kotlin.Boolean value='true'
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value='true'
                          then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                            arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                            arg1: CONST Int type=kotlin.Int value='2'
                      then: CONST Boolean type=kotlin.Boolean value='true'
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value='true'
                      then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int value='3'
                  then: CONST Boolean type=kotlin.Boolean value='true'
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value='true'
                  then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value='4'
              then: CONST String type=kotlin.String value='1234'
            BRANCH
              if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                BRANCH
                  if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                    BRANCH
                      if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int value='5'
                      then: CONST Boolean type=kotlin.Boolean value='true'
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value='true'
                      then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int value='6'
                  then: CONST Boolean type=kotlin.Boolean value='true'
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value='true'
                  then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value='7'
              then: CONST String type=kotlin.String value='567'
            BRANCH
              if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                BRANCH
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value='8'
                  then: CONST Boolean type=kotlin.Boolean value='true'
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value='true'
                  then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value='9'
              then: CONST String type=kotlin.String value='89'
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value='true'
              then: CONST String type=kotlin.String value='?'

