FILE: complex.kt
    public abstract interface AutoCloseable : R|kotlin/Any| {
        public abstract fun close(): R|kotlin/Unit|

    }
    public final fun R|kotlin/Throwable|.addSuppressed(other: R|kotlin/Throwable|): R|kotlin/Unit| {
    }
    internal final fun R|AutoCloseable?|.closeFinally(cause: R|kotlin/Throwable?|): R|kotlin/Unit| {
        ^closeFinally when () {
            ==(this@R|/closeFinally|, Null(null)) ->  {
            }
            ==(R|<local>/cause|, Null(null)) ->  {
                this@R|/closeFinally|.R|/AutoCloseable.close|()
            }
            else ->  {
                try {
                    this@R|/closeFinally|.R|/AutoCloseable.close|()
                }
                catch (closeException: R|kotlin/Throwable|) {
                    R|<local>/cause|.R|/addSuppressed|(R|<local>/closeException|)
                }

            }
        }

    }
    public final inline fun <reified T : R|kotlin/Any|> R|kotlin/collections/List<*>|.firstIsInstanceOrNull(): R|T?| {
        lval <iterator>: R|kotlin/collections/Iterator<kotlin/Any?>| = this@R|/firstIsInstanceOrNull|.R|FakeOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<kotlin/Any?>|>|()
        while(R|<local>/<iterator>|.R|kotlin/collections/Iterator.hasNext|()) {
            lval element: R|kotlin/Any?| = R|<local>/<iterator>|.R|FakeOverride<kotlin/collections/Iterator.next: R|kotlin/Any?|>|()
            when () {
                (R|<local>/element| is R|T|) ->  {
                    ^firstIsInstanceOrNull R|<local>/element|
                }
            }

        }

        ^firstIsInstanceOrNull Null(null)
    }
