/override_properties_types.kt:(520,530): info: Generated Viper text for extractInt:
field bf$field: Ref

method f$extractInt$TF$T$c$Base$T$Boolean(p$base: Ref, p$returnNull: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$intType()))
  ensures ret$0 == df$rt$nullValue() ==> df$rt$boolFromRef(p$returnNull)
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$base), df$rt$T$c$Base())
  inhale acc(p$c$Base$shared(p$base), wildcard)
  inhale df$rt$isSubtype(df$rt$typeOf(p$returnNull), df$rt$boolType())
  if (df$rt$boolFromRef(p$returnNull)) {
    var anon$0: Ref
    anon$0 := df$rt$nullValue()
    ret$0 := anon$0
  } else {
    var anon$1: Ref
    if (df$rt$isSubtype(df$rt$typeOf(p$base), df$rt$T$c$OpenClassOpenFieldVarDerived())) {
      var anon$2: Ref
      var anon$3: Ref
      anon$3 := p$base
      inhale acc(p$c$OpenClassOpenFieldVarDerived$shared(anon$3), wildcard)
      anon$2 := pg$public$field(anon$3)
      anon$1 := anon$2
      inhale df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$intType())
    } elseif (df$rt$isSubtype(df$rt$typeOf(p$base), df$rt$T$c$FinalClassOpenFieldVarDerived())) {
      var anon$4: Ref
      anon$4 := p$base
      inhale acc(p$c$FinalClassOpenFieldVarDerived$shared(anon$4), wildcard)
      inhale acc(anon$4.bf$field, write)
      anon$1 := anon$4.bf$field
      exhale acc(anon$4.bf$field, write)
      inhale df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$intType())
    } elseif (df$rt$isSubtype(df$rt$typeOf(p$base), df$rt$T$c$FinalClassFinalFieldValDerived())) {
      var anon$5: Ref
      anon$5 := p$base
      inhale acc(p$c$FinalClassFinalFieldValDerived$shared(anon$5), wildcard)
      unfold acc(p$c$FinalClassFinalFieldValDerived$shared(anon$5), wildcard)
      anon$1 := anon$5.bf$field
    } elseif (df$rt$isSubtype(df$rt$typeOf(p$base), df$rt$T$c$OpenClassFinalFieldVarDerived())) {
      var anon$6: Ref
      anon$6 := p$base
      inhale acc(p$c$OpenClassFinalFieldVarDerived$shared(anon$6), wildcard)
      inhale acc(anon$6.bf$field, write)
      anon$1 := anon$6.bf$field
      exhale acc(anon$6.bf$field, write)
      inhale df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$intType())
    } else {
      anon$1 := df$rt$intToRef(0)}
    ret$0 := anon$1
  }
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$public$field(this: Ref) returns (ret: Ref)


method ps$public$field(this: Ref, value: Ref) returns (ret: Ref)
