RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var x: Int = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] get(): Int
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] set([ResolvedTo(RAW_FIR)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var x: Int = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] get(): Int
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] set([ResolvedTo(RAW_FIR)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] var x: Int = LAZY_EXPRESSION
                public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=X] get(): Int
                public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=X] set([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(COMPANION_GENERATION)] var x: Int = LAZY_EXPRESSION
                public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=X] get(): Int
                public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=X] set([ResolvedTo(COMPANION_GENERATION)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(SUPER_TYPES)] var x: Int = LAZY_EXPRESSION
                public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=X] get(): Int
                public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=X] set([ResolvedTo(SUPER_TYPES)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(TYPES)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(TYPES)] var x: R|kotlin/Int| = LAZY_EXPRESSION
                public? [ResolvedTo(TYPES)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public? [ResolvedTo(TYPES)] [ContainingClassKey=X] set([ResolvedTo(TYPES)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] var x: R|kotlin/Int| = LAZY_EXPRESSION
                public [ResolvedTo(STATUS)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public [ResolvedTo(STATUS)] [ContainingClassKey=X] set([ResolvedTo(STATUS)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] var x: R|kotlin/Int| = LAZY_EXPRESSION
                public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=X] set([ResolvedTo(EXPECT_ACTUAL_MATCHING)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(CONTRACTS)] var x: R|kotlin/Int| = LAZY_EXPRESSION
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=X] set([ResolvedTo(CONTRACTS)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] var x: R|kotlin/Int| = LAZY_EXPRESSION
                public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=X] set([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(CONSTANT_EVALUATION)] var x: R|kotlin/Int| = LAZY_EXPRESSION
                public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=X] set([ResolvedTo(CONSTANT_EVALUATION)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(ANNOTATION_ARGUMENTS)] var x: R|kotlin/Int| = LAZY_EXPRESSION
                public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=X] set([ResolvedTo(ANNOTATION_ARGUMENTS)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(BODY_RESOLVE)] var x: R|kotlin/Int| = Int(2)
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] set([ResolvedTo(BODY_RESOLVE)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| {
                    ^ Q|kotlin/Unit|
                }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] parameterOfNonLocalSetterScript.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-parameterOfNonLocalSetterScript.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-parameterOfNonLocalSetterScript.kts>] class X : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] constructor(): R|X| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] var x: R|kotlin/Int| = Int(2)
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] get(): R|kotlin/Int|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] set([ResolvedTo(BODY_RESOLVE)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| {
                    ^ Q|kotlin/Unit|
                }

        }

