FILE fqName:<root> fileName:/AtomicArrayTest.kt
  CLASS CLASS name:ARef modality:FINAL visibility:public [data] superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.ARef
    PROPERTY name:n visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]
        EXPRESSION_BODY
          GET_VAR 'n: kotlin.Int declared in <root>.ARef.<init>' type=kotlin.Int origin=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-n> visibility:public modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ARef
        correspondingProperty: PROPERTY name:n visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-n> (): kotlin.Int declared in <root>.ARef'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.ARef declared in <root>.ARef.<get-n>' type=<root>.ARef origin=null
    CONSTRUCTOR visibility:public returnType:<root>.ARef [primary]
      VALUE_PARAMETER kind:Regular name:n index:0 type:kotlin.Int
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:ARef modality:FINAL visibility:public [data] superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN GENERATED_DATA_CLASS_MEMBER name:component1 visibility:public modality:FINAL returnType:kotlin.Int [operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ARef
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun component1 (): kotlin.Int declared in <root>.ARef'
          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
            receiver: GET_VAR '<this>: <root>.ARef declared in <root>.ARef.component1' type=<root>.ARef origin=null
    FUN GENERATED_DATA_CLASS_MEMBER name:copy visibility:public modality:FINAL returnType:<root>.ARef
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ARef
      VALUE_PARAMETER kind:Regular name:n index:1 type:kotlin.Int
        EXPRESSION_BODY
          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
            receiver: GET_VAR '<this>: <root>.ARef declared in <root>.ARef.copy' type=<root>.ARef origin=null
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun copy (n: kotlin.Int): <root>.ARef declared in <root>.ARef'
          CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ARef' type=<root>.ARef origin=null
            ARG n: GET_VAR 'n: kotlin.Int declared in <root>.ARef.copy' type=kotlin.Int origin=null
    FUN GENERATED_DATA_CLASS_MEMBER name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ARef
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      BLOCK_BODY
        WHEN type=kotlin.Unit origin=null
          BRANCH
            if: CALL 'public final fun EQEQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQEQ
              ARG arg0: GET_VAR '<this>: <root>.ARef declared in <root>.ARef.equals' type=<root>.ARef origin=null
              ARG arg1: GET_VAR 'other: kotlin.Any? declared in <root>.ARef.equals' type=kotlin.Any? origin=null
            then: RETURN type=kotlin.Nothing from='public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in <root>.ARef'
              CONST Boolean type=kotlin.Boolean value=true
        WHEN type=kotlin.Unit origin=null
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=<root>.ARef
              GET_VAR 'other: kotlin.Any? declared in <root>.ARef.equals' type=kotlin.Any? origin=null
            then: RETURN type=kotlin.Nothing from='public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in <root>.ARef'
              CONST Boolean type=kotlin.Boolean value=false
        VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:<root>.ARef [val]
          TYPE_OP type=<root>.ARef origin=CAST typeOperand=<root>.ARef
            GET_VAR 'other: kotlin.Any? declared in <root>.ARef.equals' type=kotlin.Any? origin=null
        WHEN type=kotlin.Unit origin=null
          BRANCH
            if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
              ARG <this>: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                ARG arg0: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
                  receiver: GET_VAR '<this>: <root>.ARef declared in <root>.ARef.equals' type=<root>.ARef origin=null
                ARG arg1: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
                  receiver: GET_VAR 'val tmp_0: <root>.ARef declared in <root>.ARef.equals' type=<root>.ARef origin=null
            then: RETURN type=kotlin.Nothing from='public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in <root>.ARef'
              CONST Boolean type=kotlin.Boolean value=false
        RETURN type=kotlin.Nothing from='public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in <root>.ARef'
          CONST Boolean type=kotlin.Boolean value=true
    FUN GENERATED_DATA_CLASS_MEMBER name:hashCode visibility:public modality:OPEN returnType:kotlin.Int
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ARef
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public open fun hashCode (): kotlin.Int declared in <root>.ARef'
          CALL 'public open fun hashCode (): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
            ARG <this>: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.ARef declared in <root>.ARef.hashCode' type=<root>.ARef origin=null
    FUN GENERATED_DATA_CLASS_MEMBER name:toString visibility:public modality:OPEN returnType:kotlin.String
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.ARef
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public open fun toString (): kotlin.String declared in <root>.ARef'
          STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value="ARef("
            CONST String type=kotlin.String value="n="
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:n type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.ARef declared in <root>.ARef.toString' type=<root>.ARef origin=null
            CONST String type=kotlin.String value=")"
  CLASS CLASS name:AtomicArrayClass modality:FINAL visibility:private superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.AtomicArrayClass
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:intArr visibility:public modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:intArr type:kotlin.concurrent.AtomicIntArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicIntArray' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-intArr> visibility:public modality:FINAL returnType:kotlin.concurrent.AtomicIntArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayClass
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:intArr visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:intArr type:kotlin.concurrent.AtomicIntArray visibility:private [final] declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
              receiver: GET_VAR '<this>: <root>.AtomicArrayClass declared in <root>.AtomicArrayClass.<get-intArr>' type=<root>.AtomicArrayClass origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:longArr visibility:public modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:longArr type:kotlin.concurrent.AtomicLongArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicLongArray' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-longArr> visibility:public modality:FINAL returnType:kotlin.concurrent.AtomicLongArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayClass
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:longArr visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:longArr type:kotlin.concurrent.AtomicLongArray visibility:private [final] declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
              receiver: GET_VAR '<this>: <root>.AtomicArrayClass declared in <root>.AtomicArrayClass.<get-longArr>' type=<root>.AtomicArrayClass origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:booleanArr visibility:public modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:booleanArr type:kotlin.concurrent.AtomicIntArray visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (size: kotlin.Int) declared in kotlin.concurrent.AtomicIntArray' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-booleanArr> visibility:public modality:FINAL returnType:kotlin.concurrent.AtomicIntArray
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayClass
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:booleanArr visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:booleanArr type:kotlin.concurrent.AtomicIntArray visibility:private [final] declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
              receiver: GET_VAR '<this>: <root>.AtomicArrayClass declared in <root>.AtomicArrayClass.<get-booleanArr>' type=<root>.AtomicArrayClass origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:refArr visibility:public modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:refArr type:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'internal constructor <init> (array: kotlin.Array<T of kotlin.concurrent.AtomicArray>) declared in kotlin.concurrent.AtomicArray' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            TYPE_ARG (of class) T: kotlin.Any?
            ARG array: CALL 'public final fun arrayOfNulls <T> (size: kotlin.Int): kotlin.Array<T of kotlin.arrayOfNulls?> declared in kotlin' type=kotlin.Array<T of kotlin.arrayOfNulls?> origin=null
              TYPE_ARG T: kotlin.Any?
              ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-refArr> visibility:public modality:FINAL returnType:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray>
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayClass
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:refArr visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:refArr type:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> visibility:private [final] declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              receiver: GET_VAR '<this>: <root>.AtomicArrayClass declared in <root>.AtomicArrayClass.<get-refArr>' type=<root>.AtomicArrayClass origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:anyArr visibility:public modality:FINAL [val]
      FIELD ATOMICFU_GENERATED_FIELD name:anyArr type:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'internal constructor <init> (array: kotlin.Array<T of kotlin.concurrent.AtomicArray>) declared in kotlin.concurrent.AtomicArray' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            TYPE_ARG (of class) T: kotlin.Any?
            ARG array: CALL 'public final fun arrayOfNulls <T> (size: kotlin.Int): kotlin.Array<T of kotlin.arrayOfNulls?> declared in kotlin' type=kotlin.Array<T of kotlin.arrayOfNulls?> origin=null
              TYPE_ARG T: kotlin.Any?
              ARG size: CONST Int type=kotlin.Int value=10
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-anyArr> visibility:public modality:FINAL returnType:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray>
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayClass
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:anyArr visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-anyArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:anyArr type:kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> visibility:private [final] declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              receiver: GET_VAR '<this>: <root>.AtomicArrayClass declared in <root>.AtomicArrayClass.<get-anyArr>' type=<root>.AtomicArrayClass origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:internal modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Any? visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ARef' type=<root>.ARef origin=null
            ARG n: CONST Int type=kotlin.Int value=8
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a$volatile> visibility:internal modality:FINAL returnType:kotlin.Any?
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayClass
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:internal modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='internal final fun <get-a$volatile> (): kotlin.Any? declared in <root>.AtomicArrayClass'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Any? visibility:private declared in <root>.AtomicArrayClass' type=kotlin.Any? origin=null
              receiver: GET_VAR '<this>: <root>.AtomicArrayClass declared in <root>.AtomicArrayClass.<get-a$volatile>' type=<root>.AtomicArrayClass origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a$volatile> visibility:internal modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayClass
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Any?
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:internal modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='internal final fun <set-a$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.AtomicArrayClass'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Any? visibility:private declared in <root>.AtomicArrayClass' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.AtomicArrayClass declared in <root>.AtomicArrayClass.<set-a$volatile>' type=<root>.AtomicArrayClass origin=null
              value: GET_VAR 'value: kotlin.Any? declared in <root>.AtomicArrayClass.<set-a$volatile>' type=kotlin.Any? origin=null
    CONSTRUCTOR visibility:public returnType:<root>.AtomicArrayClass [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:AtomicArrayClass modality:FINAL visibility:private superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
  CLASS CLASS name:AtomicArrayTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.AtomicArrayTest
    CONSTRUCTOR visibility:public returnType:<root>.AtomicArrayTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:AtomicArrayTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:testAnyArray visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayTest
      BLOCK_BODY
        VAR name:A type:<root>.AtomicArrayClass [val]
          CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicArrayClass' type=<root>.AtomicArrayClass origin=null
        VAR name:s1 type:kotlin.String [val]
          CONST String type=kotlin.String value="aaa"
        VAR name:s2 type:kotlin.String [val]
          CONST String type=kotlin.String value="bbb"
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-anyArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testAnyArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: GET_VAR 'val s1: kotlin.String declared in <root>.AtomicArrayTest.testAnyArray' type=kotlin.String origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG expected: CONST String type=kotlin.String value="aaa"
          ARG actual: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
            CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
              ARG <this>: CALL 'public final fun <get-anyArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testAnyArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=0
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'public final fun <get-anyArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testAnyArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=0
            ARG expectedValue: GET_VAR 'val s1: kotlin.String declared in <root>.AtomicArrayTest.testAnyArray' type=kotlin.String origin=null
            ARG newValue: GET_VAR 'val s2: kotlin.String declared in <root>.AtomicArrayTest.testAnyArray' type=kotlin.String origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG expected: CONST String type=kotlin.String value="bbb"
          ARG actual: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
            CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
              ARG <this>: CALL 'public final fun <get-anyArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testAnyArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=0
        VAR name:r0 type:kotlin.Any? [val]
          TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
            CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
              ARG <this>: CALL 'public final fun <get-anyArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testAnyArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=0
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-anyArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testAnyArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=3
          ARG newValue: GET_VAR 'val r0: kotlin.Any? declared in <root>.AtomicArrayTest.testAnyArray' type=kotlin.Any? origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG expected: CONST String type=kotlin.String value="bbb"
          ARG actual: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
            CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
              ARG <this>: CALL 'public final fun <get-anyArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testAnyArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=3
    FUN name:testBooleanArray visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayTest
      BLOCK_BODY
        VAR name:A type:<root>.AtomicArrayClass [val]
          CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicArrayClass' type=<root>.AtomicArrayClass origin=null
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
                ARG index: CONST Int type=kotlin.Int value=1
              ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=1
            ARG expectedValue: WHEN type=kotlin.Int origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=false
                then: CONST Int type=kotlin.Int value=1
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Int type=kotlin.Int value=0
            ARG newValue: WHEN type=kotlin.Int origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Int type=kotlin.Int value=1
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Int type=kotlin.Int value=0
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: WHEN type=kotlin.Int origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=0
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            ARG arg0: CALL 'public final fun getAndSet (index: kotlin.Int, newValue: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=2
              ARG newValue: WHEN type=kotlin.Int origin=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Int type=kotlin.Int value=1
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Int type=kotlin.Int value=0
            ARG arg1: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: WHEN type=kotlin.Boolean origin=ANDAND
            BRANCH
              if: WHEN type=kotlin.Boolean origin=ANDAND
                BRANCH
                  if: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                    CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                        ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
                        ARG index: CONST Int type=kotlin.Int value=0
                      ARG arg1: CONST Int type=kotlin.Int value=1
                  then: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                    CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                        ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                          ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
                        ARG index: CONST Int type=kotlin.Int value=1
                      ARG arg1: CONST Int type=kotlin.Int value=1
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Boolean type=kotlin.Boolean value=false
              then: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                  ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                    ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                      ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
                    ARG index: CONST Int type=kotlin.Int value=2
                  ARG arg1: CONST Int type=kotlin.Int value=1
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Boolean type=kotlin.Boolean value=false
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: WHEN type=kotlin.Int origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=false
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=0
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: CALL 'public final fun <get-booleanArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testBooleanArray' type=<root>.AtomicArrayClass origin=null
                ARG index: CONST Int type=kotlin.Int value=0
              ARG arg1: CONST Int type=kotlin.Int value=1
    FUN name:testIntArray visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayTest
      BLOCK_BODY
        VAR name:A type:<root>.AtomicArrayClass [val]
          CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicArrayClass' type=<root>.AtomicArrayClass origin=null
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=0
            ARG expectedValue: CONST Int type=kotlin.Int value=0
            ARG newValue: CONST Int type=kotlin.Int value=3
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=0
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=1
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONST Int type=kotlin.Int value=5
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=5
          ARG actual: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
            ARG <this>: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
              ARG <this>: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                    ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
                  ARG index: CONST Int type=kotlin.Int value=0
              ARG other: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                  ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                    ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
                  ARG index: CONST Int type=kotlin.Int value=1
            ARG other: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
              CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
                ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                  ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
                ARG index: CONST Int type=kotlin.Int value=2
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=0
            ARG expectedValue: CONST Int type=kotlin.Int value=5
            ARG newValue: CONST Int type=kotlin.Int value=10
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=10
          ARG actual: CALL 'public final fun getAndDecrement (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
            ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=0
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=9
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=0
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Int): kotlin.Unit declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=2
          ARG newValue: CONST Int type=kotlin.Int value=2
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=2
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: kotlin.Int, newValue: kotlin.Int): kotlin.Boolean declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=2
            ARG expectedValue: CONST Int type=kotlin.Int value=2
            ARG newValue: CONST Int type=kotlin.Int value=34
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=34
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'public final fun get (index: kotlin.Int): kotlin.Int declared in kotlin.concurrent.AtomicIntArray' type=kotlin.Int origin=null
              ARG <this>: CALL 'public final fun <get-intArr> (): kotlin.concurrent.AtomicIntArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicIntArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testIntArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=2
    FUN name:testLongArray visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayTest
      BLOCK_BODY
        VAR name:A type:<root>.AtomicArrayClass [val]
          CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicArrayClass' type=<root>.AtomicArrayClass origin=null
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONST Long type=kotlin.Long value=2424920024888888848
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=2424920024888888848
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=0
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: CONST Long type=kotlin.Long value=8424920024888888848
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=8424920024888888848
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=0
        VAR name:ac type:kotlin.Long [val]
          TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=0
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=3
          ARG newValue: GET_VAR 'val ac: kotlin.Long declared in <root>.AtomicArrayTest.testLongArray' type=kotlin.Long origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=8424920024888888848
          ARG actual: CALL 'public final fun getAndSet (index: kotlin.Int, newValue: kotlin.Long): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
            ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=3
            ARG newValue: CONST Long type=kotlin.Long value=8924920024888888848
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=8924920024888888848
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=3
        VAR name:ac1 type:kotlin.Long [val]
          TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=3
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=4
          ARG newValue: GET_VAR 'val ac1: kotlin.Long declared in <root>.AtomicArrayTest.testLongArray' type=kotlin.Long origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=8924920024888888849
          ARG actual: CALL 'public final fun incrementAndGet (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
            ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=4
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=8924920024888888849
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=4
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=8924920024888888849
          ARG actual: CALL 'public final fun getAndDecrement (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
            ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=4
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=8924920024888888848
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=4
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=4
          ARG newValue: CONST Long type=kotlin.Long value=8924920024888888848
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=8924920024888888848
          ARG actual: CALL 'public final fun getAndAdd (index: kotlin.Int, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
            ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=4
            ARG delta: CONST Long type=kotlin.Long value=100000000000000000
        VAR name:ac2 type:kotlin.Long [val]
          TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=4
        CALL 'public final fun set (index: kotlin.Int, newValue: kotlin.Long): kotlin.Unit declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=1
          ARG newValue: GET_VAR 'val ac2: kotlin.Long declared in <root>.AtomicArrayTest.testLongArray' type=kotlin.Long origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9024920024888888848
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=-198452011965886959
          ARG actual: CALL 'public final fun addAndGet (index: kotlin.Int, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
            ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=1
            ARG delta: CONST Long type=kotlin.Long value=-9223372036854775807
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=-198452011965886959
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=-198452011965886958
          ARG actual: CALL 'public final fun incrementAndGet (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
            ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=-198452011965886958
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=-198452011965886959
          ARG actual: CALL 'public final fun decrementAndGet (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
            ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=1
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=-198452011965886959
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'public final fun get (index: kotlin.Int): kotlin.Long declared in kotlin.concurrent.AtomicLongArray' type=kotlin.Long origin=null
              ARG <this>: CALL 'public final fun <get-longArr> (): kotlin.concurrent.AtomicLongArray declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicLongArray origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testLongArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=1
    FUN name:testRefArray visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AtomicArrayTest
      BLOCK_BODY
        VAR name:A type:<root>.AtomicArrayClass [val]
          CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicArrayClass' type=<root>.AtomicArrayClass origin=null
        VAR name:a2 type:<root>.ARef [val]
          CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ARef' type=<root>.ARef origin=null
            ARG n: CONST Int type=kotlin.Int value=2
        VAR name:a3 type:<root>.ARef [val]
          CONSTRUCTOR_CALL 'public constructor <init> (n: kotlin.Int) declared in <root>.ARef' type=<root>.ARef origin=null
            ARG n: CONST Int type=kotlin.Int value=3
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=0
          ARG newValue: GET_VAR 'val a2: <root>.ARef declared in <root>.AtomicArrayTest.testRefArray' type=<root>.ARef origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2
          ARG actual: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ARef' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<root>.ARef origin=EXCLEXCL
              TYPE_ARG T0: <root>.ARef
              ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                  ARG <this>: CALL 'public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                    ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
                  ARG index: CONST Int type=kotlin.Int value=0
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=0
            ARG expectedValue: GET_VAR 'val a2: <root>.ARef declared in <root>.AtomicArrayTest.testRefArray' type=<root>.ARef origin=null
            ARG newValue: GET_VAR 'val a3: <root>.ARef declared in <root>.AtomicArrayTest.testRefArray' type=<root>.ARef origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=3
          ARG actual: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ARef' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<root>.ARef origin=EXCLEXCL
              TYPE_ARG T0: <root>.ARef
              ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                  ARG <this>: CALL 'public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                    ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
                  ARG index: CONST Int type=kotlin.Int value=0
        VAR name:r0 type:<root>.ARef? [val]
          TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
            CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
              ARG <this>: CALL 'public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
              ARG index: CONST Int type=kotlin.Int value=0
        CALL 'public final fun set (index: kotlin.Int, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Unit declared in kotlin.concurrent.AtomicArray' type=kotlin.Unit origin=null
          ARG <this>: CALL 'public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
            ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
          ARG index: CONST Int type=kotlin.Int value=3
          ARG newValue: GET_VAR 'val r0: <root>.ARef? declared in <root>.AtomicArrayTest.testRefArray' type=<root>.ARef? origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=3
          ARG actual: CALL 'public final fun <get-n> (): kotlin.Int declared in <root>.ARef' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=<root>.ARef origin=EXCLEXCL
              TYPE_ARG T0: <root>.ARef
              ARG arg0: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                CALL 'public final fun get (index: kotlin.Int): T of kotlin.concurrent.AtomicArray declared in kotlin.concurrent.AtomicArray' type=T of kotlin.concurrent.AtomicArray origin=null
                  ARG <this>: CALL 'public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
                    ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
                  ARG index: CONST Int type=kotlin.Int value=3
        VAR name:a type:<root>.ARef [val]
          TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Any?
              ARG <this>: PROPERTY_REFERENCE 'internal final a$volatile: kotlin.Any? declared in <root>.AtomicArrayClass' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Any? visibility:private declared in <root>.AtomicArrayClass' getter='internal final fun <get-a$volatile> (): kotlin.Any? declared in <root>.AtomicArrayClass' setter='internal final fun <set-a$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.AtomicArrayClass' type=kotlin.reflect.KMutableProperty0<kotlin.Any?> origin=null
                ARG 1: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (index: kotlin.Int, expectedValue: T of kotlin.concurrent.AtomicArray, newValue: T of kotlin.concurrent.AtomicArray): kotlin.Boolean declared in kotlin.concurrent.AtomicArray' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'public final fun <get-refArr> (): kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> declared in <root>.AtomicArrayClass' type=kotlin.concurrent.AtomicArray<T of kotlin.concurrent.AtomicArray> origin=null
              ARG <this>: GET_VAR 'val A: <root>.AtomicArrayClass declared in <root>.AtomicArrayTest.testRefArray' type=<root>.AtomicArrayClass origin=null
            ARG index: CONST Int type=kotlin.Int value=3
            ARG expectedValue: GET_VAR 'val a3: <root>.ARef declared in <root>.AtomicArrayTest.testRefArray' type=<root>.ARef origin=null
            ARG newValue: GET_VAR 'val a: <root>.ARef declared in <root>.AtomicArrayTest.testRefArray' type=<root>.ARef origin=null
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:testClass type:<root>.AtomicArrayTest [val]
        CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.AtomicArrayTest' type=<root>.AtomicArrayTest origin=null
      CALL 'public final fun testIntArray (): kotlin.Unit declared in <root>.AtomicArrayTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.AtomicArrayTest declared in <root>.box' type=<root>.AtomicArrayTest origin=null
      CALL 'public final fun testLongArray (): kotlin.Unit declared in <root>.AtomicArrayTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.AtomicArrayTest declared in <root>.box' type=<root>.AtomicArrayTest origin=null
      CALL 'public final fun testBooleanArray (): kotlin.Unit declared in <root>.AtomicArrayTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.AtomicArrayTest declared in <root>.box' type=<root>.AtomicArrayTest origin=null
      CALL 'public final fun testRefArray (): kotlin.Unit declared in <root>.AtomicArrayTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.AtomicArrayTest declared in <root>.box' type=<root>.AtomicArrayTest origin=null
      CALL 'public final fun testAnyArray (): kotlin.Unit declared in <root>.AtomicArrayTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.AtomicArrayTest declared in <root>.box' type=<root>.AtomicArrayTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
