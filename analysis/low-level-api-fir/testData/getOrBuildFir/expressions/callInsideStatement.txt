KT element: KtCallExpression
FIR element: FirFunctionCallImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
this@R|special/anonymous|.R|/Builder.execute|()

FIR FILE:
FILE: [ResolvedTo(IMPORTS)] callInsideStatement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-callInsideStatement.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(CONTRACTS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Builder] set([ResolvedTo(CONTRACTS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(CONTRACTS)] fun execute(): R|kotlin/Unit| {
                println#(version#)
            }

        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun build([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        [ResolvedTo(BODY_RESOLVE)] init {
            R|/build|(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
                this@R|special/anonymous|.R|/Builder.version| = String(123)
                local final [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|<local>/A| {
                        super<R|kotlin/Any|>()
                    }

                    public final [ResolvedTo(BODY_RESOLVE)] fun doo(): R|kotlin/Unit| {
                    }

                }

                this@R|special/anonymous|.R|/Builder.execute|()
            }
            )
        }

        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init {
            builder#.version# = String()
        }
