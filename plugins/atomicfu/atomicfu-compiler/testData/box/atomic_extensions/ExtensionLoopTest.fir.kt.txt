private var a$volatile: Int
  field = 10
  private get(): Int {
    return #a$volatile
  }
  private set(value: Int) {
    return #a$volatile = value
  }

private var b$volatile: Boolean
  field = false
  private get(): Boolean {
    return #b$volatile
  }
  private set(value: Boolean) {
    return #b$volatile = value
  }

private var l$volatile: Long
  field = 10L
  private get(): Long {
    return #l$volatile
  }
  private set(value: Long) {
    return #l$volatile = value
  }

private var ref$volatile: Any?
  field = "aaa"
  private get(): Any? {
    return #ref$volatile
  }
  private set(value: Any?) {
    return #ref$volatile = value
  }

class LoopTest {
  private var a$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  private var a1$volatile: Int
    field = 1
    private get(): Int {
      return <this>.#a1$volatile
    }
    private set(value: Int) {
      return <this>.#a1$volatile = value
    }

  private var b$volatile: Boolean
    field = true
    private get(): Boolean {
      return <this>.#b$volatile
    }
    private set(value: Boolean) {
      return <this>.#b$volatile = value
    }

  private var l$volatile: Long
    field = 5000000000L
    private get(): Long {
      return <this>.#l$volatile
    }
    private set(value: Long) {
      return <this>.#l$volatile = value
    }

  private var r$volatile: Any?
    field = A(s = "aaaa")
    private get(): Any? {
      return <this>.#r$volatile
    }
    private set(value: Any?) {
      return <this>.#r$volatile = value
    }

  private var rs$volatile: Any?
    field = "bbbb"
    private get(): Any? {
      return <this>.#rs$volatile
    }
    private set(value: Any?) {
      return <this>.#rs$volatile = value
    }

  class A {
    val s: String
      field = s
      get

    constructor(s: String) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun bar$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, delta: Int): Int {
    return <this>.foo$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, to = handler$atomicfu.get(index = index$atomicfu) as Int.plus(other = delta))
  }

  private inline fun bar$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, delta: Int): Int {
    return <this>.foo$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, to = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int.plus(other = delta))
  }

  private inline fun extensionLoop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> return handler$atomicfu.get(index = index$atomicfu) as Int
      }
      return 777
    }
)
  }

  private inline fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
      }
      return 777
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      handler$atomicfu.set(index = index$atomicfu, newValue = cur.plus(other = 10))
      return when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> handler$atomicfu.get(index = index$atomicfu) as Int
        else -> handler$atomicfu.incrementAndGet(index = index$atomicfu)
      }
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      atomicSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ newValue = cur.plus(other = 10))
      return when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
        else -> getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 1).plus(other = 1)
      }
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, first: Int, second: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = first) /*~> Unit */
      compareAndSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ expectedValue = first, newValue = second) /*~> Unit */
      return handler$atomicfu.get(index = index$atomicfu) as Int
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, first: Int, second: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = first) /*~> Unit */
      compareAndSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ expectedValue = first, newValue = second) /*~> Unit */
      return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
    }
)
  }

  private inline fun extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) /*~> Unit */
      <this>.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
        return LoopTest<this>::a$volatile
      }
, to = 5) /*~> Unit */
      return handler$atomicfu.get(index = index$atomicfu) as Int
    }
)
  }

  private inline fun extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) /*~> Unit */
      <this>.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
        return LoopTest<this>::a$volatile
      }
, to = 5) /*~> Unit */
      return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
    }
)
  }

  private inline fun foo$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> return 777
        else -> return handler$atomicfu.get(index = index$atomicfu) as Int
      }
    }
)
  }

  private inline fun foo$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> return 777
        else -> return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
      }
    }
)
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_0: Int = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_0)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_1: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_1)
    }
  }

  private inline fun casLoop(to: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        compareAndSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ expectedValue = cur, newValue = to) -> return atomicGetField<Int>(/* <this> = LoopTest<this>::a$volatile */) as Int
      }
      return 777
    }
)
  }

  private inline fun casLoopExpression(to: Int): Int {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        compareAndSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ expectedValue = cur, newValue = to) -> return atomicGetField<Int>(/* <this> = LoopTest<this>::a$volatile */) as Int
      }
      return 777
    }
)
  }

  fun testIntExtensionLoops() {
    assertEquals<Int>(expected = 5, actual = <this>.casLoop(to = 5))
    assertEquals<Int>(expected = 6, actual = <this>.casLoopExpression(to = 6))
    assertEquals<Int>(expected = 66, actual = <this>.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, to = 66))
    assertEquals<Int>(expected = 77, actual = <this>.extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, to = 777))
    assertEquals<Int>(expected = 99, actual = <this>.extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, first = 88, second = 99))
    assertEquals<Int>(expected = 5, actual = <this>.extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, to = 100))
    assertEquals<Int>(expected = 777, actual = <this>.bar$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, delta = 100))
  }

}

private inline fun loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, action$atomicfu: Function1<Any?, Unit>) {
  while (true) { // BLOCK
    val tmp_2: T = handler$atomicfu.get(index = index$atomicfu)
    action$atomicfu.invoke(p1 = tmp_2)
  }
}

private inline fun loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Boolean, Unit>) {
  while (true) { // BLOCK
    val tmp_3: Boolean = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1)
    action$atomicfu.invoke(p1 = tmp_3)
  }
}

private inline fun loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Int, Unit>) {
  while (true) { // BLOCK
    val tmp_4: Int = handler$atomicfu.get(index = index$atomicfu)
    action$atomicfu.invoke(p1 = tmp_4)
  }
}

private inline fun loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, action$atomicfu: Function1<Long, Unit>) {
  while (true) { // BLOCK
    val tmp_5: Long = handler$atomicfu.get(index = index$atomicfu)
    action$atomicfu.invoke(p1 = tmp_5)
  }
}

private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Unit>) {
  while (true) { // BLOCK
    val tmp_6: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
    action$atomicfu.invoke(p1 = tmp_6)
  }
}

private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, action$atomicfu: Function1<Boolean, Unit>) {
  while (true) { // BLOCK
    val tmp_7: T = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */)
    action$atomicfu.invoke(p1 = tmp_7)
  }
}

private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Unit>) {
  while (true) { // BLOCK
    val tmp_8: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
    action$atomicfu.invoke(p1 = tmp_8)
  }
}

private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, action$atomicfu: Function1<Long, Unit>) {
  while (true) { // BLOCK
    val tmp_9: T = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */)
    action$atomicfu.invoke(p1 = tmp_9)
  }
}

private inline fun topLevelExtensionLoop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, to: String): String {
  return loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: String) {
    handler$atomicfu.set(index = index$atomicfu, newValue = cur.plus(other = to))
    return handler$atomicfu.get(index = index$atomicfu) as Any?
  }
)
}

private inline fun topLevelExtensionLoop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Boolean): Boolean {
  return loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Boolean) {
    handler$atomicfu.set(index = index$atomicfu, newValue = when {
      to -> 1
      else -> 0
    })
    return EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean
  }
)
}

private inline fun topLevelExtensionLoop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
  return loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
    handler$atomicfu.set(index = index$atomicfu, newValue = cur.plus(other = to))
    return handler$atomicfu.get(index = index$atomicfu) as Int
  }
)
}

private inline fun topLevelExtensionLoop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, to: Long): Long {
  return loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
    handler$atomicfu.set(index = index$atomicfu, newValue = cur.plus(other = to))
    return handler$atomicfu.get(index = index$atomicfu) as Long
  }
)
}

private inline fun topLevelExtensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, to: String): String {
  return loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: String) {
    atomicSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ newValue = cur.plus(other = to))
    return atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any?
  }
)
}

private inline fun topLevelExtensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, to: Boolean): Boolean {
  return loop$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Boolean) {
    atomicSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ newValue = to)
    return atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean
  }
)
}

private inline fun topLevelExtensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
  return loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
    atomicSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ newValue = cur.plus(other = to))
    return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
  }
)
}

private inline fun topLevelExtensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, to: Long): Long {
  return loop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
    atomicSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ newValue = cur.plus(other = to))
    return atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long
  }
)
}

fun box(): String {
  val testClass: LoopTest = LoopTest()
  testClass.testIntExtensionLoops()
  testTopLevelExtensionLoop()
  return "OK"
}

fun testTopLevelExtensionLoop() {
  assertEquals<Int>(expected = 110, actual = topLevelExtensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
    return ::a$volatile
  }
, to = 100))
  assertEquals<Long>(expected = 110L, actual = topLevelExtensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = local inline fun <l$volatile-getter>(): KMutableProperty0<Long> {
    return ::l$volatile
  }
, to = 100L))
  assertEquals<Boolean>(expected = true, actual = topLevelExtensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = local inline fun <b$volatile-getter>(): KMutableProperty0<Boolean> {
    return ::b$volatile
  }
, to = true))
  assertEquals<String>(expected = "aaattt", actual = topLevelExtensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <ref$volatile-getter>(): KMutableProperty0<Any?> {
    return ::ref$volatile
  }
, to = "ttt"))
}
