RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] main.kt
    public? final? [ResolvedTo(RAW_FIR)] fun usage([ResolvedTo(RAW_FIR)] j: JavaClass.Nested): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(RAW_FIR)] fun usage([ResolvedTo(RAW_FIR)] j: JavaClass.Nested): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun usage([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] j: JavaClass.Nested): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(COMPANION_GENERATION)] fun usage([ResolvedTo(COMPANION_GENERATION)] j: JavaClass.Nested): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(SUPER_TYPES)] fun usage([ResolvedTo(SUPER_TYPES)] j: JavaClass.Nested): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(TYPES)] fun usage([ResolvedTo(TYPES)] j: R|JavaClass.Nested|): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(STATUS)] fun usage([ResolvedTo(STATUS)] j: R|JavaClass.Nested|): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun usage([ResolvedTo(EXPECT_ACTUAL_MATCHING)] j: R|JavaClass.Nested|): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(CONTRACTS)] fun usage([ResolvedTo(CONTRACTS)] j: R|JavaClass.Nested|): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun usage([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] j: R|JavaClass.Nested|): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(CONSTANT_EVALUATION)] fun usage([ResolvedTo(CONSTANT_EVALUATION)] j: R|JavaClass.Nested|): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun usage([ResolvedTo(ANNOTATION_ARGUMENTS)] j: R|JavaClass.Nested|): R|kotlin/Unit| { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(BODY_RESOLVE)] fun usage([ResolvedTo(BODY_RESOLVE)] j: R|JavaClass.Nested|): R|kotlin/Unit| {
    }

FILE: [ResolvedTo(RAW_FIR)] KotlinClass.kt
    public abstract [ResolvedTo(RAW_FIR)] class KotlinClass<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?> : Map<K, V> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor<[ResolvedTo(RAW_FIR)] K : RegularInterface, [ResolvedTo(RAW_FIR)] V : RegularInterface?>(): R|KotlinClass<K, V>| {
            LAZY_super<<implicit>>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface RegularInterface : R|kotlin/Any| {
    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] main.kt
    public final [ResolvedTo(BODY_RESOLVE)] fun usage([ResolvedTo(BODY_RESOLVE)] j: R|JavaClass.Nested|): R|kotlin/Unit| {
    }
