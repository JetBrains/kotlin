package test

public interface CustomAnnotation {

    public final annotation class MyAnnotation : kotlin.Annotation {
        public constructor MyAnnotation(/*0*/ value: test.CustomAnnotation.MyEnum)
        public final val value: test.CustomAnnotation.MyEnum
        public abstract fun value(): test.CustomAnnotation.MyEnum
    }

    public final enum class MyEnum : kotlin.Enum<test.CustomAnnotation.MyEnum!> {
        public enum entry ONE : test.CustomAnnotation.MyEnum {
            private constructor ONE()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.CustomAnnotation.MyEnum!): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        }

        private constructor MyEnum()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.CustomAnnotation.MyEnum!): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.CustomAnnotation.MyEnum
        public final /*synthesized*/ fun values(): kotlin.Array<test.CustomAnnotation.MyEnum>
    }

    test.CustomAnnotation.MyAnnotation(value = MyEnum.ONE: test.CustomAnnotation.MyEnum) public open class MyTest {
        public constructor MyTest()
    }
}
