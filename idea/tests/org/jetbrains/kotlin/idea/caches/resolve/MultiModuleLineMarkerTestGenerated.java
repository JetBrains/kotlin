/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.caches.resolve;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/multiModuleLineMarker")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class MultiModuleLineMarkerTestGenerated extends AbstractMultiModuleLineMarkerTest {
    @TestMetadata("actualEnumEntries")
    public void testActualEnumEntries() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/actualEnumEntries/");
        doTest(fileName);
    }

    public void testAllFilesPresentInMultiModuleLineMarker() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/multiModuleLineMarker"), Pattern.compile("^([^\\.]+)$"), TargetBackend.ANY, false);
    }

    @TestMetadata("expectEnumEntries")
    public void testExpectEnumEntries() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/expectEnumEntries/");
        doTest(fileName);
    }

    @TestMetadata("fromActualAnnotation")
    public void testFromActualAnnotation() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromActualAnnotation/");
        doTest(fileName);
    }

    @TestMetadata("fromActualPrimaryConstructor")
    public void testFromActualPrimaryConstructor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromActualPrimaryConstructor/");
        doTest(fileName);
    }

    @TestMetadata("fromActualSealedClass")
    public void testFromActualSealedClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromActualSealedClass/");
        doTest(fileName);
    }

    @TestMetadata("fromActualSecondaryConstructor")
    public void testFromActualSecondaryConstructor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromActualSecondaryConstructor/");
        doTest(fileName);
    }

    @TestMetadata("fromActualTypeAlias")
    public void testFromActualTypeAlias() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromActualTypeAlias/");
        doTest(fileName);
    }

    @TestMetadata("fromClassToAlias")
    public void testFromClassToAlias() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromClassToAlias/");
        doTest(fileName);
    }

    @TestMetadata("fromClassToJavaAliasInTest")
    public void testFromClassToJavaAliasInTest() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromClassToJavaAliasInTest/");
        doTest(fileName);
    }

    @TestMetadata("fromCommonToJvmHeader")
    public void testFromCommonToJvmHeader() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromCommonToJvmHeader/");
        doTest(fileName);
    }

    @TestMetadata("fromCommonToJvmImpl")
    public void testFromCommonToJvmImpl() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromCommonToJvmImpl/");
        doTest(fileName);
    }

    @TestMetadata("fromExpectedAnnotation")
    public void testFromExpectedAnnotation() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromExpectedAnnotation/");
        doTest(fileName);
    }

    @TestMetadata("fromExpectedPrimaryConstructor")
    public void testFromExpectedPrimaryConstructor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromExpectedPrimaryConstructor/");
        doTest(fileName);
    }

    @TestMetadata("fromExpectedSealedClass")
    public void testFromExpectedSealedClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromExpectedSealedClass/");
        doTest(fileName);
    }

    @TestMetadata("fromExpectedSecondaryConstructor")
    public void testFromExpectedSecondaryConstructor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromExpectedSecondaryConstructor/");
        doTest(fileName);
    }

    @TestMetadata("fromExpectedTypeAlias")
    public void testFromExpectedTypeAlias() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/fromExpectedTypeAlias/");
        doTest(fileName);
    }

    @TestMetadata("hierarchyWithExpectClassCommonSide")
    public void testHierarchyWithExpectClassCommonSide() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/hierarchyWithExpectClassCommonSide/");
        doTest(fileName);
    }

    @TestMetadata("hierarchyWithExpectClassCommonSideNonJavaIds")
    public void testHierarchyWithExpectClassCommonSideNonJavaIds() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/hierarchyWithExpectClassCommonSideNonJavaIds/");
        doTest(fileName);
    }

    @TestMetadata("hierarchyWithExpectClassPlatformSide")
    public void testHierarchyWithExpectClassPlatformSide() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/hierarchyWithExpectClassPlatformSide/");
        doTest(fileName);
    }

    @TestMetadata("kotlinTestAnnotations")
    public void testKotlinTestAnnotations() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/kotlinTestAnnotations/");
        doTest(fileName);
    }

    @TestMetadata("suspendImplInPlatformModules")
    public void testSuspendImplInPlatformModules() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/suspendImplInPlatformModules/");
        doTest(fileName);
    }

    @TestMetadata("topLevelFunWithKotlinTest")
    public void testTopLevelFunWithKotlinTest() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/topLevelFunWithKotlinTest/");
        doTest(fileName);
    }

    @TestMetadata("transitive")
    public void testTransitive() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/transitive/");
        doTest(fileName);
    }

    @TestMetadata("transitiveCommon")
    public void testTransitiveCommon() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/transitiveCommon/");
        doTest(fileName);
    }

    @TestMetadata("withOverloads")
    public void testWithOverloads() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/multiModuleLineMarker/withOverloads/");
        doTest(fileName);
    }
}
