FILE: returns_null.kt
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun simple_returns_null(x: R|kotlin/Int?|): R|kotlin/Int?|
        [R|Contract description]
         <
            Returns(NULL)
            Returns(NOT_NULL) -> FALSE
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|(Null(null))
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returnsNotNull|().R|kotlin/contracts/SimpleEffect.implies|(Boolean(false))
            }
            )
        }

        ^simple_returns_null Null(null)
    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun returns_null_implies(x: R|kotlin/Boolean?|): R|kotlin/Boolean?|
        [R|Contract description]
         <
            Returns(NULL) -> x == null
            Returns(NOT_NULL) -> x != null
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|(Null(null)).R|kotlin/contracts/SimpleEffect.implies|(==(R|<local>/x|, Null(null)))
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returnsNotNull|().R|kotlin/contracts/SimpleEffect.implies|(!=(R|<local>/x|, Null(null)))
            }
            )
        }

        ^returns_null_implies R|<local>/x|
    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun returns_null_with_if(x: R|kotlin/Int?|, y: R|kotlin/Int?|, z: R|kotlin/Int?|): R|kotlin/Int?|
        [R|Contract description]
         <
            Returns(NULL) -> x == null && y == null || z == null
            Returns(NOT_NULL) -> x != null || y != null
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|(Null(null)).R|kotlin/contracts/SimpleEffect.implies|(==(R|<local>/x|, Null(null)) && ==(R|<local>/y|, Null(null)) || ==(R|<local>/z|, Null(null)))
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returnsNotNull|().R|kotlin/contracts/SimpleEffect.implies|(!=(R|<local>/x|, Null(null)) || !=(R|<local>/y|, Null(null)))
            }
            )
        }

        when () {
            ==(R|<local>/x|, Null(null)) ->  {
                ^returns_null_with_if R|<local>/y|
            }
            else ->  {
                ^returns_null_with_if R|<local>/z|
            }
        }

    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun non_nullable_returns_not_null(x: R|kotlin/Int|): R|kotlin/Int|
        [R|Contract description]
         <
            Returns(NOT_NULL)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returnsNotNull|()
            }
            )
        }

        ^non_nullable_returns_not_null R|<local>/x|
    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun non_nullable_compared_to_null(x: R|kotlin/Int|, y: R|kotlin/Int|): R|kotlin/Int|
        [R|Contract description]
         <
            Returns(WILDCARD) -> y == null || x != null
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|().R|kotlin/contracts/SimpleEffect.implies|(==(R|<local>/y|, Null(null)) || !=(R|<local>/x|, Null(null)))
            }
            )
        }

        ^non_nullable_compared_to_null R|<local>/x|
    }
