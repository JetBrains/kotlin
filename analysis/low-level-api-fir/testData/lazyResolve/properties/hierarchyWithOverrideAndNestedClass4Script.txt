RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(RAW_FIR)] class OuterClass : Foo1 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public? final? [ResolvedTo(RAW_FIR)] val st: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<NestedClass>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

                public? open? override [ResolvedTo(RAW_FIR)] val isBoo: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(RAW_FIR)] class OuterClass : Foo1 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public? final? [ResolvedTo(RAW_FIR)] val st: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<NestedClass>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

                public? open? override [ResolvedTo(RAW_FIR)] val isBoo: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(RAW_FIR)] class OuterClass : Foo1 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public? final? [ResolvedTo(RAW_FIR)] val st: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<NestedClass>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

                public? open? override [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val isBoo: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(RAW_FIR)] class OuterClass : Foo1 {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(RAW_FIR)] class NestedClass : Foo2 {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public? final? [ResolvedTo(RAW_FIR)] val st: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(RAW_FIR)] class AnotherNestedClass : NestedClass {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<NestedClass>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

                public? open? override [ResolvedTo(COMPANION_GENERATION)] val isBoo: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(SUPER_TYPES)] class OuterClass : R|Foo1| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(SUPER_TYPES)] class NestedClass : R|Foo2| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public? final? [ResolvedTo(RAW_FIR)] val st: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(SUPER_TYPES)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<NestedClass>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

                public? open? override [ResolvedTo(SUPER_TYPES)] val isBoo: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val str: String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(TYPES)] class OuterClass : R|Foo1| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(SUPER_TYPES)] class NestedClass : R|Foo2| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public? final? [ResolvedTo(RAW_FIR)] val st: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(TYPES)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<NestedClass>
                }

                public? open? override [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit| { LAZY_BLOCK }

                public? open? override [ResolvedTo(TYPES)] val isBoo: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(TYPES)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(STATUS)] class NestedClass : R|Foo2| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public final [ResolvedTo(STATUS)] val st: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(STATUS)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<R|OuterClass.NestedClass|>
                }

                public open override [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

                public open override [ResolvedTo(STATUS)] val isBoo: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(STATUS)] class NestedClass : R|Foo2| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public final [ResolvedTo(STATUS)] val st: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(STATUS)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<R|OuterClass.NestedClass|>
                }

                public open override [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

                public open override [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val isBoo: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(STATUS)] class NestedClass : R|Foo2| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public final [ResolvedTo(STATUS)] val st: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(STATUS)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<R|OuterClass.NestedClass|>
                }

                public open override [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

                public open override [ResolvedTo(CONTRACTS)] val isBoo: <implicit> = Boolean(false)
                    public [ResolvedTo(CONTRACTS)] [ContainingClassKey=AnotherNestedClass] get(): <implicit>

            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(STATUS)] class NestedClass : R|Foo2| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public final [ResolvedTo(STATUS)] val st: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(STATUS)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<R|OuterClass.NestedClass|>
                }

                public open override [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

                public open override [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val isBoo: R|kotlin/Boolean| = Boolean(false)
                    public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=AnotherNestedClass] get(): R|kotlin/Boolean|

            }

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(STATUS)] class NestedClass : R|Foo2| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public final [ResolvedTo(STATUS)] val st: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(STATUS)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<R|OuterClass.NestedClass|>
                }

                public open override [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

                public open override [ResolvedTo(CONSTANT_EVALUATION)] val isBoo: R|kotlin/Boolean| = Boolean(false)
                    public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=AnotherNestedClass] get(): R|kotlin/Boolean|

            }

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(STATUS)] class NestedClass : R|Foo2| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public final [ResolvedTo(STATUS)] val st: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(STATUS)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<R|OuterClass.NestedClass|>
                }

                public open override [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

                public open override [ResolvedTo(ANNOTATION_ARGUMENTS)] val isBoo: R|kotlin/Boolean| = Boolean(false)
                    public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=AnotherNestedClass] get(): R|kotlin/Boolean|

            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

            public final? [ResolvedTo(RAW_FIR)] class ClassFromInterface : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public final? [ResolvedTo(RAW_FIR)] interface Foo3 : Foo1 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo3] get(): Boolean

        }

        public abstract [ResolvedTo(STATUS)] class OuterClass : R|Foo1| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<<implicit>>
            }

            public final? [ResolvedTo(RAW_FIR)] class SimpleNestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

            }

            public abstract [ResolvedTo(STATUS)] class NestedClass : R|Foo2| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<<implicit>>
                }

                public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

                public final [ResolvedTo(STATUS)] val st: <implicit> = LAZY_EXPRESSION
                    public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] get(): <implicit>

            }

            public abstract [ResolvedTo(STATUS)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    LAZY_super<R|OuterClass.NestedClass|>
                }

                public open override [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

                public open override [ResolvedTo(BODY_RESOLVE)] val isBoo: R|kotlin/Boolean| = Boolean(false)
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherNestedClass] get(): R|kotlin/Boolean|

            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] hierarchyWithOverrideAndNestedClass4Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-hierarchyWithOverrideAndNestedClass4Script.kts>
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(BODY_RESOLVE)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] val str: R|kotlin/String|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

            public final [ResolvedTo(BODY_RESOLVE)] class ClassFromInterface : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ClassFromInterface] constructor(): R|Foo1.ClassFromInterface| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(BODY_RESOLVE)] fun foo([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] fun bar([ResolvedTo(BODY_RESOLVE)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] interface Foo3 : R|Foo1| {
            public abstract [ResolvedTo(BODY_RESOLVE)] fun foo([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] fun bar([ResolvedTo(BODY_RESOLVE)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(BODY_RESOLVE)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo3] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] class OuterClass : R|Foo1| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] class SimpleNestedClass : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SimpleNestedClass] constructor(): R|OuterClass.SimpleNestedClass| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit| {
                }

            }

            public abstract [ResolvedTo(BODY_RESOLVE)] class NestedClass : R|Foo2| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    super<R|kotlin/Any|>()
                }

                public open override [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit| {
                }

                public final [ResolvedTo(BODY_RESOLVE)] val st: R|kotlin/String| = String()
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=NestedClass] get(): R|kotlin/String|

            }

            public abstract [ResolvedTo(BODY_RESOLVE)] class AnotherNestedClass : R|OuterClass.NestedClass| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherNestedClass] constructor(): R|OuterClass.AnotherNestedClass| {
                    super<R|OuterClass.NestedClass|>()
                }

                public open override [ResolvedTo(BODY_RESOLVE)] fun bar([ResolvedTo(BODY_RESOLVE)] s: R|kotlin/String|): R|kotlin/Unit| {
                }

                public open override [ResolvedTo(BODY_RESOLVE)] val isBoo: R|kotlin/Boolean| = Boolean(false)
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherNestedClass] get(): R|kotlin/Boolean|

            }

        }
