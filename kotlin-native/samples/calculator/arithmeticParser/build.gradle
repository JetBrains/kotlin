apply plugin: 'org.jetbrains.kotlin.multiplatform'

kotlin {
    targets {
        fromPreset(determineIosPreset(), 'ios') {
            binaries {
                framework()
            }
        }

        fromPreset(presets.jvm, 'jvm')
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
    }
}

// Workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// If custom preset specified in 'calculator.preset.name' property, then use it for building.
// Otherwise build for iPhone simulator (by default).
def determineIosPreset() {
    String presetName = project.hasProperty('calculator.preset.name') ? project.properties['calculator.preset.name'] : 'iosX64'
    def preset = project.kotlin.presets[presetName]
    println("$project has been configured for $presetName platform.")
    preset
}

// Special Gradle task that is called from Xcode.
// Two Gradle properties must be specified for this task:
// - calculator.configuration.name=[Release|Debug]
// - calculator.framework.location
task buildFrameworkForXcode {

    if (isCalledFromXcode()) {
        dependsOn kotlin.targets.ios.binaries.getFramework(getBuildTypeForXcode()).linkTask
    }

    doLast {
        if (!isCalledFromXcode()) {
            throw new Exception("Please run 'buildFrameworkForXcode' task with all necessary properties!")
        }

        def frameworkDir = kotlin.targets.ios.binaries.getFramework(getBuildTypeForXcode()).outputFile

        println("from: ${frameworkDir.parentFile}")
        println("into: ${getXcodeConfigurationBuildDir()}")

        copy {
            from frameworkDir.parentFile
            into getXcodeConfigurationBuildDir()
            include "${frameworkDir.name}/**"
            include "${frameworkDir.name}.dSYM/**"
        }
    }
}

private boolean isCalledFromXcode() {
    project.hasProperty('calculator.configuration.name') && project.hasProperty('calculator.framework.location')
}

private String getBuildTypeForXcode() {
    project.properties['calculator.configuration.name'] as String
}

private String getXcodeConfigurationBuildDir() {
    project.properties['calculator.framework.location'] as String
}
