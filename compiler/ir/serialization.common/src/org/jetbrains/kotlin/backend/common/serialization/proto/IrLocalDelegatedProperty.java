// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty}
 */
public  final class IrLocalDelegatedProperty extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrLocalDelegatedProperty, IrLocalDelegatedProperty.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty)
    IrLocalDelegatedPropertyOrBuilder {
  private IrLocalDelegatedProperty() {
  }
  private int bitField0_;
  public static final int BASE_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public boolean hasBase() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
    return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
    value.getClass();  // minimal bytecode null check
    base_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
    value.getClass();  // minimal bytecode null check
    if (base_ != null &&
        base_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance()) {
      base_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.newBuilder(base_).mergeFrom(value).buildPartial();
    } else {
      base_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  private void clearBase() {  base_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int NAME_TYPE_FIELD_NUMBER = 2;
  private long nameType_;
  /**
   * <code>int64 name_type = 2 [features = { ... }</code>
   * @return Whether the nameType field is set.
   */
  @java.lang.Override
  public boolean hasNameType() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int64 name_type = 2 [features = { ... }</code>
   * @return The nameType.
   */
  @java.lang.Override
  public long getNameType() {
    return nameType_;
  }
  /**
   * <code>int64 name_type = 2 [features = { ... }</code>
   * @param value The nameType to set.
   */
  private void setNameType(long value) {
    bitField0_ |= 0x00000002;
    nameType_ = value;
  }
  /**
   * <code>int64 name_type = 2 [features = { ... }</code>
   */
  private void clearNameType() {
    bitField0_ = (bitField0_ & ~0x00000002);
    nameType_ = 0L;
  }

  public static final int DELEGATE_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
   */
  @java.lang.Override
  public boolean hasDelegate() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable getDelegate() {
    return delegate_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.getDefaultInstance() : delegate_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setDelegate(org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable value) {
    value.getClass();  // minimal bytecode null check
    delegate_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeDelegate(org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable value) {
    value.getClass();  // minimal bytecode null check
    if (delegate_ != null &&
        delegate_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.getDefaultInstance()) {
      delegate_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.newBuilder(delegate_).mergeFrom(value).buildPartial();
    } else {
      delegate_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
   */
  private void clearDelegate() {  delegate_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int GETTER_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
   */
  @java.lang.Override
  public boolean hasGetter() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getGetter() {
    return getter_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance() : getter_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setGetter(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
    value.getClass();  // minimal bytecode null check
    getter_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeGetter(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
    value.getClass();  // minimal bytecode null check
    if (getter_ != null &&
        getter_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance()) {
      getter_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.newBuilder(getter_).mergeFrom(value).buildPartial();
    } else {
      getter_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
   */
  private void clearGetter() {  getter_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public static final int SETTER_FIELD_NUMBER = 5;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
   */
  @java.lang.Override
  public boolean hasSetter() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getSetter() {
    return setter_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance() : setter_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setSetter(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
    value.getClass();  // minimal bytecode null check
    setter_ = value;
    bitField0_ |= 0x00000010;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeSetter(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
    value.getClass();  // minimal bytecode null check
    if (setter_ != null &&
        setter_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance()) {
      setter_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.newBuilder(setter_).mergeFrom(value).buildPartial();
    } else {
      setter_ = value;
    }
    bitField0_ |= 0x00000010;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
   */
  private void clearSetter() {  setter_ = null;
    bitField0_ = (bitField0_ & ~0x00000010);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBase() {
      return instance.hasBase();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
      return instance.getBase();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      copyOnWrite();
      instance.setBase(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder builderForValue) {
      copyOnWrite();
      instance.setBase(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      copyOnWrite();
      instance.mergeBase(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder clearBase() {  copyOnWrite();
      instance.clearBase();
      return this;
    }

    /**
     * <code>int64 name_type = 2 [features = { ... }</code>
     * @return Whether the nameType field is set.
     */
    @java.lang.Override
    public boolean hasNameType() {
      return instance.hasNameType();
    }
    /**
     * <code>int64 name_type = 2 [features = { ... }</code>
     * @return The nameType.
     */
    @java.lang.Override
    public long getNameType() {
      return instance.getNameType();
    }
    /**
     * <code>int64 name_type = 2 [features = { ... }</code>
     * @param value The nameType to set.
     * @return This builder for chaining.
     */
    public Builder setNameType(long value) {
      copyOnWrite();
      instance.setNameType(value);
      return this;
    }
    /**
     * <code>int64 name_type = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearNameType() {
      copyOnWrite();
      instance.clearNameType();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
     */
    @java.lang.Override
    public boolean hasDelegate() {
      return instance.hasDelegate();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable getDelegate() {
      return instance.getDelegate();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
     */
    public Builder setDelegate(org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable value) {
      copyOnWrite();
      instance.setDelegate(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
     */
    public Builder setDelegate(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable.Builder builderForValue) {
      copyOnWrite();
      instance.setDelegate(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
     */
    public Builder mergeDelegate(org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable value) {
      copyOnWrite();
      instance.mergeDelegate(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrVariable delegate = 3;</code>
     */
    public Builder clearDelegate() {  copyOnWrite();
      instance.clearDelegate();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
     */
    @java.lang.Override
    public boolean hasGetter() {
      return instance.hasGetter();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getGetter() {
      return instance.getGetter();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
     */
    public Builder setGetter(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      copyOnWrite();
      instance.setGetter(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
     */
    public Builder setGetter(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.Builder builderForValue) {
      copyOnWrite();
      instance.setGetter(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
     */
    public Builder mergeGetter(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      copyOnWrite();
      instance.mergeGetter(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter = 4;</code>
     */
    public Builder clearGetter() {  copyOnWrite();
      instance.clearGetter();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
     */
    @java.lang.Override
    public boolean hasSetter() {
      return instance.hasSetter();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getSetter() {
      return instance.getSetter();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
     */
    public Builder setSetter(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      copyOnWrite();
      instance.setSetter(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
     */
    public Builder setSetter(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.Builder builderForValue) {
      copyOnWrite();
      instance.setSetter(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
     */
    public Builder mergeSetter(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      copyOnWrite();
      instance.mergeSetter(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter = 5;</code>
     */
    public Builder clearSetter() {  copyOnWrite();
      instance.clearSetter();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "base_",
            "nameType_",
            "delegate_",
            "getter_",
            "setter_",
          };
          java.lang.String info =
              "\u0004\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0000\u0005\u0001\u1509\u0000\u0002" +
              "\u1502\u0001\u0003\u1409\u0002\u0004\u1409\u0003\u0005\u1409\u0004";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty DEFAULT_INSTANCE;
  static {
    IrLocalDelegatedProperty defaultInstance = new IrLocalDelegatedProperty();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrLocalDelegatedProperty.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedProperty getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrLocalDelegatedProperty> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrLocalDelegatedProperty> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
