KtFile: namedArguments.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    IMPORT_DIRECTIVE
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      DOT_QUALIFIED_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('kotlin')
        PsiElement(DOT)('.')
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('contracts')
      PsiElement(DOT)('.')
      PsiElement(MUL)('*')
  PsiWhiteSpace('\n\n')
  FUN
    MODIFIER_LIST
      ANNOTATION_ENTRY
        PsiElement(AT)('@')
        CONSTRUCTOR_CALLEE
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('OptIn')
        VALUE_ARGUMENT_LIST
          PsiElement(LPAR)('(')
          VALUE_ARGUMENT
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('ExperimentalContracts')
              PsiElement(COLONCOLON)('::')
              PsiElement(class)('class')
          PsiElement(RPAR)(')')
    PsiWhiteSpace('\n')
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('foo')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      VALUE_PARAMETER
        PsiElement(IDENTIFIER)('x')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('Any')
      PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      VALUE_PARAMETER
        PsiElement(IDENTIFIER)('y')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('Any')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('contract')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace('\n        ')
              BLOCK
                BINARY_EXPRESSION
                  CALL_EXPRESSION
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('returns')
                    VALUE_ARGUMENT_LIST
                      PsiElement(LPAR)('(')
                      PsiElement(RPAR)(')')
                  PsiWhiteSpace(' ')
                  OPERATION_REFERENCE
                    PsiElement(IDENTIFIER)('implies')
                  PsiWhiteSpace(' ')
                  PARENTHESIZED
                    PsiElement(LPAR)('(')
                    BINARY_EXPRESSION
                      IS_EXPRESSION
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('x')
                        PsiWhiteSpace(' ')
                        OPERATION_REFERENCE
                          PsiElement(is)('is')
                        PsiWhiteSpace(' ')
                        TYPE_REFERENCE
                          USER_TYPE
                            REFERENCE_EXPRESSION
                              PsiElement(IDENTIFIER)('Int')
                      PsiWhiteSpace(' ')
                      OPERATION_REFERENCE
                        PsiElement(ANDAND)('&&')
                      PsiWhiteSpace(' ')
                      IS_EXPRESSION
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('y')
                        PsiWhiteSpace(' ')
                        OPERATION_REFERENCE
                          PsiElement(is)('is')
                        PsiWhiteSpace(' ')
                        TYPE_REFERENCE
                          USER_TYPE
                            REFERENCE_EXPRESSION
                              PsiElement(IDENTIFIER)('String')
                    PsiElement(RPAR)(')')
              PsiWhiteSpace('\n    ')
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          BINARY_EXPRESSION
            IS_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('x')
              PsiWhiteSpace(' ')
              OPERATION_REFERENCE
                PsiElement(NOT_IS)('!is')
              PsiWhiteSpace(' ')
              TYPE_REFERENCE
                USER_TYPE
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('Int')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(OROR)('||')
            PsiWhiteSpace(' ')
            IS_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('y')
              PsiWhiteSpace(' ')
              OPERATION_REFERENCE
                PsiElement(NOT_IS)('!is')
              PsiWhiteSpace(' ')
              TYPE_REFERENCE
                USER_TYPE
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('String')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        THEN
          BLOCK
            PsiElement(LBRACE)('{')
            PsiWhiteSpace('\n        ')
            THROW
              PsiElement(throw)('throw')
              PsiWhiteSpace(' ')
              CALL_EXPRESSION
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('IllegalStateException')
                VALUE_ARGUMENT_LIST
                  PsiElement(LPAR)('(')
                  PsiElement(RPAR)(')')
            PsiWhiteSpace('\n    ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')