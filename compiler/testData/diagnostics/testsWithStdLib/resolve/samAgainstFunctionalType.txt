package

public fun test(): kotlin.Unit

public open class StaticOverrides {
    public constructor StaticOverrides()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public open class A {
        public constructor A()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public open fun foo(/*0*/ x: (() -> kotlin.Unit!)!): kotlin.Boolean
        public open fun foo(/*0*/ x: java.lang.Runnable!): kotlin.Int
    }

    public open class B {
        public constructor B()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public open fun foo(/*0*/ x: java.lang.Runnable!): kotlin.String!
    }

    public open class C : StaticOverrides.A {
        public constructor C()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public open override /*1*/ /*fake_override*/ fun foo(/*0*/ x: (() -> kotlin.Unit!)!): kotlin.Boolean
        public open fun foo(/*0*/ x: java.lang.Runnable!): kotlin.String!
    }
}
