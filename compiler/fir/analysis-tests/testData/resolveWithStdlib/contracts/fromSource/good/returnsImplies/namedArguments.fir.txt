FILE: namedArguments.kt
    public final fun foo(x: R|kotlin/Any|, y: R|kotlin/Any|): R|kotlin/Unit|
        [R|Contract description]
         <
            Returns(WILDCARD) -> x is kotlin/Int && y is kotlin/String
        >
     {
        [StubStatement]
        when () {
            (R|<local>/x| !is R|kotlin/Int|) || (R|<local>/y| !is R|kotlin/String|) ->  {
                throw R|java/lang/IllegalStateException.IllegalStateException|()
            }
        }

    }
    public final fun test_1(x: R|kotlin/Any|, y: R|kotlin/Any|): R|kotlin/Unit| {
        R|/foo|(x = R|<local>/x|, y = R|<local>/y|)
        R|<local>/x|.R|kotlin/Int.inc|()
        R|<local>/y|.R|kotlin/String.length|
    }
    public final fun test_2(x: R|kotlin/Any|, y: R|kotlin/Any|): R|kotlin/Unit| {
        R|/foo|(R|<local>/x|, y = R|<local>/y|)
        R|<local>/x|.R|kotlin/Int.inc|()
        R|<local>/y|.R|kotlin/String.length|
    }
    public final fun test_3(x: R|kotlin/Any|, y: R|kotlin/Any|): R|kotlin/Unit| {
        R|/foo|(y = R|<local>/y|, x = R|<local>/x|)
        R|<local>/x|.R|kotlin/Int.inc|()
        R|<local>/y|.R|kotlin/String.length|
    }
