/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.jps.build

import com.intellij.util.concurrency.FixedFuture
import org.jetbrains.jps.builders.java.dependencyView.Callbacks
import java.io.File
import java.util.concurrent.Future

class MockJavaConstantSearch(private val workDir: File) : Callbacks.ConstantAffectionResolver {
    override fun request(
        ownerClassName: String,
        fieldName: String,
        accessFlags: Int,
        fieldRemoved: Boolean,
        accessChanged: Boolean
    ): Future<Callbacks.ConstantAffection> {
        val affectedFiles = workDir.walk().filter { it.isFile && it.isNameUsage() }
        return FixedFuture(Callbacks.ConstantAffection(affectedFiles.toList()))
    }

    private fun File.isNameUsage(): Boolean =
        name.equals("usage.kt", ignoreCase = true)
                || name.equals("usage.java", ignoreCase = true)
}