FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] constructorInObject.kt
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] object A : R|kotlin/Any| {
        private [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(ANNOTATION_ARGUMENTS)] init { LAZY_BLOCK }

    }
    public final [ResolvedTo(BODY_RESOLVE)] enum class B : R|kotlin/Enum<B>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|kotlin/Enum<B>|>()
        }

        public final static [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=B] enum entry X: R|B| = LAZY_EXPRESSION
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=B] fun values(): R|kotlin/Array<B>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=B] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|B| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=B] val entries: R|kotlin/enums/EnumEntries<B>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<B>|

    }
    public final [ResolvedTo(BODY_RESOLVE)] class C : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=C] constructor(): R|C| {
            super<R|kotlin/Any|>()
        }

        public final companion [ResolvedTo(ANNOTATION_ARGUMENTS)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Companion] constructor(): R|C.Companion| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(CONTRACTS)] val anonObject: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>