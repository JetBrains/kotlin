FILE fqName:<root> fileName:/decrementInFinally.kt
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:variable type:kotlin.Int [var]
        CONST Int type=kotlin.Int value=0
      TRY type=kotlin.Nothing
        try: BLOCK type=kotlin.Nothing origin=null
          TRY type=kotlin.Nothing
            try: BLOCK type=kotlin.Nothing origin=null
              CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=kotlin.Nothing origin=EXCLEXCL
                TYPE_ARG T0: kotlin.Nothing
                ARG arg0: CONST Null type=kotlin.Nothing? value=null
            finally: TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
              BLOCK type=kotlin.Int origin=POSTFIX_DECR
                VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.Int [val]
                  GET_VAR 'var variable: kotlin.Int declared in <root>.box' type=kotlin.Int origin=POSTFIX_DECR
                SET_VAR 'var variable: kotlin.Int declared in <root>.box' type=kotlin.Unit origin=POSTFIX_DECR
                  CALL 'public final fun dec (): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=POSTFIX_DECR
                    ARG <this>: GET_VAR 'val tmp_0: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
                GET_VAR 'val tmp_0: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
        CATCH parameter=val e: java.lang.NullPointerException declared in <root>.box
          VAR CATCH_PARAMETER name:e type:java.lang.NullPointerException [val]
          BLOCK type=kotlin.Nothing origin=null
            RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
              WHEN type=kotlin.String origin=IF
                BRANCH
                  if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    ARG arg0: GET_VAR 'var variable: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
                    ARG arg1: CONST Int type=kotlin.Int value=-1
                  then: CONST String type=kotlin.String value="OK"
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST String type=kotlin.String value="Fail"
