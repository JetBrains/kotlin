//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable fun NonInlined() {
   val a = @Composable { }
}

@Composable inline fun Inlined() {
   val b = @Composable {}
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun NonInlined(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(NonInlined):Test.kt")
  if (%changed != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    val a = ComposableSingletons%TestKt.lambda%-193164677
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    NonInlined(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
@Composable
fun Inlined(%composer: Composer?, %changed: Int) {
  sourceInformationMarkerStart(%composer, <>, "CC(Inlined)<{}>:Test.kt")
  val b = rememberComposableLambda(<>, false, { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      Unit
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }, %composer, 0b00110110)
  sourceInformationMarkerEnd(%composer)
}
internal object ComposableSingletons%TestKt {
  val lambda%-193164677: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      Unit
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
  val lambda%1918458719: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      Unit
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
  val lambda-2: Function2<Composer, Int, Unit>
    get() {
      return lambda%1918458719
    }
}
