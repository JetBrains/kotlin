class TraceTest {
  private var a1$volatile: Int
    field = 5
    private get(): Int {
      return <this>.#a1$volatile
    }
    private set(value: Int) {
      return <this>.#a1$volatile = value
    }

  private var a2$volatile: Int
    field = 1
    private get(): Int {
      return <this>.#a2$volatile
    }
    private set(value: Int) {
      return <this>.#a2$volatile = value
    }

  private var a$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  private var a3$volatile: Int
    field = 2
    private get(): Int {
      return <this>.#a3$volatile
    }
    private set(value: Int) {
      return <this>.#a3$volatile = value
    }

  private var s$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#s$volatile
    }
    private set(value: Int) {
      return <this>.#s$volatile = value
    }

  private enum class Status : Enum<Status> {
    START = Status()

    END = Status()

    private constructor() /* primary */ {
      super/*Enum*/<Status>()
      /* <init>() */

    }

    /* static */ fun valueOf(value: String): Status /* Synthetic body for ENUM_VALUEOF */

    /* static */ fun values(): Array<Status> /* Synthetic body for ENUM_VALUES */

    /* static */ val entries: EnumEntries<Status>
      get(): EnumEntries<Status> /* Synthetic body for ENUM_ENTRIES */

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun test() {
    <this>.testDefaultTrace()
    <this>.testTraceWithSize()
    <this>.testTraceWithFormat()
    <this>.testNamedTrace()
    <this>.testMultipleAppend()
    <this>.testTraceInBlock()
  }

  fun testDefaultTrace() {
    val oldValue: Int = atomicGetField<Int>(/* <this> = TraceTest<this>::a1$volatile */) as Int
    val res: Boolean = compareAndSetField<Int>(/* <this> = TraceTest<this>::a1$volatile, */ expectedValue = oldValue, newValue = oldValue.times(other = 10))
    val newValue: Int = atomicGetField<Int>(/* <this> = TraceTest<this>::a1$volatile */) as Int
  }

  fun testMultipleAppend() {
    val i: Int = 1
    assertEquals<Int>(expected = 0, actual = atomicGetField<Int>(/* <this> = TraceTest<this>::a$volatile */) as Int)
    getAndAddField(/* <this> = TraceTest<this>::a$volatile, */ delta = 1).plus(other = 1) /*~> Unit */
    assertEquals<Int>(expected = 1, actual = atomicGetField<Int>(/* <this> = TraceTest<this>::a$volatile */) as Int)
    atomicSetField<Int>(/* <this> = TraceTest<this>::a$volatile, */ newValue = 10)
    assertEquals<Int>(expected = 10, actual = atomicGetField<Int>(/* <this> = TraceTest<this>::a$volatile */) as Int)
  }

  fun testNamedTrace() {
    atomicSetField<Int>(/* <this> = TraceTest<this>::s$volatile, */ newValue = 5)
    compareAndSetField<Int>(/* <this> = TraceTest<this>::s$volatile, */ expectedValue = 5, newValue = -2) /*~> Unit */
    assertEquals<Int>(expected = -2, actual = atomicGetField<Int>(/* <this> = TraceTest<this>::s$volatile */) as Int)
  }

  fun testTraceInBlock() {
    atomicSetField<Int>(/* <this> = TraceTest<this>::a1$volatile, */ newValue = 5)
    when {
      EQEQ(arg0 = atomicGetField<Int>(/* <this> = TraceTest<this>::a1$volatile */) as Int, arg1 = 5) -> { // BLOCK
        when {
          compareAndSetField<Int>(/* <this> = TraceTest<this>::a1$volatile, */ expectedValue = 5, newValue = 10) -> { // BLOCK
          }
        }
      }
    }
    assertEquals<Int>(expected = 10, actual = atomicGetField<Int>(/* <this> = TraceTest<this>::a1$volatile */) as Int)
    while (true) { // BLOCK
      when {
        EQEQ(arg0 = atomicGetField<Int>(/* <this> = TraceTest<this>::a1$volatile */) as Int, arg1 = 10) -> { // BLOCK
          atomicSetField<Int>(/* <this> = TraceTest<this>::a1$volatile, */ newValue = 15)
          break
        }
        else -> { // BLOCK
        }
      }
    }
  }

  fun testTraceWithFormat() {
    val oldValue: Int = atomicGetField<Int>(/* <this> = TraceTest<this>::a3$volatile */) as Int
    assertTrue(actual = compareAndSetField<Int>(/* <this> = TraceTest<this>::a3$volatile, */ expectedValue = oldValue, newValue = oldValue.times(other = 10)))
    getAndAddField(/* <this> = TraceTest<this>::a3$volatile, */ delta = -1) /*~> Unit */
    assertEquals<Int>(expected = 19, actual = atomicGetField<Int>(/* <this> = TraceTest<this>::a3$volatile */) as Int)
  }

  fun testTraceWithSize() {
    val oldValue: Int = atomicGetField<Int>(/* <this> = TraceTest<this>::a2$volatile */) as Int
    assertTrue(actual = compareAndSetField<Int>(/* <this> = TraceTest<this>::a2$volatile, */ expectedValue = oldValue, newValue = oldValue.times(other = 10)))
    getAndAddField(/* <this> = TraceTest<this>::a2$volatile, */ delta = -1) /*~> Unit */
    assertEquals<Int>(expected = 9, actual = atomicGetField<Int>(/* <this> = TraceTest<this>::a2$volatile */) as Int)
  }

}

fun box(): String {
  TraceTest().test()
  return "OK"
}
