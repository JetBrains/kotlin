//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable


    context(Foo)
    @Composable
    fun Test(a: String, b: @Composable (String) -> Unit) {
        b("yay")
    }

//
// Transformed IR
// ------------------------------------------

@Composable
@ComposableInferredTarget(scheme = "[0[0]]")
fun Test(%context_receiver_0: Foo, a: String, b: Function3<String, Composer, Int, Unit>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)<b("yay...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b001110000000 == 0) {
    %dirty = %dirty or if (%composer.changedInstance(b)) 0b000100000000 else 0b10000000
  }
  if (%dirty and 0b001010000001 != 0b10000000 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    b("yay", %composer, 0b0110 or 0b01110000 and %dirty shr 0b0011)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(%context_receiver_0, a, b, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
