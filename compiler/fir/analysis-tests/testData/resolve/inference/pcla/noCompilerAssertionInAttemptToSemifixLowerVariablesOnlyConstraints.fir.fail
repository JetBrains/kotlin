Caused by: java.lang.AssertionError: There should be at least one non-stub type to compute common supertype but there are: [Stub (subtyping): TypeVariable(U), Stub (subtyping): TypeVariable(F)]
    at org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator.commonSuperTypeForNotNullTypes(NewCommonSuperTypeCalculator.kt:230)
    at org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator.commonSuperTypeForSimpleTypes(NewCommonSuperTypeCalculator.kt:110)
    at org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator.commonSuperType(NewCommonSuperTypeCalculator.kt:64)
    at org.jetbrains.kotlin.resolve.calls.NewCommonSuperTypeCalculator.commonSuperType(NewCommonSuperTypeCalculator.kt:28)
    at org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver.findSubType(ResultTypeResolver.kt:351)
    at org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver.findResultTypeOrNull(ResultTypeResolver.kt:93)
    at org.jetbrains.kotlin.resolve.calls.inference.components.ResultTypeResolver.findResultType(ResultTypeResolver.kt:56)
    at org.jetbrains.kotlin.fir.resolve.inference.FirPCLAInferenceSession.semiFixCurrentResultIfTypeVariableAndReturnBinding$lambda$1$2(FirPCLAInferenceSession.kt:209)
    at org.jetbrains.kotlin.fir.resolve.inference.FirPCLAInferenceSession.prepareContextForTypeVariableForSemiFixation$lambda$0(FirPCLAInferenceSession.kt:234)
    at org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl.withTypeVariablesThatAreCountedAsProperTypes(NewConstraintSystemImpl.kt:82)
    at org.jetbrains.kotlin.fir.resolve.inference.FirPCLAInferenceSession.prepareContextForTypeVariableForSemiFixation(FirPCLAInferenceSession.kt:226)
    at org.jetbrains.kotlin.fir.resolve.inference.FirPCLAInferenceSession.semiFixCurrentResultIfTypeVariableAndReturnBinding(FirPCLAInferenceSession.kt:206)
    at org.jetbrains.kotlin.fir.resolve.inference.FirPCLAInferenceSession.semiFixTypeVariablesAllowingFixationToOuterOnes(FirPCLAInferenceSession.kt:169)
    at org.jetbrains.kotlin.fir.resolve.calls.overloads.FirOverloadByLambdaReturnTypeResolver.analyzeLambdaAndReduceNumberOfCandidatesRegardingOverloadResolutionByLambdaReturnType(FirOverloadByLambdaReturnTypeResolver.kt:104)
