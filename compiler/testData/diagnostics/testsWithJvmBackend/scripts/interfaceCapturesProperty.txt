package

public final class InterfaceCapturesProperty : kotlin.script.templates.standard.ScriptTemplateWithArgs {
    public constructor InterfaceCapturesProperty(/*0*/ args: kotlin.Array<kotlin.String>)
    public final override /*1*/ /*fake_override*/ val args: kotlin.Array<kotlin.String>
    public final val life: kotlin.Int = 42
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun foo(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public interface A {
        public open val x: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final class B : InterfaceCapturesProperty.A {
        public constructor B()
        public open override /*1*/ /*fake_override*/ val x: kotlin.Int
        public final fun bar(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
