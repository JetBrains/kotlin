MODULES: lib1, lib2, main

STEP 0:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2, main
    dirty js files:   lib1/l1, lib2/l2, lib2/l2string, main/m, main/m.export, main
STEP 1:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2int
STEP 2:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1
    dirty js files:   lib1/l1
STEP 3:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2pair
STEP 4:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2func, lib2/l2string
STEP 5:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1
    dirty js files:   lib1/l1
STEP 6:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2func, lib2/l2string, lib2/l2pair
STEP 7:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1
STEP 8:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2int
STEP 9..10:
    language: -IrIntraModuleInlinerBeforeKlibSerialization
    libs: lib1, lib2, main
    dirty js modules: lib1, lib2
    dirty js files:   lib1/l1, lib2/l2, lib2/l2int
