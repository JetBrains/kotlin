FILE: flowFromInplaceLambda2.kt
    public final fun <T> foo(x: R|T?|, i: R|kotlin/Int|, y: R|T|): R|kotlin/Unit| {
    }
    public final fun <T> id(x: R|T|): R|T| {
        ^id R|<local>/x|
    }
    public final fun <T> n(): R|T?| {
        ^n Null(null)
    }
    public final fun someCompletedCall(arg: R|kotlin/Int|): R|kotlin/Int| {
        ^someCompletedCall R|<local>/arg|
    }
    public final fun test1(x: R|kotlin/String?|): R|kotlin/Unit| {
        R|/foo|<R|kotlin/Int|>(R|/id|<R|kotlin/Nothing?|>(R|kotlin/run|<R|kotlin/Nothing?|>(<L> = run@fun <anonymous>(): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
            (R|<local>/x| as R|kotlin/String|)
            ^ R|/n|<R|kotlin/Nothing?|>()
        }
        )), Int(1), R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|<local>/x|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
            ^ Int(123)
        }
        ))
        R|<local>/x|.R|kotlin/String.length|
    }
    public final fun test2(x: R|kotlin/String?|): R|kotlin/Unit| {
        R|/foo|<R|kotlin/Int|>(R|/id|<R|kotlin/Nothing?|>(R|kotlin/run|<R|kotlin/Nothing?|>(<L> = run@fun <anonymous>(): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
            (R|<local>/x| as R|kotlin/String|)
            ^ R|/n|<R|kotlin/Nothing?|>()
        }
        )), R|/someCompletedCall|(Int(1)), R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|<local>/x|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
            ^ Int(123)
        }
        ))
        R|<local>/x|.R|kotlin/String.length|
    }
    public final fun test3(x: R|kotlin/String?|): R|kotlin/Unit| {
        R|/foo|<R|kotlin/Int|>(R|/id|<R|kotlin/Nothing?|>(R|kotlin/run|<R|kotlin/Nothing?|>(<L> = run@fun <anonymous>(): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
            (R|<local>/x| as R|kotlin/String|)
            ^ R|/n|<R|kotlin/Nothing?|>()
        }
        )), when () {
            Boolean(true) ->  {
                Int(1)
            }
            else ->  {
                Int(2)
            }
        }
        , R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|<local>/x|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
            ^ Int(123)
        }
        ))
        R|<local>/x|.R|kotlin/String.length|
    }
    public final fun test4(x: R|kotlin/String?|): R|kotlin/Unit| {
        lvar p: R|kotlin/String?| = R|<local>/x|
        when () {
            !=(R|<local>/p|, Null(null)) ->  {
                R|/foo|<R|kotlin/Int|>(R|/id|<R|kotlin/Nothing?|>(when () {
                    Boolean(true) ->  {
                        R|kotlin/run|<R|kotlin/Nothing?|>(<L> = run@fun <anonymous>(): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
                            R|<local>/p| = Null(null)
                            ^ R|/n|<R|kotlin/Nothing?|>()
                        }
                        )
                    }
                    else ->  {
                        R|kotlin/run|<R|kotlin/Nothing?|>(<L> = run@fun <anonymous>(): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
                            ^ R|/n|<R|kotlin/Nothing?|>()
                        }
                        )
                    }
                }
                ), Int(1), R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
                    R|<local>/p|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
                    ^ Int(123)
                }
                ))
                R|<local>/p|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
            }
        }

    }
    public final fun test5(x: R|kotlin/String?|, y: R|kotlin/String?|): R|kotlin/Unit| {
        R|/foo|<R|kotlin/String|>(R|<local>/y|?.{ $subj$.R|kotlin/let|<R|kotlin/String|, R|kotlin/Nothing?|>(<L> = let@fun <anonymous>(it: R|kotlin/String|): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
            (R|<local>/x| as R|kotlin/String|)
            ^ R|/n|<R|kotlin/Nothing?|>()
        }
        ) }, Int(1), R|kotlin/run|<R|kotlin/String|>(<L> = run@fun <anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ String()
        }
        ))
        R|<local>/x|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
    }
    public final fun test6(x: R|kotlin/String?|): R|kotlin/Unit| {
        R|/foo|<R|kotlin/Int|>(R|/id|<R|kotlin/Nothing?|>(when () {
            Boolean(true) ->  {
                R|kotlin/run|<R|kotlin/Nothing?|>(<L> = run@fun <anonymous>(): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
                    (R|<local>/x| as R|kotlin/String|)
                    ^ R|/n|<R|kotlin/Nothing?|>()
                }
                )
            }
            else ->  {
                R|kotlin/run|<R|kotlin/Nothing?|>(<L> = run@fun <anonymous>(): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
                    (R|<local>/x| as R|kotlin/String|)
                    ^ R|/n|<R|kotlin/Nothing?|>()
                }
                )
            }
        }
        ), Int(1), R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|<local>/x|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
            ^ Int(123)
        }
        ))
        R|<local>/x|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
    }
    public final fun test7(x: R|kotlin/String?|): R|kotlin/Unit| {
        lvar p: R|kotlin/String?| = R|<local>/x|
        when () {
            !=(R|<local>/p|, Null(null)) ->  {
                R|/foo|<R|kotlin/Int|>(R|/id|<R|kotlin/Nothing?|>(R|kotlin/run|<R|kotlin/Nothing?|>(<L> = run@fun <anonymous>(): R|kotlin/Nothing?| <inline=Inline, kind=EXACTLY_ONCE>  {
                    R|<local>/p| = Null(null)
                    ^ R|/n|<R|kotlin/Nothing?|>()
                }
                )), Int(1), R|kotlin/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
                    R|<local>/p|.<Inapplicable(UNSTABLE_SMARTCAST): kotlin/String.length>#
                    ^ Int(123)
                }
                ))
                R|<local>/p|.<Inapplicable(UNSAFE_CALL): kotlin/String.length>#
            }
        }

    }
