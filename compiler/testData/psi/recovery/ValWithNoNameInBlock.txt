JetFile: ValWithNoNameInBlock.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('foo')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiErrorElement:Expecting property name or receiver type
          <empty list>
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('println')
        VALUE_ARGUMENT_LIST
          PsiElement(LPAR)('(')
          VALUE_ARGUMENT
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              LITERAL_STRING_TEMPLATE_ENTRY
                PsiElement(REGULAR_STRING_PART)('abc')
              PsiElement(CLOSING_QUOTE)('"')
          PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiErrorElement:Expecting property name or receiver type
          <empty list>
      PsiWhiteSpace('\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('lambdaCall')
        PsiWhiteSpace(' ')
        LAMBDA_ARGUMENT
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace('\n\n    ')
              BLOCK
                <empty list>
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiErrorElement:Expecting property name or receiver type
          <empty list>
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(EQEQ)('==')
            PsiWhiteSpace(' ')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        THEN
          BLOCK
            PsiElement(LBRACE)('{')
            PsiWhiteSpace('\n\n    ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiErrorElement:Expecting property name or receiver type
          <empty list>
      PsiWhiteSpace('\n    ')
      PARENTHESIZED
        PsiElement(LPAR)('(')
        BINARY_EXPRESSION
          INTEGER_CONSTANT
            PsiElement(INTEGER_LITERAL)('1')
          PsiWhiteSpace(' ')
          OPERATION_REFERENCE
            PsiElement(PLUS)('+')
          PsiWhiteSpace(' ')
          INTEGER_CONSTANT
            PsiElement(INTEGER_LITERAL)('2')
        PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// `propertyNameOnTheNextLine` parsed as simple name expression')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiErrorElement:Expecting property name or receiver type
          <empty list>
      PsiWhiteSpace('\n    ')
      REFERENCE_EXPRESSION
        PsiElement(IDENTIFIER)('propertyNameOnTheNextLine')
      PsiWhiteSpace('\n\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiErrorElement:Expecting property name or receiver type
          <empty list>
      PsiWhiteSpace('\n    ')
      PsiComment(EOL_COMMENT)('// comment')
      PsiWhiteSpace('\n    ')
      REFERENCE_EXPRESSION
        PsiElement(IDENTIFIER)('propertyNameOnTheNextLine')
      PsiWhiteSpace('\n\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiErrorElement:Expecting property name or receiver type
          <empty list>
        PsiWhiteSpace(' ')
        PsiComment(BLOCK_COMMENT)('/* comment */')
      PsiWhiteSpace('\n    ')
      REFERENCE_EXPRESSION
        PsiElement(IDENTIFIER)('propertyNameOnTheNextLine')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Correct properties')
      PsiWhiteSpace('\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace('\n    ')
        PsiElement(IDENTIFIER)('property1')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace('\n    ')
        PsiElement(IDENTIFIER)('propertyWithBy')
        PsiWhiteSpace(' ')
        PROPERTY_DELEGATE
          PsiElement(by)('by')
          PsiWhiteSpace(' ')
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('lazy')
            PsiWhiteSpace(' ')
            LAMBDA_ARGUMENT
              LAMBDA_EXPRESSION
                FUNCTION_LITERAL
                  PsiElement(LBRACE)('{')
                  PsiWhiteSpace(' ')
                  BLOCK
                    INTEGER_CONSTANT
                      PsiElement(INTEGER_LITERAL)('1')
                  PsiWhiteSpace(' ')
                  PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace('\n    ')
        PsiElement(IDENTIFIER)('propertyWithType')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('Int')
      PsiWhiteSpace('\n\n    ')
      DESTRUCTURING_DECLARATION
        PsiElement(val)('val')
        PsiWhiteSpace('\n    ')
        PsiElement(LPAR)('(')
        DESTRUCTURING_DECLARATION_ENTRY
          PsiElement(IDENTIFIER)('a')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        DESTRUCTURING_DECLARATION_ENTRY
          PsiElement(IDENTIFIER)('b')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
