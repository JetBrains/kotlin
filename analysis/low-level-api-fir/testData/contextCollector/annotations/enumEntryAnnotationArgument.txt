Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Implicit receiver:
            FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                Type: kotlin.Enum.Companion
    Element 7
        Scope: FirNestedClassifierScopeWithSubstitution
            Classifiers:
                FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
        Static scope owner symbol: FirRegularClassSymbol public abstract class Enum<E : R|kotlin/Enum<E>|> : R|kotlin/Comparable<E>|, R|java/io/Serializable|
    Element 8
        Implicit receiver:
            FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                Type: pack.MyEnumClass.Companion
    Element 9
        Scope: FirNestedClassifierScopeImpl
            Classifiers:
                FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
        Scope: FirNameAwareOnlyCallablesScope
            Functions
                FirNamedFunctionSymbol public final static fun valueOf(value: R|kotlin/String|): R|pack/MyEnumClass|
                FirNamedFunctionSymbol public final static fun values(): R|kotlin/Array<pack/MyEnumClass>|
            Properties:
                FirEnumEntrySymbol public final static enum entry ENTRY: R|pack/MyEnumClass|
                FirRegularPropertySymbol public final static val entries: R|kotlin/enums/EnumEntries<pack/MyEnumClass>|
                    public get(): R|kotlin/enums/EnumEntries<pack/MyEnumClass>|

FILE: [ResolvedTo(IMPORTS)] enumEntryAnnotationArgument.kt
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] constructor([ResolvedTo(STATUS)] s: R|kotlin/String|): R|pack/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(STATUS)] get(): R|kotlin/String|

    }
    public final [ResolvedTo(STATUS)] enum class MyEnumClass : R|kotlin/Enum<pack/MyEnumClass>| {
        private [ResolvedTo(STATUS)] constructor([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|pack/MyEnumClass| {
            LAZY_super<R|kotlin/Enum<pack/MyEnumClass>|>
        }

        public final [ResolvedTo(STATUS)] val i: R|kotlin/Int| = R|<local>/i|
            public [ResolvedTo(STATUS)] get(): R|kotlin/Int|

        @R|pack/Anno|[Types](s = this@R|pack/MyEnumClass.Companion|.R|pack/MyEnumClass.Companion.CONSTANT|) public final static [ResolvedTo(BODY_RESOLVE)] enum entry ENTRY: R|pack/MyEnumClass| = object : R|pack/MyEnumClass| {
            private [ResolvedTo(BODY_RESOLVE)] constructor(): R|pack/<anonymous>| {
                super<R|pack/MyEnumClass|>(Int(1))
            }

        }

        public final companion [ResolvedTo(STATUS)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(STATUS)] constructor(): R|pack/MyEnumClass.Companion| {
                LAZY_super<R|kotlin/Any|>
            }

            public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val CONSTANT: R|kotlin/String| = String(str)
                public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/String|

        }

        public final static [ResolvedTo(STATUS)] fun values(): R|kotlin/Array<pack/MyEnumClass>| {
        }

        public final static [ResolvedTo(STATUS)] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|pack/MyEnumClass| {
        }

        public final static [ResolvedTo(STATUS)] val entries: R|kotlin/enums/EnumEntries<pack/MyEnumClass>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<pack/MyEnumClass>|

    }