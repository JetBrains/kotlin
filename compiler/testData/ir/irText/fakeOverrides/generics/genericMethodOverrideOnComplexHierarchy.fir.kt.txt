class A : Java1, Java2 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class B : Java1, Java2 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun <T : Any?> bar(): T {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override fun <T : Any?> foo(a: T) {
  }

}

abstract class C : Java2, KotlinInterface2 {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

abstract class D : Java2, KotlinInterface2 {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override fun <T : Any?> bar(): T {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override fun <T : Number> foo(a: T) {
  }

  override fun <T : Any?> foo(a: T) {
  }

}

class E : D {
  constructor() /* primary */ {
    super/*D*/()
    /* <init>() */

  }

  override fun <T : Number> bar(): T {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

}

class F : KotlinClass, Java2 {
  constructor() /* primary */ {
    super/*KotlinClass*/()
    /* <init>() */

  }

}

class G : KotlinClass, Java2 {
  constructor() /* primary */ {
    super/*KotlinClass*/()
    /* <init>() */

  }

  override fun <T : Any?> bar(): T {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

}

class H : Java3, Java2 {
  constructor() /* primary */ {
    super/*Java3*/()
    /* <init>() */

  }

}

class I : Java3, Java2 {
  constructor() /* primary */ {
    super/*Java3*/()
    /* <init>() */

  }

  override fun <T : Any?> foo(a: T) {
  }

}

class J : Java4 {
  constructor() /* primary */ {
    super/*Java4*/()
    /* <init>() */

  }

}

open class KotlinClass : Java1 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class L : Java4 {
  constructor() /* primary */ {
    super/*Java4*/()
    /* <init>() */

  }

  override fun <T : Any?> foo(a: T) {
  }

}

interface KotlinInterface {
  abstract fun <T : Any?> bar(): T

  abstract fun <T : Any?> foo(a: T)

}

interface KotlinInterface2 {
  abstract fun <T : Number> bar(): T

  abstract fun <T : Number> foo(a: T)

}

fun test(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, l: L) {
  val k: Int = a.bar<Int>()
  val k3: Any = a.bar<Any>()
  a.foo<@FlexibleNullability Int?>(a = 1)
  a.foo<Nothing?>(a = null)
  a.foo<@FlexibleNullability Int?>(a = null)
  a.foo<@FlexibleNullability List<Nothing?>?>(a = listOf<Nothing?>(element = null))
  val k5: Int? = b.bar<Int?>()
  val k6: Any = b.bar<Any>()
  b.foo<Int>(a = 1)
  b.foo<Nothing?>(a = null)
  b.foo<Int?>(a = null)
  b.foo<List<Nothing?>>(a = listOf<Nothing?>(element = null))
  val k7: Int? = c.bar<Int?>()
  val k8: Any = c.bar<Any>()
  c.foo<Int>(a = 1)
  c.foo<Nothing?>(a = null)
  c.foo<Int?>(a = null)
  c.foo<List<Nothing?>>(a = listOf<Nothing?>(element = null))
  val k9: Int? = d.bar<Int?>()
  val k10: Any = d.bar<Any>()
  d.foo<Int>(a = 1)
  d.foo<Nothing?>(a = null)
  d.foo<Int?>(a = null)
  d.foo<List<Nothing?>>(a = listOf<Nothing?>(element = null))
  val k11: Int? = e.bar<Int?>()
  val k12: Any = e.bar<Any>()
  e.foo<Int>(a = 1)
  e.foo<Nothing?>(a = null)
  e.foo<Int?>(a = null)
  e.foo<List<Nothing?>>(a = listOf<Nothing?>(element = null))
  val k13: Int? = f.bar<Int?>()
  val k14: Any = f.bar<Any>()
  f.foo<@FlexibleNullability Int?>(a = 1)
  f.foo<Nothing?>(a = null)
  f.foo<@FlexibleNullability Int?>(a = null)
  f.foo<@FlexibleNullability List<Nothing?>?>(a = listOf<Nothing?>(element = null))
  val k15: Int? = g.bar<Int?>()
  val k16: Any = g.bar<Any>()
  g.foo<@FlexibleNullability Int?>(a = 1)
  g.foo<Nothing?>(a = null)
  g.foo<@FlexibleNullability Int?>(a = null)
  g.foo<@FlexibleNullability List<Nothing?>?>(a = listOf<Nothing?>(element = null))
  val k17: Int? = h.bar<Int?>()
  val k18: Any = h.bar<Any>()
  h.foo<@FlexibleNullability Int?>(a = 1)
  h.foo<Nothing?>(a = null)
  h.foo<@FlexibleNullability Int?>(a = null)
  h.foo<@FlexibleNullability List<Nothing?>?>(a = listOf<Nothing?>(element = null))
  val k19: Int? = i.bar<Int?>()
  val k20: Any = i.bar<Any>()
  i.foo<Int>(a = 1)
  i.foo<Nothing?>(a = null)
  i.foo<Int?>(a = null)
  i.foo<List<Nothing?>>(a = listOf<Nothing?>(element = null))
  val k21: Int? = j.bar<@FlexibleNullability Int?>()
  val k22: Any = j.bar<@FlexibleNullability Any?>() /*!! Any */
  j.foo<@FlexibleNullability Int?>(a = 1)
  j.foo<Nothing?>(a = null)
  j.foo<@FlexibleNullability Int?>(a = null)
  j.foo<@FlexibleNullability List<Nothing?>?>(a = listOf<Nothing?>(element = null))
  l.foo<Int>(a = 1)
  l.bar<@FlexibleNullability Int?>() /*~> Unit */
}
