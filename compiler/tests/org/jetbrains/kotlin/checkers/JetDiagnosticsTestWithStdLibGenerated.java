/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.checkers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/diagnostics/testsWithStdLib")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class JetDiagnosticsTestWithStdLibGenerated extends AbstractJetDiagnosticsTestWithStdLib {
    public void testAllFilesPresentInTestsWithStdLib() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("elvisOnUnitInLet.kt")
    public void testElvisOnUnitInLet() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/elvisOnUnitInLet.kt");
        doTest(fileName);
    }

    @TestMetadata("instar.kt")
    public void testInstar() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/instar.kt");
        doTest(fileName);
    }

    @TestMetadata("outstar.kt")
    public void testOutstar() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/outstar.kt");
        doTest(fileName);
    }

    @TestMetadata("overrideWithFunctionalType.kt")
    public void testOverrideWithFunctionalType() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/overrideWithFunctionalType.kt");
        doTest(fileName);
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotations extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInAnnotations() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("annotationClassMethodCall.kt")
        public void testAnnotationClassMethodCall() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationClassMethodCall.kt");
            doTest(fileName);
        }

        @TestMetadata("ClassObjectAnnotatedWithItsKClass.kt")
        public void testClassObjectAnnotatedWithItsKClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/ClassObjectAnnotatedWithItsKClass.kt");
            doTest(fileName);
        }

        @TestMetadata("defaultValueMustBeConstant.kt")
        public void testDefaultValueMustBeConstant() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/defaultValueMustBeConstant.kt");
            doTest(fileName);
        }

        @TestMetadata("qualifiedCallValue.kt")
        public void testQualifiedCallValue() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/qualifiedCallValue.kt");
            doTest(fileName);
        }

        @TestMetadata("targetuse.kt")
        public void testTargetuse() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/targetuse.kt");
            doTest(fileName);
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AnnotationApplicability extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInAnnotationApplicability() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("illegalPlatformName.kt")
            public void testIllegalPlatformName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/illegalPlatformName.kt");
                doTest(fileName);
            }

            @TestMetadata("jvmName.kt")
            public void testJvmName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/jvmName.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AnnotationParameterMustBeConstant extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInAnnotationParameterMustBeConstant() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/array.kt");
                doTest(fileName);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/simple.kt");
                doTest(fileName);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/vararg.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AnnotationParameters extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInAnnotationParameters() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("orderWithValue.kt")
            public void testOrderWithValue() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/orderWithValue.kt");
                doTest(fileName);
            }

            @TestMetadata("orderWithoutValue.kt")
            public void testOrderWithoutValue() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/orderWithoutValue.kt");
                doTest(fileName);
            }

            @TestMetadata("valueArray.kt")
            public void testValueArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArray.kt");
                doTest(fileName);
            }

            @TestMetadata("valueArrayAndOtherDefault.kt")
            public void testValueArrayAndOtherDefault() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayAndOtherDefault.kt");
                doTest(fileName);
            }

            @TestMetadata("valueArrayOnly.kt")
            public void testValueArrayOnly() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayOnly.kt");
                doTest(fileName);
            }

            @TestMetadata("valueArrayWithDefault.kt")
            public void testValueArrayWithDefault() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayWithDefault.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AnnotationWithVarargParameter extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInAnnotationWithVarargParameter() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("javaAnnotationWithVarargArgument.kt")
            public void testJavaAnnotationWithVarargArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter/javaAnnotationWithVarargArgument.kt");
                doTest(fileName);
            }

            @TestMetadata("kotlinAnnotationWithVarargArgument.kt")
            public void testKotlinAnnotationWithVarargArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter/kotlinAnnotationWithVarargArgument.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class JavaAnnotationsWithKClassParameter extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInJavaAnnotationsWithKClassParameter() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("annotationAsArgument.kt")
            public void testAnnotationAsArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/annotationAsArgument.kt");
                doTest(fileName);
            }

            @TestMetadata("arg.kt")
            public void testArg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/arg.kt");
                doTest(fileName);
            }

            @TestMetadata("argAndOtherDefault.kt")
            public void testArgAndOtherDefault() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argAndOtherDefault.kt");
                doTest(fileName);
            }

            @TestMetadata("argArray.kt")
            public void testArgArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argArray.kt");
                doTest(fileName);
            }

            @TestMetadata("argWithDefault.kt")
            public void testArgWithDefault() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argWithDefault.kt");
                doTest(fileName);
            }

            @TestMetadata("argWithDefaultAndOther.kt")
            public void testArgWithDefaultAndOther() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argWithDefaultAndOther.kt");
                doTest(fileName);
            }

            @TestMetadata("twoArgs.kt")
            public void testTwoArgs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/twoArgs.kt");
                doTest(fileName);
            }

            @TestMetadata("value.kt")
            public void testValue() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/value.kt");
                doTest(fileName);
            }

            @TestMetadata("valueAndOtherDefault.kt")
            public void testValueAndOtherDefault() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueAndOtherDefault.kt");
                doTest(fileName);
            }

            @TestMetadata("valueArray.kt")
            public void testValueArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueArray.kt");
                doTest(fileName);
            }

            @TestMetadata("valueWithDefault.kt")
            public void testValueWithDefault() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueWithDefault.kt");
                doTest(fileName);
            }

            @TestMetadata("valueWithDefaultAndOther.kt")
            public void testValueWithDefaultAndOther() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueWithDefaultAndOther.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class JvmOverloads extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInJvmOverloads() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("JvmOverloadWithNoDefaults.kt")
            public void testJvmOverloadWithNoDefaults() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/JvmOverloadWithNoDefaults.kt");
                doTest(fileName);
            }

            @TestMetadata("jvmOverloadsOnAbstractMethods.kt")
            public void testJvmOverloadsOnAbstractMethods() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnAbstractMethods.kt");
                doTest(fileName);
            }

            @TestMetadata("jvmOverloadsOnPrivate.kt")
            public void testJvmOverloadsOnPrivate() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnPrivate.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class KClass extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInKClass() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("kClassArrayInAnnotationsInVariance.kt")
            public void testKClassArrayInAnnotationsInVariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassArrayInAnnotationsInVariance.kt");
                doTest(fileName);
            }

            @TestMetadata("kClassArrayInAnnotationsOutVariance.kt")
            public void testKClassArrayInAnnotationsOutVariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassArrayInAnnotationsOutVariance.kt");
                doTest(fileName);
            }

            @TestMetadata("kClassInAnnotation.kt")
            public void testKClassInAnnotation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotation.kt");
                doTest(fileName);
            }

            @TestMetadata("kClassInAnnotationsInVariance.kt")
            public void testKClassInAnnotationsInVariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotationsInVariance.kt");
                doTest(fileName);
            }

            @TestMetadata("kClassInAnnotationsOutVariance.kt")
            public void testKClassInAnnotationsOutVariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotationsOutVariance.kt");
                doTest(fileName);
            }

            @TestMetadata("kClassInvariantTP.kt")
            public void testKClassInvariantTP() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInvariantTP.kt");
                doTest(fileName);
            }

            @TestMetadata("kClassOutArrayInAnnotationsOutVariance.kt")
            public void testKClassOutArrayInAnnotationsOutVariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassOutArrayInAnnotationsOutVariance.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class PlatformStatic extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInPlatformStatic() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("constructors.kt")
            public void testConstructors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/constructors.kt");
                doTest(fileName);
            }

            @TestMetadata("finalAndAbstract.kt")
            public void testFinalAndAbstract() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/finalAndAbstract.kt");
                doTest(fileName);
            }

            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/functions.kt");
                doTest(fileName);
            }

            @TestMetadata("localFun.kt")
            public void testLocalFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/localFun.kt");
                doTest(fileName);
            }

            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/property.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ProhibitPositionedArgument extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInProhibitPositionedArgument() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("kotlinAnnotation.kt")
            public void testKotlinAnnotation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/kotlinAnnotation.kt");
                doTest(fileName);
            }

            @TestMetadata("tooManyArgs.kt")
            public void testTooManyArgs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/tooManyArgs.kt");
                doTest(fileName);
            }

            @TestMetadata("typeMismatch.kt")
            public void testTypeMismatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/typeMismatch.kt");
                doTest(fileName);
            }

            @TestMetadata("withValue.kt")
            public void testWithValue() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/withValue.kt");
                doTest(fileName);
            }

            @TestMetadata("withoutValue.kt")
            public void testWithoutValue() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/withoutValue.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/publicField")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class PublicField extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInPublicField() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/publicField"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("publicFieldNotOnProperty.kt")
            public void testPublicFieldNotOnProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/publicField/publicFieldNotOnProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("publicFieldOnDelegatedProperty.kt")
            public void testPublicFieldOnDelegatedProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/publicField/publicFieldOnDelegatedProperty.kt");
                doTest(fileName);
            }
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DuplicateJvmSignature extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInDuplicateJvmSignature() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("delegatedProperty.kt")
        public void testDelegatedProperty() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/delegatedProperty.kt");
            doTest(fileName);
        }

        @TestMetadata("jvmOverloads.kt")
        public void testJvmOverloads() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/jvmOverloads.kt");
            doTest(fileName);
        }

        @TestMetadata("platformNames.kt")
        public void testPlatformNames() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/platformNames.kt");
            doTest(fileName);
        }

        @TestMetadata("platformNamesDuplicate.kt")
        public void testPlatformNamesDuplicate() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/platformNamesDuplicate.kt");
            doTest(fileName);
        }

        @TestMetadata("platformStaticInClassObject.kt")
        public void testPlatformStaticInClassObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/platformStaticInClassObject.kt");
            doTest(fileName);
        }

        @TestMetadata("platformStaticInObject.kt")
        public void testPlatformStaticInObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/platformStaticInObject.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/functionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionLiterals extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInFunctionLiterals() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/functionLiterals"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("pseudocodeMemoryOverhead.kt")
        public void testPseudocodeMemoryOverhead() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/functionLiterals/pseudocodeMemoryOverhead.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inference extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInInference() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("arrayConstructor.kt")
        public void testArrayConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/arrayConstructor.kt");
            doTest(fileName);
        }

        @TestMetadata("kt1558.kt")
        public void testKt1558() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/kt1558.kt");
            doTest(fileName);
        }

        @TestMetadata("kt3458.kt")
        public void testKt3458() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/kt3458.kt");
            doTest(fileName);
        }

        @TestMetadata("kt4975.kt")
        public void testKt4975() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/kt4975.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/kotlinSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class KotlinSignature extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInKotlinSignature() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/kotlinSignature"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("constructorNamedArguments.kt")
        public void testConstructorNamedArguments() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/kotlinSignature/constructorNamedArguments.kt");
            doTest(fileName);
        }

        @TestMetadata("parameterNames.kt")
        public void testParameterNames() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/kotlinSignature/parameterNames.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/native")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Native extends AbstractJetDiagnosticsTestWithStdLib {
        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/abstract.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInNative() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/native"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("body.kt")
        public void testBody() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/body.kt");
            doTest(fileName);
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/constructor.kt");
            doTest(fileName);
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/inline.kt");
            doTest(fileName);
        }

        @TestMetadata("noBody.kt")
        public void testNoBody() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/noBody.kt");
            doTest(fileName);
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/override.kt");
            doTest(fileName);
        }

        @TestMetadata("reified.kt")
        public void testReified() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/reified.kt");
            doTest(fileName);
        }

        @TestMetadata("trait.kt")
        public void testTrait() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/trait.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class PurelyImplementedCollection extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInPurelyImplementedCollection() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("arrayList.kt")
        public void testArrayList() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/arrayList.kt");
            doTest(fileName);
        }

        @TestMetadata("arrayListNullable.kt")
        public void testArrayListNullable() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/arrayListNullable.kt");
            doTest(fileName);
        }

        @TestMetadata("customClassMutableCollection.kt")
        public void testCustomClassMutableCollection() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/customClassMutableCollection.kt");
            doTest(fileName);
        }

        @TestMetadata("customClassMutableList.kt")
        public void testCustomClassMutableList() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/customClassMutableList.kt");
            doTest(fileName);
        }

        @TestMetadata("invalidFqName.kt")
        public void testInvalidFqName() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/invalidFqName.kt");
            doTest(fileName);
        }

        @TestMetadata("maps.kt")
        public void testMaps() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/maps.kt");
            doTest(fileName);
        }

        @TestMetadata("mapsWithNullableKey.kt")
        public void testMapsWithNullableKey() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/mapsWithNullableKey.kt");
            doTest(fileName);
        }

        @TestMetadata("mapsWithNullableValues.kt")
        public void testMapsWithNullableValues() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/mapsWithNullableValues.kt");
            doTest(fileName);
        }

        @TestMetadata("sets.kt")
        public void testSets() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/sets.kt");
            doTest(fileName);
        }

        @TestMetadata("wrongTypeParametersCount.kt")
        public void testWrongTypeParametersCount() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/wrongTypeParametersCount.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/regression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Regression extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInRegression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/regression"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("ea63992.kt")
        public void testEa63992() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/regression/ea63992.kt");
            doTest(fileName);
        }

        @TestMetadata("ea65206.kt")
        public void testEa65206() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/regression/ea65206.kt");
            doTest(fileName);
        }

        @TestMetadata("kt2082.kt")
        public void testKt2082() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/regression/kt2082.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/reified")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reified extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInReified() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/reified"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("arrayConstruction.kt")
        public void testArrayConstruction() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/reified/arrayConstruction.kt");
            doTest(fileName);
        }

        @TestMetadata("arrayOfNullsReified.kt")
        public void testArrayOfNullsReified() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/reified/arrayOfNullsReified.kt");
            doTest(fileName);
        }

        @TestMetadata("nonCallableReiefied.kt")
        public void testNonCallableReiefied() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/reified/nonCallableReiefied.kt");
            doTest(fileName);
        }

        @TestMetadata("reifiedNothingSubstitution.kt")
        public void testReifiedNothingSubstitution() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/reified/reifiedNothingSubstitution.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Resolve extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInResolve() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/resolve"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("kt4711.kt")
        public void testKt4711() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve/kt4711.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Varargs extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInVarargs() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/varargs"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("kt3213.kt")
        public void testKt3213() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs/kt3213.kt");
            doTest(fileName);
        }

        @TestMetadata("kt4172j.kt")
        public void testKt4172j() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs/kt4172j.kt");
            doTest(fileName);
        }

        @TestMetadata("kt5534.kt")
        public void testKt5534() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs/kt5534.kt");
            doTest(fileName);
        }
    }
}
