RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] main.kt
    public? final? [ResolvedTo(RAW_FIR)] fun resolveMe([ResolvedTo(RAW_FIR)] i: JavaInterface): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(RAW_FIR)] fun resolveMe([ResolvedTo(RAW_FIR)] i: JavaInterface): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun resolveMe([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] i: JavaInterface): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(COMPANION_GENERATION)] fun resolveMe([ResolvedTo(COMPANION_GENERATION)] i: JavaInterface): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(SUPER_TYPES)] fun resolveMe([ResolvedTo(SUPER_TYPES)] i: JavaInterface): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public? final? [ResolvedTo(TYPES)] fun resolveMe([ResolvedTo(TYPES)] i: R|JavaInterface|): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(STATUS)] fun resolveMe([ResolvedTo(STATUS)] i: R|JavaInterface|): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun resolveMe([ResolvedTo(EXPECT_ACTUAL_MATCHING)] i: R|JavaInterface|): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(CONTRACTS)] fun resolveMe([ResolvedTo(CONTRACTS)] i: R|JavaInterface|): <implicit> { LAZY_BLOCK }

FILE: [ResolvedTo(RAW_FIR)] KotlinAnnotation.kt
    @java.lang.annotation.Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun resolveMe([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] i: R|JavaInterface|): R|kotlin/Int| {
        ^resolveMe R|<local>/i|.R|/JavaInterface.id|
    }

FILE: [ResolvedTo(IMPORTS)] KotlinAnnotation.kt
    @R|java/lang/annotation/Target|[Types](ElementType#.TYPE_USE#) public final? [ResolvedTo(TYPES)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(CONSTANT_EVALUATION)] fun resolveMe([ResolvedTo(CONSTANT_EVALUATION)] i: R|JavaInterface|): R|kotlin/Int| {
        ^resolveMe R|<local>/i|.R|/JavaInterface.id|
    }

FILE: [ResolvedTo(IMPORTS)] KotlinAnnotation.kt
    @R|java/lang/annotation/Target|[Types](ElementType#.TYPE_USE#) public final? [ResolvedTo(TYPES)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun resolveMe([ResolvedTo(ANNOTATION_ARGUMENTS)] i: R|JavaInterface|): R|kotlin/Int| {
        ^resolveMe R|<local>/i|.R|/JavaInterface.id|
    }

FILE: [ResolvedTo(IMPORTS)] KotlinAnnotation.kt
    @R|java/lang/annotation/Target|[Types](ElementType#.TYPE_USE#) public final? [ResolvedTo(TYPES)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public final [ResolvedTo(BODY_RESOLVE)] fun resolveMe([ResolvedTo(BODY_RESOLVE)] i: R|JavaInterface|): R|kotlin/Int| {
        ^resolveMe R|<local>/i|.R|/JavaInterface.id|
    }

FILE: [ResolvedTo(IMPORTS)] KotlinAnnotation.kt
    @R|java/lang/annotation/Target|[Types](ElementType#.TYPE_USE#) public final? [ResolvedTo(TYPES)] annotation class KotlinAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinAnnotation] constructor(): R|KotlinAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] main.kt
    public final [ResolvedTo(BODY_RESOLVE)] fun resolveMe([ResolvedTo(BODY_RESOLVE)] i: R|JavaInterface|): R|kotlin/Int| {
        ^resolveMe R|<local>/i|.R|/JavaInterface.id|
    }
