/full_viper_dump.kt:(54,55): info: Generated Viper text for f:
domain dom$Any  {


}

domain dom$Casting[A, B]  {

  function dom$Casting$cast(a: A, newType: dom$Type): B

  axiom dom$Casting$null_cast {
    (forall newType: dom$Type ::
      { (dom$Casting$cast((dom$Nullable$null(): dom$Nullable[A]), dom$Type$special$Nullable(newType)): dom$Nullable[B]) }
      (dom$Casting$cast((dom$Nullable$null(): dom$Nullable[A]), dom$Type$special$Nullable(newType)): dom$Nullable[B]) ==
      (dom$Nullable$null(): dom$Nullable[B]))
  }

  axiom dom$Casting$type_of_cast {
    (forall a: A, newType: dom$Type ::
      { (dom$TypeOf$typeOf((dom$Casting$cast(a, newType): B)): dom$Type) }
      dom$Type$isSubtype((dom$TypeOf$typeOf((dom$Casting$cast(a, newType): B)): dom$Type),
      newType))
  }
}

domain dom$Nullable[T]  {

  function dom$Nullable$null(): dom$Nullable[T]

  axiom dom$Nullable$some_not_null {
    (forall x: T, newType: dom$Type ::
      { (dom$Casting$cast(x, dom$Type$special$Nullable(newType)): dom$Nullable[T]) }
      !dom$Type$is_nullable_type(newType) ==>
      (dom$Casting$cast(x, dom$Type$special$Nullable(newType)): dom$Nullable[T]) !=
      (dom$Nullable$null(): dom$Nullable[T]))
  }

  axiom dom$Nullable$val_of_nullable_of_val {
    (forall x: T, newType: dom$Type ::
      { (dom$Casting$cast((dom$Casting$cast(x, dom$Type$special$Nullable(newType)): dom$Nullable[T]),
      (dom$TypeOf$typeOf(x): dom$Type)): T) }
      (dom$Casting$cast((dom$Casting$cast(x, dom$Type$special$Nullable(newType)): dom$Nullable[T]),
      (dom$TypeOf$typeOf(x): dom$Type)): T) ==
      x)
  }

  axiom dom$Nullable$nullable_of_val_of_nullable {
    (forall nx: dom$Nullable[T], newType: dom$Type ::
      { (dom$Casting$cast((dom$Casting$cast(nx, newType): T), (dom$TypeOf$typeOf(nx): dom$Type)): dom$Nullable[T]) }
      nx != (dom$Nullable$null(): dom$Nullable[T]) ==>
      (dom$Casting$cast((dom$Casting$cast(nx, newType): T), (dom$TypeOf$typeOf(nx): dom$Type)): dom$Nullable[T]) ==
      nx)
  }
}

domain dom$Type  {

  unique function dom$Type$Int(): dom$Type

  unique function dom$Type$Boolean(): dom$Type

  unique function dom$Type$Unit(): dom$Type

  unique function dom$Type$Nothing(): dom$Type

  unique function dom$Type$Any(): dom$Type

  unique function dom$Type$Function(): dom$Type

  unique function dom$Type$global$class_Foo(): dom$Type

  function dom$Type$special$Nullable(t: dom$Type): dom$Type

  function dom$Type$isSubtype(a: dom$Type, b: dom$Type): Bool

  function dom$Type$is_nullable_type(t: dom$Type): Bool

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$special$Nullable(t) != dom$Type$Int())
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$special$Nullable(t) != dom$Type$Boolean())
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$special$Nullable(t) != dom$Type$Unit())
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$special$Nullable(t) != dom$Type$Nothing())
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$special$Nullable(t) != dom$Type$Any())
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$special$Nullable(t) != dom$Type$Function())
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$special$Nullable(t) != dom$Type$global$class_Foo())
  }

  axiom {
    !dom$Type$is_nullable_type(dom$Type$Int())
  }

  axiom {
    !dom$Type$is_nullable_type(dom$Type$Boolean())
  }

  axiom {
    !dom$Type$is_nullable_type(dom$Type$Unit())
  }

  axiom {
    !dom$Type$is_nullable_type(dom$Type$Nothing())
  }

  axiom {
    !dom$Type$is_nullable_type(dom$Type$Any())
  }

  axiom {
    !dom$Type$is_nullable_type(dom$Type$Function())
  }

  axiom {
    !dom$Type$is_nullable_type(dom$Type$global$class_Foo())
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$is_nullable_type(dom$Type$special$Nullable(t)))
  }

  axiom {
    dom$Type$isSubtype(dom$Type$Int(), dom$Type$Any())
  }

  axiom {
    dom$Type$isSubtype(dom$Type$Boolean(), dom$Type$Any())
  }

  axiom {
    dom$Type$isSubtype(dom$Type$Unit(), dom$Type$Any())
  }

  axiom {
    dom$Type$isSubtype(dom$Type$Nothing(), dom$Type$Any())
  }

  axiom {
    dom$Type$isSubtype(dom$Type$Any(), dom$Type$Any())
  }

  axiom {
    dom$Type$isSubtype(dom$Type$Function(), dom$Type$Any())
  }

  axiom {
    dom$Type$isSubtype(dom$Type$global$class_Foo(), dom$Type$Any())
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$isSubtype(t, dom$Type$special$Nullable(dom$Type$Any())) }
      dom$Type$isSubtype(t, dom$Type$special$Nullable(dom$Type$Any())))
  }

  axiom {
    (forall t: dom$Type, t2: dom$Type ::t != t2 ==>
      dom$Type$special$Nullable(t) != dom$Type$special$Nullable(t2))
  }

  axiom {
    (forall t: dom$Type ::dom$Type$isSubtype(t, t))
  }

  axiom {
    (forall t: dom$Type, t2: dom$Type, t3: dom$Type ::
      { dom$Type$isSubtype(t, t2), dom$Type$isSubtype(t2, t3) }
      dom$Type$isSubtype(t, t2) && dom$Type$isSubtype(t2, t3) ==>
      dom$Type$isSubtype(t, t3))
  }

  axiom {
    (forall t: dom$Type, t2: dom$Type ::
      { dom$Type$isSubtype(t, t2), dom$Type$isSubtype(t2, t) }
      dom$Type$isSubtype(t, t2) && dom$Type$isSubtype(t2, t) ==> t == t2)
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$special$Nullable(t) }
      dom$Type$isSubtype(t, dom$Type$special$Nullable(t)))
  }

  axiom {
    (forall t: dom$Type, t2: dom$Type ::
      { dom$Type$isSubtype(dom$Type$special$Nullable(t), dom$Type$special$Nullable(t2)) }
      dom$Type$isSubtype(t, t2) ==>
      dom$Type$isSubtype(dom$Type$special$Nullable(t), dom$Type$special$Nullable(t2)))
  }

  axiom {
    (forall t: dom$Type ::
      { dom$Type$isSubtype(dom$Type$Nothing(), t) }
      dom$Type$isSubtype(dom$Type$Nothing(), t))
  }

  axiom {
    dom$Type$isSubtype(dom$Type$global$class_Foo(), dom$Type$Any())
  }
}

domain dom$TypeOf[T]  {

  function dom$TypeOf$typeOf(x: T): dom$Type

  axiom {
    (forall i: Int ::
      { (dom$TypeOf$typeOf(i): dom$Type) }
      (dom$TypeOf$typeOf(i): dom$Type) == dom$Type$Int())
  }

  axiom {
    (forall b: Bool ::
      { (dom$TypeOf$typeOf(b): dom$Type) }
      (dom$TypeOf$typeOf(b): dom$Type) == dom$Type$Boolean())
  }
}

domain dom$Unit  {

  function dom$Unit$element(): dom$Unit

  axiom {
    (forall u: dom$Unit ::
      { (dom$TypeOf$typeOf(u): dom$Type) }
      (dom$TypeOf$typeOf(u): dom$Type) == dom$Type$Unit())
  }
}

field class_scope_global$class_Foo$member_x: Int

field special$function_object_call_counter: Int

field special$size: Int

function special$duplicable(anonymous$0: Ref): Bool


method class_scope_global$class_Foo$constructor$fun_take$T_Int$return$T_class_global$class_Foo(local$x: Int)
  returns (ret: Ref)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$global$class_Foo())


method global$fun_f$fun_take$$return$T_Unit() returns (ret: dom$Unit)
{
  var anonymous$0: Ref
  var local0$foo: Ref
  anonymous$0 := class_scope_global$class_Foo$constructor$fun_take$T_Int$return$T_class_global$class_Foo(0)
  local0$foo := anonymous$0
  label label$ret$0
}

method special$invoke_function_object(anonymous$0: Ref)
  requires acc(anonymous$0.special$function_object_call_counter, write)
  ensures acc(anonymous$0.special$function_object_call_counter, write)
  ensures old(anonymous$0.special$function_object_call_counter) + 1 ==
    anonymous$0.special$function_object_call_counter

