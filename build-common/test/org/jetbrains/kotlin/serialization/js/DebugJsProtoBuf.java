// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: js/js.serializer/src/js.debug.proto

package org.jetbrains.kotlin.serialization.js;

public final class DebugJsProtoBuf {
  private DebugJsProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.classAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.constructorAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.functionAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.propertyAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.compileTimeValue);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.enumEntryAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.parameterAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.typeAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.typeParameterAnnotation);
  }
  public interface ClassesOrBuilder
      extends org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    // repeated int32 class_name = 1 [packed = true];
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    java.util.List<java.lang.Integer> getClassNameList();
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    int getClassNameCount();
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    int getClassName(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Classes}
   */
  public static final class Classes extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage
      implements ClassesOrBuilder {
    // Use Classes.newBuilder() to construct.
    private Classes(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Classes(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Classes defaultInstance;
    public static Classes getDefaultInstance() {
      return defaultInstance;
    }

    public Classes getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Classes(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                className_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              className_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                className_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                className_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = java.util.Collections.unmodifiableList(className_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Classes> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Classes>() {
      public Classes parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Classes(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Classes> getParserForType() {
      return PARSER;
    }

    // repeated int32 class_name = 1 [packed = true];
    public static final int CLASS_NAME_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> className_;
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getClassNameList() {
      return className_;
    }
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public int getClassNameCount() {
      return className_.size();
    }
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public int getClassName(int index) {
      return className_.get(index);
    }
    private int classNameMemoizedSerializedSize = -1;

    private void initFields() {
      className_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getClassNameList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(classNameMemoizedSerializedSize);
      }
      for (int i = 0; i < className_.size(); i++) {
        output.writeInt32NoTag(className_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < className_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(className_.get(i));
        }
        size += dataSize;
        if (!getClassNameList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        classNameMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Classes}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder>
       implements org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.ClassesOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        className_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.getDefaultInstance();
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes build() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes buildPartial() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = java.util.Collections.unmodifiableList(className_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.className_ = className_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes other) {
        if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.getDefaultInstance()) return this;
        if (!other.className_.isEmpty()) {
          if (className_.isEmpty()) {
            className_ = other.className_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureClassNameIsMutable();
            className_.addAll(other.className_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 class_name = 1 [packed = true];
      private java.util.List<java.lang.Integer> className_ = java.util.Collections.emptyList();
      private void ensureClassNameIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = new java.util.ArrayList<java.lang.Integer>(className_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getClassNameList() {
        return java.util.Collections.unmodifiableList(className_);
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public int getClassNameCount() {
        return className_.size();
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public int getClassName(int index) {
        return className_.get(index);
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder setClassName(
          int index, int value) {
        ensureClassNameIsMutable();
        className_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder addClassName(int value) {
        ensureClassNameIsMutable();
        className_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder addAllClassName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureClassNameIsMutable();
        super.addAll(values, className_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder clearClassName() {
        className_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.Classes)
    }

    static {
      defaultInstance = new Classes(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.Classes)
  }

  public interface LibraryOrBuilder
      extends org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    // repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry> 
        getEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry getEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    int getEntryCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder> 
        getEntryOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder getEntryOrBuilder(
        int index);

    // optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];
    /**
     * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];</code>
     */
    boolean hasKind();
    /**
     * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];</code>
     */
    org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind getKind();

    // repeated string importedModules = 3;
    /**
     * <code>repeated string importedModules = 3;</code>
     */
    java.util.List<java.lang.String>
    getImportedModulesList();
    /**
     * <code>repeated string importedModules = 3;</code>
     */
    int getImportedModulesCount();
    /**
     * <code>repeated string importedModules = 3;</code>
     */
    java.lang.String getImportedModules(int index);
    /**
     * <code>repeated string importedModules = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getImportedModulesBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Library}
   */
  public static final class Library extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage
      implements LibraryOrBuilder {
    // Use Library.newBuilder() to construct.
    private Library(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Library(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Library defaultInstance;
    public static Library getDefaultInstance() {
      return defaultInstance;
    }

    public Library getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Library(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                entry_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry>();
                mutable_bitField0_ |= 0x00000001;
              }
              entry_.add(input.readMessage(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind value = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                kind_ = value;
              }
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                importedModules_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              importedModules_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          entry_ = java.util.Collections.unmodifiableList(entry_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          importedModules_ = new org.jetbrains.kotlin.protobuf.UnmodifiableLazyStringList(importedModules_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Library> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Library>() {
      public Library parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Library(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Library> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.Library.Kind}
     */
    public enum Kind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>PLAIN = 1;</code>
       */
      PLAIN(0, 1),
      /**
       * <code>AMD = 2;</code>
       */
      AMD(1, 2),
      /**
       * <code>COMMON_JS = 3;</code>
       */
      COMMON_JS(2, 3),
      /**
       * <code>UMD = 4;</code>
       */
      UMD(3, 4),
      ;

      /**
       * <code>PLAIN = 1;</code>
       */
      public static final int PLAIN_VALUE = 1;
      /**
       * <code>AMD = 2;</code>
       */
      public static final int AMD_VALUE = 2;
      /**
       * <code>COMMON_JS = 3;</code>
       */
      public static final int COMMON_JS_VALUE = 3;
      /**
       * <code>UMD = 4;</code>
       */
      public static final int UMD_VALUE = 4;


      public final int getNumber() { return value; }

      public static Kind valueOf(int value) {
        switch (value) {
          case 1: return PLAIN;
          case 2: return AMD;
          case 3: return COMMON_JS;
          case 4: return UMD;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>() {
              public Kind findValueByNumber(int number) {
                return Kind.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.getDescriptor().getEnumTypes().get(0);
      }

      private static final Kind[] VALUES = values();

      public static Kind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Kind(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.Library.Kind)
    }

    public interface FileEntryOrBuilder
        extends org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      // required string path = 1;
      /**
       * <code>required string path = 1;</code>
       */
      boolean hasPath();
      /**
       * <code>required string path = 1;</code>
       */
      java.lang.String getPath();
      /**
       * <code>required string path = 1;</code>
       */
      org.jetbrains.kotlin.protobuf.ByteString
          getPathBytes();

      // required bytes content = 2;
      /**
       * <code>required bytes content = 2;</code>
       */
      boolean hasContent();
      /**
       * <code>required bytes content = 2;</code>
       */
      org.jetbrains.kotlin.protobuf.ByteString getContent();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Library.FileEntry}
     */
    public static final class FileEntry extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage
        implements FileEntryOrBuilder {
      // Use FileEntry.newBuilder() to construct.
      private FileEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private FileEntry(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final FileEntry defaultInstance;
      public static FileEntry getDefaultInstance() {
        return defaultInstance;
      }

      public FileEntry getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private FileEntry(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
            org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                path_ = input.readBytes();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                content_ = input.readBytes();
                break;
              }
            }
          }
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder.class);
      }

      public static org.jetbrains.kotlin.protobuf.Parser<FileEntry> PARSER =
          new org.jetbrains.kotlin.protobuf.AbstractParser<FileEntry>() {
        public FileEntry parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return new FileEntry(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<FileEntry> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required string path = 1;
      public static final int PATH_FIELD_NUMBER = 1;
      private java.lang.Object path_;
      /**
       * <code>required string path = 1;</code>
       */
      public boolean hasPath() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string path = 1;</code>
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          org.jetbrains.kotlin.protobuf.ByteString bs = 
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            path_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string path = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof java.lang.String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }

      // required bytes content = 2;
      public static final int CONTENT_FIELD_NUMBER = 2;
      private org.jetbrains.kotlin.protobuf.ByteString content_;
      /**
       * <code>required bytes content = 2;</code>
       */
      public boolean hasContent() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes content = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString getContent() {
        return content_;
      }

      private void initFields() {
        path_ = "";
        content_ = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasPath()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasContent()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getPathBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, content_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSize(1, getPathBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSize(2, content_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Library.FileEntry}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder>
         implements org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_descriptor;
        }

        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          path_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          content_ = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_descriptor;
        }

        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry getDefaultInstanceForType() {
          return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.getDefaultInstance();
        }

        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry build() {
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry buildPartial() {
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.path_ = path_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.content_ = content_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry) {
            return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry other) {
          if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.getDefaultInstance()) return this;
          if (other.hasPath()) {
            bitField0_ |= 0x00000001;
            path_ = other.path_;
            onChanged();
          }
          if (other.hasContent()) {
            setContent(other.getContent());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasPath()) {
            
            return false;
          }
          if (!hasContent()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required string path = 1;
        private java.lang.Object path_ = "";
        /**
         * <code>required string path = 1;</code>
         */
        public boolean hasPath() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string path = 1;</code>
         */
        public java.lang.String getPath() {
          java.lang.Object ref = path_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((org.jetbrains.kotlin.protobuf.ByteString) ref)
                .toStringUtf8();
            path_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string path = 1;</code>
         */
        public org.jetbrains.kotlin.protobuf.ByteString
            getPathBytes() {
          java.lang.Object ref = path_;
          if (ref instanceof String) {
            org.jetbrains.kotlin.protobuf.ByteString b = 
                org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            path_ = b;
            return b;
          } else {
            return (org.jetbrains.kotlin.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string path = 1;</code>
         */
        public Builder setPath(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          path_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string path = 1;</code>
         */
        public Builder clearPath() {
          bitField0_ = (bitField0_ & ~0x00000001);
          path_ = getDefaultInstance().getPath();
          onChanged();
          return this;
        }
        /**
         * <code>required string path = 1;</code>
         */
        public Builder setPathBytes(
            org.jetbrains.kotlin.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          path_ = value;
          onChanged();
          return this;
        }

        // required bytes content = 2;
        private org.jetbrains.kotlin.protobuf.ByteString content_ = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;
        /**
         * <code>required bytes content = 2;</code>
         */
        public boolean hasContent() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required bytes content = 2;</code>
         */
        public org.jetbrains.kotlin.protobuf.ByteString getContent() {
          return content_;
        }
        /**
         * <code>required bytes content = 2;</code>
         */
        public Builder setContent(org.jetbrains.kotlin.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          content_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required bytes content = 2;</code>
         */
        public Builder clearContent() {
          bitField0_ = (bitField0_ & ~0x00000002);
          content_ = getDefaultInstance().getContent();
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.Library.FileEntry)
      }

      static {
        defaultInstance = new FileEntry(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.Library.FileEntry)
    }

    private int bitField0_;
    // repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;
    public static final int ENTRY_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry> entry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry> getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder> 
        getEntryOrBuilderList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder getEntryOrBuilder(
        int index) {
      return entry_.get(index);
    }

    // optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];
    public static final int KIND_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind kind_;
    /**
     * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];</code>
     */
    public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind getKind() {
      return kind_;
    }

    // repeated string importedModules = 3;
    public static final int IMPORTEDMODULES_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.LazyStringList importedModules_;
    /**
     * <code>repeated string importedModules = 3;</code>
     */
    public java.util.List<java.lang.String>
        getImportedModulesList() {
      return importedModules_;
    }
    /**
     * <code>repeated string importedModules = 3;</code>
     */
    public int getImportedModulesCount() {
      return importedModules_.size();
    }
    /**
     * <code>repeated string importedModules = 3;</code>
     */
    public java.lang.String getImportedModules(int index) {
      return importedModules_.get(index);
    }
    /**
     * <code>repeated string importedModules = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getImportedModulesBytes(int index) {
      return importedModules_.getByteString(index);
    }

    private void initFields() {
      entry_ = java.util.Collections.emptyList();
      kind_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.PLAIN;
      importedModules_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getEntryCount(); i++) {
        if (!getEntry(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < entry_.size(); i++) {
        output.writeMessage(1, entry_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(2, kind_.getNumber());
      }
      for (int i = 0; i < importedModules_.size(); i++) {
        output.writeBytes(3, importedModules_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < entry_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, entry_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(2, kind_.getNumber());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < importedModules_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(importedModules_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getImportedModulesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Library}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder>
       implements org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.LibraryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEntryFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (entryBuilder_ == null) {
          entry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          entryBuilder_.clear();
        }
        kind_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.PLAIN;
        bitField0_ = (bitField0_ & ~0x00000002);
        importedModules_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.getDefaultInstance();
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library build() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library buildPartial() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (entryBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            entry_ = java.util.Collections.unmodifiableList(entry_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.entry_ = entry_;
        } else {
          result.entry_ = entryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.kind_ = kind_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          importedModules_ = new org.jetbrains.kotlin.protobuf.UnmodifiableLazyStringList(
              importedModules_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.importedModules_ = importedModules_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library other) {
        if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.getDefaultInstance()) return this;
        if (entryBuilder_ == null) {
          if (!other.entry_.isEmpty()) {
            if (entry_.isEmpty()) {
              entry_ = other.entry_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEntryIsMutable();
              entry_.addAll(other.entry_);
            }
            onChanged();
          }
        } else {
          if (!other.entry_.isEmpty()) {
            if (entryBuilder_.isEmpty()) {
              entryBuilder_.dispose();
              entryBuilder_ = null;
              entry_ = other.entry_;
              bitField0_ = (bitField0_ & ~0x00000001);
              entryBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEntryFieldBuilder() : null;
            } else {
              entryBuilder_.addAllMessages(other.entry_);
            }
          }
        }
        if (other.hasKind()) {
          setKind(other.getKind());
        }
        if (!other.importedModules_.isEmpty()) {
          if (importedModules_.isEmpty()) {
            importedModules_ = other.importedModules_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureImportedModulesIsMutable();
            importedModules_.addAll(other.importedModules_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getEntryCount(); i++) {
          if (!getEntry(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;
      private java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry> entry_ =
        java.util.Collections.emptyList();
      private void ensureEntryIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          entry_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry>(entry_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder> entryBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry> getEntryList() {
        if (entryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(entry_);
        } else {
          return entryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public int getEntryCount() {
        if (entryBuilder_ == null) {
          return entry_.size();
        } else {
          return entryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry getEntry(int index) {
        if (entryBuilder_ == null) {
          return entry_.get(index);
        } else {
          return entryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.set(index, value);
          onChanged();
        } else {
          entryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.set(index, builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder addEntry(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.add(value);
          onChanged();
        } else {
          entryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.add(index, value);
          onChanged();
        } else {
          entryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder addEntry(
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.add(builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.add(index, builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder addAllEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry> values) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          super.addAll(values, entry_);
          onChanged();
        } else {
          entryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder clearEntry() {
        if (entryBuilder_ == null) {
          entry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          entryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public Builder removeEntry(int index) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.remove(index);
          onChanged();
        } else {
          entryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder getEntryBuilder(
          int index) {
        return getEntryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder getEntryOrBuilder(
          int index) {
        if (entryBuilder_ == null) {
          return entry_.get(index);  } else {
          return entryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder> 
           getEntryOrBuilderList() {
        if (entryBuilder_ != null) {
          return entryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(entry_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder addEntryBuilder() {
        return getEntryFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder addEntryBuilder(
          int index) {
        return getEntryFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.FileEntry entry = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder> 
           getEntryBuilderList() {
        return getEntryFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder> 
          getEntryFieldBuilder() {
        if (entryBuilder_ == null) {
          entryBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntry.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.FileEntryOrBuilder>(
                  entry_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          entry_ = null;
        }
        return entryBuilder_;
      }

      // optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];
      private org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind kind_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.PLAIN;
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];</code>
       */
      public boolean hasKind() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind getKind() {
        return kind_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];</code>
       */
      public Builder setKind(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 2 [default = PLAIN];</code>
       */
      public Builder clearKind() {
        bitField0_ = (bitField0_ & ~0x00000002);
        kind_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.PLAIN;
        onChanged();
        return this;
      }

      // repeated string importedModules = 3;
      private org.jetbrains.kotlin.protobuf.LazyStringList importedModules_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
      private void ensureImportedModulesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          importedModules_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(importedModules_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public java.util.List<java.lang.String>
          getImportedModulesList() {
        return java.util.Collections.unmodifiableList(importedModules_);
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public int getImportedModulesCount() {
        return importedModules_.size();
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public java.lang.String getImportedModules(int index) {
        return importedModules_.get(index);
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getImportedModulesBytes(int index) {
        return importedModules_.getByteString(index);
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public Builder setImportedModules(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModulesIsMutable();
        importedModules_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public Builder addImportedModules(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModulesIsMutable();
        importedModules_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public Builder addAllImportedModules(
          java.lang.Iterable<java.lang.String> values) {
        ensureImportedModulesIsMutable();
        super.addAll(values, importedModules_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public Builder clearImportedModules() {
        importedModules_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string importedModules = 3;</code>
       */
      public Builder addImportedModulesBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModulesIsMutable();
        importedModules_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.Library)
    }

    static {
      defaultInstance = new Library(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.Library)
  }

  public static final int CLASS_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Class,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> classAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int CONSTRUCTOR_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Constructor { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Constructor,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> constructorAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int FUNCTION_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Function,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> functionAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int PROPERTY_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Property,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> propertyAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int COMPILE_TIME_VALUE_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Property,
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Argument.Value> compileTimeValue = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Argument.Value.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance());
  public static final int ENUM_ENTRY_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.EnumEntry { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.EnumEntry,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> enumEntryAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int PARAMETER_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.ValueParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.ValueParameter,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> parameterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int TYPE_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Type { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Type,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> typeAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int TYPE_PARAMETER_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.TypeParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.TypeParameter,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> typeParameterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  private static org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_Classes_fieldAccessorTable;
  private static org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_Library_fieldAccessorTable;
  private static org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#js/js.serializer/src/js.debug.proto\022%o" +
      "rg.jetbrains.kotlin.serialization.js\0320co" +
      "re/deserialization/src/descriptors.debug" +
      ".proto\"!\n\007Classes\022\026\n\nclass_name\030\001 \003(\005B\002\020" +
      "\001\"\225\002\n\007Library\022G\n\005entry\030\001 \003(\01328.org.jetbr" +
      "ains.kotlin.serialization.js.Library.Fil" +
      "eEntry\022H\n\004kind\030\002 \001(\01623.org.jetbrains.kot" +
      "lin.serialization.js.Library.Kind:\005PLAIN" +
      "\022\027\n\017importedModules\030\003 \003(\t\032*\n\tFileEntry\022\014" +
      "\n\004path\030\001 \002(\t\022\017\n\007content\030\002 \002(\014\"2\n\004Kind\022\t\n",
      "\005PLAIN\020\001\022\007\n\003AMD\020\002\022\r\n\tCOMMON_JS\020\003\022\007\n\003UMD\020" +
      "\004:t\n\020class_annotation\022).org.jetbrains.ko" +
      "tlin.serialization.Class\030\202\001 \003(\0132..org.je" +
      "tbrains.kotlin.serialization.Annotation:" +
      "\200\001\n\026constructor_annotation\022/.org.jetbrai" +
      "ns.kotlin.serialization.Constructor\030\202\001 \003" +
      "(\0132..org.jetbrains.kotlin.serialization." +
      "Annotation:z\n\023function_annotation\022,.org." +
      "jetbrains.kotlin.serialization.Function\030" +
      "\202\001 \003(\0132..org.jetbrains.kotlin.serializat",
      "ion.Annotation:z\n\023property_annotation\022,." +
      "org.jetbrains.kotlin.serialization.Prope" +
      "rty\030\202\001 \003(\0132..org.jetbrains.kotlin.serial" +
      "ization.Annotation:\210\001\n\022compile_time_valu" +
      "e\022,.org.jetbrains.kotlin.serialization.P" +
      "roperty\030\203\001 \001(\0132=.org.jetbrains.kotlin.se" +
      "rialization.Annotation.Argument.Value:}\n" +
      "\025enum_entry_annotation\022-.org.jetbrains.k" +
      "otlin.serialization.EnumEntry\030\202\001 \003(\0132..o" +
      "rg.jetbrains.kotlin.serialization.Annota",
      "tion:\201\001\n\024parameter_annotation\0222.org.jetb" +
      "rains.kotlin.serialization.ValueParamete" +
      "r\030\202\001 \003(\0132..org.jetbrains.kotlin.serializ" +
      "ation.Annotation:r\n\017type_annotation\022(.or" +
      "g.jetbrains.kotlin.serialization.Type\030\202\001" +
      " \003(\0132..org.jetbrains.kotlin.serializatio" +
      "n.Annotation:\205\001\n\031type_parameter_annotati" +
      "on\0221.org.jetbrains.kotlin.serialization." +
      "TypeParameter\030\202\001 \003(\0132..org.jetbrains.kot" +
      "lin.serialization.AnnotationB\021B\017DebugJsP",
      "rotoBuf"
    };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public org.jetbrains.kotlin.protobuf.ExtensionRegistry assignDescriptors(
            org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_org_jetbrains_kotlin_serialization_js_Classes_fieldAccessorTable = new
            org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor,
              new java.lang.String[] { "ClassName", });
          internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_org_jetbrains_kotlin_serialization_js_Library_fieldAccessorTable = new
            org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor,
              new java.lang.String[] { "Entry", "Kind", "ImportedModules", });
          internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_descriptor =
            internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor.getNestedTypes().get(0);
          internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_fieldAccessorTable = new
            org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_jetbrains_kotlin_serialization_js_Library_FileEntry_descriptor,
              new java.lang.String[] { "Path", "Content", });
          classAnnotation.internalInit(descriptor.getExtensions().get(0));
          constructorAnnotation.internalInit(descriptor.getExtensions().get(1));
          functionAnnotation.internalInit(descriptor.getExtensions().get(2));
          propertyAnnotation.internalInit(descriptor.getExtensions().get(3));
          compileTimeValue.internalInit(descriptor.getExtensions().get(4));
          enumEntryAnnotation.internalInit(descriptor.getExtensions().get(5));
          parameterAnnotation.internalInit(descriptor.getExtensions().get(6));
          typeAnnotation.internalInit(descriptor.getExtensions().get(7));
          typeParameterAnnotation.internalInit(descriptor.getExtensions().get(8));
          return null;
        }
      };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
          org.jetbrains.kotlin.serialization.DebugProtoBuf.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}