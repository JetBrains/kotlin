FILE: extended.kt
    @R|kotlin/Self|() public abstract interface SelfTypeParameterInterface<out <Self> : R|SelfTypeParameterInterface<<Self>>|> : R|kotlin/Any| {
    }
    @R|kotlin/Self|() public final class SelfTypeAsTypeParameterInExtends<out <Self> : R|SelfTypeAsTypeParameterInExtends<<Self>>|> : R|SelfTypeParameterInterface<<Self>>| {
        public constructor<out <Self> : R|SelfTypeAsTypeParameterInExtends<<Self>>|>(): R|SelfTypeAsTypeParameterInExtends<<Self>>| {
            super<R|kotlin/Any|>()
        }

        public final fun returnType(): R|<Self>| {
            ^returnType (this@R|/SelfTypeAsTypeParameterInExtends| as R|<Self>|)
        }

    }
    @R|kotlin/Self|() public final class SelfTypeWithSelfFunction<out <Self> : R|SelfTypeWithSelfFunction<<Self>>|> : R|kotlin/Any| {
        public constructor<out <Self> : R|SelfTypeWithSelfFunction<<Self>>|>(): R|SelfTypeWithSelfFunction<<Self>>| {
            super<R|kotlin/Any|>()
        }

        public final fun Self(): R|<Self>| {
            ^Self (this@R|/SelfTypeWithSelfFunction| as R|<Self>|)
        }

    }
    public abstract interface WithTypeParameter<out T> : R|kotlin/Any| {
        public abstract fun foo(): R|T|

    }
    @R|kotlin/Self|() public final class ExtendingInterfaceWithTypeParameter<out <Self> : R|ExtendingInterfaceWithTypeParameter<<Self>>|> : R|WithTypeParameter<<Self>>| {
        public constructor<out <Self> : R|ExtendingInterfaceWithTypeParameter<<Self>>|>(): R|ExtendingInterfaceWithTypeParameter<<Self>>| {
            super<R|kotlin/Any|>()
        }

        public open override fun foo(): R|<Self>| {
            ^foo (this@R|/ExtendingInterfaceWithTypeParameter| as R|<Self>|)
        }

    }
    @R|kotlin/Self|() public abstract class AbstractClassWithSelf<T, out <Self> : R|AbstractClassWithSelf<T, <Self>>|> : R|kotlin/Any| {
        public constructor<T, out <Self> : R|AbstractClassWithSelf<T, <Self>>|>(): R|AbstractClassWithSelf<T, <Self>>| {
            super<R|kotlin/Any|>()
        }

        public abstract fun self(): R|<Self>|

    }
    public final class ExtendingAbstractClassWithSelf<T> : R|AbstractClassWithSelf<T, ExtendingAbstractClassWithSelf<T>>| {
        public constructor<T>(): R|ExtendingAbstractClassWithSelf<T>| {
            super<R|AbstractClassWithSelf<T, ExtendingAbstractClassWithSelf<T>>|>()
        }

        public open override fun self(): R|ExtendingAbstractClassWithSelf<T>| {
            ^self this@R|/ExtendingAbstractClassWithSelf|
        }

    }
