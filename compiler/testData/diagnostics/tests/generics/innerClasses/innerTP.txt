package

public val inferred: Outer<kotlin.String>.Inner<kotlin.Int>
public fun factoryString(): Outer<kotlin.String>.Inner<kotlin.String>
public fun </*0*/ T, /*1*/ Y> infer(/*0*/ x: T, /*1*/ y: Y): Outer<T>.Inner<Y>
public fun main(): kotlin.Unit

public final class Outer</*0*/ E> {
    public constructor Outer</*0*/ E>()
    public final fun bar(): Outer<E>.Inner<E>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun innerFactory(): Outer<E>.Inner<kotlin.String>
    public final fun inside(): kotlin.Unit
    public final fun set(/*0*/ inner: Outer<E>.Inner<out E>): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final inner class Inner</*0*/ F> /*captured type parameters: /*1*/ E*/ {
        public constructor Inner</*0*/ F>()
        public final fun baz(): Outer<E>.Inner<kotlin.String>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final fun foo(): Outer<E>.Inner<F>
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
