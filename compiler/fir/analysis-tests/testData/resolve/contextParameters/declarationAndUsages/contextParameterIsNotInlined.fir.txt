FILE: contextParameterIsNotInlined.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun foo(a: R|kotlin/String|): R|kotlin/String| {
            ^foo R|<local>/a|
        }

    }
    public final fun noInlineRun(f: R|(A) -> kotlin/Unit|): R|kotlin/Unit| {
        R|<local>/f|.R|SubstitutionOverride<kotlin/Function1.invoke: R|kotlin/Unit|>|(R|/A.A|())
    }
    context(a: R|(A) -> kotlin/Unit|)
    public final inline fun test1(): R|kotlin/Unit| {
        R|/noInlineRun|(R|<local>/a|)
    }
    context(a: R|(A) -> kotlin/Unit|)
    public final var foo: R|kotlin/String|
        public inline get(): R|kotlin/String| {
            R|/noInlineRun|(R|<local>/a|)
            ^ String()
        }
        public inline set(value: R|kotlin/String|): R|kotlin/Unit| {
            R|/noInlineRun|(R|<local>/a|)
        }
    context(a: R|(A) -> kotlin/Unit|)
    public final var bar: R|kotlin/String|
        public inline get(): R|kotlin/String| {
            R|/noInlineRun|(R|<local>/a|)
            ^ String()
        }
        public inline set(v: R|kotlin/String|): R|kotlin/Unit| {
            R|/noInlineRun|(R|<local>/a|)
        }
    public final fun usage(): R|kotlin/Unit| {
        R|kotlin/with|<R|(A) -> kotlin/Unit|, R|kotlin/String|>(with@fun <anonymous>(a: R|A|): R|kotlin/Unit| <inline=NoInline>  {
            ^@with Unit
        }
        , <L> = with@fun R|(A) -> kotlin/Unit|.<anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|/test1|()
            R|/foo|
            ^ R|/bar|
        }
        )
    }
