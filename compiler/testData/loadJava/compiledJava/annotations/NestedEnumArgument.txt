package test

public open class NestedEnumArgument {
    public constructor NestedEnumArgument()
    @test.NestedEnumArgument.Anno(value = E.FIRST) public/*package*/ open fun foo(): kotlin.Unit

    public final annotation class Anno : kotlin.Annotation {
        public constructor Anno(/*0*/ value: test.NestedEnumArgument.E)
        public final val value: test.NestedEnumArgument.E
    }

    public final enum class E : kotlin.Enum<test.NestedEnumArgument.E!> {
        enum entry FIRST

        private constructor E()
        public final override /*1*/ /*fake_override*/ val name: kotlin.String
        public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.NestedEnumArgument.E!): kotlin.Int
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.NestedEnumArgument.E!>!

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.NestedEnumArgument.E
        public final /*synthesized*/ fun values(): kotlin.Array<test.NestedEnumArgument.E>
    }
}
