// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase}
 */
public  final class IrDeclarationBase extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrDeclarationBase, IrDeclarationBase.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase)
    IrDeclarationBaseOrBuilder {
  private IrDeclarationBase() {
    annotation_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int SYMBOL_FIELD_NUMBER = 1;
  private long symbol_;
  /**
   * <code>int64 symbol = 1 [features = { ... }</code>
   * @return Whether the symbol field is set.
   */
  @java.lang.Override
  public boolean hasSymbol() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>int64 symbol = 1 [features = { ... }</code>
   * @return The symbol.
   */
  @java.lang.Override
  public long getSymbol() {
    return symbol_;
  }
  /**
   * <code>int64 symbol = 1 [features = { ... }</code>
   * @param value The symbol to set.
   */
  private void setSymbol(long value) {
    bitField0_ |= 0x00000001;
    symbol_ = value;
  }
  /**
   * <code>int64 symbol = 1 [features = { ... }</code>
   */
  private void clearSymbol() {
    bitField0_ = (bitField0_ & ~0x00000001);
    symbol_ = 0L;
  }

  public static final int ORIGIN_NAME_FIELD_NUMBER = 2;
  private int originName_;
  /**
   * <code>int32 origin_name = 2 [features = { ... }</code>
   * @return Whether the originName field is set.
   */
  @java.lang.Override
  public boolean hasOriginName() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int32 origin_name = 2 [features = { ... }</code>
   * @return The originName.
   */
  @java.lang.Override
  public int getOriginName() {
    return originName_;
  }
  /**
   * <code>int32 origin_name = 2 [features = { ... }</code>
   * @param value The originName to set.
   */
  private void setOriginName(int value) {
    bitField0_ |= 0x00000002;
    originName_ = value;
  }
  /**
   * <code>int32 origin_name = 2 [features = { ... }</code>
   */
  private void clearOriginName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    originName_ = 0;
  }

  public static final int COORDINATES_FIELD_NUMBER = 3;
  private long coordinates_;
  /**
   * <code>int64 coordinates = 3 [features = { ... }</code>
   * @return Whether the coordinates field is set.
   */
  @java.lang.Override
  public boolean hasCoordinates() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>int64 coordinates = 3 [features = { ... }</code>
   * @return The coordinates.
   */
  @java.lang.Override
  public long getCoordinates() {
    return coordinates_;
  }
  /**
   * <code>int64 coordinates = 3 [features = { ... }</code>
   * @param value The coordinates to set.
   */
  private void setCoordinates(long value) {
    bitField0_ |= 0x00000004;
    coordinates_ = value;
  }
  /**
   * <code>int64 coordinates = 3 [features = { ... }</code>
   */
  private void clearCoordinates() {
    bitField0_ = (bitField0_ & ~0x00000004);
    coordinates_ = 0L;
  }

  public static final int FLAGS_FIELD_NUMBER = 4;
  private long flags_;
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @return Whether the flags field is set.
   */
  @java.lang.Override
  public boolean hasFlags() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @return The flags.
   */
  @java.lang.Override
  public long getFlags() {
    return flags_;
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @param value The flags to set.
   */
  private void setFlags(long value) {
    bitField0_ |= 0x00000008;
    flags_ = value;
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   */
  private void clearFlags() {
    bitField0_ = (bitField0_ & ~0x00000008);
    flags_ = 0L;
  }

  public static final int ANNOTATION_FIELD_NUMBER = 5;
  private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> annotation_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  @java.lang.Override
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> getAnnotationList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder> 
      getAnnotationOrBuilderList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  @java.lang.Override
  public int getAnnotationCount() {
    return annotation_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index) {
    return annotation_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder getAnnotationOrBuilder(
      int index) {
    return annotation_.get(index);
  }
  private void ensureAnnotationIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> tmp = annotation_;
    if (!tmp.isModifiable()) {
      annotation_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setAnnotation(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.set(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addAnnotation(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.add(value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addAnnotation(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.add(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  private void addAllAnnotation(
      java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> values) {
    ensureAnnotationIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, annotation_);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  private void clearAnnotation() {
    annotation_ = emptyProtobufList();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
   */
  private void removeAnnotation(int index) {
    ensureAnnotationIsMutable();
    annotation_.remove(index);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBaseOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>int64 symbol = 1 [features = { ... }</code>
     * @return Whether the symbol field is set.
     */
    @java.lang.Override
    public boolean hasSymbol() {
      return instance.hasSymbol();
    }
    /**
     * <code>int64 symbol = 1 [features = { ... }</code>
     * @return The symbol.
     */
    @java.lang.Override
    public long getSymbol() {
      return instance.getSymbol();
    }
    /**
     * <code>int64 symbol = 1 [features = { ... }</code>
     * @param value The symbol to set.
     * @return This builder for chaining.
     */
    public Builder setSymbol(long value) {
      copyOnWrite();
      instance.setSymbol(value);
      return this;
    }
    /**
     * <code>int64 symbol = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearSymbol() {
      copyOnWrite();
      instance.clearSymbol();
      return this;
    }

    /**
     * <code>int32 origin_name = 2 [features = { ... }</code>
     * @return Whether the originName field is set.
     */
    @java.lang.Override
    public boolean hasOriginName() {
      return instance.hasOriginName();
    }
    /**
     * <code>int32 origin_name = 2 [features = { ... }</code>
     * @return The originName.
     */
    @java.lang.Override
    public int getOriginName() {
      return instance.getOriginName();
    }
    /**
     * <code>int32 origin_name = 2 [features = { ... }</code>
     * @param value The originName to set.
     * @return This builder for chaining.
     */
    public Builder setOriginName(int value) {
      copyOnWrite();
      instance.setOriginName(value);
      return this;
    }
    /**
     * <code>int32 origin_name = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearOriginName() {
      copyOnWrite();
      instance.clearOriginName();
      return this;
    }

    /**
     * <code>int64 coordinates = 3 [features = { ... }</code>
     * @return Whether the coordinates field is set.
     */
    @java.lang.Override
    public boolean hasCoordinates() {
      return instance.hasCoordinates();
    }
    /**
     * <code>int64 coordinates = 3 [features = { ... }</code>
     * @return The coordinates.
     */
    @java.lang.Override
    public long getCoordinates() {
      return instance.getCoordinates();
    }
    /**
     * <code>int64 coordinates = 3 [features = { ... }</code>
     * @param value The coordinates to set.
     * @return This builder for chaining.
     */
    public Builder setCoordinates(long value) {
      copyOnWrite();
      instance.setCoordinates(value);
      return this;
    }
    /**
     * <code>int64 coordinates = 3 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearCoordinates() {
      copyOnWrite();
      instance.clearCoordinates();
      return this;
    }

    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return instance.hasFlags();
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return The flags.
     */
    @java.lang.Override
    public long getFlags() {
      return instance.getFlags();
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @param value The flags to set.
     * @return This builder for chaining.
     */
    public Builder setFlags(long value) {
      copyOnWrite();
      instance.setFlags(value);
      return this;
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return This builder for chaining.
     */
    public Builder clearFlags() {
      copyOnWrite();
      instance.clearFlags();
      return this;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> getAnnotationList() {
      return java.util.Collections.unmodifiableList(
          instance.getAnnotationList());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return instance.getAnnotationCount();
    }/**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index) {
      return instance.getAnnotation(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder setAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.setAnnotation(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder setAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.setAnnotation(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder addAnnotation(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.addAnnotation(value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder addAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.addAnnotation(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder addAnnotation(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.addAnnotation(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder addAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.addAnnotation(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> values) {
      copyOnWrite();
      instance.addAllAnnotation(values);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder clearAnnotation() {
      copyOnWrite();
      instance.clearAnnotation();
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 5;</code>
     */
    public Builder removeAnnotation(int index) {
      copyOnWrite();
      instance.removeAnnotation(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "symbol_",
            "originName_",
            "coordinates_",
            "flags_",
            "annotation_",
            org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.class,
          };
          java.lang.String info =
              "\u0004\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0001\u0004\u0001\u1502\u0000\u0002" +
              "\u1504\u0001\u0003\u1502\u0002\u0004\u1002\u0003\u0005\u041b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase DEFAULT_INSTANCE;
  static {
    IrDeclarationBase defaultInstance = new IrDeclarationBase();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrDeclarationBase.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrDeclarationBase> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrDeclarationBase> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
