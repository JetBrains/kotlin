package

@kotlin.OptIn(markerClass = {kotlin.ExperimentalStdlibApi::class}) public fun foo(/*0*/ values: kotlin.enums.EnumEntries<E> = ...): kotlin.Unit
public fun test(): kotlin.Unit

public final enum class E : kotlin.Enum<E> {
    private constructor E()
    @kotlin.internal.IntrinsicConstEvaluation public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: E): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<E!>!
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ val entries: kotlin.enums.EnumEntries<E>
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): E
    public final /*synthesized*/ fun values(): kotlin.Array<E>
}

@kotlin.OptIn(markerClass = {kotlin.ExperimentalStdlibApi::class}) public final data class Some {
    public constructor Some(/*0*/ values: kotlin.enums.EnumEntries<E> = ...)
    public final val values: kotlin.enums.EnumEntries<E>
    public final operator /*synthesized*/ fun component1(): kotlin.enums.EnumEntries<E>
    public final /*synthesized*/ fun copy(/*0*/ values: kotlin.enums.EnumEntries<E> = ...): Some
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}

