/generics.kt:(52,65): info: Generated Viper text for genericMethod:
field public$backing_field_t: Ref

method class_Box$fun_genericMethod$fun_take$T_class_global$class_Box$NT_Any$return$NT_Any(this: Ref,
  local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$nullable(dom$RuntimeType$anyType()))
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(this), dom$RuntimeType$T_class_global$class_Box())
  inhale acc(T_class_global$class_Box(this), wildcard)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$anyType()))
  ret$0 := local$x
  goto label$ret$0
  label label$ret$0
}

/generics.kt:(107,116): info: Generated Viper text for createBox:
field public$backing_field_t: Ref

method class_Box$constructor$fun_take$NT_Any$return$T_class_global$class_Box(local$t: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_Box())
  ensures acc(T_class_global$class_Box(ret), wildcard)


method global$fun_createBox$fun_take$$return$T_Int() returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var local0$boolBox: Ref
  var local0$b: Ref
  var anonymous$0: Ref
  var local0$intBox: Ref
  var anonymous$1: Ref
  local0$boolBox := class_Box$constructor$fun_take$NT_Any$return$T_class_global$class_Box(dom$RuntimeType$boolToRef(true))
  inhale acc(local0$boolBox.public$backing_field_t, write)
  anonymous$0 := local0$boolBox.public$backing_field_t
  exhale acc(local0$boolBox.public$backing_field_t, write)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$nullable(dom$RuntimeType$anyType()))
  local0$b := anonymous$0
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local0$b), dom$RuntimeType$boolType())
  local0$intBox := class_Box$constructor$fun_take$NT_Any$return$T_class_global$class_Box(dom$RuntimeType$intToRef(2))
  inhale acc(local0$intBox.public$backing_field_t, write)
  anonymous$1 := local0$intBox.public$backing_field_t
  exhale acc(local0$intBox.public$backing_field_t, write)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$1), dom$RuntimeType$nullable(dom$RuntimeType$anyType()))
  ret$0 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  goto label$ret$0
  label label$ret$0
}

/generics.kt:(227,242): info: Generated Viper text for setGenericField:
field public$backing_field_t: Ref

method class_Box$constructor$fun_take$NT_Any$return$T_class_global$class_Box(local$t: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_Box())
  ensures acc(T_class_global$class_Box(ret), wildcard)


method global$fun_setGenericField$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$box: Ref
  ret$0 := dom$RuntimeType$unitValue()
  local0$box := class_Box$constructor$fun_take$NT_Any$return$T_class_global$class_Box(dom$RuntimeType$intToRef(3))
  inhale acc(local0$box.public$backing_field_t, write)
  local0$box.public$backing_field_t := dom$RuntimeType$intToRef(5)
  exhale acc(local0$box.public$backing_field_t, write)
  label label$ret$0
}

/generics.kt:(293,303): info: Generated Viper text for genericFun:
method global$fun_genericFun$fun_take$NT_Any$return$NT_Any(local$t: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$nullable(dom$RuntimeType$anyType()))
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$t), dom$RuntimeType$nullable(dom$RuntimeType$anyType()))
  ret$0 := local$t
  goto label$ret$0
  label label$ret$0
}

/generics.kt:(322,337): info: Generated Viper text for callGenericFunc:
method global$fun_callGenericFunc$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$x: Ref
  var anonymous$0: Ref
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := global$fun_genericFun$fun_take$NT_Any$return$NT_Any(dom$RuntimeType$intToRef(3))
  local0$x := anonymous$0
  label label$ret$0
}

method global$fun_genericFun$fun_take$NT_Any$return$NT_Any(local$t: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$nullable(dom$RuntimeType$anyType()))


/generics.kt:(375,395): info: Generated Viper text for genericAsIfCondition:
field public$backing_field_t: Ref

method global$fun_genericAsIfCondition$fun_take$T_class_global$class_Box$return$T_Int(local$box: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var anonymous$0: Ref
  var anonymous$1: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$box), dom$RuntimeType$T_class_global$class_Box())
  inhale acc(T_class_global$class_Box(local$box), wildcard)
  inhale acc(local$box.public$backing_field_t, write)
  anonymous$1 := local$box.public$backing_field_t
  exhale acc(local$box.public$backing_field_t, write)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$1), dom$RuntimeType$nullable(dom$RuntimeType$anyType()))
  anonymous$0 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$boolType())
  if (dom$RuntimeType$boolFromRef(anonymous$0)) {
    ret$0 := dom$RuntimeType$intToRef(20)
  } else {
    ret$0 := dom$RuntimeType$intToRef(10)}
  goto label$ret$0
  label label$ret$0
}
