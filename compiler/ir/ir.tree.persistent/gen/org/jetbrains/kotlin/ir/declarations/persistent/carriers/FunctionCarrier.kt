/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.ir.declarations.persistent.carriers

import org.jetbrains.kotlin.descriptors.DescriptorVisibility
import org.jetbrains.kotlin.ir.declarations.IrAttributeContainer
import org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin
import org.jetbrains.kotlin.ir.declarations.IrDeclarationParent
import org.jetbrains.kotlin.ir.declarations.IrTypeParameter
import org.jetbrains.kotlin.ir.declarations.IrValueParameter
import org.jetbrains.kotlin.ir.declarations.MetadataSource
import org.jetbrains.kotlin.ir.expressions.IrBody
import org.jetbrains.kotlin.ir.expressions.IrConstructorCall
import org.jetbrains.kotlin.ir.symbols.IrPropertySymbol
import org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol
import org.jetbrains.kotlin.ir.types.IrType

// Auto-generated by compiler/ir/ir.tree.persistent/generator/src/org/jetbrains/kotlin/ir/persistentIrGenerator/Main.kt. DO NOT EDIT!

internal interface FunctionCarrier : DeclarationCarrier{
    val returnTypeFieldField: IrType
    val dispatchReceiverParameterField: IrValueParameter?
    val extensionReceiverParameterField: IrValueParameter?
    val bodyField: IrBody?
    val metadataField: MetadataSource?
    val visibilityField: DescriptorVisibility
    val typeParametersField: List<IrTypeParameter>
    val valueParametersField: List<IrValueParameter>
    val correspondingPropertySymbolField: IrPropertySymbol?
    val overriddenSymbolsField: List<IrSimpleFunctionSymbol>
    val attributeOwnerIdField: IrAttributeContainer

    override fun clone(): FunctionCarrier {
        return FunctionCarrierImpl(
            lastModified,
            parentField,
            originField,
            annotationsField,
            returnTypeFieldField,
            dispatchReceiverParameterField,
            extensionReceiverParameterField,
            bodyField,
            metadataField,
            visibilityField,
            typeParametersField,
            valueParametersField,
            correspondingPropertySymbolField,
            overriddenSymbolsField,
            attributeOwnerIdField
        )
    }
}

internal class FunctionCarrierImpl(
    override val lastModified: Int,
    override val parentField: IrDeclarationParent?,
    override val originField: IrDeclarationOrigin,
    override val annotationsField: List<IrConstructorCall>,
    override val returnTypeFieldField: IrType,
    override val dispatchReceiverParameterField: IrValueParameter?,
    override val extensionReceiverParameterField: IrValueParameter?,
    override val bodyField: IrBody?,
    override val metadataField: MetadataSource?,
    override val visibilityField: DescriptorVisibility,
    override val typeParametersField: List<IrTypeParameter>,
    override val valueParametersField: List<IrValueParameter>,
    override val correspondingPropertySymbolField: IrPropertySymbol?,
    override val overriddenSymbolsField: List<IrSimpleFunctionSymbol>,
    override val attributeOwnerIdField: IrAttributeContainer
) : FunctionCarrier
