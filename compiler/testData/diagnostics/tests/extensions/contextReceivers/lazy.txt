package

public fun </*0*/ T> f(/*0*/ lazy1: Lazy<kotlin.Int>, /*1*/ lazy2: Lazy<kotlin.CharSequence>, /*2*/ lazyT: Lazy<T>, /*3*/ lazyLazyT: Lazy<Lazy<T>>): kotlin.Unit
context(Lazy<kotlin.Int>, Lazy<kotlin.CharSequence>) public fun test1(): kotlin.Unit
context(Lazy<T>) public fun </*0*/ T> Lazy<kotlin.Int>.test2(): kotlin.Unit
context(Lazy<Lazy<T>>) public fun </*0*/ T> Lazy<kotlin.Int>.test3(): kotlin.Unit

public interface Lazy</*0*/ T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
