RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] main.kt
    public open [ResolvedTo(RAW_FIR)] class KotlinClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): JavaClass? { LAZY_BLOCK }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(RAW_FIR)] class KotlinClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): JavaClass? { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(RAW_FIR)] class KotlinClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun foo(): JavaClass? { LAZY_BLOCK }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(RAW_FIR)] class KotlinClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(COMPANION_GENERATION)] fun foo(): JavaClass? { LAZY_BLOCK }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(SUPER_TYPES)] class KotlinClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(SUPER_TYPES)] fun foo(): JavaClass? { LAZY_BLOCK }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(TYPES)] class KotlinClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(TYPES)] fun foo(): R|JavaClass?| { LAZY_BLOCK }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(STATUS)] class KotlinClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] fun foo(): R|JavaClass?| { LAZY_BLOCK }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(STATUS)] class KotlinClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun foo(): R|JavaClass?| { LAZY_BLOCK }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(STATUS)] class KotlinClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(CONTRACTS)] fun foo(): R|JavaClass?| { LAZY_BLOCK }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(STATUS)] class KotlinClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun foo(): R|JavaClass?| { LAZY_BLOCK }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(STATUS)] class KotlinClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] fun foo(): R|JavaClass?| { LAZY_BLOCK }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(STATUS)] class KotlinClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo(): R|JavaClass?| { LAZY_BLOCK }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] main.kt
    public open [ResolvedTo(STATUS)] class KotlinClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|JavaClass?| {
            ^foo Null(null)
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] main.kt
    public open [ResolvedTo(BODY_RESOLVE)] class KotlinClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=KotlinClass] constructor(): R|KotlinClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|JavaClass?| {
            ^foo Null(null)
        }

    }
