package

public fun takeInt(/*0*/ x: kotlin.Int): kotlin.Unit
public fun test(): kotlin.Unit

public object ModAndRem {
    private constructor ModAndRem()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun mod(/*0*/ x: kotlin.Int): kotlin.Int
    public final operator fun rem(/*0*/ x: kotlin.Int): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object ModAssignAndRemAssign {
    private constructor ModAssignAndRemAssign()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun modAssign(/*0*/ x: kotlin.String): kotlin.Unit
    public final operator fun remAssign(/*0*/ x: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object OnlyRem {
    private constructor OnlyRem()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun rem(/*0*/ x: kotlin.Int): kotlin.Unit
    public final operator fun remAssign(/*0*/ x: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object RemAndModAssign {
    private constructor RemAndModAssign()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun modAssign(/*0*/ x: kotlin.Int): kotlin.Unit
    public final operator fun rem(/*0*/ x: kotlin.Int): RemAndModAssign
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
