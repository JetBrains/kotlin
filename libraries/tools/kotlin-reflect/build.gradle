import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

description = 'Kotlin Full Reflection Library'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'

configureJvmProject(project)
configurePublishing(project)


def core = "${rootDir}/../core"
def annotationsSrc = "${buildDir}/annotations"
def relocatedCoreSrc = "${buildDir}/core-relocated"

sourceSets {
    main {
        java {
            srcDir annotationsSrc
            srcDir "${core}/descriptor.loader.java/src"
            srcDir "${core}/descriptors/src"
            srcDir "${core}/descriptors.runtime/src"
            srcDir "${core}/deserialization/src"
            srcDir "${core}/util.runtime/src"

            srcDir "${core}/reflection.jvm/src"
        }
    }
}

configurations {
    proguardDeps
    shadows
    compileOnly.extendsFrom(shadows)
}

dependencies {
    proguardDeps project(':kotlin-stdlib')
    shadows 'javax.inject:javax.inject:1'
    shadows project(path: ':tools:protobuf-lite')

    compile project(':kotlin-stdlib')
}

task copyAnnotations(type: Sync) {
    // copy just two missing annotations
    from("${core}/runtime.jvm/src") {
        include "**/Mutable.java"
        include "**/ReadOnly.java"
    }
    into(annotationsSrc)
    includeEmptyDirs false
}


compileJava {
    dependsOn copyAnnotations
    // options.compilerArgs.addAll(["-Xlint:unchecked"])
}

compileKotlin {
    dependsOn copyAnnotations
    kotlinOptions {
        freeCompilerArgs = ["-version",
                            "-Xallow-kotlin-package",
                            "-module-name", "kotlin-reflection",
                            "-Xdump-declarations-to", "${buildDir}/reflect-declarations.json"]
    }
}

kotlin.experimental.coroutines "enable"


task reflectShadowJar(type: ShadowJar) {
    classifier = 'shadow'
    version = null
    manifestAttributes(manifest, project, 'Main')
    manifest.attributes 'Class-Path': 'kotlin-stdlib.jar'

    from (sourceSets.main.output)
    from ("${core}/descriptor.loader.java/src") {
        include 'META-INF/services/**'
    }
    from ("${core}/deserialization/src") {
        include 'META-INF/services/**'
    }

    configurations = [project.configurations.shadows]
    relocate 'org.jetbrains.kotlin', 'kotlin.reflect.jvm.internal.impl'
    relocate 'javax.inject', 'kotlin.reflect.jvm.internal.impl.javax.inject'
    mergeServiceFiles()
}

createScriptTask(project, "stripMetadata") {
    dependsOn reflectShadowJar
    def inputJar = reflectShadowJar.archivePath
    def outputJar = "${libsDir}/kotlin-reflect-stripped.jar"
    inputs.file(inputJar)
    outputs.file(outputJar)
    args += [
            "${rootDir}/../generators/infrastructure/strip-kotlin-annotations.kts",
            "kotlin/Metadata",
            "kotlin/reflect/jvm/internal/impl/.*",
            inputJar,
            outputJar
    ]
}


def mainArchiveName = "${archivesBaseName}-${project.version}.jar"
def outputJarPath = "${libsDir}/${mainArchiveName}"
def rtJar = ['jre/lib/rt.jar', '../Classes/classes.jar'].collect { new File(JDK_16, it) }.find { it.isFile() }

task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn stripMetadata
    inputs.files(stripMetadata.outputs.files)
    outputs.file(outputJarPath)

    injars stripMetadata.outputs.files
    outjars outputJarPath

    libraryjars configurations.proguardDeps.files
    libraryjars rtJar

    configuration "${core}/reflection.jvm/reflection.pro"
}


task relocateCoreSources(type: Copy) {
    def commonPackage = "org/jetbrains/kotlin"

    doFirst {
        delete(relocatedCoreSrc)
    }

    from "${core}/descriptor.loader.java/src/${commonPackage}"
    from "${core}/descriptors/src/${commonPackage}"
    from "${core}/descriptors.runtime/src/${commonPackage}"
    from "${core}/deserialization/src/${commonPackage}"
    from "${core}/util.runtime/src/${commonPackage}"

    into "${relocatedCoreSrc}/kotlin/reflect/jvm/internal/impl"

    doLast {
        ant.replaceregexp(
                match: 'org\\.jetbrains\\.kotlin',
                replace: 'kotlin.reflect.jvm.internal.impl',
                flags: 'g'
        ) {
            fileset(dir: relocatedCoreSrc)
        }
    }
}

jar.enabled false

task relocatedSourcesJar(type: Jar) {
    dependsOn relocateCoreSources
    classifier 'sources'
    from relocatedCoreSrc
    from "${core}/reflection.jvm/src"
}

def artifactJar = [file: file(outputJarPath), builtBy: proguard, name: archivesBaseName]

artifacts {
    runtime artifactJar
    archives artifactJar
    archives relocatedSourcesJar
    archives javadocJar
}

dist {
    from(proguard)
    from(relocatedSourcesJar)
}
