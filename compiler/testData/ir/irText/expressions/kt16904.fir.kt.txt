abstract class A {
  val x: B
    field = B()
    get

  var y: Int
    field = 0
    get
    set

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class B {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun plusAssign(x: Int) {
  }

}

class Test1 : A {
  constructor() {
    super/*A*/()
    /* <init>() */

    <this>.<get-x>().plusAssign(x = 42)
    <this>.<set-y>(<set-?> = <this>.<get-y>().plus(other = 42))
  }

}

class Test2 : J {
  init {
    <this>(super<Test2>).#field = 42
  }

  constructor() /* primary */ {
    super/*J*/()
    /* <init>() */

  }

}

