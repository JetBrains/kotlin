apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven-publish'

group 'org.jetbrains.qa.combompp'
version publishing_version

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

def complexLibAttribute = Attribute.of('org.jetbrains.qa.complexlib', String)

kotlin {
    jvmToolchain(8)
    jvm("jvm18") {
        withJava()
        attributes { attribute(complexLibAttribute, 'jvmWithJava') }

        compilations.all {
            kotlinOptions.jvmTarget = "1.8"
        }
    }
    js() {
        nodejs()
    }

    linuxX64('linux') {
        // Binary configuration
        binaries {
            // Creating static library with a custom name.
            staticLib('customNameForLinuxLib') {
                outputDirectory = file("customNameForLinuxLib") // outputDir is a `val` property.
                linkTask.destinationDirectory = file("customNameForLinuxLib")
            }
        }
    }

    macosX64('macos') {
        // Binary configuration
        binaries {
            // Creating static library with a custom name.
            staticLib('customNameForMacosLib') {
                outputDirectory = file("customNameForMacosLib") // outputDir is a `val` property.
                linkTask.destinationDirectory = file("customNameForMacosLib")
            }
        }
    }

    iosX64("dummyiOS") {
        binaries {
            // KT-29395 fix
            framework {
                outputDirectory = file("fooDummyiOS") // outputDir is a `val` property.
                linkTask.destinationDirectory = file("fooDummyiOS")
            }
        }
    }

    // inline classes are enabled below
    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs += ["-progressive", "-XXLanguage:+SamConversionForKotlinFunctions", "-opt-in=kotlin.ExperimentalMultiplatform"]
            }
        }
    }

    sourceSets {

        commonMain {
            dependencies { }
        }
        commonTest {
            dependencies { }
        }

        // intermediate between commonMain and jsJvm18Main
        kt27816Main {
            dependsOn commonMain
        }

        // creating a diamond
        jsJvm18iOSMain {
            kotlin.srcDir('src/jsJvm18iOSMain/cstmSrc')

            // dependsOn commonMain
            dependsOn kt27816Main // an additional source set on the way to commonMain
            dependencies {
                //api "com.example:tmp-new-mpp-0312:0.0.1"
            }
        }

        jsJvm18iOSTest {
            dependsOn commonTest
            dependencies { }
        }
        jsLinuxMain {
            dependsOn commonMain
        }

        jsLinuxTest {
            dependsOn commonTest
        }

        // setting up the targets source sets
        jvm18Main {
            kotlin.srcDir('src/jvm18Main/customSrc')

            dependencies {
                // not in `common`, please: https://youtrack.jetbrains.com/issue/KT-28537
                api project(":api-jvm")
            }

            // connecting to the diamond
            dependsOn jsJvm18iOSMain
        }
        jvm18Test {
            dependencies { }

            // connecting to the diamond
            dependsOn jsJvm18iOSTest
        }

        jsMain {
            dependencies {
                npm("left-pad", "*")
            }

            // connecting to the diamond
            dependsOn jsJvm18iOSMain
            dependsOn jsLinuxMain
        }
        jsTest {
            dependencies {
                npm("left-pad", "*")
            }

            // connecting to the diamond
            dependsOn jsJvm18iOSTest
            dependsOn jsLinuxTest
        }
        linuxMain {
            dependencies { }

            // connecting to the diamond
            dependsOn jsLinuxMain
        }
        linuxTest {
            dependencies { }

            // connecting to the diamond
            dependsOn jsLinuxTest
        }
        macosMain {
            dependencies { }
        }
        macosTest {
            dependencies { }
        }
        dummyiOSMain {
            // connecting to the diamond
            dependsOn jsJvm18iOSMain
            dependencies { }
        }
        dummyiOSTest {
            dependsOn jsJvm18iOSTest

            dependencies { }
        }
    }
}
kotlin.sourceSets.all {
    it.languageSettings.enableLanguageFeature("InlineClasses")
}