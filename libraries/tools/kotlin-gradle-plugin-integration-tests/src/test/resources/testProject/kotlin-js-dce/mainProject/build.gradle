import org.jetbrains.kotlin.gradle.targets.js.npm.NpmProjectKt
import org.jetbrains.kotlin.gradle.targets.js.npm.NpmProjectModules

plugins {
    id("org.jetbrains.kotlin.js")
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation project(":libraryProject")
    implementation "org.mozilla:rhino:1.7.7.1"
}

kotlin {
    js {
        binaries.executable()
        browser()

        rootProject.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootPlugin) {
            def nodeJsExecutable = rootProject.extensions.findByType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec)
            .executable

            def mainCompilation = compilations["main"]

            tasks.register("runWebpack", Exec) {
                dependsOn(tasks.named('browserProductionWebpack'))

                workingDir = "${rootProject.buildDir}/js/packages/kotlin-js-dce-mainProject"

                def npmProject = NpmProjectKt.getNpmProject(mainCompilation)

                doFirst {
                    def modules = new NpmProjectModules(npmProject.dir.get().getAsFile(), [], [], [])
                    it.workingDir(npmProject.dir)
                    it.executable(nodeJsExecutable.get())
                    it.args = [modules.require("webpack/bin/webpack.js")]
                }
            }

            tasks.named("assemble") {
                dependsOn("runWebpack")
            }
        }
    }
}

tasks.register('runRhino', JavaExec) {
    dependsOn(tasks.named('processDceKotlinJs'))
    classpath = configurations.runtimeClasspath
    workingDir = "${buildDir}"
    mainClass = 'org.mozilla.javascript.tools.shell.Main'
    args = ["-opt", "-1",
            "-f", "kotlin-js-min/kotlin.js",
            "-f", "kotlin-js-min/kotlin-js-dce-libraryProject.js",
            "-f", "kotlin-js-min/kotlin-js-dce-mainProject.js",
            "-f", "../check.js"]
}
