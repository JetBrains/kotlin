KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtImplicitReceiverValue:
        symbol = KtReceiverParameterSymbol:
          annotationsList: []
          origin: SOURCE
          owningCallableSymbol: KtAnonymousFunctionSymbol(<local>/<no name provided>)
          type: KtUsualClassType:
            annotationsList: []
            ownTypeArguments: [
              KtUsualClassType:
                annotationsList: []
                ownTypeArguments: []
                type: kotlin/String
            ]
            type: test/Target<kotlin/String>
        type = test.Target<kotlin.String>
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = test/Target.add(<dispatch receiver>: test.Target<T>, t: T): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = t
            receiverType = null
            returnType = kotlin.String
            symbol = t: T
            callableIdIfNonLocal = null
        ]
        callableIdIfNonLocal = test/Target.add
    typeArgumentsMapping = {}
    argumentMapping = {
      s -> (KtVariableLikeSignature:
        name = t
        receiverType = null
        returnType = kotlin.String
        symbol = t: T
        callableIdIfNonLocal = null)
    }
  isInBestCandidates = true