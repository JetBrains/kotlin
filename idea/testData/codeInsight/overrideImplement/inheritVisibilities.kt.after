open class A() {
    protected open fun protectedFun() { }
    internal open fun internalFun() {}
    public open fun publicFun() {}
}

interface B {
   protected open val protectedProperty : Int
   internal open val internalProperty : Int
   public open val publicProperty : Int
}

class C : A(), B {
    override fun equals(other: Any?): Boolean {
        <selection><caret>return super<A>.equals(other)</selection>
    }

    override fun hashCode(): Int {
        return super<A>.hashCode()
    }

    override fun internalFun() {
        super<A>.internalFun()
    }

    override val internalProperty: Int
        get() = throw UnsupportedOperationException()

    override fun protectedFun() {
        super<A>.protectedFun()
    }

    override val protectedProperty: Int
        get() = throw UnsupportedOperationException()

    override fun publicFun() {
        super<A>.publicFun()
    }

    override val publicProperty: Int
        get() = throw UnsupportedOperationException()

    override fun toString(): String {
        return super<A>.toString()
    }
}
