abstract class A : Java1, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class B : Java1, KotlinInterface {
  override val a: Int
    field = a
    override get

  constructor(a: Int) /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun bar(): Int {
    return 1
  }

  override fun foo(t: Int) {
  }

}

interface KotlinInterface {
  abstract fun bar(): Int

  abstract fun foo(t: Int)

  abstract val a: Int
    abstract get

}

fun test(a: A, b: B) {
  a.<get-a>() /*~> Unit */
  a.foo(t = 1)
  a.bar() /*~> Unit */
  b.<get-a>() /*~> Unit */
  b.foo(t = 1)
  b.bar() /*~> Unit */
}
