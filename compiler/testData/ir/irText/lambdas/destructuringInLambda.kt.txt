var fn: Function1<A, Int>
  field = local fun <anonymous>(<name for destructuring parameter 0>: A): Int {
    val y: Int = <name for destructuring parameter 0>.component2()
    return 42.plus(other = y)
  }

  get
  set

data class A {
  val x: Int
    field = x
    get

  val y: Int
    field = y
    get

  constructor(x: Int, y: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): Int {
    return <this>.#x
  }

  operator fun component2(): Int {
    return <this>.#y
  }

  fun copy(x: Int = <this>.#x, y: Int = <this>.#y): A {
    return A(x = x, y = y)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is A -> return false
    }
    val tmp_0: A = other as A
    when {
      EQEQ(arg0 = <this>.#x, arg1 = tmp_0.#x).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#y, arg1 = tmp_0.#y).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    var result: Int = <this>.#x.hashCode()
    result = result.times(other = 31).plus(other = <this>.#y.hashCode())
    return result
  }

  override fun toString(): String {
    return "A(" + "x=" + <this>.#x + ", " + "y=" + <this>.#y + ")"
  }

}

