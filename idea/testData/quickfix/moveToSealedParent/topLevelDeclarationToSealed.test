// FILE: DerivedOutsideOfPackage.before.kt
// "Move Derived to the package/module of SomeSealedClass" "true"
// ERROR: Inheritor of sealed class or interface declared in package <root> but it must be in package foo where base class is declared
// COMPILER_ARGUMENTS: -XXLanguage:+SealedInterfaces -XXLanguage:+AllowSealedInheritorsInDifferentFilesOfSamePackage

import foo.SomeSealedClass

class Derived: <caret>SomeSealedClass()
class ArbitraryClass


// FILE: foo/SealedDeclarations.kt
package foo

sealed class SomeSealedClass


// FILE: DerivedOutsideOfPackage.after.kt
// "Move Derived to the package/module of SomeSealedClass" "true"
// ERROR: Inheritor of sealed class or interface declared in package <root> but it must be in package foo where base class is declared
// COMPILER_ARGUMENTS: -XXLanguage:+SealedInterfaces -XXLanguage:+AllowSealedInheritorsInDifferentFilesOfSamePackage

import foo.SomeSealedClass

<caret>class ArbitraryClass


