abstract class A<T : Any?> : Java1<T> {
  constructor() /* primary */ {
    super/*Java1*/<@FlexibleNullability T?>()
    /* <init>() */

  }

}

class B<T : Any?> : Java1<T> {
  override val entries: MutableSet<MutableEntry<T, T>>
    field = entries
    override get

  constructor(entries: MutableSet<MutableEntry<T, T>>) /* primary */ {
    super/*Java1*/<@FlexibleNullability T?>()
    /* <init>() */

  }

  override fun put(key: T, value: T): T? {
    return null
  }

}

fun test(a: A<Boolean>, b: B<Boolean?>) {
  a.<get-size>() /*~> Unit */
  a.set<@FlexibleNullability Boolean?, @FlexibleNullability Boolean?>(key = true, value = true)
  a.put(key = null, value = null) /*~> Unit */
  a.get(key = true) /*~> Unit */
  a.get(key = null) /*~> Unit */
  a.remove(key = null) /*~> Unit */
  a.remove(key = true) /*~> Unit */
  b.<get-size>() /*~> Unit */
  b.put(key = false, value = false) /*~> Unit */
  b.put(key = null, value = null) /*~> Unit */
  b.set<Boolean?, Boolean?>(key = null, value = null)
  b.set<Boolean?, Boolean?>(key = true, value = true)
  b.get(key = null) /*~> Unit */
  b.get(key = true) /*~> Unit */
  b.remove(key = null) /*~> Unit */
  b.remove(key = true) /*~> Unit */
}
