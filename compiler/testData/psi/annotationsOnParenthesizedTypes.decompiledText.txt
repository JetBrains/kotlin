A.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  @kotlin.annotation.Target public final annotation class A public constructor() : kotlin.Annotation {
  }

AnnotationsOnParenthesizedTypes.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  public final class AnnotationsOnParenthesizedTypes public constructor() {
      public final val lambdaType: @A () -> C /* compiled code */ /* hasBackingField: true */

      public final val lambdaParameter: (@A C) -> C /* compiled code */ /* hasBackingField: true */

      public final val lambdaReturnValue: () -> @A C /* compiled code */ /* hasBackingField: true */

      public final val lambdaReceiver: (@A C).() -> C /* compiled code */ /* hasBackingField: true */

      public final val lambdaTypeWithNullableReceiver: (@A C?).() -> C /* compiled code */ /* hasBackingField: true */

      public final fun B<@A C>.receiverArgument(): kotlin.Unit { /* compiled code */ }

      public final fun parameter(a: @A C): kotlin.Unit { /* compiled code */ }

      public final fun parameterArgument(a: B<@A C>): kotlin.Unit { /* compiled code */ }

      public final fun returnValue(): @A C { /* compiled code */ }

      public final fun <T> returnTypeParameterValue(): @A T { /* compiled code */ }

      public final fun returnArgument(): B<@A C> { /* compiled code */ }
  }

B.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  public interface B<T> {
  }

C.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  public interface C {
  }
