KtFile: 'ClassNameBeforeOneUnsresolvedClassWithTwoResolvedWithDot.kt'
  NO_CANDIDATES

KtPackageDirective(0,0): ''
  NO_CANDIDATES

KtImportList(0,0): ''
  NO_CANDIDATES

KtClass(0,27): 'class Foo {'
  NO_CANDIDATES

KtClassBody(10,27): '{'
  NO_CANDIDATES

KtClass(16,25): 'class Bar'
  NO_CANDIDATES

KtClass(29,67): 'class C {'
  NO_CANDIDATES

KtClassBody(37,67): '{'
  NO_CANDIDATES

KtProperty(43,65): 'val prop: Foo.Bar.Baz.'
  NO_CANDIDATES

KtTypeReference(53,65): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(53,65): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(53,64): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(53,60): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(53,56): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(53,56): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(57,60): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(61,64): 'Baz'
  NO_CANDIDATES

KtNamedFunction(69,118): 'fun testFun() {'
  NO_CANDIDATES

KtParameterList(80,82): '()'
  NO_CANDIDATES

KtBlockExpression(83,118): '{'
  NO_CANDIDATES

KtProperty(89,116): 'val localProp: Foo.Bar.Baz.'
  NO_CANDIDATES

KtTypeReference(104,116): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(104,116): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(104,115): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(104,111): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(104,107): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(104,107): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(108,111): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(112,115): 'Baz'
  NO_CANDIDATES

KtNamedFunction(120,156): 'fun <T> take(action: (T) -> Unit) {}'
  NO_CANDIDATES

KtTypeParameterList(124,127): '<T>'
  NO_CANDIDATES

KtTypeParameter(125,126): 'T'
  NO_CANDIDATES

KtParameterList(132,153): '(action: (T) -> Unit)'
  NO_CANDIDATES

KtParameter(133,152): 'action: (T) -> Unit'
  NO_CANDIDATES

KtTypeReference(141,152): '(T) -> Unit'
  NO_CANDIDATES

KtFunctionType(141,152): '(T) -> Unit'
  NO_CANDIDATES

KtParameterList(141,144): '(T)'
  NO_CANDIDATES

KtParameter(142,143): 'T'
  NO_CANDIDATES

KtTypeReference(142,143): 'T'
  NO_CANDIDATES

KtUserType(142,143): 'T'
  NO_CANDIDATES

KtNameReferenceExpression(142,143): 'T'
  NO_CANDIDATES

KtTypeReference(148,152): 'Unit'
  NO_CANDIDATES

KtUserType(148,152): 'Unit'
  NO_CANDIDATES

KtNameReferenceExpression(148,152): 'Unit'
  NO_CANDIDATES

KtBlockExpression(154,156): '{}'
  NO_CANDIDATES

KtProperty(158,210): 'val prop = take {'
  NO_CANDIDATES

KtCallExpression(169,210): 'take {'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar.Baz. ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
          symbol = action: kotlin.Function1<T, kotlin.Unit>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
              symbol = action: kotlin.Function1<T, kotlin.Unit>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<ERROR CLASS: Incomplete user type, Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(169,173): 'take'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar.Baz. ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
          symbol = action: kotlin.Function1<T, kotlin.Unit>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
              symbol = action: kotlin.Function1<T, kotlin.Unit>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<ERROR CLASS: Incomplete user type, Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>
    isInBestCandidates = true

KtLambdaArgument(174,210): '{'
  NO_CANDIDATES

KtLambdaExpression(174,210): '{'
  NO_CANDIDATES

KtFunctionLiteral(174,210): '{'
  NO_CANDIDATES

KtParameterList(180,205): 'lambdaParam: Foo.Bar.Baz.'
  NO_CANDIDATES

KtParameter(180,205): 'lambdaParam: Foo.Bar.Baz.'
  NO_CANDIDATES

KtTypeReference(193,205): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(193,205): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(193,204): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(193,200): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(193,196): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(193,196): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(197,200): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(201,204): 'Baz'
  NO_CANDIDATES

KtBlockExpression(209,209): ''
  NO_CANDIDATES