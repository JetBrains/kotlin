KT element: KtClass
FIR element: FirRegularClassImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
public open [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingScriptKey=FirScriptSymbol <script-class.kts>] class Builder : R|kotlin/Any| {
    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] constructor(): R|Builder| {
        super<R|kotlin/Any|>()
    }

    public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = LAZY_EXPRESSION
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
        public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

    public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

    public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-class.kts>] class NestedBuilder : Builder {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedBuilder] constructor(): R|Builder.NestedBuilder| {
            LAZY_super<Builder>
        }

    }

}

FIR FILE:
FILE: [ResolvedTo(IMPORTS)] class.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-class.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingScriptKey=FirScriptSymbol <script-class.kts>] class Builder : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = LAZY_EXPRESSION
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

            public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-class.kts>] class NestedBuilder : Builder {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedBuilder] constructor(): R|Builder.NestedBuilder| {
                    LAZY_super<Builder>
                }

            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init {
            builder#.version# = String()
        }