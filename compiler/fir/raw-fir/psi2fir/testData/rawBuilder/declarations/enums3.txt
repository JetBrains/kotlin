FILE: enums3.kt
    public final? class C : R|kotlin/Any| {
        public? [ContainingClassKey=C] constructor(): R|C| {
            super<R|kotlin/Any|>()
        }

        init {
            local final? enum class Planet : R|kotlin/Enum<<local>/Planet>| {
                private [ContainingClassKey=Planet] constructor([CorrespondingProperty=<local>/m] m: Double, [CorrespondingProperty=<local>/r] r: Double): R|<local>/Planet| {
                    super<R|kotlin/Enum<<local>/Planet>|>()
                }

                public? final? [IsFromPrimaryConstructor=true] val m: Double = R|<local>/m|
                    public? [ContainingClassKey=Planet] get(): Double

                internal final? [IsFromPrimaryConstructor=true] val r: Double = R|<local>/r|
                    internal [ContainingClassKey=Planet] get(): Double

                public final static [ContainingClassKey=Planet] enum entry MERCURY: R|<local>/Planet| = object : R|<local>/Planet| {
                    private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                        super<R|<local>/Planet|>(Double(1.0), Double(2.0))
                    }

                    public? open? override fun sayHello(): R|kotlin/Unit| {
                        println#(String(Hello!!!))
                    }

                }

                public final static [ContainingClassKey=Planet] enum entry VENERA: R|<local>/Planet| = object : R|<local>/Planet| {
                    private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                        super<R|<local>/Planet|>(Double(3.0), Double(4.0))
                    }

                    public? open? override fun sayHello(): R|kotlin/Unit| {
                        println#(String(Ola!!!))
                    }

                }

                public final static [ContainingClassKey=Planet] enum entry EARTH: R|<local>/Planet| = object : R|<local>/Planet| {
                    private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                        super<R|<local>/Planet|>(Double(5.0), Double(6.0))
                    }

                    public? open? override fun sayHello(): R|kotlin/Unit| {
                        println#(String(Privet!!!))
                    }

                }

                public? final? val g: Double = G#.times#(m#).div#(r#.times#(r#))
                    public? [ContainingClassKey=Planet] get(): Double

                public? abstract fun sayHello(): R|kotlin/Unit|

                local final? companion [ContainingClassKey=Planet] object Companion : R|kotlin/Any| {
                    private [ContainingClassKey=Companion] constructor(): R|<local>/Planet.Companion| {
                        super<R|kotlin/Any|>()
                    }

                    public? final? const val G: <implicit> = Double(6.67E-11)
                        public? [ContainingClassKey=Companion] get(): <implicit>

                }

                public final static [ContainingClassKey=Planet] fun values(): R|kotlin/Array<<local>/Planet>| {
                }

                public final static [ContainingClassKey=Planet] fun valueOf(value: R|kotlin/String|): R|<local>/Planet| {
                }

                public final static [ContainingClassKey=Planet] val entries: R|kotlin/enums/EnumEntries<<local>/Planet>|
                    public get(): R|kotlin/enums/EnumEntries<<local>/Planet>|

            }

        }

    }
