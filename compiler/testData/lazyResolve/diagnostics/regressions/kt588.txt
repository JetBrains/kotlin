namespace <root>

internal final class Test : java.lang.Thread {
    public final /*constructor*/ fun <init>(): Test
    public final override /*1*/ fun checkAccess(): jet.Tuple0
    protected open override /*1*/ fun clone(): jet.Any
    public open override /*1*/ fun countStackFrames(): jet.Int
    public open override /*1*/ fun destroy(): jet.Tuple0
    public open override /*1*/ fun equals(/*0*/ p0: jet.Any?): jet.Boolean
    protected open override /*1*/ fun finalize(): jet.Tuple0
    public final override /*1*/ fun getClass(): java.lang.Class<out jet.Any?>?
    public open override /*1*/ fun getContextClassLoader(): java.lang.ClassLoader?
    public open override /*1*/ fun getId(): jet.Long
    public final override /*1*/ fun getName(): jet.String?
    public final override /*1*/ fun getPriority(): jet.Int
    public open override /*1*/ fun getStackTrace(): jet.Array<[ERROR : Unresolved java class: StackTraceElement]>?
    public final override /*1*/ fun getThreadGroup(): [ERROR : Unresolved java class: ThreadGroup]
    public open override /*1*/ fun hashCode(): jet.Int
    invisible_fake abstract override /*1*/ var inheritableThreadLocals: java.lang.ThreadLocal.ThreadLocalMap?
    public open override /*1*/ fun interrupt(): jet.Tuple0
    public final override /*1*/ fun isAlive(): jet.Boolean
    public final override /*1*/ fun isDaemon(): jet.Boolean
    public open override /*1*/ fun isInterrupted(): jet.Boolean
    public final override /*1*/ fun join(): jet.Tuple0
    public final override /*1*/ fun join(/*0*/ p0: jet.Long): jet.Tuple0
    public final override /*1*/ fun join(/*0*/ p0: jet.Long, /*1*/ p1: jet.Int): jet.Tuple0
    public final override /*1*/ fun notify(): jet.Tuple0
    public final override /*1*/ fun notifyAll(): jet.Tuple0
    public final override /*1*/ fun resume(): jet.Tuple0
    public open override /*1*/ fun run(): jet.Tuple0
    public open override /*1*/ fun setContextClassLoader(/*0*/ p0: java.lang.ClassLoader?): jet.Tuple0
    public final override /*1*/ fun setDaemon(/*0*/ p0: jet.Boolean): jet.Tuple0
    public final override /*1*/ fun setName(/*0*/ p0: jet.String?): jet.Tuple0
    public final override /*1*/ fun setPriority(/*0*/ p0: jet.Int): jet.Tuple0
    public open override /*1*/ fun start(): jet.Tuple0
    public final override /*1*/ fun stop(): jet.Tuple0
    public final override /*1*/ fun stop(/*0*/ p0: jet.Throwable?): jet.Tuple0
    public final override /*1*/ fun suspend(): jet.Tuple0
    invisible_fake abstract override /*1*/ var threadLocals: java.lang.ThreadLocal.ThreadLocalMap?
    public open override /*1*/ fun toString(): jet.String?
    public final override /*1*/ fun wait(): jet.Tuple0
    public final override /*1*/ fun wait(/*0*/ p0: jet.Long): jet.Tuple0
    public final override /*1*/ fun wait(/*0*/ p0: jet.Long, /*1*/ p1: jet.Int): jet.Tuple0
    internal final class object Test.<no name provided> : jet.Any {
        internal final /*constructor*/ fun <init>(): Test.<no name provided>
        internal final fun init2(): jet.Tuple0
    }
}
