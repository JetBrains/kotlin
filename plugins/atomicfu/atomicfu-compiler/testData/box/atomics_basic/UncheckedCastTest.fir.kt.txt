private var topLevelS$volatile: Any?
  field = arrayOf<String>(elements = ["A", "B"])
  private get(): Any? {
    return #topLevelS$volatile
  }
  private set(value: Any?) {
    return #topLevelS$volatile = value
  }

class UncheckedCastTest {
  private var s$volatile: Any?
    field = "AAA"
    private get(): Any? {
      return <this>.#s$volatile
    }
    private set(value: Any?) {
      return <this>.#s$volatile = value
    }

  private var bs$volatile: Any?
    field = null
    private get(): Any? {
      return <this>.#bs$volatile
    }
    private set(value: Any?) {
      return <this>.#bs$volatile = value
    }

  private val a: AtomicArray<T>
    field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 10))
    private get(): AtomicArray<T> {
      return <this>.#a
    }

  private data class Box {
    val b: Int
      field = b
      get

    constructor(b: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    operator fun component1(): Int {
      return <this>.#b
    }

    fun copy(b: Int = <this>.#b): Box {
      return Box(b = b)
    }

    override operator fun equals(other: Any?): Boolean {
      when {
        EQEQEQ(arg0 = <this>, arg1 = other) -> return true
      }
      when {
        other !is Box -> return false
      }
      val tmp_0: Box = other as Box
      when {
        EQEQ(arg0 = <this>.#b, arg1 = tmp_0.#b).not() -> return false
      }
      return true
    }

    override fun hashCode(): Int {
      return <this>.#b.hashCode()
    }

    override fun toString(): String {
      return "Box(" + "b=" + <this>.#b + ")"
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_1: T = atomicGetField<Array<Array<Box>>>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_2: R = action$atomicfu.invoke(p1 = tmp_1)
      when {
        compareAndSetField<Array<Array<Box>>>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_1, newValue = tmp_2) -> return tmp_1
      }
    }
  }

  private inline fun <T : Any?> getString$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int): String {
    return handler$atomicfu.get(index = index$atomicfu) as String
  }

  private inline fun <T : Any?> getString$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>): String {
    return atomicGetField<String>(/* <this> = handler$atomicfu.invoke() */) as String
  }

  private inline fun update$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>) {
    while (true) { // BLOCK
      val tmp_3: T = atomicGetField<Array<Array<Box>>>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_4: R = action$atomicfu.invoke(p1 = tmp_3)
      when {
        compareAndSetField<Array<Array<Box>>>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_3, newValue = tmp_4) -> return Unit
      }
    }
  }

  private inline fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_5: T = atomicGetField<Array<Array<Box>>>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_6: R = action$atomicfu.invoke(p1 = tmp_5)
      when {
        compareAndSetField<Array<Array<Box>>>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_5, newValue = tmp_6) -> return tmp_6
      }
    }
  }

  fun testArrayValueUncheckedCast() {
    <this>.<get-a>().set(index = 0, newValue = "OK")
    assertEquals<String>(expected = "OK", actual = <this>.<get-a>().get(index = 0) as String)
  }

  fun testArrayValueUncheckedCastInlineFunc() {
    <this>.<get-a>().set(index = 0, newValue = "OK")
    assertEquals<String>(expected = "OK", actual = <this>.getString$atomicfu$ATOMIC_ARRAY$Any<Any?>(handler$atomicfu = <this>.<get-a>(), index$atomicfu = 0))
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testAtomicRefUncheckedCastGetAndUpdate() {
    atomicSetField<Any?>(/* <this> = UncheckedCastTest<this>::bs$volatile, */ newValue = arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 1), Box(b = 2)]), arrayOf<Box>(elements = [Box(b = 3)])]))
    val res: Array<Array<Box>> = <this>.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <bs$volatile-getter>(): Any? {
      return UncheckedCastTest<this>::bs$volatile
    }
, action$atomicfu = local fun <anonymous>(it: Array<Array<Box>>): Array<Array<Box>> {
      return arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 4), Box(b = 5)]), arrayOf<Box>(elements = [Box(b = 6)])])
    }
)
    assertEquals<Int>(expected = 2, actual = CHECK_NOT_NULL<Box>(arg0 = res as Array<Array<Box>>.get(index = 0).get(index = 1)).<get-b>())
    assertEquals<Int>(expected = 5, actual = CHECK_NOT_NULL<Box>(arg0 = atomicGetField<Array<Array<Box>>>(/* <this> = UncheckedCastTest<this>::bs$volatile */) as Array<Array<Box>>.get(index = 0).get(index = 1)).<get-b>())
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testAtomicRefUncheckedCastUpdate() {
    atomicSetField<Any?>(/* <this> = UncheckedCastTest<this>::bs$volatile, */ newValue = arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 1), Box(b = 2)]), arrayOf<Box>(elements = [Box(b = 3)])]))
    <this>.update$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <bs$volatile-getter>(): Any? {
      return UncheckedCastTest<this>::bs$volatile
    }
, action$atomicfu = local fun <anonymous>(it: Array<Array<Box>>): Array<Array<Box>> {
      return arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 4), Box(b = 5)]), arrayOf<Box>(elements = [Box(b = 6)])])
    }
)
    assertEquals<Int>(expected = 5, actual = CHECK_NOT_NULL<Box>(arg0 = atomicGetField<Array<Array<Box>>>(/* <this> = UncheckedCastTest<this>::bs$volatile */) as Array<Array<Box>>.get(index = 0).get(index = 1)).<get-b>())
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testAtomicRefUncheckedCastUpdateAndGet() {
    atomicSetField<Any?>(/* <this> = UncheckedCastTest<this>::bs$volatile, */ newValue = arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 1), Box(b = 2)]), arrayOf<Box>(elements = [Box(b = 3)])]))
    assertEquals<Int>(expected = 2, actual = CHECK_NOT_NULL<Box>(arg0 = atomicGetField<Array<Array<Box>>>(/* <this> = UncheckedCastTest<this>::bs$volatile */) as Array<Array<Box>>.get(index = 0).get(index = 1)).<get-b>())
    val res: Array<Array<Box>> = <this>.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <bs$volatile-getter>(): Any? {
      return UncheckedCastTest<this>::bs$volatile
    }
, action$atomicfu = local fun <anonymous>(it: Array<Array<Box>>): Array<Array<Box>> {
      return arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 4), Box(b = 5)]), arrayOf<Box>(elements = [Box(b = 6)])])
    }
)
    assertEquals<Int>(expected = 6, actual = CHECK_NOT_NULL<Box>(arg0 = res as Array<Array<Box>>.get(index = 1).get(index = 0)).<get-b>())
    assertEquals<Int>(expected = 6, actual = CHECK_NOT_NULL<Box>(arg0 = atomicGetField<Array<Array<Box>>>(/* <this> = UncheckedCastTest<this>::bs$volatile */) as Array<Array<Box>>.get(index = 1).get(index = 0)).<get-b>())
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testAtomicValUncheckedCast() {
    assertEquals<String>(expected = atomicGetField<String>(/* <this> = UncheckedCastTest<this>::s$volatile */) as String, actual = "AAA")
    atomicSetField<Any?>(/* <this> = UncheckedCastTest<this>::bs$volatile, */ newValue = arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 1), Box(b = 2)])]))
    assertEquals<Int>(expected = CHECK_NOT_NULL<Array<Box>>(arg0 = atomicGetField<Array<Array<Box>>>(/* <this> = UncheckedCastTest<this>::bs$volatile */) as Array<Array<Box>>.get(index = 0)).get(index = 0).<get-b>().times(other = 10), actual = 10)
  }

  fun testInlineFunc() {
    assertEquals<String>(expected = "AAA", actual = <this>.getString$atomicfu$NATIVE_PROPERTY_REF$Any<Any>(handler$atomicfu = local inline fun <s$volatile-getter>(): Any? {
      return UncheckedCastTest<this>::s$volatile
    }
))
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testTopLevelValUnchekedCast() {
    assertEquals<String>(expected = "B", actual = atomicGetField<Array<String>>(/* <this> = ::topLevelS$volatile */) as Array<String>.get(index = 1))
  }

}

fun box(): String {
  val testClass: UncheckedCastTest = UncheckedCastTest()
  testClass.testAtomicValUncheckedCast()
  testClass.testTopLevelValUnchekedCast()
  testClass.testArrayValueUncheckedCast()
  testClass.testArrayValueUncheckedCastInlineFunc()
  testClass.testInlineFunc()
  testClass.testAtomicRefUncheckedCastUpdate()
  testClass.testAtomicRefUncheckedCastGetAndUpdate()
  testClass.testAtomicRefUncheckedCastUpdateAndGet()
  return "OK"
}
