UFile (package = ) [import java.lang.Thread...]
    UImportStatement (isOnDemand = false) [import java.lang.Thread]
    UImportStatement (isOnDemand = false) [import java.lang.Runnable]
    UImportStatement (isOnDemand = false) [import java.util.concurrent.Callable]
    UImportStatement (isOnDemand = false) [import java.util.function.Supplier]
    UClass (name = SAMKt) [public final class SAMKt {...}]
        UField (name = notSam) [private static final var notSam: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = [!] UnknownKotlinExpression (LAMBDA_EXPRESSION)]
            [!] UnknownKotlinExpression (LAMBDA_EXPRESSION) [[!] UnknownKotlinExpression (LAMBDA_EXPRESSION)]
        UField (name = foo) [private static var foo: java.lang.Runnable = [!] UnknownKotlinExpression (LAMBDA_EXPRESSION)]
            [!] UnknownKotlinExpression (LAMBDA_EXPRESSION) [[!] UnknownKotlinExpression (LAMBDA_EXPRESSION)]
        UField (name = baz) [private static final var baz: java.lang.Runnable = [!] UnknownKotlinExpression (DOT_QUALIFIED_EXPRESSION)]
            [!] UnknownKotlinExpression (DOT_QUALIFIED_EXPRESSION) [[!] UnknownKotlinExpression (DOT_QUALIFIED_EXPRESSION)]
        UMethod (name = getNotSam) [public static final fun getNotSam() : kotlin.jvm.functions.Function0<? extends kotlin.Unit> = UastEmptyExpression]
        UMethod (name = getFoo) [public static final fun getFoo() : java.lang.Runnable = UastEmptyExpression]
        UMethod (name = setFoo) [public static final fun setFoo(value: java.lang.Runnable) : void = UastEmptyExpression]
            UParameter (name = value) [var value: java.lang.Runnable]
        UMethod (name = bar) [public static final fun bar() : java.lang.Runnable = [!] UnknownKotlinExpression (BLOCK)]
            [!] UnknownKotlinExpression (BLOCK) [[!] UnknownKotlinExpression (BLOCK)]
        UMethod (name = getBaz) [public static final fun getBaz() : java.lang.Runnable = UastEmptyExpression]
        UMethod (name = runRunnable) [public static final fun runRunnable(r: java.lang.Runnable) : error.NonExistentClass = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
            UParameter (name = r) [var r: java.lang.Runnable]
            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
        UMethod (name = test1) [public static final fun test1() : void = [!] UnknownKotlinExpression (BLOCK)]
            [!] UnknownKotlinExpression (BLOCK) [[!] UnknownKotlinExpression (BLOCK)]
        UMethod (name = test2) [public static final fun test2() : void = [!] UnknownKotlinExpression (BLOCK)]
            [!] UnknownKotlinExpression (BLOCK) [[!] UnknownKotlinExpression (BLOCK)]
        UMethod (name = test3) [public static final fun test3() : void = [!] UnknownKotlinExpression (BLOCK)]
            [!] UnknownKotlinExpression (BLOCK) [[!] UnknownKotlinExpression (BLOCK)]
        UMethod (name = ambiguousSamAcceptor) [public static final fun ambiguousSamAcceptor(s: java.util.function.Supplier<java.lang.String>) : java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
            UParameter (name = s) [var s: java.util.function.Supplier<java.lang.String>]
            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
        UMethod (name = ambiguousSamAcceptor) [public static final fun ambiguousSamAcceptor(s: java.util.concurrent.Callable<java.lang.String>) : java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
            UParameter (name = s) [var s: java.util.concurrent.Callable<java.lang.String>]
            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
