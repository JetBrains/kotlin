//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun Ref(content: IntToInt) {
    Ref(::Fn)
}

//
// Transformed IR
// ------------------------------------------

@Composable
@FunctionKeyMeta(key = 1914859224, startOffset = 84, endOffset = 152)
fun Ref(content: IntToInt, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Ref)N(content)<::Fn>,<Ref(::...>:Test.kt")
  if (%composer.shouldExecute(%changed and 0b0001 != 0, %changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    Ref(IntToInt sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
    val tmp0_group = %composer.cache(false) {
      @Composable
      fun Fn(int: Int, %composer: Composer?, %changed: Int): Int {
        %composer.startReplaceGroup(<>)
        sourceInformation(%composer, "C(Fn)N(int):Test.kt")
        val tmp0 = Fn(int, %composer, 0b1110 and %changed)
        %composer.endReplaceGroup()
        return tmp0
      }
      ::Fn
    }
    sourceInformationMarkerEnd(%composer)
    tmp0_group, %composer, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Ref(content, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
