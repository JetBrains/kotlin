//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
private fun Test(param: String?) {
    Inline1 {
        Inline2 {
            if (true) return@Inline1
        }
    }
}

//
// Transformed IR
// ------------------------------------------

@Composable
@FunctionKeyMeta(key = -1971298841, startOffset = 92, endOffset = 277)
private fun Test(param: String?, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)<Inline...>:Test.kt")
  if (%composer.shouldExecute(%changed and 0b0001 != 0, %changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    Inline1({ %composer: Composer?, %changed: Int ->
      val tmp0_marker = %composer.currentMarker
      %composer.startReplaceGroup(<>)
      sourceInformation(%composer, "C<Inline...>:Test.kt")
      Inline2({ %composer: Composer?, %changed: Int ->
        %composer.startReplaceGroup(<>)
        sourceInformation(%composer, "C:Test.kt")
        if (true) {
          %composer.endToMarker(tmp0_marker)
          return@Inline1
        }
        %composer.endReplaceGroup()
      }, %composer, 0)
      %composer.endReplaceGroup()
    }, %composer, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(param, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
