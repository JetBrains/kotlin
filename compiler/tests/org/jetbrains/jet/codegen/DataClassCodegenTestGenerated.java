/*
 * Copyright 2010-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jetbrains.jet.codegen;

import junit.framework.Test;
import junit.framework.TestSuite;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import java.io.File;

/** This class is generated by {@link org.jetbrains.jet.codegen.AbstractDataClassCodegenTest}. DO NOT MODIFY MANUALLY */
@TestMetadata("compiler/testData/codegen/dataClasses")
@InnerTestClasses({DataClassCodegenTestGenerated.Copy.class, DataClassCodegenTestGenerated.Equals.class, DataClassCodegenTestGenerated.Hashcode.class, DataClassCodegenTestGenerated.Tostring.class})
public class DataClassCodegenTestGenerated extends AbstractDataClassCodegenTest {
    public void testAllFilesPresentInDataClasses() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.codegen.AbstractDataClassCodegenTest", new File("compiler/testData/codegen/dataClasses"), "kt", true);
    }
    
    @TestMetadata("arrayParams.kt")
    public void testArrayParams() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/arrayParams.kt");
    }
    
    @TestMetadata("changingVarParam.kt")
    public void testChangingVarParam() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/changingVarParam.kt");
    }
    
    @TestMetadata("genericParam.kt")
    public void testGenericParam() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/genericParam.kt");
    }
    
    @TestMetadata("mixedParams.kt")
    public void testMixedParams() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/mixedParams.kt");
    }
    
    @TestMetadata("multiDeclaration.kt")
    public void testMultiDeclaration() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/multiDeclaration.kt");
    }
    
    @TestMetadata("multiDeclarationFor.kt")
    public void testMultiDeclarationFor() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/multiDeclarationFor.kt");
    }
    
    @TestMetadata("overriddenProperty.kt")
    public void testOverriddenProperty() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/overriddenProperty.kt");
    }
    
    @TestMetadata("twoValParams.kt")
    public void testTwoValParams() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/twoValParams.kt");
    }
    
    @TestMetadata("twoVarParams.kt")
    public void testTwoVarParams() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/twoVarParams.kt");
    }
    
    @TestMetadata("unitComponent.kt")
    public void testUnitComponent() throws Exception {
        blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/unitComponent.kt");
    }
    
    @TestMetadata("compiler/testData/codegen/dataClasses/copy")
    public static class Copy extends AbstractDataClassCodegenTest {
        public void testAllFilesPresentInCopy() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.codegen.AbstractDataClassCodegenTest",
                                                         new File("compiler/testData/codegen/dataClasses/copy"), "kt", true);
        }
        
        @TestMetadata("constructorWithDefaultParam.kt")
        public void testConstructorWithDefaultParam() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/copy/constructorWithDefaultParam.kt");
        }
        
        @TestMetadata("paramWithoutProperty.kt")
        public void testParamWithoutProperty() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/copy/paramWithoutProperty.kt");
        }
        
        @TestMetadata("valInConstructorParams.kt")
        public void testValInConstructorParams() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/copy/valInConstructorParams.kt");
        }
        
        @TestMetadata("varInConstructorParams.kt")
        public void testVarInConstructorParams() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/copy/varInConstructorParams.kt");
        }
        
        @TestMetadata("withGenericParameter.kt")
        public void testWithGenericParameter() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/copy/withGenericParameter.kt");
        }

        @TestMetadata("copyInNestedDataClass.kt")
        public void testCopyInNestedClasses() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/copy/copyInNestedDataClass.kt");
        }

        @TestMetadata("copyInObjectNestedDataClass.kt")
        public void testCopyInObjectNestedClasses() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/copy/copyInObjectNestedDataClass.kt");
        }
    }
    
    @TestMetadata("compiler/testData/codegen/dataClasses/equals")
    public static class Equals extends AbstractDataClassCodegenTest {
        public void testAllFilesPresentInEquals() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.codegen.AbstractDataClassCodegenTest", new File("compiler/testData/codegen/dataClasses/equals"), "kt", true);
        }
        
        @TestMetadata("alreadyDeclared.kt")
        public void testAlreadyDeclared() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/equals/alreadyDeclared.kt");
        }
        
        @TestMetadata("alreadyDeclaredWrongSignature.kt")
        public void testAlreadyDeclaredWrongSignature() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/equals/alreadyDeclaredWrongSignature.kt");
        }
        
        @TestMetadata("genericarray.kt")
        public void testGenericarray() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/equals/genericarray.kt");
        }
        
        @TestMetadata("instanceof.kt")
        public void testInstanceof() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/equals/instanceof.kt");
        }
        
        @TestMetadata("intarray.kt")
        public void testIntarray() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/equals/intarray.kt");
        }
        
        @TestMetadata("nullother.kt")
        public void testNullother() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/equals/nullother.kt");
        }
        
        @TestMetadata("sameinstance.kt")
        public void testSameinstance() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/equals/sameinstance.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/dataClasses/hashcode")
    public static class Hashcode extends AbstractDataClassCodegenTest {
        public void testAllFilesPresentInHashcode() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.codegen.AbstractDataClassCodegenTest", new File("compiler/testData/codegen/dataClasses/hashcode"), "kt", true);
        }
        
        @TestMetadata("alreadyDeclared.kt")
        public void testAlreadyDeclared() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/alreadyDeclared.kt");
        }
        
        @TestMetadata("alreadyDeclaredWrongSignature.kt")
        public void testAlreadyDeclaredWrongSignature() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/alreadyDeclaredWrongSignature.kt");
        }
        
        @TestMetadata("array.kt")
        public void testArray() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/array.kt");
        }
        
        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/boolean.kt");
        }
        
        @TestMetadata("byte.kt")
        public void testByte() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/byte.kt");
        }
        
        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/char.kt");
        }
        
        @TestMetadata("double.kt")
        public void testDouble() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/double.kt");
        }
        
        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/float.kt");
        }
        
        @TestMetadata("int.kt")
        public void testInt() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/int.kt");
        }
        
        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/long.kt");
        }
        
        @TestMetadata("null.kt")
        public void testNull() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/null.kt");
        }
        
        @TestMetadata("short.kt")
        public void testShort() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/hashcode/short.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/dataClasses/tostring")
    public static class Tostring extends AbstractDataClassCodegenTest {
        public void testAllFilesPresentInTostring() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.codegen.AbstractDataClassCodegenTest", new File("compiler/testData/codegen/dataClasses/tostring"), "kt", true);
        }
        
        @TestMetadata("alreadyDeclared.kt")
        public void testAlreadyDeclared() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/tostring/alreadyDeclared.kt");
        }
        
        @TestMetadata("alreadyDeclaredWrongSignature.kt")
        public void testAlreadyDeclaredWrongSignature() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/tostring/alreadyDeclaredWrongSignature.kt");
        }
        
        @TestMetadata("arrayParams.kt")
        public void testArrayParams() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/tostring/arrayParams.kt");
        }
        
        @TestMetadata("changingVarParam.kt")
        public void testChangingVarParam() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/tostring/changingVarParam.kt");
        }
        
        @TestMetadata("genericParam.kt")
        public void testGenericParam() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/tostring/genericParam.kt");
        }
        
        @TestMetadata("mixedParams.kt")
        public void testMixedParams() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/tostring/mixedParams.kt");
        }
        
        @TestMetadata("overriddenProperty.kt")
        public void testOverriddenProperty() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/tostring/overriddenProperty.kt");
        }
        
        @TestMetadata("unitComponent.kt")
        public void testUnitComponent() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/dataClasses/tostring/unitComponent.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("DataClassCodegenTestGenerated");
        suite.addTestSuite(DataClassCodegenTestGenerated.class);
        suite.addTestSuite(Copy.class);
        suite.addTestSuite(Equals.class);
        suite.addTestSuite(Hashcode.class);
        suite.addTestSuite(Tostring.class);
        return suite;
    }
}
