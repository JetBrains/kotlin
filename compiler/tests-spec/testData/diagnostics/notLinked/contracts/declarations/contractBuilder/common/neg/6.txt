package

public fun getAny(): kotlin.Any
public fun getBoolean(/*0*/ arg: kotlin.Any = ...): kotlin.Boolean
public fun getByte(/*0*/ arg: kotlin.Any = ...): kotlin.Byte
public fun getChar(/*0*/ arg: kotlin.Any = ...): kotlin.Char
public fun getDouble(/*0*/ arg: kotlin.Any = ...): kotlin.Double
public fun getFloat(/*0*/ arg: kotlin.Any = ...): kotlin.Float
public fun getInt(/*0*/ arg: kotlin.Any = ...): kotlin.Int
public fun getList(): kotlin.collections.MutableList<kotlin.Int>
public fun getLong(/*0*/ arg: kotlin.Any = ...): kotlin.Long
public fun getNothing(): kotlin.Nothing
public fun getShort(/*0*/ arg: kotlin.Any = ...): kotlin.Short
public fun getString(/*0*/ arg: kotlin.Any = ...): kotlin.String
public fun getUnit(): () -> kotlin.Unit

public final class _BasicTypesProvider {
    public constructor _BasicTypesProvider()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun getAny(): kotlin.Any
    public final fun getBoolean(/*0*/ arg: kotlin.Any = ...): kotlin.Boolean
    public final fun getByte(/*0*/ arg: kotlin.Any = ...): kotlin.Byte
    public final fun getChar(/*0*/ arg: kotlin.Any = ...): kotlin.Char
    public final fun getDouble(/*0*/ arg: kotlin.Any = ...): kotlin.Double
    public final fun getFloat(/*0*/ arg: kotlin.Any = ...): kotlin.Float
    public final fun getInt(/*0*/ arg: kotlin.Any = ...): kotlin.Int
    public final fun getList(): kotlin.collections.MutableList<kotlin.Int>
    public final fun getLong(/*0*/ arg: kotlin.Any = ...): kotlin.Long
    public final fun getNothing(): kotlin.Nothing
    public final fun getShort(/*0*/ arg: kotlin.Any = ...): kotlin.Short
    public final fun getString(/*0*/ arg: kotlin.Any = ...): kotlin.String
    public final fun getUnit(): () -> kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object case_1 {
    private constructor case_1()
    public final val value_1: kotlin.Boolean
    public const final val value_2: kotlin.Boolean = true
    private const final val value_3: kotlin.Boolean = false
    public final fun case_1_1(): kotlin.Boolean?
    public final fun case_1_2(): kotlin.Boolean?
    public final fun case_1_3(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class case_2 {
    public constructor case_2(/*0*/ value_5: kotlin.Boolean, /*1*/ value_1: kotlin.Boolean)
    public final val value_1: kotlin.Boolean
    public final val value_2: kotlin.Boolean
    public final fun case_2_2(): kotlin.Boolean?
    public final fun case_2_3(): kotlin.Boolean
    public final fun case_2_4(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public final inline fun </*0*/ reified K : kotlin.Number> K.case_2_5(): kotlin.Boolean?

    public companion object Companion {
        private constructor Companion()
        public const final val value_3: kotlin.Boolean = false
        private const final val value_4: kotlin.Boolean = true
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
