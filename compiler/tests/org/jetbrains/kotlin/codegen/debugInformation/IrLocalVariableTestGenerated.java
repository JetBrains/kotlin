/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.codegen.debugInformation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;
import org.junit.runners.BlockJUnit4ClassRunner;
import org.junit.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/debug/localVariables")
@TestDataPath("$PROJECT_ROOT")
@RunWith(BlockJUnit4ClassRunner.class)
public class IrLocalVariableTestGenerated extends AbstractIrLocalVariableTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
    }

    @Test
    public void testAllFilesPresentInLocalVariables() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/debug/localVariables"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("copyFunction.kt")
    public void testCopyFunction() throws Exception {
        runTest("compiler/testData/debug/localVariables/copyFunction.kt");
    }

    @Test
    @TestMetadata("destructuringInFor.kt")
    public void testDestructuringInFor() throws Exception {
        runTest("compiler/testData/debug/localVariables/destructuringInFor.kt");
    }

    @Test
    @TestMetadata("destructuringInLambdas.kt")
    public void testDestructuringInLambdas() throws Exception {
        runTest("compiler/testData/debug/localVariables/destructuringInLambdas.kt");
    }

    @Test
    @TestMetadata("localFun.kt")
    public void testLocalFun() throws Exception {
        runTest("compiler/testData/debug/localVariables/localFun.kt");
    }

    @Test
    @TestMetadata("underscoreNames.kt")
    public void testUnderscoreNames() throws Exception {
        runTest("compiler/testData/debug/localVariables/underscoreNames.kt");
    }

    @TestMetadata("compiler/testData/debug/localVariables/receiverMangling")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(BlockJUnit4ClassRunner.class)
    public static class ReceiverMangling extends AbstractIrLocalVariableTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.JVM_IR, testDataFilePath);
        }

        @Test
        public void testAllFilesPresentInReceiverMangling() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/debug/localVariables/receiverMangling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("deepInline.kt")
        public void testDeepInline() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/deepInline.kt");
        }

        @Test
        @TestMetadata("deepInlineWithLabels.kt")
        public void testDeepInlineWithLabels() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/deepInlineWithLabels.kt");
        }

        @Test
        @TestMetadata("deepNoinlineWIthLabels_before.kt")
        public void testDeepNoinlineWIthLabels_before() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/deepNoinlineWIthLabels_before.kt");
        }

        @Test
        @TestMetadata("deepNoinlineWithLabels_after.kt")
        public void testDeepNoinlineWithLabels_after() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/deepNoinlineWithLabels_after.kt");
        }

        @Test
        @TestMetadata("deepNoinline_after.kt")
        public void testDeepNoinline_after() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/deepNoinline_after.kt");
        }

        @Test
        @TestMetadata("deepNoinline_before.kt")
        public void testDeepNoinline_before() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/deepNoinline_before.kt");
        }

        @Test
        @TestMetadata("inlineClassCapture.kt")
        public void testInlineClassCapture() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/inlineClassCapture.kt");
        }

        @Test
        @TestMetadata("inlineReceivers.kt")
        public void testInlineReceivers() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/inlineReceivers.kt");
        }

        @Test
        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/innerClass.kt");
        }

        @Test
        @TestMetadata("localFunctions.kt")
        public void testLocalFunctions() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/localFunctions.kt");
        }

        @Test
        @TestMetadata("mangledNames.kt")
        public void testMangledNames() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/mangledNames.kt");
        }

        @Test
        @TestMetadata("nonInlineReceivers_after.kt")
        public void testNonInlineReceivers_after() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/nonInlineReceivers_after.kt");
        }

        @Test
        @TestMetadata("nonInlineReceivers_before.kt")
        public void testNonInlineReceivers_before() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/nonInlineReceivers_before.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/simple.kt");
        }

        @Test
        @TestMetadata("simpleCapturedReceiver.kt")
        public void testSimpleCapturedReceiver() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/simpleCapturedReceiver.kt");
        }

        @Test
        @TestMetadata("simpleCapturedReceiverFunctionExpression.kt")
        public void testSimpleCapturedReceiverFunctionExpression() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/simpleCapturedReceiverFunctionExpression.kt");
        }

        @Test
        @TestMetadata("simpleCapturedReceiverWithLabel.kt")
        public void testSimpleCapturedReceiverWithLabel() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/simpleCapturedReceiverWithLabel.kt");
        }

        @Test
        @TestMetadata("simpleCapturedReceiverWithParens.kt")
        public void testSimpleCapturedReceiverWithParens() throws Exception {
            runTest("compiler/testData/debug/localVariables/receiverMangling/simpleCapturedReceiverWithParens.kt");
        }
    }
}
