package

public val inExtensionType: @kotlin.Extension() kotlin.Function1<*, *>.(kotlin.Function1<*, *>) -> kotlin.Unit
public val inVal: (kotlin.Int) -> kotlin.Unit
public fun f(/*0*/ @Ann() x: kotlin.Int): kotlin.Unit
public fun inParam(/*0*/ fn: (kotlin.Int) -> kotlin.Unit): kotlin.Unit
public fun inParamNested(/*0*/ fn1: ((kotlin.Int) -> kotlin.Unit) -> kotlin.Unit): kotlin.Unit
public fun inReturn(): (kotlin.Int) -> kotlin.Unit
public fun @kotlin.Extension() kotlin.Function1<*, *>.extFun(/*0*/ ff: @kotlin.Extension() kotlin.Function1<*, *>): kotlin.Unit

public final class A : (kotlin.Int) -> kotlin.Unit {
    public constructor A()
    public final val prop: (kotlin.Int) -> kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ fun invoke(/*0*/ p1: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.annotation.annotation() public final class Ann : kotlin.Annotation {
    public constructor Ann()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
