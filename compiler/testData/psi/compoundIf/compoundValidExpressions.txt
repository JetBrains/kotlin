KtFile: compoundValidExpressions.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('foo')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      RETURN
        PsiElement(return)('return')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n    ')
      RETURN
        PsiElement(return)('return')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('2')
      PsiWhiteSpace('\n\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        VALUE_ARGUMENT_LIST
          PsiElement(LPAR)('(')
          VALUE_ARGUMENT
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              PsiElement(CLOSING_QUOTE)('"')
          PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      BINARY_EXPRESSION
        BINARY_EXPRESSION
          INTEGER_CONSTANT
            PsiElement(INTEGER_LITERAL)('3')
          PsiWhiteSpace(' ')
          OPERATION_REFERENCE
            PsiElement(PLUS)('+')
          PsiWhiteSpace(' ')
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('4')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(MUL)('*')
            PsiWhiteSpace(' ')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('5')
        PsiWhiteSpace(' ')
        OPERATION_REFERENCE
          PsiElement(IDENTIFIER)('infix')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('6')
      PsiWhiteSpace('\n\n    ')
      DOT_QUALIFIED_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        PsiElement(DOT)('.')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('bar')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            VALUE_ARGUMENT
              FUN
                PsiElement(fun)('fun')
                VALUE_PARAMETER_LIST
                  PsiElement(LPAR)('(')
                  VALUE_PARAMETER
                    PsiElement(IDENTIFIER)('x')
                    PsiElement(COLON)(':')
                    PsiWhiteSpace(' ')
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('Int')
                  PsiElement(RPAR)(')')
                PsiWhiteSpace(' ')
                BLOCK
                  PsiElement(LBRACE)('{')
                  PsiWhiteSpace('\n        ')
                  PsiComment(EOL_COMMENT)('// function body')
                  PsiWhiteSpace('\n    ')
                  PsiElement(RBRACE)('}')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n\n    ')
      CALL_EXPRESSION
        COMPOUND_EXPRESSION
          COMPOUND_EXPRESSION
            BLOCK
              IF
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(LPAR)('(')
                PsiWhiteSpace('\n    ')
                PROPERTY
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  PsiElement(IDENTIFIER)('result')
                  PsiWhiteSpace(' ')
                  PsiElement(EQ)('=')
                  PsiWhiteSpace(' ')
                  BINARY_EXPRESSION
                    BINARY_EXPRESSION
                      INTEGER_CONSTANT
                        PsiElement(INTEGER_LITERAL)('3')
                      PsiWhiteSpace(' ')
                      OPERATION_REFERENCE
                        PsiElement(PLUS)('+')
                      PsiWhiteSpace(' ')
                      INTEGER_CONSTANT
                        PsiElement(INTEGER_LITERAL)('4')
                    PsiWhiteSpace(' ')
                    OPERATION_REFERENCE
                      PsiElement(PLUS)('+')
                    PsiWhiteSpace(' ')
                    INTEGER_CONSTANT
                      PsiElement(INTEGER_LITERAL)('5')
                CONDITION
                  PsiErrorElement:Expecting an expression
                    <empty list>
                THEN
                  <empty list>
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('result')
        PsiWhiteSpace(' ')
        PsiElement(EQEQ)('==')
        PsiWhiteSpace(' ')
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\n    ')
          BLOCK
            <empty list>
          PsiElement(RBRACE)('}')
      PsiWhiteSpace(' ')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(else)('else')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\n    ')
          BLOCK
            <empty list>
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      FOR
        PsiElement(for)('for')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          PsiElement(IDENTIFIER)('i')
        PsiWhiteSpace(' ')
        PsiElement(in)('in')
        PsiWhiteSpace(' ')
        LOOP_RANGE
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('1')
            OPERATION_REFERENCE
              PsiElement(RANGE)('..')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('10')
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        BODY
          BLOCK
            PsiElement(LBRACE)('{')
            PsiWhiteSpace('\n    ')
            PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      LABELED_EXPRESSION
        LABEL_QUALIFIER
          LABEL
            PsiElement(IDENTIFIER)('label')
            PsiElement(AT)('@')
        PsiWhiteSpace(' ')
        WHILE
          PsiElement(while)('while')
          PsiWhiteSpace(' ')
          PsiElement(LPAR)('(')
          CONDITION
            BOOLEAN_CONSTANT
              PsiElement(true)('true')
          PsiElement(RPAR)(')')
          PsiWhiteSpace(' ')
          BODY
            BLOCK
              PsiElement(LBRACE)('{')
              PsiWhiteSpace('\n        ')
              BREAK
                PsiElement(break)('break')
                LABEL_QUALIFIER
                  LABEL
                    PsiElement(AT)('@')
                    PsiElement(IDENTIFIER)('label')
              PsiWhiteSpace('\n    ')
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      RETURN
        PsiElement(return)('return')
        LABEL_QUALIFIER
          LABEL
            PsiElement(AT)('@')
            PsiElement(IDENTIFIER)('label')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n\n    ')
      PROPERTY
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('x')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        CALL_EXPRESSION
          LAMBDA_EXPRESSION
            FUNCTION_LITERAL
              PsiElement(LBRACE)('{')
              PsiWhiteSpace(' ')
              VALUE_PARAMETER_LIST
                VALUE_PARAMETER
                  PsiElement(IDENTIFIER)('a')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  TYPE_REFERENCE
                    USER_TYPE
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('Int')
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                VALUE_PARAMETER
                  PsiElement(IDENTIFIER)('b')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  TYPE_REFERENCE
                    USER_TYPE
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('Int')
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                VALUE_PARAMETER
                  PsiElement(IDENTIFIER)('c')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  TYPE_REFERENCE
                    USER_TYPE
                      REFERENCE_EXPRESSION
                        PsiElement(IDENTIFIER)('Int')
              PsiWhiteSpace(' ')
              PsiElement(ARROW)('->')
              PsiWhiteSpace('\n        ')
              BLOCK
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('a')
              PsiWhiteSpace('\n    ')
              PsiElement(RBRACE)('}')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')