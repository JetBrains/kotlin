// -- Module: <m1> --
package

package p {

    public interface A</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final class B : p.A<kotlin.Int>, p.C, p.D<kotlin.Int> {
        public constructor B()
        public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface C {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface D</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final class M1 {
        public constructor M1()
        public final val b: p.B
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}


// -- Module: <m2> --
package

package p {
    public fun a(/*0*/ a: p.A): kotlin.Unit
    public fun c(/*0*/ c: p.C<kotlin.Int>): kotlin.Unit
    public fun d(/*0*/ d: p.D<kotlin.Int>): kotlin.Unit

    public interface A {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface C</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface D</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}


// -- Module: <m3> --
package

internal fun test(): kotlin.Unit

package p {
    public fun a(/*0*/ a: p.A): kotlin.Unit
    public fun c(/*0*/ c: p.C<kotlin.Int>): kotlin.Unit
    public fun d(/*0*/ d: p.D<kotlin.Int>): kotlin.Unit

    public interface A {
        // -- Module: <m2> --
    }

    public interface A</*0*/ T> {
        // -- Module: <m1> --
    }

    public final class B : p.A<kotlin.Int>, p.C, p.D<kotlin.Int> {
        // -- Module: <m1> --
    }

    public interface C {
        // -- Module: <m1> --
    }

    public interface C</*0*/ T> {
        // -- Module: <m2> --
    }

    public interface D</*0*/ T> {
        // -- Module: <m1> --
    }

    public interface D</*0*/ T> {
        // -- Module: <m2> --
    }

    public final class M1 {
        // -- Module: <m1> --
    }
}
