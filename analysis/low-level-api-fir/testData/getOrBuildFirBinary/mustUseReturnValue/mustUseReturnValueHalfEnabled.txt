KT element: KtClass
KT element text:
public final class Unmarked public constructor() {
    public final var prop: kotlin.String /* compiled code */ /* hasBackingField: true */
        public final get() { /* compiled code */ }
        public final set(value: kotlin.String) { /* compiled code */ }

    public final fun getStuff(): kotlin.String { /* compiled code */ }

    @kotlin.MustUseReturnValue public final class Marked public constructor() {
        public final var prop: kotlin.String /* compiled code */ /* hasBackingField: true */
            public final get() { /* compiled code */ }
            public final set(value: kotlin.String) { /* compiled code */ }

        public final fun alreadyApplied(): kotlin.String { /* compiled code */ }
    }

    public final enum class E private constructor() : kotlin.Enum<Unmarked.E> {
        A,

        B;

        public final fun foo(): kotlin.String { /* compiled code */ }
    }
}
FIR element: FirRegularClassImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
public final [ResolvedTo(BODY_RESOLVE)] class Unmarked : R|kotlin/Any| {
    public final [ResolvedTo(BODY_RESOLVE)] enum class E : R|kotlin/Enum<Unmarked.E>| {
        public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/String|

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=E] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|Unmarked.E| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=E] fun values(): R|kotlin/Array<Unmarked.E>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=E] val entries: R|kotlin/enums/EnumEntries<Unmarked.E>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<Unmarked.E>|

        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=E] constructor(): R|Unmarked.E|

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=E] enum entry A: R|Unmarked.E|
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=E] enum entry B: R|Unmarked.E|
    }

    @R|kotlin/MustUseReturnValue|() public final [ResolvedTo(BODY_RESOLVE)] class Marked : R|kotlin/Any| {
        public final [ResolvedTo(BODY_RESOLVE)] fun alreadyApplied(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var prop: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Marked] get(): R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Marked] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Marked] constructor(): R|Unmarked.Marked|

    }

    public final [ResolvedTo(BODY_RESOLVE)] fun getStuff(): R|kotlin/String|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var prop: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Unmarked] get(): R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Unmarked] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Unmarked] constructor(): R|Unmarked|

}
