class LockFreeIntBits {
  private var bits$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#bits$volatile
    }
    private set(value: Int) {
      return <this>.#bits$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun update$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Int>) {
    while (true) { // BLOCK
      val tmp_0: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_1: R = action$atomicfu.invoke(p1 = tmp_0)
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_0, newValue = tmp_1) -> return Unit
      }
    }
  }

  fun bitClear(index: Int): Boolean {
    val mask: Int = <this>.mask(/* <this> = index */)
    return <this>.bitUpdate(check = local fun <anonymous>(it: Int): Boolean {
      return EQEQ(arg0 = it.and(other = mask), arg1 = 0)
    }
, upd = local fun <anonymous>(it: Int): Int {
      return it.and(other = mask.inv())
    }
)
  }

  fun bitSet(index: Int): Boolean {
    val mask: Int = <this>.mask(/* <this> = index */)
    return <this>.bitUpdate(check = local fun <anonymous>(it: Int): Boolean {
      return EQEQ(arg0 = it.and(other = mask), arg1 = 0).not()
    }
, upd = local fun <anonymous>(it: Int): Int {
      return it.or(other = mask)
    }
)
  }

  private inline fun bitUpdate(check: Function1<Int, Boolean>, upd: Function1<Int, Int>): Boolean {
    <this>.update$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <bits$volatile-getter>(): KMutableProperty0<Int> {
      return LockFreeIntBits<this>::bits$volatile
    }
, action$atomicfu = local fun <anonymous>(it: Int): Int {
      when {
        check.invoke(p1 = it) -> return false
      }
      return upd.invoke(p1 = it)
    }
)
    return true
  }

  operator fun get(index: Int): Boolean {
    return EQEQ(arg0 = atomicGetField<Int>(/* <this> = LockFreeIntBits<this>::bits$volatile */) as Int.and(other = <this>.mask(/* <this> = index */)), arg1 = 0).not()
  }

  private fun Int.mask(): Int {
    return 1.shl(bitCount = <this>)
  }

}

class LockFreeIntBitsTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testBasic() {
    val bs: LockFreeIntBits = LockFreeIntBits()
    assertTrue(actual = bs.get(index = 0).not())
    assertTrue(actual = bs.bitSet(index = 0))
    assertTrue(actual = bs.get(index = 0))
    assertTrue(actual = bs.bitSet(index = 0).not())
    assertTrue(actual = bs.get(index = 1).not())
    assertTrue(actual = bs.bitSet(index = 1))
    assertTrue(actual = bs.get(index = 1))
    assertTrue(actual = bs.bitSet(index = 1).not())
    assertTrue(actual = bs.bitSet(index = 0).not())
    assertTrue(actual = bs.get(index = 0))
    assertTrue(actual = bs.bitClear(index = 0))
    assertTrue(actual = bs.bitClear(index = 0).not())
    assertTrue(actual = bs.get(index = 1))
  }

}

fun box(): String {
  val testClass: LockFreeIntBitsTest = LockFreeIntBitsTest()
  testClass.testBasic()
  return "OK"
}
