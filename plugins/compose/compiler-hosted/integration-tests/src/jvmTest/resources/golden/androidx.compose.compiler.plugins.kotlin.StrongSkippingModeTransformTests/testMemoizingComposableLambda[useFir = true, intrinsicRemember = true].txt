//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.runtime.ReadOnlyComposable


@Composable
fun Test(foo: Foo, bar: Bar) {
    val lambda: @Composable ()->Unit = {
        foo
        bar
    }
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(foo: Foo, bar: Bar, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changedInstance(foo)) 0b0100 else 0b0010
  }
  if (%changed and 0b00110000 == 0) {
    %dirty = %dirty or if (%composer.changed(bar)) 0b00100000 else 0b00010000
  }
  if (%dirty and 0b00010011 != 0b00010010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    val lambda = rememberComposableLambda(<>, true, { %composer: Composer?, %changed: Int ->
      if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
        if (isTraceInProgress()) {
          traceEventStart(<>, %changed, -1, <>)
        }
        foo
        bar
        if (isTraceInProgress()) {
          traceEventEnd()
        }
      } else {
        %composer.skipToGroupEnd()
      }
    }, %composer, 0b00110110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(foo, bar, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
