package

public typealias NA</*0*/ T>  = Num<T>
public typealias NL</*0*/ T>  = NumColl<kotlin.collections.List<T>>
public typealias TC</*0*/ T1, /*1*/ T2>  = TColl<T1, T2>
public val test13: TColl<kotlin.Number, kotlin.collections.Collection<kotlin.Number>>
public val test14: TColl<kotlin.Number, kotlin.collections.Collection<kotlin.Int>>
public val test15: TColl<kotlin.Number, kotlin.collections.List<kotlin.Int>>
public val test16: TColl<kotlin.Number, kotlin.collections.List<kotlin.Any>>
public val test5: Num<kotlin.Int>
public val test6: Num<kotlin.Any>
public val test7: NumColl<kotlin.collections.List<kotlin.Int>>
public val test8: NumColl<kotlin.collections.List<kotlin.Any>>
public fun test1(/*0*/ x: NA<kotlin.Int> [= Num<kotlin.Int>]): kotlin.Unit
public fun test10(/*0*/ x: TC<kotlin.Number, kotlin.collections.Collection<kotlin.Int>> [= TColl<kotlin.Number, kotlin.collections.Collection<kotlin.Int>>]): kotlin.Unit
public fun test11(/*0*/ x: TC<kotlin.Number, kotlin.collections.List<kotlin.Int>> [= TColl<kotlin.Number, kotlin.collections.List<kotlin.Int>>]): kotlin.Unit
public fun test12(/*0*/ x: TC<kotlin.Number, kotlin.collections.List<kotlin.Any>> [= TColl<kotlin.Number, kotlin.collections.List<kotlin.Any>>]): kotlin.Unit
public fun test2(/*0*/ x: NA<kotlin.Any> [= Num<kotlin.Any>]): kotlin.Unit
public fun test3(/*0*/ x: NL<kotlin.Int> [= NumColl<kotlin.collections.List<out kotlin.Int>>]): kotlin.Unit
public fun test4(/*0*/ x: NL<kotlin.Any> [= NumColl<kotlin.collections.List<out kotlin.Any>>]): kotlin.Unit
public fun test9(/*0*/ x: TC<kotlin.Number, kotlin.collections.Collection<kotlin.Number>> [= TColl<kotlin.Number, kotlin.collections.Collection<kotlin.Number>>]): kotlin.Unit

public final class Num</*0*/ T : kotlin.Number> {
    public constructor Num</*0*/ T : kotlin.Number>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class NumColl</*0*/ T : kotlin.collections.Collection<kotlin.Number>> {
    public constructor NumColl</*0*/ T : kotlin.collections.Collection<kotlin.Number>>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class TColl</*0*/ T, /*1*/ C : kotlin.collections.Collection<T>> {
    public constructor TColl</*0*/ T, /*1*/ C : kotlin.collections.Collection<T>>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
