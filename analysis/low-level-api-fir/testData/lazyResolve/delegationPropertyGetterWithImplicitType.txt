STATUS:
TARGET: public [ResolvedTo(STATUS)] get(): <implicit>
FILE: [ResolvedTo(IMPORTS)] delegationPropertyGetterWithImplicitType.kt
    public abstract [ResolvedTo(STATUS)] interface A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(STATUS)] var result: <implicit>
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] get(): <implicit> { LAZY_BLOCK }
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] set([ResolvedTo(STATUS)] value: <implicit>): R|kotlin/Unit| { LAZY_BLOCK }

        public open [ResolvedTo(STATUS)] fun get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /B.$$delegate_0}] class B : R|A<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor([ResolvedTo(STATUS)] a: R|A<kotlin/String>|): R|B| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|A<kotlin/String>| = LAZY_EXPRESSION

    }

EXPECT_ACTUAL_MATCHING:
TARGET: public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] get(): <implicit>
FILE: [ResolvedTo(IMPORTS)] delegationPropertyGetterWithImplicitType.kt
    public abstract [ResolvedTo(STATUS)] interface A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(EXPECT_ACTUAL_MATCHING)] var result: <implicit>
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=A] get(): <implicit> { LAZY_BLOCK }
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=A] set([ResolvedTo(EXPECT_ACTUAL_MATCHING)] value: <implicit>): R|kotlin/Unit| { LAZY_BLOCK }

        public open [ResolvedTo(STATUS)] fun get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /B.$$delegate_0}] class B : R|A<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor([ResolvedTo(STATUS)] a: R|A<kotlin/String>|): R|B| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|A<kotlin/String>| = LAZY_EXPRESSION

    }

CONTRACTS:
TARGET: public [ResolvedTo(CONTRACTS)] get(): <implicit>
FILE: [ResolvedTo(IMPORTS)] delegationPropertyGetterWithImplicitType.kt
    public abstract [ResolvedTo(STATUS)] interface A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(CONTRACTS)] var result: <implicit>
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=A] get(): <implicit> { LAZY_BLOCK }
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=A] set([ResolvedTo(CONTRACTS)] value: <implicit>): R|kotlin/Unit| { LAZY_BLOCK }

        public open [ResolvedTo(STATUS)] fun get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /B.$$delegate_0}] class B : R|A<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor([ResolvedTo(STATUS)] a: R|A<kotlin/String>|): R|B| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|A<kotlin/String>| = LAZY_EXPRESSION

    }

IMPLICIT_TYPES_BODY_RESOLVE:
TARGET: public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/String?|
FILE: [ResolvedTo(IMPORTS)] delegationPropertyGetterWithImplicitType.kt
    public abstract [ResolvedTo(STATUS)] interface A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] var result: R|T?|
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=A] get(): R|T?| {
                ^ this@R|/A|.R|/A.get|()
            }
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=A] set([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] value: R|T?|): R|kotlin/Unit| {
            }

        public open [ResolvedTo(CONTRACTS)] fun get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /B.$$delegate_0}] class B : R|A<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor([ResolvedTo(STATUS)] a: R|A<kotlin/String>|): R|B| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|A<kotlin/String>| = LAZY_EXPRESSION

    }

CONSTANT_EVALUATION:
TARGET: public [ResolvedTo(CONSTANT_EVALUATION)] get(): R|kotlin/String?|
FILE: [ResolvedTo(IMPORTS)] delegationPropertyGetterWithImplicitType.kt
    public abstract [ResolvedTo(STATUS)] interface A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(CONSTANT_EVALUATION)] var result: R|T?|
            public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=A] get(): R|T?| {
                ^ this@R|/A|.R|/A.get|()
            }
            public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=A] set([ResolvedTo(CONSTANT_EVALUATION)] value: R|T?|): R|kotlin/Unit| {
            }

        public open [ResolvedTo(CONTRACTS)] fun get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /B.$$delegate_0}] class B : R|A<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor([ResolvedTo(STATUS)] a: R|A<kotlin/String>|): R|B| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|A<kotlin/String>| = LAZY_EXPRESSION

    }

ANNOTATION_ARGUMENTS:
TARGET: public [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): R|kotlin/String?|
FILE: [ResolvedTo(IMPORTS)] delegationPropertyGetterWithImplicitType.kt
    public abstract [ResolvedTo(STATUS)] interface A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(ANNOTATION_ARGUMENTS)] var result: R|T?|
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=A] get(): R|T?| {
                ^ this@R|/A|.R|/A.get|()
            }
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=A] set([ResolvedTo(ANNOTATION_ARGUMENTS)] value: R|T?|): R|kotlin/Unit| {
            }

        public open [ResolvedTo(CONTRACTS)] fun get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /B.$$delegate_0}] class B : R|A<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor([ResolvedTo(STATUS)] a: R|A<kotlin/String>|): R|B| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|A<kotlin/String>| = LAZY_EXPRESSION

    }

BODY_RESOLVE:
TARGET: public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/String?|
FILE: [ResolvedTo(IMPORTS)] delegationPropertyGetterWithImplicitType.kt
    public abstract [ResolvedTo(STATUS)] interface A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(ANNOTATION_ARGUMENTS)] var result: R|T?|
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=A] get(): R|T?| {
                ^ this@R|/A|.R|/A.get|()
            }
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=A] set([ResolvedTo(ANNOTATION_ARGUMENTS)] value: R|T?|): R|kotlin/Unit| {
            }

        public open [ResolvedTo(CONTRACTS)] fun get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /B.$$delegate_0}] class B : R|A<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=B] constructor([ResolvedTo(STATUS)] a: R|A<kotlin/String>|): R|B| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|A<kotlin/String>| = LAZY_EXPRESSION

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] delegationPropertyGetterWithImplicitType.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface A<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
        public open [ResolvedTo(BODY_RESOLVE)] var result: R|T?|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] get(): R|T?| {
                ^ this@R|/A|.R|/A.get|()
            }
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] set([ResolvedTo(BODY_RESOLVE)] value: R|T?|): R|kotlin/Unit| {
            }

        public open [ResolvedTo(BODY_RESOLVE)] fun get(): R|T?| {
            ^get Null(null)
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] [DelegateFieldsMapKey={0=FirFieldSymbol /B.$$delegate_0}] class B : R|A<kotlin/String>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=B] constructor([ResolvedTo(BODY_RESOLVE)] a: R|A<kotlin/String>|): R|B| {
            super<R|kotlin/Any|>()
        }

        private final [ResolvedTo(BODY_RESOLVE)] field $$delegate_0: R|A<kotlin/String>| = R|<local>/a|

    }
