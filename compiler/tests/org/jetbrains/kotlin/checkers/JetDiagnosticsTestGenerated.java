/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.checkers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class JetDiagnosticsTestGenerated extends AbstractJetDiagnosticsTest {
    @TestMetadata("compiler/testData/diagnostics/tests")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Tests extends AbstractJetDiagnosticsTest {
        @TestMetadata("Abstract.kt")
        public void testAbstract() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Abstract.kt");
            doTest(fileName);
        }

        @TestMetadata("AbstractInAbstractClass.kt")
        public void testAbstractInAbstractClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/AbstractInAbstractClass.kt");
            doTest(fileName);
        }

        @TestMetadata("AbstractInClass.kt")
        public void testAbstractInClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/AbstractInClass.kt");
            doTest(fileName);
        }

        @TestMetadata("AbstractInTrait.kt")
        public void testAbstractInTrait() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/AbstractInTrait.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInTests() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("AnonymousInitializerVarAndConstructor.kt")
        public void testAnonymousInitializerVarAndConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/AnonymousInitializerVarAndConstructor.kt");
            doTest(fileName);
        }

        @TestMetadata("AnonymousInitializers.kt")
        public void testAnonymousInitializers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/AnonymousInitializers.kt");
            doTest(fileName);
        }

        @TestMetadata("AssignToArrayElement.kt")
        public void testAssignToArrayElement() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/AssignToArrayElement.kt");
            doTest(fileName);
        }

        @TestMetadata("AutoCreatedIt.kt")
        public void testAutoCreatedIt() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/AutoCreatedIt.kt");
            doTest(fileName);
        }

        @TestMetadata("Basic.kt")
        public void testBasic() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Basic.kt");
            doTest(fileName);
        }

        @TestMetadata("BinaryCallsOnNullableValues.kt")
        public void testBinaryCallsOnNullableValues() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/BinaryCallsOnNullableValues.kt");
            doTest(fileName);
        }

        @TestMetadata("Bounds.kt")
        public void testBounds() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Bounds.kt");
            doTest(fileName);
        }

        @TestMetadata("BreakContinue.kt")
        public void testBreakContinue() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/BreakContinue.kt");
            doTest(fileName);
        }

        @TestMetadata("BreakContinueInWhen.kt")
        public void testBreakContinueInWhen() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/BreakContinueInWhen.kt");
            doTest(fileName);
        }

        @TestMetadata("Builders.kt")
        public void testBuilders() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Builders.kt");
            doTest(fileName);
        }

        @TestMetadata("Casts.kt")
        public void testCasts() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Casts.kt");
            doTest(fileName);
        }

        @TestMetadata("CharacterLiterals.kt")
        public void testCharacterLiterals() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/CharacterLiterals.kt");
            doTest(fileName);
        }

        @TestMetadata("checkType.kt")
        public void testCheckType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/checkType.kt");
            doTest(fileName);
        }

        @TestMetadata("CompareToWithErrorType.kt")
        public void testCompareToWithErrorType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/CompareToWithErrorType.kt");
            doTest(fileName);
        }

        @TestMetadata("Constants.kt")
        public void testConstants() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Constants.kt");
            doTest(fileName);
        }

        @TestMetadata("Constructors.kt")
        public void testConstructors() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Constructors.kt");
            doTest(fileName);
        }

        @TestMetadata("ConstructorsOfPrimitives.kt")
        public void testConstructorsOfPrimitives() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ConstructorsOfPrimitives.kt");
            doTest(fileName);
        }

        @TestMetadata("CovariantOverrideType.kt")
        public void testCovariantOverrideType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/CovariantOverrideType.kt");
            doTest(fileName);
        }

        @TestMetadata("DefaultValuesTypechecking.kt")
        public void testDefaultValuesTypechecking() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/DefaultValuesTypechecking.kt");
            doTest(fileName);
        }

        @TestMetadata("DeferredTypes.kt")
        public void testDeferredTypes() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/DeferredTypes.kt");
            doTest(fileName);
        }

        @TestMetadata("DeprecatedTraitKeyword.kt")
        public void testDeprecatedTraitKeyword() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/DeprecatedTraitKeyword.kt");
            doTest(fileName);
        }

        @TestMetadata("DiamondFunction.kt")
        public void testDiamondFunction() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/DiamondFunction.kt");
            doTest(fileName);
        }

        @TestMetadata("DiamondFunctionGeneric.kt")
        public void testDiamondFunctionGeneric() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/DiamondFunctionGeneric.kt");
            doTest(fileName);
        }

        @TestMetadata("DiamondProperty.kt")
        public void testDiamondProperty() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/DiamondProperty.kt");
            doTest(fileName);
        }

        @TestMetadata("Dollar.kt")
        public void testDollar() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Dollar.kt");
            doTest(fileName);
        }

        @TestMetadata("fileDependencyRecursion.kt")
        public void testFileDependencyRecursion() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/fileDependencyRecursion.kt");
            doTest(fileName);
        }

        @TestMetadata("ForRangeConventions.kt")
        public void testForRangeConventions() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ForRangeConventions.kt");
            doTest(fileName);
        }

        @TestMetadata("FreeFunctionCalledAsExtension.kt")
        public void testFreeFunctionCalledAsExtension() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/FreeFunctionCalledAsExtension.kt");
            doTest(fileName);
        }

        @TestMetadata("FunctionCalleeExpressions.kt")
        public void testFunctionCalleeExpressions() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/FunctionCalleeExpressions.kt");
            doTest(fileName);
        }

        @TestMetadata("FunctionParameterWithoutType.kt")
        public void testFunctionParameterWithoutType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/FunctionParameterWithoutType.kt");
            doTest(fileName);
        }

        @TestMetadata("FunctionReturnTypes.kt")
        public void testFunctionReturnTypes() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/FunctionReturnTypes.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericArgumentConsistency.kt")
        public void testGenericArgumentConsistency() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/GenericArgumentConsistency.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericFunctionIsLessSpecific.kt")
        public void testGenericFunctionIsLessSpecific() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/GenericFunctionIsLessSpecific.kt");
            doTest(fileName);
        }

        @TestMetadata("IncDec.kt")
        public void testIncDec() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/IncDec.kt");
            doTest(fileName);
        }

        @TestMetadata("IncorrectCharacterLiterals.kt")
        public void testIncorrectCharacterLiterals() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/IncorrectCharacterLiterals.kt");
            doTest(fileName);
        }

        @TestMetadata("InferNullabilityInThenBlock.kt")
        public void testInferNullabilityInThenBlock() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/InferNullabilityInThenBlock.kt");
            doTest(fileName);
        }

        @TestMetadata("IsExpressions.kt")
        public void testIsExpressions() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/IsExpressions.kt");
            doTest(fileName);
        }

        @TestMetadata("kt310.kt")
        public void testKt310() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/kt310.kt");
            doTest(fileName);
        }

        @TestMetadata("kt53.kt")
        public void testKt53() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/kt53.kt");
            doTest(fileName);
        }

        @TestMetadata("LValueAssignment.kt")
        public void testLValueAssignment() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/LValueAssignment.kt");
            doTest(fileName);
        }

        @TestMetadata("LocalClassAndShortSubpackageNames.kt")
        public void testLocalClassAndShortSubpackageNames() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/LocalClassAndShortSubpackageNames.kt");
            doTest(fileName);
        }

        @TestMetadata("MultilineStringTemplates.kt")
        public void testMultilineStringTemplates() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/MultilineStringTemplates.kt");
            doTest(fileName);
        }

        @TestMetadata("MultipleBounds.kt")
        public void testMultipleBounds() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/MultipleBounds.kt");
            doTest(fileName);
        }

        @TestMetadata("Nullability.kt")
        public void testNullability() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Nullability.kt");
            doTest(fileName);
        }

        @TestMetadata("ObjectWithConstructor.kt")
        public void testObjectWithConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ObjectWithConstructor.kt");
            doTest(fileName);
        }

        @TestMetadata("OverrideFunctionWithParamDefaultValue.kt")
        public void testOverrideFunctionWithParamDefaultValue() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/OverrideFunctionWithParamDefaultValue.kt");
            doTest(fileName);
        }

        @TestMetadata("OverridenFunctionAndSpecifiedTypeParameter.kt")
        public void testOverridenFunctionAndSpecifiedTypeParameter() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/OverridenFunctionAndSpecifiedTypeParameter.kt");
            doTest(fileName);
        }

        @TestMetadata("OverridingVarByVal.kt")
        public void testOverridingVarByVal() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/OverridingVarByVal.kt");
            doTest(fileName);
        }

        @TestMetadata("PackageAsExpression.kt")
        public void testPackageAsExpression() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/PackageAsExpression.kt");
            doTest(fileName);
        }

        @TestMetadata("PackageInExpressionPosition.kt")
        public void testPackageInExpressionPosition() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/PackageInExpressionPosition.kt");
            doTest(fileName);
        }

        @TestMetadata("PackageInTypePosition.kt")
        public void testPackageInTypePosition() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/PackageInTypePosition.kt");
            doTest(fileName);
        }

        @TestMetadata("PackageQualified.kt")
        public void testPackageQualified() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/PackageQualified.kt");
            doTest(fileName);
        }

        @TestMetadata("PrimaryConstructors.kt")
        public void testPrimaryConstructors() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/PrimaryConstructors.kt");
            doTest(fileName);
        }

        @TestMetadata("PrivateFromOuterPackage.kt")
        public void testPrivateFromOuterPackage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/PrivateFromOuterPackage.kt");
            doTest(fileName);
        }

        @TestMetadata("ProcessingEmptyImport.kt")
        public void testProcessingEmptyImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ProcessingEmptyImport.kt");
            doTest(fileName);
        }

        @TestMetadata("ProjectionOnFunctionArgumentErrror.kt")
        public void testProjectionOnFunctionArgumentErrror() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ProjectionOnFunctionArgumentErrror.kt");
            doTest(fileName);
        }

        @TestMetadata("ProjectionsInSupertypes.kt")
        public void testProjectionsInSupertypes() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ProjectionsInSupertypes.kt");
            doTest(fileName);
        }

        @TestMetadata("Properties.kt")
        public void testProperties() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Properties.kt");
            doTest(fileName);
        }

        @TestMetadata("PropertyInitializers.kt")
        public void testPropertyInitializers() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/PropertyInitializers.kt");
            doTest(fileName);
        }

        @TestMetadata("QualifiedExpressions.kt")
        public void testQualifiedExpressions() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/QualifiedExpressions.kt");
            doTest(fileName);
        }

        @TestMetadata("RecursiveResolve.kt")
        public void testRecursiveResolve() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/RecursiveResolve.kt");
            doTest(fileName);
        }

        @TestMetadata("RecursiveTypeInference.kt")
        public void testRecursiveTypeInference() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/RecursiveTypeInference.kt");
            doTest(fileName);
        }

        @TestMetadata("ResolveOfJavaGenerics.kt")
        public void testResolveOfJavaGenerics() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ResolveOfJavaGenerics.kt");
            doTest(fileName);
        }

        @TestMetadata("ResolveToJava.kt")
        public void testResolveToJava() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ResolveToJava.kt");
            doTest(fileName);
        }

        @TestMetadata("Return.kt")
        public void testReturn() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Return.kt");
            doTest(fileName);
        }

        @TestMetadata("SafeCallNonNullReceiver.kt")
        public void testSafeCallNonNullReceiver() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/SafeCallNonNullReceiver.kt");
            doTest(fileName);
        }

        @TestMetadata("SafeCallNonNullReceiverReturnNull.kt")
        public void testSafeCallNonNullReceiverReturnNull() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/SafeCallNonNullReceiverReturnNull.kt");
            doTest(fileName);
        }

        @TestMetadata("SafeCallOnFakePackage.kt")
        public void testSafeCallOnFakePackage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/SafeCallOnFakePackage.kt");
            doTest(fileName);
        }

        @TestMetadata("SelfTypesUnsupported.kt")
        public void testSelfTypesUnsupported() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/SelfTypesUnsupported.kt");
            doTest(fileName);
        }

        @TestMetadata("ShiftFunctionTypes.kt")
        public void testShiftFunctionTypes() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ShiftFunctionTypes.kt");
            doTest(fileName);
        }

        @TestMetadata("StarsInFunctionCalls.kt")
        public void testStarsInFunctionCalls() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/StarsInFunctionCalls.kt");
            doTest(fileName);
        }

        @TestMetadata("StringTemplates.kt")
        public void testStringTemplates() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/StringTemplates.kt");
            doTest(fileName);
        }

        @TestMetadata("SupertypeListChecks.kt")
        public void testSupertypeListChecks() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/SupertypeListChecks.kt");
            doTest(fileName);
        }

        @TestMetadata("SyntaxErrorInTestHighlighting.kt")
        public void testSyntaxErrorInTestHighlighting() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlighting.kt");
            doTest(fileName);
        }

        @TestMetadata("SyntaxErrorInTestHighlightingEof.kt")
        public void testSyntaxErrorInTestHighlightingEof() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlightingEof.kt");
            doTest(fileName);
        }

        @TestMetadata("TraitOverrideObjectMethods.kt")
        public void testTraitOverrideObjectMethods() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/TraitOverrideObjectMethods.kt");
            doTest(fileName);
        }

        @TestMetadata("TraitWithConstructor.kt")
        public void testTraitWithConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/TraitWithConstructor.kt");
            doTest(fileName);
        }

        @TestMetadata("TypeInference.kt")
        public void testTypeInference() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/TypeInference.kt");
            doTest(fileName);
        }

        @TestMetadata("TypeMismatchOnOverrideWithSyntaxErrors.kt")
        public void testTypeMismatchOnOverrideWithSyntaxErrors() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/TypeMismatchOnOverrideWithSyntaxErrors.kt");
            doTest(fileName);
        }

        @TestMetadata("UnitByDefaultForFunctionTypes.kt")
        public void testUnitByDefaultForFunctionTypes() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/UnitByDefaultForFunctionTypes.kt");
            doTest(fileName);
        }

        @TestMetadata("UnitValue.kt")
        public void testUnitValue() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/UnitValue.kt");
            doTest(fileName);
        }

        @TestMetadata("Unresolved.kt")
        public void testUnresolved() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Unresolved.kt");
            doTest(fileName);
        }

        @TestMetadata("UnusedParameters.kt")
        public void testUnusedParameters() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/UnusedParameters.kt");
            doTest(fileName);
        }

        @TestMetadata("UnusedVariables.kt")
        public void testUnusedVariables() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/UnusedVariables.kt");
            doTest(fileName);
        }

        @TestMetadata("ValAndFunOverrideCompatibilityClash.kt")
        public void testValAndFunOverrideCompatibilityClash() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/ValAndFunOverrideCompatibilityClash.kt");
            doTest(fileName);
        }

        @TestMetadata("VarargTypes.kt")
        public void testVarargTypes() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/VarargTypes.kt");
            doTest(fileName);
        }

        @TestMetadata("Varargs.kt")
        public void testVarargs() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Varargs.kt");
            doTest(fileName);
        }

        @TestMetadata("Variance.kt")
        public void testVariance() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/Variance.kt");
            doTest(fileName);
        }

        @TestMetadata("compiler/testData/diagnostics/tests/annotations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Annotations extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInAnnotations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AmbigiousAnnotationConstructor.kt")
            public void testAmbigiousAnnotationConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AmbigiousAnnotationConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotatedConstructor.kt")
            public void testAnnotatedConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotatedConstructorParams.kt")
            public void testAnnotatedConstructorParams() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructorParams.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotatedLocalObjectFun.kt")
            public void testAnnotatedLocalObjectFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotatedLocalObjectFun.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotatedLocalObjectProperty.kt")
            public void testAnnotatedLocalObjectProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotatedLocalObjectProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotatedLoop.kt")
            public void testAnnotatedLoop() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotatedLoop.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotatedResultType.kt")
            public void testAnnotatedResultType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotatedResultType.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotatedTryCatch.kt")
            public void testAnnotatedTryCatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotatedTryCatch.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotationAsDefaultParameter.kt")
            public void testAnnotationAsDefaultParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotationAsDefaultParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotationForClassTypeParameter.kt")
            public void testAnnotationForClassTypeParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotationForFunctionTypeParameter.kt")
            public void testAnnotationForFunctionTypeParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotationForFunctionTypeParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotationForObject.kt")
            public void testAnnotationForObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotationForObject.kt");
                doTest(fileName);
            }

            @TestMetadata("annotationInheritance.kt")
            public void testAnnotationInheritance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationInheritance.kt");
                doTest(fileName);
            }

            @TestMetadata("annotationModifier.kt")
            public void testAnnotationModifier() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationModifier.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotationOnObject.kt")
            public void testAnnotationOnObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotationOnObject.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotationsForClasses.kt")
            public void testAnnotationsForClasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotationsForClasses.kt");
                doTest(fileName);
            }

            @TestMetadata("AnnotationsForPropertyTypeParameter.kt")
            public void testAnnotationsForPropertyTypeParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/AnnotationsForPropertyTypeParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("annotationsOnLambdaAsCallArgument.kt")
            public void testAnnotationsOnLambdaAsCallArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationsOnLambdaAsCallArgument.kt");
                doTest(fileName);
            }

            @TestMetadata("atAnnotationResolve.kt")
            public void testAtAnnotationResolve() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/atAnnotationResolve.kt");
                doTest(fileName);
            }

            @TestMetadata("BasicAnnotations.kt")
            public void testBasicAnnotations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/BasicAnnotations.kt");
                doTest(fileName);
            }

            @TestMetadata("ConstructorCall.kt")
            public void testConstructorCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/ConstructorCall.kt");
                doTest(fileName);
            }

            @TestMetadata("DanglingInScript.kt")
            public void testDanglingInScript() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/DanglingInScript.kt");
                doTest(fileName);
            }

            @TestMetadata("DanglingMixed.kt")
            public void testDanglingMixed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/DanglingMixed.kt");
                doTest(fileName);
            }

            @TestMetadata("DanglingNoBrackets.kt")
            public void testDanglingNoBrackets() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/DanglingNoBrackets.kt");
                doTest(fileName);
            }

            @TestMetadata("DanglingWithBrackets.kt")
            public void testDanglingWithBrackets() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/DanglingWithBrackets.kt");
                doTest(fileName);
            }

            @TestMetadata("Deprecated.kt")
            public void testDeprecated() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/Deprecated.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionFunctionType.kt")
            public void testExtensionFunctionType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/extensionFunctionType.kt");
                doTest(fileName);
            }

            @TestMetadata("forParameterAnnotationResolve.kt")
            public void testForParameterAnnotationResolve() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/forParameterAnnotationResolve.kt");
                doTest(fileName);
            }

            @TestMetadata("invalidTypesInAnnotationConstructor.kt")
            public void testInvalidTypesInAnnotationConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/invalidTypesInAnnotationConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("JavaAnnotationConstructors.kt")
            public void testJavaAnnotationConstructors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/JavaAnnotationConstructors.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1860-negative.kt")
            public void testKt1860_negative() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/kt1860-negative.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1860-positive.kt")
            public void testKt1860_positive() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/kt1860-positive.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1886annotationBody.kt")
            public void testKt1886annotationBody() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/kt1886annotationBody.kt");
                doTest(fileName);
            }

            @TestMetadata("missingValOnParameter.kt")
            public void testMissingValOnParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/missingValOnParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("MutuallyRecursivelyAnnotatedGlobalFunction.kt")
            public void testMutuallyRecursivelyAnnotatedGlobalFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/MutuallyRecursivelyAnnotatedGlobalFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("noNameProperty.kt")
            public void testNoNameProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/noNameProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("NonAnnotationClass.kt")
            public void testNonAnnotationClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/NonAnnotationClass.kt");
                doTest(fileName);
            }

            @TestMetadata("onExpression.kt")
            public void testOnExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/onExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("onFunctionParameter.kt")
            public void testOnFunctionParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/onFunctionParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("onInitializer.kt")
            public void testOnInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/onInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("onLoops.kt")
            public void testOnLoops() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/onLoops.kt");
                doTest(fileName);
            }

            @TestMetadata("onLoopsUnreachable.kt")
            public void testOnLoopsUnreachable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/onLoopsUnreachable.kt");
                doTest(fileName);
            }

            @TestMetadata("onMultiDeclaration.kt")
            public void testOnMultiDeclaration() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/onMultiDeclaration.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyAnnotated.kt")
            public void testRecursivelyAnnotated() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotated.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyAnnotatedFunctionParameter.kt")
            public void testRecursivelyAnnotatedFunctionParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedFunctionParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyAnnotatedGlobalFunction.kt")
            public void testRecursivelyAnnotatedGlobalFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedGlobalFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyAnnotatedGlobalProperty.kt")
            public void testRecursivelyAnnotatedGlobalProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedGlobalProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyAnnotatedParameter.kt")
            public void testRecursivelyAnnotatedParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyAnnotatedParameterType.kt")
            public void testRecursivelyAnnotatedParameterType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameterType.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyAnnotatedParameterWithAt.kt")
            public void testRecursivelyAnnotatedParameterWithAt() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameterWithAt.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyAnnotatedProperty.kt")
            public void testRecursivelyAnnotatedProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursivelyIncorrectlyAnnotatedParameter.kt")
            public void testRecursivelyIncorrectlyAnnotatedParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/RecursivelyIncorrectlyAnnotatedParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("typeAnnotations.kt")
            public void testTypeAnnotations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/typeAnnotations.kt");
                doTest(fileName);
            }

            @TestMetadata("typeParameterAsAnnotation.kt")
            public void testTypeParameterAsAnnotation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/typeParameterAsAnnotation.kt");
                doTest(fileName);
            }

            @TestMetadata("UnresolvedAnnotationOnObject.kt")
            public void testUnresolvedAnnotationOnObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/UnresolvedAnnotationOnObject.kt");
                doTest(fileName);
            }

            @TestMetadata("unresolvedReferenceRange.kt")
            public void testUnresolvedReferenceRange() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/unresolvedReferenceRange.kt");
                doTest(fileName);
            }

            @TestMetadata("WrongAnnotationArgsOnObject.kt")
            public void testWrongAnnotationArgsOnObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/WrongAnnotationArgsOnObject.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AnnotationParameterMustBeConstant extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInAnnotationParameterMustBeConstant() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("booleanLocalVal.kt")
                public void testBooleanLocalVal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/booleanLocalVal.kt");
                    doTest(fileName);
                }

                @TestMetadata("compareAndEquals.kt")
                public void testCompareAndEquals() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/compareAndEquals.kt");
                    doTest(fileName);
                }

                @TestMetadata("enumConst.kt")
                public void testEnumConst() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/enumConst.kt");
                    doTest(fileName);
                }

                @TestMetadata("javaProperties.kt")
                public void testJavaProperties() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/javaProperties.kt");
                    doTest(fileName);
                }

                @TestMetadata("kotlinProperties.kt")
                public void testKotlinProperties() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/kotlinProperties.kt");
                    doTest(fileName);
                }

                @TestMetadata("strings.kt")
                public void testStrings() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/strings.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/annotations/options")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Options extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInOptions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/options"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("annotation.kt")
                public void testAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/annotation.kt");
                    doTest(fileName);
                }

                @TestMetadata("annotationAsArg.kt")
                public void testAnnotationAsArg() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/annotationAsArg.kt");
                    doTest(fileName);
                }

                @TestMetadata("annotationAsArgComplex.kt")
                public void testAnnotationAsArgComplex() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/annotationAsArgComplex.kt");
                    doTest(fileName);
                }

                @TestMetadata("brackets.kt")
                public void testBrackets() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/brackets.kt");
                    doTest(fileName);
                }

                @TestMetadata("repeatable.kt")
                public void testRepeatable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/repeatable.kt");
                    doTest(fileName);
                }

                @TestMetadata("retention.kt")
                public void testRetention() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/retention.kt");
                    doTest(fileName);
                }

                @TestMetadata("target.kt")
                public void testTarget() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/target.kt");
                    doTest(fileName);
                }

                @TestMetadata("compiler/testData/diagnostics/tests/annotations/options/targets")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Targets extends AbstractJetDiagnosticsTest {
                    @TestMetadata("accessors.kt")
                    public void testAccessors() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/accessors.kt");
                        doTest(fileName);
                    }

                    public void testAllFilesPresentInTargets() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/annotations/options/targets"), Pattern.compile("^(.+)\\.kt$"), true);
                    }

                    @TestMetadata("annotation.kt")
                    public void testAnnotation() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/annotation.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("classifier.kt")
                    public void testClassifier() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/classifier.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("constructor.kt")
                    public void testConstructor() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/constructor.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("empty.kt")
                    public void testEmpty() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/empty.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("expr.kt")
                    public void testExpr() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/expr.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("file.kt")
                    public void testFile() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/file.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("function.kt")
                    public void testFunction() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/function.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("funtypeargs.kt")
                    public void testFuntypeargs() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/funtypeargs.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("incorrect.kt")
                    public void testIncorrect() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/incorrect.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("init.kt")
                    public void testInit() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/init.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("local.kt")
                    public void testLocal() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/local.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("nested.kt")
                    public void testNested() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/nested.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("property.kt")
                    public void testProperty() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/property.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("returntype.kt")
                    public void testReturntype() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/returntype.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("suppress.kt")
                    public void testSuppress() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/suppress.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("type.kt")
                    public void testType() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/type.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("typeargs.kt")
                    public void testTypeargs() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/typeargs.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("valueparam.kt")
                    public void testValueparam() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/annotations/options/targets/valueparam.kt");
                        doTest(fileName);
                    }
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/backingField")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class BackingField extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInBackingField() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/backingField"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("CustomGetSet.kt")
            public void testCustomGetSet() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/CustomGetSet.kt");
                doTest(fileName);
            }

            @TestMetadata("CustomGetVal.kt")
            public void testCustomGetVal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/CustomGetVal.kt");
                doTest(fileName);
            }

            @TestMetadata("CustomGetValGlobal.kt")
            public void testCustomGetValGlobal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/CustomGetValGlobal.kt");
                doTest(fileName);
            }

            @TestMetadata("CustomGetVar.kt")
            public void testCustomGetVar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/CustomGetVar.kt");
                doTest(fileName);
            }

            @TestMetadata("CustomSet.kt")
            public void testCustomSet() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/CustomSet.kt");
                doTest(fileName);
            }

            @TestMetadata("CyclicReferenceInitializer.kt")
            public void testCyclicReferenceInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/CyclicReferenceInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("kt462BackingFieldsResolve.kt")
            public void testKt462BackingFieldsResolve() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/kt462BackingFieldsResolve.kt");
                doTest(fileName);
            }

            @TestMetadata("kt782packageLevel.kt")
            public void testKt782packageLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/kt782packageLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("qualifiedWithThis.kt")
            public void testQualifiedWithThis() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/qualifiedWithThis.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadForwardInAnonymous.kt")
            public void testReadForwardInAnonymous() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadForwardInAnonymous.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadForwardInPropertyInitializer.kt")
            public void testReadForwardInPropertyInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadForwardInPropertyInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadInAnonymous.kt")
            public void testReadInAnonymous() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadInAnonymous.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadInAnotherPropertyIntializer.kt")
            public void testReadInAnotherPropertyIntializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadInAnotherPropertyIntializer.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadInFunction.kt")
            public void testReadInFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadInFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadNonexistentAbstractPropertyInAnonymous.kt")
            public void testReadNonexistentAbstractPropertyInAnonymous() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadNonexistentAbstractPropertyInAnonymous.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadNonexistentAbstractPropertyInFunction.kt")
            public void testReadNonexistentAbstractPropertyInFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadNonexistentAbstractPropertyInFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadNonexistentCustomGetInAnonymous.kt")
            public void testReadNonexistentCustomGetInAnonymous() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadNonexistentCustomGetInAnonymous.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadNonexistentCustomGetInAnotherInitializer.kt")
            public void testReadNonexistentCustomGetInAnotherInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadNonexistentCustomGetInAnotherInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadNonexistentDeclaredInHigher.kt")
            public void testReadNonexistentDeclaredInHigher() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadNonexistentDeclaredInHigher.kt");
                doTest(fileName);
            }

            @TestMetadata("ReadNonexistentPropertyInAnonymous.kt")
            public void testReadNonexistentPropertyInAnonymous() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/ReadNonexistentPropertyInAnonymous.kt");
                doTest(fileName);
            }

            @TestMetadata("WriteNonexistentDeclaredInHigher.kt")
            public void testWriteNonexistentDeclaredInHigher() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/backingField/WriteNonexistentDeclaredInHigher.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/callableReference")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CallableReference extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInCallableReference() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("kt7430_wrongClassOnLHS.kt")
            public void testKt7430_wrongClassOnLHS() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/kt7430_wrongClassOnLHS.kt");
                doTest(fileName);
            }

            @TestMetadata("unused.kt")
            public void testUnused() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/unused.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/callableReference/function")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Function extends AbstractJetDiagnosticsTest {
                @TestMetadata("abstractClassConstructors.kt")
                public void testAbstractClassConstructors() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/abstractClassConstructors.kt");
                    doTest(fileName);
                }

                public void testAllFilesPresentInFunction() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/function"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("ambiguityTopLevelVsTopLevel.kt")
                public void testAmbiguityTopLevelVsTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/ambiguityTopLevelVsTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("callableRefrenceOnNestedObject.kt")
                public void testCallableRefrenceOnNestedObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/callableRefrenceOnNestedObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("constructorFromClass.kt")
                public void testConstructorFromClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/constructorFromClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("constructorFromExtension.kt")
                public void testConstructorFromExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/constructorFromExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("constructorFromExtensionInClass.kt")
                public void testConstructorFromExtensionInClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/constructorFromExtensionInClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("constructorFromTopLevel.kt")
                public void testConstructorFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/constructorFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentPackageClass.kt")
                public void testDifferentPackageClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/differentPackageClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentPackageExtension.kt")
                public void testDifferentPackageExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/differentPackageExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentPackageTopLevel.kt")
                public void testDifferentPackageTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/differentPackageTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("empty.kt")
                public void testEmpty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/empty.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionFromClass.kt")
                public void testExtensionFromClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/extensionFromClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionFromExtension.kt")
                public void testExtensionFromExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/extensionFromExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionFromExtensionInClass.kt")
                public void testExtensionFromExtensionInClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/extensionFromExtensionInClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionFromTopLevel.kt")
                public void testExtensionFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/extensionFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionInClassDisallowed.kt")
                public void testExtensionInClassDisallowed() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/extensionInClassDisallowed.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionOnNullable.kt")
                public void testExtensionOnNullable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/extensionOnNullable.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericClassFromTopLevel.kt")
                public void testGenericClassFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/genericClassFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("importedInnerConstructor.kt")
                public void testImportedInnerConstructor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/importedInnerConstructor.kt");
                    doTest(fileName);
                }

                @TestMetadata("innerConstructorFromClass.kt")
                public void testInnerConstructorFromClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("innerConstructorFromExtension.kt")
                public void testInnerConstructorFromExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("innerConstructorFromTopLevel.kt")
                public void testInnerConstructorFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("javaStaticMethod.kt")
                public void testJavaStaticMethod() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/javaStaticMethod.kt");
                    doTest(fileName);
                }

                @TestMetadata("lhsNotAClass.kt")
                public void testLhsNotAClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/lhsNotAClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localConstructor.kt")
                public void testLocalConstructor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/localConstructor.kt");
                    doTest(fileName);
                }

                @TestMetadata("localConstructorFromExtensionInLocalClass.kt")
                public void testLocalConstructorFromExtensionInLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromExtensionInLocalClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localConstructorFromLocalClass.kt")
                public void testLocalConstructorFromLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromLocalClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localConstructorFromLocalExtension.kt")
                public void testLocalConstructorFromLocalExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromLocalExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("localNamedFun.kt")
                public void testLocalNamedFun() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/localNamedFun.kt");
                    doTest(fileName);
                }

                @TestMetadata("localNamedFunFromExtensionInLocalClass.kt")
                public void testLocalNamedFunFromExtensionInLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromExtensionInLocalClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localNamedFunFromLocalClass.kt")
                public void testLocalNamedFunFromLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromLocalClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localNamedFunFromLocalExtension.kt")
                public void testLocalNamedFunFromLocalExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromLocalExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("longQualifiedName.kt")
                public void testLongQualifiedName() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/longQualifiedName.kt");
                    doTest(fileName);
                }

                @TestMetadata("longQualifiedNameGeneric.kt")
                public void testLongQualifiedNameGeneric() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/longQualifiedNameGeneric.kt");
                    doTest(fileName);
                }

                @TestMetadata("memberFromClass.kt")
                public void testMemberFromClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/memberFromClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("memberFromExtension.kt")
                public void testMemberFromExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/memberFromExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("memberFromExtensionInClass.kt")
                public void testMemberFromExtensionInClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/memberFromExtensionInClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("memberFromTopLevel.kt")
                public void testMemberFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/memberFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedConstructorFromClass.kt")
                public void testNestedConstructorFromClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedConstructorFromExtension.kt")
                public void testNestedConstructorFromExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedConstructorFromTopLevel.kt")
                public void testNestedConstructorFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("noAmbiguityLocalVsTopLevel.kt")
                public void testNoAmbiguityLocalVsTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityLocalVsTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("noAmbiguityMemberVsExtension.kt")
                public void testNoAmbiguityMemberVsExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityMemberVsExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("noAmbiguityMemberVsTopLevel.kt")
                public void testNoAmbiguityMemberVsTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityMemberVsTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("renameOnImport.kt")
                public void testRenameOnImport() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/renameOnImport.kt");
                    doTest(fileName);
                }

                @TestMetadata("topLevelFromClass.kt")
                public void testTopLevelFromClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("topLevelFromExtension.kt")
                public void testTopLevelFromExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("topLevelFromExtensionInClass.kt")
                public void testTopLevelFromExtensionInClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromExtensionInClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("topLevelFromTopLevel.kt")
                public void testTopLevelFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/topLevelFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("unresolved.kt")
                public void testUnresolved() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/function/unresolved.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/callableReference/property")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Property extends AbstractJetDiagnosticsTest {
                @TestMetadata("abstractPropertyViaSubclasses.kt")
                public void testAbstractPropertyViaSubclasses() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/abstractPropertyViaSubclasses.kt");
                    doTest(fileName);
                }

                @TestMetadata("accessViaSubclass.kt")
                public void testAccessViaSubclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/accessViaSubclass.kt");
                    doTest(fileName);
                }

                public void testAllFilesPresentInProperty() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/callableReference/property"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("classFromClass.kt")
                public void testClassFromClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/classFromClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionFromClass.kt")
                public void testExtensionFromClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/extensionFromClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionFromTopLevel.kt")
                public void testExtensionFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/extensionFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionPropertyOnNullable.kt")
                public void testExtensionPropertyOnNullable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/extensionPropertyOnNullable.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericClass.kt")
                public void testGenericClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/genericClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("javaInstanceField.kt")
                public void testJavaInstanceField() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/javaInstanceField.kt");
                    doTest(fileName);
                }

                @TestMetadata("javaStaticFieldViaImport.kt")
                public void testJavaStaticFieldViaImport() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/javaStaticFieldViaImport.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt7564.kt")
                public void testKt7564() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/kt7564.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt7945_unrelatedClass.kt")
                public void testKt7945_unrelatedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/kt7945_unrelatedClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localVariable.kt")
                public void testLocalVariable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/localVariable.kt");
                    doTest(fileName);
                }

                @TestMetadata("memberFromExtension.kt")
                public void testMemberFromExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/memberFromExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("memberFromTopLevel.kt")
                public void testMemberFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/memberFromTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("samePriorityForFunctionsAndProperties.kt")
                public void testSamePriorityForFunctionsAndProperties() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/samePriorityForFunctionsAndProperties.kt");
                    doTest(fileName);
                }

                @TestMetadata("topLevelFromTopLevel.kt")
                public void testTopLevelFromTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/callableReference/property/topLevelFromTopLevel.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/cast")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Cast extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInCast() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cast"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AsErasedError.kt")
            public void testAsErasedError() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/AsErasedError.kt");
                doTest(fileName);
            }

            @TestMetadata("AsErasedFine.kt")
            public void testAsErasedFine() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/AsErasedFine.kt");
                doTest(fileName);
            }

            @TestMetadata("AsErasedStar.kt")
            public void testAsErasedStar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/AsErasedStar.kt");
                doTest(fileName);
            }

            @TestMetadata("AsErasedWarning.kt")
            public void testAsErasedWarning() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/AsErasedWarning.kt");
                doTest(fileName);
            }

            @TestMetadata("constants.kt")
            public void testConstants() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/constants.kt");
                doTest(fileName);
            }

            @TestMetadata("DowncastMap.kt")
            public void testDowncastMap() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/DowncastMap.kt");
                doTest(fileName);
            }

            @TestMetadata("IsArray.kt")
            public void testIsArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsArray.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt")
            public void testIsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowForExactSupertypeCheck.kt")
            public void testIsErasedAllowForExactSupertypeCheck() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowForExactSupertypeCheck.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowForOverridenVarianceWithProjection.kt")
            public void testIsErasedAllowForOverridenVarianceWithProjection() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowForOverridenVarianceWithProjection.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowForSupertypeCheckWithContrvariance.kt")
            public void testIsErasedAllowForSupertypeCheckWithContrvariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithContrvariance.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowForSupertypeCheckWithCovariance.kt")
            public void testIsErasedAllowForSupertypeCheckWithCovariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithCovariance.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowForTypeWithIrrelevantMixin.kt")
            public void testIsErasedAllowForTypeWithIrrelevantMixin() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithIrrelevantMixin.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt")
            public void testIsErasedAllowForTypeWithTwoSameTypeSubstitutions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowForTypeWithoutTypeArguments.kt")
            public void testIsErasedAllowForTypeWithoutTypeArguments() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithoutTypeArguments.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowFromOut.kt")
            public void testIsErasedAllowFromOut() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowFromOut2.kt")
            public void testIsErasedAllowFromOut2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut2.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowFromOutAtClass.kt")
            public void testIsErasedAllowFromOutAtClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOutAtClass.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowParameterSubtype.kt")
            public void testIsErasedAllowParameterSubtype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowParameterSubtype.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowSameClassParameter.kt")
            public void testIsErasedAllowSameClassParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameClassParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedAllowSameParameterParameter.kt")
            public void testIsErasedAllowSameParameterParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameParameterParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("isErasedAnyAndStarred.kt")
            public void testIsErasedAnyAndStarred() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/isErasedAnyAndStarred.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDisallowDifferentArgInvariantPosition.kt")
            public void testIsErasedDisallowDifferentArgInvariantPosition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDisallowDifferentArgInvariantPosition.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDisallowForOverridenVariance.kt")
            public void testIsErasedDisallowForOverridenVariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDisallowForOverridenVariance.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDisallowForTypeWithConstraints.kt")
            public void testIsErasedDisallowForTypeWithConstraints() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDisallowForTypeWithConstraints.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDisallowFromAny.kt")
            public void testIsErasedDisallowFromAny() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromAny.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDisallowFromIn.kt")
            public void testIsErasedDisallowFromIn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromIn.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDisallowFromOut.kt")
            public void testIsErasedDisallowFromOut() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOut.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDisallowFromOutAtClass.kt")
            public void testIsErasedDisallowFromOutAtClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOutAtClass.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt")
            public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt")
            public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedNonGeneric.kt")
            public void testIsErasedNonGeneric() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedNonGeneric.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedNullableTasT.kt")
            public void testIsErasedNullableTasT() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedNullableTasT.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedStar.kt")
            public void testIsErasedStar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedStar.kt");
                doTest(fileName);
            }

            @TestMetadata("isErasedTAndStarred.kt")
            public void testIsErasedTAndStarred() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/isErasedTAndStarred.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedTasT.kt")
            public void testIsErasedTasT() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedTasT.kt");
                doTest(fileName);
            }

            @TestMetadata("IsErasedToErrorType.kt")
            public void testIsErasedToErrorType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsErasedToErrorType.kt");
                doTest(fileName);
            }

            @TestMetadata("isErasedUnrelatedAndStarred.kt")
            public void testIsErasedUnrelatedAndStarred() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/isErasedUnrelatedAndStarred.kt");
                doTest(fileName);
            }

            @TestMetadata("IsRecursionSustainable.kt")
            public void testIsRecursionSustainable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsRecursionSustainable.kt");
                doTest(fileName);
            }

            @TestMetadata("IsReified.kt")
            public void testIsReified() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsReified.kt");
                doTest(fileName);
            }

            @TestMetadata("IsTraits.kt")
            public void testIsTraits() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/IsTraits.kt");
                doTest(fileName);
            }

            @TestMetadata("kt614.kt")
            public void testKt614() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/kt614.kt");
                doTest(fileName);
            }

            @TestMetadata("WhenErasedDisallowFromAny.kt")
            public void testWhenErasedDisallowFromAny() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/WhenErasedDisallowFromAny.kt");
                doTest(fileName);
            }

            @TestMetadata("WhenWithExpression.kt")
            public void testWhenWithExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/WhenWithExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/cast/bare")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Bare extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInBare() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cast/bare"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("AsNestedBare.kt")
                public void testAsNestedBare() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/AsNestedBare.kt");
                    doTest(fileName);
                }

                @TestMetadata("AsNullable.kt")
                public void testAsNullable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/AsNullable.kt");
                    doTest(fileName);
                }

                @TestMetadata("AsNullableNotEnough.kt")
                public void testAsNullableNotEnough() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/AsNullableNotEnough.kt");
                    doTest(fileName);
                }

                @TestMetadata("EitherAs.kt")
                public void testEitherAs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/EitherAs.kt");
                    doTest(fileName);
                }

                @TestMetadata("EitherIs.kt")
                public void testEitherIs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/EitherIs.kt");
                    doTest(fileName);
                }

                @TestMetadata("EitherNotIs.kt")
                public void testEitherNotIs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/EitherNotIs.kt");
                    doTest(fileName);
                }

                @TestMetadata("EitherSafeAs.kt")
                public void testEitherSafeAs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/EitherSafeAs.kt");
                    doTest(fileName);
                }

                @TestMetadata("EitherWhen.kt")
                public void testEitherWhen() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/EitherWhen.kt");
                    doTest(fileName);
                }

                @TestMetadata("ErrorsInSubstitution.kt")
                public void testErrorsInSubstitution() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/ErrorsInSubstitution.kt");
                    doTest(fileName);
                }

                @TestMetadata("FromErrorType.kt")
                public void testFromErrorType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/FromErrorType.kt");
                    doTest(fileName);
                }

                @TestMetadata("NullableAs.kt")
                public void testNullableAs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/NullableAs.kt");
                    doTest(fileName);
                }

                @TestMetadata("NullableAsNotEnough.kt")
                public void testNullableAsNotEnough() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/NullableAsNotEnough.kt");
                    doTest(fileName);
                }

                @TestMetadata("NullableAsNullable.kt")
                public void testNullableAsNullable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/NullableAsNullable.kt");
                    doTest(fileName);
                }

                @TestMetadata("NullableAsNullableNotEnough.kt")
                public void testNullableAsNullableNotEnough() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/NullableAsNullableNotEnough.kt");
                    doTest(fileName);
                }

                @TestMetadata("RedundantNullable.kt")
                public void testRedundantNullable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/RedundantNullable.kt");
                    doTest(fileName);
                }

                @TestMetadata("ToErrorType.kt")
                public void testToErrorType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/ToErrorType.kt");
                    doTest(fileName);
                }

                @TestMetadata("UnrelatedAs.kt")
                public void testUnrelatedAs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/UnrelatedAs.kt");
                    doTest(fileName);
                }

                @TestMetadata("UnrelatedColon.kt")
                public void testUnrelatedColon() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/UnrelatedColon.kt");
                    doTest(fileName);
                }

                @TestMetadata("UnrelatedIs.kt")
                public void testUnrelatedIs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/bare/UnrelatedIs.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NeverSucceeds extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNeverSucceeds() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cast/neverSucceeds"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("CastToNotNullSuper.kt")
                public void testCastToNotNullSuper() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds/CastToNotNullSuper.kt");
                    doTest(fileName);
                }

                @TestMetadata("MappedDirect.kt")
                public void testMappedDirect() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedDirect.kt");
                    doTest(fileName);
                }

                @TestMetadata("MappedSubtypes.kt")
                public void testMappedSubtypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedSubtypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("NoGenericsRelated.kt")
                public void testNoGenericsRelated() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsRelated.kt");
                    doTest(fileName);
                }

                @TestMetadata("NoGenericsUnrelated.kt")
                public void testNoGenericsUnrelated() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsUnrelated.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/checkArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CheckArguments extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInCheckArguments() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/checkArguments"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("booleanExpressions.kt")
            public void testBooleanExpressions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/checkArguments/booleanExpressions.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1897_diagnostic_part.kt")
            public void testKt1897_diagnostic_part() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/checkArguments/kt1897_diagnostic_part.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1940.kt")
            public void testKt1940() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/checkArguments/kt1940.kt");
                doTest(fileName);
            }

            @TestMetadata("SpreadVarargs.kt")
            public void testSpreadVarargs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/checkArguments/SpreadVarargs.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/classLiteral")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClassLiteral extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInClassLiteral() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/classLiteral"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("arrays.kt")
            public void testArrays() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classLiteral/arrays.kt");
                doTest(fileName);
            }

            @TestMetadata("classLiteralType.kt")
            public void testClassLiteralType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classLiteral/classLiteralType.kt");
                doTest(fileName);
            }

            @TestMetadata("genericClasses.kt")
            public void testGenericClasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classLiteral/genericClasses.kt");
                doTest(fileName);
            }

            @TestMetadata("nonClassesOnLHS.kt")
            public void testNonClassesOnLHS() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classLiteral/nonClassesOnLHS.kt");
                doTest(fileName);
            }

            @TestMetadata("simpleClassLiteral.kt")
            public void testSimpleClassLiteral() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classLiteral/simpleClassLiteral.kt");
                doTest(fileName);
            }

            @TestMetadata("unresolvedClass.kt")
            public void testUnresolvedClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classLiteral/unresolvedClass.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/classObjects")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ClassObjects extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInClassObjects() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/classObjects"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("builtInClassObjects.kt")
            public void testBuiltInClassObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/builtInClassObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("ClassObjectCannotAccessClassFields.kt")
            public void testClassObjectCannotAccessClassFields() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/ClassObjectCannotAccessClassFields.kt");
                doTest(fileName);
            }

            @TestMetadata("classObjectHeader.kt")
            public void testClassObjectHeader() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/classObjectHeader.kt");
                doTest(fileName);
            }

            @TestMetadata("classObjectInLocalClass.kt")
            public void testClassObjectInLocalClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/classObjectInLocalClass.kt");
                doTest(fileName);
            }

            @TestMetadata("classObjectRedeclaration.kt")
            public void testClassObjectRedeclaration() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/classObjectRedeclaration.kt");
                doTest(fileName);
            }

            @TestMetadata("ClassObjectVisibility.kt")
            public void testClassObjectVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/ClassObjectVisibility.kt");
                doTest(fileName);
            }

            @TestMetadata("ClassObjects.kt")
            public void testClassObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/ClassObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("companionObjectOfPrivateClassVisibility.kt")
            public void testCompanionObjectOfPrivateClassVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/companionObjectOfPrivateClassVisibility.kt");
                doTest(fileName);
            }

            @TestMetadata("importClassInClassObject.kt")
            public void testImportClassInClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/importClassInClassObject.kt");
                doTest(fileName);
            }

            @TestMetadata("InnerClassAccessThroughClassObject.kt")
            public void testInnerClassAccessThroughClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughClassObject.kt");
                doTest(fileName);
            }

            @TestMetadata("InnerClassAccessThroughEnum.kt")
            public void testInnerClassAccessThroughEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("InnerClassClassObject.kt")
            public void testInnerClassClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/InnerClassClassObject.kt");
                doTest(fileName);
            }

            @TestMetadata("invisibleClassObjects.kt")
            public void testInvisibleClassObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/invisibleClassObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3866.kt")
            public void testKt3866() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/kt3866.kt");
                doTest(fileName);
            }

            @TestMetadata("multipleDissallowedDefaultObjects.kt")
            public void testMultipleDissallowedDefaultObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/multipleDissallowedDefaultObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedClassInPrivateClassObject.kt")
            public void testNestedClassInPrivateClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/nestedClassInPrivateClassObject.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveFunctionInsideClassObject.kt")
            public void testResolveFunctionInsideClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/classObjects/resolveFunctionInsideClassObject.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ControlFlowAnalysis extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInControlFlowAnalysis() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("backingFieldInsideGetter.kt")
            public void testBackingFieldInsideGetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/backingFieldInsideGetter.kt");
                doTest(fileName);
            }

            @TestMetadata("breakOrContinueInLoopCondition.kt")
            public void testBreakOrContinueInLoopCondition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakOrContinueInLoopCondition.kt");
                doTest(fileName);
            }

            @TestMetadata("checkInnerLocalDeclarations.kt")
            public void testCheckInnerLocalDeclarations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkInnerLocalDeclarations.kt");
                doTest(fileName);
            }

            @TestMetadata("checkPropertyAccessor.kt")
            public void testCheckPropertyAccessor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkPropertyAccessor.kt");
                doTest(fileName);
            }

            @TestMetadata("definiteReturnInWhen.kt")
            public void testDefiniteReturnInWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturnInWhen.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1001.kt")
            public void testKt1001() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1001.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1027.kt")
            public void testKt1027() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1027.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1066.kt")
            public void testKt1066() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1066.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1156.kt")
            public void testKt1156() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1156.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1185enums.kt")
            public void testKt1185enums() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1185enums.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1189.kt")
            public void testKt1189() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1189.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1191.kt")
            public void testKt1191() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1191.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1219.1301.kt")
            public void testKt1219_1301() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1219.1301.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1571.kt")
            public void testKt1571() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1571.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1977.kt")
            public void testKt1977() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1977.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2166_kt2103.kt")
            public void testKt2166_kt2103() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2166_kt2103.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2226.kt")
            public void testKt2226() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2226.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2330.kt")
            public void testKt2330() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2330.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2334.kt")
            public void testKt2334() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2334.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2369.kt")
            public void testKt2369() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2369.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2845.kt")
            public void testKt2845() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2845.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2960.kt")
            public void testKt2960() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2960.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2972.kt")
            public void testKt2972() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2972.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3444.kt")
            public void testKt3444() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3444.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3501.kt")
            public void testKt3501() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3501.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4126.kt")
            public void testKt4126() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4126.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4405.kt")
            public void testKt4405() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4405.kt");
                doTest(fileName);
            }

            @TestMetadata("kt510.kt")
            public void testKt510() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt510.kt");
                doTest(fileName);
            }

            @TestMetadata("kt607.kt")
            public void testKt607() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt607.kt");
                doTest(fileName);
            }

            @TestMetadata("kt609.kt")
            public void testKt609() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt609.kt");
                doTest(fileName);
            }

            @TestMetadata("kt610.kt")
            public void testKt610() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt610.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6788.kt")
            public void testKt6788() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt6788.kt");
                doTest(fileName);
            }

            @TestMetadata("kt776.kt")
            public void testKt776() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt776.kt");
                doTest(fileName);
            }

            @TestMetadata("kt843.kt")
            public void testKt843() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt843.kt");
                doTest(fileName);
            }

            @TestMetadata("kt897.kt")
            public void testKt897() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt897.kt");
                doTest(fileName);
            }

            @TestMetadata("localClasses.kt")
            public void testLocalClasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/localClasses.kt");
                doTest(fileName);
            }

            @TestMetadata("propertiesInitWithOtherInstance.kt")
            public void testPropertiesInitWithOtherInstance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstance.kt");
                doTest(fileName);
            }

            @TestMetadata("propertiesInitWithOtherInstanceInner.kt")
            public void testPropertiesInitWithOtherInstanceInner() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstanceInner.kt");
                doTest(fileName);
            }

            @TestMetadata("propertiesInitWithOtherInstanceThisLabel.kt")
            public void testPropertiesInitWithOtherInstanceThisLabel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstanceThisLabel.kt");
                doTest(fileName);
            }

            @TestMetadata("propertiesOrderInPackage.kt")
            public void testPropertiesOrderInPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesOrderInPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("referenceToPropertyInitializer.kt")
            public void testReferenceToPropertyInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/referenceToPropertyInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("repeatUnitializedErrorOnlyForLocalVars.kt")
            public void testRepeatUnitializedErrorOnlyForLocalVars() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/repeatUnitializedErrorOnlyForLocalVars.kt");
                doTest(fileName);
            }

            @TestMetadata("scopeOfAnonymousInitializer.kt")
            public void testScopeOfAnonymousInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/scopeOfAnonymousInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("uninitializedInLocalDeclarations.kt")
            public void testUninitializedInLocalDeclarations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedInLocalDeclarations.kt");
                doTest(fileName);
            }

            @TestMetadata("UninitializedOrReassignedVariables.kt")
            public void testUninitializedOrReassignedVariables() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/UninitializedOrReassignedVariables.kt");
                doTest(fileName);
            }

            @TestMetadata("unmappedArgs.kt")
            public void testUnmappedArgs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/unmappedArgs.kt");
                doTest(fileName);
            }

            @TestMetadata("varInitializationInIfInCycle.kt")
            public void testVarInitializationInIfInCycle() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/varInitializationInIfInCycle.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DeadCode extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInDeadCode() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("commasAndWhitespaces.kt")
                public void testCommasAndWhitespaces() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/commasAndWhitespaces.kt");
                    doTest(fileName);
                }

                @TestMetadata("commentsInDeadCode.kt")
                public void testCommentsInDeadCode() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/commentsInDeadCode.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCallInInvokeCall.kt")
                public void testDeadCallInInvokeCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCallInInvokeCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCallInReceiver.kt")
                public void testDeadCallInReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCallInReceiver.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeDifferentExamples.kt")
                public void testDeadCodeDifferentExamples() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeDifferentExamples.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeFromDifferentSources.kt")
                public void testDeadCodeFromDifferentSources() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeFromDifferentSources.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInArrayAccess.kt")
                public void testDeadCodeInArrayAccess() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInArrayAccess.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInAssignment.kt")
                public void testDeadCodeInAssignment() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInAssignment.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInBinaryExpressions.kt")
                public void testDeadCodeInBinaryExpressions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInBinaryExpressions.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInCalls.kt")
                public void testDeadCodeInCalls() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInCalls.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInDeadCode.kt")
                public void testDeadCodeInDeadCode() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInDeadCode.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInIf.kt")
                public void testDeadCodeInIf() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInIf.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInInnerExpressions.kt")
                public void testDeadCodeInInnerExpressions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInInnerExpressions.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInLocalDeclarations.kt")
                public void testDeadCodeInLocalDeclarations() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInLocalDeclarations.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInLoops.kt")
                public void testDeadCodeInLoops() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInLoops.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInReturn.kt")
                public void testDeadCodeInReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInReturn.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInUnaryExpr.kt")
                public void testDeadCodeInUnaryExpr() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInUnaryExpr.kt");
                    doTest(fileName);
                }

                @TestMetadata("deadCodeInWhileFromBreak.kt")
                public void testDeadCodeInWhileFromBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInWhileFromBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("expressionInUnitLiteral.kt")
                public void testExpressionInUnitLiteral() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/expressionInUnitLiteral.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2585_1.kt")
                public void testKt2585_1() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_1.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2585_2.kt")
                public void testKt2585_2() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_2.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2585_3.kt")
                public void testKt2585_3() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_3.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3162tryAsInitializer.kt")
                public void testKt3162tryAsInitializer() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt3162tryAsInitializer.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt5200DeadCodeInLambdas.kt")
                public void testKt5200DeadCodeInLambdas() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt5200DeadCodeInLambdas.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DefiniteReturn extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInDefiniteReturn() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("kt3444_ReturnFromLocalFunctions.kt")
                public void testKt3444_ReturnFromLocalFunctions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt3444_ReturnFromLocalFunctions.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt4034.kt")
                public void testKt4034() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt4034.kt");
                    doTest(fileName);
                }

                @TestMetadata("ReturnFromFunctionInObject.kt")
                public void testReturnFromFunctionInObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/ReturnFromFunctionInObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("simpleClass.kt")
                public void testSimpleClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/simpleClass.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/controlStructures")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ControlStructures extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInControlStructures() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/controlStructures"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("commonSupertypeOfT.kt")
            public void testCommonSupertypeOfT() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/commonSupertypeOfT.kt");
                doTest(fileName);
            }

            @TestMetadata("emptyIf.kt")
            public void testEmptyIf() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/emptyIf.kt");
                doTest(fileName);
            }

            @TestMetadata("forLoopWithNullableRange.kt")
            public void testForLoopWithNullableRange() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/forLoopWithNullableRange.kt");
                doTest(fileName);
            }

            @TestMetadata("forWithNullableIterator.kt")
            public void testForWithNullableIterator() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/forWithNullableIterator.kt");
                doTest(fileName);
            }

            @TestMetadata("ForWithoutBraces.kt")
            public void testForWithoutBraces() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/ForWithoutBraces.kt");
                doTest(fileName);
            }

            @TestMetadata("ForbidStatementAsDirectFunctionBody.kt")
            public void testForbidStatementAsDirectFunctionBody() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/ForbidStatementAsDirectFunctionBody.kt");
                doTest(fileName);
            }

            @TestMetadata("jumpAcrossFunctionBoundary.kt")
            public void testJumpAcrossFunctionBoundary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/jumpAcrossFunctionBoundary.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1075.kt")
            public void testKt1075() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/kt1075.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4310.kt")
            public void testKt4310() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/kt4310.kt");
                doTest(fileName);
            }

            @TestMetadata("kt657.kt")
            public void testKt657() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/kt657.kt");
                doTest(fileName);
            }

            @TestMetadata("kt770.kt351.kt735_StatementType.kt")
            public void testKt770_kt351_kt735_StatementType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/kt770.kt351.kt735_StatementType.kt");
                doTest(fileName);
            }

            @TestMetadata("kt786.kt")
            public void testKt786() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/kt786.kt");
                doTest(fileName);
            }

            @TestMetadata("kt799.kt")
            public void testKt799() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/kt799.kt");
                doTest(fileName);
            }

            @TestMetadata("tryReturnType.kt")
            public void testTryReturnType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/tryReturnType.kt");
                doTest(fileName);
            }

            @TestMetadata("typeInferenceForExclExcl.kt")
            public void testTypeInferenceForExclExcl() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/typeInferenceForExclExcl.kt");
                doTest(fileName);
            }

            @TestMetadata("valVarCatchParameter.kt")
            public void testValVarCatchParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/valVarCatchParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("valVarLoopParameter.kt")
            public void testValVarLoopParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/valVarLoopParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("when.kt234.kt973.kt")
            public void testWhen_kt234_kt973() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/controlStructures/when.kt234.kt973.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CyclicHierarchy extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInCyclicHierarchy() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/cyclicHierarchy"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("classIndirectlyInheritsNested.kt")
            public void testClassIndirectlyInheritsNested() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/classIndirectlyInheritsNested.kt");
                doTest(fileName);
            }

            @TestMetadata("classInheritsNested.kt")
            public void testClassInheritsNested() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/classInheritsNested.kt");
                doTest(fileName);
            }

            @TestMetadata("cyclicHierarchy.kt")
            public void testCyclicHierarchy() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/cyclicHierarchy.kt");
                doTest(fileName);
            }

            @TestMetadata("javaKotlinJavaCycle.kt")
            public void testJavaKotlinJavaCycle() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/javaKotlinJavaCycle.kt");
                doTest(fileName);
            }

            @TestMetadata("kotlinJavaCycle.kt")
            public void testKotlinJavaCycle() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaCycle.kt");
                doTest(fileName);
            }

            @TestMetadata("kotlinJavaKotlinCycle.kt")
            public void testKotlinJavaKotlinCycle() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaKotlinCycle.kt");
                doTest(fileName);
            }

            @TestMetadata("kotlinJavaNestedCycle.kt")
            public void testKotlinJavaNestedCycle() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaNestedCycle.kt");
                doTest(fileName);
            }

            @TestMetadata("kt303.kt")
            public void testKt303() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/kt303.kt");
                doTest(fileName);
            }

            @TestMetadata("twoClassesWithNestedCycle.kt")
            public void testTwoClassesWithNestedCycle() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/twoClassesWithNestedCycle.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/dataClasses")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DataClasses extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDataClasses() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataClasses"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("bothParamsAreNotProperties.kt")
            public void testBothParamsAreNotProperties() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/bothParamsAreNotProperties.kt");
                doTest(fileName);
            }

            @TestMetadata("componentFunctionInSubClass.kt")
            public void testComponentFunctionInSubClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/componentFunctionInSubClass.kt");
                doTest(fileName);
            }

            @TestMetadata("componentFunctionVisibility.kt")
            public void testComponentFunctionVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/componentFunctionVisibility.kt");
                doTest(fileName);
            }

            @TestMetadata("componentFunctionsAreFinal.kt")
            public void testComponentFunctionsAreFinal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/componentFunctionsAreFinal.kt");
                doTest(fileName);
            }

            @TestMetadata("componentNamedComponent1.kt")
            public void testComponentNamedComponent1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/componentNamedComponent1.kt");
                doTest(fileName);
            }

            @TestMetadata("conflictingCopyOverloads.kt")
            public void testConflictingCopyOverloads() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/conflictingCopyOverloads.kt");
                doTest(fileName);
            }

            @TestMetadata("conflictingOverloads.kt")
            public void testConflictingOverloads() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/conflictingOverloads.kt");
                doTest(fileName);
            }

            @TestMetadata("copyOfPrivateClass.kt")
            public void testCopyOfPrivateClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/copyOfPrivateClass.kt");
                doTest(fileName);
            }

            @TestMetadata("dataClassOverrideConflict.kt")
            public void testDataClassOverrideConflict() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/dataClassOverrideConflict.kt");
                doTest(fileName);
            }

            @TestMetadata("emptyConstructor.kt")
            public void testEmptyConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/emptyConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("firstParamIsVal.kt")
            public void testFirstParamIsVal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/firstParamIsVal.kt");
                doTest(fileName);
            }

            @TestMetadata("firstParamIsVar.kt")
            public void testFirstParamIsVar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/firstParamIsVar.kt");
                doTest(fileName);
            }

            @TestMetadata("implementTraitWhichHasComponent1.kt")
            public void testImplementTraitWhichHasComponent1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasComponent1.kt");
                doTest(fileName);
            }

            @TestMetadata("implementTraitWhichHasFinalComponent1.kt")
            public void testImplementTraitWhichHasFinalComponent1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasFinalComponent1.kt");
                doTest(fileName);
            }

            @TestMetadata("multiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/multiDeclaration.kt");
                doTest(fileName);
            }

            @TestMetadata("multiDeclarationFor.kt")
            public void testMultiDeclarationFor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/multiDeclarationFor.kt");
                doTest(fileName);
            }

            @TestMetadata("noConstructor.kt")
            public void testNoConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/noConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("notADataClass.kt")
            public void testNotADataClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/notADataClass.kt");
                doTest(fileName);
            }

            @TestMetadata("oneValParam.kt")
            public void testOneValParam() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/oneValParam.kt");
                doTest(fileName);
            }

            @TestMetadata("overrideInvisibleMember.kt")
            public void testOverrideInvisibleMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/overrideInvisibleMember.kt");
                doTest(fileName);
            }

            @TestMetadata("paramNameSameToField.kt")
            public void testParamNameSameToField() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/paramNameSameToField.kt");
                doTest(fileName);
            }

            @TestMetadata("repeatedProperties.kt")
            public void testRepeatedProperties() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/repeatedProperties.kt");
                doTest(fileName);
            }

            @TestMetadata("secondParamIsVal.kt")
            public void testSecondParamIsVal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/secondParamIsVal.kt");
                doTest(fileName);
            }

            @TestMetadata("secondParamIsVar.kt")
            public void testSecondParamIsVar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/secondParamIsVar.kt");
                doTest(fileName);
            }

            @TestMetadata("twoValParams.kt")
            public void testTwoValParams() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/twoValParams.kt");
                doTest(fileName);
            }

            @TestMetadata("twoVarParams.kt")
            public void testTwoVarParams() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataClasses/twoVarParams.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/dataFlow")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DataFlow extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDataFlow() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("CalleeExpression.kt")
            public void testCalleeExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/CalleeExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("EmptyIf.kt")
            public void testEmptyIf() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/EmptyIf.kt");
                doTest(fileName);
            }

            @TestMetadata("IsExpression.kt")
            public void testIsExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/IsExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("WhenSubject.kt")
            public void testWhenSubject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/WhenSubject.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Assignment extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInAssignment() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow/assignment"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("assignToNewVal.kt")
                public void testAssignToNewVal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment/assignToNewVal.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt6118.kt")
                public void testKt6118() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment/kt6118.kt");
                    doTest(fileName);
                }

                @TestMetadata("uninitializedValIsCheck.kt")
                public void testUninitializedValIsCheck() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment/uninitializedValIsCheck.kt");
                    doTest(fileName);
                }

                @TestMetadata("uninitializedValNullability.kt")
                public void testUninitializedValNullability() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment/uninitializedValNullability.kt");
                    doTest(fileName);
                }

                @TestMetadata("when.kt")
                public void testWhen() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment/when.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/local")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Local extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInLocal() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlow/local"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("kt2835.kt")
                public void testKt2835() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/kt2835.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalClassBase.kt")
                public void testLocalClassBase() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassBase.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalClassDefaultParameters.kt")
                public void testLocalClassDefaultParameters() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDefaultParameters.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalClassDelegatedProperties.kt")
                public void testLocalClassDelegatedProperties() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegatedProperties.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalClassDelegation.kt")
                public void testLocalClassDelegation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegation.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalClassFunctions.kt")
                public void testLocalClassFunctions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassFunctions.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalClassInMemberOfLocalClass.kt")
                public void testLocalClassInMemberOfLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInMemberOfLocalClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalClassInitializer.kt")
                public void testLocalClassInitializer() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInitializer.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalClassProperty.kt")
                public void testLocalClassProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalObject.kt")
                public void testLocalObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalObjectDelegation.kt")
                public void testLocalObjectDelegation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/LocalObjectDelegation.kt");
                    doTest(fileName);
                }

                @TestMetadata("NestedLocalClass.kt")
                public void testNestedLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlow/local/NestedLocalClass.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DataFlowInfoTraversal extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDataFlowInfoTraversal() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlowInfoTraversal"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AndOr.kt")
            public void testAndOr() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AndOr.kt");
                doTest(fileName);
            }

            @TestMetadata("ArrayAccess.kt")
            public void testArrayAccess() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayAccess.kt");
                doTest(fileName);
            }

            @TestMetadata("ArrayExpression.kt")
            public void testArrayExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("ArrayGetSetConvention.kt")
            public void testArrayGetSetConvention() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayGetSetConvention.kt");
                doTest(fileName);
            }

            @TestMetadata("ArrayIndices.kt")
            public void testArrayIndices() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayIndices.kt");
                doTest(fileName);
            }

            @TestMetadata("Assignment.kt")
            public void testAssignment() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Assignment.kt");
                doTest(fileName);
            }

            @TestMetadata("AssignmentInInitializer.kt")
            public void testAssignmentInInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentInInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("AssignmentOperation.kt")
            public void testAssignmentOperation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentOperation.kt");
                doTest(fileName);
            }

            @TestMetadata("AssignmentToArrayElement.kt")
            public void testAssignmentToArrayElement() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentToArrayElement.kt");
                doTest(fileName);
            }

            @TestMetadata("BinaryExpression.kt")
            public void testBinaryExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("BinaryExpressionBooleanOperations.kt")
            public void testBinaryExpressionBooleanOperations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionBooleanOperations.kt");
                doTest(fileName);
            }

            @TestMetadata("BinaryExpressionCompareToConvention.kt")
            public void testBinaryExpressionCompareToConvention() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionCompareToConvention.kt");
                doTest(fileName);
            }

            @TestMetadata("BinaryExpressionContainsConvention.kt")
            public void testBinaryExpressionContainsConvention() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionContainsConvention.kt");
                doTest(fileName);
            }

            @TestMetadata("BinaryExpressionElvis.kt")
            public void testBinaryExpressionElvis() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionElvis.kt");
                doTest(fileName);
            }

            @TestMetadata("BinaryExpressionEqualsConvention.kt")
            public void testBinaryExpressionEqualsConvention() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionEqualsConvention.kt");
                doTest(fileName);
            }

            @TestMetadata("BinaryExpressionIdentifier.kt")
            public void testBinaryExpressionIdentifier() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionIdentifier.kt");
                doTest(fileName);
            }

            @TestMetadata("BinaryExpressionPlusConvention.kt")
            public void testBinaryExpressionPlusConvention() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionPlusConvention.kt");
                doTest(fileName);
            }

            @TestMetadata("Condition.kt")
            public void testCondition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Condition.kt");
                doTest(fileName);
            }

            @TestMetadata("ContinueOuterLoop.kt")
            public void testContinueOuterLoop() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ContinueOuterLoop.kt");
                doTest(fileName);
            }

            @TestMetadata("DeepIf.kt")
            public void testDeepIf() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DeepIf.kt");
                doTest(fileName);
            }

            @TestMetadata("DoWhile.kt")
            public void testDoWhile() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhile.kt");
                doTest(fileName);
            }

            @TestMetadata("DoWhileCondition.kt")
            public void testDoWhileCondition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhileCondition.kt");
                doTest(fileName);
            }

            @TestMetadata("Elvis.kt")
            public void testElvis() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Elvis.kt");
                doTest(fileName);
            }

            @TestMetadata("ExclExcl.kt")
            public void testExclExcl() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ExclExcl.kt");
                doTest(fileName);
            }

            @TestMetadata("For.kt")
            public void testFor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/For.kt");
                doTest(fileName);
            }

            @TestMetadata("ForLoopRange.kt")
            public void testForLoopRange() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ForLoopRange.kt");
                doTest(fileName);
            }

            @TestMetadata("FunctionLiteral.kt")
            public void testFunctionLiteral() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/FunctionLiteral.kt");
                doTest(fileName);
            }

            @TestMetadata("IfStatement.kt")
            public void testIfStatement() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfStatement.kt");
                doTest(fileName);
            }

            @TestMetadata("IfThenElse.kt")
            public void testIfThenElse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElse.kt");
                doTest(fileName);
            }

            @TestMetadata("IfThenElseBothInvalid.kt")
            public void testIfThenElseBothInvalid() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElseBothInvalid.kt");
                doTest(fileName);
            }

            @TestMetadata("IsExpression.kt")
            public void testIsExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IsExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4332WhenBranches.kt")
            public void testKt4332WhenBranches() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt4332WhenBranches.kt");
                doTest(fileName);
            }

            @TestMetadata("kt5155WhenBranches.kt")
            public void testKt5155WhenBranches() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt5155WhenBranches.kt");
                doTest(fileName);
            }

            @TestMetadata("kt5182WhenBranches.kt")
            public void testKt5182WhenBranches() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt5182WhenBranches.kt");
                doTest(fileName);
            }

            @TestMetadata("ManyIfs.kt")
            public void testManyIfs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ManyIfs.kt");
                doTest(fileName);
            }

            @TestMetadata("MultiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/MultiDeclaration.kt");
                doTest(fileName);
            }

            @TestMetadata("ObjectExpression.kt")
            public void testObjectExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ObjectExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("QualifiedExpression.kt")
            public void testQualifiedExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/QualifiedExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("Return.kt")
            public void testReturn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Return.kt");
                doTest(fileName);
            }

            @TestMetadata("StringTemplate.kt")
            public void testStringTemplate() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/StringTemplate.kt");
                doTest(fileName);
            }

            @TestMetadata("ThisSuper.kt")
            public void testThisSuper() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ThisSuper.kt");
                doTest(fileName);
            }

            @TestMetadata("Throw.kt")
            public void testThrow() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Throw.kt");
                doTest(fileName);
            }

            @TestMetadata("TryCatch.kt")
            public void testTryCatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryCatch.kt");
                doTest(fileName);
            }

            @TestMetadata("TryFinally.kt")
            public void testTryFinally() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryFinally.kt");
                doTest(fileName);
            }

            @TestMetadata("UnaryExpression.kt")
            public void testUnaryExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/UnaryExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("When.kt")
            public void testWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/When.kt");
                doTest(fileName);
            }

            @TestMetadata("WhenEntryAs.kt")
            public void testWhenEntryAs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntryAs.kt");
                doTest(fileName);
            }

            @TestMetadata("WhenEntryIs.kt")
            public void testWhenEntryIs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntryIs.kt");
                doTest(fileName);
            }

            @TestMetadata("WhenIn.kt")
            public void testWhenIn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenIn.kt");
                doTest(fileName);
            }

            @TestMetadata("WhenSubject.kt")
            public void testWhenSubject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenSubject.kt");
                doTest(fileName);
            }

            @TestMetadata("While.kt")
            public void testWhile() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/While.kt");
                doTest(fileName);
            }

            @TestMetadata("WhileCondition.kt")
            public void testWhileCondition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhileCondition.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Smartcasts extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSmartcasts() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("SmartcastAmbiguitites.kt")
                public void testSmartcastAmbiguitites() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts/SmartcastAmbiguitites.kt");
                    doTest(fileName);
                }

                @TestMetadata("SmartcastsForStableIdentifiers.kt")
                public void testSmartcastsForStableIdentifiers() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts/SmartcastsForStableIdentifiers.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DeclarationChecks extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDeclarationChecks() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ambiguousObjectExpressionType.kt")
            public void testAmbiguousObjectExpressionType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/ambiguousObjectExpressionType.kt");
                doTest(fileName);
            }

            @TestMetadata("ComponentFunctionReturnTypeMismatch.kt")
            public void testComponentFunctionReturnTypeMismatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/ComponentFunctionReturnTypeMismatch.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingAndRedundantProjections.kt")
            public void testConflictingAndRedundantProjections() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/ConflictingAndRedundantProjections.kt");
                doTest(fileName);
            }

            @TestMetadata("DataFlowInMultiDeclInFor.kt")
            public void testDataFlowInMultiDeclInFor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInMultiDeclInFor.kt");
                doTest(fileName);
            }

            @TestMetadata("DataFlowInfoInMultiDecl.kt")
            public void testDataFlowInfoInMultiDecl() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInfoInMultiDecl.kt");
                doTest(fileName);
            }

            @TestMetadata("FunctionWithMissingNames.kt")
            public void testFunctionWithMissingNames() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/FunctionWithMissingNames.kt");
                doTest(fileName);
            }

            @TestMetadata("illegalModifiersOnClass.kt")
            public void testIllegalModifiersOnClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/illegalModifiersOnClass.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1141.kt")
            public void testKt1141() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/kt1141.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1193.kt")
            public void testKt1193() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/kt1193.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2096.kt")
            public void testKt2096() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/kt2096.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2142.kt")
            public void testKt2142() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/kt2142.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2397.kt")
            public void testKt2397() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/kt2397.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2631_MultipleDeclaration.kt")
            public void testKt2631_MultipleDeclaration() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/kt2631_MultipleDeclaration.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2643MultiDeclInControlFlow.kt")
            public void testKt2643MultiDeclInControlFlow() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/kt2643MultiDeclInControlFlow.kt");
                doTest(fileName);
            }

            @TestMetadata("kt559.kt")
            public void testKt559() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/kt559.kt");
                doTest(fileName);
            }

            @TestMetadata("localDeclarationModifiers.kt")
            public void testLocalDeclarationModifiers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/localDeclarationModifiers.kt");
                doTest(fileName);
            }

            @TestMetadata("localFunctionNoInheritVisibility.kt")
            public void testLocalFunctionNoInheritVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/localFunctionNoInheritVisibility.kt");
                doTest(fileName);
            }

            @TestMetadata("LocalVariableWithNoTypeInformation.kt")
            public void testLocalVariableWithNoTypeInformation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/LocalVariableWithNoTypeInformation.kt");
                doTest(fileName);
            }

            @TestMetadata("MultiDeclarationErrors.kt")
            public void testMultiDeclarationErrors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/MultiDeclarationErrors.kt");
                doTest(fileName);
            }

            @TestMetadata("packageDeclarationModifiers.kt")
            public void testPackageDeclarationModifiers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/packageDeclarationModifiers.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyInPackageHasNoInheritVisibility.kt")
            public void testPropertyInPackageHasNoInheritVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/propertyInPackageHasNoInheritVisibility.kt");
                doTest(fileName);
            }

            @TestMetadata("RedeclarationsInMultiDecl.kt")
            public void testRedeclarationsInMultiDecl() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/RedeclarationsInMultiDecl.kt");
                doTest(fileName);
            }

            @TestMetadata("unambiguousObjectExpressionType.kt")
            public void testUnambiguousObjectExpressionType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/unambiguousObjectExpressionType.kt");
                doTest(fileName);
            }

            @TestMetadata("valVarFunctionParameter.kt")
            public void testValVarFunctionParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/valVarFunctionParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("VarianceOnFunctionAndPropertyTypeParameters.kt")
            public void testVarianceOnFunctionAndPropertyTypeParameters() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/VarianceOnFunctionAndPropertyTypeParameters.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class MultiDeclarations extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInMultiDeclarations() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("DoubleDeclForLoop.kt")
                public void testDoubleDeclForLoop() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/DoubleDeclForLoop.kt");
                    doTest(fileName);
                }

                @TestMetadata("FolLoopTypeComponentTypeMismatch.kt")
                public void testFolLoopTypeComponentTypeMismatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/FolLoopTypeComponentTypeMismatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("ForLoopComponentFunctionAmbiguity.kt")
                public void testForLoopComponentFunctionAmbiguity() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/ForLoopComponentFunctionAmbiguity.kt");
                    doTest(fileName);
                }

                @TestMetadata("ForLoopComponentFunctionMissing.kt")
                public void testForLoopComponentFunctionMissing() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/ForLoopComponentFunctionMissing.kt");
                    doTest(fileName);
                }

                @TestMetadata("ForLoopWithExtensions.kt")
                public void testForLoopWithExtensions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/ForLoopWithExtensions.kt");
                    doTest(fileName);
                }

                @TestMetadata("ForWithExplicitTypes.kt")
                public void testForWithExplicitTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/ForWithExplicitTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2829.kt")
                public void testKt2829() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/kt2829.kt");
                    doTest(fileName);
                }

                @TestMetadata("RedeclarationInForLoop.kt")
                public void testRedeclarationInForLoop() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/RedeclarationInForLoop.kt");
                    doTest(fileName);
                }

                @TestMetadata("SingleDeclForLoop.kt")
                public void testSingleDeclForLoop() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/SingleDeclForLoop.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/defaultArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DefaultArguments extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDefaultArguments() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("kt5232.kt")
            public void testKt5232() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/defaultArguments/kt5232.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DelegatedProperty extends AbstractJetDiagnosticsTest {
            @TestMetadata("absentErrorAboutInitializer.kt")
            public void testAbsentErrorAboutInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("absentErrorAboutType.kt")
            public void testAbsentErrorAboutType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutType.kt");
                doTest(fileName);
            }

            @TestMetadata("abstractDelegatedProperty.kt")
            public void testAbstractDelegatedProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/abstractDelegatedProperty.kt");
                doTest(fileName);
            }

            public void testAllFilesPresentInDelegatedProperty() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("backingField.kt")
            public void testBackingField() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/backingField.kt");
                doTest(fileName);
            }

            @TestMetadata("defaultGetter.kt")
            public void testDefaultGetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/defaultGetter.kt");
                doTest(fileName);
            }

            @TestMetadata("defaultSetter.kt")
            public void testDefaultSetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/defaultSetter.kt");
                doTest(fileName);
            }

            @TestMetadata("delegatedPropertyOverridedInTrait.kt")
            public void testDelegatedPropertyOverridedInTrait() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTrait.kt");
                doTest(fileName);
            }

            @TestMetadata("delegatedPropertyOverridedInTraitTypeMismatch.kt")
            public void testDelegatedPropertyOverridedInTraitTypeMismatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTraitTypeMismatch.kt");
                doTest(fileName);
            }

            @TestMetadata("disallowImplInTypeParameter.kt")
            public void testDisallowImplInTypeParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/disallowImplInTypeParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("genericGetter.kt")
            public void testGenericGetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/genericGetter.kt");
                doTest(fileName);
            }

            @TestMetadata("getterWithSubtype.kt")
            public void testGetterWithSubtype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/getterWithSubtype.kt");
                doTest(fileName);
            }

            @TestMetadata("inTrait.kt")
            public void testInTrait() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inTrait.kt");
                doTest(fileName);
            }

            @TestMetadata("incompleteTypeInference.kt")
            public void testIncompleteTypeInference() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/incompleteTypeInference.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4640.kt")
            public void testKt4640() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/kt4640.kt");
                doTest(fileName);
            }

            @TestMetadata("localVariable.kt")
            public void testLocalVariable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/localVariable.kt");
                doTest(fileName);
            }

            @TestMetadata("missedGetter.kt")
            public void testMissedGetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/missedGetter.kt");
                doTest(fileName);
            }

            @TestMetadata("missedSetter.kt")
            public void testMissedSetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/missedSetter.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyDefferedType.kt")
            public void testPropertyDefferedType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/propertyDefferedType.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyDelegatedAmbiguity.kt")
            public void testPropertyDelegatedAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/propertyDelegatedAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyDelegatedIncomplete.kt")
            public void testPropertyDelegatedIncomplete() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/propertyDelegatedIncomplete.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyDelegatedMissing.kt")
            public void testPropertyDelegatedMissing() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/propertyDelegatedMissing.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyDelegatedPrivate.kt")
            public void testPropertyDelegatedPrivate() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/propertyDelegatedPrivate.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyDelegatedWrongArguments.kt")
            public void testPropertyDelegatedWrongArguments() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/propertyDelegatedWrongArguments.kt");
                doTest(fileName);
            }

            @TestMetadata("publicDelegatedProperty.kt")
            public void testPublicDelegatedProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/publicDelegatedProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("recursiveType.kt")
            public void testRecursiveType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/recursiveType.kt");
                doTest(fileName);
            }

            @TestMetadata("redundantGetter.kt")
            public void testRedundantGetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/redundantGetter.kt");
                doTest(fileName);
            }

            @TestMetadata("redundantSetter.kt")
            public void testRedundantSetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/redundantSetter.kt");
                doTest(fileName);
            }

            @TestMetadata("setterThisTypeMismatch.kt")
            public void testSetterThisTypeMismatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/setterThisTypeMismatch.kt");
                doTest(fileName);
            }

            @TestMetadata("setterWithSupertype.kt")
            public void testSetterWithSupertype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/setterWithSupertype.kt");
                doTest(fileName);
            }

            @TestMetadata("thisInDelegate.kt")
            public void testThisInDelegate() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/thisInDelegate.kt");
                doTest(fileName);
            }

            @TestMetadata("thisOfAnyType.kt")
            public void testThisOfAnyType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/thisOfAnyType.kt");
                doTest(fileName);
            }

            @TestMetadata("thisOfNothingNullableType.kt")
            public void testThisOfNothingNullableType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingNullableType.kt");
                doTest(fileName);
            }

            @TestMetadata("thisOfNothingType.kt")
            public void testThisOfNothingType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingType.kt");
                doTest(fileName);
            }

            @TestMetadata("twoGetMethods.kt")
            public void testTwoGetMethods() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/twoGetMethods.kt");
                doTest(fileName);
            }

            @TestMetadata("typeMismatchForGetReturnType.kt")
            public void testTypeMismatchForGetReturnType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetReturnType.kt");
                doTest(fileName);
            }

            @TestMetadata("typeMismatchForGetWithGeneric.kt")
            public void testTypeMismatchForGetWithGeneric() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetWithGeneric.kt");
                doTest(fileName);
            }

            @TestMetadata("typeMismatchForSetParameter.kt")
            public void testTypeMismatchForSetParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForSetParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("typeMismatchForThisGetParameter.kt")
            public void testTypeMismatchForThisGetParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForThisGetParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("wrongCountOfParametersInGet.kt")
            public void testWrongCountOfParametersInGet() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInGet.kt");
                doTest(fileName);
            }

            @TestMetadata("wrongCountOfParametersInSet.kt")
            public void testWrongCountOfParametersInSet() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInSet.kt");
                doTest(fileName);
            }

            @TestMetadata("wrongSetterReturnType.kt")
            public void testWrongSetterReturnType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/wrongSetterReturnType.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inference extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInference() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegatedProperty/inference"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("differentDelegatedExpressions.kt")
                public void testDifferentDelegatedExpressions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/differentDelegatedExpressions.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionGet.kt")
                public void testExtensionGet() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionGet.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionProperty.kt")
                public void testExtensionProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericMethodInGenericClass.kt")
                public void testGenericMethodInGenericClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/genericMethodInGenericClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericMethods.kt")
                public void testGenericMethods() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/genericMethods.kt");
                    doTest(fileName);
                }

                @TestMetadata("labeledDelegatedExpression.kt")
                public void testLabeledDelegatedExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/labeledDelegatedExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("noErrorsForImplicitConstraints.kt")
                public void testNoErrorsForImplicitConstraints() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/noErrorsForImplicitConstraints.kt");
                    doTest(fileName);
                }

                @TestMetadata("noExpectedTypeForSupertypeConstraint.kt")
                public void testNoExpectedTypeForSupertypeConstraint() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/noExpectedTypeForSupertypeConstraint.kt");
                    doTest(fileName);
                }

                @TestMetadata("useCompleterWithoutExpectedType.kt")
                public void testUseCompleterWithoutExpectedType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/useCompleterWithoutExpectedType.kt");
                    doTest(fileName);
                }

                @TestMetadata("useExpectedType.kt")
                public void testUseExpectedType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedType.kt");
                    doTest(fileName);
                }

                @TestMetadata("useExpectedTypeForVal.kt")
                public void testUseExpectedTypeForVal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedTypeForVal.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/delegation")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Delegation extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDelegation() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/delegation"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("DelegationAndOverriding.kt")
            public void testDelegationAndOverriding() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegation/DelegationAndOverriding.kt");
                doTest(fileName);
            }

            @TestMetadata("DelegationExpectedType.kt")
            public void testDelegationExpectedType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegation/DelegationExpectedType.kt");
                doTest(fileName);
            }

            @TestMetadata("DelegationNotTotrait.kt")
            public void testDelegationNotTotrait() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegation/DelegationNotTotrait.kt");
                doTest(fileName);
            }

            @TestMetadata("DelegationToJavaIface.kt")
            public void testDelegationToJavaIface() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegation/DelegationToJavaIface.kt");
                doTest(fileName);
            }

            @TestMetadata("Delegation_ClashingFunctions.kt")
            public void testDelegation_ClashingFunctions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegation/Delegation_ClashingFunctions.kt");
                doTest(fileName);
            }

            @TestMetadata("Delegation_Hierarchy.kt")
            public void testDelegation_Hierarchy() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegation/Delegation_Hierarchy.kt");
                doTest(fileName);
            }

            @TestMetadata("Delegation_MultipleDelegates.kt")
            public void testDelegation_MultipleDelegates() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegation/Delegation_MultipleDelegates.kt");
                doTest(fileName);
            }

            @TestMetadata("Delegation_ScopeInitializationOrder.kt")
            public void testDelegation_ScopeInitializationOrder() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegation/Delegation_ScopeInitializationOrder.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/deparenthesize")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Deparenthesize extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDeparenthesize() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/deparenthesize"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("annotatedSafeCall.kt")
            public void testAnnotatedSafeCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deparenthesize/annotatedSafeCall.kt");
                doTest(fileName);
            }

            @TestMetadata("ArrayAccessAssignment.kt")
            public void testArrayAccessAssignment() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deparenthesize/ArrayAccessAssignment.kt");
                doTest(fileName);
            }

            @TestMetadata("checkDeparenthesizedType.kt")
            public void testCheckDeparenthesizedType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deparenthesize/checkDeparenthesizedType.kt");
                doTest(fileName);
            }

            @TestMetadata("labeledSafeCall.kt")
            public void testLabeledSafeCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deparenthesize/labeledSafeCall.kt");
                doTest(fileName);
            }

            @TestMetadata("multiParenthesizedSafeCall.kt")
            public void testMultiParenthesizedSafeCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deparenthesize/multiParenthesizedSafeCall.kt");
                doTest(fileName);
            }

            @TestMetadata("parenthesizedSafeCall.kt")
            public void testParenthesizedSafeCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deparenthesize/parenthesizedSafeCall.kt");
                doTest(fileName);
            }

            @TestMetadata("ParenthesizedVariable.kt")
            public void testParenthesizedVariable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deparenthesize/ParenthesizedVariable.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/deprecated")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Deprecated extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDeprecated() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/deprecated"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("annotationUsage.kt")
            public void testAnnotationUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/annotationUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("componentUsage.kt")
            public void testComponentUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/componentUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("functionUsage.kt")
            public void testFunctionUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/functionUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("genericConstructorUsage.kt")
            public void testGenericConstructorUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/genericConstructorUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("imports.kt")
            public void testImports() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/imports.kt");
                doTest(fileName);
            }

            @TestMetadata("iteratorUsage.kt")
            public void testIteratorUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/iteratorUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("javaDeprecated.kt")
            public void testJavaDeprecated() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/javaDeprecated.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedTypesUsage.kt")
            public void testNestedTypesUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/nestedTypesUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("objectUsage.kt")
            public void testObjectUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/objectUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyUsage.kt")
            public void testPropertyUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/propertyUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("typeUsage.kt")
            public void testTypeUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/deprecated/typeUsage.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DuplicateJvmSignature extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDuplicateJvmSignature() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("caseInProperties.kt")
            public void testCaseInProperties() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/caseInProperties.kt");
                doTest(fileName);
            }

            @TestMetadata("missingNames.kt")
            public void testMissingNames() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/missingNames.kt");
                doTest(fileName);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/vararg.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AccidentalOverrides extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInAccidentalOverrides() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("classFunctionOverriddenByProperty.kt")
                public void testClassFunctionOverriddenByProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/classFunctionOverriddenByProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("classFunctionOverriddenByPropertyInConstructor.kt")
                public void testClassFunctionOverriddenByPropertyInConstructor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/classFunctionOverriddenByPropertyInConstructor.kt");
                    doTest(fileName);
                }

                @TestMetadata("classFunctionOverriddenByPropertyNoGetter.kt")
                public void testClassFunctionOverriddenByPropertyNoGetter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/classFunctionOverriddenByPropertyNoGetter.kt");
                    doTest(fileName);
                }

                @TestMetadata("classPropertyOverriddenByFunction.kt")
                public void testClassPropertyOverriddenByFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/classPropertyOverriddenByFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("defaultFunction.kt")
                public void testDefaultFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/defaultFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("delegatedFunctionOverriddenByProperty.kt")
                public void testDelegatedFunctionOverriddenByProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/delegatedFunctionOverriddenByProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericClassFunction.kt")
                public void testGenericClassFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/genericClassFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("overridesNothing.kt")
                public void testOverridesNothing() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/overridesNothing.kt");
                    doTest(fileName);
                }

                @TestMetadata("phantomClashWithSamAdapter.kt")
                public void testPhantomClashWithSamAdapter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/phantomClashWithSamAdapter.kt");
                    doTest(fileName);
                }

                @TestMetadata("privateClassFunctionOverriddenByProperty.kt")
                public void testPrivateClassFunctionOverriddenByProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/privateClassFunctionOverriddenByProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("require.kt")
                public void testRequire() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/require.kt");
                    doTest(fileName);
                }

                @TestMetadata("traitFunctionOverriddenByProperty.kt")
                public void testTraitFunctionOverriddenByProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/traitFunctionOverriddenByProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("traitFunctionOverriddenByPropertyNoImpl.kt")
                public void testTraitFunctionOverriddenByPropertyNoImpl() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/traitFunctionOverriddenByPropertyNoImpl.kt");
                    doTest(fileName);
                }

                @TestMetadata("traitPropertyOverriddenByFunction.kt")
                public void testTraitPropertyOverriddenByFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/traitPropertyOverriddenByFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("traitPropertyOverriddenByFunctionNoImpl.kt")
                public void testTraitPropertyOverriddenByFunctionNoImpl() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/traitPropertyOverriddenByFunctionNoImpl.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Bridges extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInBridges() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges/class.kt");
                    doTest(fileName);
                }

                @TestMetadata("fakeOverrideTrait.kt")
                public void testFakeOverrideTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges/fakeOverrideTrait.kt");
                    doTest(fileName);
                }

                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/bridges/trait.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Erasure extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInErasure() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("collections.kt")
                public void testCollections() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/collections.kt");
                    doTest(fileName);
                }

                @TestMetadata("delegateToTwoTraits.kt")
                public void testDelegateToTwoTraits() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/delegateToTwoTraits.kt");
                    doTest(fileName);
                }

                @TestMetadata("delegationAndOwnMethod.kt")
                public void testDelegationAndOwnMethod() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/delegationAndOwnMethod.kt");
                    doTest(fileName);
                }

                @TestMetadata("delegationToTraitImplAndOwnMethod.kt")
                public void testDelegationToTraitImplAndOwnMethod() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/delegationToTraitImplAndOwnMethod.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionProperties.kt")
                public void testExtensionProperties() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/extensionProperties.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericType.kt")
                public void testGenericType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/genericType.kt");
                    doTest(fileName);
                }

                @TestMetadata("inheritFromTwoTraits.kt")
                public void testInheritFromTwoTraits() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/inheritFromTwoTraits.kt");
                    doTest(fileName);
                }

                @TestMetadata("kotlinAndJavaCollections.kt")
                public void testKotlinAndJavaCollections() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/kotlinAndJavaCollections.kt");
                    doTest(fileName);
                }

                @TestMetadata("nullableType.kt")
                public void testNullableType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/nullableType.kt");
                    doTest(fileName);
                }

                @TestMetadata("superTraitAndDelegationToTraitImpl.kt")
                public void testSuperTraitAndDelegationToTraitImpl() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/superTraitAndDelegationToTraitImpl.kt");
                    doTest(fileName);
                }

                @TestMetadata("twoTraitsAndOwnFunction.kt")
                public void testTwoTraitsAndOwnFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/twoTraitsAndOwnFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeMappedToJava.kt")
                public void testTypeMappedToJava() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeMappedToJava.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeParameter.kt")
                public void testTypeParameter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeParameter.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeParameterWithBound.kt")
                public void testTypeParameterWithBound() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeParameterWithBound.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeParameterWithTwoBounds.kt")
                public void testTypeParameterWithTwoBounds() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeParameterWithTwoBounds.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeParameterWithTwoBoundsInWhere.kt")
                public void testTypeParameterWithTwoBoundsInWhere() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/erasure/typeParameterWithTwoBoundsInWhere.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FunctionAndProperty extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInFunctionAndProperty() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("class.kt")
                public void testClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/class.kt");
                    doTest(fileName);
                }

                @TestMetadata("classObject.kt")
                public void testClassObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/classObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("classPropertyInConstructor.kt")
                public void testClassPropertyInConstructor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/classPropertyInConstructor.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionFunctionAndNormalFunction.kt")
                public void testExtensionFunctionAndNormalFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/extensionFunctionAndNormalFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionPropertyAndFunction.kt")
                public void testExtensionPropertyAndFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/extensionPropertyAndFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionAndSetter.kt")
                public void testFunctionAndSetter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/functionAndSetter.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionAndVar.kt")
                public void testFunctionAndVar() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/functionAndVar.kt");
                    doTest(fileName);
                }

                @TestMetadata("localClass.kt")
                public void testLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/localClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localClassInClass.kt")
                public void testLocalClassInClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/localClassInClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedClass.kt")
                public void testNestedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/nestedClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("object.kt")
                public void testObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/object.kt");
                    doTest(fileName);
                }

                @TestMetadata("objectExpression.kt")
                public void testObjectExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/objectExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("objectExpressionInConstructor.kt")
                public void testObjectExpressionInConstructor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/objectExpressionInConstructor.kt");
                    doTest(fileName);
                }

                @TestMetadata("privateClassPropertyNoClash.kt")
                public void testPrivateClassPropertyNoClash() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/privateClassPropertyNoClash.kt");
                    doTest(fileName);
                }

                @TestMetadata("topLevel.kt")
                public void testTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/topLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("topLevelDifferentFiles.kt")
                public void testTopLevelDifferentFiles() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/topLevelDifferentFiles.kt");
                    doTest(fileName);
                }

                @TestMetadata("topLevelGetter.kt")
                public void testTopLevelGetter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/topLevelGetter.kt");
                    doTest(fileName);
                }

                @TestMetadata("trait.kt")
                public void testTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/trait.kt");
                    doTest(fileName);
                }

                @TestMetadata("withErrorTypes.kt")
                public void testWithErrorTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/functionAndProperty/withErrorTypes.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SpecialNames extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSpecialNames() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("classObject.kt")
                public void testClassObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/classObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("classObjectCopiedField.kt")
                public void testClassObjectCopiedField() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/classObjectCopiedField.kt");
                    doTest(fileName);
                }

                @TestMetadata("classObjectCopiedFieldObject.kt")
                public void testClassObjectCopiedFieldObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/classObjectCopiedFieldObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("dataClassCopy.kt")
                public void testDataClassCopy() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/dataClassCopy.kt");
                    doTest(fileName);
                }

                @TestMetadata("defaults.kt")
                public void testDefaults() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/defaults.kt");
                    doTest(fileName);
                }

                @TestMetadata("delegationBy.kt")
                public void testDelegationBy() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/delegationBy.kt");
                    doTest(fileName);
                }

                @TestMetadata("enum.kt")
                public void testEnum() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/enum.kt");
                    doTest(fileName);
                }

                @TestMetadata("innerClassField.kt")
                public void testInnerClassField() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/innerClassField.kt");
                    doTest(fileName);
                }

                @TestMetadata("instance.kt")
                public void testInstance() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/instance.kt");
                    doTest(fileName);
                }

                @TestMetadata("propertyMetadataCache.kt")
                public void testPropertyMetadataCache() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/specialNames/propertyMetadataCache.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/synthesized")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Synthesized extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSynthesized() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/synthesized"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("enumValuesValueOf.kt")
                public void testEnumValuesValueOf() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/synthesized/enumValuesValueOf.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TraitImpl extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInTraitImpl() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("oneTrait.kt")
                public void testOneTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl/oneTrait.kt");
                    doTest(fileName);
                }

                @TestMetadata("traitFunctionOverriddenByPropertyInTrait.kt")
                public void testTraitFunctionOverriddenByPropertyInTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl/traitFunctionOverriddenByPropertyInTrait.kt");
                    doTest(fileName);
                }

                @TestMetadata("traitPropertyOverriddenByFunctionInTrait.kt")
                public void testTraitPropertyOverriddenByFunctionInTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl/traitPropertyOverriddenByFunctionInTrait.kt");
                    doTest(fileName);
                }

                @TestMetadata("twoTraits.kt")
                public void testTwoTraits() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/duplicateJvmSignature/traitImpl/twoTraits.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/dynamicTypes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class DynamicTypes extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDynamicTypes() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/dynamicTypes"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("delegationBy.kt")
            public void testDelegationBy() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dynamicTypes/delegationBy.kt");
                doTest(fileName);
            }

            @TestMetadata("unsupported.kt")
            public void testUnsupported() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dynamicTypes/unsupported.kt");
                doTest(fileName);
            }

            @TestMetadata("withInvisibleSynthesized.kt")
            public void testWithInvisibleSynthesized() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/dynamicTypes/withInvisibleSynthesized.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/enum")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Enum extends AbstractJetDiagnosticsTest {
            @TestMetadata("AbstractEnum.kt")
            public void testAbstractEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/AbstractEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("AbstractInEnum.kt")
            public void testAbstractInEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/AbstractInEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("AbstractOverrideInEnum.kt")
            public void testAbstractOverrideInEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/AbstractOverrideInEnum.kt");
                doTest(fileName);
            }

            public void testAllFilesPresentInEnum() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/enum"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("classObjectInEnum.kt")
            public void testClassObjectInEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/classObjectInEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("classObjectInEnumPrivate.kt")
            public void testClassObjectInEnumPrivate() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/classObjectInEnumPrivate.kt");
                doTest(fileName);
            }

            @TestMetadata("commonSupertype.kt")
            public void testCommonSupertype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/commonSupertype.kt");
                doTest(fileName);
            }

            @TestMetadata("ConstructorCallFromOutside.kt")
            public void testConstructorCallFromOutside() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/ConstructorCallFromOutside.kt");
                doTest(fileName);
            }

            @TestMetadata("dontCreatePackageTypeForEnumEntry.kt")
            public void testDontCreatePackageTypeForEnumEntry() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/dontCreatePackageTypeForEnumEntry.kt");
                doTest(fileName);
            }

            @TestMetadata("entryShouldBeOfEnumType.kt")
            public void testEntryShouldBeOfEnumType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/entryShouldBeOfEnumType.kt");
                doTest(fileName);
            }

            @TestMetadata("enumCommaNoSemicolon.kt")
            public void testEnumCommaNoSemicolon() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumCommaNoSemicolon.kt");
                doTest(fileName);
            }

            @TestMetadata("enumCommaSemicolonBetween.kt")
            public void testEnumCommaSemicolonBetween() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumCommaSemicolonBetween.kt");
                doTest(fileName);
            }

            @TestMetadata("enumEntriesAtTheEnd.kt")
            public void testEnumEntriesAtTheEnd() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumEntriesAtTheEnd.kt");
                doTest(fileName);
            }

            @TestMetadata("enumEntryCannotHaveClassObject.kt")
            public void testEnumEntryCannotHaveClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumEntryCannotHaveClassObject.kt");
                doTest(fileName);
            }

            @TestMetadata("enumEntryInAbstractEnum.kt")
            public void testEnumEntryInAbstractEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumEntryInAbstractEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("enumImplementingTrait.kt")
            public void testEnumImplementingTrait() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumImplementingTrait.kt");
                doTest(fileName);
            }

            @TestMetadata("enumInheritance.kt")
            public void testEnumInheritance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumInheritance.kt");
                doTest(fileName);
            }

            @TestMetadata("enumIsAssignableToBuiltInEnum.kt")
            public void testEnumIsAssignableToBuiltInEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumIsAssignableToBuiltInEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("enumMissedComma.kt")
            public void testEnumMissedComma() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumMissedComma.kt");
                doTest(fileName);
            }

            @TestMetadata("enumMissingName.kt")
            public void testEnumMissingName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumMissingName.kt");
                doTest(fileName);
            }

            @TestMetadata("enumMixed.kt")
            public void testEnumMixed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumMixed.kt");
                doTest(fileName);
            }

            @TestMetadata("enumMixedWithCommas.kt")
            public void testEnumMixedWithCommas() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumMixedWithCommas.kt");
                doTest(fileName);
            }

            @TestMetadata("enumMixedWithSemicolons.kt")
            public void testEnumMixedWithSemicolons() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumMixedWithSemicolons.kt");
                doTest(fileName);
            }

            @TestMetadata("enumModifier.kt")
            public void testEnumModifier() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumModifier.kt");
                doTest(fileName);
            }

            @TestMetadata("enumNoComma.kt")
            public void testEnumNoComma() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumNoComma.kt");
                doTest(fileName);
            }

            @TestMetadata("enumNoSemicolon.kt")
            public void testEnumNoSemicolon() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumNoSemicolon.kt");
                doTest(fileName);
            }

            @TestMetadata("enumOldConstructor.kt")
            public void testEnumOldConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumOldConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("enumOldConstructorNamedArgument.kt")
            public void testEnumOldConstructorNamedArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumOldConstructorNamedArgument.kt");
                doTest(fileName);
            }

            @TestMetadata("enumOldConstructors.kt")
            public void testEnumOldConstructors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumOldConstructors.kt");
                doTest(fileName);
            }

            @TestMetadata("enumSemicolonBetween.kt")
            public void testEnumSemicolonBetween() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumSemicolonBetween.kt");
                doTest(fileName);
            }

            @TestMetadata("enumStarImport.kt")
            public void testEnumStarImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumStarImport.kt");
                doTest(fileName);
            }

            @TestMetadata("enumWithEmptyName.kt")
            public void testEnumWithEmptyName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/enumWithEmptyName.kt");
                doTest(fileName);
            }

            @TestMetadata("ExplicitConstructorCall.kt")
            public void testExplicitConstructorCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/ExplicitConstructorCall.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionNamedAsEnumEntry.kt")
            public void testExtensionNamedAsEnumEntry() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/extensionNamedAsEnumEntry.kt");
                doTest(fileName);
            }

            @TestMetadata("ifEnumEntry.kt")
            public void testIfEnumEntry() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/ifEnumEntry.kt");
                doTest(fileName);
            }

            @TestMetadata("importEnumFromJava.kt")
            public void testImportEnumFromJava() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/importEnumFromJava.kt");
                doTest(fileName);
            }

            @TestMetadata("inheritFromEnumEntry.kt")
            public void testInheritFromEnumEntry() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inheritFromEnumEntry.kt");
                doTest(fileName);
            }

            @TestMetadata("inheritanceFromEnum.kt")
            public void testInheritanceFromEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inheritanceFromEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("InsideEntryConstructorCall.kt")
            public void testInsideEntryConstructorCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/InsideEntryConstructorCall.kt");
                doTest(fileName);
            }

            @TestMetadata("InsideSecondaryConstructorCall.kt")
            public void testInsideSecondaryConstructorCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/InsideSecondaryConstructorCall.kt");
                doTest(fileName);
            }

            @TestMetadata("isEnumEntry.kt")
            public void testIsEnumEntry() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/isEnumEntry.kt");
                doTest(fileName);
            }

            @TestMetadata("javaEnumValueOfMethod.kt")
            public void testJavaEnumValueOfMethod() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/javaEnumValueOfMethod.kt");
                doTest(fileName);
            }

            @TestMetadata("javaEnumValuesMethod.kt")
            public void testJavaEnumValuesMethod() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/javaEnumValuesMethod.kt");
                doTest(fileName);
            }

            @TestMetadata("javaEnumWithAbstractFun.kt")
            public void testJavaEnumWithAbstractFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/javaEnumWithAbstractFun.kt");
                doTest(fileName);
            }

            @TestMetadata("javaEnumWithFuns.kt")
            public void testJavaEnumWithFuns() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/javaEnumWithFuns.kt");
                doTest(fileName);
            }

            @TestMetadata("javaEnumWithNameClashing.kt")
            public void testJavaEnumWithNameClashing() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/javaEnumWithNameClashing.kt");
                doTest(fileName);
            }

            @TestMetadata("javaEnumWithProperty.kt")
            public void testJavaEnumWithProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/javaEnumWithProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2834.kt")
            public void testKt2834() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/kt2834.kt");
                doTest(fileName);
            }

            @TestMetadata("localEnums.kt")
            public void testLocalEnums() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/localEnums.kt");
                doTest(fileName);
            }

            @TestMetadata("modifiersOnEnumEntry.kt")
            public void testModifiersOnEnumEntry() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/modifiersOnEnumEntry.kt");
                doTest(fileName);
            }

            @TestMetadata("OldSyntaxConstructorCall.kt")
            public void testOldSyntaxConstructorCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/OldSyntaxConstructorCall.kt");
                doTest(fileName);
            }

            @TestMetadata("openMemberInEnum.kt")
            public void testOpenMemberInEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/openMemberInEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("overrideFinalEnumMethods.kt")
            public void testOverrideFinalEnumMethods() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/overrideFinalEnumMethods.kt");
                doTest(fileName);
            }

            @TestMetadata("SecondaryConstructorCall.kt")
            public void testSecondaryConstructorCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/SecondaryConstructorCall.kt");
                doTest(fileName);
            }

            @TestMetadata("starImportNestedClassAndEntries.kt")
            public void testStarImportNestedClassAndEntries() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/starImportNestedClassAndEntries.kt");
                doTest(fileName);
            }

            @TestMetadata("typeParametersInEnum.kt")
            public void testTypeParametersInEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/typeParametersInEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("valuesValueOfAndEntriesAccessibility.kt")
            public void testValuesValueOfAndEntriesAccessibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/valuesValueOfAndEntriesAccessibility.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/enum/inner")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inner extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInner() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/enum/inner"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("existingClassObject.kt")
                public void testExistingClassObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/existingClassObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideClass.kt")
                public void testInsideClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/insideClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideClassObject.kt")
                public void testInsideClassObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/insideClassObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideEnum.kt")
                public void testInsideEnum() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/insideEnum.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideEnumEntry.kt")
                public void testInsideEnumEntry() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/insideEnumEntry.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideInnerClassNotAllowed.kt")
                public void testInsideInnerClassNotAllowed() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/insideInnerClassNotAllowed.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideObject.kt")
                public void testInsideObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/insideObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideTrait.kt")
                public void testInsideTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/insideTrait.kt");
                    doTest(fileName);
                }

                @TestMetadata("redeclarationInClassObject.kt")
                public void testRedeclarationInClassObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/redeclarationInClassObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("twoEnums.kt")
                public void testTwoEnums() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/twoEnums.kt");
                    doTest(fileName);
                }

                @TestMetadata("twoEnumsInClassObjectAndInnerClass.kt")
                public void testTwoEnumsInClassObjectAndInnerClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/enum/inner/twoEnumsInClassObjectAndInnerClass.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/evaluate")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Evaluate extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInEvaluate() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/evaluate"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("binaryMinusDepOnExpType.kt")
            public void testBinaryMinusDepOnExpType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/binaryMinusDepOnExpType.kt");
                doTest(fileName);
            }

            @TestMetadata("binaryMinusIndepWoExpType.kt")
            public void testBinaryMinusIndepWoExpType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/binaryMinusIndepWoExpType.kt");
                doTest(fileName);
            }

            @TestMetadata("binaryMinusIndependentExpType.kt")
            public void testBinaryMinusIndependentExpType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/binaryMinusIndependentExpType.kt");
                doTest(fileName);
            }

            @TestMetadata("divisionByZero.kt")
            public void testDivisionByZero() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/divisionByZero.kt");
                doTest(fileName);
            }

            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/float.kt");
                doTest(fileName);
            }

            @TestMetadata("intOverflow.kt")
            public void testIntOverflow() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/intOverflow.kt");
                doTest(fileName);
            }

            @TestMetadata("intOverflowWithJavaProperties.kt")
            public void testIntOverflowWithJavaProperties() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/intOverflowWithJavaProperties.kt");
                doTest(fileName);
            }

            @TestMetadata("integer.kt")
            public void testInteger() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/integer.kt");
                doTest(fileName);
            }

            @TestMetadata("longOverflow.kt")
            public void testLongOverflow() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/longOverflow.kt");
                doTest(fileName);
            }

            @TestMetadata("numberBinaryOperations.kt")
            public void testNumberBinaryOperations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperations.kt");
                doTest(fileName);
            }

            @TestMetadata("numberBinaryOperationsCall.kt")
            public void testNumberBinaryOperationsCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsCall.kt");
                doTest(fileName);
            }

            @TestMetadata("numberBinaryOperationsInfixCall.kt")
            public void testNumberBinaryOperationsInfixCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsInfixCall.kt");
                doTest(fileName);
            }

            @TestMetadata("otherOverflow.kt")
            public void testOtherOverflow() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/otherOverflow.kt");
                doTest(fileName);
            }

            @TestMetadata("parentesized.kt")
            public void testParentesized() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/parentesized.kt");
                doTest(fileName);
            }

            @TestMetadata("qualifiedExpressions.kt")
            public void testQualifiedExpressions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/qualifiedExpressions.kt");
                doTest(fileName);
            }

            @TestMetadata("unaryMinusDepOnExpType.kt")
            public void testUnaryMinusDepOnExpType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/unaryMinusDepOnExpType.kt");
                doTest(fileName);
            }

            @TestMetadata("unaryMinusIndepWoExpType.kt")
            public void testUnaryMinusIndepWoExpType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/unaryMinusIndepWoExpType.kt");
                doTest(fileName);
            }

            @TestMetadata("unaryMinusIndependentExpType.kt")
            public void testUnaryMinusIndependentExpType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/unaryMinusIndependentExpType.kt");
                doTest(fileName);
            }

            @TestMetadata("wrongLongSuffix.kt")
            public void testWrongLongSuffix() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/evaluate/wrongLongSuffix.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/extensions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Extensions extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInExtensions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/extensions"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/classObject.kt");
                doTest(fileName);
            }

            @TestMetadata("ExtensionFunctions.kt")
            public void testExtensionFunctions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/ExtensionFunctions.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionMemberInClassObject.kt")
            public void testExtensionMemberInClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/extensionMemberInClassObject.kt");
                doTest(fileName);
            }

            @TestMetadata("ExtensionsCalledOnSuper.kt")
            public void testExtensionsCalledOnSuper() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/ExtensionsCalledOnSuper.kt");
                doTest(fileName);
            }

            @TestMetadata("GenericIterator.kt")
            public void testGenericIterator() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/GenericIterator.kt");
                doTest(fileName);
            }

            @TestMetadata("GenericIterator2.kt")
            public void testGenericIterator2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/GenericIterator2.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1875.kt")
            public void testKt1875() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/kt1875.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2317.kt")
            public void testKt2317() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/kt2317.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3470.kt")
            public void testKt3470() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/kt3470.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3563.kt")
            public void testKt3563() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/kt3563.kt");
                doTest(fileName);
            }

            @TestMetadata("kt819ExtensionProperties.kt")
            public void testKt819ExtensionProperties() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/kt819ExtensionProperties.kt");
                doTest(fileName);
            }

            @TestMetadata("noClassObjectsInJava.kt")
            public void testNoClassObjectsInJava() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/noClassObjectsInJava.kt");
                doTest(fileName);
            }

            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/object.kt");
                doTest(fileName);
            }

            @TestMetadata("throwOutCandidatesByReceiver.kt")
            public void testThrowOutCandidatesByReceiver() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver.kt");
                doTest(fileName);
            }

            @TestMetadata("throwOutCandidatesByReceiver2.kt")
            public void testThrowOutCandidatesByReceiver2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver2.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/functionAsExpression")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FunctionAsExpression extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInFunctionAsExpression() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/functionAsExpression"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AutoLabels.kt")
            public void testAutoLabels() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/AutoLabels.kt");
                doTest(fileName);
            }

            @TestMetadata("Common.kt")
            public void testCommon() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/Common.kt");
                doTest(fileName);
            }

            @TestMetadata("DifficultInferenceForParameter.kt")
            public void testDifficultInferenceForParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/DifficultInferenceForParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("ForbiddenNonLocalReturn.kt")
            public void testForbiddenNonLocalReturn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/ForbiddenNonLocalReturn.kt");
                doTest(fileName);
            }

            @TestMetadata("FunctionType.kt")
            public void testFunctionType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/FunctionType.kt");
                doTest(fileName);
            }

            @TestMetadata("InferenceParametersTypes.kt")
            public void testInferenceParametersTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/InferenceParametersTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("MissingParameterTypes.kt")
            public void testMissingParameterTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/MissingParameterTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("NameDeprecation.kt")
            public void testNameDeprecation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/NameDeprecation.kt");
                doTest(fileName);
            }

            @TestMetadata("NoOverloadError.kt")
            public void testNoOverloadError() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/NoOverloadError.kt");
                doTest(fileName);
            }

            @TestMetadata("Parameters.kt")
            public void testParameters() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/Parameters.kt");
                doTest(fileName);
            }

            @TestMetadata("ReturnAndLabels.kt")
            public void testReturnAndLabels() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/ReturnAndLabels.kt");
                doTest(fileName);
            }

            @TestMetadata("ReturnTypeCheck.kt")
            public void testReturnTypeCheck() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/ReturnTypeCheck.kt");
                doTest(fileName);
            }

            @TestMetadata("ScopeCheck.kt")
            public void testScopeCheck() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/ScopeCheck.kt");
                doTest(fileName);
            }

            @TestMetadata("WithGenericParameters.kt")
            public void testWithGenericParameters() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/WithGenericParameters.kt");
                doTest(fileName);
            }

            @TestMetadata("WithOuterGeneric.kt")
            public void testWithOuterGeneric() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/WithOuterGeneric.kt");
                doTest(fileName);
            }

            @TestMetadata("WithoutBody.kt")
            public void testWithoutBody() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionAsExpression/WithoutBody.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class FunctionLiterals extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInFunctionLiterals() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/functionLiterals"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("assignmentOperationInLambda.kt")
            public void testAssignmentOperationInLambda() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/assignmentOperationInLambda.kt");
                doTest(fileName);
            }

            @TestMetadata("assignmentOperationInLambdaWithExpectedType.kt")
            public void testAssignmentOperationInLambdaWithExpectedType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/assignmentOperationInLambdaWithExpectedType.kt");
                doTest(fileName);
            }

            @TestMetadata("DeprecatedSyntax.kt")
            public void testDeprecatedSyntax() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/DeprecatedSyntax.kt");
                doTest(fileName);
            }

            @TestMetadata("ExpectedParameterTypeMismatchVariance.kt")
            public void testExpectedParameterTypeMismatchVariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/ExpectedParameterTypeMismatchVariance.kt");
                doTest(fileName);
            }

            @TestMetadata("ExpectedParametersTypesMismatch.kt")
            public void testExpectedParametersTypesMismatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/ExpectedParametersTypesMismatch.kt");
                doTest(fileName);
            }

            @TestMetadata("functionLIteralInBlockInIf.kt")
            public void testFunctionLIteralInBlockInIf() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/functionLIteralInBlockInIf.kt");
                doTest(fileName);
            }

            @TestMetadata("functionLiteralInIf.kt")
            public void testFunctionLiteralInIf() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralInIf.kt");
                doTest(fileName);
            }

            @TestMetadata("functionLiteralWithoutArgumentList.kt")
            public void testFunctionLiteralWithoutArgumentList() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralWithoutArgumentList.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2906.kt")
            public void testKt2906() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/kt2906.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4529.kt")
            public void testKt4529() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/kt4529.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6541_extensionForExtensionFunction.kt")
            public void testKt6541_extensionForExtensionFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/kt6541_extensionForExtensionFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6869.kt")
            public void testKt6869() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/kt6869.kt");
                doTest(fileName);
            }

            @TestMetadata("kt7383_starProjectedFunction.kt")
            public void testKt7383_starProjectedFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/kt7383_starProjectedFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("LabeledFunctionLiterals.kt")
            public void testLabeledFunctionLiterals() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/LabeledFunctionLiterals.kt");
                doTest(fileName);
            }

            @TestMetadata("returnNull.kt")
            public void testReturnNull() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/returnNull.kt");
                doTest(fileName);
            }

            @TestMetadata("returnNullWithReturn.kt")
            public void testReturnNullWithReturn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/returnNullWithReturn.kt");
                doTest(fileName);
            }

            @TestMetadata("unusedLiteral.kt")
            public void testUnusedLiteral() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteral.kt");
                doTest(fileName);
            }

            @TestMetadata("unusedLiteralInsideUnitLiteral.kt")
            public void testUnusedLiteralInsideUnitLiteral() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteralInsideUnitLiteral.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/return")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Return extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInReturn() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/functionLiterals/return"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("AutoLabels.kt")
                public void testAutoLabels() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabels.kt");
                    doTest(fileName);
                }

                @TestMetadata("AutoLabelsNonLocal.kt")
                public void testAutoLabelsNonLocal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabelsNonLocal.kt");
                    doTest(fileName);
                }

                @TestMetadata("ForbiddenNonLocalReturnNoType.kt")
                public void testForbiddenNonLocalReturnNoType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/ForbiddenNonLocalReturnNoType.kt");
                    doTest(fileName);
                }

                @TestMetadata("IfInReturnedExpression.kt")
                public void testIfInReturnedExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/IfInReturnedExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("IfWithoutElse.kt")
                public void testIfWithoutElse() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/IfWithoutElse.kt");
                    doTest(fileName);
                }

                @TestMetadata("IfWithoutElseWithExplicitType.kt")
                public void testIfWithoutElseWithExplicitType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/IfWithoutElseWithExplicitType.kt");
                    doTest(fileName);
                }

                @TestMetadata("LambdaWithParameter.kt")
                public void testLambdaWithParameter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LambdaWithParameter.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalAndNonLocalReturnInLambda.kt")
                public void testLocalAndNonLocalReturnInLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalAndNonLocalReturnInLambda.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnExplicitLabelNoParens.kt")
                public void testLocalReturnExplicitLabelNoParens() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelNoParens.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnExplicitLabelParens.kt")
                public void testLocalReturnExplicitLabelParens() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelParens.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnHasTypeNothing.kt")
                public void testLocalReturnHasTypeNothing() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnHasTypeNothing.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnInNestedFunction.kt")
                public void testLocalReturnInNestedFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnInNestedLambda.kt")
                public void testLocalReturnInNestedLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedLambda.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnNoCoercionToUnit.kt")
                public void testLocalReturnNoCoercionToUnit() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNoCoercionToUnit.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnNull.kt")
                public void testLocalReturnNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnSecondUnit.kt")
                public void testLocalReturnSecondUnit() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnSecondUnit.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnUnit.kt")
                public void testLocalReturnUnit() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnit.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnUnitAndDontCareType.kt")
                public void testLocalReturnUnitAndDontCareType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnitAndDontCareType.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnUnitWithBodyExpression.kt")
                public void testLocalReturnUnitWithBodyExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnitWithBodyExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnWithExpectedType.kt")
                public void testLocalReturnWithExpectedType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithExpectedType.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnWithExplicitUnit.kt")
                public void testLocalReturnWithExplicitUnit() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithExplicitUnit.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalReturnsWithExplicitReturnType.kt")
                public void testLocalReturnsWithExplicitReturnType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnsWithExplicitReturnType.kt");
                    doTest(fileName);
                }

                @TestMetadata("MixedReturnsFromLambda.kt")
                public void testMixedReturnsFromLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/MixedReturnsFromLambda.kt");
                    doTest(fileName);
                }

                @TestMetadata("NoCommonSystem.kt")
                public void testNoCommonSystem() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/NoCommonSystem.kt");
                    doTest(fileName);
                }

                @TestMetadata("SmartCast.kt")
                public void testSmartCast() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/SmartCast.kt");
                    doTest(fileName);
                }

                @TestMetadata("SmartCastWithExplicitType.kt")
                public void testSmartCastWithExplicitType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/SmartCastWithExplicitType.kt");
                    doTest(fileName);
                }

                @TestMetadata("unresolvedReferenceInReturnBlock.kt")
                public void testUnresolvedReferenceInReturnBlock() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/functionLiterals/return/unresolvedReferenceInReturnBlock.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/generics")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Generics extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInGenerics() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("argumentsForT.kt")
            public void testArgumentsForT() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/argumentsForT.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1575-Class.kt")
            public void testKt1575_Class() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/kt1575-Class.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1575-Function.kt")
            public void testKt1575_Function() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/kt1575-Function.kt");
                doTest(fileName);
            }

            @TestMetadata("Projections.kt")
            public void testProjections() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/Projections.kt");
                doTest(fileName);
            }

            @TestMetadata("PseudoRawTypes.kt")
            public void testPseudoRawTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/PseudoRawTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("RawTypeInIsExpression.kt")
            public void testRawTypeInIsExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/RawTypeInIsExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("RawTypeInIsPattern.kt")
            public void testRawTypeInIsPattern() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/RawTypeInIsPattern.kt");
                doTest(fileName);
            }

            @TestMetadata("recursive.kt")
            public void testRecursive() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/recursive.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursiveUpperBoundCheck.kt")
            public void testRecursiveUpperBoundCheck() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundCheck.kt");
                doTest(fileName);
            }

            @TestMetadata("RecursiveUpperBoundWithTwoArguments.kt")
            public void testRecursiveUpperBoundWithTwoArguments() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundWithTwoArguments.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveGenericBoundsBeforeSupertypes.kt")
            public void testResolveGenericBoundsBeforeSupertypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/resolveGenericBoundsBeforeSupertypes.kt");
                doTest(fileName);
            }

            @TestMetadata("sameTypeParameterUse.kt")
            public void testSameTypeParameterUse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/sameTypeParameterUse.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/starProjections")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class StarProjections extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInStarProjections() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/starProjections"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("collectionInheritedFromJava.kt")
                public void testCollectionInheritedFromJava() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/starProjections/collectionInheritedFromJava.kt");
                    doTest(fileName);
                }

                @TestMetadata("inheritedFromJava.kt")
                public void testInheritedFromJava() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/starProjections/inheritedFromJava.kt");
                    doTest(fileName);
                }

                @TestMetadata("inheritedFromKotlin.kt")
                public void testInheritedFromKotlin() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/starProjections/inheritedFromKotlin.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TpAsReified extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInTpAsReified() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/tpAsReified"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("Conventions.kt")
                public void testConventions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/Conventions.kt");
                    doTest(fileName);
                }

                @TestMetadata("InConstructor.kt")
                public void testInConstructor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/InConstructor.kt");
                    doTest(fileName);
                }

                @TestMetadata("InFunction.kt")
                public void testInFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/InFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("InProperty.kt")
                public void testInProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/InProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("InType.kt")
                public void testInType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/InType.kt");
                    doTest(fileName);
                }

                @TestMetadata("InlineableReified.kt")
                public void testInlineableReified() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/InlineableReified.kt");
                    doTest(fileName);
                }

                @TestMetadata("LocalFun.kt")
                public void testLocalFun() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/LocalFun.kt");
                    doTest(fileName);
                }

                @TestMetadata("NotInlineableReified.kt")
                public void testNotInlineableReified() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/NotInlineableReified.kt");
                    doTest(fileName);
                }

                @TestMetadata("ReifiedClass.kt")
                public void testReifiedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified/ReifiedClass.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/generics/varProjection")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class VarProjection extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInVarProjection() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/generics/varProjection"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("setterNotProjectedOutAssign.kt")
                public void testSetterNotProjectedOutAssign() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/varProjection/setterNotProjectedOutAssign.kt");
                    doTest(fileName);
                }

                @TestMetadata("setterProjectedOutAssign.kt")
                public void testSetterProjectedOutAssign() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutAssign.kt");
                    doTest(fileName);
                }

                @TestMetadata("setterProjectedOutNoPlusAssign.kt")
                public void testSetterProjectedOutNoPlusAssign() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutNoPlusAssign.kt");
                    doTest(fileName);
                }

                @TestMetadata("setterProjectedOutPlusAssignDefined.kt")
                public void testSetterProjectedOutPlusAssignDefined() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutPlusAssignDefined.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/imports")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Imports extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInImports() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/imports"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AllUnderImportsAmbiguity.kt")
            public void testAllUnderImportsAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/AllUnderImportsAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("AllUnderImportsLessPriority.kt")
            public void testAllUnderImportsLessPriority() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/AllUnderImportsLessPriority.kt");
                doTest(fileName);
            }

            @TestMetadata("AllUnderImportsSamePriorityForFunction.kt")
            public void testAllUnderImportsSamePriorityForFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/AllUnderImportsSamePriorityForFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("AllUnderImportsSamePriorityForProperty.kt")
            public void testAllUnderImportsSamePriorityForProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/AllUnderImportsSamePriorityForProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("ClassImportsConflicting.kt")
            public void testClassImportsConflicting() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ClassImportsConflicting.kt");
                doTest(fileName);
            }

            @TestMetadata("CurrentPackageAndAllUnderImport.kt")
            public void testCurrentPackageAndAllUnderImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/CurrentPackageAndAllUnderImport.kt");
                doTest(fileName);
            }

            @TestMetadata("CurrentPackageAndExplicitImport.kt")
            public void testCurrentPackageAndExplicitImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/CurrentPackageAndExplicitImport.kt");
                doTest(fileName);
            }

            @TestMetadata("DefaultImportsPriority.kt")
            public void testDefaultImportsPriority() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/DefaultImportsPriority.kt");
                doTest(fileName);
            }

            @TestMetadata("ExplicitImportsAmbiguity.kt")
            public void testExplicitImportsAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ExplicitImportsAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("ExplicitImportsUnambiguityForFunction.kt")
            public void testExplicitImportsUnambiguityForFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ExplicitImportsUnambiguityForFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("ExplicitPackageImportsAmbiguity.kt")
            public void testExplicitPackageImportsAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ExplicitPackageImportsAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportFromCurrentWithDifferentName.kt")
            public void testImportFromCurrentWithDifferentName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportFromCurrentWithDifferentName.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportFromRootPackage.kt")
            public void testImportFromRootPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportFromRootPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("importFunctionWithAllUnderImport.kt")
            public void testImportFunctionWithAllUnderImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/importFunctionWithAllUnderImport.kt");
                doTest(fileName);
            }

            @TestMetadata("importFunctionWithAllUnderImportAfterNamedImport.kt")
            public void testImportFunctionWithAllUnderImportAfterNamedImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/importFunctionWithAllUnderImportAfterNamedImport.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportHidingDefinitionInTheSameFile.kt")
            public void testImportHidingDefinitionInTheSameFile() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportHidingDefinitionInTheSameFile.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportObjectAndUseAsSupertype.kt")
            public void testImportObjectAndUseAsSupertype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportObjectAndUseAsSupertype.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportObjectHidesCurrentPackage.kt")
            public void testImportObjectHidesCurrentPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportObjectHidesCurrentPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportProtectedClass.kt")
            public void testImportProtectedClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportProtectedClass.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportResolutionOrder.kt")
            public void testImportResolutionOrder() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportResolutionOrder.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportTwoTimes.kt")
            public void testImportTwoTimes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportTwoTimes.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportTwoTimesStar.kt")
            public void testImportTwoTimesStar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportTwoTimesStar.kt");
                doTest(fileName);
            }

            @TestMetadata("Imports.kt")
            public void testImports() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/Imports.kt");
                doTest(fileName);
            }

            @TestMetadata("ImportsConflicting.kt")
            public void testImportsConflicting() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/ImportsConflicting.kt");
                doTest(fileName);
            }

            @TestMetadata("JavaPackageLocalClassNotImported.kt")
            public void testJavaPackageLocalClassNotImported() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/JavaPackageLocalClassNotImported.kt");
                doTest(fileName);
            }

            @TestMetadata("MalformedImports.kt")
            public void testMalformedImports() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/MalformedImports.kt");
                doTest(fileName);
            }

            @TestMetadata("PackageLocalClassNotImported.kt")
            public void testPackageLocalClassNotImported() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/PackageLocalClassNotImported.kt");
                doTest(fileName);
            }

            @TestMetadata("PackageLocalClassReferencedError.kt")
            public void testPackageLocalClassReferencedError() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/PackageLocalClassReferencedError.kt");
                doTest(fileName);
            }

            @TestMetadata("PrivateClassNotImported.kt")
            public void testPrivateClassNotImported() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/PrivateClassNotImported.kt");
                doTest(fileName);
            }

            @TestMetadata("PrivateClassReferencedError.kt")
            public void testPrivateClassReferencedError() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/PrivateClassReferencedError.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyClassFileDependencyRecursion.kt")
            public void testPropertyClassFileDependencyRecursion() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/propertyClassFileDependencyRecursion.kt");
                doTest(fileName);
            }

            @TestMetadata("RenameOnImport.kt")
            public void testRenameOnImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/RenameOnImport.kt");
                doTest(fileName);
            }

            @TestMetadata("StarImportFromObject.kt")
            public void testStarImportFromObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/imports/StarImportFromObject.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class IncompleteCode extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInIncompleteCode() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/incompleteCode"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("arrayBracketsRange.kt")
            public void testArrayBracketsRange() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/arrayBracketsRange.kt");
                doTest(fileName);
            }

            @TestMetadata("checkNothingIsSubtype.kt")
            public void testCheckNothingIsSubtype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/checkNothingIsSubtype.kt");
                doTest(fileName);
            }

            @TestMetadata("controlStructuresErrors.kt")
            public void testControlStructuresErrors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/controlStructuresErrors.kt");
                doTest(fileName);
            }

            @TestMetadata("inExpr.kt")
            public void testInExpr() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/inExpr.kt");
                doTest(fileName);
            }

            @TestMetadata("incompleteAssignment.kt")
            public void testIncompleteAssignment() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/incompleteAssignment.kt");
                doTest(fileName);
            }

            @TestMetadata("incompleteEquals.kt")
            public void testIncompleteEquals() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/incompleteEquals.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1955.kt")
            public void testKt1955() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/kt1955.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2014.kt")
            public void testKt2014() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/kt2014.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4866UnresolvedArrayAccess.kt")
            public void testKt4866UnresolvedArrayAccess() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/kt4866UnresolvedArrayAccess.kt");
                doTest(fileName);
            }

            @TestMetadata("NoSenselessComparisonForErrorType.kt")
            public void testNoSenselessComparisonForErrorType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/NoSenselessComparisonForErrorType.kt");
                doTest(fileName);
            }

            @TestMetadata("plusOnTheRight.kt")
            public void testPlusOnTheRight() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/plusOnTheRight.kt");
                doTest(fileName);
            }

            @TestMetadata("pseudocodeTraverseNextInstructions.kt")
            public void testPseudocodeTraverseNextInstructions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/pseudocodeTraverseNextInstructions.kt");
                doTest(fileName);
            }

            @TestMetadata("senselessComparisonWithNull.kt")
            public void testSenselessComparisonWithNull() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/senselessComparisonWithNull.kt");
                doTest(fileName);
            }

            @TestMetadata("SupertypeOfErrorType.kt")
            public void testSupertypeOfErrorType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/SupertypeOfErrorType.kt");
                doTest(fileName);
            }

            @TestMetadata("typeParameterOnLhsOfDot.kt")
            public void testTypeParameterOnLhsOfDot() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/typeParameterOnLhsOfDot.kt");
                doTest(fileName);
            }

            @TestMetadata("unresolvedArguments.kt")
            public void testUnresolvedArguments() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/unresolvedArguments.kt");
                doTest(fileName);
            }

            @TestMetadata("unresolvedOperation.kt")
            public void testUnresolvedOperation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/unresolvedOperation.kt");
                doTest(fileName);
            }

            @TestMetadata("variableDeclarationInSelector.kt")
            public void testVariableDeclarationInSelector() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/variableDeclarationInSelector.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DiagnosticWithSyntaxError extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInDiagnosticWithSyntaxError() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("arrayExpression.kt")
                public void testArrayExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/arrayExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("checkBackingFieldException.kt")
                public void testCheckBackingFieldException() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/checkBackingFieldException.kt");
                    doTest(fileName);
                }

                @TestMetadata("completeFunctionArgumentsOfNestedCalls.kt")
                public void testCompleteFunctionArgumentsOfNestedCalls() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/completeFunctionArgumentsOfNestedCalls.kt");
                    doTest(fileName);
                }

                @TestMetadata("funEquals.kt")
                public void testFunEquals() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funEquals.kt");
                    doTest(fileName);
                }

                @TestMetadata("funKeyword.kt")
                public void testFunKeyword() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funKeyword.kt");
                    doTest(fileName);
                }

                @TestMetadata("funcitonTypes.kt")
                public void testFuncitonTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funcitonTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("incompleteEnumReference.kt")
                public void testIncompleteEnumReference() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteEnumReference.kt");
                    doTest(fileName);
                }

                @TestMetadata("incompleteVal.kt")
                public void testIncompleteVal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteVal.kt");
                    doTest(fileName);
                }

                @TestMetadata("incompleteValWithAccessor.kt")
                public void testIncompleteValWithAccessor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteValWithAccessor.kt");
                    doTest(fileName);
                }

                @TestMetadata("incompleteWhen.kt")
                public void testIncompleteWhen() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteWhen.kt");
                    doTest(fileName);
                }

                @TestMetadata("namedFun.kt")
                public void testNamedFun() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/namedFun.kt");
                    doTest(fileName);
                }

                @TestMetadata("noTypeParamsInReturnType.kt")
                public void testNoTypeParamsInReturnType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/noTypeParamsInReturnType.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeReferenceError.kt")
                public void testTypeReferenceError() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/typeReferenceError.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/inference")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inference extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInInference() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("cannotCompleteResolveAmbiguity.kt")
            public void testCannotCompleteResolveAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("cannotCompleteResolveFunctionLiteralsNoUse.kt")
            public void testCannotCompleteResolveFunctionLiteralsNoUse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveFunctionLiteralsNoUse.kt");
                doTest(fileName);
            }

            @TestMetadata("cannotCompleteResolveNoInfoForParameter.kt")
            public void testCannotCompleteResolveNoInfoForParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoInfoForParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("cannotCompleteResolveNoneApplicable.kt")
            public void testCannotCompleteResolveNoneApplicable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoneApplicable.kt");
                doTest(fileName);
            }

            @TestMetadata("cannotCompleteResolveWithFunctionLiterals.kt")
            public void testCannotCompleteResolveWithFunctionLiterals() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveWithFunctionLiterals.kt");
                doTest(fileName);
            }

            @TestMetadata("completeInferenceIfManyFailed.kt")
            public void testCompleteInferenceIfManyFailed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/completeInferenceIfManyFailed.kt");
                doTest(fileName);
            }

            @TestMetadata("conflictingSubstitutions.kt")
            public void testConflictingSubstitutions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/conflictingSubstitutions.kt");
                doTest(fileName);
            }

            @TestMetadata("dependOnExpectedType.kt")
            public void testDependOnExpectedType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/dependOnExpectedType.kt");
                doTest(fileName);
            }

            @TestMetadata("dependantOnVariance.kt")
            public void testDependantOnVariance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/dependantOnVariance.kt");
                doTest(fileName);
            }

            @TestMetadata("dependantOnVarianceNullable.kt")
            public void testDependantOnVarianceNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/dependantOnVarianceNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("functionPlaceholderError.kt")
            public void testFunctionPlaceholderError() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/functionPlaceholderError.kt");
                doTest(fileName);
            }

            @TestMetadata("hasErrorInConstrainingTypes.kt")
            public void testHasErrorInConstrainingTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/hasErrorInConstrainingTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("immutableArrayList.kt")
            public void testImmutableArrayList() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/immutableArrayList.kt");
                doTest(fileName);
            }

            @TestMetadata("inferInFunctionLiterals.kt")
            public void testInferInFunctionLiterals() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/inferInFunctionLiterals.kt");
                doTest(fileName);
            }

            @TestMetadata("inferInFunctionLiteralsWithReturn.kt")
            public void testInferInFunctionLiteralsWithReturn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/inferInFunctionLiteralsWithReturn.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1293.kt")
            public void testKt1293() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/kt1293.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3184.kt")
            public void testKt3184() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/kt3184.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6175.kt")
            public void testKt6175() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/kt6175.kt");
                doTest(fileName);
            }

            @TestMetadata("kt619.kt")
            public void testKt619() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/kt619.kt");
                doTest(fileName);
            }

            @TestMetadata("listConstructor.kt")
            public void testListConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/listConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("mapFunction.kt")
            public void testMapFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/mapFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("mostSpecificAfterInference.kt")
            public void testMostSpecificAfterInference() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/mostSpecificAfterInference.kt");
                doTest(fileName);
            }

            @TestMetadata("NoInferenceFromDeclaredBounds.kt")
            public void testNoInferenceFromDeclaredBounds() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/NoInferenceFromDeclaredBounds.kt");
                doTest(fileName);
            }

            @TestMetadata("noInformationForParameter.kt")
            public void testNoInformationForParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/noInformationForParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("nullableUpperBound.kt")
            public void testNullableUpperBound() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nullableUpperBound.kt");
                doTest(fileName);
            }

            @TestMetadata("opposite.kt")
            public void testOpposite() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/opposite.kt");
                doTest(fileName);
            }

            @TestMetadata("possibleCycleOnConstraints.kt")
            public void testPossibleCycleOnConstraints() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/possibleCycleOnConstraints.kt");
                doTest(fileName);
            }

            @TestMetadata("tryNumberLowerBoundsBeforeUpperBounds.kt")
            public void testTryNumberLowerBoundsBeforeUpperBounds() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/tryNumberLowerBoundsBeforeUpperBounds.kt");
                doTest(fileName);
            }

            @TestMetadata("typeConstructorMismatch.kt")
            public void testTypeConstructorMismatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/typeConstructorMismatch.kt");
                doTest(fileName);
            }

            @TestMetadata("typeInferenceExpectedTypeMismatch.kt")
            public void testTypeInferenceExpectedTypeMismatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/typeInferenceExpectedTypeMismatch.kt");
                doTest(fileName);
            }

            @TestMetadata("useFunctionLiteralsToInferType.kt")
            public void testUseFunctionLiteralsToInferType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/useFunctionLiteralsToInferType.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CapturedTypes extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInCapturedTypes() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/capturedTypes"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("cannotCaptureInProjection.kt")
                public void testCannotCaptureInProjection() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/cannotCaptureInProjection.kt");
                    doTest(fileName);
                }

                @TestMetadata("captureForNullableTypes.kt")
                public void testCaptureForNullableTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/captureForNullableTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("captureForPlatformTypes.kt")
                public void testCaptureForPlatformTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/captureForPlatformTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("captureFromNullableTypeVariable.kt")
                public void testCaptureFromNullableTypeVariable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromNullableTypeVariable.kt");
                    doTest(fileName);
                }

                @TestMetadata("captureTypeOnlyOnTopLevel.kt")
                public void testCaptureTypeOnlyOnTopLevel() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/captureTypeOnlyOnTopLevel.kt");
                    doTest(fileName);
                }

                @TestMetadata("capturedType.kt")
                public void testCapturedType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedType.kt");
                    doTest(fileName);
                }

                @TestMetadata("capturedTypeAndApproximation.kt")
                public void testCapturedTypeAndApproximation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeAndApproximation.kt");
                    doTest(fileName);
                }

                @TestMetadata("capturedTypeSubstitutedIntoOppositeProjection.kt")
                public void testCapturedTypeSubstitutedIntoOppositeProjection() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeSubstitutedIntoOppositeProjection.kt");
                    doTest(fileName);
                }

                @TestMetadata("expectedTypeMismatchWithInVariance.kt")
                public void testExpectedTypeMismatchWithInVariance() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/expectedTypeMismatchWithInVariance.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2570.kt")
                public void testKt2570() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/kt2570.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2872.kt")
                public void testKt2872() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/kt2872.kt");
                    doTest(fileName);
                }

                @TestMetadata("notApproximateWhenCopyDescriptors.kt")
                public void testNotApproximateWhenCopyDescriptors() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/notApproximateWhenCopyDescriptors.kt");
                    doTest(fileName);
                }

                @TestMetadata("overApproximationForInCaptured.kt")
                public void testOverApproximationForInCaptured() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/overApproximationForInCaptured.kt");
                    doTest(fileName);
                }

                @TestMetadata("overApproximationForOutCaptured.kt")
                public void testOverApproximationForOutCaptured() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes/overApproximationForOutCaptured.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/commonSystem")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CommonSystem extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInCommonSystem() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/commonSystem"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("boundOnNullableVariable.kt")
                public void testBoundOnNullableVariable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/commonSystem/boundOnNullableVariable.kt");
                    doTest(fileName);
                }

                @TestMetadata("dontCaptureTypeVariable.kt")
                public void testDontCaptureTypeVariable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/commonSystem/dontCaptureTypeVariable.kt");
                    doTest(fileName);
                }

                @TestMetadata("fixVariablesInRightOrder.kt")
                public void testFixVariablesInRightOrder() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/commonSystem/fixVariablesInRightOrder.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericCandidateInGenericClass.kt")
                public void testGenericCandidateInGenericClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/commonSystem/genericCandidateInGenericClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("inferenceWithUpperBoundsInLambda.kt")
                public void testInferenceWithUpperBoundsInLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/commonSystem/inferenceWithUpperBoundsInLambda.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3372toCollection.kt")
                public void testKt3372toCollection() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/commonSystem/kt3372toCollection.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedLambdas.kt")
                public void testNestedLambdas() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/commonSystem/nestedLambdas.kt");
                    doTest(fileName);
                }

                @TestMetadata("theSameFunctionInArgs.kt")
                public void testTheSameFunctionInArgs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/commonSystem/theSameFunctionInArgs.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/constraints")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Constraints extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInConstraints() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/constraints"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("constraintOnFunctionLiteral.kt")
                public void testConstraintOnFunctionLiteral() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/constraintOnFunctionLiteral.kt");
                    doTest(fileName);
                }

                @TestMetadata("equalityConstraintOnNullableType.kt")
                public void testEqualityConstraintOnNullableType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/equalityConstraintOnNullableType.kt");
                    doTest(fileName);
                }

                @TestMetadata("ignoreConstraintFromImplicitInNothing.kt")
                public void testIgnoreConstraintFromImplicitInNothing() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/ignoreConstraintFromImplicitInNothing.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt6320.kt")
                public void testKt6320() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/kt6320.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt7351ConstraintFromUnitExpectedType.kt")
                public void testKt7351ConstraintFromUnitExpectedType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/kt7351ConstraintFromUnitExpectedType.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt7433.kt")
                public void testKt7433() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/kt7433.kt");
                    doTest(fileName);
                }

                @TestMetadata("notNullConstraintOnNullableType.kt")
                public void testNotNullConstraintOnNullableType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/notNullConstraintOnNullableType.kt");
                    doTest(fileName);
                }

                @TestMetadata("subtypeConstraintOnNullableType.kt")
                public void testSubtypeConstraintOnNullableType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/subtypeConstraintOnNullableType.kt");
                    doTest(fileName);
                }

                @TestMetadata("supertypeConstraintOnNullableType.kt")
                public void testSupertypeConstraintOnNullableType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/constraints/supertypeConstraintOnNullableType.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NestedCalls extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNestedCalls() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/nestedCalls"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("arrayAccess.kt")
                public void testArrayAccess() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/arrayAccess.kt");
                    doTest(fileName);
                }

                @TestMetadata("binaryExpressions.kt")
                public void testBinaryExpressions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/binaryExpressions.kt");
                    doTest(fileName);
                }

                @TestMetadata("checkTypesForQualifiedProperties.kt")
                public void testCheckTypesForQualifiedProperties() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/checkTypesForQualifiedProperties.kt");
                    doTest(fileName);
                }

                @TestMetadata("completeNestedCallsForArraySetExpression.kt")
                public void testCompleteNestedCallsForArraySetExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsForArraySetExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("completeNestedCallsInference.kt")
                public void testCompleteNestedCallsInference() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsInference.kt");
                    doTest(fileName);
                }

                @TestMetadata("completeNestedForVariableAsFunctionCall.kt")
                public void testCompleteNestedForVariableAsFunctionCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedForVariableAsFunctionCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("inferenceForNestedBinaryCall.kt")
                public void testInferenceForNestedBinaryCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/inferenceForNestedBinaryCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3395.kt")
                public void testKt3395() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3395.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3461checkTypes.kt")
                public void testKt3461checkTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3461checkTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("makeNullableIfSafeCall.kt")
                public void testMakeNullableIfSafeCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/makeNullableIfSafeCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("nontrivialCallExpression.kt")
                public void testNontrivialCallExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls/nontrivialCallExpression.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/regressions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Regressions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInRegressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/regressions"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("compareBy.kt")
                public void testCompareBy() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/compareBy.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1029.kt")
                public void testKt1029() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt1029.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1031.kt")
                public void testKt1031() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt1031.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1127.kt")
                public void testKt1127() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt1127.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1145.kt")
                public void testKt1145() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt1145.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1358.kt")
                public void testKt1358() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt1358.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1410.kt")
                public void testKt1410() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt1410.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1718.kt")
                public void testKt1718() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt1718.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1944.kt")
                public void testKt1944() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt1944.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2057.kt")
                public void testKt2057() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2057.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2179.kt")
                public void testKt2179() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2179.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2200.kt")
                public void testKt2200() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2200.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2283.kt")
                public void testKt2283() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2283.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2286.kt")
                public void testKt2286() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2286.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2294.kt")
                public void testKt2294() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2294.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2320.kt")
                public void testKt2320() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2320.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2324.kt")
                public void testKt2324() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2324.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2407.kt")
                public void testKt2407() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2407.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2445.kt")
                public void testKt2445() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2445.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2459.kt")
                public void testKt2459() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2459.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2484.kt")
                public void testKt2484() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2484.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2505.kt")
                public void testKt2505() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2505.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2514.kt")
                public void testKt2514() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2514.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2588.kt")
                public void testKt2588() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2588.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2741.kt")
                public void testKt2741() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2741.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2754.kt")
                public void testKt2754() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2754.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2838.kt")
                public void testKt2838() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2838.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2841.kt")
                public void testKt2841() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2841.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2841_it.kt")
                public void testKt2841_it() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2841_it.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2841_it_this.kt")
                public void testKt2841_it_this() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2841_it_this.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2841_this.kt")
                public void testKt2841_this() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2841_this.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2842.kt")
                public void testKt2842() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2842.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2883.kt")
                public void testKt2883() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt2883.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3007.kt")
                public void testKt3007() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3007.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3038.kt")
                public void testKt3038() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3038.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3150.kt")
                public void testKt3150() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3150.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3174.kt")
                public void testKt3174() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3174.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3301.kt")
                public void testKt3301() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3301.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3344.kt")
                public void testKt3344() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3344.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3496.kt")
                public void testKt3496() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3496.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3496_2.kt")
                public void testKt3496_2() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3496_2.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3559.kt")
                public void testKt3559() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt3559.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt4420.kt")
                public void testKt4420() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt4420.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt702.kt")
                public void testKt702() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt702.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt731.kt")
                public void testKt731() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt731.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt742.kt")
                public void testKt742() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt742.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt8132.kt")
                public void testKt8132() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt8132.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt832.kt")
                public void testKt832() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt832.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt943.kt")
                public void testKt943() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt943.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt948.kt")
                public void testKt948() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/regressions/kt948.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ReportingImprovements extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInReportingImprovements() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/reportingImprovements"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("cannotInferParameterTypeWithInference.kt")
                public void testCannotInferParameterTypeWithInference() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements/cannotInferParameterTypeWithInference.kt");
                    doTest(fileName);
                }

                @TestMetadata("ErrorTypeAsGenericParameter.kt")
                public void testErrorTypeAsGenericParameter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements/ErrorTypeAsGenericParameter.kt");
                    doTest(fileName);
                }

                @TestMetadata("FunctionPlaceholder.kt")
                public void testFunctionPlaceholder() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements/FunctionPlaceholder.kt");
                    doTest(fileName);
                }

                @TestMetadata("NoAmbiguityForDifferentFunctionTypes.kt")
                public void testNoAmbiguityForDifferentFunctionTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements/NoAmbiguityForDifferentFunctionTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("subtypeForInvariantWithErrorGenerics.kt")
                public void testSubtypeForInvariantWithErrorGenerics() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements/subtypeForInvariantWithErrorGenerics.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/substitutions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Substitutions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSubstitutions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/substitutions"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("delegationAndInference.kt")
                public void testDelegationAndInference() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/substitutions/delegationAndInference.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt6081SubstituteIntoClassCorrectly.kt")
                public void testKt6081SubstituteIntoClassCorrectly() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/substitutions/kt6081SubstituteIntoClassCorrectly.kt");
                    doTest(fileName);
                }

                @TestMetadata("simpleSubstitutionCheckTypeArgumentsNotTypeParameters.kt")
                public void testSimpleSubstitutionCheckTypeArgumentsNotTypeParameters() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/substitutions/simpleSubstitutionCheckTypeArgumentsNotTypeParameters.kt");
                    doTest(fileName);
                }

                @TestMetadata("substitutionIntoAnonymousClass.kt")
                public void testSubstitutionIntoAnonymousClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/substitutions/substitutionIntoAnonymousClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("substitutionIntoInnerClass.kt")
                public void testSubstitutionIntoInnerClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/substitutions/substitutionIntoInnerClass.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inference/upperBounds")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class UpperBounds extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInUpperBounds() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inference/upperBounds"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("conflictingSubstitutionsFromUpperBound.kt")
                public void testConflictingSubstitutionsFromUpperBound() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/upperBounds/conflictingSubstitutionsFromUpperBound.kt");
                    doTest(fileName);
                }

                @TestMetadata("doNotInferFromBoundsOnly.kt")
                public void testDoNotInferFromBoundsOnly() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/upperBounds/doNotInferFromBoundsOnly.kt");
                    doTest(fileName);
                }

                @TestMetadata("intersectUpperBounds.kt")
                public void testIntersectUpperBounds() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/upperBounds/intersectUpperBounds.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2856.kt")
                public void testKt2856() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/upperBounds/kt2856.kt");
                    doTest(fileName);
                }

                @TestMetadata("nonNullUpperBound.kt")
                public void testNonNullUpperBound() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/upperBounds/nonNullUpperBound.kt");
                    doTest(fileName);
                }

                @TestMetadata("useBoundsIfUnknownParameters.kt")
                public void testUseBoundsIfUnknownParameters() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsIfUnknownParameters.kt");
                    doTest(fileName);
                }

                @TestMetadata("useBoundsToInferTypeParamsSimple.kt")
                public void testUseBoundsToInferTypeParamsSimple() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsToInferTypeParamsSimple.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/infos")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Infos extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInInfos() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/infos"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("PropertiesWithBackingFields.kt")
            public void testPropertiesWithBackingFields() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/infos/PropertiesWithBackingFields.kt");
                doTest(fileName);
            }

            @TestMetadata("SmartCasts.kt")
            public void testSmartCasts() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/infos/SmartCasts.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/inline")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inline extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInInline() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("anonymousObjects.kt")
            public void testAnonymousObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/anonymousObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("assignment.kt")
            public void testAssignment() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/assignment.kt");
                doTest(fileName);
            }

            @TestMetadata("capture.kt")
            public void testCapture() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/capture.kt");
                doTest(fileName);
            }

            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/constructor.kt");
                doTest(fileName);
            }

            @TestMetadata("default.kt")
            public void testDefault() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/default.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionOnFunction.kt")
            public void testExtensionOnFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/extensionOnFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("fromInlineToNoInline.kt")
            public void testFromInlineToNoInline() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/fromInlineToNoInline.kt");
                doTest(fileName);
            }

            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/functions.kt");
                doTest(fileName);
            }

            @TestMetadata("inlineReified.kt")
            public void testInlineReified() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/inlineReified.kt");
                doTest(fileName);
            }

            @TestMetadata("invoke.kt")
            public void testInvoke() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/invoke.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4869.kt")
            public void testKt4869() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/kt4869.kt");
                doTest(fileName);
            }

            @TestMetadata("labeled.kt")
            public void testLabeled() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/labeled.kt");
                doTest(fileName);
            }

            @TestMetadata("localFun.kt")
            public void testLocalFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/localFun.kt");
                doTest(fileName);
            }

            @TestMetadata("nonVirtualMembersWithInline.kt")
            public void testNonVirtualMembersWithInline() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonVirtualMembersWithInline.kt");
                doTest(fileName);
            }

            @TestMetadata("nothingToInline.kt")
            public void testNothingToInline() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nothingToInline.kt");
                doTest(fileName);
            }

            @TestMetadata("nullabilityOperations.kt")
            public void testNullabilityOperations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nullabilityOperations.kt");
                doTest(fileName);
            }

            @TestMetadata("nullableFunction.kt")
            public void testNullableFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nullableFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("parenthesized.kt")
            public void testParenthesized() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/parenthesized.kt");
                doTest(fileName);
            }

            @TestMetadata("propagation.kt")
            public void testPropagation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/propagation.kt");
                doTest(fileName);
            }

            @TestMetadata("recursion.kt")
            public void testRecursion() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/recursion.kt");
                doTest(fileName);
            }

            @TestMetadata("returns.kt")
            public void testReturns() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/returns.kt");
                doTest(fileName);
            }

            @TestMetadata("sam.kt")
            public void testSam() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/sam.kt");
                doTest(fileName);
            }

            @TestMetadata("unsupportedConstruction.kt")
            public void testUnsupportedConstruction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/unsupportedConstruction.kt");
                doTest(fileName);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/vararg.kt");
                doTest(fileName);
            }

            @TestMetadata("wrongUsage.kt")
            public void testWrongUsage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/wrongUsage.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class BinaryExpressions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInBinaryExpressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/binaryExpressions"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("andOr.kt")
                public void testAndOr() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions/andOr.kt");
                    doTest(fileName);
                }

                @TestMetadata("arrayAccess.kt")
                public void testArrayAccess() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions/arrayAccess.kt");
                    doTest(fileName);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions/assignment.kt");
                    doTest(fileName);
                }

                @TestMetadata("comparison.kt")
                public void testComparison() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions/comparison.kt");
                    doTest(fileName);
                }

                @TestMetadata("componentAccess.kt")
                public void testComponentAccess() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions/componentAccess.kt");
                    doTest(fileName);
                }

                @TestMetadata("contains.kt")
                public void testContains() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions/contains.kt");
                    doTest(fileName);
                }

                @TestMetadata("mathOperations.kt")
                public void testMathOperations() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions/mathOperations.kt");
                    doTest(fileName);
                }

                @TestMetadata("rangeTo.kt")
                public void testRangeTo() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions/rangeTo.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NonLocalReturns extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNonLocalReturns() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/nonLocalReturns"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("anonymousObjects.kt")
                public void testAnonymousObjects() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/anonymousObjects.kt");
                    doTest(fileName);
                }

                @TestMetadata("anonymousObjectsNested.kt")
                public void testAnonymousObjectsNested() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/anonymousObjectsNested.kt");
                    doTest(fileName);
                }

                @TestMetadata("explicitReturnType.kt")
                public void testExplicitReturnType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/explicitReturnType.kt");
                    doTest(fileName);
                }

                @TestMetadata("fromOnlyLocal.kt")
                public void testFromOnlyLocal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/fromOnlyLocal.kt");
                    doTest(fileName);
                }

                @TestMetadata("inlineLambda.kt")
                public void testInlineLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/inlineLambda.kt");
                    doTest(fileName);
                }

                @TestMetadata("labeledReturn.kt")
                public void testLabeledReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/labeledReturn.kt");
                    doTest(fileName);
                }

                @TestMetadata("lambdaAsGeneric.kt")
                public void testLambdaAsGeneric() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaAsGeneric.kt");
                    doTest(fileName);
                }

                @TestMetadata("lambdaAsNonFunction.kt")
                public void testLambdaAsNonFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaAsNonFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("lambdaWithGlobalReturnsInsideOnlyLocalOne.kt")
                public void testLambdaWithGlobalReturnsInsideOnlyLocalOne() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaWithGlobalReturnsInsideOnlyLocalOne.kt");
                    doTest(fileName);
                }

                @TestMetadata("localFun.kt")
                public void testLocalFun() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/localFun.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedNonLocals.kt")
                public void testNestedNonLocals() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/nestedNonLocals.kt");
                    doTest(fileName);
                }

                @TestMetadata("noInlineAnnotation.kt")
                public void testNoInlineAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/noInlineAnnotation.kt");
                    doTest(fileName);
                }

                @TestMetadata("noInlineLambda.kt")
                public void testNoInlineLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/noInlineLambda.kt");
                    doTest(fileName);
                }

                @TestMetadata("nonInlinedClass.kt")
                public void testNonInlinedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/nonInlinedClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("onlyLocalReturnLambda.kt")
                public void testOnlyLocalReturnLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/onlyLocalReturnLambda.kt");
                    doTest(fileName);
                }

                @TestMetadata("onlyLocalReturnLambdaBinaryExpr.kt")
                public void testOnlyLocalReturnLambdaBinaryExpr() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/onlyLocalReturnLambdaBinaryExpr.kt");
                    doTest(fileName);
                }

                @TestMetadata("propertyAccessorsAndConstructor.kt")
                public void testPropertyAccessorsAndConstructor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/propertyAccessorsAndConstructor.kt");
                    doTest(fileName);
                }

                @TestMetadata("toOnlyLocal.kt")
                public void testToOnlyLocal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns/toOnlyLocal.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NonPublicMember extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNonPublicMember() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/nonPublicMember"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("inNonPublicClass.kt")
                public void testInNonPublicClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("inNonPublicInnerClass.kt")
                public void testInNonPublicInnerClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicInnerClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("inPackage.kt")
                public void testInPackage() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember/inPackage.kt");
                    doTest(fileName);
                }

                @TestMetadata("inPublicClass.kt")
                public void testInPublicClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember/inPublicClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localClass.kt")
                public void testLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("localClass2.kt")
                public void testLocalClass2() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass2.kt");
                    doTest(fileName);
                }

                @TestMetadata("localFun.kt")
                public void testLocalFun() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember/localFun.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/regressions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Regressions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInRegressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/regressions"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("kt4341.kt")
                public void testKt4341() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/regressions/kt4341.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class UnaryExpressions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInUnaryExpressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inline/unaryExpressions"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("mathOperation.kt")
                public void testMathOperation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions/mathOperation.kt");
                    doTest(fileName);
                }

                @TestMetadata("notOnCall.kt")
                public void testNotOnCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions/notOnCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("notOperation.kt")
                public void testNotOperation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions/notOperation.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/inner")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inner extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInInner() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inner"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("classesInClassObjectHeader.kt")
            public void testClassesInClassObjectHeader() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/classesInClassObjectHeader.kt");
                doTest(fileName);
            }

            @TestMetadata("constructorAccess.kt")
            public void testConstructorAccess() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/constructorAccess.kt");
                doTest(fileName);
            }

            @TestMetadata("deepInnerClass.kt")
            public void testDeepInnerClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/deepInnerClass.kt");
                doTest(fileName);
            }

            @TestMetadata("enumEntries.kt")
            public void testEnumEntries() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/enumEntries.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionFun.kt")
            public void testExtensionFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/extensionFun.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionLambdaInsideNestedClass.kt")
            public void testExtensionLambdaInsideNestedClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/extensionLambdaInsideNestedClass.kt");
                doTest(fileName);
            }

            @TestMetadata("illegalModifier.kt")
            public void testIllegalModifier() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/illegalModifier.kt");
                doTest(fileName);
            }

            @TestMetadata("InnerClassNameClash.kt")
            public void testInnerClassNameClash() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/InnerClassNameClash.kt");
                doTest(fileName);
            }

            @TestMetadata("innerClassesInStaticParameters.kt")
            public void testInnerClassesInStaticParameters() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/innerClassesInStaticParameters.kt");
                doTest(fileName);
            }

            @TestMetadata("innerErrorForClassObjects.kt")
            public void testInnerErrorForClassObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/innerErrorForClassObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("innerErrorForObjects.kt")
            public void testInnerErrorForObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/innerErrorForObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("innerThisSuper.kt")
            public void testInnerThisSuper() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/innerThisSuper.kt");
                doTest(fileName);
            }

            @TestMetadata("kt5854.kt")
            public void testKt5854() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/kt5854.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6026.kt")
            public void testKt6026() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/kt6026.kt");
                doTest(fileName);
            }

            @TestMetadata("localClass.kt")
            public void testLocalClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/localClass.kt");
                doTest(fileName);
            }

            @TestMetadata("localClassInsideNested.kt")
            public void testLocalClassInsideNested() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/localClassInsideNested.kt");
                doTest(fileName);
            }

            @TestMetadata("localThisSuper.kt")
            public void testLocalThisSuper() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/localThisSuper.kt");
                doTest(fileName);
            }

            @TestMetadata("modality.kt")
            public void testModality() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/modality.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedClassAccessedViaInstanceReference.kt")
            public void testNestedClassAccessedViaInstanceReference() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/nestedClassAccessedViaInstanceReference.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedClassExtendsOuter.kt")
            public void testNestedClassExtendsOuter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuter.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedClassExtendsOuterGeneric.kt")
            public void testNestedClassExtendsOuterGeneric() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuterGeneric.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedClassNotAllowed.kt")
            public void testNestedClassNotAllowed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/nestedClassNotAllowed.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedVsInnerAccessOuterMember.kt")
            public void testNestedVsInnerAccessOuterMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/nestedVsInnerAccessOuterMember.kt");
                doTest(fileName);
            }

            @TestMetadata("outerGenericParam.kt")
            public void testOuterGenericParam() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/outerGenericParam.kt");
                doTest(fileName);
            }

            @TestMetadata("outerProtectedMember.kt")
            public void testOuterProtectedMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/outerProtectedMember.kt");
                doTest(fileName);
            }

            @TestMetadata("outerSuperClassMember.kt")
            public void testOuterSuperClassMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/outerSuperClassMember.kt");
                doTest(fileName);
            }

            @TestMetadata("referenceToSelfInLocal.kt")
            public void testReferenceToSelfInLocal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/referenceToSelfInLocal.kt");
                doTest(fileName);
            }

            @TestMetadata("resolvePackageClassInObjects.kt")
            public void testResolvePackageClassInObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/resolvePackageClassInObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("selfAnnotationForClassObject.kt")
            public void testSelfAnnotationForClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/selfAnnotationForClassObject.kt");
                doTest(fileName);
            }

            @TestMetadata("traits.kt")
            public void testTraits() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/traits.kt");
                doTest(fileName);
            }

            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/visibility.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class QualifiedExpression extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInQualifiedExpression() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/inner/qualifiedExpression"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("classObjectOfNestedClass.kt")
                public void testClassObjectOfNestedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/classObjectOfNestedClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("constructNestedClass.kt")
                public void testConstructNestedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/constructNestedClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("dataLocalVariable.kt")
                public void testDataLocalVariable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/dataLocalVariable.kt");
                    doTest(fileName);
                }

                @TestMetadata("enumConstant.kt")
                public void testEnumConstant() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/enumConstant.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericNestedClass.kt")
                public void testGenericNestedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/genericNestedClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("importNestedClass.kt")
                public void testImportNestedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/importNestedClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedClassInPackage.kt")
                public void testNestedClassInPackage() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedClassInPackage.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedEnumConstant.kt")
                public void testNestedEnumConstant() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedEnumConstant.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedObjects.kt")
                public void testNestedObjects() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedObjects.kt");
                    doTest(fileName);
                }

                @TestMetadata("typePosition.kt")
                public void testTypePosition() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression/typePosition.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/j+k")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class J_k extends AbstractJetDiagnosticsTest {
            @TestMetadata("accessClassObjectFromJava.kt")
            public void testAccessClassObjectFromJava() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/accessClassObjectFromJava.kt");
                doTest(fileName);
            }

            public void testAllFilesPresentInJ_k() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ambiguousSamAdapters.kt")
            public void testAmbiguousSamAdapters() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/ambiguousSamAdapters.kt");
                doTest(fileName);
            }

            @TestMetadata("cantDeclareIfSamAdapterIsInherited.kt")
            public void testCantDeclareIfSamAdapterIsInherited() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/cantDeclareIfSamAdapterIsInherited.kt");
                doTest(fileName);
            }

            @TestMetadata("computeIfAbsentConcurrent.kt")
            public void testComputeIfAbsentConcurrent() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/computeIfAbsentConcurrent.kt");
                doTest(fileName);
            }

            @TestMetadata("GenericsInSupertypes.kt")
            public void testGenericsInSupertypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/GenericsInSupertypes.kt");
                doTest(fileName);
            }

            @TestMetadata("inheritAbstractSamAdapter.kt")
            public void testInheritAbstractSamAdapter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/inheritAbstractSamAdapter.kt");
                doTest(fileName);
            }

            @TestMetadata("InheritedGenericFunction.kt")
            public void testInheritedGenericFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/InheritedGenericFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("InnerClassFromJava.kt")
            public void testInnerClassFromJava() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/InnerClassFromJava.kt");
                doTest(fileName);
            }

            @TestMetadata("innerNestedClassFromJava.kt")
            public void testInnerNestedClassFromJava() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/innerNestedClassFromJava.kt");
                doTest(fileName);
            }

            @TestMetadata("invisiblePackagePrivateInheritedMember.kt")
            public void testInvisiblePackagePrivateInheritedMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/invisiblePackagePrivateInheritedMember.kt");
                doTest(fileName);
            }

            @TestMetadata("javaStaticImport.kt")
            public void testJavaStaticImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/javaStaticImport.kt");
                doTest(fileName);
            }

            @TestMetadata("KJKInheritance.kt")
            public void testKJKInheritance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/KJKInheritance.kt");
                doTest(fileName);
            }

            @TestMetadata("KJKInheritanceGeneric.kt")
            public void testKJKInheritanceGeneric() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/KJKInheritanceGeneric.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1402.kt")
            public void testKt1402() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt1402.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1431.kt")
            public void testKt1431() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt1431.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1730_implementCharSequence.kt")
            public void testKt1730_implementCharSequence() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt1730_implementCharSequence.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2152.kt")
            public void testKt2152() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt2152.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2394.kt")
            public void testKt2394() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt2394.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2606.kt")
            public void testKt2606() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt2606.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2619.kt")
            public void testKt2619() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt2619.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2641.kt")
            public void testKt2641() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt2641.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2890.kt")
            public void testKt2890() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt2890.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3307.kt")
            public void testKt3307() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt3307.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3311.kt")
            public void testKt3311() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt3311.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6720_abstractProperty.kt")
            public void testKt6720_abstractProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/kt6720_abstractProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("mutableIterator.kt")
            public void testMutableIterator() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/mutableIterator.kt");
                doTest(fileName);
            }

            @TestMetadata("overrideRawType.kt")
            public void testOverrideRawType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/overrideRawType.kt");
                doTest(fileName);
            }

            @TestMetadata("OverrideVararg.kt")
            public void testOverrideVararg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/OverrideVararg.kt");
                doTest(fileName);
            }

            @TestMetadata("overrideWithSamAndTypeParameter.kt")
            public void testOverrideWithSamAndTypeParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/overrideWithSamAndTypeParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("packagePrivateClassStaticMember.kt")
            public void testPackagePrivateClassStaticMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/packagePrivateClassStaticMember.kt");
                doTest(fileName);
            }

            @TestMetadata("packageVisibility.kt")
            public void testPackageVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/packageVisibility.kt");
                doTest(fileName);
            }

            @TestMetadata("privateNestedClassStaticMember.kt")
            public void testPrivateNestedClassStaticMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/privateNestedClassStaticMember.kt");
                doTest(fileName);
            }

            @TestMetadata("protectedStaticSamePackage.kt")
            public void testProtectedStaticSamePackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/protectedStaticSamePackage.kt");
                doTest(fileName);
            }

            @TestMetadata("recursiveRawUpperBound.kt")
            public void testRecursiveRawUpperBound() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound.kt");
                doTest(fileName);
            }

            @TestMetadata("samInConstructorWithGenerics.kt")
            public void testSamInConstructorWithGenerics() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/samInConstructorWithGenerics.kt");
                doTest(fileName);
            }

            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/Simple.kt");
                doTest(fileName);
            }

            @TestMetadata("StaticMembersFromSuperclasses.kt")
            public void testStaticMembersFromSuperclasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/StaticMembersFromSuperclasses.kt");
                doTest(fileName);
            }

            @TestMetadata("SupertypeArgumentsNullability-NotNull-SpecialTypes.kt")
            public void testSupertypeArgumentsNullability_NotNull_SpecialTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-SpecialTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("SupertypeArgumentsNullability-NotNull-UserTypes.kt")
            public void testSupertypeArgumentsNullability_NotNull_UserTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-UserTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("SupertypeArgumentsNullability-SpecialTypes.kt")
            public void testSupertypeArgumentsNullability_SpecialTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-SpecialTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("SupertypeArgumentsNullability-UserTypes.kt")
            public void testSupertypeArgumentsNullability_UserTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("traitDefaultCall.kt")
            public void testTraitDefaultCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/traitDefaultCall.kt");
                doTest(fileName);
            }

            @TestMetadata("UnboxingNulls.kt")
            public void testUnboxingNulls() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/UnboxingNulls.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/j+k/types")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Types extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInTypes() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/j+k/types"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("arrayList.kt")
                public void testArrayList() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/types/arrayList.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnCollection.kt")
                public void testReturnCollection() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/types/returnCollection.kt");
                    doTest(fileName);
                }

                @TestMetadata("shapeMismatchInCovariantPosition.kt")
                public void testShapeMismatchInCovariantPosition() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/types/shapeMismatchInCovariantPosition.kt");
                    doTest(fileName);
                }

                @TestMetadata("shapeMismatchInCovariantPositionGeneric.kt")
                public void testShapeMismatchInCovariantPositionGeneric() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/types/shapeMismatchInCovariantPositionGeneric.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeParameter.kt")
                public void testTypeParameter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/j+k/types/typeParameter.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/jdk-annotations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Jdk_annotations extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInJdk_annotations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/jdk-annotations"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ArrayListAndMap.kt")
            public void testArrayListAndMap() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListAndMap.kt");
                doTest(fileName);
            }

            @TestMetadata("ArrayListClone.kt")
            public void testArrayListClone() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListClone.kt");
                doTest(fileName);
            }

            @TestMetadata("ArrayListToArray.kt")
            public void testArrayListToArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListToArray.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/jdk-annotations/sql")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Sql extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSql() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/jdk-annotations/sql"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("DriverManager.kt")
                public void testDriverManager() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/jdk-annotations/sql/DriverManager.kt");
                    doTest(fileName);
                }

                @TestMetadata("ResultSet.kt")
                public void testResultSet() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/jdk-annotations/sql/ResultSet.kt");
                    doTest(fileName);
                }

                @TestMetadata("Statement.kt")
                public void testStatement() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/jdk-annotations/sql/Statement.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/labels")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Labels extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInLabels() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/labels"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("kt1703.kt")
            public void testKt1703() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/kt1703.kt");
                doTest(fileName);
            }

            @TestMetadata("kt361.kt")
            public void testKt361() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/kt361.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3920.kt")
            public void testKt3920() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/kt3920.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3988.kt")
            public void testKt3988() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/kt3988.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4247.kt")
            public void testKt4247() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/kt4247.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4586.kt")
            public void testKt4586() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/kt4586.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4603.kt")
            public void testKt4603() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/kt4603.kt");
                doTest(fileName);
            }

            @TestMetadata("kt591.kt")
            public void testKt591() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/kt591.kt");
                doTest(fileName);
            }

            @TestMetadata("labelReferencesInsideObjectExpressions.kt")
            public void testLabelReferencesInsideObjectExpressions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/labelReferencesInsideObjectExpressions.kt");
                doTest(fileName);
            }

            @TestMetadata("labelsMustBeNamed.kt")
            public void testLabelsMustBeNamed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/labels/labelsMustBeNamed.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/library")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Library extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInLibrary() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/library"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("Collections.kt")
            public void testCollections() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/library/Collections.kt");
                doTest(fileName);
            }

            @TestMetadata("kt828.kt")
            public void testKt828() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/library/kt828.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/modifiers")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Modifiers extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInModifiers() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/modifiers"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("defaultModifier.kt")
            public void testDefaultModifier() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/modifiers/defaultModifier.kt");
                doTest(fileName);
            }

            @TestMetadata("IllegalModifiers.kt")
            public void testIllegalModifiers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/modifiers/IllegalModifiers.kt");
                doTest(fileName);
            }

            @TestMetadata("incompatibleVarianceModifiers.kt")
            public void testIncompatibleVarianceModifiers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/modifiers/incompatibleVarianceModifiers.kt");
                doTest(fileName);
            }

            @TestMetadata("primaryConstructorMissingKeyword.kt")
            public void testPrimaryConstructorMissingKeyword() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/modifiers/primaryConstructorMissingKeyword.kt");
                doTest(fileName);
            }

            @TestMetadata("repeatedModifiers.kt")
            public void testRepeatedModifiers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/modifiers/repeatedModifiers.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/multimodule")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Multimodule extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInMultimodule() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("internal.kt")
            public void testInternal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/internal.kt");
                doTest(fileName);
            }

            @TestMetadata("packagePrivate.kt")
            public void testPackagePrivate() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/packagePrivate.kt");
                doTest(fileName);
            }

            @TestMetadata("varargConflict.kt")
            public void testVarargConflict() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/varargConflict.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DuplicateClass extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInDuplicateClass() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateClass"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("collectionMethodStub.kt")
                public void testCollectionMethodStub() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/collectionMethodStub.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentGenericArguments.kt")
                public void testDifferentGenericArguments() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/differentGenericArguments.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentGenericArgumentsReversed.kt")
                public void testDifferentGenericArgumentsReversed() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/differentGenericArgumentsReversed.kt");
                    doTest(fileName);
                }

                @TestMetadata("duplicateClass.kt")
                public void testDuplicateClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("duplicateNestedClasses.kt")
                public void testDuplicateNestedClasses() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateNestedClasses.kt");
                    doTest(fileName);
                }

                @TestMetadata("duplicateSuperClass.kt")
                public void testDuplicateSuperClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateSuperClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericArgumentNumberMismatch.kt")
                public void testGenericArgumentNumberMismatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/genericArgumentNumberMismatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericSuperClass.kt")
                public void testGenericSuperClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/genericSuperClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("inTheSameModuleWithUsage.kt")
                public void testInTheSameModuleWithUsage() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/inTheSameModuleWithUsage.kt");
                    doTest(fileName);
                }

                @TestMetadata("inTheSameModuleWithUsageNoTypeAnnotation.kt")
                public void testInTheSameModuleWithUsageNoTypeAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/inTheSameModuleWithUsageNoTypeAnnotation.kt");
                    doTest(fileName);
                }

                @TestMetadata("members.kt")
                public void testMembers() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/members.kt");
                    doTest(fileName);
                }

                @TestMetadata("sameClassNameDifferentPackages.kt")
                public void testSameClassNameDifferentPackages() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/sameClassNameDifferentPackages.kt");
                    doTest(fileName);
                }

                @TestMetadata("sameGenericArguments.kt")
                public void testSameGenericArguments() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass/sameGenericArguments.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DuplicateMethod extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInDuplicateMethod() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateMethod"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("classGenericsInParams.kt")
                public void testClassGenericsInParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParams.kt");
                    doTest(fileName);
                }

                @TestMetadata("classGenericsInParamsBoundMismatch.kt")
                public void testClassGenericsInParamsBoundMismatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsBoundMismatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("classGenericsInParamsIndexMismatch.kt")
                public void testClassGenericsInParamsIndexMismatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsIndexMismatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("classGenericsInParamsNameMismatch.kt")
                public void testClassGenericsInParamsNameMismatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsNameMismatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("classGenericsInReturnType.kt")
                public void testClassGenericsInReturnType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInReturnType.kt");
                    doTest(fileName);
                }

                @TestMetadata("classVsFunctionGenericsInParamsMismatch.kt")
                public void testClassVsFunctionGenericsInParamsMismatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classVsFunctionGenericsInParamsMismatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("covariantReturnTypes.kt")
                public void testCovariantReturnTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/covariantReturnTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("differenceInParamNames.kt")
                public void testDifferenceInParamNames() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differenceInParamNames.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentGenericsInParams.kt")
                public void testDifferentGenericsInParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentGenericsInParams.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentNumberOfParams.kt")
                public void testDifferentNumberOfParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentNumberOfParams.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentReturnTypes.kt")
                public void testDifferentReturnTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentReturnTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionMatch.kt")
                public void testExtensionMatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/extensionMatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionGenericsInParams.kt")
                public void testFunctionGenericsInParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParams.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionGenericsInParamsBoundsMismatch.kt")
                public void testFunctionGenericsInParamsBoundsMismatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsBoundsMismatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionGenericsInParamsEqNull.kt")
                public void testFunctionGenericsInParamsEqNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsEqNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionGenericsInParamsNotIs.kt")
                public void testFunctionGenericsInParamsNotIs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsNotIs.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionGenericsInParamsReturnFooT.kt")
                public void testFunctionGenericsInParamsReturnFooT() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsReturnFooT.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionGenericsInParamsReturnT.kt")
                public void testFunctionGenericsInParamsReturnT() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsReturnT.kt");
                    doTest(fileName);
                }

                @TestMetadata("noGenericsInParams.kt")
                public void testNoGenericsInParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/noGenericsInParams.kt");
                    doTest(fileName);
                }

                @TestMetadata("noParams.kt")
                public void testNoParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/noParams.kt");
                    doTest(fileName);
                }

                @TestMetadata("sameGenericsInParams.kt")
                public void testSameGenericsInParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/sameGenericsInParams.kt");
                    doTest(fileName);
                }

                @TestMetadata("simpleWithInheritance.kt")
                public void testSimpleWithInheritance() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/simpleWithInheritance.kt");
                    doTest(fileName);
                }

                @TestMetadata("substitutedGenericInParams.kt")
                public void testSubstitutedGenericInParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/substitutedGenericInParams.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DuplicateSuper extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInDuplicateSuper() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/multimodule/duplicateSuper"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("differentSuperTraits.kt")
                public void testDifferentSuperTraits() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/differentSuperTraits.kt");
                    doTest(fileName);
                }

                @TestMetadata("sameSuperTrait.kt")
                public void testSameSuperTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTrait.kt");
                    doTest(fileName);
                }

                @TestMetadata("sameSuperTraitDifferentBounds.kt")
                public void testSameSuperTraitDifferentBounds() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTraitDifferentBounds.kt");
                    doTest(fileName);
                }

                @TestMetadata("sameSuperTraitGenerics.kt")
                public void testSameSuperTraitGenerics() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTraitGenerics.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/namedArguments")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NamedArguments extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInNamedArguments() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/namedArguments"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("allowForJavaAnnotation.kt")
            public void testAllowForJavaAnnotation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/namedArguments/allowForJavaAnnotation.kt");
                doTest(fileName);
            }

            @TestMetadata("disallowForJavaConstructor.kt")
            public void testDisallowForJavaConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/namedArguments/disallowForJavaConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("disallowForJavaMethods.kt")
            public void testDisallowForJavaMethods() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/namedArguments/disallowForJavaMethods.kt");
                doTest(fileName);
            }

            @TestMetadata("disallowForSamAdapterConstructor.kt")
            public void testDisallowForSamAdapterConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/namedArguments/disallowForSamAdapterConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("disallowForSamAdapterFunction.kt")
            public void testDisallowForSamAdapterFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/namedArguments/disallowForSamAdapterFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("namedArgumentsAndDefaultValues.kt")
            public void testNamedArgumentsAndDefaultValues() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/namedArguments/namedArgumentsAndDefaultValues.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NullabilityAndSmartCasts extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInNullabilityAndSmartCasts() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AssertNotNull.kt")
            public void testAssertNotNull() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/AssertNotNull.kt");
                doTest(fileName);
            }

            @TestMetadata("dataFlowInfoAfterExclExcl.kt")
            public void testDataFlowInfoAfterExclExcl() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/dataFlowInfoAfterExclExcl.kt");
                doTest(fileName);
            }

            @TestMetadata("equalityUnderNotNullCheck.kt")
            public void testEqualityUnderNotNullCheck() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/equalityUnderNotNullCheck.kt");
                doTest(fileName);
            }

            @TestMetadata("funcLiteralArgsInsideAmbiguity.kt")
            public void testFuncLiteralArgsInsideAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/funcLiteralArgsInsideAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("funcLiteralArgsInsideUnresolvedFunction.kt")
            public void testFuncLiteralArgsInsideUnresolvedFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/funcLiteralArgsInsideUnresolvedFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("InfixCallNullability.kt")
            public void testInfixCallNullability() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/InfixCallNullability.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1270.kt")
            public void testKt1270() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1270.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1680.kt")
            public void testKt1680() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1680.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1778.kt")
            public void testKt1778() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1778.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2109.kt")
            public void testKt2109() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2109.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2125.kt")
            public void testKt2125() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2125.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2146.kt")
            public void testKt2146() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2146.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2164.kt")
            public void testKt2164() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2164.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2176.kt")
            public void testKt2176() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2176.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2195.kt")
            public void testKt2195() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2195.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2212.kt")
            public void testKt2212() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2212.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2216.kt")
            public void testKt2216() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2216.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2223.kt")
            public void testKt2223() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2223.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2234.kt")
            public void testKt2234() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2234.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2336.kt")
            public void testKt2336() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2336.kt");
                doTest(fileName);
            }

            @TestMetadata("kt244.kt")
            public void testKt244() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt244.kt");
                doTest(fileName);
            }

            @TestMetadata("kt362.kt")
            public void testKt362() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt362.kt");
                doTest(fileName);
            }

            @TestMetadata("noSenselessNullOnNullableType.kt")
            public void testNoSenselessNullOnNullableType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/noSenselessNullOnNullableType.kt");
                doTest(fileName);
            }

            @TestMetadata("noUnnecessaryNotNullAssertionOnErrorType.kt")
            public void testNoUnnecessaryNotNullAssertionOnErrorType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/noUnnecessaryNotNullAssertionOnErrorType.kt");
                doTest(fileName);
            }

            @TestMetadata("NullableNothingIsExactlyNull.kt")
            public void testNullableNothingIsExactlyNull() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/NullableNothingIsExactlyNull.kt");
                doTest(fileName);
            }

            @TestMetadata("PreferExtensionsOnNullableReceiver.kt")
            public void testPreferExtensionsOnNullableReceiver() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/PreferExtensionsOnNullableReceiver.kt");
                doTest(fileName);
            }

            @TestMetadata("QualifiedExpressionNullability.kt")
            public void testQualifiedExpressionNullability() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/QualifiedExpressionNullability.kt");
                doTest(fileName);
            }

            @TestMetadata("ReceiverNullability.kt")
            public void testReceiverNullability() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/ReceiverNullability.kt");
                doTest(fileName);
            }

            @TestMetadata("SenselessNullInWhen.kt")
            public void testSenselessNullInWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/SenselessNullInWhen.kt");
                doTest(fileName);
            }

            @TestMetadata("senslessComparisonWithNullOnTypeParameters.kt")
            public void testSenslessComparisonWithNullOnTypeParameters() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/senslessComparisonWithNullOnTypeParameters.kt");
                doTest(fileName);
            }

            @TestMetadata("smartCastReceiverWithGenerics.kt")
            public void testSmartCastReceiverWithGenerics() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/smartCastReceiverWithGenerics.kt");
                doTest(fileName);
            }

            @TestMetadata("smartCastsAndBooleanExpressions.kt")
            public void testSmartCastsAndBooleanExpressions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/smartCastsAndBooleanExpressions.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/nullableTypes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NullableTypes extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInNullableTypes() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/nullableTypes"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("baseWithNullableUpperBound.kt")
            public void testBaseWithNullableUpperBound() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullableTypes/baseWithNullableUpperBound.kt");
                doTest(fileName);
            }

            @TestMetadata("nullAssertOnTypeWithNullableUpperBound.kt")
            public void testNullAssertOnTypeWithNullableUpperBound() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullableTypes/nullAssertOnTypeWithNullableUpperBound.kt");
                doTest(fileName);
            }

            @TestMetadata("nullableArgumentForIn.kt")
            public void testNullableArgumentForIn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentForIn.kt");
                doTest(fileName);
            }

            @TestMetadata("redundantNullable.kt")
            public void testRedundantNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullableTypes/redundantNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("redundantNullableInSupertype.kt")
            public void testRedundantNullableInSupertype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullableTypes/redundantNullableInSupertype.kt");
                doTest(fileName);
            }

            @TestMetadata("safeCallOnTypeWithNullableUpperBound.kt")
            public void testSafeCallOnTypeWithNullableUpperBound() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullableTypes/safeCallOnTypeWithNullableUpperBound.kt");
                doTest(fileName);
            }

            @TestMetadata("safeCallWithInvoke.kt")
            public void testSafeCallWithInvoke() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullableTypes/safeCallWithInvoke.kt");
                doTest(fileName);
            }

            @TestMetadata("uselessElvis.kt")
            public void testUselessElvis() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/nullableTypes/uselessElvis.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/numbers")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Numbers extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInNumbers() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/numbers"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("characterIsNotANumber.kt")
            public void testCharacterIsNotANumber() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/numbers/characterIsNotANumber.kt");
                doTest(fileName);
            }

            @TestMetadata("doublesInSimpleConstraints.kt")
            public void testDoublesInSimpleConstraints() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/numbers/doublesInSimpleConstraints.kt");
                doTest(fileName);
            }

            @TestMetadata("intValuesOutOfRange.kt")
            public void testIntValuesOutOfRange() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/numbers/intValuesOutOfRange.kt");
                doTest(fileName);
            }

            @TestMetadata("numbersInSimpleConstraints.kt")
            public void testNumbersInSimpleConstraints() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/numbers/numbersInSimpleConstraints.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/objects")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Objects extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInObjects() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/objects"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("invokeOnInnerObject.kt")
            public void testInvokeOnInnerObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/invokeOnInnerObject.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2240.kt")
            public void testKt2240() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/kt2240.kt");
                doTest(fileName);
            }

            @TestMetadata("kt5527.kt")
            public void testKt5527() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/kt5527.kt");
                doTest(fileName);
            }

            @TestMetadata("localObjectInsideObject.kt")
            public void testLocalObjectInsideObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/localObjectInsideObject.kt");
                doTest(fileName);
            }

            @TestMetadata("localObjects.kt")
            public void testLocalObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/localObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("objectLiteralExpressionTypeMismatch.kt")
            public void testObjectLiteralExpressionTypeMismatch() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/objectLiteralExpressionTypeMismatch.kt");
                doTest(fileName);
            }

            @TestMetadata("Objects.kt")
            public void testObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/Objects.kt");
                doTest(fileName);
            }

            @TestMetadata("ObjectsInheritance.kt")
            public void testObjectsInheritance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/ObjectsInheritance.kt");
                doTest(fileName);
            }

            @TestMetadata("ObjectsLocal.kt")
            public void testObjectsLocal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/ObjectsLocal.kt");
                doTest(fileName);
            }

            @TestMetadata("ObjectsNested.kt")
            public void testObjectsNested() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/ObjectsNested.kt");
                doTest(fileName);
            }

            @TestMetadata("upperBoundViolated.kt")
            public void testUpperBoundViolated() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/objects/upperBoundViolated.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class OperatorsOverloading extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInOperatorsOverloading() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/operatorsOverloading"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AssignOperatorAmbiguity.kt")
            public void testAssignOperatorAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("AssignmentOperations.kt")
            public void testAssignmentOperations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/AssignmentOperations.kt");
                doTest(fileName);
            }

            @TestMetadata("assignmentOperationsCheckReturnType.kt")
            public void testAssignmentOperationsCheckReturnType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/assignmentOperationsCheckReturnType.kt");
                doTest(fileName);
            }

            @TestMetadata("compareToNullable.kt")
            public void testCompareToNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/compareToNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("IteratorAmbiguity.kt")
            public void testIteratorAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/IteratorAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1028.kt")
            public void testKt1028() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/kt1028.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3450.kt")
            public void testKt3450() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/kt3450.kt");
                doTest(fileName);
            }

            @TestMetadata("plusAssignOnArray.kt")
            public void testPlusAssignOnArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnArray.kt");
                doTest(fileName);
            }

            @TestMetadata("plusAssignOnLocal.kt")
            public void testPlusAssignOnLocal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnLocal.kt");
                doTest(fileName);
            }

            @TestMetadata("plusAssignOnProperty.kt")
            public void testPlusAssignOnProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnProperty.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/overload")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Overload extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInOverload() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/overload"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ConflictingOverloadsFunsDifferentReturnInClass.kt")
            public void testConflictingOverloadsFunsDifferentReturnInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingOverloadsFunsDifferentReturnInPackage.kt")
            public void testConflictingOverloadsFunsDifferentReturnInPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingOverloadsIdenticalExtFunsInPackage.kt")
            public void testConflictingOverloadsIdenticalExtFunsInPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalExtFunsInPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingOverloadsIdenticalFunsInClass.kt")
            public void testConflictingOverloadsIdenticalFunsInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingOverloadsIdenticalFunsTPInClass.kt")
            public void testConflictingOverloadsIdenticalFunsTPInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsTPInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingOverloadsIdenticalValsInClass.kt")
            public void testConflictingOverloadsIdenticalValsInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalValsInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingOverloadsValsDifferentTypeInClass.kt")
            public void testConflictingOverloadsValsDifferentTypeInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsValsDifferentTypeInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("ConstructorVsFunOverload.kt")
            public void testConstructorVsFunOverload() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ConstructorVsFunOverload.kt");
                doTest(fileName);
            }

            @TestMetadata("EmptyArgumentListInLambda.kt")
            public void testEmptyArgumentListInLambda() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/EmptyArgumentListInLambda.kt");
                doTest(fileName);
            }

            @TestMetadata("ExtFunDifferentReceiver.kt")
            public void testExtFunDifferentReceiver() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/ExtFunDifferentReceiver.kt");
                doTest(fileName);
            }

            @TestMetadata("FunNoConflictInDifferentPackages.kt")
            public void testFunNoConflictInDifferentPackages() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/FunNoConflictInDifferentPackages.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1998.kt")
            public void testKt1998() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/kt1998.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2493.kt")
            public void testKt2493() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/kt2493.kt");
                doTest(fileName);
            }

            @TestMetadata("kt7068.kt")
            public void testKt7068() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/kt7068.kt");
                doTest(fileName);
            }

            @TestMetadata("kt7068_2.kt")
            public void testKt7068_2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/kt7068_2.kt");
                doTest(fileName);
            }

            @TestMetadata("OverloadFunRegularAndExt.kt")
            public void testOverloadFunRegularAndExt() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/OverloadFunRegularAndExt.kt");
                doTest(fileName);
            }

            @TestMetadata("OverloadVarAndFunInClass.kt")
            public void testOverloadVarAndFunInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/OverloadVarAndFunInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("SyntheticAndNotSynthetic.kt")
            public void testSyntheticAndNotSynthetic() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/overload/SyntheticAndNotSynthetic.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/override")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Override extends AbstractJetDiagnosticsTest {
            @TestMetadata("AbstractFunImplemented.kt")
            public void testAbstractFunImplemented() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/AbstractFunImplemented.kt");
                doTest(fileName);
            }

            @TestMetadata("AbstractFunNotImplemented.kt")
            public void testAbstractFunNotImplemented() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/AbstractFunNotImplemented.kt");
                doTest(fileName);
            }

            @TestMetadata("AbstractValImplemented.kt")
            public void testAbstractValImplemented() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/AbstractValImplemented.kt");
                doTest(fileName);
            }

            @TestMetadata("AbstractValNotImplemented.kt")
            public void testAbstractValNotImplemented() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/AbstractValNotImplemented.kt");
                doTest(fileName);
            }

            @TestMetadata("AbstractVarImplemented.kt")
            public void testAbstractVarImplemented() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/AbstractVarImplemented.kt");
                doTest(fileName);
            }

            @TestMetadata("AbstractVarNotImplemented.kt")
            public void testAbstractVarNotImplemented() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/AbstractVarNotImplemented.kt");
                doTest(fileName);
            }

            public void testAllFilesPresentInOverride() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/override"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AllPrivateFromSuperTypes.kt")
            public void testAllPrivateFromSuperTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/AllPrivateFromSuperTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("AllProtectedFromSupertypes.kt")
            public void testAllProtectedFromSupertypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/AllProtectedFromSupertypes.kt");
                doTest(fileName);
            }

            @TestMetadata("CannotInferVisibilityForProperty.kt")
            public void testCannotInferVisibilityForProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/CannotInferVisibilityForProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("CannotInferVisibilityForPropertySetter.kt")
            public void testCannotInferVisibilityForPropertySetter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/CannotInferVisibilityForPropertySetter.kt");
                doTest(fileName);
            }

            @TestMetadata("ComplexValRedeclaration.kt")
            public void testComplexValRedeclaration() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ComplexValRedeclaration.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingFunctionSignatureFromSuperclass.kt")
            public void testConflictingFunctionSignatureFromSuperclass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ConflictingFunctionSignatureFromSuperclass.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingPropertySignatureFromSuperclass.kt")
            public void testConflictingPropertySignatureFromSuperclass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ConflictingPropertySignatureFromSuperclass.kt");
                doTest(fileName);
            }

            @TestMetadata("DefaultParameterValueInOverride.kt")
            public void testDefaultParameterValueInOverride() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/DefaultParameterValueInOverride.kt");
                doTest(fileName);
            }

            @TestMetadata("DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt")
            public void testDefaultParameterValues_NoErrorsWhenInheritingFromOneTypeTwice() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt");
                doTest(fileName);
            }

            @TestMetadata("Delegation.kt")
            public void testDelegation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/Delegation.kt");
                doTest(fileName);
            }

            @TestMetadata("DelegationFun.kt")
            public void testDelegationFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/DelegationFun.kt");
                doTest(fileName);
            }

            @TestMetadata("DelegationVal.kt")
            public void testDelegationVal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/DelegationVal.kt");
                doTest(fileName);
            }

            @TestMetadata("DelegationVar.kt")
            public void testDelegationVar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/DelegationVar.kt");
                doTest(fileName);
            }

            @TestMetadata("DuplicateMethod.kt")
            public void testDuplicateMethod() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/DuplicateMethod.kt");
                doTest(fileName);
            }

            @TestMetadata("EqualityOfIntersectionTypes.kt")
            public void testEqualityOfIntersectionTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/EqualityOfIntersectionTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("ExtendFunctionClass.kt")
            public void testExtendFunctionClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ExtendFunctionClass.kt");
                doTest(fileName);
            }

            @TestMetadata("FakeOverrideAbstractAndNonAbstractFun.kt")
            public void testFakeOverrideAbstractAndNonAbstractFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/FakeOverrideAbstractAndNonAbstractFun.kt");
                doTest(fileName);
            }

            @TestMetadata("FakeOverrideDifferentDeclarationSignatures.kt")
            public void testFakeOverrideDifferentDeclarationSignatures() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/FakeOverrideDifferentDeclarationSignatures.kt");
                doTest(fileName);
            }

            @TestMetadata("Generics.kt")
            public void testGenerics() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/Generics.kt");
                doTest(fileName);
            }

            @TestMetadata("InvisiblePotentialOverride.kt")
            public void testInvisiblePotentialOverride() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/InvisiblePotentialOverride.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1862.kt")
            public void testKt1862() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt1862.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2052.kt")
            public void testKt2052() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt2052.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2491.kt")
            public void testKt2491() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt2491.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4763.kt")
            public void testKt4763() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt4763.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4763property.kt")
            public void testKt4763property() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt4763property.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4785.kt")
            public void testKt4785() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt4785.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4785classObject.kt")
            public void testKt4785classObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt4785classObject.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4785delegation.kt")
            public void testKt4785delegation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt4785delegation.kt");
                doTest(fileName);
            }

            @TestMetadata("kt880.kt")
            public void testKt880() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/kt880.kt");
                doTest(fileName);
            }

            @TestMetadata("MissingDelegate.kt")
            public void testMissingDelegate() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/MissingDelegate.kt");
                doTest(fileName);
            }

            @TestMetadata("MultipleDefaultParametersInSupertypes.kt")
            public void testMultipleDefaultParametersInSupertypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypes.kt");
                doTest(fileName);
            }

            @TestMetadata("MultipleDefaultParametersInSupertypesNoOverride.kt")
            public void testMultipleDefaultParametersInSupertypesNoOverride() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypesNoOverride.kt");
                doTest(fileName);
            }

            @TestMetadata("MultipleDefaultsAndNamesInSupertypes.kt")
            public void testMultipleDefaultsAndNamesInSupertypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/MultipleDefaultsAndNamesInSupertypes.kt");
                doTest(fileName);
            }

            @TestMetadata("MultipleDefaultsInSupertypesNoExplicitOverride.kt")
            public void testMultipleDefaultsInSupertypesNoExplicitOverride() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/MultipleDefaultsInSupertypesNoExplicitOverride.kt");
                doTest(fileName);
            }

            @TestMetadata("NonGenerics.kt")
            public void testNonGenerics() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/NonGenerics.kt");
                doTest(fileName);
            }

            @TestMetadata("ObjectDelegationManyImpl.kt")
            public void testObjectDelegationManyImpl() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ObjectDelegationManyImpl.kt");
                doTest(fileName);
            }

            @TestMetadata("OverrideWithErrors.kt")
            public void testOverrideWithErrors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/OverrideWithErrors.kt");
                doTest(fileName);
            }

            @TestMetadata("OverridingFinalMember.kt")
            public void testOverridingFinalMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/OverridingFinalMember.kt");
                doTest(fileName);
            }

            @TestMetadata("ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt")
            public void testParameterDefaultValues_DefaultValueFromOnlyOneSupertype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt");
                doTest(fileName);
            }

            @TestMetadata("ParentInheritsManyImplementations.kt")
            public void testParentInheritsManyImplementations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ParentInheritsManyImplementations.kt");
                doTest(fileName);
            }

            @TestMetadata("PropertyInConstructor.kt")
            public void testPropertyInConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/PropertyInConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("ProtectedAndPrivateFromSupertypes.kt")
            public void testProtectedAndPrivateFromSupertypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ProtectedAndPrivateFromSupertypes.kt");
                doTest(fileName);
            }

            @TestMetadata("SuspiciousCase1.kt")
            public void testSuspiciousCase1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/SuspiciousCase1.kt");
                doTest(fileName);
            }

            @TestMetadata("ToAbstractMembersFromSuper-kt1996.kt")
            public void testToAbstractMembersFromSuper_kt1996() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/ToAbstractMembersFromSuper-kt1996.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/override/parameterNames")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ParameterNames extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInParameterNames() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/override/parameterNames"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("changeOnOverrideDiagnostic.kt")
                public void testChangeOnOverrideDiagnostic() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/parameterNames/changeOnOverrideDiagnostic.kt");
                    doTest(fileName);
                }

                @TestMetadata("differentNamesInSupertypesDiagnostic.kt")
                public void testDifferentNamesInSupertypesDiagnostic() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/parameterNames/differentNamesInSupertypesDiagnostic.kt");
                    doTest(fileName);
                }

                @TestMetadata("invokeInFunctionClass.kt")
                public void testInvokeInFunctionClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/parameterNames/invokeInFunctionClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("jjkHierarchy.kt")
                public void testJjkHierarchy() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/parameterNames/jjkHierarchy.kt");
                    doTest(fileName);
                }

                @TestMetadata("kjkHierarchy.kt")
                public void testKjkHierarchy() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/parameterNames/kjkHierarchy.kt");
                    doTest(fileName);
                }

                @TestMetadata("kjkWithSeveralSupers.kt")
                public void testKjkWithSeveralSupers() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/parameterNames/kjkWithSeveralSupers.kt");
                    doTest(fileName);
                }

                @TestMetadata("kotlinInheritsBothJavaAndKotlin.kt")
                public void testKotlinInheritsBothJavaAndKotlin() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/parameterNames/kotlinInheritsBothJavaAndKotlin.kt");
                    doTest(fileName);
                }

                @TestMetadata("kotlinInheritsJava.kt")
                public void testKotlinInheritsJava() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/override/parameterNames/kotlinInheritsJava.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/platformTypes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class PlatformTypes extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInPlatformTypes() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("dereference.kt")
            public void testDereference() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/dereference.kt");
                doTest(fileName);
            }

            @TestMetadata("elvis.kt")
            public void testElvis() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/elvis.kt");
                doTest(fileName);
            }

            @TestMetadata("explicitFlexibleNoPackage.kt")
            public void testExplicitFlexibleNoPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/explicitFlexibleNoPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("explicitFlexibleWithPackage.kt")
            public void testExplicitFlexibleWithPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/explicitFlexibleWithPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("getParentOfType.kt")
            public void testGetParentOfType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/getParentOfType.kt");
                doTest(fileName);
            }

            @TestMetadata("inference.kt")
            public void testInference() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/inference.kt");
                doTest(fileName);
            }

            @TestMetadata("intVsIntegerAmbiguity.kt")
            public void testIntVsIntegerAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/intVsIntegerAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("nullableTypeArgument.kt")
            public void testNullableTypeArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullableTypeArgument.kt");
                doTest(fileName);
            }

            @TestMetadata("override.kt")
            public void testOverride() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/override.kt");
                doTest(fileName);
            }

            @TestMetadata("safeCall.kt")
            public void testSafeCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/safeCall.kt");
                doTest(fileName);
            }

            @TestMetadata("samConstructor.kt")
            public void testSamConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/samConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("supertypeArgumentsExplicit.kt")
            public void testSupertypeArgumentsExplicit() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/supertypeArgumentsExplicit.kt");
                doTest(fileName);
            }

            @TestMetadata("supertypeTypeArguments.kt")
            public void testSupertypeTypeArguments() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/supertypeTypeArguments.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CommonSupertype extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInCommonSupertype() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/commonSupertype"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("collectionOrNull.kt")
                public void testCollectionOrNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/collectionOrNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("inferenceWithBound.kt")
                public void testInferenceWithBound() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/inferenceWithBound.kt");
                    doTest(fileName);
                }

                @TestMetadata("mixedElvis.kt")
                public void testMixedElvis() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/mixedElvis.kt");
                    doTest(fileName);
                }

                @TestMetadata("mixedIf.kt")
                public void testMixedIf() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/mixedIf.kt");
                    doTest(fileName);
                }

                @TestMetadata("recursiveGeneric.kt")
                public void testRecursiveGeneric() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/recursiveGeneric.kt");
                    doTest(fileName);
                }

                @TestMetadata("stringOrNull.kt")
                public void testStringOrNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/stringOrNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeOfElvis.kt")
                public void testTypeOfElvis() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/typeOfElvis.kt");
                    doTest(fileName);
                }

                @TestMetadata("withNothing.kt")
                public void testWithNothing() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/withNothing.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/intersection")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Intersection extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInIntersection() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/intersection"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("map.kt")
                public void testMap() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/intersection/map.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class MethodCall extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInMethodCall() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/methodCall"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("entrySet.kt")
                public void testEntrySet() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/entrySet.kt");
                    doTest(fileName);
                }

                @TestMetadata("genericsAndArrays.kt")
                public void testGenericsAndArrays() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/genericsAndArrays.kt");
                    doTest(fileName);
                }

                @TestMetadata("int.kt")
                public void testInt() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/int.kt");
                    doTest(fileName);
                }

                @TestMetadata("intArray.kt")
                public void testIntArray() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/intArray.kt");
                    doTest(fileName);
                }

                @TestMetadata("javaCollectionToKotlin.kt")
                public void testJavaCollectionToKotlin() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaCollectionToKotlin.kt");
                    doTest(fileName);
                }

                @TestMetadata("javaToJava.kt")
                public void testJavaToJava() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaToJava.kt");
                    doTest(fileName);
                }

                @TestMetadata("javaToKotlin.kt")
                public void testJavaToKotlin() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaToKotlin.kt");
                    doTest(fileName);
                }

                @TestMetadata("kotlinCollectionToJava.kt")
                public void testKotlinCollectionToJava() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/kotlinCollectionToJava.kt");
                    doTest(fileName);
                }

                @TestMetadata("list.kt")
                public void testList() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/list.kt");
                    doTest(fileName);
                }

                @TestMetadata("multipleExactBounds.kt")
                public void testMultipleExactBounds() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/multipleExactBounds.kt");
                    doTest(fileName);
                }

                @TestMetadata("multipleExactBoundsNullable.kt")
                public void testMultipleExactBoundsNullable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/multipleExactBoundsNullable.kt");
                    doTest(fileName);
                }

                @TestMetadata("objectArray.kt")
                public void testObjectArray() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/objectArray.kt");
                    doTest(fileName);
                }

                @TestMetadata("overloadingForSubclass.kt")
                public void testOverloadingForSubclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/overloadingForSubclass.kt");
                    doTest(fileName);
                }

                @TestMetadata("sam.kt")
                public void testSam() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/sam.kt");
                    doTest(fileName);
                }

                @TestMetadata("singleton.kt")
                public void testSingleton() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/singleton.kt");
                    doTest(fileName);
                }

                @TestMetadata("string.kt")
                public void testString() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/string.kt");
                    doTest(fileName);
                }

                @TestMetadata("visitor.kt")
                public void testVisitor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall/visitor.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NullabilityWarnings extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNullabilityWarnings() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("arithmetic.kt")
                public void testArithmetic() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/arithmetic.kt");
                    doTest(fileName);
                }

                @TestMetadata("array.kt")
                public void testArray() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/array.kt");
                    doTest(fileName);
                }

                @TestMetadata("assignToVar.kt")
                public void testAssignToVar() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/assignToVar.kt");
                    doTest(fileName);
                }

                @TestMetadata("conditions.kt")
                public void testConditions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/conditions.kt");
                    doTest(fileName);
                }

                @TestMetadata("dataFlowInfo.kt")
                public void testDataFlowInfo() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/dataFlowInfo.kt");
                    doTest(fileName);
                }

                @TestMetadata("defaultParameters.kt")
                public void testDefaultParameters() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/defaultParameters.kt");
                    doTest(fileName);
                }

                @TestMetadata("delegatedProperties.kt")
                public void testDelegatedProperties() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/delegatedProperties.kt");
                    doTest(fileName);
                }

                @TestMetadata("delegation.kt")
                public void testDelegation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/delegation.kt");
                    doTest(fileName);
                }

                @TestMetadata("derefenceExtension.kt")
                public void testDerefenceExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/derefenceExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("derefenceMember.kt")
                public void testDerefenceMember() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/derefenceMember.kt");
                    doTest(fileName);
                }

                @TestMetadata("elvis.kt")
                public void testElvis() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/elvis.kt");
                    doTest(fileName);
                }

                @TestMetadata("expectedType.kt")
                public void testExpectedType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/expectedType.kt");
                    doTest(fileName);
                }

                @TestMetadata("for.kt")
                public void testFor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/for.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionArguments.kt")
                public void testFunctionArguments() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/functionArguments.kt");
                    doTest(fileName);
                }

                @TestMetadata("inferenceInConditionals.kt")
                public void testInferenceInConditionals() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/inferenceInConditionals.kt");
                    doTest(fileName);
                }

                @TestMetadata("invoke.kt")
                public void testInvoke() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/invoke.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt6829.kt")
                public void testKt6829() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/kt6829.kt");
                    doTest(fileName);
                }

                @TestMetadata("multiDeclaration.kt")
                public void testMultiDeclaration() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/multiDeclaration.kt");
                    doTest(fileName);
                }

                @TestMetadata("notNullAfterSafeCall.kt")
                public void testNotNullAfterSafeCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAfterSafeCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("notNullAssertion.kt")
                public void testNotNullAssertion() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAssertion.kt");
                    doTest(fileName);
                }

                @TestMetadata("notNullAssertionInCall.kt")
                public void testNotNullAssertionInCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAssertionInCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("notNullTypeMarkedWithNullableAnnotation.kt")
                public void testNotNullTypeMarkedWithNullableAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullTypeMarkedWithNullableAnnotation.kt");
                    doTest(fileName);
                }

                @TestMetadata("passToJava.kt")
                public void testPassToJava() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/passToJava.kt");
                    doTest(fileName);
                }

                @TestMetadata("primitiveArray.kt")
                public void testPrimitiveArray() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/primitiveArray.kt");
                    doTest(fileName);
                }

                @TestMetadata("safeCall.kt")
                public void testSafeCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/safeCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("senselessComparisonEquals.kt")
                public void testSenselessComparisonEquals() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/senselessComparisonEquals.kt");
                    doTest(fileName);
                }

                @TestMetadata("senselessComparisonIdentityEquals.kt")
                public void testSenselessComparisonIdentityEquals() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/senselessComparisonIdentityEquals.kt");
                    doTest(fileName);
                }

                @TestMetadata("throw.kt")
                public void testThrow() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/throw.kt");
                    doTest(fileName);
                }

                @TestMetadata("uselessElvisInCall.kt")
                public void testUselessElvisInCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/uselessElvisInCall.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeEnhancement extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInTypeEnhancement() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("annotatedTypeArguments.kt")
                public void testAnnotatedTypeArguments() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/annotatedTypeArguments.kt");
                    doTest(fileName);
                }

                @TestMetadata("methodWithTypeParameter.kt")
                public void testMethodWithTypeParameter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/methodWithTypeParameter.kt");
                    doTest(fileName);
                }

                @TestMetadata("overriddenExtensions.kt")
                public void testOverriddenExtensions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/overriddenExtensions.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnTypeDifferentConstructor.kt")
                public void testReturnTypeDifferentConstructor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/returnTypeDifferentConstructor.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnTypeOverrideInKotlin.kt")
                public void testReturnTypeOverrideInKotlin() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/returnTypeOverrideInKotlin.kt");
                    doTest(fileName);
                }

                @TestMetadata("saveAnnotationAfterSubstitution.kt")
                public void testSaveAnnotationAfterSubstitution() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/saveAnnotationAfterSubstitution.kt");
                    doTest(fileName);
                }

                @TestMetadata("supertypeDifferentParameterNullability.kt")
                public void testSupertypeDifferentParameterNullability() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/supertypeDifferentParameterNullability.kt");
                    doTest(fileName);
                }

                @TestMetadata("supertypeDifferentReturnNullability.kt")
                public void testSupertypeDifferentReturnNullability() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/supertypeDifferentReturnNullability.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/recovery")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Recovery extends AbstractJetDiagnosticsTest {
            @TestMetadata("absentLeftHandSide.kt")
            public void testAbsentLeftHandSide() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/recovery/absentLeftHandSide.kt");
                doTest(fileName);
            }

            public void testAllFilesPresentInRecovery() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/recovery"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("emptyTypeArgs.kt")
            public void testEmptyTypeArgs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/recovery/emptyTypeArgs.kt");
                doTest(fileName);
            }

            @TestMetadata("namelessInJava.kt")
            public void testNamelessInJava() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/recovery/namelessInJava.kt");
                doTest(fileName);
            }

            @TestMetadata("namelessMembers.kt")
            public void testNamelessMembers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/recovery/namelessMembers.kt");
                doTest(fileName);
            }

            @TestMetadata("namelessToplevelDeclarations.kt")
            public void testNamelessToplevelDeclarations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/recovery/namelessToplevelDeclarations.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/redeclarations")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Redeclarations extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInRedeclarations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/redeclarations"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ClassRedeclarationInDifferentFiles.kt")
            public void testClassRedeclarationInDifferentFiles() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/ClassRedeclarationInDifferentFiles.kt");
                doTest(fileName);
            }

            @TestMetadata("ConflictingExtensionProperties.kt")
            public void testConflictingExtensionProperties() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/ConflictingExtensionProperties.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2418.kt")
            public void testKt2418() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/kt2418.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2438.kt")
            public void testKt2438() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/kt2438.kt");
                doTest(fileName);
            }

            @TestMetadata("kt470.kt")
            public void testKt470() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/kt470.kt");
                doTest(fileName);
            }

            @TestMetadata("MultiFilePackageRedeclaration.kt")
            public void testMultiFilePackageRedeclaration() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/MultiFilePackageRedeclaration.kt");
                doTest(fileName);
            }

            @TestMetadata("NoRedeclarationForClassesInDefaultObject.kt")
            public void testNoRedeclarationForClassesInDefaultObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/NoRedeclarationForClassesInDefaultObject.kt");
                doTest(fileName);
            }

            @TestMetadata("NoRedeclarationForEnumEntriesAndDefaultObjectMembers.kt")
            public void testNoRedeclarationForEnumEntriesAndDefaultObjectMembers() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/NoRedeclarationForEnumEntriesAndDefaultObjectMembers.kt");
                doTest(fileName);
            }

            @TestMetadata("PropertyAndFunInClass.kt")
            public void testPropertyAndFunInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/PropertyAndFunInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("PropertyAndInnerClass.kt")
            public void testPropertyAndInnerClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/PropertyAndInnerClass.kt");
                doTest(fileName);
            }

            @TestMetadata("RedeclarationInDefaultObject.kt")
            public void testRedeclarationInDefaultObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/RedeclarationInDefaultObject.kt");
                doTest(fileName);
            }

            @TestMetadata("RedeclarationInMultiFile.kt")
            public void testRedeclarationInMultiFile() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/RedeclarationInMultiFile.kt");
                doTest(fileName);
            }

            @TestMetadata("Redeclarations.kt")
            public void testRedeclarations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/Redeclarations.kt");
                doTest(fileName);
            }

            @TestMetadata("RedeclarationsInObjects.kt")
            public void testRedeclarationsInObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/RedeclarationsInObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("RedeclaredTypeParameters.kt")
            public void testRedeclaredTypeParameters() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/RedeclaredTypeParameters.kt");
                doTest(fileName);
            }

            @TestMetadata("SingletonAndFunctionSameName.kt")
            public void testSingletonAndFunctionSameName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/redeclarations/SingletonAndFunctionSameName.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/reflection")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Reflection extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInReflection() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/reflection"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("noReflectionInClassPath.kt")
            public void testNoReflectionInClassPath() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/reflection/noReflectionInClassPath.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/regressions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Regressions extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInRegressions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/regressions"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AmbiguityOnLazyTypeComputation.kt")
            public void testAmbiguityOnLazyTypeComputation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/AmbiguityOnLazyTypeComputation.kt");
                doTest(fileName);
            }

            @TestMetadata("AssignmentsUnderOperators.kt")
            public void testAssignmentsUnderOperators() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/AssignmentsUnderOperators.kt");
                doTest(fileName);
            }

            @TestMetadata("CoercionToUnit.kt")
            public void testCoercionToUnit() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/CoercionToUnit.kt");
                doTest(fileName);
            }

            @TestMetadata("DoubleDefine.kt")
            public void testDoubleDefine() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/DoubleDefine.kt");
                doTest(fileName);
            }

            @TestMetadata("ea40964.kt")
            public void testEa40964() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/ea40964.kt");
                doTest(fileName);
            }

            @TestMetadata("ea43298.kt")
            public void testEa43298() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/ea43298.kt");
                doTest(fileName);
            }

            @TestMetadata("ea53340.kt")
            public void testEa53340() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/ea53340.kt");
                doTest(fileName);
            }

            @TestMetadata("ea65509.kt")
            public void testEa65509() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/ea65509.kt");
                doTest(fileName);
            }

            @TestMetadata("ea66984.kt")
            public void testEa66984() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/ea66984.kt");
                doTest(fileName);
            }

            @TestMetadata("ea69735.kt")
            public void testEa69735() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/ea69735.kt");
                doTest(fileName);
            }

            @TestMetadata("ErrorsOnIbjectExpressionsAsParameters.kt")
            public void testErrorsOnIbjectExpressionsAsParameters() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/ErrorsOnIbjectExpressionsAsParameters.kt");
                doTest(fileName);
            }

            @TestMetadata("intchar.kt")
            public void testIntchar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/intchar.kt");
                doTest(fileName);
            }

            @TestMetadata("itselfAsUpperBound.kt")
            public void testItselfAsUpperBound() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBound.kt");
                doTest(fileName);
            }

            @TestMetadata("itselfAsUpperBoundInClass.kt")
            public void testItselfAsUpperBoundInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("itselfAsUpperBoundInClassNotNull.kt")
            public void testItselfAsUpperBoundInClassNotNull() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundInClassNotNull.kt");
                doTest(fileName);
            }

            @TestMetadata("itselfAsUpperBoundLocal.kt")
            public void testItselfAsUpperBoundLocal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundLocal.kt");
                doTest(fileName);
            }

            @TestMetadata("itselfAsUpperBoundMember.kt")
            public void testItselfAsUpperBoundMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundMember.kt");
                doTest(fileName);
            }

            @TestMetadata("itselfAsUpperBoundNotNull.kt")
            public void testItselfAsUpperBoundNotNull() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundNotNull.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet11.kt")
            public void testJet11() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet11.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet121.kt")
            public void testJet121() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet121.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet124.kt")
            public void testJet124() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet124.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet169.kt")
            public void testJet169() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet169.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet17.kt")
            public void testJet17() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet17.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet183.kt")
            public void testJet183() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet183.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet183-1.kt")
            public void testJet183_1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet183-1.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet53.kt")
            public void testJet53() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet53.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet67.kt")
            public void testJet67() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet67.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet68.kt")
            public void testJet68() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet68.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet69.kt")
            public void testJet69() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet69.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet72.kt")
            public void testJet72() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet72.kt");
                doTest(fileName);
            }

            @TestMetadata("Jet81.kt")
            public void testJet81() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/Jet81.kt");
                doTest(fileName);
            }

            @TestMetadata("kt127.kt")
            public void testKt127() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt127.kt");
                doTest(fileName);
            }

            @TestMetadata("kt128.kt")
            public void testKt128() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt128.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1489_1728.kt")
            public void testKt1489_1728() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt1489_1728.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1550.kt")
            public void testKt1550() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt1550.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1639-JFrame.kt")
            public void testKt1639_JFrame() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt1639-JFrame.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1647.kt")
            public void testKt1647() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt1647.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1736.kt")
            public void testKt1736() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt1736.kt");
                doTest(fileName);
            }

            @TestMetadata("kt174.kt")
            public void testKt174() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt174.kt");
                doTest(fileName);
            }

            @TestMetadata("kt201.kt")
            public void testKt201() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt201.kt");
                doTest(fileName);
            }

            @TestMetadata("kt235.kt")
            public void testKt235() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt235.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2376.kt")
            public void testKt2376() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt2376.kt");
                doTest(fileName);
            }

            @TestMetadata("kt251.kt")
            public void testKt251() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt251.kt");
                doTest(fileName);
            }

            @TestMetadata("kt258.kt")
            public void testKt258() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt258.kt");
                doTest(fileName);
            }

            @TestMetadata("kt26.kt")
            public void testKt26() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt26.kt");
                doTest(fileName);
            }

            @TestMetadata("kt26-1.kt")
            public void testKt26_1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt26-1.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2768.kt")
            public void testKt2768() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt2768.kt");
                doTest(fileName);
            }

            @TestMetadata("kt282.kt")
            public void testKt282() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt282.kt");
                doTest(fileName);
            }

            @TestMetadata("kt287.kt")
            public void testKt287() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt287.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2956.kt")
            public void testKt2956() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt2956.kt");
                doTest(fileName);
            }

            @TestMetadata("kt302.kt")
            public void testKt302() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt302.kt");
                doTest(fileName);
            }

            @TestMetadata("kt306.kt")
            public void testKt306() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt306.kt");
                doTest(fileName);
            }

            @TestMetadata("kt307.kt")
            public void testKt307() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt307.kt");
                doTest(fileName);
            }

            @TestMetadata("kt312.kt")
            public void testKt312() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt312.kt");
                doTest(fileName);
            }

            @TestMetadata("kt313.kt")
            public void testKt313() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt313.kt");
                doTest(fileName);
            }

            @TestMetadata("kt316.kt")
            public void testKt316() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt316.kt");
                doTest(fileName);
            }

            @TestMetadata("kt328.kt")
            public void testKt328() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt328.kt");
                doTest(fileName);
            }

            @TestMetadata("kt334.kt")
            public void testKt334() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt334.kt");
                doTest(fileName);
            }

            @TestMetadata("kt335.336.kt")
            public void testKt335_336() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt335.336.kt");
                doTest(fileName);
            }

            @TestMetadata("kt337.kt")
            public void testKt337() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt337.kt");
                doTest(fileName);
            }

            @TestMetadata("kt352.kt")
            public void testKt352() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt352.kt");
                doTest(fileName);
            }

            @TestMetadata("kt353.kt")
            public void testKt353() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt353.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3535.kt")
            public void testKt3535() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt3535.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3647.kt")
            public void testKt3647() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt3647.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3731.kt")
            public void testKt3731() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt3731.kt");
                doTest(fileName);
            }

            @TestMetadata("kt385.109.441.kt")
            public void testKt385_109_441() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt385.109.441.kt");
                doTest(fileName);
            }

            @TestMetadata("kt394.kt")
            public void testKt394() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt394.kt");
                doTest(fileName);
            }

            @TestMetadata("kt398.kt")
            public void testKt398() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt398.kt");
                doTest(fileName);
            }

            @TestMetadata("kt399.kt")
            public void testKt399() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt399.kt");
                doTest(fileName);
            }

            @TestMetadata("kt402.kt")
            public void testKt402() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt402.kt");
                doTest(fileName);
            }

            @TestMetadata("kt41.kt")
            public void testKt41() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt41.kt");
                doTest(fileName);
            }

            @TestMetadata("kt411.kt")
            public void testKt411() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt411.kt");
                doTest(fileName);
            }

            @TestMetadata("kt439.kt")
            public void testKt439() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt439.kt");
                doTest(fileName);
            }

            @TestMetadata("kt442.kt")
            public void testKt442() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt442.kt");
                doTest(fileName);
            }

            @TestMetadata("kt443.kt")
            public void testKt443() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt443.kt");
                doTest(fileName);
            }

            @TestMetadata("kt455.kt")
            public void testKt455() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt455.kt");
                doTest(fileName);
            }

            @TestMetadata("kt456.kt")
            public void testKt456() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt456.kt");
                doTest(fileName);
            }

            @TestMetadata("kt459.kt")
            public void testKt459() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt459.kt");
                doTest(fileName);
            }

            @TestMetadata("kt469.kt")
            public void testKt469() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt469.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4827.kt")
            public void testKt4827() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt4827.kt");
                doTest(fileName);
            }

            @TestMetadata("kt498.kt")
            public void testKt498() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt498.kt");
                doTest(fileName);
            }

            @TestMetadata("kt524.kt")
            public void testKt524() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt524.kt");
                doTest(fileName);
            }

            @TestMetadata("kt526UnresolvedReferenceInnerStatic.kt")
            public void testKt526UnresolvedReferenceInnerStatic() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt526UnresolvedReferenceInnerStatic.kt");
                doTest(fileName);
            }

            @TestMetadata("kt5326.kt")
            public void testKt5326() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt5326.kt");
                doTest(fileName);
            }

            @TestMetadata("kt549.kt")
            public void testKt549() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt549.kt");
                doTest(fileName);
            }

            @TestMetadata("kt557.kt")
            public void testKt557() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt557.kt");
                doTest(fileName);
            }

            @TestMetadata("kt571.kt")
            public void testKt571() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt571.kt");
                doTest(fileName);
            }

            @TestMetadata("kt575.kt")
            public void testKt575() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt575.kt");
                doTest(fileName);
            }

            @TestMetadata("kt58.kt")
            public void testKt58() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt58.kt");
                doTest(fileName);
            }

            @TestMetadata("kt580.kt")
            public void testKt580() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt580.kt");
                doTest(fileName);
            }

            @TestMetadata("kt588.kt")
            public void testKt588() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt588.kt");
                doTest(fileName);
            }

            @TestMetadata("kt597.kt")
            public void testKt597() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt597.kt");
                doTest(fileName);
            }

            @TestMetadata("kt600.kt")
            public void testKt600() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt600.kt");
                doTest(fileName);
            }

            @TestMetadata("kt604.kt")
            public void testKt604() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt604.kt");
                doTest(fileName);
            }

            @TestMetadata("kt618.kt")
            public void testKt618() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt618.kt");
                doTest(fileName);
            }

            @TestMetadata("kt629.kt")
            public void testKt629() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt629.kt");
                doTest(fileName);
            }

            @TestMetadata("kt630.kt")
            public void testKt630() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt630.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6508.kt")
            public void testKt6508() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt6508.kt");
                doTest(fileName);
            }

            @TestMetadata("kt688.kt")
            public void testKt688() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt688.kt");
                doTest(fileName);
            }

            @TestMetadata("kt691.kt")
            public void testKt691() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt691.kt");
                doTest(fileName);
            }

            @TestMetadata("kt701.kt")
            public void testKt701() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt701.kt");
                doTest(fileName);
            }

            @TestMetadata("kt716.kt")
            public void testKt716() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt716.kt");
                doTest(fileName);
            }

            @TestMetadata("kt743.kt")
            public void testKt743() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt743.kt");
                doTest(fileName);
            }

            @TestMetadata("kt750.kt")
            public void testKt750() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt750.kt");
                doTest(fileName);
            }

            @TestMetadata("kt762.kt")
            public void testKt762() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt762.kt");
                doTest(fileName);
            }

            @TestMetadata("kt847.kt")
            public void testKt847() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt847.kt");
                doTest(fileName);
            }

            @TestMetadata("kt860.kt")
            public void testKt860() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/kt860.kt");
                doTest(fileName);
            }

            @TestMetadata("OrphanStarProjection.kt")
            public void testOrphanStarProjection() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/OrphanStarProjection.kt");
                doTest(fileName);
            }

            @TestMetadata("OutProjections.kt")
            public void testOutProjections() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/OutProjections.kt");
                doTest(fileName);
            }

            @TestMetadata("OverrideResolution.kt")
            public void testOverrideResolution() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/OverrideResolution.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveSubclassOfList.kt")
            public void testResolveSubclassOfList() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/resolveSubclassOfList.kt");
                doTest(fileName);
            }

            @TestMetadata("SpecififcityByReceiver.kt")
            public void testSpecififcityByReceiver() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/SpecififcityByReceiver.kt");
                doTest(fileName);
            }

            @TestMetadata("TypeMismatchOnUnaryOperations.kt")
            public void testTypeMismatchOnUnaryOperations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/TypeMismatchOnUnaryOperations.kt");
                doTest(fileName);
            }

            @TestMetadata("TypeParameterAsASupertype.kt")
            public void testTypeParameterAsASupertype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/TypeParameterAsASupertype.kt");
                doTest(fileName);
            }

            @TestMetadata("UnavaliableQualifiedThis.kt")
            public void testUnavaliableQualifiedThis() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/UnavaliableQualifiedThis.kt");
                doTest(fileName);
            }

            @TestMetadata("WrongTraceInCallResolver.kt")
            public void testWrongTraceInCallResolver() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/regressions/WrongTraceInCallResolver.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/resolve")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Resolve extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInResolve() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ambiguityOnPropertiesWithTheSamePackageName.kt")
            public void testAmbiguityOnPropertiesWithTheSamePackageName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/ambiguityOnPropertiesWithTheSamePackageName.kt");
                doTest(fileName);
            }

            @TestMetadata("ambiguityWithTwoCorrespondingFunctionTypes.kt")
            public void testAmbiguityWithTwoCorrespondingFunctionTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/ambiguityWithTwoCorrespondingFunctionTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("incompleteConstructorInvocation.kt")
            public void testIncompleteConstructorInvocation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/incompleteConstructorInvocation.kt");
                doTest(fileName);
            }

            @TestMetadata("inferenceInLinkedLambdas.kt")
            public void testInferenceInLinkedLambdas() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/inferenceInLinkedLambdas.kt");
                doTest(fileName);
            }

            @TestMetadata("inferenceInLinkedLambdasDependentOnExpectedType.kt")
            public void testInferenceInLinkedLambdasDependentOnExpectedType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/inferenceInLinkedLambdasDependentOnExpectedType.kt");
                doTest(fileName);
            }

            @TestMetadata("objectLiteralAsArgument.kt")
            public void testObjectLiteralAsArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/objectLiteralAsArgument.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveAnnotatedLambdaArgument.kt")
            public void testResolveAnnotatedLambdaArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/resolveAnnotatedLambdaArgument.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveWithFunctionLiteralWithId.kt")
            public void testResolveWithFunctionLiteralWithId() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralWithId.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveWithFunctionLiterals.kt")
            public void testResolveWithFunctionLiterals() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiterals.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveWithFunctionLiteralsOverload.kt")
            public void testResolveWithFunctionLiteralsOverload() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralsOverload.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveWithGenerics.kt")
            public void testResolveWithGenerics() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/resolveWithGenerics.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveWithRedeclarationError.kt")
            public void testResolveWithRedeclarationError() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/resolveWithRedeclarationError.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveWithSpecifiedFunctionLiteralWithId.kt")
            public void testResolveWithSpecifiedFunctionLiteralWithId() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/resolveWithSpecifiedFunctionLiteralWithId.kt");
                doTest(fileName);
            }

            @TestMetadata("resolveWithoutGenerics.kt")
            public void testResolveWithoutGenerics() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/resolveWithoutGenerics.kt");
                doTest(fileName);
            }

            @TestMetadata("wrongNumberOfTypeArguments.kt")
            public void testWrongNumberOfTypeArguments() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/wrongNumberOfTypeArguments.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Invoke extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInvoke() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/invoke"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("invokeAsExtension.kt")
                public void testInvokeAsExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("invokeAsMember.kt")
                public void testInvokeAsMember() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMember.kt");
                    doTest(fileName);
                }

                @TestMetadata("invokeAsMemberExtension.kt")
                public void testInvokeAsMemberExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("invokeAsMemberExtensionToExplicitReceiver.kt")
                public void testInvokeAsMemberExtensionToExplicitReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtensionToExplicitReceiver.kt");
                    doTest(fileName);
                }

                @TestMetadata("invokeNonExtensionLambdaInContext.kt")
                public void testInvokeNonExtensionLambdaInContext() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/invokeNonExtensionLambdaInContext.kt");
                    doTest(fileName);
                }

                @TestMetadata("KT-4372.kt")
                public void testKT_4372() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/KT-4372.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3772.kt")
                public void testKt3772() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/kt3772.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt3833-invokeInsideNestedClass.kt")
                public void testKt3833_invokeInsideNestedClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/kt3833-invokeInsideNestedClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt4204-completeNestedCallsForInvoke.kt")
                public void testKt4204_completeNestedCallsForInvoke() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/kt4204-completeNestedCallsForInvoke.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt4321InvokeOnEnum.kt")
                public void testKt4321InvokeOnEnum() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/kt4321InvokeOnEnum.kt");
                    doTest(fileName);
                }

                @TestMetadata("valNamedInvoke.kt")
                public void testValNamedInvoke() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/valNamedInvoke.kt");
                    doTest(fileName);
                }

                @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Errors extends AbstractJetDiagnosticsTest {
                    public void testAllFilesPresentInErrors() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/invoke/errors"), Pattern.compile("^(.+)\\.kt$"), true);
                    }

                    @TestMetadata("ambiguityForInvoke.kt")
                    public void testAmbiguityForInvoke() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors/ambiguityForInvoke.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invisibleInvoke.kt")
                    public void testInvisibleInvoke() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors/invisibleInvoke.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("receiverPresenceErrorForInvoke.kt")
                    public void testReceiverPresenceErrorForInvoke() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors/receiverPresenceErrorForInvoke.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("typeInferenceErrorForInvoke.kt")
                    public void testTypeInferenceErrorForInvoke() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors/typeInferenceErrorForInvoke.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("unresolvedInvoke.kt")
                    public void testUnresolvedInvoke() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors/unresolvedInvoke.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("unsafeCallWithInvoke.kt")
                    public void testUnsafeCallWithInvoke() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors/unsafeCallWithInvoke.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("wrongReceiverForInvokeOnExpression.kt")
                    public void testWrongReceiverForInvokeOnExpression() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors/wrongReceiverForInvokeOnExpression.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("wrongReceiverTypeForInvoke.kt")
                    public void testWrongReceiverTypeForInvoke() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors/wrongReceiverTypeForInvoke.kt");
                        doTest(fileName);
                    }
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class NestedCalls extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNestedCalls() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/nestedCalls"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("analyzeArgsInFreeExpressionPosition.kt")
                public void testAnalyzeArgsInFreeExpressionPosition() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeArgsInFreeExpressionPosition.kt");
                    doTest(fileName);
                }

                @TestMetadata("analyzeUnmappedArguments.kt")
                public void testAnalyzeUnmappedArguments() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeUnmappedArguments.kt");
                    doTest(fileName);
                }

                @TestMetadata("argumentsInParentheses.kt")
                public void testArgumentsInParentheses() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls/argumentsInParentheses.kt");
                    doTest(fileName);
                }

                @TestMetadata("completeTypeInferenceForNestedInNoneApplicable.kt")
                public void testCompleteTypeInferenceForNestedInNoneApplicable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls/completeTypeInferenceForNestedInNoneApplicable.kt");
                    doTest(fileName);
                }

                @TestMetadata("completeUnmappedArguments.kt")
                public void testCompleteUnmappedArguments() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls/completeUnmappedArguments.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt5971NestedSafeCall.kt")
                public void testKt5971NestedSafeCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls/kt5971NestedSafeCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt7597.kt")
                public void testKt7597() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls/kt7597.kt");
                    doTest(fileName);
                }

                @TestMetadata("twoTypeParameters.kt")
                public void testTwoTypeParameters() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls/twoTypeParameters.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SpecialConstructions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSpecialConstructions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/resolve/specialConstructions"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("constantsInIf.kt")
                public void testConstantsInIf() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions/constantsInIf.kt");
                    doTest(fileName);
                }

                @TestMetadata("elvisAsCall.kt")
                public void testElvisAsCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions/elvisAsCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("exclExclAsCall.kt")
                public void testExclExclAsCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions/exclExclAsCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("multipleSuperClasses.kt")
                public void testMultipleSuperClasses() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions/multipleSuperClasses.kt");
                    doTest(fileName);
                }

                @TestMetadata("reportTypeMismatchDeeplyOnBranches.kt")
                public void testReportTypeMismatchDeeplyOnBranches() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions/reportTypeMismatchDeeplyOnBranches.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/scopes")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Scopes extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInScopes() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/scopes"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AmbiguityBetweenRootAndPackage.kt")
            public void testAmbiguityBetweenRootAndPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/AmbiguityBetweenRootAndPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("AmbiguousNonExtensions.kt")
            public void testAmbiguousNonExtensions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/AmbiguousNonExtensions.kt");
                doTest(fileName);
            }

            @TestMetadata("initializerScopeOfExtensionProperty.kt")
            public void testInitializerScopeOfExtensionProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/initializerScopeOfExtensionProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1078.kt")
            public void testKt1078() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1078.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1080.kt")
            public void testKt1080() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1080.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1244.kt")
            public void testKt1244() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1244.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1248.kt")
            public void testKt1248() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1248.kt");
                doTest(fileName);
            }

            @TestMetadata("kt151.kt")
            public void testKt151() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt151.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1579.kt")
            public void testKt1579() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1579.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1579_map_entry.kt")
            public void testKt1579_map_entry() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1579_map_entry.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1580.kt")
            public void testKt1580() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1580.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1642.kt")
            public void testKt1642() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1642.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1738.kt")
            public void testKt1738() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1738.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1805.kt")
            public void testKt1805() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1805.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1806.kt")
            public void testKt1806() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1806.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1822.kt")
            public void testKt1822() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1822.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1942.kt")
            public void testKt1942() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt1942.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2262.kt")
            public void testKt2262() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt2262.kt");
                doTest(fileName);
            }

            @TestMetadata("kt250.617.10.kt")
            public void testKt250_617_10() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt250.617.10.kt");
                doTest(fileName);
            }

            @TestMetadata("kt323.kt")
            public void testKt323() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt323.kt");
                doTest(fileName);
            }

            @TestMetadata("kt37.kt")
            public void testKt37() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt37.kt");
                doTest(fileName);
            }

            @TestMetadata("kt421Scopes.kt")
            public void testKt421Scopes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt421Scopes.kt");
                doTest(fileName);
            }

            @TestMetadata("kt587.kt")
            public void testKt587() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt587.kt");
                doTest(fileName);
            }

            @TestMetadata("kt900.kt")
            public void testKt900() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt900.kt");
                doTest(fileName);
            }

            @TestMetadata("kt900-1.kt")
            public void testKt900_1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt900-1.kt");
                doTest(fileName);
            }

            @TestMetadata("kt900-2.kt")
            public void testKt900_2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt900-2.kt");
                doTest(fileName);
            }

            @TestMetadata("kt939.kt")
            public void testKt939() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/kt939.kt");
                doTest(fileName);
            }

            @TestMetadata("NoAmbiguityBetweenRootAndPackage.kt")
            public void testNoAmbiguityBetweenRootAndPackage() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/NoAmbiguityBetweenRootAndPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("sameClassNameResolve.kt")
            public void testSameClassNameResolve() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/sameClassNameResolve.kt");
                doTest(fileName);
            }

            @TestMetadata("stopResolutionOnAmbiguity.kt")
            public void testStopResolutionOnAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/stopResolutionOnAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/visibility.kt");
                doTest(fileName);
            }

            @TestMetadata("visibility2.kt")
            public void testVisibility2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/visibility2.kt");
                doTest(fileName);
            }

            @TestMetadata("VisibilityInClassObject.kt")
            public void testVisibilityInClassObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/VisibilityInClassObject.kt");
                doTest(fileName);
            }

            @TestMetadata("VisibilityInheritModifier.kt")
            public void testVisibilityInheritModifier() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/scopes/VisibilityInheritModifier.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/sealed")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Sealed extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSealed() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/sealed"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("DoubleInner.kt")
            public void testDoubleInner() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/DoubleInner.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhen.kt")
            public void testExhaustiveWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhen.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhenDoubleInner.kt")
            public void testExhaustiveWhenDoubleInner() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenDoubleInner.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhenMultipleInner.kt")
            public void testExhaustiveWhenMultipleInner() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenMultipleInner.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhenNegated.kt")
            public void testExhaustiveWhenNegated() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenNegated.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhenNegatedTwice.kt")
            public void testExhaustiveWhenNegatedTwice() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenNegatedTwice.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhenOnNestedSealed.kt")
            public void testExhaustiveWhenOnNestedSealed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenOnNestedSealed.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhenOnNullable.kt")
            public void testExhaustiveWhenOnNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenOnNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhenWithAdditionalMember.kt")
            public void testExhaustiveWhenWithAdditionalMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenWithAdditionalMember.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWhenWithElse.kt")
            public void testExhaustiveWhenWithElse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenWithElse.kt");
                doTest(fileName);
            }

            @TestMetadata("Local.kt")
            public void testLocal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/Local.kt");
                doTest(fileName);
            }

            @TestMetadata("NeverConstructed.kt")
            public void testNeverConstructed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NeverConstructed.kt");
                doTest(fileName);
            }

            @TestMetadata("NeverDerived.kt")
            public void testNeverDerived() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NeverDerived.kt");
                doTest(fileName);
            }

            @TestMetadata("NeverEnum.kt")
            public void testNeverEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NeverEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("NeverFinal.kt")
            public void testNeverFinal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NeverFinal.kt");
                doTest(fileName);
            }

            @TestMetadata("NeverInterface.kt")
            public void testNeverInterface() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NeverInterface.kt");
                doTest(fileName);
            }

            @TestMetadata("NeverObject.kt")
            public void testNeverObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NeverObject.kt");
                doTest(fileName);
            }

            @TestMetadata("NeverOpen.kt")
            public void testNeverOpen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NeverOpen.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWhen.kt")
            public void testNonExhaustiveWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhen.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWhenNegated.kt")
            public void testNonExhaustiveWhenNegated() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenNegated.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWhenWithAdditionalCase.kt")
            public void testNonExhaustiveWhenWithAdditionalCase() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenWithAdditionalCase.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWhenWithAnyCase.kt")
            public void testNonExhaustiveWhenWithAnyCase() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenWithAnyCase.kt");
                doTest(fileName);
            }

            @TestMetadata("OperationWhen.kt")
            public void testOperationWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/OperationWhen.kt");
                doTest(fileName);
            }

            @TestMetadata("RedundantAbstract.kt")
            public void testRedundantAbstract() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/RedundantAbstract.kt");
                doTest(fileName);
            }

            @TestMetadata("TreeWhen.kt")
            public void testTreeWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/TreeWhen.kt");
                doTest(fileName);
            }

            @TestMetadata("TreeWhenFunctional.kt")
            public void testTreeWhenFunctional() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/TreeWhenFunctional.kt");
                doTest(fileName);
            }

            @TestMetadata("TreeWhenFunctionalNoIs.kt")
            public void testTreeWhenFunctionalNoIs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/TreeWhenFunctionalNoIs.kt");
                doTest(fileName);
            }

            @TestMetadata("WhenOnEmptySealed.kt")
            public void testWhenOnEmptySealed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/sealed/WhenOnEmptySealed.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SecondaryConstructors extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSecondaryConstructors() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/secondaryConstructors"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("argumentsResolveInBodyAndDelegationCall.kt")
            public void testArgumentsResolveInBodyAndDelegationCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/argumentsResolveInBodyAndDelegationCall.kt");
                doTest(fileName);
            }

            @TestMetadata("classInitializersWithoutPrimary.kt")
            public void testClassInitializersWithoutPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/classInitializersWithoutPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("companionObjectScope.kt")
            public void testCompanionObjectScope() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/companionObjectScope.kt");
                doTest(fileName);
            }

            @TestMetadata("constructorCallType.kt")
            public void testConstructorCallType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/constructorCallType.kt");
                doTest(fileName);
            }

            @TestMetadata("constructorInObject.kt")
            public void testConstructorInObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/constructorInObject.kt");
                doTest(fileName);
            }

            @TestMetadata("constructorInTrait.kt")
            public void testConstructorInTrait() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/constructorInTrait.kt");
                doTest(fileName);
            }

            @TestMetadata("ctrsAnnotationResolve.kt")
            public void testCtrsAnnotationResolve() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/ctrsAnnotationResolve.kt");
                doTest(fileName);
            }

            @TestMetadata("cyclicDelegationCalls.kt")
            public void testCyclicDelegationCalls() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/cyclicDelegationCalls.kt");
                doTest(fileName);
            }

            @TestMetadata("dataClasses.kt")
            public void testDataClasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/dataClasses.kt");
                doTest(fileName);
            }

            @TestMetadata("dataFlowInDelegationCall.kt")
            public void testDataFlowInDelegationCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/dataFlowInDelegationCall.kt");
                doTest(fileName);
            }

            @TestMetadata("delegationByWithoutPrimary.kt")
            public void testDelegationByWithoutPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/delegationByWithoutPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("enums.kt")
            public void testEnums() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/enums.kt");
                doTest(fileName);
            }

            @TestMetadata("errorsOnEmptyDelegationCall.kt")
            public void testErrorsOnEmptyDelegationCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/errorsOnEmptyDelegationCall.kt");
                doTest(fileName);
            }

            @TestMetadata("expectedPrimaryConstructorCall.kt")
            public void testExpectedPrimaryConstructorCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/expectedPrimaryConstructorCall.kt");
                doTest(fileName);
            }

            @TestMetadata("generics.kt")
            public void testGenerics() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/generics.kt");
                doTest(fileName);
            }

            @TestMetadata("generics2.kt")
            public void testGenerics2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/generics2.kt");
                doTest(fileName);
            }

            @TestMetadata("generics3.kt")
            public void testGenerics3() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/generics3.kt");
                doTest(fileName);
            }

            @TestMetadata("headerSupertypeInitialization.kt")
            public void testHeaderSupertypeInitialization() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerSupertypeInitialization.kt");
                doTest(fileName);
            }

            @TestMetadata("implicitSuperCallErrorsIfPrimary.kt")
            public void testImplicitSuperCallErrorsIfPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/implicitSuperCallErrorsIfPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("initializationFromOtherInstance.kt")
            public void testInitializationFromOtherInstance() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/initializationFromOtherInstance.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6992.kt")
            public void testKt6992() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/kt6992.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6993.kt")
            public void testKt6993() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/kt6993.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6994.kt")
            public void testKt6994() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/kt6994.kt");
                doTest(fileName);
            }

            @TestMetadata("lambdaInDelegation.kt")
            public void testLambdaInDelegation() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/lambdaInDelegation.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedExtendsInner.kt")
            public void testNestedExtendsInner() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/nestedExtendsInner.kt");
                doTest(fileName);
            }

            @TestMetadata("noDefaultIfEmptySecondary.kt")
            public void testNoDefaultIfEmptySecondary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/noDefaultIfEmptySecondary.kt");
                doTest(fileName);
            }

            @TestMetadata("noPrimaryConstructor.kt")
            public void testNoPrimaryConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/noPrimaryConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("noSupertypeInitWithSecondaryConstructors.kt")
            public void testNoSupertypeInitWithSecondaryConstructors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/noSupertypeInitWithSecondaryConstructors.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyInitializationWithPrimary.kt")
            public void testPropertyInitializationWithPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/propertyInitializationWithPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("propertyInitializationWithoutPrimary.kt")
            public void testPropertyInitializationWithoutPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/propertyInitializationWithoutPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("redeclarations.kt")
            public void testRedeclarations() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/redeclarations.kt");
                doTest(fileName);
            }

            @TestMetadata("redeclarationsOfConstructorsIgnored.kt")
            public void testRedeclarationsOfConstructorsIgnored() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/redeclarationsOfConstructorsIgnored.kt");
                doTest(fileName);
            }

            @TestMetadata("reportResolutionErrorOnImplicitOnce.kt")
            public void testReportResolutionErrorOnImplicitOnce() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/reportResolutionErrorOnImplicitOnce.kt");
                doTest(fileName);
            }

            @TestMetadata("resolvePropertyInitializerWithoutPrimary.kt")
            public void testResolvePropertyInitializerWithoutPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/resolvePropertyInitializerWithoutPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("return.kt")
            public void testReturn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/return.kt");
                doTest(fileName);
            }

            @TestMetadata("superAnyNonEmpty.kt")
            public void testSuperAnyNonEmpty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/superAnyNonEmpty.kt");
                doTest(fileName);
            }

            @TestMetadata("superSecondaryNonExisting.kt")
            public void testSuperSecondaryNonExisting() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/superSecondaryNonExisting.kt");
                doTest(fileName);
            }

            @TestMetadata("thisNonExisting.kt")
            public void testThisNonExisting() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/thisNonExisting.kt");
                doTest(fileName);
            }

            @TestMetadata("unreachableCode.kt")
            public void testUnreachableCode() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/unreachableCode.kt");
                doTest(fileName);
            }

            @TestMetadata("useOfPropertiesWithPrimary.kt")
            public void testUseOfPropertiesWithPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/useOfPropertiesWithPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("useOfPropertiesWithoutPrimary.kt")
            public void testUseOfPropertiesWithoutPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/useOfPropertiesWithoutPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("valOrValAndModifiersInCtr.kt")
            public void testValOrValAndModifiersInCtr() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/valOrValAndModifiersInCtr.kt");
                doTest(fileName);
            }

            @TestMetadata("varargsInDelegationCallToPrimary.kt")
            public void testVarargsInDelegationCallToPrimary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/varargsInDelegationCallToPrimary.kt");
                doTest(fileName);
            }

            @TestMetadata("varargsInDelegationCallToSecondary.kt")
            public void testVarargsInDelegationCallToSecondary() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/varargsInDelegationCallToSecondary.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class HeaderCallChecker extends AbstractJetDiagnosticsTest {
                @TestMetadata("accessBaseGenericFromInnerExtendingSameBase.kt")
                public void testAccessBaseGenericFromInnerExtendingSameBase() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseGenericFromInnerExtendingSameBase.kt");
                    doTest(fileName);
                }

                @TestMetadata("accessBaseGenericFromInnerExtendingSameBase2.kt")
                public void testAccessBaseGenericFromInnerExtendingSameBase2() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseGenericFromInnerExtendingSameBase2.kt");
                    doTest(fileName);
                }

                @TestMetadata("accessBaseWithSameExtension.kt")
                public void testAccessBaseWithSameExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseWithSameExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("accessGenericBaseWithSameExtension.kt")
                public void testAccessGenericBaseWithSameExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessGenericBaseWithSameExtension.kt");
                    doTest(fileName);
                }

                public void testAllFilesPresentInHeaderCallChecker() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("innerInstanceCreation.kt")
                public void testInnerInstanceCreation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/innerInstanceCreation.kt");
                    doTest(fileName);
                }

                @TestMetadata("memberFunAccess.kt")
                public void testMemberFunAccess() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/memberFunAccess.kt");
                    doTest(fileName);
                }

                @TestMetadata("passingInstance.kt")
                public void testPassingInstance() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/passingInstance.kt");
                    doTest(fileName);
                }

                @TestMetadata("propertyAccess.kt")
                public void testPropertyAccess() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/propertyAccess.kt");
                    doTest(fileName);
                }

                @TestMetadata("propertyAccessUnitialized.kt")
                public void testPropertyAccessUnitialized() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/propertyAccessUnitialized.kt");
                    doTest(fileName);
                }

                @TestMetadata("superFunAccess.kt")
                public void testSuperFunAccess() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superFunAccess.kt");
                    doTest(fileName);
                }

                @TestMetadata("superFunAccessOverriden.kt")
                public void testSuperFunAccessOverriden() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superFunAccessOverriden.kt");
                    doTest(fileName);
                }

                @TestMetadata("superPropertyAccess.kt")
                public void testSuperPropertyAccess() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superPropertyAccess.kt");
                    doTest(fileName);
                }

                @TestMetadata("usingOuterInstance.kt")
                public void testUsingOuterInstance() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/usingOuterInstance.kt");
                    doTest(fileName);
                }

                @TestMetadata("usingOuterProperty.kt")
                public void testUsingOuterProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/usingOuterProperty.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/senselessComparison")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SenselessComparison extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSenselessComparison() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/senselessComparison"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("parenthesized.kt")
            public void testParenthesized() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/senselessComparison/parenthesized.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/shadowing")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Shadowing extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInShadowing() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/shadowing"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ShadowMultiDeclarationWithFunParameter.kt")
            public void testShadowMultiDeclarationWithFunParameter() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowMultiDeclarationWithFunParameter.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowParameterInFunctionBody.kt")
            public void testShadowParameterInFunctionBody() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInFunctionBody.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowParameterInNestedBlockInFor.kt")
            public void testShadowParameterInNestedBlockInFor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInNestedBlockInFor.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowPropertyInClosure.kt")
            public void testShadowPropertyInClosure() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInClosure.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowPropertyInFor.kt")
            public void testShadowPropertyInFor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFor.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowPropertyInFunction.kt")
            public void testShadowPropertyInFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowVariableInFor.kt")
            public void testShadowVariableInFor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInFor.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowVariableInNestedBlock.kt")
            public void testShadowVariableInNestedBlock() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedBlock.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowVariableInNestedClosure.kt")
            public void testShadowVariableInNestedClosure() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosure.kt");
                doTest(fileName);
            }

            @TestMetadata("ShadowVariableInNestedClosureParam.kt")
            public void testShadowVariableInNestedClosureParam() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosureParam.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/smartCasts")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class SmartCasts extends AbstractJetDiagnosticsTest {
            @TestMetadata("afterBinaryExpr.kt")
            public void testAfterBinaryExpr() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/afterBinaryExpr.kt");
                doTest(fileName);
            }

            public void testAllFilesPresentInSmartCasts() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("classObjectMember.kt")
            public void testClassObjectMember() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/classObjectMember.kt");
                doTest(fileName);
            }

            @TestMetadata("combineWithNoSelectorInfo.kt")
            public void testCombineWithNoSelectorInfo() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/combineWithNoSelectorInfo.kt");
                doTest(fileName);
            }

            @TestMetadata("dataFlowInfoForArguments.kt")
            public void testDataFlowInfoForArguments() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/dataFlowInfoForArguments.kt");
                doTest(fileName);
            }

            @TestMetadata("elvisNothingRHS.kt")
            public void testElvisNothingRHS() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/elvisNothingRHS.kt");
                doTest(fileName);
            }

            @TestMetadata("elvisRHS.kt")
            public void testElvisRHS() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/elvisRHS.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1461.kt")
            public void testKt1461() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt1461.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2422.kt")
            public void testKt2422() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt2422.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2865.kt")
            public void testKt2865() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt2865.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3224.kt")
            public void testKt3224() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt3224.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3244.kt")
            public void testKt3244() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt3244.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3572.kt")
            public void testKt3572() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt3572.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3711.kt")
            public void testKt3711() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt3711.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3899.kt")
            public void testKt3899() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt3899.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3993.kt")
            public void testKt3993() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt3993.kt");
                doTest(fileName);
            }

            @TestMetadata("kt5427.kt")
            public void testKt5427() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt5427.kt");
                doTest(fileName);
            }

            @TestMetadata("kt5455.kt")
            public void testKt5455() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt5455.kt");
                doTest(fileName);
            }

            @TestMetadata("kt6819.kt")
            public void testKt6819() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt6819.kt");
                doTest(fileName);
            }

            @TestMetadata("kt7561.kt")
            public void testKt7561() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/kt7561.kt");
                doTest(fileName);
            }

            @TestMetadata("noErrorCheckForPackageLevelVal.kt")
            public void testNoErrorCheckForPackageLevelVal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/noErrorCheckForPackageLevelVal.kt");
                doTest(fileName);
            }

            @TestMetadata("noUnnecessarySmartCastForReceiver.kt")
            public void testNoUnnecessarySmartCastForReceiver() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/noUnnecessarySmartCastForReceiver.kt");
                doTest(fileName);
            }

            @TestMetadata("thisWithLabel.kt")
            public void testThisWithLabel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/thisWithLabel.kt");
                doTest(fileName);
            }

            @TestMetadata("thisWithLabelAsReceiverPart.kt")
            public void testThisWithLabelAsReceiverPart() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/thisWithLabelAsReceiverPart.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/inference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inference extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInference() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/inference"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("dependentOnPrevArg.kt")
                public void testDependentOnPrevArg() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/dependentOnPrevArg.kt");
                    doTest(fileName);
                }

                @TestMetadata("intersectionTypes.kt")
                public void testIntersectionTypes() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/intersectionTypes.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1275.kt")
                public void testKt1275() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/kt1275.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt1355.kt")
                public void testKt1355() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/kt1355.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2746.kt")
                public void testKt2746() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/kt2746.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt2851.kt")
                public void testKt2851() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/kt2851.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt4009.kt")
                public void testKt4009() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/kt4009.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt4403.kt")
                public void testKt4403() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/kt4403.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt4415.kt")
                public void testKt4415() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/kt4415.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt6242.kt")
                public void testKt6242() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/kt6242.kt");
                    doTest(fileName);
                }

                @TestMetadata("smartCastOnReceiver.kt")
                public void testSmartCastOnReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/inference/smartCastOnReceiver.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/loops")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Loops extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInLoops() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/loops"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("assignElvisIfBreakInsideWhileTrue.kt")
                public void testAssignElvisIfBreakInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/assignElvisIfBreakInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("assignWhenInsideWhileTrue.kt")
                public void testAssignWhenInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/assignWhenInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("callBreakBetweenInsideDoWhile.kt")
                public void testCallBreakBetweenInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakBetweenInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("callBreakFirstInsideDoWhile.kt")
                public void testCallBreakFirstInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakFirstInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("callBreakInsideDoWhile.kt")
                public void testCallBreakInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("callBreakSecondInsideDoWhile.kt")
                public void testCallBreakSecondInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakSecondInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("callBreakThirdInsideDoWhile.kt")
                public void testCallBreakThirdInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/callBreakThirdInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhile.kt")
                public void testDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileBreak.kt")
                public void testDoWhileBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileContinue.kt")
                public void testDoWhileContinue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileContinue.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileEarlyBreak.kt")
                public void testDoWhileEarlyBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileEarlyBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileEarlyContinue.kt")
                public void testDoWhileEarlyContinue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileEarlyContinue.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileInCondition.kt")
                public void testDoWhileInCondition() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileInCondition.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileInConditionWithBreak.kt")
                public void testDoWhileInConditionWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileInConditionWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileLiteral.kt")
                public void testDoWhileLiteral() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileLiteral.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileNotNullBreak.kt")
                public void testDoWhileNotNullBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNotNullBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileNull.kt")
                public void testDoWhileNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileNullWithBreak.kt")
                public void testDoWhileNullWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNullWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("elvisBreakInsideDoWhile.kt")
                public void testElvisBreakInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/elvisBreakInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("elvisIfBreakInsideWhileTrue.kt")
                public void testElvisIfBreakInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/elvisIfBreakInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("elvisInsideDoWhile.kt")
                public void testElvisInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/elvisInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("elvisLeftBreakInsideWhileTrue.kt")
                public void testElvisLeftBreakInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/elvisLeftBreakInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifBlockInsideDoWhile.kt")
                public void testIfBlockInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/ifBlockInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifBreakAssignInsideDoWhile.kt")
                public void testIfBreakAssignInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakAssignInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifBreakAssignInsideWhileTrue.kt")
                public void testIfBreakAssignInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakAssignInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifBreakExprInsideWhileTrue.kt")
                public void testIfBreakExprInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakExprInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifElseBlockInsideDoWhile.kt")
                public void testIfElseBlockInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/ifElseBlockInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifInsideDoWhile.kt")
                public void testIfInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/ifInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("leftElvisBreakInsideWhileTrue.kt")
                public void testLeftElvisBreakInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/leftElvisBreakInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedDoWhile.kt")
                public void testNestedDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/nestedDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedDoWhileWithLongContinue.kt")
                public void testNestedDoWhileWithLongContinue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/nestedDoWhileWithLongContinue.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedLoops.kt")
                public void testNestedLoops() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoops.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedLoopsShort.kt")
                public void testNestedLoopsShort() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsShort.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedLoopsWithBreak.kt")
                public void testNestedLoopsWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedLoopsWithLongBreak.kt")
                public void testNestedLoopsWithLongBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithLongBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedLoopsWithLongContinue.kt")
                public void testNestedLoopsWithLongContinue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithLongContinue.kt");
                    doTest(fileName);
                }

                @TestMetadata("plusAssignWhenInsideDoWhile.kt")
                public void testPlusAssignWhenInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/plusAssignWhenInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("safeCallBreakInsideDoWhile.kt")
                public void testSafeCallBreakInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/safeCallBreakInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("safeCallInsideDoWhile.kt")
                public void testSafeCallInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/safeCallInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("useInsideDoWhile.kt")
                public void testUseInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/useInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("whenInsideWhileTrue.kt")
                public void testWhenInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whenInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("whenReturnInsideWhileTrue.kt")
                public void testWhenReturnInsideWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whenReturnInsideWhileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileInCondition.kt")
                public void testWhileInCondition() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileInCondition.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileInConditionWithBreak.kt")
                public void testWhileInConditionWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileInConditionWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileNull.kt")
                public void testWhileNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileNullWithBreak.kt")
                public void testWhileNullWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileNullWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileSimple.kt")
                public void testWhileSimple() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileSimple.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrivial.kt")
                public void testWhileTrivial() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrivial.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrue.kt")
                public void testWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrueBreakReturn.kt")
                public void testWhileTrueBreakReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueBreakReturn.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrueEarlyBreak.kt")
                public void testWhileTrueEarlyBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueEarlyBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrueReturn.kt")
                public void testWhileTrueReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueReturn.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ObjectLiterals extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInObjectLiterals() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/objectLiterals"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/assignment.kt");
                    doTest(fileName);
                }

                @TestMetadata("base.kt")
                public void testBase() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/base.kt");
                    doTest(fileName);
                }

                @TestMetadata("captured.kt")
                public void testCaptured() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/captured.kt");
                    doTest(fileName);
                }

                @TestMetadata("exclexcl.kt")
                public void testExclexcl() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexcl.kt");
                    doTest(fileName);
                }

                @TestMetadata("exclexclArgument.kt")
                public void testExclexclArgument() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexclArgument.kt");
                    doTest(fileName);
                }

                @TestMetadata("exclexclTwoArgument.kt")
                public void testExclexclTwoArgument() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexclTwoArgument.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt7110.kt")
                public void testKt7110() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/kt7110.kt");
                    doTest(fileName);
                }

                @TestMetadata("receiver.kt")
                public void testReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/receiver.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PublicVals extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInPublicVals() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/publicVals"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("customGetter.kt")
                public void testCustomGetter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/customGetter.kt");
                    doTest(fileName);
                }

                @TestMetadata("delegate.kt")
                public void testDelegate() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/delegate.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt4409.kt")
                public void testKt4409() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/kt4409.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt5502.kt")
                public void testKt5502() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/kt5502.kt");
                    doTest(fileName);
                }

                @TestMetadata("open.kt")
                public void testOpen() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/open.kt");
                    doTest(fileName);
                }

                @TestMetadata("otherModule.kt")
                public void testOtherModule() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModule.kt");
                    doTest(fileName);
                }

                @TestMetadata("protected.kt")
                public void testProtected() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/protected.kt");
                    doTest(fileName);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/simple.kt");
                    doTest(fileName);
                }

                @TestMetadata("var.kt")
                public void testVar() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals/var.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Safecalls extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSafecalls() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/safecalls"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("anotherVal.kt")
                public void testAnotherVal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/anotherVal.kt");
                    doTest(fileName);
                }

                @TestMetadata("argument.kt")
                public void testArgument() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/argument.kt");
                    doTest(fileName);
                }

                @TestMetadata("chainAndUse.kt")
                public void testChainAndUse() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainAndUse.kt");
                    doTest(fileName);
                }

                @TestMetadata("chainInChain.kt")
                public void testChainInChain() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainInChain.kt");
                    doTest(fileName);
                }

                @TestMetadata("chainMixedUnsafe.kt")
                public void testChainMixedUnsafe() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainMixedUnsafe.kt");
                    doTest(fileName);
                }

                @TestMetadata("doubleCall.kt")
                public void testDoubleCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/doubleCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("extension.kt")
                public void testExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/extension.kt");
                    doTest(fileName);
                }

                @TestMetadata("falseArgument.kt")
                public void testFalseArgument() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseArgument.kt");
                    doTest(fileName);
                }

                @TestMetadata("falseChain.kt")
                public void testFalseChain() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseChain.kt");
                    doTest(fileName);
                }

                @TestMetadata("falseExtension.kt")
                public void testFalseExtension() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseExtension.kt");
                    doTest(fileName);
                }

                @TestMetadata("falseSecondArgument.kt")
                public void testFalseSecondArgument() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseSecondArgument.kt");
                    doTest(fileName);
                }

                @TestMetadata("innerReceiver.kt")
                public void testInnerReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/innerReceiver.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideCall.kt")
                public void testInsideCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/insideCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("longChain.kt")
                public void testLongChain() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/longChain.kt");
                    doTest(fileName);
                }

                @TestMetadata("property.kt")
                public void testProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/property.kt");
                    doTest(fileName);
                }

                @TestMetadata("receiver.kt")
                public void testReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiver.kt");
                    doTest(fileName);
                }

                @TestMetadata("receiverAndChain.kt")
                public void testReceiverAndChain() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiverAndChain.kt");
                    doTest(fileName);
                }

                @TestMetadata("receiverAndChainFalse.kt")
                public void testReceiverAndChainFalse() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiverAndChainFalse.kt");
                    doTest(fileName);
                }

                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/simple.kt");
                    doTest(fileName);
                }

                @TestMetadata("twoArgs.kt")
                public void testTwoArgs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls/twoArgs.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/variables")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Variables extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInVariables() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/variables"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/assignment.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileWithMiddleBreak.kt")
                public void testDoWhileWithMiddleBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/doWhileWithMiddleBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifElseBlockInsideDoWhile.kt")
                public void testIfElseBlockInsideDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/ifElseBlockInsideDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifElseBlockInsideDoWhileWithBreak.kt")
                public void testIfElseBlockInsideDoWhileWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/ifElseBlockInsideDoWhileWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifVarIs.kt")
                public void testIfVarIs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIs.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifVarIsAnd.kt")
                public void testIfVarIsAnd() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIsAnd.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifVarIsChanged.kt")
                public void testIfVarIsChanged() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIsChanged.kt");
                    doTest(fileName);
                }

                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/infix.kt");
                    doTest(fileName);
                }

                @TestMetadata("initialization.kt")
                public void testInitialization() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/initialization.kt");
                    doTest(fileName);
                }

                @TestMetadata("kt7599.kt")
                public void testKt7599() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/kt7599.kt");
                    doTest(fileName);
                }

                @TestMetadata("property.kt")
                public void testProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/property.kt");
                    doTest(fileName);
                }

                @TestMetadata("propertyNotNeeded.kt")
                public void testPropertyNotNeeded() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/propertyNotNeeded.kt");
                    doTest(fileName);
                }

                @TestMetadata("propertySubtype.kt")
                public void testPropertySubtype() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtype.kt");
                    doTest(fileName);
                }

                @TestMetadata("propertySubtypeInMember.kt")
                public void testPropertySubtypeInMember() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtypeInMember.kt");
                    doTest(fileName);
                }

                @TestMetadata("propertySubtypeInMemberCheck.kt")
                public void testPropertySubtypeInMemberCheck() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtypeInMemberCheck.kt");
                    doTest(fileName);
                }

                @TestMetadata("varAsUse.kt")
                public void testVarAsUse() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/varAsUse.kt");
                    doTest(fileName);
                }

                @TestMetadata("varChangedInLoop.kt")
                public void testVarChangedInLoop() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/varChangedInLoop.kt");
                    doTest(fileName);
                }

                @TestMetadata("varNotChangedInLoop.kt")
                public void testVarNotChangedInLoop() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/varNotChangedInLoop.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrue.kt")
                public void testWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/whileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileWithBreak.kt")
                public void testWhileWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/variables/whileWithBreak.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Varnotnull extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInVarnotnull() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/smartCasts/varnotnull"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("assignNestedWhile.kt")
                public void testAssignNestedWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/assignNestedWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/assignment.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileWithBreak.kt")
                public void testDoWhileWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/doWhileWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("doWhileWithMiddleBreak.kt")
                public void testDoWhileWithMiddleBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/doWhileWithMiddleBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("forEach.kt")
                public void testForEach() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEach.kt");
                    doTest(fileName);
                }

                @TestMetadata("forEachWithBreak.kt")
                public void testForEachWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEachWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("forEachWithContinue.kt")
                public void testForEachWithContinue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEachWithContinue.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifVarNotNull.kt")
                public void testIfVarNotNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNotNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifVarNotNullAnd.kt")
                public void testIfVarNotNullAnd() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNotNullAnd.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifVarNullElse.kt")
                public void testIfVarNullElse() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNullElse.kt");
                    doTest(fileName);
                }

                @TestMetadata("ifVarNullReturn.kt")
                public void testIfVarNullReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNullReturn.kt");
                    doTest(fileName);
                }

                @TestMetadata("inference.kt")
                public void testInference() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/inference.kt");
                    doTest(fileName);
                }

                @TestMetadata("infiniteWhileWithBreak.kt")
                public void testInfiniteWhileWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/infiniteWhileWithBreak.kt");
                    doTest(fileName);
                }

                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/infix.kt");
                    doTest(fileName);
                }

                @TestMetadata("initialization.kt")
                public void testInitialization() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/initialization.kt");
                    doTest(fileName);
                }

                @TestMetadata("iterations.kt")
                public void testIterations() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/iterations.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedDoWhile.kt")
                public void testNestedDoWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedDoWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedLoops.kt")
                public void testNestedLoops() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedLoops.kt");
                    doTest(fileName);
                }

                @TestMetadata("nestedWhile.kt")
                public void testNestedWhile() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedWhile.kt");
                    doTest(fileName);
                }

                @TestMetadata("postfixNotnullClassIncrement.kt")
                public void testPostfixNotnullClassIncrement() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNotnullClassIncrement.kt");
                    doTest(fileName);
                }

                @TestMetadata("postfixNullableClassIncrement.kt")
                public void testPostfixNullableClassIncrement() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNullableClassIncrement.kt");
                    doTest(fileName);
                }

                @TestMetadata("postfixNullableIncrement.kt")
                public void testPostfixNullableIncrement() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNullableIncrement.kt");
                    doTest(fileName);
                }

                @TestMetadata("prefixNotnullClassIncrement.kt")
                public void testPrefixNotnullClassIncrement() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNotnullClassIncrement.kt");
                    doTest(fileName);
                }

                @TestMetadata("prefixNullableClassIncrement.kt")
                public void testPrefixNullableClassIncrement() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNullableClassIncrement.kt");
                    doTest(fileName);
                }

                @TestMetadata("prefixNullableIncrement.kt")
                public void testPrefixNullableIncrement() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNullableIncrement.kt");
                    doTest(fileName);
                }

                @TestMetadata("unnecessary.kt")
                public void testUnnecessary() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessary.kt");
                    doTest(fileName);
                }

                @TestMetadata("unnecessaryWithBranch.kt")
                public void testUnnecessaryWithBranch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessaryWithBranch.kt");
                    doTest(fileName);
                }

                @TestMetadata("unnecessaryWithMap.kt")
                public void testUnnecessaryWithMap() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessaryWithMap.kt");
                    doTest(fileName);
                }

                @TestMetadata("varCapturedInClosure.kt")
                public void testVarCapturedInClosure() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInClosure.kt");
                    doTest(fileName);
                }

                @TestMetadata("varCapturedInInlineClosure.kt")
                public void testVarCapturedInInlineClosure() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInInlineClosure.kt");
                    doTest(fileName);
                }

                @TestMetadata("varCapturedInSafeClosure.kt")
                public void testVarCapturedInSafeClosure() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInSafeClosure.kt");
                    doTest(fileName);
                }

                @TestMetadata("varChangedInLoop.kt")
                public void testVarChangedInLoop() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varChangedInLoop.kt");
                    doTest(fileName);
                }

                @TestMetadata("varCheck.kt")
                public void testVarCheck() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCheck.kt");
                    doTest(fileName);
                }

                @TestMetadata("varIntNull.kt")
                public void testVarIntNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varIntNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("varNotChangedInLoop.kt")
                public void testVarNotChangedInLoop() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varNotChangedInLoop.kt");
                    doTest(fileName);
                }

                @TestMetadata("varNull.kt")
                public void testVarNull() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varNull.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrue.kt")
                public void testWhileTrue() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrue.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrueWithBracketSet.kt")
                public void testWhileTrueWithBracketSet() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrueWithBracketSet.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileTrueWithBrackets.kt")
                public void testWhileTrueWithBrackets() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrueWithBrackets.kt");
                    doTest(fileName);
                }

                @TestMetadata("whileWithBreak.kt")
                public void testWhileWithBreak() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileWithBreak.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/substitutions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Substitutions extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSubstitutions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/substitutions"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("kt1558-short.kt")
            public void testKt1558_short() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/substitutions/kt1558-short.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4887.kt")
            public void testKt4887() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/substitutions/kt4887.kt");
                doTest(fileName);
            }

            @TestMetadata("starProjections.kt")
            public void testStarProjections() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/substitutions/starProjections.kt");
                doTest(fileName);
            }

            @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt")
            public void testUpperBoundsSubstitutionForOverloadResolutionWithAmbiguity() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt");
                doTest(fileName);
            }

            @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt")
            public void testUpperBoundsSubstitutionForOverloadResolutionWithErrorTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/subtyping")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Subtyping extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSubtyping() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/subtyping"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("findClosestCorrespondingSupertype.kt")
            public void testFindClosestCorrespondingSupertype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/findClosestCorrespondingSupertype.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2069.kt")
            public void testKt2069() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/kt2069.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2744.kt")
            public void testKt2744() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/kt2744.kt");
                doTest(fileName);
            }

            @TestMetadata("kt304.kt")
            public void testKt304() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/kt304.kt");
                doTest(fileName);
            }

            @TestMetadata("kt3159.kt")
            public void testKt3159() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/kt3159.kt");
                doTest(fileName);
            }

            @TestMetadata("kt-1457.kt")
            public void testKt_1457() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/kt-1457.kt");
                doTest(fileName);
            }

            @TestMetadata("localAnonymousObjects.kt")
            public void testLocalAnonymousObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/localAnonymousObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("localClasses.kt")
            public void testLocalClasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/localClasses.kt");
                doTest(fileName);
            }

            @TestMetadata("memberAnonymousObjects.kt")
            public void testMemberAnonymousObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/memberAnonymousObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedIntoLocalClasses.kt")
            public void testNestedIntoLocalClasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/nestedIntoLocalClasses.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedLocalClasses.kt")
            public void testNestedLocalClasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/nestedLocalClasses.kt");
                doTest(fileName);
            }

            @TestMetadata("topLevelAnonymousObjects.kt")
            public void testTopLevelAnonymousObjects() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/topLevelAnonymousObjects.kt");
                doTest(fileName);
            }

            @TestMetadata("unresolvedSupertype.kt")
            public void testUnresolvedSupertype() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/subtyping/unresolvedSupertype.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/suppress")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Suppress extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSuppress() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AllWarnings extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInAllWarnings() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/allWarnings"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("suppressWarningsOnClass.kt")
                public void testSuppressWarningsOnClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("suppressWarningsOnClassObject.kt")
                public void testSuppressWarningsOnClassObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClassObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("suppressWarningsOnExpression.kt")
                public void testSuppressWarningsOnExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("suppressWarningsOnFunction.kt")
                public void testSuppressWarningsOnFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("suppressWarningsOnObject.kt")
                public void testSuppressWarningsOnObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("suppressWarningsOnParameter.kt")
                public void testSuppressWarningsOnParameter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnParameter.kt");
                    doTest(fileName);
                }

                @TestMetadata("suppressWarningsOnProperty.kt")
                public void testSuppressWarningsOnProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("suppressWarningsOnPropertyAccessor.kt")
                public void testSuppressWarningsOnPropertyAccessor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnPropertyAccessor.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ManyWarnings extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInManyWarnings() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/manyWarnings"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("mixed.kt")
                public void testMixed() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/mixed.kt");
                    doTest(fileName);
                }

                @TestMetadata("onClass.kt")
                public void testOnClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("onClassObject.kt")
                public void testOnClassObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClassObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("onExpression.kt")
                public void testOnExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/onExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("onFunction.kt")
                public void testOnFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/onFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("onObject.kt")
                public void testOnObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/onObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("onParameter.kt")
                public void testOnParameter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/onParameter.kt");
                    doTest(fileName);
                }

                @TestMetadata("onProperty.kt")
                public void testOnProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/onProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("onPropertyAccessor.kt")
                public void testOnPropertyAccessor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings/onPropertyAccessor.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class OneWarning extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInOneWarning() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/suppress/oneWarning"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("onClass.kt")
                public void testOnClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("onClassObject.kt")
                public void testOnClassObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onClassObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("onExpression.kt")
                public void testOnExpression() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onExpression.kt");
                    doTest(fileName);
                }

                @TestMetadata("onFunction.kt")
                public void testOnFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("onLocalVariable.kt")
                public void testOnLocalVariable() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onLocalVariable.kt");
                    doTest(fileName);
                }

                @TestMetadata("onObject.kt")
                public void testOnObject() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onObject.kt");
                    doTest(fileName);
                }

                @TestMetadata("onParameter.kt")
                public void testOnParameter() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onParameter.kt");
                    doTest(fileName);
                }

                @TestMetadata("onProperty.kt")
                public void testOnProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("onPropertyAccessor.kt")
                public void testOnPropertyAccessor() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning/onPropertyAccessor.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ThisAndSuper extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInThisAndSuper() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/thisAndSuper"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ambigousLabelOnThis.kt")
            public void testAmbigousLabelOnThis() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/ambigousLabelOnThis.kt");
                doTest(fileName);
            }

            @TestMetadata("notAccessibleSuperInTrait.kt")
            public void testNotAccessibleSuperInTrait() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/notAccessibleSuperInTrait.kt");
                doTest(fileName);
            }

            @TestMetadata("QualifiedThis.kt")
            public void testQualifiedThis() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/QualifiedThis.kt");
                doTest(fileName);
            }

            @TestMetadata("Super.kt")
            public void testSuper() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/Super.kt");
                doTest(fileName);
            }

            @TestMetadata("superInExtensionFunction.kt")
            public void testSuperInExtensionFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("superInExtensionFunctionCall.kt")
            public void testSuperInExtensionFunctionCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunctionCall.kt");
                doTest(fileName);
            }

            @TestMetadata("superInToplevelFunction.kt")
            public void testSuperInToplevelFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/superInToplevelFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("superIsNotAnExpression.kt")
            public void testSuperIsNotAnExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/superIsNotAnExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("thisInFunctionLiterals.kt")
            public void testThisInFunctionLiterals() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/thisInFunctionLiterals.kt");
                doTest(fileName);
            }

            @TestMetadata("thisInInnerClasses.kt")
            public void testThisInInnerClasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/thisInInnerClasses.kt");
                doTest(fileName);
            }

            @TestMetadata("thisInPropertyInitializer.kt")
            public void testThisInPropertyInitializer() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/thisInPropertyInitializer.kt");
                doTest(fileName);
            }

            @TestMetadata("thisInToplevelFunction.kt")
            public void testThisInToplevelFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/thisInToplevelFunction.kt");
                doTest(fileName);
            }

            @TestMetadata("traitSuperCall.kt")
            public void testTraitSuperCall() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/traitSuperCall.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class UnqualifiedSuper extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInUnqualifiedSuper() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("ambiguousSuperWithGenerics.kt")
                public void testAmbiguousSuperWithGenerics() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/ambiguousSuperWithGenerics.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuper.kt")
                public void testUnqualifiedSuper() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuper.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuperWithAbstractMembers.kt")
                public void testUnqualifiedSuperWithAbstractMembers() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithAbstractMembers.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuperWithCallableProperty.kt")
                public void testUnqualifiedSuperWithCallableProperty() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithCallableProperty.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
                public void testUnqualifiedSuperWithDeeperHierarchies() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithDeeperHierarchies.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuperWithGenerics.kt")
                public void testUnqualifiedSuperWithGenerics() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithGenerics.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuperWithInnerClass.kt")
                public void testUnqualifiedSuperWithInnerClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithInnerClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuperWithInterfaces.kt")
                public void testUnqualifiedSuperWithInterfaces() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithInterfaces.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuperWithLocalClass.kt")
                public void testUnqualifiedSuperWithLocalClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithLocalClass.kt");
                    doTest(fileName);
                }

                @TestMetadata("unqualifiedSuperWithUnresolvedBase.kt")
                public void testUnqualifiedSuperWithUnresolvedBase() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithUnresolvedBase.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/traitWithRequired")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class TraitWithRequired extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInTraitWithRequired() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/traitWithRequired"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("traitRequiresAny.kt")
            public void testTraitRequiresAny() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/traitWithRequired/traitRequiresAny.kt");
                doTest(fileName);
            }

            @TestMetadata("traitSupertypeList.kt")
            public void testTraitSupertypeList() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/traitWithRequired/traitSupertypeList.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/typedefs")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Typedefs extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInTypedefs() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/typedefs"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("TypedefsUnsupported.kt")
            public void testTypedefsUnsupported() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/typedefs/TypedefsUnsupported.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/unit")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Unit extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInUnit() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/unit"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("nullableUnit.kt")
            public void testNullableUnit() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/unit/nullableUnit.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/varargs")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Varargs extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInVarargs() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/varargs"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AmbiguousVararg.kt")
            public void testAmbiguousVararg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/AmbiguousVararg.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1781.kt")
            public void testKt1781() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/kt1781.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1835.kt")
            public void testKt1835() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/kt1835.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1838-param.kt")
            public void testKt1838_param() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/kt1838-param.kt");
                doTest(fileName);
            }

            @TestMetadata("kt1838-val.kt")
            public void testKt1838_val() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/kt1838-val.kt");
                doTest(fileName);
            }

            @TestMetadata("kt2163.kt")
            public void testKt2163() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/kt2163.kt");
                doTest(fileName);
            }

            @TestMetadata("kt422.kt")
            public void testKt422() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/kt422.kt");
                doTest(fileName);
            }

            @TestMetadata("MoreSpecificVarargsOfEqualLength.kt")
            public void testMoreSpecificVarargsOfEqualLength() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/MoreSpecificVarargsOfEqualLength.kt");
                doTest(fileName);
            }

            @TestMetadata("MostSepcificVarargsWithJava.kt")
            public void testMostSepcificVarargsWithJava() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/MostSepcificVarargsWithJava.kt");
                doTest(fileName);
            }

            @TestMetadata("NilaryVsVararg.kt")
            public void testNilaryVsVararg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/NilaryVsVararg.kt");
                doTest(fileName);
            }

            @TestMetadata("UnaryVsVararg.kt")
            public void testUnaryVsVararg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/UnaryVsVararg.kt");
                doTest(fileName);
            }

            @TestMetadata("varargIterator.kt")
            public void testVarargIterator() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/varargIterator.kt");
                doTest(fileName);
            }

            @TestMetadata("varargsAndFunctionLiterals.kt")
            public void testVarargsAndFunctionLiterals() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/varargsAndFunctionLiterals.kt");
                doTest(fileName);
            }

            @TestMetadata("varargsAndOut1.kt")
            public void testVarargsAndOut1() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/varargsAndOut1.kt");
                doTest(fileName);
            }

            @TestMetadata("varargsAndOut2.kt")
            public void testVarargsAndOut2() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/varargsAndOut2.kt");
                doTest(fileName);
            }

            @TestMetadata("varargsAndPair.kt")
            public void testVarargsAndPair() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/varargs/varargsAndPair.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/variance")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Variance extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInVariance() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/variance"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("Class.kt")
            public void testClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/Class.kt");
                doTest(fileName);
            }

            @TestMetadata("Function.kt")
            public void testFunction() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/Function.kt");
                doTest(fileName);
            }

            @TestMetadata("FunctionTypes.kt")
            public void testFunctionTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/FunctionTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("InPosition.kt")
            public void testInPosition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/InPosition.kt");
                doTest(fileName);
            }

            @TestMetadata("InvariantPosition.kt")
            public void testInvariantPosition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/InvariantPosition.kt");
                doTest(fileName);
            }

            @TestMetadata("NullableTypes.kt")
            public void testNullableTypes() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/NullableTypes.kt");
                doTest(fileName);
            }

            @TestMetadata("OutPosition.kt")
            public void testOutPosition() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/OutPosition.kt");
                doTest(fileName);
            }

            @TestMetadata("PrimaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/PrimaryConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("ValProperty.kt")
            public void testValProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/ValProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("VarProperty.kt")
            public void testVarProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/VarProperty.kt");
                doTest(fileName);
            }

            @TestMetadata("Visibility.kt")
            public void testVisibility() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/Visibility.kt");
                doTest(fileName);
            }

            @TestMetadata("compiler/testData/diagnostics/tests/variance/privateToThis")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class PrivateToThis extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInPrivateToThis() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/variance/privateToThis"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("FunctionCall.kt")
                public void testFunctionCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/privateToThis/FunctionCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("GetVal.kt")
                public void testGetVal() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/privateToThis/GetVal.kt");
                    doTest(fileName);
                }

                @TestMetadata("SetVar.kt")
                public void testSetVar() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/privateToThis/SetVar.kt");
                    doTest(fileName);
                }

                @TestMetadata("Trait.kt")
                public void testTrait() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/privateToThis/Trait.kt");
                    doTest(fileName);
                }

                @TestMetadata("ValReassigned.kt")
                public void testValReassigned() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/variance/privateToThis/ValReassigned.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/diagnostics/tests/when")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class When extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInWhen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/when"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("AnnotatedWhenStatement.kt")
            public void testAnnotatedWhenStatement() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/AnnotatedWhenStatement.kt");
                doTest(fileName);
            }

            @TestMetadata("BranchBypassVal.kt")
            public void testBranchBypassVal() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/BranchBypassVal.kt");
                doTest(fileName);
            }

            @TestMetadata("BranchBypassVar.kt")
            public void testBranchBypassVar() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/BranchBypassVar.kt");
                doTest(fileName);
            }

            @TestMetadata("BranchFalseBypass.kt")
            public void testBranchFalseBypass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/BranchFalseBypass.kt");
                doTest(fileName);
            }

            @TestMetadata("BranchFalseBypassElse.kt")
            public void testBranchFalseBypassElse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/BranchFalseBypassElse.kt");
                doTest(fileName);
            }

            @TestMetadata("ElseOnNullableEnum.kt")
            public void testElseOnNullableEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ElseOnNullableEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("ElseOnNullableEnumWithSmartCast.kt")
            public void testElseOnNullableEnumWithSmartCast() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ElseOnNullableEnumWithSmartCast.kt");
                doTest(fileName);
            }

            @TestMetadata("EmptyConditionWithExpression.kt")
            public void testEmptyConditionWithExpression() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/EmptyConditionWithExpression.kt");
                doTest(fileName);
            }

            @TestMetadata("EmptyConditionWithExpressionEnum.kt")
            public void testEmptyConditionWithExpressionEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/EmptyConditionWithExpressionEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveBoolean.kt")
            public void testExhaustiveBoolean() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveBoolean.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveBooleanBrackets.kt")
            public void testExhaustiveBooleanBrackets() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanBrackets.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveBooleanComplex.kt")
            public void testExhaustiveBooleanComplex() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanComplex.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveBooleanNullable.kt")
            public void testExhaustiveBooleanNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveEnumIs.kt")
            public void testExhaustiveEnumIs() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveEnumIs.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveEnumMixed.kt")
            public void testExhaustiveEnumMixed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveEnumMixed.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveInitialization.kt")
            public void testExhaustiveInitialization() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveInitialization.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveNullable.kt")
            public void testExhaustiveNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustivePlatformEnum.kt")
            public void testExhaustivePlatformEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustivePlatformEnumAnnotated.kt")
            public void testExhaustivePlatformEnumAnnotated() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumAnnotated.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustivePlatformEnumElse.kt")
            public void testExhaustivePlatformEnumElse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumElse.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustivePlatformEnumNull.kt")
            public void testExhaustivePlatformEnumNull() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumNull.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustivePlatformEnumStatement.kt")
            public void testExhaustivePlatformEnumStatement() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumStatement.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveReturn.kt")
            public void testExhaustiveReturn() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveReturn.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWithNullabilityCheck.kt")
            public void testExhaustiveWithNullabilityCheck() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheck.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWithNullabilityCheckBefore.kt")
            public void testExhaustiveWithNullabilityCheckBefore() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBefore.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWithNullabilityCheckBoolean.kt")
            public void testExhaustiveWithNullabilityCheckBoolean() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBoolean.kt");
                doTest(fileName);
            }

            @TestMetadata("ExhaustiveWithNullabilityCheckElse.kt")
            public void testExhaustiveWithNullabilityCheckElse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckElse.kt");
                doTest(fileName);
            }

            @TestMetadata("kt4434.kt")
            public void testKt4434() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/kt4434.kt");
                doTest(fileName);
            }

            @TestMetadata("NoElseExpectedUnit.kt")
            public void testNoElseExpectedUnit() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NoElseExpectedUnit.kt");
                doTest(fileName);
            }

            @TestMetadata("NoElseNoExpectedType.kt")
            public void testNoElseNoExpectedType() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NoElseNoExpectedType.kt");
                doTest(fileName);
            }

            @TestMetadata("NoElseReturnedCoercionToUnit.kt")
            public void testNoElseReturnedCoercionToUnit() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NoElseReturnedCoercionToUnit.kt");
                doTest(fileName);
            }

            @TestMetadata("NoElseReturnedFromLambdaExpectedInt.kt")
            public void testNoElseReturnedFromLambdaExpectedInt() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NoElseReturnedFromLambdaExpectedInt.kt");
                doTest(fileName);
            }

            @TestMetadata("NoElseReturnedNonUnit.kt")
            public void testNoElseReturnedNonUnit() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NoElseReturnedNonUnit.kt");
                doTest(fileName);
            }

            @TestMetadata("NoElseReturnedUnit.kt")
            public void testNoElseReturnedUnit() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NoElseReturnedUnit.kt");
                doTest(fileName);
            }

            @TestMetadata("NoElseWhenStatement.kt")
            public void testNoElseWhenStatement() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NoElseWhenStatement.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveBooleanNullable.kt")
            public void testNonExhaustiveBooleanNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NonExhaustiveBooleanNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustivePlatformEnum.kt")
            public void testNonExhaustivePlatformEnum() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NonExhaustivePlatformEnum.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWarning.kt")
            public void testNonExhaustiveWarning() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NonExhaustiveWarning.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWarningElse.kt")
            public void testNonExhaustiveWarningElse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningElse.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWarningFalse.kt")
            public void testNonExhaustiveWarningFalse() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningFalse.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWarningNull.kt")
            public void testNonExhaustiveWarningNull() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningNull.kt");
                doTest(fileName);
            }

            @TestMetadata("NonExhaustiveWithNullabilityCheck.kt")
            public void testNonExhaustiveWithNullabilityCheck() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/NonExhaustiveWithNullabilityCheck.kt");
                doTest(fileName);
            }

            @TestMetadata("PropertyNotInitialized.kt")
            public void testPropertyNotInitialized() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/PropertyNotInitialized.kt");
                doTest(fileName);
            }

            @TestMetadata("When.kt")
            public void testWhen() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/when/When.kt");
                doTest(fileName);
            }
        }
    }

    @TestMetadata("compiler/testData/diagnostics/tests/script")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Script extends AbstractJetDiagnosticsTest {
        @TestMetadata("AccessForwardDeclarationInScript.kts")
        public void testAccessForwardDeclarationInScript() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/script/AccessForwardDeclarationInScript.kts");
            doTest(fileName);
        }

        public void testAllFilesPresentInScript() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/tests/script"), Pattern.compile("^(.+)\\.kts$"), true);
        }

        @TestMetadata("ComplexScript.kts")
        public void testComplexScript() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/script/ComplexScript.kts");
            doTest(fileName);
        }

        @TestMetadata("imports.kts")
        public void testImports() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/script/imports.kts");
            doTest(fileName);
        }

        @TestMetadata("SimpleScript.kts")
        public void testSimpleScript() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/script/SimpleScript.kts");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Diagnostics extends AbstractJetDiagnosticsTest {
        public void testAllFilesPresentInDiagnostics() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("compiler/testData/codegen/box/diagnostics/functions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Functions extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInFunctions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/inference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Inference extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInference() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/inference"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("kt6176.kt")
                public void testKt6176() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/inference/kt6176.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Invoke extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInvoke() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class OnObjects extends AbstractJetDiagnosticsTest {
                    public void testAllFilesPresentInOnObjects() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects"), Pattern.compile("^(.+)\\.kt$"), true);
                    }

                    @TestMetadata("invokeOnClassObject1.kt")
                    public void testInvokeOnClassObject1() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject1.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnClassObject2.kt")
                    public void testInvokeOnClassObject2() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject2.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnClassObjectOfNestedClass1.kt")
                    public void testInvokeOnClassObjectOfNestedClass1() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass1.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnClassObjectOfNestedClass2.kt")
                    public void testInvokeOnClassObjectOfNestedClass2() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass2.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnEnum1.kt")
                    public void testInvokeOnEnum1() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum1.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnEnum2.kt")
                    public void testInvokeOnEnum2() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum2.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnImportedEnum1.kt")
                    public void testInvokeOnImportedEnum1() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum1.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnImportedEnum2.kt")
                    public void testInvokeOnImportedEnum2() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum2.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnObject1.kt")
                    public void testInvokeOnObject1() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject1.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("invokeOnObject2.kt")
                    public void testInvokeOnObject2() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject2.kt");
                        doTest(fileName);
                    }
                }
            }

            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TailRecursion extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInTailRecursion() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/tailRecursion"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("defaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs.kt");
                    doTest(fileName);
                }

                @TestMetadata("extensionTailCall.kt")
                public void testExtensionTailCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/extensionTailCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionWithNoTails.kt")
                public void testFunctionWithNoTails() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNoTails.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionWithNonTailRecursions.kt")
                public void testFunctionWithNonTailRecursions() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNonTailRecursions.kt");
                    doTest(fileName);
                }

                @TestMetadata("functionWithoutAnnotation.kt")
                public void testFunctionWithoutAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithoutAnnotation.kt");
                    doTest(fileName);
                }

                @TestMetadata("infixCall.kt")
                public void testInfixCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("infixRecursiveCall.kt")
                public void testInfixRecursiveCall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixRecursiveCall.kt");
                    doTest(fileName);
                }

                @TestMetadata("insideElvis.kt")
                public void testInsideElvis() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/insideElvis.kt");
                    doTest(fileName);
                }

                @TestMetadata("labeledThisReferences.kt")
                public void testLabeledThisReferences() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/labeledThisReferences.kt");
                    doTest(fileName);
                }

                @TestMetadata("loops.kt")
                public void testLoops() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/loops.kt");
                    doTest(fileName);
                }

                @TestMetadata("multilevelBlocks.kt")
                public void testMultilevelBlocks() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/multilevelBlocks.kt");
                    doTest(fileName);
                }

                @TestMetadata("realIteratorFoldl.kt")
                public void testRealIteratorFoldl() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realIteratorFoldl.kt");
                    doTest(fileName);
                }

                @TestMetadata("realStringEscape.kt")
                public void testRealStringEscape() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringEscape.kt");
                    doTest(fileName);
                }

                @TestMetadata("realStringRepeat.kt")
                public void testRealStringRepeat() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringRepeat.kt");
                    doTest(fileName);
                }

                @TestMetadata("recursiveCallInLambda.kt")
                public void testRecursiveCallInLambda() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLambda.kt");
                    doTest(fileName);
                }

                @TestMetadata("recursiveCallInLocalFunction.kt")
                public void testRecursiveCallInLocalFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLocalFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("recursiveInnerFunction.kt")
                public void testRecursiveInnerFunction() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveInnerFunction.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnIf.kt")
                public void testReturnIf() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnIf.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnInCatch.kt")
                public void testReturnInCatch() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInCatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnInFinally.kt")
                public void testReturnInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInFinally.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnInIfInFinally.kt")
                public void testReturnInIfInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInIfInFinally.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnInParentheses.kt")
                public void testReturnInParentheses() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInParentheses.kt");
                    doTest(fileName);
                }

                @TestMetadata("returnInTry.kt")
                public void testReturnInTry() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInTry.kt");
                    doTest(fileName);
                }

                @TestMetadata("simpleBlock.kt")
                public void testSimpleBlock() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleBlock.kt");
                    doTest(fileName);
                }

                @TestMetadata("simpleReturn.kt")
                public void testSimpleReturn() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturn.kt");
                    doTest(fileName);
                }

                @TestMetadata("simpleReturnWithElse.kt")
                public void testSimpleReturnWithElse() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturnWithElse.kt");
                    doTest(fileName);
                }

                @TestMetadata("sum.kt")
                public void testSum() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/sum.kt");
                    doTest(fileName);
                }

                @TestMetadata("tailCallInBlockInParentheses.kt")
                public void testTailCallInBlockInParentheses() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInBlockInParentheses.kt");
                    doTest(fileName);
                }

                @TestMetadata("tailCallInParentheses.kt")
                public void testTailCallInParentheses() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInParentheses.kt");
                    doTest(fileName);
                }

                @TestMetadata("tailRecursionInFinally.kt")
                public void testTailRecursionInFinally() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailRecursionInFinally.kt");
                    doTest(fileName);
                }

                @TestMetadata("thisReferences.kt")
                public void testThisReferences() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/thisReferences.kt");
                    doTest(fileName);
                }

                @TestMetadata("unitBlocks.kt")
                public void testUnitBlocks() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/unitBlocks.kt");
                    doTest(fileName);
                }

                @TestMetadata("whenWithCondition.kt")
                public void testWhenWithCondition() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithCondition.kt");
                    doTest(fileName);
                }

                @TestMetadata("whenWithInRange.kt")
                public void testWhenWithInRange() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithInRange.kt");
                    doTest(fileName);
                }

                @TestMetadata("whenWithIs.kt")
                public void testWhenWithIs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithIs.kt");
                    doTest(fileName);
                }

                @TestMetadata("whenWithoutCondition.kt")
                public void testWhenWithoutCondition() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithoutCondition.kt");
                    doTest(fileName);
                }
            }
        }

        @TestMetadata("compiler/testData/codegen/box/diagnostics/vararg")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Vararg extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInVararg() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/vararg"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("kt4172.kt")
            public void testKt4172() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/codegen/box/diagnostics/vararg/kt4172.kt");
                doTest(fileName);
            }
        }
    }
}
