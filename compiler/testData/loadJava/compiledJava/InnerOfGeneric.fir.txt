public open class InnerOfGeneric : R|kotlin/Any| {
    public constructor(): R|test/InnerOfGeneric|

    public abstract inner class A<K : R|kotlin/Any!|> : R|kotlin/Any| {
        public test/InnerOfGeneric.constructor<K : R|kotlin/Any!|>(): R|test/InnerOfGeneric.A<K>|

        public abstract inner class Inner<Outer(K) : R|kotlin/Any!|> : R|test/InnerOfGeneric.S<K!>| {
            public test/InnerOfGeneric.A<K>.constructor(): R|test/InnerOfGeneric.A.Inner<K>|

        }
    }
    public open inner class B<L : R|kotlin/Any!|> : R|test/InnerOfGeneric.A<L!>| {
        public test/InnerOfGeneric.constructor<L : R|kotlin/Any!|>(): R|test/InnerOfGeneric.B<L>|

        public open inner class SubInner<Outer(L) : R|kotlin/Any!|> : R|test/InnerOfGeneric.A.Inner<L!>| {
            @R|java/lang/Override|() public open operator fun iterator(): R|ft<kotlin/collections/MutableIterator<L!>, kotlin/collections/Iterator<L!>?>|

            public test/InnerOfGeneric.B<L>.constructor(): R|test/InnerOfGeneric.B.SubInner<L>|

        }
    }
    public open inner class S<E : R|kotlin/Any!|> : R|kotlin/Any| {
        public open operator fun iterator(): R|ft<kotlin/collections/MutableIterator<E!>, kotlin/collections/Iterator<E!>?>|

        public test/InnerOfGeneric.constructor<E : R|kotlin/Any!|>(): R|test/InnerOfGeneric.S<E>|

    }
}
