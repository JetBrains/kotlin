FILE fqName:<root> fileName:/kt68806.kt
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        CALL 'public final fun parse (a: kotlin.Int): kotlin.collections.List<kotlin.Int> declared in <root>' type=kotlin.collections.List<kotlin.Int> origin=null
          a: CONST Int type=kotlin.Int value=1
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
  FUN name:parse visibility:public modality:FINAL <> (a:kotlin.Int) returnType:kotlin.collections.List<kotlin.Int>
    VALUE_PARAMETER name:a index:0 type:kotlin.Int
    BLOCK_BODY
      VAR name:x type:kotlin.Any [val]
        CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any' type=kotlin.Any origin=null
      RETURN type=kotlin.Nothing from='public final fun parse (a: kotlin.Int): kotlin.collections.List<kotlin.Int> declared in <root>'
        CALL 'public final fun toList <T> (): kotlin.collections.List<T of kotlin.sequences.toList> declared in kotlin.sequences' type=kotlin.collections.List<kotlin.Int> origin=null
          <T>: kotlin.Int
          $receiver: CALL 'public final fun sequence <T> (block: @[ExtensionFunctionType] kotlin.coroutines.SuspendFunction1<kotlin.sequences.SequenceScope<T of kotlin.sequences.sequence>, kotlin.Unit>): kotlin.sequences.Sequence<T of kotlin.sequences.sequence> declared in kotlin.sequences' type=kotlin.sequences.Sequence<kotlin.Int> origin=null
            <T>: kotlin.Int
            block: FUN_EXPR type=@[ExtensionFunctionType] kotlin.coroutines.SuspendFunction1<kotlin.sequences.SequenceScope<kotlin.Int>, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($receiver:kotlin.sequences.SequenceScope<kotlin.Int>) returnType:kotlin.Unit [suspend]
                $receiver: VALUE_PARAMETER name:$this$sequence type:kotlin.sequences.SequenceScope<kotlin.Int>
                BLOCK_BODY
                  TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                    BLOCK type=kotlin.Any origin=WHEN
                      VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.Int [val]
                        GET_VAR 'a: kotlin.Int declared in <root>.parse' type=kotlin.Int origin=null
                      WHEN type=kotlin.Any origin=WHEN
                        BRANCH
                          if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            arg0: GET_VAR 'val tmp_0: kotlin.Int declared in <root>.parse.<anonymous>' type=kotlin.Int origin=null
                            arg1: CONST Int type=kotlin.Int value=0
                          then: BLOCK type=kotlin.Unit origin=null
                            WHEN type=kotlin.Unit origin=IF
                              BRANCH
                                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                                  arg0: GET_VAR 'a: kotlin.Int declared in <root>.parse' type=kotlin.Int origin=null
                                  arg1: CONST Int type=kotlin.Int value=0
                                then: TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                                  CALL 'public open fun hashCode (): kotlin.Int declared in kotlin.Any' type=kotlin.Int origin=null
                                    $this: GET_VAR 'val x: kotlin.Any declared in <root>.parse' type=kotlin.Any origin=null
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: BLOCK type=kotlin.Any origin=WHEN
                            VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:kotlin.Int [val]
                              GET_VAR 'a: kotlin.Int declared in <root>.parse' type=kotlin.Int origin=null
                            WHEN type=kotlin.Any origin=WHEN
                              BRANCH
                                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                                  arg0: GET_VAR 'val tmp_1: kotlin.Int declared in <root>.parse.<anonymous>' type=kotlin.Int origin=null
                                  arg1: CONST Int type=kotlin.Int value=0
                                then: BLOCK type=kotlin.Unit origin=null
                                  CALL 'public abstract fun yield (value: T of kotlin.sequences.SequenceScope): kotlin.Unit declared in kotlin.sequences.SequenceScope' type=kotlin.Unit origin=null
                                    $this: GET_VAR '$this$sequence: kotlin.sequences.SequenceScope<kotlin.Int> declared in <root>.parse.<anonymous>' type=kotlin.sequences.SequenceScope<kotlin.Int> origin=null
                                    value: CONST Int type=kotlin.Int value=1
                              BRANCH
                                if: CONST Boolean type=kotlin.Boolean value=true
                                then: BLOCK type=kotlin.Int origin=null
                                  CALL 'public open fun hashCode (): kotlin.Int declared in kotlin.Any' type=kotlin.Int origin=null
                                    $this: GET_VAR 'val x: kotlin.Any declared in <root>.parse' type=kotlin.Any origin=null
