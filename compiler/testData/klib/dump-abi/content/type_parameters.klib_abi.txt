// Rendering settings:
// - Signature version: 2
// - Show manifest properties: false
// - Show declarations: true

// Library unique name: <type_parameters_library>
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> type_parameters.test/Interface // type_parameters.test/Interface|null[0]
final class <#A: kotlin.text/Appendable> type_parameters.test/Outer { // type_parameters.test/Outer|null[0]
    final var property // type_parameters.test/Outer.property|@1:0{}property[0]
        final fun (#A).<get-property>(): #A // type_parameters.test/Outer.property.<get-property>|<get-property>@1:0(){}[0]
        final fun (#A).<set-property>(#A) // type_parameters.test/Outer.property.<set-property>|<set-property>@1:0(1:0){}[0]
    final var property // type_parameters.test/Outer.property|@0:0{0§<kotlin.collections.List<*>>}property[0]
        final fun <#A2: kotlin.collections/List<*>> (#A2).<get-property>(): #A2 // type_parameters.test/Outer.property.<get-property>|<get-property>@0:0(){0§<kotlin.collections.List<*>>}[0]
        final fun <#A2: kotlin.collections/List<*>> (#A2).<set-property>(#A2) // type_parameters.test/Outer.property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.collections.List<*>>}[0]
    final var property // type_parameters.test/Outer.property|@0:0?{0§<kotlin.Number>}property[0]
        final fun <#A2: kotlin/Number> (#A2?).<get-property>(): #A2 // type_parameters.test/Outer.property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> (#A2?).<set-property>(#A2) // type_parameters.test/Outer.property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
    constructor <init>(#A) // type_parameters.test/Outer.<init>|<init>(1:0){}[0]
    final fun <#A1: kotlin/Number> one(#A1) // type_parameters.test/Outer.one|one(0:0){0§<kotlin.Number>}[0]
    final fun one(#A) // type_parameters.test/Outer.one|one(1:0){}[0]
    final fun <#A1: kotlin/Number> two(#A, #A1) // type_parameters.test/Outer.two|two(1:0;0:0){0§<kotlin.Number>}[0]
    final fun <#A1: kotlin/Number> two(#A1, #A) // type_parameters.test/Outer.two|two(0:0;1:0){0§<kotlin.Number>}[0]
    final inner class <#A1: kotlin/CharSequence> Inner { // type_parameters.test/Outer.Inner|null[0]
        final var property // type_parameters.test/Outer.Inner.property|@2:0{}property[0]
            final fun (#A).<get-property>(): #A // type_parameters.test/Outer.Inner.property.<get-property>|<get-property>@2:0(){}[0]
            final fun (#A).<set-property>(#A) // type_parameters.test/Outer.Inner.property.<set-property>|<set-property>@2:0(2:0){}[0]
        final var property // type_parameters.test/Outer.Inner.property|@1:0{}property[0]
            final fun (#A1).<get-property>(): #A1 // type_parameters.test/Outer.Inner.property.<get-property>|<get-property>@1:0(){}[0]
            final fun (#A1).<set-property>(#A1) // type_parameters.test/Outer.Inner.property.<set-property>|<set-property>@1:0(1:0){}[0]
        final var property // type_parameters.test/Outer.Inner.property|@0:0{0§<kotlin.collections.List<*>>}property[0]
            final fun <#A3: kotlin.collections/List<*>> (#A3).<get-property>(): #A3 // type_parameters.test/Outer.Inner.property.<get-property>|<get-property>@0:0(){0§<kotlin.collections.List<*>>}[0]
            final fun <#A3: kotlin.collections/List<*>> (#A3).<set-property>(#A3) // type_parameters.test/Outer.Inner.property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.collections.List<*>>}[0]
        final var property // type_parameters.test/Outer.Inner.property|@0:0?{0§<kotlin.Number>}property[0]
            final fun <#A3: kotlin/Number> (#A3?).<get-property>(): #A3 // type_parameters.test/Outer.Inner.property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> (#A3?).<set-property>(#A3) // type_parameters.test/Outer.Inner.property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
        constructor <init>(#A, #A1) // type_parameters.test/Outer.Inner.<init>|<init>(2:0;1:0){}[0]
        final fun <#A2: kotlin/Number> one(#A2) // type_parameters.test/Outer.Inner.one|one(0:0){0§<kotlin.Number>}[0]
        final fun one(#A) // type_parameters.test/Outer.Inner.one|one(2:0){}[0]
        final fun one(#A1) // type_parameters.test/Outer.Inner.one|one(1:0){}[0]
        final fun <#A2: kotlin/Number> three(#A, #A1, #A2) // type_parameters.test/Outer.Inner.three|three(2:0;1:0;0:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> three(#A, #A2, #A1) // type_parameters.test/Outer.Inner.three|three(2:0;0:0;1:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> three(#A1, #A, #A2) // type_parameters.test/Outer.Inner.three|three(1:0;2:0;0:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> three(#A1, #A2, #A) // type_parameters.test/Outer.Inner.three|three(1:0;0:0;2:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> three(#A2, #A, #A1) // type_parameters.test/Outer.Inner.three|three(0:0;2:0;1:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> three(#A2, #A1, #A) // type_parameters.test/Outer.Inner.three|three(0:0;1:0;2:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> two(#A, #A1) // type_parameters.test/Outer.Inner.two|two(2:0;1:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> two(#A, #A2) // type_parameters.test/Outer.Inner.two|two(2:0;0:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> two(#A1, #A) // type_parameters.test/Outer.Inner.two|two(1:0;2:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> two(#A1, #A2) // type_parameters.test/Outer.Inner.two|two(1:0;0:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> two(#A2, #A) // type_parameters.test/Outer.Inner.two|two(0:0;2:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> two(#A2, #A1) // type_parameters.test/Outer.Inner.two|two(0:0;1:0){0§<kotlin.Number>}[0]
        final fun two(#A, #A1) // type_parameters.test/Outer.Inner.two|two(2:0;1:0){}[0]
        final fun two(#A1, #A) // type_parameters.test/Outer.Inner.two|two(1:0;2:0){}[0]
        final inner class <#A2: kotlin.text/StringBuilder> Inner2 { // type_parameters.test/Outer.Inner.Inner2|null[0]
            final var property // type_parameters.test/Outer.Inner.Inner2.property|@1:0{}property[0]
                final fun (#A2).<get-property>(): #A2 // type_parameters.test/Outer.Inner.Inner2.property.<get-property>|<get-property>@1:0(){}[0]
                final fun (#A2).<set-property>(#A2) // type_parameters.test/Outer.Inner.Inner2.property.<set-property>|<set-property>@1:0(1:0){}[0]
            constructor <init>(#A, #A1, #A2) // type_parameters.test/Outer.Inner.Inner2.<init>|<init>(3:0;2:0;1:0){}[0]
            final fun <#A3: kotlin/Number> four(#A, #A1, #A2, #A3) // type_parameters.test/Outer.Inner.Inner2.four|four(3:0;2:0;1:0;0:0){0§<kotlin.Number>}[0]
            final inner class TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#A>>, kotlin.collections/Map<#A1, #A2>, kotlin/Triple<#A, #A1, #A2>> { // type_parameters.test/Outer.Inner.Inner2.TypeParameterInSuperTypes|null[0]
                constructor <init>() // type_parameters.test/Outer.Inner.Inner2.TypeParameterInSuperTypes.<init>|<init>(){}[0]
            }
        }
        final inner class <#A2: kotlin/Any?> TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#A>>, kotlin.collections/Map<#A1, #A2>, kotlin/Triple<#A, #A1, #A2>> { // type_parameters.test/Outer.Inner.TypeParameterInSuperTypes|null[0]
            constructor <init>() // type_parameters.test/Outer.Inner.TypeParameterInSuperTypes.<init>|<init>(){}[0]
        }
    }
    final class <#A1: kotlin/CharSequence> Nested { // type_parameters.test/Outer.Nested|null[0]
        final var property // type_parameters.test/Outer.Nested.property|@1:0{}property[0]
            final fun (#A1).<get-property>(): #A1 // type_parameters.test/Outer.Nested.property.<get-property>|<get-property>@1:0(){}[0]
            final fun (#A1).<set-property>(#A1) // type_parameters.test/Outer.Nested.property.<set-property>|<set-property>@1:0(1:0){}[0]
        final var property // type_parameters.test/Outer.Nested.property|@0:0{0§<kotlin.collections.List<*>>}property[0]
            final fun <#A3: kotlin.collections/List<*>> (#A3).<get-property>(): #A3 // type_parameters.test/Outer.Nested.property.<get-property>|<get-property>@0:0(){0§<kotlin.collections.List<*>>}[0]
            final fun <#A3: kotlin.collections/List<*>> (#A3).<set-property>(#A3) // type_parameters.test/Outer.Nested.property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.collections.List<*>>}[0]
        final var property // type_parameters.test/Outer.Nested.property|@0:0?{0§<kotlin.Number>}property[0]
            final fun <#A3: kotlin/Number> (#A3?).<get-property>(): #A3 // type_parameters.test/Outer.Nested.property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> (#A3?).<set-property>(#A3) // type_parameters.test/Outer.Nested.property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
        constructor <init>(#A1) // type_parameters.test/Outer.Nested.<init>|<init>(1:0){}[0]
        final fun <#A2: kotlin/Number> one(#A2) // type_parameters.test/Outer.Nested.one|one(0:0){0§<kotlin.Number>}[0]
        final fun one(#A1) // type_parameters.test/Outer.Nested.one|one(1:0){}[0]
        final fun <#A2: kotlin/Number> two(#A1, #A2) // type_parameters.test/Outer.Nested.two|two(1:0;0:0){0§<kotlin.Number>}[0]
        final fun <#A2: kotlin/Number> two(#A2, #A1) // type_parameters.test/Outer.Nested.two|two(0:0;1:0){0§<kotlin.Number>}[0]
        final inner class <#A2: kotlin.text/StringBuilder> Inner { // type_parameters.test/Outer.Nested.Inner|null[0]
            final var property // type_parameters.test/Outer.Nested.Inner.property|@2:0{}property[0]
                final fun (#A1).<get-property>(): #A1 // type_parameters.test/Outer.Nested.Inner.property.<get-property>|<get-property>@2:0(){}[0]
                final fun (#A1).<set-property>(#A1) // type_parameters.test/Outer.Nested.Inner.property.<set-property>|<set-property>@2:0(2:0){}[0]
            final var property // type_parameters.test/Outer.Nested.Inner.property|@1:0{}property[0]
                final fun (#A2).<get-property>(): #A2 // type_parameters.test/Outer.Nested.Inner.property.<get-property>|<get-property>@1:0(){}[0]
                final fun (#A2).<set-property>(#A2) // type_parameters.test/Outer.Nested.Inner.property.<set-property>|<set-property>@1:0(1:0){}[0]
            final var property // type_parameters.test/Outer.Nested.Inner.property|@0:0{0§<kotlin.collections.List<*>>}property[0]
                final fun <#A4: kotlin.collections/List<*>> (#A4).<get-property>(): #A4 // type_parameters.test/Outer.Nested.Inner.property.<get-property>|<get-property>@0:0(){0§<kotlin.collections.List<*>>}[0]
                final fun <#A4: kotlin.collections/List<*>> (#A4).<set-property>(#A4) // type_parameters.test/Outer.Nested.Inner.property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.collections.List<*>>}[0]
            final var property // type_parameters.test/Outer.Nested.Inner.property|@0:0?{0§<kotlin.Number>}property[0]
                final fun <#A4: kotlin/Number> (#A4?).<get-property>(): #A4 // type_parameters.test/Outer.Nested.Inner.property.<get-property>|<get-property>@0:0?(){0§<kotlin.Number>}[0]
                final fun <#A4: kotlin/Number> (#A4?).<set-property>(#A4) // type_parameters.test/Outer.Nested.Inner.property.<set-property>|<set-property>@0:0?(0:0){0§<kotlin.Number>}[0]
            constructor <init>(#A1, #A2) // type_parameters.test/Outer.Nested.Inner.<init>|<init>(2:0;1:0){}[0]
            final fun <#A3: kotlin/Number> one(#A3) // type_parameters.test/Outer.Nested.Inner.one|one(0:0){0§<kotlin.Number>}[0]
            final fun one(#A1) // type_parameters.test/Outer.Nested.Inner.one|one(2:0){}[0]
            final fun one(#A2) // type_parameters.test/Outer.Nested.Inner.one|one(1:0){}[0]
            final fun <#A3: kotlin/Number> three(#A1, #A2, #A3) // type_parameters.test/Outer.Nested.Inner.three|three(2:0;1:0;0:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> three(#A1, #A3, #A2) // type_parameters.test/Outer.Nested.Inner.three|three(2:0;0:0;1:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> three(#A2, #A1, #A3) // type_parameters.test/Outer.Nested.Inner.three|three(1:0;2:0;0:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> three(#A2, #A3, #A1) // type_parameters.test/Outer.Nested.Inner.three|three(1:0;0:0;2:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> three(#A3, #A1, #A2) // type_parameters.test/Outer.Nested.Inner.three|three(0:0;2:0;1:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> three(#A3, #A2, #A1) // type_parameters.test/Outer.Nested.Inner.three|three(0:0;1:0;2:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> two(#A1, #A2) // type_parameters.test/Outer.Nested.Inner.two|two(2:0;1:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> two(#A1, #A3) // type_parameters.test/Outer.Nested.Inner.two|two(2:0;0:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> two(#A2, #A1) // type_parameters.test/Outer.Nested.Inner.two|two(1:0;2:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> two(#A2, #A3) // type_parameters.test/Outer.Nested.Inner.two|two(1:0;0:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> two(#A3, #A1) // type_parameters.test/Outer.Nested.Inner.two|two(0:0;2:0){0§<kotlin.Number>}[0]
            final fun <#A3: kotlin/Number> two(#A3, #A2) // type_parameters.test/Outer.Nested.Inner.two|two(0:0;1:0){0§<kotlin.Number>}[0]
            final fun two(#A1, #A2) // type_parameters.test/Outer.Nested.Inner.two|two(2:0;1:0){}[0]
            final fun two(#A2, #A1) // type_parameters.test/Outer.Nested.Inner.two|two(1:0;2:0){}[0]
            final inner class <#A3: kotlin/Any?> TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#A1>>, kotlin.collections/Map<#A2, #A3>, kotlin/Triple<#A1, #A2, #A3>> { // type_parameters.test/Outer.Nested.Inner.TypeParameterInSuperTypes|null[0]
                constructor <init>() // type_parameters.test/Outer.Nested.Inner.TypeParameterInSuperTypes.<init>|<init>(){}[0]
            }
        }
        final inner class <#A2: kotlin/Any?, #B2: kotlin/Any?> TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#A1>>, kotlin.collections/Map<#B2, #A2>, kotlin/Triple<#A1, #B2, #A2>> { // type_parameters.test/Outer.Nested.TypeParameterInSuperTypes|null[0]
            constructor <init>() // type_parameters.test/Outer.Nested.TypeParameterInSuperTypes.<init>|<init>(){}[0]
        }
    }
    final inner class <#A1: kotlin/Any?, #B1: kotlin/Any?> TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#A>>, kotlin.collections/Map<#B1, #A1>, kotlin/Triple<#A, #B1, #A1>> { // type_parameters.test/Outer.TypeParameterInSuperTypes|null[0]
        constructor <init>() // type_parameters.test/Outer.TypeParameterInSuperTypes.<init>|<init>(){}[0]
    }
}
final class <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> type_parameters.test/TypeParameterInSuperTypes : type_parameters.test/Interface<kotlin.collections/List<kotlin.collections/List<#C>>, kotlin.collections/Map<#B, #A>, kotlin/Triple<#C, #B, #A>> { // type_parameters.test/TypeParameterInSuperTypes|null[0]
    constructor <init>() // type_parameters.test/TypeParameterInSuperTypes.<init>|<init>(){}[0]
}
final var type_parameters.test/property // type_parameters.test/property|@0:0?{0§<kotlin.collections.List<*>?>}property[0]
    final fun <#A1: kotlin.collections/List<*>?> (#A1?).<get-property>(): #A1? // type_parameters.test/property.<get-property>|<get-property>@0:0?(){0§<kotlin.collections.List<*>?>}[0]
    final fun <#A1: kotlin.collections/List<*>?> (#A1?).<set-property>(#A1?) // type_parameters.test/property.<set-property>|<set-property>@0:0?(0:0?){0§<kotlin.collections.List<*>?>}[0]
final var type_parameters.test/property // type_parameters.test/property|@0:0{0§<kotlin.text.Appendable?>}property[0]
    final fun <#A1: kotlin.text/Appendable?> (#A1).<get-property>(): #A1 // type_parameters.test/property.<get-property>|<get-property>@0:0(){0§<kotlin.text.Appendable?>}[0]
    final fun <#A1: kotlin.text/Appendable?> (#A1).<set-property>(#A1) // type_parameters.test/property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.text.Appendable?>}[0]
final var type_parameters.test/property // type_parameters.test/property|@0:0?{0§<kotlin.CharSequence>}property[0]
    final fun <#A1: kotlin/CharSequence> (#A1?).<get-property>(): #A1? // type_parameters.test/property.<get-property>|<get-property>@0:0?(){0§<kotlin.CharSequence>}[0]
    final fun <#A1: kotlin/CharSequence> (#A1?).<set-property>(#A1?) // type_parameters.test/property.<set-property>|<set-property>@0:0?(0:0?){0§<kotlin.CharSequence>}[0]
final var type_parameters.test/property // type_parameters.test/property|@0:0{0§<kotlin.Number>}property[0]
    final fun <#A1: kotlin/Number> (#A1).<get-property>(): #A1 // type_parameters.test/property.<get-property>|<get-property>@0:0(){0§<kotlin.Number>}[0]
    final fun <#A1: kotlin/Number> (#A1).<set-property>(#A1) // type_parameters.test/property.<set-property>|<set-property>@0:0(0:0){0§<kotlin.Number>}[0]
final inline fun <#A: reified kotlin/Any?, #B: kotlin/Any?> type_parameters.test/functionWithReifiedParameter(#A, #B) // type_parameters.test/functionWithReifiedParameter|functionWithReifiedParameter(0:0;0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/CharSequence, #B: #A, #C: #B> type_parameters.test/interDependentTypeParameters(#A, #B, #C) // type_parameters.test/interDependentTypeParameters|interDependentTypeParameters(0:0;0:1;0:2){0§<kotlin.CharSequence>;1§<0:0>;2§<0:1>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any, #C: kotlin/CharSequence?, #D: kotlin/CharSequence, #E: kotlin.text/Appendable?, #F: kotlin.text/Appendable, #G: kotlin/Number?, #H: kotlin/Number, #I: kotlin.collections/List<*>?, #J: kotlin.collections/List<*>, #K: kotlin/Any?, #L: kotlin/Any, #M: kotlin/CharSequence?, #N: kotlin/CharSequence, #O: kotlin.text/Appendable?, #P: kotlin.text/Appendable, #Q: kotlin/Number?, #R: kotlin/Number, #S: kotlin.collections/List<*>?, #T: kotlin.collections/List<*>, #U: kotlin/Any?, #V: kotlin/Any, #W: kotlin/CharSequence?, #X: kotlin/CharSequence, #Y: kotlin.text/Appendable?, #Z: kotlin.text/Appendable, #AA: kotlin/Number?, #AB: kotlin/Number, #AC: kotlin.collections/List<*>?, #AD: kotlin.collections/List<*>, #AE: kotlin/Any?, #AF: kotlin/Any, #AG: kotlin/CharSequence?, #AH: kotlin/CharSequence, #AI: kotlin.text/Appendable?, #AJ: kotlin.text/Appendable, #AK: kotlin/Number?, #AL: kotlin/Number, #AM: kotlin.collections/List<*>?, #AN: kotlin.collections/List<*>, #AO: kotlin/Any?, #AP: kotlin/Any, #AQ: kotlin/CharSequence?, #AR: kotlin/CharSequence, #AS: kotlin.text/Appendable?, #AT: kotlin.text/Appendable, #AU: kotlin/Number?, #AV: kotlin/Number, #AW: kotlin.collections/List<*>?, #AX: kotlin.collections/List<*>, #AY: kotlin/Any?, #AZ: kotlin/Any, #BA: kotlin/CharSequence?, #BB: kotlin/CharSequence, #BC: kotlin.text/Appendable?, #BD: kotlin.text/Appendable, #BE: kotlin/Number?, #BF: kotlin/Number, #BG: kotlin.collections/List<*>?, #BH: kotlin.collections/List<*>> type_parameters.test/lotsOfTypeParameters(): kotlin/CharSequence // type_parameters.test/lotsOfTypeParameters|lotsOfTypeParameters(){0§<kotlin.Any?>;1§<kotlin.Any>;2§<kotlin.CharSequence?>;3§<kotlin.CharSequence>;4§<kotlin.text.Appendable?>;5§<kotlin.text.Appendable>;6§<kotlin.Number?>;7§<kotlin.Number>;8§<kotlin.collections.List<*>?>;9§<kotlin.collections.List<*>>;10§<kotlin.Any?>;11§<kotlin.Any>;12§<kotlin.CharSequence?>;13§<kotlin.CharSequence>;14§<kotlin.text.Appendable?>;15§<kotlin.text.Appendable>;16§<kotlin.Number?>;17§<kotlin.Number>;18§<kotlin.collections.List<*>?>;19§<kotlin.collections.List<*>>;20§<kotlin.Any?>;21§<kotlin.Any>;22§<kotlin.CharSequence?>;23§<kotlin.CharSequence>;24§<kotlin.text.Appendable?>;25§<kotlin.text.Appendable>;26§<kotlin.Number?>;27§<kotlin.Number>;28§<kotlin.collections.List<*>?>;29§<kotlin.collections.List<*>>;30§<kotlin.Any?>;31§<kotlin.Any>;32§<kotlin.CharSequence?>;33§<kotlin.CharSequence>;34§<kotlin.text.Appendable?>;35§<kotlin.text.Appendable>;36§<kotlin.Number?>;37§<kotlin.Number>;38§<kotlin.collections.List<*>?>;39§<kotlin.collections.List<*>>;40§<kotlin.Any?>;41§<kotlin.Any>;42§<kotlin.CharSequence?>;43§<kotlin.CharSequence>;44§<kotlin.text.Appendable?>;45§<kotlin.text.Appendable>;46§<kotlin.Number?>;47§<kotlin.Number>;48§<kotlin.collections.List<*>?>;49§<kotlin.collections.List<*>>;50§<kotlin.Any?>;51§<kotlin.Any>;52§<kotlin.CharSequence?>;53§<kotlin.CharSequence>;54§<kotlin.text.Appendable?>;55§<kotlin.text.Appendable>;56§<kotlin.Number?>;57§<kotlin.Number>;58§<kotlin.collections.List<*>?>;59§<kotlin.collections.List<*>>}[0]
final fun <#A: kotlin.text/Appendable & kotlin/CharSequence & kotlin/Number> type_parameters.test/multipleBounds(#A) // type_parameters.test/multipleBounds|multipleBounds(0:0){0§<kotlin.CharSequence&kotlin.text.Appendable&kotlin.Number>}[0]
final fun <#A: kotlin.collections/List<*>?> type_parameters.test/one(#A?): #A? // type_parameters.test/one|one(0:0?){0§<kotlin.collections.List<*>?>}[0]
final fun <#A: kotlin.text/Appendable?> type_parameters.test/one(#A): #A // type_parameters.test/one|one(0:0){0§<kotlin.text.Appendable?>}[0]
final fun <#A: kotlin/CharSequence> type_parameters.test/one(#A?): #A? // type_parameters.test/one|one(0:0?){0§<kotlin.CharSequence>}[0]
final fun <#A: kotlin/Number> type_parameters.test/one(#A): #A // type_parameters.test/one|one(0:0){0§<kotlin.Number>}[0]
