STATUS:
TARGET: public abstract override [ResolvedTo(STATUS)] [SubstitutedOverrideOriginalKey=/AbstractClass.property] val [ResolvedTo(STATUS)] R|kotlin/Int|.property: R|kotlin/Int|
    public [ResolvedTo(STATUS)] [ContainingClassKey=SubClass] get(): R|kotlin/Int|

FILE: [ResolvedTo(IMPORTS)] substitutionFakeOverride.kt
    public abstract [ResolvedTo(STATUS)] class SubClass : R|AbstractClass<kotlin/Int>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=SubClass] constructor(): R|SubClass| {
            LAZY_super<R|AbstractClass<kotlin/Int>|>
        }

    }
    public abstract [ResolvedTo(STATUS)] class AbstractClass<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AbstractClass] constructor<[ResolvedTo(STATUS)] T>(): R|AbstractClass<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public abstract [ResolvedTo(STATUS)] val [ResolvedTo(STATUS)] R|T|.property: R|T|
            public [ResolvedTo(STATUS)] [ContainingClassKey=AbstractClass] get(): R|T|

    }

EXPECT_ACTUAL_MATCHING:
TARGET: public abstract override [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [SubstitutedOverrideOriginalKey=/AbstractClass.property] val [ResolvedTo(EXPECT_ACTUAL_MATCHING)] R|kotlin/Int|.property: R|kotlin/Int|
    public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=SubClass] get(): R|kotlin/Int|

FILE: [ResolvedTo(IMPORTS)] substitutionFakeOverride.kt
    public abstract [ResolvedTo(STATUS)] class SubClass : R|AbstractClass<kotlin/Int>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=SubClass] constructor(): R|SubClass| {
            LAZY_super<R|AbstractClass<kotlin/Int>|>
        }

    }
    public abstract [ResolvedTo(STATUS)] class AbstractClass<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AbstractClass] constructor<[ResolvedTo(STATUS)] T>(): R|AbstractClass<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public abstract [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val [ResolvedTo(EXPECT_ACTUAL_MATCHING)] R|T|.property: R|T|
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=AbstractClass] get(): R|T|

    }

CONTRACTS:
TARGET: public abstract override [ResolvedTo(CONTRACTS)] [SubstitutedOverrideOriginalKey=/AbstractClass.property] val [ResolvedTo(CONTRACTS)] R|kotlin/Int|.property: R|kotlin/Int|
    public [ResolvedTo(CONTRACTS)] [ContainingClassKey=SubClass] get(): R|kotlin/Int|

FILE: [ResolvedTo(IMPORTS)] substitutionFakeOverride.kt
    public abstract [ResolvedTo(STATUS)] class SubClass : R|AbstractClass<kotlin/Int>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=SubClass] constructor(): R|SubClass| {
            LAZY_super<R|AbstractClass<kotlin/Int>|>
        }

    }
    public abstract [ResolvedTo(STATUS)] class AbstractClass<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AbstractClass] constructor<[ResolvedTo(STATUS)] T>(): R|AbstractClass<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public abstract [ResolvedTo(CONTRACTS)] val [ResolvedTo(CONTRACTS)] R|T|.property: R|T|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=AbstractClass] get(): R|T|

    }

IMPLICIT_TYPES_BODY_RESOLVE:
TARGET: public abstract override [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [SubstitutedOverrideOriginalKey=/AbstractClass.property] val [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] R|kotlin/Int|.property: R|kotlin/Int|
    public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=SubClass] get(): R|kotlin/Int|

FILE: [ResolvedTo(IMPORTS)] substitutionFakeOverride.kt
    public abstract [ResolvedTo(STATUS)] class SubClass : R|AbstractClass<kotlin/Int>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=SubClass] constructor(): R|SubClass| {
            LAZY_super<R|AbstractClass<kotlin/Int>|>
        }

    }
    public abstract [ResolvedTo(STATUS)] class AbstractClass<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AbstractClass] constructor<[ResolvedTo(STATUS)] T>(): R|AbstractClass<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public abstract [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] R|T|.property: R|T|
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=AbstractClass] get(): R|T|

    }

CONSTANT_EVALUATION:
TARGET: public abstract override [ResolvedTo(CONSTANT_EVALUATION)] [SubstitutedOverrideOriginalKey=/AbstractClass.property] val [ResolvedTo(CONSTANT_EVALUATION)] R|kotlin/Int|.property: R|kotlin/Int|
    public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=SubClass] get(): R|kotlin/Int|

FILE: [ResolvedTo(IMPORTS)] substitutionFakeOverride.kt
    public abstract [ResolvedTo(STATUS)] class SubClass : R|AbstractClass<kotlin/Int>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=SubClass] constructor(): R|SubClass| {
            LAZY_super<R|AbstractClass<kotlin/Int>|>
        }

    }
    public abstract [ResolvedTo(STATUS)] class AbstractClass<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AbstractClass] constructor<[ResolvedTo(STATUS)] T>(): R|AbstractClass<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public abstract [ResolvedTo(CONSTANT_EVALUATION)] val [ResolvedTo(CONSTANT_EVALUATION)] R|T|.property: R|T|
            public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=AbstractClass] get(): R|T|

    }

ANNOTATION_ARGUMENTS:
TARGET: public abstract override [ResolvedTo(ANNOTATION_ARGUMENTS)] [SubstitutedOverrideOriginalKey=/AbstractClass.property] val [ResolvedTo(ANNOTATION_ARGUMENTS)] R|kotlin/Int|.property: R|kotlin/Int|
    public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=SubClass] get(): R|kotlin/Int|

FILE: [ResolvedTo(IMPORTS)] substitutionFakeOverride.kt
    public abstract [ResolvedTo(STATUS)] class SubClass : R|AbstractClass<kotlin/Int>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=SubClass] constructor(): R|SubClass| {
            LAZY_super<R|AbstractClass<kotlin/Int>|>
        }

    }
    public abstract [ResolvedTo(STATUS)] class AbstractClass<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AbstractClass] constructor<[ResolvedTo(STATUS)] T>(): R|AbstractClass<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public abstract [ResolvedTo(ANNOTATION_ARGUMENTS)] val [ResolvedTo(ANNOTATION_ARGUMENTS)] R|T|.property: R|T|
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=AbstractClass] get(): R|T|

    }

BODY_RESOLVE:
TARGET: public abstract override [ResolvedTo(BODY_RESOLVE)] [SubstitutedOverrideOriginalKey=/AbstractClass.property] val [ResolvedTo(BODY_RESOLVE)] R|kotlin/Int|.property: R|kotlin/Int|
    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SubClass] get(): R|kotlin/Int|

FILE: [ResolvedTo(IMPORTS)] substitutionFakeOverride.kt
    public abstract [ResolvedTo(STATUS)] class SubClass : R|AbstractClass<kotlin/Int>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=SubClass] constructor(): R|SubClass| {
            LAZY_super<R|AbstractClass<kotlin/Int>|>
        }

    }
    public abstract [ResolvedTo(STATUS)] class AbstractClass<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AbstractClass] constructor<[ResolvedTo(STATUS)] T>(): R|AbstractClass<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public abstract [ResolvedTo(ANNOTATION_ARGUMENTS)] val [ResolvedTo(ANNOTATION_ARGUMENTS)] R|T|.property: R|T|
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=AbstractClass] get(): R|T|

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] substitutionFakeOverride.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] class SubClass : R|AbstractClass<kotlin/Int>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SubClass] constructor(): R|SubClass| {
            super<R|AbstractClass<kotlin/Int>|>()
        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] class AbstractClass<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AbstractClass] constructor<[ResolvedTo(BODY_RESOLVE)] T>(): R|AbstractClass<T>| {
            super<R|kotlin/Any|>()
        }

        public abstract [ResolvedTo(BODY_RESOLVE)] val [ResolvedTo(BODY_RESOLVE)] R|T|.property: R|T|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AbstractClass] get(): R|T|

    }
