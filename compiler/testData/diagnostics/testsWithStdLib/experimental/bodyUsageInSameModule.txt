package

package api {
    @api.ExperimentalCompilationAPI public fun compilation(): kotlin.Unit
    @api.ExperimentalLinkageAPI public fun linkage(): kotlin.Unit

    @kotlin.Experimental(changesMayBreak = {Impact.COMPILATION}, level = Level.WARNING) public final annotation class ExperimentalCompilationAPI : kotlin.Annotation {
        public constructor ExperimentalCompilationAPI()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    @kotlin.Experimental(changesMayBreak = {Impact.LINKAGE}, level = Level.WARNING) public final annotation class ExperimentalLinkageAPI : kotlin.Annotation {
        public constructor ExperimentalLinkageAPI()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

package usage {
    public var inlineUse2: kotlin.Unit
    public var inlineUse3: kotlin.Unit
    private var privateInline3: kotlin.Unit
    public val use2: kotlin.Unit
    public val use3: kotlin.Unit
    public inline fun inlineUse1(): kotlin.Unit
    @api.ExperimentalCompilationAPI @api.ExperimentalLinkageAPI public inline fun inlineUse4(): kotlin.Unit
    private inline fun privateInline1(): kotlin.Unit
    internal inline fun privateInline2(): kotlin.Unit
    public fun use1(): kotlin.Unit

    internal final class InternalClass {
        public constructor InternalClass()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final inline fun privateInline4(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
