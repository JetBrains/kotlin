RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-nestedClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : TopLevelClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<TopLevelClass>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : AnotherTopLevelClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<AnotherTopLevelClass>
            }

            public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-nestedClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : TopLevelClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<TopLevelClass>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : AnotherTopLevelClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<AnotherTopLevelClass>
            }

            public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-nestedClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : TopLevelClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<TopLevelClass>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : AnotherTopLevelClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<AnotherTopLevelClass>
            }

            public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-nestedClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : TopLevelClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<TopLevelClass>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : AnotherTopLevelClass {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<AnotherTopLevelClass>
            }

            public final? [ResolvedTo(COMPANION_GENERATION)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-nestedClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<TopLevelClass>
            }

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<AnotherTopLevelClass>
            }

            public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-nestedClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<TopLevelClass>
            }

        }

        public final? [ResolvedTo(TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<AnotherTopLevelClass>
            }

            public final? [ResolvedTo(TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-nestedClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<TopLevelClass>
            }

        }

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<AnotherTopLevelClass>
            }

            public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-nestedClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<TopLevelClass>
            }

        }

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<AnotherTopLevelClass>
            }

            public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-nestedClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<R|TopLevelClass|>
            }

        }

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<R|AnotherTopLevelClass|>
            }

            public final [ResolvedTo(CONTRACTS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-nestedClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<R|TopLevelClass|>
            }

        }

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<R|AnotherTopLevelClass|>
            }

            public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-nestedClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<R|TopLevelClass|>
            }

        }

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<R|AnotherTopLevelClass|>
            }

            public final [ResolvedTo(CONSTANT_EVALUATION)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-nestedClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<R|TopLevelClass|>
            }

        }

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<R|AnotherTopLevelClass|>
            }

            public final [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-nestedClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                LAZY_super<R|TopLevelClass|>
            }

        }

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                LAZY_super<R|AnotherTopLevelClass|>
            }

            public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    super<R|kotlin/Any|>()
                }

            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] nestedClassScript.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-nestedClassScript.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

        }

        public open [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class OuterClass : R|AnotherTopLevelClass| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
                super<R|AnotherTopLevelClass|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-nestedClassScript.kts>] class NestedClass : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                    super<R|kotlin/Any|>()
                }

            }

        }

