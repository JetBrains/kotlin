package

package a {

    package a.b {

        package a.b.c {
            @kotlin.Deprecated(message = "aaa") @a.b.c.ann1(p = kotlin.Deprecated(message = "aaa")) @a.b.c.ann1 @a.b.c.ann2(p = a.b.c.ann1) @a.b.c.A.IAnn @a.b.c.ann3(p = a.b.c.A.IAnn) @a.b.c.A.IAnn @a.b.c.ann3(p = a.b.c.A.IAnn) @a.b.c.annArray(p = {"a"}) public fun test(): kotlin.Int

            public final class A {
                public constructor A()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

                public final annotation class IAnn : kotlin.Annotation {
                    public constructor IAnn()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
            }

            public final annotation class ann1 : kotlin.Annotation {
                public constructor ann1(/*0*/ p: kotlin.Deprecated = ...)
                public final val p: kotlin.Deprecated
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public final annotation class ann2 : kotlin.Annotation {
                public constructor ann2(/*0*/ p: a.b.c.ann1 = ...)
                public final val p: a.b.c.ann1
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public final annotation class ann3 : kotlin.Annotation {
                public constructor ann3(/*0*/ p: a.b.c.A.IAnn = ..., /*1*/ p2: a.b.c.A.IAnn = ...)
                public final val p: a.b.c.A.IAnn
                public final val p2: a.b.c.A.IAnn
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public final annotation class annArray : kotlin.Annotation {
                public constructor annArray(/*0*/ p: kotlin.Array<kotlin.String> = ...)
                public final val p: kotlin.Array<kotlin.String>
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
    }
}
