// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/metadata.jvm/src/jvm_metadata.proto

package org.jetbrains.kotlin.metadata.jvm;

public final class JvmProtoBuf {
  private JvmProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.constructorSignature);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.methodSignature);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.lambdaClassOriginName);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.propertySignature);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.typeAnnotation);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.isRaw);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.typeParameterAnnotation);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.classModuleName);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.classLocalVariable);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.anonymousObjectOriginName);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.packageModuleName);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.packageLocalVariable);
  }
  public interface StringTableTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> 
        getRecordList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getRecord(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    int getRecordCount();

    /**
     * <code>repeated int32 local_name = 5 [packed = true];</code>
     *
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     */
    java.util.List<java.lang.Integer> getLocalNameList();
    /**
     * <code>repeated int32 local_name = 5 [packed = true];</code>
     *
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     */
    int getLocalNameCount();
    /**
     * <code>repeated int32 local_name = 5 [packed = true];</code>
     *
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     */
    int getLocalName(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes}
   */
  public static final class StringTableTypes extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
      StringTableTypesOrBuilder {
    // Use StringTableTypes.newBuilder() to construct.
    private StringTableTypes(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StringTableTypes(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final StringTableTypes defaultInstance;
    public static StringTableTypes getDefaultInstance() {
      return defaultInstance;
    }

    public StringTableTypes getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private StringTableTypes(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                record_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record>();
                mutable_bitField0_ |= 0x00000001;
              }
              record_.add(input.readMessage(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                localName_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              localName_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                localName_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                localName_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          record_ = java.util.Collections.unmodifiableList(record_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          localName_ = java.util.Collections.unmodifiableList(localName_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<StringTableTypes> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<StringTableTypes>() {
      public StringTableTypes parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new StringTableTypes(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<StringTableTypes> getParserForType() {
      return PARSER;
    }

    public interface RecordOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
        org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional int32 range = 1 [default = 1];</code>
       *
       * <pre>
       * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
       * </pre>
       */
      boolean hasRange();
      /**
       * <code>optional int32 range = 1 [default = 1];</code>
       *
       * <pre>
       * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
       * </pre>
       */
      int getRange();

      /**
       * <code>optional int32 predefined_index = 2;</code>
       *
       * <pre>
       * Index of the predefined constant. If this field is present, the associated string is ignored
       * </pre>
       */
      boolean hasPredefinedIndex();
      /**
       * <code>optional int32 predefined_index = 2;</code>
       *
       * <pre>
       * Index of the predefined constant. If this field is present, the associated string is ignored
       * </pre>
       */
      int getPredefinedIndex();

      /**
       * <code>optional string string = 6;</code>
       *
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       */
      boolean hasString();
      /**
       * <code>optional string string = 6;</code>
       *
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       */
      java.lang.String getString();
      /**
       * <code>optional string string = 6;</code>
       *
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       */
      org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes();

      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
       *
       * <pre>
       * Perform a described operation on the string
       * </pre>
       */
      boolean hasOperation();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
       *
       * <pre>
       * Perform a described operation on the string
       * </pre>
       */
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation getOperation();

      /**
       * <code>repeated int32 substring_index = 4 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       */
      java.util.List<java.lang.Integer> getSubstringIndexList();
      /**
       * <code>repeated int32 substring_index = 4 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       */
      int getSubstringIndexCount();
      /**
       * <code>repeated int32 substring_index = 4 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       */
      int getSubstringIndex(int index);

      /**
       * <code>repeated int32 replace_char = 5 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       */
      java.util.List<java.lang.Integer> getReplaceCharList();
      /**
       * <code>repeated int32 replace_char = 5 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       */
      int getReplaceCharCount();
      /**
       * <code>repeated int32 replace_char = 5 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       */
      int getReplaceChar(int index);
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record}
     */
    public static final class Record extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
        RecordOrBuilder {
      // Use Record.newBuilder() to construct.
      private Record(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Record(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

      private static final Record defaultInstance;
      public static Record getDefaultInstance() {
        return defaultInstance;
      }

      public Record getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
      private Record(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
            org.jetbrains.kotlin.protobuf.ByteString.newOutput();
        org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
            org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
                unknownFieldsOutput, 1);
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                range_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                predefinedIndex_ = input.readInt32();
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation value = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.valueOf(rawValue);
                if (value == null) {
                  unknownFieldsCodedOutput.writeRawVarint32(tag);
                  unknownFieldsCodedOutput.writeRawVarint32(rawValue);
                } else {
                  bitField0_ |= 0x00000008;
                  operation_ = value;
                }
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  substringIndex_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                substringIndex_.add(input.readInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  substringIndex_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  substringIndex_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  replaceChar_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                replaceChar_.add(input.readInt32());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  replaceChar_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  replaceChar_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 50: {
                org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000004;
                string_ = bs;
                break;
              }
            }
          }
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            substringIndex_ = java.util.Collections.unmodifiableList(substringIndex_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            replaceChar_ = java.util.Collections.unmodifiableList(replaceChar_);
          }
          try {
            unknownFieldsCodedOutput.flush();
          } catch (java.io.IOException e) {
          // Should not happen
          } finally {
            unknownFields = unknownFieldsOutput.toByteString();
          }
          makeExtensionsImmutable();
        }
      }
      public static org.jetbrains.kotlin.protobuf.Parser<Record> PARSER =
          new org.jetbrains.kotlin.protobuf.AbstractParser<Record>() {
        public Record parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return new Record(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<Record> getParserForType() {
        return PARSER;
      }

      /**
       * Protobuf enum {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation}
       */
      public enum Operation
          implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
        /**
         * <code>NONE = 0;</code>
         */
        NONE(0, 0),
        /**
         * <code>INTERNAL_TO_CLASS_ID = 1;</code>
         *
         * <pre>
         * replaceAll('$', '.')
         * java/util/Map$Entry -&gt; java/util/Map.Entry;
         * </pre>
         */
        INTERNAL_TO_CLASS_ID(1, 1),
        /**
         * <code>DESC_TO_CLASS_ID = 2;</code>
         *
         * <pre>
         * substring(1, length - 1) and then replaceAll('$', '.')
         * Ljava/util/Map$Entry; -&gt; java/util/Map.Entry
         * </pre>
         */
        DESC_TO_CLASS_ID(2, 2),
        ;

        /**
         * <code>NONE = 0;</code>
         */
        public static final int NONE_VALUE = 0;
        /**
         * <code>INTERNAL_TO_CLASS_ID = 1;</code>
         *
         * <pre>
         * replaceAll('$', '.')
         * java/util/Map$Entry -&gt; java/util/Map.Entry;
         * </pre>
         */
        public static final int INTERNAL_TO_CLASS_ID_VALUE = 1;
        /**
         * <code>DESC_TO_CLASS_ID = 2;</code>
         *
         * <pre>
         * substring(1, length - 1) and then replaceAll('$', '.')
         * Ljava/util/Map$Entry; -&gt; java/util/Map.Entry
         * </pre>
         */
        public static final int DESC_TO_CLASS_ID_VALUE = 2;


        public final int getNumber() { return value; }

        public static Operation valueOf(int value) {
          switch (value) {
            case 0: return NONE;
            case 1: return INTERNAL_TO_CLASS_ID;
            case 2: return DESC_TO_CLASS_ID;
            default: return null;
          }
        }

        public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Operation>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Operation>
            internalValueMap =
              new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Operation>() {
                public Operation findValueByNumber(int number) {
                  return Operation.valueOf(number);
                }
              };

        private final int value;

        private Operation(int index, int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation)
      }

      private int bitField0_;
      public static final int RANGE_FIELD_NUMBER = 1;
      private int range_;
      /**
       * <code>optional int32 range = 1 [default = 1];</code>
       *
       * <pre>
       * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
       * </pre>
       */
      public boolean hasRange() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 range = 1 [default = 1];</code>
       *
       * <pre>
       * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
       * </pre>
       */
      public int getRange() {
        return range_;
      }

      public static final int PREDEFINED_INDEX_FIELD_NUMBER = 2;
      private int predefinedIndex_;
      /**
       * <code>optional int32 predefined_index = 2;</code>
       *
       * <pre>
       * Index of the predefined constant. If this field is present, the associated string is ignored
       * </pre>
       */
      public boolean hasPredefinedIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 predefined_index = 2;</code>
       *
       * <pre>
       * Index of the predefined constant. If this field is present, the associated string is ignored
       * </pre>
       */
      public int getPredefinedIndex() {
        return predefinedIndex_;
      }

      public static final int STRING_FIELD_NUMBER = 6;
      private java.lang.Object string_;
      /**
       * <code>optional string string = 6;</code>
       *
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       */
      public boolean hasString() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string string = 6;</code>
       *
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       */
      public java.lang.String getString() {
        java.lang.Object ref = string_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          org.jetbrains.kotlin.protobuf.ByteString bs = 
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            string_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string string = 6;</code>
       *
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes() {
        java.lang.Object ref = string_;
        if (ref instanceof java.lang.String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          string_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }

      public static final int OPERATION_FIELD_NUMBER = 3;
      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation operation_;
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
       *
       * <pre>
       * Perform a described operation on the string
       * </pre>
       */
      public boolean hasOperation() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
       *
       * <pre>
       * Perform a described operation on the string
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation getOperation() {
        return operation_;
      }

      public static final int SUBSTRING_INDEX_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Integer> substringIndex_;
      /**
       * <code>repeated int32 substring_index = 4 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSubstringIndexList() {
        return substringIndex_;
      }
      /**
       * <code>repeated int32 substring_index = 4 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       */
      public int getSubstringIndexCount() {
        return substringIndex_.size();
      }
      /**
       * <code>repeated int32 substring_index = 4 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       */
      public int getSubstringIndex(int index) {
        return substringIndex_.get(index);
      }
      private int substringIndexMemoizedSerializedSize = -1;

      public static final int REPLACE_CHAR_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Integer> replaceChar_;
      /**
       * <code>repeated int32 replace_char = 5 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getReplaceCharList() {
        return replaceChar_;
      }
      /**
       * <code>repeated int32 replace_char = 5 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       */
      public int getReplaceCharCount() {
        return replaceChar_.size();
      }
      /**
       * <code>repeated int32 replace_char = 5 [packed = true];</code>
       *
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       */
      public int getReplaceChar(int index) {
        return replaceChar_.get(index);
      }
      private int replaceCharMemoizedSerializedSize = -1;

      private void initFields() {
        range_ = 1;
        predefinedIndex_ = 0;
        string_ = "";
        operation_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.NONE;
        substringIndex_ = java.util.Collections.emptyList();
        replaceChar_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, range_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, predefinedIndex_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeEnum(3, operation_.getNumber());
        }
        if (getSubstringIndexList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(substringIndexMemoizedSerializedSize);
        }
        for (int i = 0; i < substringIndex_.size(); i++) {
          output.writeInt32NoTag(substringIndex_.get(i));
        }
        if (getReplaceCharList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(replaceCharMemoizedSerializedSize);
        }
        for (int i = 0; i < replaceChar_.size(); i++) {
          output.writeInt32NoTag(replaceChar_.get(i));
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBytes(6, getStringBytes());
        }
        output.writeRawBytes(unknownFields);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(1, range_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(2, predefinedIndex_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeEnumSize(3, operation_.getNumber());
        }
        {
          int dataSize = 0;
          for (int i = 0; i < substringIndex_.size(); i++) {
            dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(substringIndex_.get(i));
          }
          size += dataSize;
          if (!getSubstringIndexList().isEmpty()) {
            size += 1;
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          substringIndexMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < replaceChar_.size(); i++) {
            dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(replaceChar_.get(i));
          }
          size += dataSize;
          if (!getReplaceCharList().isEmpty()) {
            size += 1;
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          replaceCharMemoizedSerializedSize = dataSize;
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSize(6, getStringBytes());
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
            org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record, Builder>
          implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder {
        // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          range_ = 1;
          bitField0_ = (bitField0_ & ~0x00000001);
          predefinedIndex_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          string_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          operation_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.NONE;
          bitField0_ = (bitField0_ & ~0x00000008);
          substringIndex_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          replaceChar_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getDefaultInstanceForType() {
          return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.getDefaultInstance();
        }

        public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record build() {
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record buildPartial() {
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.range_ = range_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.predefinedIndex_ = predefinedIndex_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.string_ = string_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.operation_ = operation_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            substringIndex_ = java.util.Collections.unmodifiableList(substringIndex_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.substringIndex_ = substringIndex_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            replaceChar_ = java.util.Collections.unmodifiableList(replaceChar_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.replaceChar_ = replaceChar_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record other) {
          if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.getDefaultInstance()) return this;
          if (other.hasRange()) {
            setRange(other.getRange());
          }
          if (other.hasPredefinedIndex()) {
            setPredefinedIndex(other.getPredefinedIndex());
          }
          if (other.hasString()) {
            bitField0_ |= 0x00000004;
            string_ = other.string_;
            
          }
          if (other.hasOperation()) {
            setOperation(other.getOperation());
          }
          if (!other.substringIndex_.isEmpty()) {
            if (substringIndex_.isEmpty()) {
              substringIndex_ = other.substringIndex_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureSubstringIndexIsMutable();
              substringIndex_.addAll(other.substringIndex_);
            }
            
          }
          if (!other.replaceChar_.isEmpty()) {
            if (replaceChar_.isEmpty()) {
              replaceChar_ = other.replaceChar_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureReplaceCharIsMutable();
              replaceChar_.addAll(other.replaceChar_);
            }
            
          }
          setUnknownFields(
              getUnknownFields().concat(other.unknownFields));
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int range_ = 1;
        /**
         * <code>optional int32 range = 1 [default = 1];</code>
         *
         * <pre>
         * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
         * </pre>
         */
        public boolean hasRange() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 range = 1 [default = 1];</code>
         *
         * <pre>
         * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
         * </pre>
         */
        public int getRange() {
          return range_;
        }
        /**
         * <code>optional int32 range = 1 [default = 1];</code>
         *
         * <pre>
         * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
         * </pre>
         */
        public Builder setRange(int value) {
          bitField0_ |= 0x00000001;
          range_ = value;
          
          return this;
        }
        /**
         * <code>optional int32 range = 1 [default = 1];</code>
         *
         * <pre>
         * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
         * </pre>
         */
        public Builder clearRange() {
          bitField0_ = (bitField0_ & ~0x00000001);
          range_ = 1;
          
          return this;
        }

        private int predefinedIndex_ ;
        /**
         * <code>optional int32 predefined_index = 2;</code>
         *
         * <pre>
         * Index of the predefined constant. If this field is present, the associated string is ignored
         * </pre>
         */
        public boolean hasPredefinedIndex() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 predefined_index = 2;</code>
         *
         * <pre>
         * Index of the predefined constant. If this field is present, the associated string is ignored
         * </pre>
         */
        public int getPredefinedIndex() {
          return predefinedIndex_;
        }
        /**
         * <code>optional int32 predefined_index = 2;</code>
         *
         * <pre>
         * Index of the predefined constant. If this field is present, the associated string is ignored
         * </pre>
         */
        public Builder setPredefinedIndex(int value) {
          bitField0_ |= 0x00000002;
          predefinedIndex_ = value;
          
          return this;
        }
        /**
         * <code>optional int32 predefined_index = 2;</code>
         *
         * <pre>
         * Index of the predefined constant. If this field is present, the associated string is ignored
         * </pre>
         */
        public Builder clearPredefinedIndex() {
          bitField0_ = (bitField0_ & ~0x00000002);
          predefinedIndex_ = 0;
          
          return this;
        }

        private java.lang.Object string_ = "";
        /**
         * <code>optional string string = 6;</code>
         *
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         */
        public boolean hasString() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string string = 6;</code>
         *
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         */
        public java.lang.String getString() {
          java.lang.Object ref = string_;
          if (!(ref instanceof java.lang.String)) {
            org.jetbrains.kotlin.protobuf.ByteString bs =
                (org.jetbrains.kotlin.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              string_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string string = 6;</code>
         *
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         */
        public org.jetbrains.kotlin.protobuf.ByteString
            getStringBytes() {
          java.lang.Object ref = string_;
          if (ref instanceof String) {
            org.jetbrains.kotlin.protobuf.ByteString b = 
                org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            string_ = b;
            return b;
          } else {
            return (org.jetbrains.kotlin.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string string = 6;</code>
         *
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         */
        public Builder setString(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          string_ = value;
          
          return this;
        }
        /**
         * <code>optional string string = 6;</code>
         *
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         */
        public Builder clearString() {
          bitField0_ = (bitField0_ & ~0x00000004);
          string_ = getDefaultInstance().getString();
          
          return this;
        }
        /**
         * <code>optional string string = 6;</code>
         *
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         */
        public Builder setStringBytes(
            org.jetbrains.kotlin.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          string_ = value;
          
          return this;
        }

        private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation operation_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.NONE;
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
         *
         * <pre>
         * Perform a described operation on the string
         * </pre>
         */
        public boolean hasOperation() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
         *
         * <pre>
         * Perform a described operation on the string
         * </pre>
         */
        public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation getOperation() {
          return operation_;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
         *
         * <pre>
         * Perform a described operation on the string
         * </pre>
         */
        public Builder setOperation(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          operation_ = value;
          
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
         *
         * <pre>
         * Perform a described operation on the string
         * </pre>
         */
        public Builder clearOperation() {
          bitField0_ = (bitField0_ & ~0x00000008);
          operation_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.NONE;
          
          return this;
        }

        private java.util.List<java.lang.Integer> substringIndex_ = java.util.Collections.emptyList();
        private void ensureSubstringIndexIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            substringIndex_ = new java.util.ArrayList<java.lang.Integer>(substringIndex_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated int32 substring_index = 4 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getSubstringIndexList() {
          return java.util.Collections.unmodifiableList(substringIndex_);
        }
        /**
         * <code>repeated int32 substring_index = 4 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         */
        public int getSubstringIndexCount() {
          return substringIndex_.size();
        }
        /**
         * <code>repeated int32 substring_index = 4 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         */
        public int getSubstringIndex(int index) {
          return substringIndex_.get(index);
        }
        /**
         * <code>repeated int32 substring_index = 4 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         */
        public Builder setSubstringIndex(
            int index, int value) {
          ensureSubstringIndexIsMutable();
          substringIndex_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated int32 substring_index = 4 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         */
        public Builder addSubstringIndex(int value) {
          ensureSubstringIndexIsMutable();
          substringIndex_.add(value);
          
          return this;
        }
        /**
         * <code>repeated int32 substring_index = 4 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         */
        public Builder addAllSubstringIndex(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureSubstringIndexIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, substringIndex_);
          
          return this;
        }
        /**
         * <code>repeated int32 substring_index = 4 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         */
        public Builder clearSubstringIndex() {
          substringIndex_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          
          return this;
        }

        private java.util.List<java.lang.Integer> replaceChar_ = java.util.Collections.emptyList();
        private void ensureReplaceCharIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            replaceChar_ = new java.util.ArrayList<java.lang.Integer>(replaceChar_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated int32 replace_char = 5 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getReplaceCharList() {
          return java.util.Collections.unmodifiableList(replaceChar_);
        }
        /**
         * <code>repeated int32 replace_char = 5 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         */
        public int getReplaceCharCount() {
          return replaceChar_.size();
        }
        /**
         * <code>repeated int32 replace_char = 5 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         */
        public int getReplaceChar(int index) {
          return replaceChar_.get(index);
        }
        /**
         * <code>repeated int32 replace_char = 5 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         */
        public Builder setReplaceChar(
            int index, int value) {
          ensureReplaceCharIsMutable();
          replaceChar_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated int32 replace_char = 5 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         */
        public Builder addReplaceChar(int value) {
          ensureReplaceCharIsMutable();
          replaceChar_.add(value);
          
          return this;
        }
        /**
         * <code>repeated int32 replace_char = 5 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         */
        public Builder addAllReplaceChar(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureReplaceCharIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, replaceChar_);
          
          return this;
        }
        /**
         * <code>repeated int32 replace_char = 5 [packed = true];</code>
         *
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         */
        public Builder clearReplaceChar() {
          replaceChar_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
      }

      static {
        defaultInstance = new Record(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
    }

    public static final int RECORD_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> record_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> getRecordList() {
      return record_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder> 
        getRecordOrBuilderList() {
      return record_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    public int getRecordCount() {
      return record_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getRecord(int index) {
      return record_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder getRecordOrBuilder(
        int index) {
      return record_.get(index);
    }

    public static final int LOCAL_NAME_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> localName_;
    /**
     * <code>repeated int32 local_name = 5 [packed = true];</code>
     *
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLocalNameList() {
      return localName_;
    }
    /**
     * <code>repeated int32 local_name = 5 [packed = true];</code>
     *
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     */
    public int getLocalNameCount() {
      return localName_.size();
    }
    /**
     * <code>repeated int32 local_name = 5 [packed = true];</code>
     *
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     */
    public int getLocalName(int index) {
      return localName_.get(index);
    }
    private int localNameMemoizedSerializedSize = -1;

    private void initFields() {
      record_ = java.util.Collections.emptyList();
      localName_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < record_.size(); i++) {
        output.writeMessage(1, record_.get(i));
      }
      if (getLocalNameList().size() > 0) {
        output.writeRawVarint32(42);
        output.writeRawVarint32(localNameMemoizedSerializedSize);
      }
      for (int i = 0; i < localName_.size(); i++) {
        output.writeInt32NoTag(localName_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < record_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, record_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < localName_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(localName_.get(i));
        }
        size += dataSize;
        if (!getLocalNameList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        localNameMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypesOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        record_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        localName_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes build() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes buildPartial() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          record_ = java.util.Collections.unmodifiableList(record_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.record_ = record_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          localName_ = java.util.Collections.unmodifiableList(localName_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.localName_ = localName_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes other) {
        if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.getDefaultInstance()) return this;
        if (!other.record_.isEmpty()) {
          if (record_.isEmpty()) {
            record_ = other.record_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRecordIsMutable();
            record_.addAll(other.record_);
          }
          
        }
        if (!other.localName_.isEmpty()) {
          if (localName_.isEmpty()) {
            localName_ = other.localName_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLocalNameIsMutable();
            localName_.addAll(other.localName_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> record_ =
        java.util.Collections.emptyList();
      private void ensureRecordIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          record_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record>(record_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> getRecordList() {
        return java.util.Collections.unmodifiableList(record_);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public int getRecordCount() {
        return record_.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getRecord(int index) {
        return record_.get(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder setRecord(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRecordIsMutable();
        record_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder setRecord(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder builderForValue) {
        ensureRecordIsMutable();
        record_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addRecord(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRecordIsMutable();
        record_.add(value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addRecord(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRecordIsMutable();
        record_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addRecord(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder builderForValue) {
        ensureRecordIsMutable();
        record_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addRecord(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder builderForValue) {
        ensureRecordIsMutable();
        record_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addAllRecord(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> values) {
        ensureRecordIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, record_);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder clearRecord() {
        record_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder removeRecord(int index) {
        ensureRecordIsMutable();
        record_.remove(index);

        return this;
      }

      private java.util.List<java.lang.Integer> localName_ = java.util.Collections.emptyList();
      private void ensureLocalNameIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          localName_ = new java.util.ArrayList<java.lang.Integer>(localName_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 local_name = 5 [packed = true];</code>
       *
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLocalNameList() {
        return java.util.Collections.unmodifiableList(localName_);
      }
      /**
       * <code>repeated int32 local_name = 5 [packed = true];</code>
       *
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       */
      public int getLocalNameCount() {
        return localName_.size();
      }
      /**
       * <code>repeated int32 local_name = 5 [packed = true];</code>
       *
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       */
      public int getLocalName(int index) {
        return localName_.get(index);
      }
      /**
       * <code>repeated int32 local_name = 5 [packed = true];</code>
       *
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       */
      public Builder setLocalName(
          int index, int value) {
        ensureLocalNameIsMutable();
        localName_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 local_name = 5 [packed = true];</code>
       *
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       */
      public Builder addLocalName(int value) {
        ensureLocalNameIsMutable();
        localName_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 local_name = 5 [packed = true];</code>
       *
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       */
      public Builder addAllLocalName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLocalNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, localName_);
        
        return this;
      }
      /**
       * <code>repeated int32 local_name = 5 [packed = true];</code>
       *
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       */
      public Builder clearLocalName() {
        localName_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
    }

    static {
      defaultInstance = new StringTableTypes(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
  }

  public interface JvmMethodSignatureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional int32 name = 1;</code>
     */
    int getName();

    /**
     * <code>optional int32 desc = 2;</code>
     *
     * <pre>
     * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
     * </pre>
     */
    boolean hasDesc();
    /**
     * <code>optional int32 desc = 2;</code>
     *
     * <pre>
     * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
     * </pre>
     */
    int getDesc();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature}
   */
  public static final class JvmMethodSignature extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
      JvmMethodSignatureOrBuilder {
    // Use JvmMethodSignature.newBuilder() to construct.
    private JvmMethodSignature(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JvmMethodSignature(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final JvmMethodSignature defaultInstance;
    public static JvmMethodSignature getDefaultInstance() {
      return defaultInstance;
    }

    public JvmMethodSignature getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private JvmMethodSignature(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              name_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              desc_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<JvmMethodSignature> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<JvmMethodSignature>() {
      public JvmMethodSignature parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new JvmMethodSignature(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmMethodSignature> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private int name_;
    /**
     * <code>optional int32 name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 name = 1;</code>
     */
    public int getName() {
      return name_;
    }

    public static final int DESC_FIELD_NUMBER = 2;
    private int desc_;
    /**
     * <code>optional int32 desc = 2;</code>
     *
     * <pre>
     * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
     * </pre>
     */
    public boolean hasDesc() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 desc = 2;</code>
     *
     * <pre>
     * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
     * </pre>
     */
    public int getDesc() {
      return desc_;
    }

    private void initFields() {
      name_ = 0;
      desc_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, desc_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, desc_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        desc_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature build() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature buildPartial() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.desc_ = desc_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature other) {
        if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasDesc()) {
          setDesc(other.getDesc());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int name_ ;
      /**
       * <code>optional int32 name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public int getName() {
        return name_;
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public Builder setName(int value) {
        bitField0_ |= 0x00000001;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        
        return this;
      }

      private int desc_ ;
      /**
       * <code>optional int32 desc = 2;</code>
       *
       * <pre>
       * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
       * </pre>
       */
      public boolean hasDesc() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 desc = 2;</code>
       *
       * <pre>
       * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
       * </pre>
       */
      public int getDesc() {
        return desc_;
      }
      /**
       * <code>optional int32 desc = 2;</code>
       *
       * <pre>
       * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
       * </pre>
       */
      public Builder setDesc(int value) {
        bitField0_ |= 0x00000002;
        desc_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 desc = 2;</code>
       *
       * <pre>
       * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
       * </pre>
       */
      public Builder clearDesc() {
        bitField0_ = (bitField0_ & ~0x00000002);
        desc_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
    }

    static {
      defaultInstance = new JvmMethodSignature(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
  }

  public interface JvmFieldSignatureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional int32 name = 1;</code>
     */
    int getName();

    /**
     * <code>optional int32 desc = 2;</code>
     *
     * <pre>
     * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
     * </pre>
     */
    boolean hasDesc();
    /**
     * <code>optional int32 desc = 2;</code>
     *
     * <pre>
     * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
     * </pre>
     */
    int getDesc();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature}
   */
  public static final class JvmFieldSignature extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
      JvmFieldSignatureOrBuilder {
    // Use JvmFieldSignature.newBuilder() to construct.
    private JvmFieldSignature(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JvmFieldSignature(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final JvmFieldSignature defaultInstance;
    public static JvmFieldSignature getDefaultInstance() {
      return defaultInstance;
    }

    public JvmFieldSignature getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private JvmFieldSignature(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              name_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              desc_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<JvmFieldSignature> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<JvmFieldSignature>() {
      public JvmFieldSignature parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new JvmFieldSignature(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmFieldSignature> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private int name_;
    /**
     * <code>optional int32 name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 name = 1;</code>
     */
    public int getName() {
      return name_;
    }

    public static final int DESC_FIELD_NUMBER = 2;
    private int desc_;
    /**
     * <code>optional int32 desc = 2;</code>
     *
     * <pre>
     * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
     * </pre>
     */
    public boolean hasDesc() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 desc = 2;</code>
     *
     * <pre>
     * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
     * </pre>
     */
    public int getDesc() {
      return desc_;
    }

    private void initFields() {
      name_ = 0;
      desc_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, desc_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, desc_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignatureOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        desc_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature build() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature buildPartial() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.desc_ = desc_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature other) {
        if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasDesc()) {
          setDesc(other.getDesc());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int name_ ;
      /**
       * <code>optional int32 name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public int getName() {
        return name_;
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public Builder setName(int value) {
        bitField0_ |= 0x00000001;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        
        return this;
      }

      private int desc_ ;
      /**
       * <code>optional int32 desc = 2;</code>
       *
       * <pre>
       * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
       * </pre>
       */
      public boolean hasDesc() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 desc = 2;</code>
       *
       * <pre>
       * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
       * </pre>
       */
      public int getDesc() {
        return desc_;
      }
      /**
       * <code>optional int32 desc = 2;</code>
       *
       * <pre>
       * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
       * </pre>
       */
      public Builder setDesc(int value) {
        bitField0_ |= 0x00000002;
        desc_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 desc = 2;</code>
       *
       * <pre>
       * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
       * </pre>
       */
      public Builder clearDesc() {
        bitField0_ = (bitField0_ & ~0x00000002);
        desc_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
    }

    static {
      defaultInstance = new JvmFieldSignature(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
  }

  public interface JvmPropertySignatureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     */
    boolean hasField();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getField();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     *
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     */
    boolean hasSyntheticMethod();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     *
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSyntheticMethod();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     */
    boolean hasGetter();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getGetter();

    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     */
    boolean hasSetter();
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSetter();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature}
   */
  public static final class JvmPropertySignature extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
      JvmPropertySignatureOrBuilder {
    // Use JvmPropertySignature.newBuilder() to construct.
    private JvmPropertySignature(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JvmPropertySignature(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final JvmPropertySignature defaultInstance;
    public static JvmPropertySignature getDefaultInstance() {
      return defaultInstance;
    }

    public JvmPropertySignature getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private JvmPropertySignature(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = field_.toBuilder();
              }
              field_ = input.readMessage(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(field_);
                field_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = syntheticMethod_.toBuilder();
              }
              syntheticMethod_ = input.readMessage(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(syntheticMethod_);
                syntheticMethod_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = getter_.toBuilder();
              }
              getter_ = input.readMessage(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getter_);
                getter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = setter_.toBuilder();
              }
              setter_ = input.readMessage(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(setter_);
                setter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<JvmPropertySignature> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<JvmPropertySignature>() {
      public JvmPropertySignature parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new JvmPropertySignature(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmPropertySignature> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FIELD_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature field_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     */
    public boolean hasField() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getField() {
      return field_;
    }

    public static final int SYNTHETIC_METHOD_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature syntheticMethod_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     *
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     */
    public boolean hasSyntheticMethod() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     *
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     */
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSyntheticMethod() {
      return syntheticMethod_;
    }

    public static final int GETTER_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getter_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     */
    public boolean hasGetter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getGetter() {
      return getter_;
    }

    public static final int SETTER_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature setter_;
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     */
    public boolean hasSetter() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSetter() {
      return setter_;
    }

    private void initFields() {
      field_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance();
      syntheticMethod_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
      getter_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
      setter_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, field_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, syntheticMethod_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, setter_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, field_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, syntheticMethod_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, setter_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignatureOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        field_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        syntheticMethod_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        getter_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        setter_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature build() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature buildPartial() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.field_ = field_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.syntheticMethod_ = syntheticMethod_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.getter_ = getter_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.setter_ = setter_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature other) {
        if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.getDefaultInstance()) return this;
        if (other.hasField()) {
          mergeField(other.getField());
        }
        if (other.hasSyntheticMethod()) {
          mergeSyntheticMethod(other.getSyntheticMethod());
        }
        if (other.hasGetter()) {
          mergeGetter(other.getGetter());
        }
        if (other.hasSetter()) {
          mergeSetter(other.getSetter());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature field_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public boolean hasField() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getField() {
        return field_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public Builder setField(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature value) {
        if (value == null) {
          throw new NullPointerException();
        }
        field_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public Builder setField(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder builderForValue) {
        field_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public Builder mergeField(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            field_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance()) {
          field_ =
            org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.newBuilder(field_).mergeFrom(value).buildPartial();
        } else {
          field_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public Builder clearField() {
        field_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature syntheticMethod_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       *
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       */
      public boolean hasSyntheticMethod() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       *
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSyntheticMethod() {
        return syntheticMethod_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       *
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       */
      public Builder setSyntheticMethod(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (value == null) {
          throw new NullPointerException();
        }
        syntheticMethod_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       *
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       */
      public Builder setSyntheticMethod(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder builderForValue) {
        syntheticMethod_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       *
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       */
      public Builder mergeSyntheticMethod(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            syntheticMethod_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) {
          syntheticMethod_ =
            org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.newBuilder(syntheticMethod_).mergeFrom(value).buildPartial();
        } else {
          syntheticMethod_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       *
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       */
      public Builder clearSyntheticMethod() {
        syntheticMethod_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getter_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public boolean hasGetter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getGetter() {
        return getter_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public Builder setGetter(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (value == null) {
          throw new NullPointerException();
        }
        getter_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public Builder setGetter(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder builderForValue) {
        getter_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public Builder mergeGetter(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            getter_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) {
          getter_ =
            org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.newBuilder(getter_).mergeFrom(value).buildPartial();
        } else {
          getter_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public Builder clearGetter() {
        getter_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature setter_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public boolean hasSetter() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSetter() {
        return setter_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public Builder setSetter(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (value == null) {
          throw new NullPointerException();
        }
        setter_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public Builder setSetter(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder builderForValue) {
        setter_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public Builder mergeSetter(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            setter_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) {
          setter_ =
            org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.newBuilder(setter_).mergeFrom(value).buildPartial();
        } else {
          setter_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public Builder clearSetter() {
        setter_ = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
    }

    static {
      defaultInstance = new JvmPropertySignature(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
  }

  public static final int CONSTRUCTOR_SIGNATURE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Constructor { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Constructor,
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature> constructorSignature = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance(),
        null,
        100,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.class);
  public static final int METHOD_SIGNATURE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Function,
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature> methodSignature = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Function.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance(),
        null,
        100,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.class);
  public static final int LAMBDA_CLASS_ORIGIN_NAME_FIELD_NUMBER = 101;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Function { ... }</code>
   *
   * <pre>
   * For lambdas from bodies of inline functions copied to the use site, the JVM internal name of the original
   * lambda class this class is copied from
   * </pre>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Function,
      java.lang.Integer> lambdaClassOriginName = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Function.getDefaultInstance(),
        0,
        null,
        null,
        101,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.INT32,
        java.lang.Integer.class);
  public static final int PROPERTY_SIGNATURE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Property,
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature> propertySignature = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.getDefaultInstance(),
        null,
        100,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.class);
  public static final int TYPE_ANNOTATION_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Type { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Type,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>> typeAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance(),
        null,
        100,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        false,
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class);
  public static final int IS_RAW_FIELD_NUMBER = 101;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Type { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Type,
      java.lang.Boolean> isRaw = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance(),
        false,
        null,
        null,
        101,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.BOOL,
        java.lang.Boolean.class);
  public static final int TYPE_PARAMETER_ANNOTATION_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.TypeParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>> typeParameterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance(),
        null,
        100,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        false,
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class);
  public static final int CLASS_MODULE_NAME_FIELD_NUMBER = 101;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   *
   * <pre>
   * If absent, assumed to be JvmAbi.DEFAULT_MODULE_NAME
   * </pre>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Class,
      java.lang.Integer> classModuleName = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Class.getDefaultInstance(),
        0,
        null,
        null,
        101,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.INT32,
        java.lang.Integer.class);
  public static final int CLASS_LOCAL_VARIABLE_FIELD_NUMBER = 102;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Class,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property>> classLocalVariable = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Class.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance(),
        null,
        102,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        false,
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.class);
  public static final int ANONYMOUS_OBJECT_ORIGIN_NAME_FIELD_NUMBER = 103;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   *
   * <pre>
   * For anonymous objects from bodies of inline functions copied to the use site, the JVM internal name of the original
   * anonymous object this class is copied from
   * </pre>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Class,
      java.lang.Integer> anonymousObjectOriginName = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Class.getDefaultInstance(),
        0,
        null,
        null,
        103,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.INT32,
        java.lang.Integer.class);
  public static final int PACKAGE_MODULE_NAME_FIELD_NUMBER = 101;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Package { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Package,
      java.lang.Integer> packageModuleName = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance(),
        0,
        null,
        null,
        101,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.INT32,
        java.lang.Integer.class);
  public static final int PACKAGE_LOCAL_VARIABLE_FIELD_NUMBER = 102;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Package { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Package,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property>> packageLocalVariable = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance(),
        null,
        102,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        false,
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.class);

  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}