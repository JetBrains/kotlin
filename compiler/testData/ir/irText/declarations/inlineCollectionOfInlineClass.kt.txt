inline class IT {
  constructor(x: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  val x: Int
    field = x
    get

  override fun toString(): String {
    return "IT(" + "x=" + <this>.#x + ")"
  }

  override fun hashCode(): Int {
    return <this>.#x.hashCode()
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      other !is IT -> return false
    }
    val tmp0_other_with_cast: IT = other as IT
    when {
      EQEQ(arg0 = <this>.#x, arg1 = tmp0_other_with_cast.#x).not() -> return false
    }
    return true
  }

}

inline class InlineMutableSet : MutableSet<IT> {
  constructor(ms: MutableSet<IT>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private val ms: MutableSet<IT>
    field = ms
    private get

  override val size: Int
    override get(): Int {
      return <this>.<get-ms>().<get-size>()
    }

  override operator fun contains(element: IT): Boolean {
    return <this>.<get-ms>().contains(element = element)
  }

  override fun containsAll(elements: Collection<IT>): Boolean {
    return <this>.<get-ms>().containsAll(elements = elements)
  }

  override fun isEmpty(): Boolean {
    return <this>.<get-ms>().isEmpty()
  }

  override fun add(element: IT): Boolean {
    return <this>.<get-ms>().add(element = element)
  }

  override fun addAll(elements: Collection<IT>): Boolean {
    return <this>.<get-ms>().addAll(elements = elements)
  }

  override fun clear() {
    <this>.<get-ms>().clear()
  }

  override operator fun iterator(): MutableIterator<IT> {
    return <this>.<get-ms>().iterator()
  }

  override fun remove(element: IT): Boolean {
    return <this>.<get-ms>().remove(element = element)
  }

  override fun removeAll(elements: Collection<IT>): Boolean {
    return <this>.<get-ms>().removeAll(elements = elements)
  }

  override fun retainAll(elements: Collection<IT>): Boolean {
    return <this>.<get-ms>().retainAll(elements = elements)
  }

  override fun toString(): String {
    return "InlineMutableSet(" + "ms=" + <this>.#ms + ")"
  }

  override fun hashCode(): Int {
    return <this>.#ms.hashCode()
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      other !is InlineMutableSet -> return false
    }
    val tmp0_other_with_cast: InlineMutableSet = other as InlineMutableSet
    when {
      EQEQ(arg0 = <this>.#ms, arg1 = tmp0_other_with_cast.#ms).not() -> return false
    }
    return true
  }

}

