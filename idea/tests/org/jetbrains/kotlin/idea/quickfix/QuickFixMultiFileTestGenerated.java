/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.idea.quickfix;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/quickfix")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class QuickFixMultiFileTestGenerated extends AbstractQuickFixMultiFileTest {
    public void testAllFilesPresentInQuickfix() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
    }

    @TestMetadata("idea/testData/quickfix/addStarProjections")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AddStarProjections extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInAddStarProjections() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/addStarProjections"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

    }

    @TestMetadata("idea/testData/quickfix/autoImports")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AutoImports extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInAutoImports() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/autoImports"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

        @TestMetadata("ambiguousClassName.before.Main.kt")
        public void testAmbiguousClassName() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/ambiguousClassName.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("classImport.before.Main.kt")
        public void testClassImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/classImport.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("divOperator.before.Main.kt")
        public void testDivOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/divOperator.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("extensionFunctionImport.before.Main.kt")
        public void testExtensionFunctionImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/extensionFunctionImport.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("extensionFunctionImportImplicitReceiver.before.Main.kt")
        public void testExtensionFunctionImportImplicitReceiver() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/extensionFunctionImportImplicitReceiver.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("extensionPropertyImport.before.Main.kt")
        public void testExtensionPropertyImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/extensionPropertyImport.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("factoryFunctionFromLambda.before.Main.kt")
        public void testFactoryFunctionFromLambda() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/factoryFunctionFromLambda.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("falsePostfixOperator.before.Main.kt")
        public void testFalsePostfixOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/falsePostfixOperator.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("functionImport.before.Main.kt")
        public void testFunctionImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/functionImport.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("importInFirstPartInQualifiedExpression.before.Main.kt")
        public void testImportInFirstPartInQualifiedExpression() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/importInFirstPartInQualifiedExpression.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("importInFirstPartInUserType.before.Main.kt")
        public void testImportInFirstPartInUserType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/importInFirstPartInUserType.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("importTrait.before.Main.kt")
        public void testImportTrait() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/importTrait.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("infixCall.before.Main.kt")
        public void testInfixCall() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/infixCall.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("minusOperator.before.Main.kt")
        public void testMinusOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/minusOperator.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("nestedClass.before.Main.kt")
        public void testNestedClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/nestedClass.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportForFunInQualifiedNotFirst.before.Main.kt")
        public void testNoImportForFunInQualifiedNotFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportForFunInQualifiedNotFirst.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportForNestedInPrivate.before.Main.kt")
        public void testNoImportForNestedInPrivate() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportForNestedInPrivate.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportForPrivateClass.before.Main.kt")
        public void testNoImportForPrivateClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportForPrivateClass.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportInImports.before.Main.kt")
        public void testNoImportInImports() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportInImports.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportInQualifiedExpressionNotFirst.before.Main.kt")
        public void testNoImportInQualifiedExpressionNotFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportInQualifiedExpressionNotFirst.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportInQualifiedUserTypeNotFirst.before.Main.kt")
        public void testNoImportInQualifiedUserTypeNotFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportInQualifiedUserTypeNotFirst.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("noImportInSafeQualifiedExpressionNotFirst.before.Main.kt")
        public void testNoImportInSafeQualifiedExpressionNotFirst() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/noImportInSafeQualifiedExpressionNotFirst.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("objectImport.before.Main.kt")
        public void testObjectImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/objectImport.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("packageClass.before.Main.kt")
        public void testPackageClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/packageClass.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("plusOperator.before.Main.kt")
        public void testPlusOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/plusOperator.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("postfixOperator.before.Main.kt")
        public void testPostfixOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/postfixOperator.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("propertyImport.before.Main.kt")
        public void testPropertyImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/propertyImport.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("sameModuleImportPriority.before.Main.kt")
        public void testSameModuleImportPriority() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/sameModuleImportPriority.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("timesAssign.before.Main.kt")
        public void testTimesAssign() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/timesAssign.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("unaryMinusOperator.before.Main.kt")
        public void testUnaryMinusOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/unaryMinusOperator.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("unaryPlusOperator.before.Main.kt")
        public void testUnaryPlusOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/unaryPlusOperator.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        @TestMetadata("withSmartCastQualifier.before.Main.kt")
        public void testWithSmartCastQualifier() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/withSmartCastQualifier.before.Main.kt");
            doTestWithExtraFile(fileName);
        }
    }

    @TestMetadata("idea/testData/quickfix/changeSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ChangeSignature extends AbstractQuickFixMultiFileTest {
        @TestMetadata("addParameterWithImport.before.Main.kt")
        public void testAddParameterWithImport() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/changeSignature/addParameterWithImport.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        public void testAllFilesPresentInChangeSignature() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/changeSignature"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

        @TestMetadata("matchFunctionLiteralWithSAMType.before.Main.kt")
        public void testMatchFunctionLiteralWithSAMType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/changeSignature/matchFunctionLiteralWithSAMType.before.Main.kt");
            doTestWithExtraFile(fileName);
        }
    }

    @TestMetadata("idea/testData/quickfix/createFromUsage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CreateFromUsage extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInCreateFromUsage() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createClass")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateClass extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateClass() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class AnnotationEntry extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInAnnotationEntry() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/annotationEntry"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("nestedGroovyAnnotation.before.Main.kt")
                public void testNestedGroovyAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedGroovyAnnotation.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("nestedJavaAnnotation.before.Main.kt")
                public void testNestedJavaAnnotation() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedJavaAnnotation.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("nestedJavaAnnotationWithNamedArgs.before.Main.kt")
                public void testNestedJavaAnnotationWithNamedArgs() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/annotationEntry/nestedJavaAnnotationWithNamedArgs.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class CallExpression extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInCallExpression() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/callExpression"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("callInAnnotationEntryWithJavaQualifier.before.Main.kt")
                public void testCallInAnnotationEntryWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callInAnnotationEntryWithJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithExplicitParamNamesAndJavaQualifier.before.Main.kt")
                public void testCallWithExplicitParamNamesAndJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithExplicitParamNamesAndJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithFinalJavaSupertype.before.Main.kt")
                public void testCallWithFinalJavaSupertype() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithFinalJavaSupertype.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithGenericJavaReceiver.before.Main.kt")
                public void testCallWithGenericJavaReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithGenericJavaReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithGroovyClassQualifier.before.Main.kt")
                public void testCallWithGroovyClassQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithGroovyClassQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithJavaClassQualifier.before.Main.kt")
                public void testCallWithJavaClassQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaClassQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithJavaClassReceiver.before.Main.kt")
                public void testCallWithJavaClassReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaClassReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithJavaQualifierInMemberValDelegate.before.Main.kt")
                public void testCallWithJavaQualifierInMemberValDelegate() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithJavaQualifierInMemberValDelegate.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithSuperclassAndJavaReceiverNoConstructorParams.before.Main.kt")
                public void testCallWithSuperclassAndJavaReceiverNoConstructorParams() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSuperclassAndJavaReceiverNoConstructorParams.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithSuperclassConstructorParamsAndJavaReceiver.before.Main.kt")
                public void testCallWithSuperclassConstructorParamsAndJavaReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSuperclassConstructorParamsAndJavaReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("callWithSupertraitAndJavaReceiver.before.Main.kt")
                public void testCallWithSupertraitAndJavaReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/callWithSupertraitAndJavaReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class TypeArguments extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInTypeArguments() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                    }

                    @TestMetadata("javaClassMember.before.Main.kt")
                    public void testJavaClassMember() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMember.before.Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberInner.before.Main.kt")
                    public void testJavaClassMemberInner() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInner.before.Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberInnerPartialSubstitution.before.Main.kt")
                    public void testJavaClassMemberInnerPartialSubstitution() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInnerPartialSubstitution.before.Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberInnerWithReceiverArg.before.Main.kt")
                    public void testJavaClassMemberInnerWithReceiverArg() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberInnerWithReceiverArg.before.Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberPartialSubstitution.before.Main.kt")
                    public void testJavaClassMemberPartialSubstitution() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/callExpression/typeArguments/javaClassMemberPartialSubstitution.before.Main.kt");
                        doTestWithExtraFile(fileName);
                    }
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class DelegationSpecifier extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInDelegationSpecifier() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("delegatorToNestedJavaSupercall.before.Main.kt")
                public void testDelegatorToNestedJavaSupercall() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/delegatorToNestedJavaSupercall.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("delegatorToNestedJavaSupercallWithParamNames.before.Main.kt")
                public void testDelegatorToNestedJavaSupercallWithParamNames() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/delegatorToNestedJavaSupercallWithParamNames.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitDelegatorToNestedGroovySuperclass.before.Main.kt")
                public void testTraitDelegatorToNestedGroovySuperclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/traitDelegatorToNestedGroovySuperclass.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitDelegatorToNestedJavaSuperclass.before.Main.kt")
                public void testTraitDelegatorToNestedJavaSuperclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/delegationSpecifier/traitDelegatorToNestedJavaSuperclass.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ImportDirective extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInImportDirective() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/importDirective"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("annotationWithJavaQualifier.before.Main.kt")
                public void testAnnotationWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/annotationWithJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classWithGroovyQualifier.before.Main.kt")
                public void testClassWithGroovyQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/classWithGroovyQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classWithJavaQualifier.before.Main.kt")
                public void testClassWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/classWithJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryInJavaEnum.before.Main.kt")
                public void testEnumEntryInJavaEnum() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/enumEntryInJavaEnum.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumWithJavaQualifier.before.Main.kt")
                public void testEnumWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/enumWithJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("objectWithJavaQualifier.before.Main.kt")
                public void testObjectWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/objectWithJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitWithJavaQualifier.before.Main.kt")
                public void testTraitWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/importDirective/traitWithJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class ReferenceExpression extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInReferenceExpression() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/referenceExpression"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("classByNestedGroovyQualifier.before.Main.kt")
                public void testClassByNestedGroovyQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/classByNestedGroovyQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classByNestedJavaQualifier.before.Main.kt")
                public void testClassByNestedJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/classByNestedJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumByNestedJavaQualifier.before.Main.kt")
                public void testEnumByNestedJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumByNestedJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryWithJavaEnumQualifier.before.Main.kt")
                public void testEnumEntryWithJavaEnumQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaEnumQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryWithJavaEnumSuperclass.before.Main.kt")
                public void testEnumEntryWithJavaEnumSuperclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaEnumSuperclass.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryWithJavaNonEnumQualifier.before.Main.kt")
                public void testEnumEntryWithJavaNonEnumQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaNonEnumQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryWithJavaNonEnumSuperclass.before.Main.kt")
                public void testEnumEntryWithJavaNonEnumSuperclass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/enumEntryWithJavaNonEnumSuperclass.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("objectWithJavaQualifier.before.Main.kt")
                public void testObjectWithJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/objectWithJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitByNestedJavaQualifier.before.Main.kt")
                public void testTraitByNestedJavaQualifier() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/referenceExpression/traitByNestedJavaQualifier.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class TypeReference extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInTypeReference() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createClass/typeReference"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("annotationJavaTypeReceiver.before.Main.kt")
                public void testAnnotationJavaTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/annotationJavaTypeReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classGroovyTypeReceiver.before.Main.kt")
                public void testClassGroovyTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/classGroovyTypeReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("classJavaTypeReceiver.before.Main.kt")
                public void testClassJavaTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/classJavaTypeReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumEntryJavaEnumReceiver.before.Main.kt")
                public void testEnumEntryJavaEnumReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/enumEntryJavaEnumReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("enumJavaTypeReceiver.before.Main.kt")
                public void testEnumJavaTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/enumJavaTypeReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("traitJavaTypeReceiver.before.Main.kt")
                public void testTraitJavaTypeReceiver() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createClass/typeReference/traitJavaTypeReceiver.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateFunction extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateFunction() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction/call")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Call extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInCall() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction/call"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("extensionFunOnGroovyType.before.Main.kt")
                public void testExtensionFunOnGroovyType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/extensionFunOnGroovyType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("extensionFunOnJavaType.before.Main.kt")
                public void testExtensionFunOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/extensionFunOnJavaType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("funOnGroovyType.before.Main.kt")
                public void testFunOnGroovyType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/funOnGroovyType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("funOnJavaInterface.before.Main.kt")
                public void testFunOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/funOnJavaInterface.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("funOnJavaType.before.Main.kt")
                public void testFunOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/funOnJavaType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("genericFunOnJavaType.before.Main.kt")
                public void testGenericFunOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/genericFunOnJavaType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticExtensionFunOnJavaClass.before.Main.kt")
                public void testStaticExtensionFunOnJavaClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/staticExtensionFunOnJavaClass.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticFunOnJavaClass.before.Main.kt")
                public void testStaticFunOnJavaClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/staticFunOnJavaClass.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticFunOnJavaInterface.before.Main.kt")
                public void testStaticFunOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/staticFunOnJavaInterface.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class TypeArguments extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInTypeArguments() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                    }

                    @TestMetadata("javaClassMember.before.Main.kt")
                    public void testJavaClassMember() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMember.before.Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberPartialSubstitution.before.Main.kt")
                    public void testJavaClassMemberPartialSubstitution() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMemberPartialSubstitution.before.Main.kt");
                        doTestWithExtraFile(fileName);
                    }

                    @TestMetadata("javaClassMemberWithReceiverArg.before.Main.kt")
                    public void testJavaClassMemberWithReceiverArg() throws Exception {
                        String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createFunction/call/typeArguments/javaClassMemberWithReceiverArg.before.Main.kt");
                        doTestWithExtraFile(fileName);
                    }
                }
            }

        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateSecondaryConstructor extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateSecondaryConstructor() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createSecondaryConstructor"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("delegatorToSuperCallJavaClass.before.Main.kt")
            public void testDelegatorToSuperCallJavaClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/delegatorToSuperCallJavaClass.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("groovyConstructor.before.Main.kt")
            public void testGroovyConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/groovyConstructor.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("javaConstructor.before.Main.kt")
            public void testJavaConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/javaConstructor.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("superCallJavaClass.before.Main.kt")
            public void testSuperCallJavaClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createSecondaryConstructor/superCallJavaClass.before.Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class CreateVariable extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInCreateVariable() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable/parameter")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Parameter extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInParameter() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable/parameter"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("platformType.before.Main.kt")
                public void testPlatformType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/parameter/platformType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }

            @TestMetadata("idea/testData/quickfix/createFromUsage/createVariable/property")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Property extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInProperty() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/createFromUsage/createVariable/property"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("extensionValOnGroovyType.before.Main.kt")
                public void testExtensionValOnGroovyType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/extensionValOnGroovyType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("extensionValOnJavaType.before.Main.kt")
                public void testExtensionValOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/extensionValOnJavaType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticExtensionValOnJavaType.before.Main.kt")
                public void testStaticExtensionValOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/staticExtensionValOnJavaType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticValOnJavaClass.before.Main.kt")
                public void testStaticValOnJavaClass() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/staticValOnJavaClass.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticValOnJavaInterface.before.Main.kt")
                public void testStaticValOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/staticValOnJavaInterface.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("staticVarOnJavaInterface.before.Main.kt")
                public void testStaticVarOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/staticVarOnJavaInterface.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("valOnGroovyType.before.Main.kt")
                public void testValOnGroovyType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/valOnGroovyType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("valOnJavaInterface.before.Main.kt")
                public void testValOnJavaInterface() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/valOnJavaInterface.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("valOnJavaType.before.Main.kt")
                public void testValOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/valOnJavaType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }

                @TestMetadata("varOnJavaType.before.Main.kt")
                public void testVarOnJavaType() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/createFromUsage/createVariable/property/varOnJavaType.before.Main.kt");
                    doTestWithExtraFile(fileName);
                }
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/migration")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Migration extends AbstractQuickFixMultiFileTest {
        @TestMetadata("addInitKeywordMultiple.before.Main.kt")
        public void testAddInitKeywordMultiple() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/addInitKeywordMultiple.before.Main.kt");
            doTestWithExtraFile(fileName);
        }

        public void testAllFilesPresentInMigration() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/migration/lambdaSyntax")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LambdaSyntax extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInLambdaSyntax() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/lambdaSyntax"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("lambdaSyntaxMultiple.before.Main.kt")
            public void testLambdaSyntaxMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/lambdaSyntax/lambdaSyntaxMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/migration/migrateJavaAnnotationMethodCall")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MigrateJavaAnnotationMethodCall extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInMigrateJavaAnnotationMethodCall() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/migrateJavaAnnotationMethodCall"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("basicMultiple.before.Main.kt")
            public void testBasicMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/migrateJavaAnnotationMethodCall/basicMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("wholeFileMultiple.before.Main.kt")
            public void testWholeFileMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/migrateJavaAnnotationMethodCall/wholeFileMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

        @TestMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ReplaceJavaClassWithKClassForJavaAnnotation extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInReplaceJavaClassWithKClassForJavaAnnotation() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("arrayWithExplicitTypeArgumentMultiple.before.Main.kt")
            public void testArrayWithExplicitTypeArgumentMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation/arrayWithExplicitTypeArgumentMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("basicMultiple.before.Main.kt")
            public void testBasicMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation/basicMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("implicitParameterMultiple.before.Main.kt")
            public void testImplicitParameterMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation/implicitParameterMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("manyFilesMultiple.before.Main.kt")
            public void testManyFilesMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation/manyFilesMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("nonConstMultiple.before.Main.kt")
            public void testNonConstMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation/nonConstMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("severalArgsMultiple.before.Main.kt")
            public void testSeveralArgsMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation/severalArgsMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("unresolvedMultiple.before.Main.kt")
            public void testUnresolvedMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation/unresolvedMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("valueAsVarargMultiple.before.Main.kt")
            public void testValueAsVarargMultiple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/migration/replaceJavaClassWithKClassForJavaAnnotation/valueAsVarargMultiple.before.Main.kt");
                doTestWithExtraFile(fileName);
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Modifiers extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInModifiers() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AddOpenToClassDeclaration extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInAddOpenToClassDeclaration() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FinalJavaClass extends AbstractQuickFixMultiFileTest {
                public void testAllFilesPresentInFinalJavaClass() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                }

                @TestMetadata("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass/javaCode")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class JavaCode extends AbstractQuickFixMultiFileTest {
                    public void testAllFilesPresentInJavaCode() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/modifiers/addOpenToClassDeclaration/finalJavaClass/javaCode"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
                    }

                }
            }
        }
    }

    @TestMetadata("idea/testData/quickfix/nullables")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Nullables extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInNullables() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/nullables"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

    }

    @TestMetadata("idea/testData/quickfix/override")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Override extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInOverride() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/override"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/override/nothingToOverride")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class NothingToOverride extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInNothingToOverride() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/override/nothingToOverride"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

            @TestMetadata("import.before.Main.kt")
            public void testImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/override/nothingToOverride/import.before.Main.kt");
                doTestWithExtraFile(fileName);
            }

            @TestMetadata("twoPackages.before.Main.kt")
            public void testTwoPackages() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/override/nothingToOverride/twoPackages.before.Main.kt");
                doTestWithExtraFile(fileName);
            }
        }

    }

    @TestMetadata("idea/testData/quickfix/suppress")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Suppress extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInSuppress() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/suppress"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

        @TestMetadata("idea/testData/quickfix/suppress/forStatement")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ForStatement extends AbstractQuickFixMultiFileTest {
            public void testAllFilesPresentInForStatement() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/suppress/forStatement"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
            }

        }
    }

    @TestMetadata("idea/testData/quickfix/typeImports")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeImports extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInTypeImports() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/typeImports"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

        @TestMetadata("importFromAnotherFile.before.Main.kt")
        public void testImportFromAnotherFile() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/quickfix/typeImports/importFromAnotherFile.before.Main.kt");
            doTestWithExtraFile(fileName);
        }
    }

    @TestMetadata("idea/testData/quickfix/typeMismatch")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class TypeMismatch extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInTypeMismatch() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/typeMismatch"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

    }

    @TestMetadata("idea/testData/quickfix/variables")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Variables extends AbstractQuickFixMultiFileTest {
        public void testAllFilesPresentInVariables() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/quickfix/variables"), Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"), true);
        }

    }

}
