package

public val a: [ERROR : Return not allowed]
public fun bbb(): kotlin.Unit
public fun blockAndAndMismatch(): kotlin.Int
public fun blockAndAndMismatch1(): kotlin.Int
public fun blockAndAndMismatch2(): kotlin.Int
public fun blockAndAndMismatch3(): kotlin.Int
public fun blockAndAndMismatch4(): kotlin.Int
public fun blockAndAndMismatch5(): kotlin.Int
public fun blockNoReturnIfEmptyIf(): kotlin.Int
public fun blockNoReturnIfUnitInOneBranch(): kotlin.Int
public fun blockNoReturnIfValDeclaration(): kotlin.Int
public fun blockReturnUnitMismatch(): kotlin.Int
public fun blockReturnValueTypeMatch(): kotlin.Int
public fun blockReturnValueTypeMatch1(): kotlin.Int
public fun blockReturnValueTypeMatch10(): kotlin.Int
public fun blockReturnValueTypeMatch11(): kotlin.Int
public fun blockReturnValueTypeMatch12(): kotlin.Int
public fun blockReturnValueTypeMatch2(): kotlin.Int
public fun blockReturnValueTypeMatch3(): kotlin.Int
public fun blockReturnValueTypeMatch4(): kotlin.Int
public fun blockReturnValueTypeMatch5(): kotlin.Int
public fun blockReturnValueTypeMatch6(): kotlin.Int
public fun blockReturnValueTypeMatch7(): kotlin.Int
public fun blockReturnValueTypeMatch8(): kotlin.Int
public fun blockReturnValueTypeMatch9(): kotlin.Int
public fun blockReturnValueTypeMismatch(): kotlin.Int
public fun blockReturnValueTypeMismatchUnit(): kotlin.Int
public fun f(): kotlin.Int
public fun f1(): kotlin.Int
public fun f2(): kotlin.Int
public fun foo(/*0*/ expr: kotlin.text.StringBuilder /* = java.lang.StringBuilder */): kotlin.Int
public fun illegalConstantBlock(): kotlin.String
public fun illegalConstantBody(): kotlin.Int
public fun illegalIfBlock(): kotlin.Boolean
public fun illegalIfBody(): kotlin.Int
public fun illegalReturnIf(): kotlin.Char
public fun intBlock(): kotlin.Int
public fun intBlock1(): kotlin.Int
public fun intEmpty(): kotlin.Int
public fun intFunctionLiteral(): kotlin.Int
public fun intShort(): kotlin.Int
public fun intShortInfer(): kotlin.Int
public fun intString(): kotlin.Int
public fun nonBlockNoReturnIfUnitInOneBranch(): kotlin.Int
public fun nonBlockReturnIfEmptyIf(): kotlin.Int
public fun none(): kotlin.Unit
public fun returnNothing(): kotlin.Nothing
public fun test1(): kotlin.Any
public fun test2(): kotlin.Any
public fun test3(): kotlin.Any
public fun test4(): () -> kotlin.Unit
public fun test5(): kotlin.Any
public fun test6(): kotlin.Any
public fun testFunctionLiterals(): kotlin.Unit
public fun unitEmpty(): kotlin.Unit
public fun unitEmptyInfer(): kotlin.Unit
public fun unitEmptyReturn(): kotlin.Unit
public fun unitIntReturn(): kotlin.Unit
public fun unitShort(): kotlin.Unit
public fun unitShortConv(): kotlin.Unit
public fun unitShortNull(): kotlin.Unit
public fun unitUnitReturn(): kotlin.Unit

public final class A {
    public constructor A()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class B {
    public constructor B()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected final fun f(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
