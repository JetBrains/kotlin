/list.kt:(91,110): info: Generated Viper text for empty_list_expr_get:
field special$size: Ref

method global$fun_empty_list_expr_get$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$s: Ref
  var anonymous$0: Ref
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  local0$s := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(anonymous$0,
    dom$RuntimeType$intToRef(0))
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


method pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures dom$RuntimeType$intFromRef(ret.special$size) >= 0
  ensures dom$RuntimeType$intFromRef(ret.special$size) == 0


/list.kt:(127,146): warning: Invalid index for the following list sub-expression, the index may be greater than the list's size.

/list.kt:(168,182): info: Generated Viper text for empty_list_get:
field special$size: Ref

method global$fun_empty_list_get$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$myList: Ref
  var local0$s: Ref
  ret$0 := dom$RuntimeType$unitValue()
  local0$myList := pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  local0$s := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local0$myList,
    dom$RuntimeType$intToRef(0))
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


method pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures dom$RuntimeType$intFromRef(ret.special$size) >= 0
  ensures dom$RuntimeType$intFromRef(ret.special$size) == 0


/list.kt:(239,248): warning: Invalid index for list 'myList', the index may be greater than the list's size.

/list.kt:(270,281): info: Generated Viper text for unsafe_last:
field special$size: Ref

method global$fun_unsafe_last$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Int(local$l: Ref)
  returns (ret$0: Ref)
  requires acc(local$l.special$size, write)
  requires dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures acc(local$l.special$size, write)
  ensures dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$l), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  anonymous$0 := local$l.special$size
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$intType())
  ret$0 := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$l,
    special$minusInts(anonymous$0, dom$RuntimeType$intToRef(1)))
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


/list.kt:(315,328): warning: Invalid index for list 'l', the index may be less than zero.

/list.kt:(350,357): info: Generated Viper text for add_get:
field special$size: Ref

method global$fun_add_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$return$T_Unit(local$l: Ref)
  returns (ret$0: Ref)
  requires acc(local$l.special$size, write)
  requires dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures acc(local$l.special$size, write)
  ensures dom$RuntimeType$intFromRef(local$l.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var anonymous$0: Ref
  var local0$n: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$l), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_MutableList())
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := pkg$kotlin$collections$class_MutableList$fun_add$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Boolean(local$l,
    dom$RuntimeType$intToRef(1))
  local0$n := pkg$kotlin$collections$class_MutableList$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Int(local$l,
    dom$RuntimeType$intToRef(1))
  label label$ret$0
}

method pkg$kotlin$collections$class_MutableList$fun_add$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Boolean(this: Ref,
  local$element: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size)) + 1


method pkg$kotlin$collections$class_MutableList$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Int(this: Ref,
  local$index: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires dom$RuntimeType$intFromRef(local$index) >= 0
  requires dom$RuntimeType$intFromRef(this.special$size) >
    dom$RuntimeType$intFromRef(local$index)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))


/list.kt:(406,410): warning: Invalid index for list 'l', the index may be greater than the list's size.

/list.kt:(432,446): info: Generated Viper text for empty_list_sub:
field special$size: Ref

method global$fun_empty_list_sub$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$l: Ref
  var anonymous$0: Ref
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  local0$l := pkg$kotlin$collections$class_List$fun_subList$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$return$T_class_pkg$kotlin$collections$global$class_List(anonymous$0,
    dom$RuntimeType$intToRef(0), dom$RuntimeType$intToRef(1))
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_subList$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$return$T_class_pkg$kotlin$collections$global$class_List(this: Ref,
  local$fromIndex: Ref, local$toIndex: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires dom$RuntimeType$intFromRef(local$fromIndex) <=
    dom$RuntimeType$intFromRef(local$toIndex)
  requires dom$RuntimeType$intFromRef(local$fromIndex) >= 0
  requires dom$RuntimeType$intFromRef(local$toIndex) <=
    dom$RuntimeType$intFromRef(this.special$size)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures dom$RuntimeType$intFromRef(ret.special$size) >= 0
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))
  ensures dom$RuntimeType$intFromRef(ret.special$size) ==
    dom$RuntimeType$intFromRef(local$toIndex) -
    dom$RuntimeType$intFromRef(local$fromIndex)


method pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures dom$RuntimeType$intFromRef(ret.special$size) >= 0
  ensures dom$RuntimeType$intFromRef(ret.special$size) == 0


/list.kt:(463,493): warning: Invalid sub-list range for the following list sub-expression, the range may be greater than the list's size.

/list.kt:(515,538): info: Generated Viper text for empty_list_sub_negative:
field special$size: Ref

method global$fun_empty_list_sub_negative$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$l: Ref
  var anonymous$0: Ref
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  local0$l := pkg$kotlin$collections$class_List$fun_subList$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$return$T_class_pkg$kotlin$collections$global$class_List(anonymous$0,
    dom$RuntimeType$intToRef(-1), dom$RuntimeType$intToRef(1))
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_subList$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$return$T_class_pkg$kotlin$collections$global$class_List(this: Ref,
  local$fromIndex: Ref, local$toIndex: Ref)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires dom$RuntimeType$intFromRef(this.special$size) >= 0
  requires dom$RuntimeType$intFromRef(local$fromIndex) <=
    dom$RuntimeType$intFromRef(local$toIndex)
  requires dom$RuntimeType$intFromRef(local$fromIndex) >= 0
  requires dom$RuntimeType$intFromRef(local$toIndex) <=
    dom$RuntimeType$intFromRef(this.special$size)
  ensures acc(this.special$size, write)
  ensures dom$RuntimeType$intFromRef(this.special$size) >= 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures dom$RuntimeType$intFromRef(ret.special$size) >= 0
  ensures dom$RuntimeType$intFromRef(this.special$size) ==
    old(dom$RuntimeType$intFromRef(this.special$size))
  ensures dom$RuntimeType$intFromRef(ret.special$size) ==
    dom$RuntimeType$intFromRef(local$toIndex) -
    dom$RuntimeType$intFromRef(local$fromIndex)


method pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures dom$RuntimeType$intFromRef(ret.special$size) >= 0
  ensures dom$RuntimeType$intFromRef(ret.special$size) == 0


/list.kt:(555,586): warning: Invalid sub-list range for the following list sub-expression, the range may be including negative indices.
