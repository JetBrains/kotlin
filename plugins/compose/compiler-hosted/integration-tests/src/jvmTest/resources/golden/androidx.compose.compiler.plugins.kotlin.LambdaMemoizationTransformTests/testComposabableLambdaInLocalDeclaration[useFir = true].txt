//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable

@Composable
fun Test(enabled: Boolean) {
    val content: @Composable () -> Unit = {
        Display("$enabled")
    }
    Wrap(content)
}

//
// Transformed IR
// ------------------------------------------

@Composable
@FunctionKeyMeta(key = -378182080, startOffset = 93, endOffset = 279)
fun Test(enabled: Boolean, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)N(enabled)<{>,<Wrap(c...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(enabled)) 0b0100 else 0b0010
  }
  if (%composer.shouldExecute(%dirty and 0b0011 != 0b0010, %dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    val content = rememberComposableLambda(<>, true, { %composer: Composer?, %changed: Int ->
      sourceInformation(%composer, "C<Displa...>:Test.kt")
      if (%composer.shouldExecute(%changed and 0b0011 != 0b0010, %changed and 0b0001)) {
        if (isTraceInProgress()) {
          traceEventStart(<>, %changed, -1, <>)
        }
        Display("%enabled", %composer, 0)
        if (isTraceInProgress()) {
          traceEventEnd()
        }
      } else {
        %composer.skipToGroupEnd()
      }
    }, %composer, 0b00110110)
    Wrap(content, %composer, 0b0110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(enabled, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
