package test

kotlin.annotation.annotation() internal final class A : kotlin.Annotation {
    /*primary*/ public constructor A()
}

kotlin.annotation.annotation() internal final class B : kotlin.Annotation {
    /*primary*/ public constructor B()
}

internal final enum class E : kotlin.Enum<test.E> {
    /*primary*/ private constructor E(/*0*/ test.A() x: kotlin.String, /*1*/ test.B() y: kotlin.Int)
    test.A() internal final val x: kotlin.String
        internal final fun <get-x>(): kotlin.String
    test.B() internal final val y: kotlin.Int
        internal final fun <get-y>(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.E): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.E
    public final /*synthesized*/ fun values(): kotlin.Array<test.E>
}
