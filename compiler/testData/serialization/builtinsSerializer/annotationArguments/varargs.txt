package test

internal final enum class My : kotlin.Enum<test.My> {
    public enum entry ALPHA : test.My {
        private constructor ALPHA()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.My): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
    }

    public enum entry BETA : test.My {
        private constructor BETA()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.My): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
    }

    public enum entry OMEGA : test.My {
        private constructor OMEGA()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.My): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
    }

    private constructor My()
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.My): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.My
    public final /*synthesized*/ fun values(): kotlin.Array<test.My>
}

kotlin.annotation.annotation() internal final class ann : kotlin.Annotation {
    public constructor ann(/*0*/ vararg m: test.My /*kotlin.Array<out test.My>*/)
    internal final val m: kotlin.Array<out test.My>
}

test.ann(m = {My.ALPHA, My.BETA}) kotlin.annotation.annotation() internal final class annotated : kotlin.Annotation {
    public constructor annotated()
}
