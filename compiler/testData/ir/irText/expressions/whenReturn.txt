FILE /whenReturn.kt
  FUN public fun toString(grade: kotlin.String): kotlin.String
    VALUE_PARAMETER value-parameter grade: kotlin.String
    BLOCK_BODY
      BLOCK type=kotlin.Nothing origin=WHEN
        VAR IR_TEMPORARY_VARIABLE val tmp0_subject: kotlin.String
          GET_VAR 'value-parameter grade: String' type=kotlin.String origin=null
        WHEN type=kotlin.Nothing origin=WHEN
          BRANCH
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'tmp0_subject: String' type=kotlin.String origin=null
              arg1: CONST String type=kotlin.String value='A'
            then: RETURN type=kotlin.Nothing from='toString(String): String'
              CONST String type=kotlin.String value='Excellent'
          BRANCH
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'tmp0_subject: String' type=kotlin.String origin=null
              arg1: CONST String type=kotlin.String value='B'
            then: RETURN type=kotlin.Nothing from='toString(String): String'
              CONST String type=kotlin.String value='Good'
          BRANCH
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'tmp0_subject: String' type=kotlin.String origin=null
              arg1: CONST String type=kotlin.String value='C'
            then: RETURN type=kotlin.Nothing from='toString(String): String'
              CONST String type=kotlin.String value='Mediocre'
          BRANCH
            if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'tmp0_subject: String' type=kotlin.String origin=null
              arg1: CONST String type=kotlin.String value='D'
            then: RETURN type=kotlin.Nothing from='toString(String): String'
              CONST String type=kotlin.String value='Fair'
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value='true'
            then: RETURN type=kotlin.Nothing from='toString(String): String'
              CONST String type=kotlin.String value='Failure'
      RETURN type=kotlin.Nothing from='toString(String): String'
        CONST String type=kotlin.String value='???'

