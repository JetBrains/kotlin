@R|second/Anno|(i = Int(1).R|kotlin/Int.plus|(R|second/outer|))  second/Base
  context -> FirConstructorSymbol second/MyClass.MyClass
  anchor -> [FirRegularClassSymbol second/MyClass]

@R|second/Anno|(i = Int(1).R|kotlin/Int.plus|(R|second/outer|))  second/Base
  context -> FirConstructorSymbol second/MyClass.MyClass
  anchor -> [FirRegularClassSymbol second/MyClass]

FILE: [ResolvedTo(IMPORTS)] superTypeCallNameClashWithAnnotationImplicitConstructorScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypeCallNameClashWithAnnotationImplicitConstructorScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=second/Anno.i] i: R|kotlin/Int|): R|second/Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val i: R|kotlin/Int| = R|<local>/i|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/Int|

        }

        public open [ResolvedTo(SUPER_TYPES)] class Base : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor(): R|second/Base| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val outer: R|kotlin/Int| = Int(0)
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|

        public? final? const [ResolvedTo(RAW_FIR)] val inner: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class MyClass : R|@R|second/Anno|(i = Int(1).R|kotlin/Int.plus|(R|second/outer|))  second/Base| {
            public? [ResolvedTo(TYPES)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|@R|second/Anno|(i = Int(1).R|kotlin/Int.plus|(R|second/outer|))  second/Base|>
            }

            public open [ResolvedTo(RAW_FIR)] class Base : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor(): R|second/MyClass.Base| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

            public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|second/MyClass.Companion| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? const [ResolvedTo(RAW_FIR)] val outer: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): <implicit>

                public? final? const [ResolvedTo(RAW_FIR)] val inner: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): <implicit>

            }

        }
