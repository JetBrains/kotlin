@file:kotlin.jvm.JvmMultifileClass
@file:kotlin.jvm.JvmName("ArraysKt")

package kotlin.collections

//
// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

import kotlin.comparisons.*

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun <T> Array<out T>.component1(): T

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ByteArray.component1(): Byte

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ShortArray.component1(): Short

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun IntArray.component1(): Int

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun LongArray.component1(): Long

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun FloatArray.component1(): Float

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun DoubleArray.component1(): Double

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun BooleanArray.component1(): Boolean

/**
 * Returns 1st *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun CharArray.component1(): Char

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun <T> Array<out T>.component2(): T

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ByteArray.component2(): Byte

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ShortArray.component2(): Short

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun IntArray.component2(): Int

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun LongArray.component2(): Long

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun FloatArray.component2(): Float

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun DoubleArray.component2(): Double

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun BooleanArray.component2(): Boolean

/**
 * Returns 2nd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun CharArray.component2(): Char

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun <T> Array<out T>.component3(): T

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ByteArray.component3(): Byte

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ShortArray.component3(): Short

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun IntArray.component3(): Int

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun LongArray.component3(): Long

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun FloatArray.component3(): Float

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun DoubleArray.component3(): Double

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun BooleanArray.component3(): Boolean

/**
 * Returns 3rd *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun CharArray.component3(): Char

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun <T> Array<out T>.component4(): T

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ByteArray.component4(): Byte

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ShortArray.component4(): Short

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun IntArray.component4(): Int

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun LongArray.component4(): Long

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun FloatArray.component4(): Float

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun DoubleArray.component4(): Double

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun BooleanArray.component4(): Boolean

/**
 * Returns 4th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun CharArray.component4(): Char

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun <T> Array<out T>.component5(): T

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ByteArray.component5(): Byte

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun ShortArray.component5(): Short

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun IntArray.component5(): Int

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun LongArray.component5(): Long

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun FloatArray.component5(): Float

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun DoubleArray.component5(): Double

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun BooleanArray.component5(): Boolean

/**
 * Returns 5th *element* from the collection.
 */
@kotlin.internal.InlineOnly
public header inline operator fun CharArray.component5(): Char

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun ByteArray.contains(element: Byte): Boolean

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun ShortArray.contains(element: Short): Boolean

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun IntArray.contains(element: Int): Boolean

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun LongArray.contains(element: Long): Boolean

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun FloatArray.contains(element: Float): Boolean

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun DoubleArray.contains(element: Double): Boolean

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun BooleanArray.contains(element: Boolean): Boolean

/**
 * Returns `true` if [element] is found in the array.
 */
public header operator fun CharArray.contains(element: Char): Boolean

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.elementAt(index: Int): T

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.elementAt(index: Int): Byte

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.elementAt(index: Int): Short

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.elementAt(index: Int): Int

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.elementAt(index: Int): Long

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.elementAt(index: Int): Float

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.elementAt(index: Int): Double

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.elementAt(index: Int): Boolean

/**
 * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.elementAt(index: Int): Char

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.elementAtOrNull(index: Int): T?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.elementAtOrNull(index: Int): Byte?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.elementAtOrNull(index: Int): Short?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.elementAtOrNull(index: Int): Int?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.elementAtOrNull(index: Int): Long?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.elementAtOrNull(index: Int): Float?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.elementAtOrNull(index: Int): Double?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.elementAtOrNull(index: Int): Boolean?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.elementAtOrNull(index: Int): Char?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.find(predicate: (Short) -> Boolean): Short?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.find(predicate: (Int) -> Boolean): Int?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.find(predicate: (Long) -> Boolean): Long?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.find(predicate: (Float) -> Boolean): Float?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean?

/**
 * Returns the first element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.find(predicate: (Char) -> Boolean): Char?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char?

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun <T> Array<out T>.first(): T

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun ByteArray.first(): Byte

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun ShortArray.first(): Short

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun IntArray.first(): Int

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun LongArray.first(): Long

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun FloatArray.first(): Float

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun DoubleArray.first(): Double

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun BooleanArray.first(): Boolean

/**
 * Returns first element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun CharArray.first(): Char

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun ShortArray.first(predicate: (Short) -> Boolean): Short

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun IntArray.first(predicate: (Int) -> Boolean): Int

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun LongArray.first(predicate: (Long) -> Boolean): Long

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun FloatArray.first(predicate: (Float) -> Boolean): Float

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean

/**
 * Returns the first element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun CharArray.first(predicate: (Char) -> Boolean): Char

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun <T> Array<out T>.firstOrNull(): T?

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun ByteArray.firstOrNull(): Byte?

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun ShortArray.firstOrNull(): Short?

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun IntArray.firstOrNull(): Int?

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun LongArray.firstOrNull(): Long?

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun FloatArray.firstOrNull(): Float?

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun DoubleArray.firstOrNull(): Double?

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun BooleanArray.firstOrNull(): Boolean?

/**
 * Returns the first element, or `null` if the array is empty.
 */
public header fun CharArray.firstOrNull(): Char?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean?

/**
 * Returns the first element matching the given [predicate], or `null` if element was not found.
 */
public header inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char?

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean

/**
 * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun <T> Array<out T>.getOrNull(index: Int): T?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun ByteArray.getOrNull(index: Int): Byte?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun ShortArray.getOrNull(index: Int): Short?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun IntArray.getOrNull(index: Int): Int?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun LongArray.getOrNull(index: Int): Long?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun FloatArray.getOrNull(index: Int): Float?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun DoubleArray.getOrNull(index: Int): Double?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun BooleanArray.getOrNull(index: Int): Boolean?

/**
 * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.
 */
public header fun CharArray.getOrNull(index: Int): Char?

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun ByteArray.indexOf(element: Byte): Int

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun ShortArray.indexOf(element: Short): Int

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun IntArray.indexOf(element: Int): Int

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun LongArray.indexOf(element: Long): Int

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun FloatArray.indexOf(element: Float): Int

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun DoubleArray.indexOf(element: Double): Int

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun BooleanArray.indexOf(element: Boolean): Int

/**
 * Returns first index of [element], or -1 if the array does not contain element.
 */
public header fun CharArray.indexOf(element: Char): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int

/**
 * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int

/**
 * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.
 */
public header inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun <T> Array<out T>.last(): T

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun ByteArray.last(): Byte

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun ShortArray.last(): Short

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun IntArray.last(): Int

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun LongArray.last(): Long

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun FloatArray.last(): Float

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun DoubleArray.last(): Double

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun BooleanArray.last(): Boolean

/**
 * Returns the last element.
 * @throws [NoSuchElementException] if the array is empty.
 */
public header fun CharArray.last(): Char

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun ShortArray.last(predicate: (Short) -> Boolean): Short

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun IntArray.last(predicate: (Int) -> Boolean): Int

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun LongArray.last(predicate: (Long) -> Boolean): Long

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun FloatArray.last(predicate: (Float) -> Boolean): Float

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean

/**
 * Returns the last element matching the given [predicate].
 * @throws [NoSuchElementException] if no such element is found.
 */
public header inline fun CharArray.last(predicate: (Char) -> Boolean): Char

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun ByteArray.lastIndexOf(element: Byte): Int

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun ShortArray.lastIndexOf(element: Short): Int

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun IntArray.lastIndexOf(element: Int): Int

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun LongArray.lastIndexOf(element: Long): Int

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun FloatArray.lastIndexOf(element: Float): Int

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun DoubleArray.lastIndexOf(element: Double): Int

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun BooleanArray.lastIndexOf(element: Boolean): Int

/**
 * Returns last index of [element], or -1 if the array does not contain element.
 */
public header fun CharArray.lastIndexOf(element: Char): Int

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun <T> Array<out T>.lastOrNull(): T?

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun ByteArray.lastOrNull(): Byte?

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun ShortArray.lastOrNull(): Short?

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun IntArray.lastOrNull(): Int?

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun LongArray.lastOrNull(): Long?

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun FloatArray.lastOrNull(): Float?

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun DoubleArray.lastOrNull(): Double?

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun BooleanArray.lastOrNull(): Boolean?

/**
 * Returns the last element, or `null` if the array is empty.
 */
public header fun CharArray.lastOrNull(): Char?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean?

/**
 * Returns the last element matching the given [predicate], or `null` if no such element was found.
 */
public header inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char?

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun <T> Array<out T>.single(): T

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun ByteArray.single(): Byte

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun ShortArray.single(): Short

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun IntArray.single(): Int

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun LongArray.single(): Long

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun FloatArray.single(): Float

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun DoubleArray.single(): Double

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun BooleanArray.single(): Boolean

/**
 * Returns the single element, or throws an exception if the array is empty or has more than one element.
 */
public header fun CharArray.single(): Char

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun ShortArray.single(predicate: (Short) -> Boolean): Short

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun IntArray.single(predicate: (Int) -> Boolean): Int

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun LongArray.single(predicate: (Long) -> Boolean): Long

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun FloatArray.single(predicate: (Float) -> Boolean): Float

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean

/**
 * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.
 */
public header inline fun CharArray.single(predicate: (Char) -> Boolean): Char

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun <T> Array<out T>.singleOrNull(): T?

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun ByteArray.singleOrNull(): Byte?

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun ShortArray.singleOrNull(): Short?

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun IntArray.singleOrNull(): Int?

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun LongArray.singleOrNull(): Long?

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun FloatArray.singleOrNull(): Float?

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun DoubleArray.singleOrNull(): Double?

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun BooleanArray.singleOrNull(): Boolean?

/**
 * Returns single element, or `null` if the array is empty or has more than one element.
 */
public header fun CharArray.singleOrNull(): Char?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean?

/**
 * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.
 */
public header inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char?

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun <T> Array<out T>.drop(n: Int): List<T>

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun ByteArray.drop(n: Int): List<Byte>

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun ShortArray.drop(n: Int): List<Short>

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun IntArray.drop(n: Int): List<Int>

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun LongArray.drop(n: Int): List<Long>

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun FloatArray.drop(n: Int): List<Float>

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun DoubleArray.drop(n: Int): List<Double>

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun BooleanArray.drop(n: Int): List<Boolean>

/**
 * Returns a list containing all elements except first [n] elements.
 */
public header fun CharArray.drop(n: Int): List<Char>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun <T> Array<out T>.dropLast(n: Int): List<T>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun ByteArray.dropLast(n: Int): List<Byte>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun ShortArray.dropLast(n: Int): List<Short>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun IntArray.dropLast(n: Int): List<Int>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun LongArray.dropLast(n: Int): List<Long>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun FloatArray.dropLast(n: Int): List<Float>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun DoubleArray.dropLast(n: Int): List<Double>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun BooleanArray.dropLast(n: Int): List<Boolean>

/**
 * Returns a list containing all elements except last [n] elements.
 */
public header fun CharArray.dropLast(n: Int): List<Char>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean>

/**
 * Returns a list containing all elements except last elements that satisfy the given [predicate].
 */
public header inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean>

/**
 * Returns a list containing all elements except first elements that satisfy the given [predicate].
 */
public header inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean>

/**
 * Returns a list containing only elements matching the given [predicate].
 */
public header inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <T> Array<out T>.filterIndexed(predicate: (Int, T) -> Boolean): List<T>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun ByteArray.filterIndexed(predicate: (Int, Byte) -> Boolean): List<Byte>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun ShortArray.filterIndexed(predicate: (Int, Short) -> Boolean): List<Short>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun IntArray.filterIndexed(predicate: (Int, Int) -> Boolean): List<Int>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun LongArray.filterIndexed(predicate: (Int, Long) -> Boolean): List<Long>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun FloatArray.filterIndexed(predicate: (Int, Float) -> Boolean): List<Float>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun DoubleArray.filterIndexed(predicate: (Int, Double) -> Boolean): List<Double>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun BooleanArray.filterIndexed(predicate: (Int, Boolean) -> Boolean): List<Boolean>

/**
 * Returns a list containing only elements matching the given [predicate].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun CharArray.filterIndexed(predicate: (Int, Char) -> Boolean): List<Char>

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (Int, T) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (Int, Byte) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (Int, Short) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (Int, Int) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (Int, Long) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (Int, Float) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (Int, Double) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (Int, Boolean) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 * @param [predicate] function that takes the index of an element and the element itself
 * and returns the result of predicate evaluation on the element.
 */
public header inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (Int, Char) -> Boolean): C

/**
 * Returns a list containing all elements that are instances of specified type parameter R.
 */
public header inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R>

/**
 * Appends all elements that are instances of specified type parameter R to the given [destination].
 */
public header inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T>

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte>

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short>

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int>

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long>

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float>

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double>

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean>

/**
 * Returns a list containing all elements not matching the given [predicate].
 */
public header inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char>

/**
 * Returns a list containing all elements that are not `null`.
 */
public header fun <T : Any> Array<out T?>.filterNotNull(): List<T>

/**
 * Appends all elements that are not `null` to the given [destination].
 */
public header fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C

/**
 * Appends all elements not matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C

/**
 * Appends all elements matching the given [predicate] to the given [destination].
 */
public header inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun <T> Array<out T>.slice(indices: IntRange): List<T>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun ByteArray.slice(indices: IntRange): List<Byte>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun ShortArray.slice(indices: IntRange): List<Short>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun IntArray.slice(indices: IntRange): List<Int>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun LongArray.slice(indices: IntRange): List<Long>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun FloatArray.slice(indices: IntRange): List<Float>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun DoubleArray.slice(indices: IntRange): List<Double>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun BooleanArray.slice(indices: IntRange): List<Boolean>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun CharArray.slice(indices: IntRange): List<Char>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun ByteArray.slice(indices: Iterable<Int>): List<Byte>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun ShortArray.slice(indices: Iterable<Int>): List<Short>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun IntArray.slice(indices: Iterable<Int>): List<Int>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun LongArray.slice(indices: Iterable<Int>): List<Long>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun FloatArray.slice(indices: Iterable<Int>): List<Float>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun DoubleArray.slice(indices: Iterable<Int>): List<Double>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean>

/**
 * Returns a list containing elements at specified [indices].
 */
public header fun CharArray.slice(indices: Iterable<Int>): List<Char>

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T>

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun IntArray.sliceArray(indices: Collection<Int>): IntArray

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun LongArray.sliceArray(indices: Collection<Int>): LongArray

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray

/**
 * Returns an array containing elements of this array at specified [indices].
 */
public header fun CharArray.sliceArray(indices: Collection<Int>): CharArray

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun <T> Array<T>.sliceArray(indices: IntRange): Array<T>

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun ByteArray.sliceArray(indices: IntRange): ByteArray

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun ShortArray.sliceArray(indices: IntRange): ShortArray

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun IntArray.sliceArray(indices: IntRange): IntArray

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun LongArray.sliceArray(indices: IntRange): LongArray

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun FloatArray.sliceArray(indices: IntRange): FloatArray

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun DoubleArray.sliceArray(indices: IntRange): DoubleArray

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun BooleanArray.sliceArray(indices: IntRange): BooleanArray

/**
 * Returns a list containing elements at indices in the specified [indices] range.
 */
public header fun CharArray.sliceArray(indices: IntRange): CharArray

/**
 * Returns a list containing first [n] elements.
 */
public header fun <T> Array<out T>.take(n: Int): List<T>

/**
 * Returns a list containing first [n] elements.
 */
public header fun ByteArray.take(n: Int): List<Byte>

/**
 * Returns a list containing first [n] elements.
 */
public header fun ShortArray.take(n: Int): List<Short>

/**
 * Returns a list containing first [n] elements.
 */
public header fun IntArray.take(n: Int): List<Int>

/**
 * Returns a list containing first [n] elements.
 */
public header fun LongArray.take(n: Int): List<Long>

/**
 * Returns a list containing first [n] elements.
 */
public header fun FloatArray.take(n: Int): List<Float>

/**
 * Returns a list containing first [n] elements.
 */
public header fun DoubleArray.take(n: Int): List<Double>

/**
 * Returns a list containing first [n] elements.
 */
public header fun BooleanArray.take(n: Int): List<Boolean>

/**
 * Returns a list containing first [n] elements.
 */
public header fun CharArray.take(n: Int): List<Char>

/**
 * Returns a list containing last [n] elements.
 */
public header fun <T> Array<out T>.takeLast(n: Int): List<T>

/**
 * Returns a list containing last [n] elements.
 */
public header fun ByteArray.takeLast(n: Int): List<Byte>

/**
 * Returns a list containing last [n] elements.
 */
public header fun ShortArray.takeLast(n: Int): List<Short>

/**
 * Returns a list containing last [n] elements.
 */
public header fun IntArray.takeLast(n: Int): List<Int>

/**
 * Returns a list containing last [n] elements.
 */
public header fun LongArray.takeLast(n: Int): List<Long>

/**
 * Returns a list containing last [n] elements.
 */
public header fun FloatArray.takeLast(n: Int): List<Float>

/**
 * Returns a list containing last [n] elements.
 */
public header fun DoubleArray.takeLast(n: Int): List<Double>

/**
 * Returns a list containing last [n] elements.
 */
public header fun BooleanArray.takeLast(n: Int): List<Boolean>

/**
 * Returns a list containing last [n] elements.
 */
public header fun CharArray.takeLast(n: Int): List<Char>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean>

/**
 * Returns a list containing last elements satisfying the given [predicate].
 */
public header inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean>

/**
 * Returns a list containing first elements satisfying the given [predicate].
 */
public header inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char>

/**
 * Reverses elements in the array in-place.
 */
public header fun <T> Array<T>.reverse(): Unit

/**
 * Reverses elements in the array in-place.
 */
public header fun ByteArray.reverse(): Unit

/**
 * Reverses elements in the array in-place.
 */
public header fun ShortArray.reverse(): Unit

/**
 * Reverses elements in the array in-place.
 */
public header fun IntArray.reverse(): Unit

/**
 * Reverses elements in the array in-place.
 */
public header fun LongArray.reverse(): Unit

/**
 * Reverses elements in the array in-place.
 */
public header fun FloatArray.reverse(): Unit

/**
 * Reverses elements in the array in-place.
 */
public header fun DoubleArray.reverse(): Unit

/**
 * Reverses elements in the array in-place.
 */
public header fun BooleanArray.reverse(): Unit

/**
 * Reverses elements in the array in-place.
 */
public header fun CharArray.reverse(): Unit

/**
 * Returns a list with elements in reversed order.
 */
public header fun <T> Array<out T>.reversed(): List<T>

/**
 * Returns a list with elements in reversed order.
 */
public header fun ByteArray.reversed(): List<Byte>

/**
 * Returns a list with elements in reversed order.
 */
public header fun ShortArray.reversed(): List<Short>

/**
 * Returns a list with elements in reversed order.
 */
public header fun IntArray.reversed(): List<Int>

/**
 * Returns a list with elements in reversed order.
 */
public header fun LongArray.reversed(): List<Long>

/**
 * Returns a list with elements in reversed order.
 */
public header fun FloatArray.reversed(): List<Float>

/**
 * Returns a list with elements in reversed order.
 */
public header fun DoubleArray.reversed(): List<Double>

/**
 * Returns a list with elements in reversed order.
 */
public header fun BooleanArray.reversed(): List<Boolean>

/**
 * Returns a list with elements in reversed order.
 */
public header fun CharArray.reversed(): List<Char>

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun <T> Array<T>.reversedArray(): Array<T>

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun ByteArray.reversedArray(): ByteArray

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun ShortArray.reversedArray(): ShortArray

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun IntArray.reversedArray(): IntArray

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun LongArray.reversedArray(): LongArray

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun FloatArray.reversedArray(): FloatArray

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun DoubleArray.reversedArray(): DoubleArray

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun BooleanArray.reversedArray(): BooleanArray

/**
 * Returns an array with elements of this array in reversed order.
 */
public header fun CharArray.reversedArray(): CharArray

/**
 * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit

/**
 * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit

/**
 * Sorts elements in the array in-place descending according to their natural sort order.
 */
public header fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit

/**
 * Sorts elements in the array in-place descending according to their natural sort order.
 */
public header fun ByteArray.sortDescending(): Unit

/**
 * Sorts elements in the array in-place descending according to their natural sort order.
 */
public header fun ShortArray.sortDescending(): Unit

/**
 * Sorts elements in the array in-place descending according to their natural sort order.
 */
public header fun IntArray.sortDescending(): Unit

/**
 * Sorts elements in the array in-place descending according to their natural sort order.
 */
public header fun LongArray.sortDescending(): Unit

/**
 * Sorts elements in the array in-place descending according to their natural sort order.
 */
public header fun FloatArray.sortDescending(): Unit

/**
 * Sorts elements in the array in-place descending according to their natural sort order.
 */
public header fun DoubleArray.sortDescending(): Unit

/**
 * Sorts elements in the array in-place descending according to their natural sort order.
 */
public header fun CharArray.sortDescending(): Unit

/**
 * Returns a list of all elements sorted according to their natural sort order.
 */
public header fun <T : Comparable<T>> Array<out T>.sorted(): List<T>

/**
 * Returns a list of all elements sorted according to their natural sort order.
 */
public header fun ByteArray.sorted(): List<Byte>

/**
 * Returns a list of all elements sorted according to their natural sort order.
 */
public header fun ShortArray.sorted(): List<Short>

/**
 * Returns a list of all elements sorted according to their natural sort order.
 */
public header fun IntArray.sorted(): List<Int>

/**
 * Returns a list of all elements sorted according to their natural sort order.
 */
public header fun LongArray.sorted(): List<Long>

/**
 * Returns a list of all elements sorted according to their natural sort order.
 */
public header fun FloatArray.sorted(): List<Float>

/**
 * Returns a list of all elements sorted according to their natural sort order.
 */
public header fun DoubleArray.sorted(): List<Double>

/**
 * Returns a list of all elements sorted according to their natural sort order.
 */
public header fun CharArray.sorted(): List<Char>

/**
 * Returns an array with all elements of this array sorted according to their natural sort order.
 */
public header fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T>

/**
 * Returns an array with all elements of this array sorted according to their natural sort order.
 */
public header fun ByteArray.sortedArray(): ByteArray

/**
 * Returns an array with all elements of this array sorted according to their natural sort order.
 */
public header fun ShortArray.sortedArray(): ShortArray

/**
 * Returns an array with all elements of this array sorted according to their natural sort order.
 */
public header fun IntArray.sortedArray(): IntArray

/**
 * Returns an array with all elements of this array sorted according to their natural sort order.
 */
public header fun LongArray.sortedArray(): LongArray

/**
 * Returns an array with all elements of this array sorted according to their natural sort order.
 */
public header fun FloatArray.sortedArray(): FloatArray

/**
 * Returns an array with all elements of this array sorted according to their natural sort order.
 */
public header fun DoubleArray.sortedArray(): DoubleArray

/**
 * Returns an array with all elements of this array sorted according to their natural sort order.
 */
public header fun CharArray.sortedArray(): CharArray

/**
 * Returns an array with all elements of this array sorted descending according to their natural sort order.
 */
public header fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T>

/**
 * Returns an array with all elements of this array sorted descending according to their natural sort order.
 */
public header fun ByteArray.sortedArrayDescending(): ByteArray

/**
 * Returns an array with all elements of this array sorted descending according to their natural sort order.
 */
public header fun ShortArray.sortedArrayDescending(): ShortArray

/**
 * Returns an array with all elements of this array sorted descending according to their natural sort order.
 */
public header fun IntArray.sortedArrayDescending(): IntArray

/**
 * Returns an array with all elements of this array sorted descending according to their natural sort order.
 */
public header fun LongArray.sortedArrayDescending(): LongArray

/**
 * Returns an array with all elements of this array sorted descending according to their natural sort order.
 */
public header fun FloatArray.sortedArrayDescending(): FloatArray

/**
 * Returns an array with all elements of this array sorted descending according to their natural sort order.
 */
public header fun DoubleArray.sortedArrayDescending(): DoubleArray

/**
 * Returns an array with all elements of this array sorted descending according to their natural sort order.
 */
public header fun CharArray.sortedArrayDescending(): CharArray

/**
 * Returns an array with all elements of this array sorted according the specified [comparator].
 */
public header fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean>

/**
 * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean>

/**
 * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.
 */
public header inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char>

/**
 * Returns a list of all elements sorted descending according to their natural sort order.
 */
public header fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T>

/**
 * Returns a list of all elements sorted descending according to their natural sort order.
 */
public header fun ByteArray.sortedDescending(): List<Byte>

/**
 * Returns a list of all elements sorted descending according to their natural sort order.
 */
public header fun ShortArray.sortedDescending(): List<Short>

/**
 * Returns a list of all elements sorted descending according to their natural sort order.
 */
public header fun IntArray.sortedDescending(): List<Int>

/**
 * Returns a list of all elements sorted descending according to their natural sort order.
 */
public header fun LongArray.sortedDescending(): List<Long>

/**
 * Returns a list of all elements sorted descending according to their natural sort order.
 */
public header fun FloatArray.sortedDescending(): List<Float>

/**
 * Returns a list of all elements sorted descending according to their natural sort order.
 */
public header fun DoubleArray.sortedDescending(): List<Double>

/**
 * Returns a list of all elements sorted descending according to their natural sort order.
 */
public header fun CharArray.sortedDescending(): List<Char>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean>

/**
 * Returns a list of all elements sorted according to the specified [comparator].
 */
public header fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char>

/**
 * Returns `true` if the two specified arrays are *deeply* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 * 
 * If two corresponding elements are nested arrays, they are also compared deeply.
 * If any of arrays contains itself on any nesting level the behavior is undefined.
 */
@SinceKotlin("1.1")
public header infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 * Nested arrays are treated as lists too.
 * 
 * If any of arrays contains itself on any nesting level the behavior is undefined.
 */
@SinceKotlin("1.1")
public header fun <T> Array<out T>.contentDeepHashCode(): Int

/**
 * Returns a string representation of the contents of this array as if it is a [List].
 * Nested arrays are treated as lists too.
 * 
 * If any of arrays contains itself on any nesting level that reference
 * is rendered as `"[...]"` to prevent recursion.
 */
@SinceKotlin("1.1")
public header fun <T> Array<out T>.contentDeepToString(): String

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun ByteArray.contentEquals(other: ByteArray): Boolean

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun ShortArray.contentEquals(other: ShortArray): Boolean

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun IntArray.contentEquals(other: IntArray): Boolean

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun LongArray.contentEquals(other: LongArray): Boolean

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun FloatArray.contentEquals(other: FloatArray): Boolean

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean

/**
 * Returns `true` if the two specified arrays are *structurally* equal to one another,
 * i.e. contain the same number of the same elements in the same order.
 */
@SinceKotlin("1.1")
public header infix fun CharArray.contentEquals(other: CharArray): Boolean

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun <T> Array<out T>.contentHashCode(): Int

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun ByteArray.contentHashCode(): Int

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun ShortArray.contentHashCode(): Int

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun IntArray.contentHashCode(): Int

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun LongArray.contentHashCode(): Int

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun FloatArray.contentHashCode(): Int

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun DoubleArray.contentHashCode(): Int

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun BooleanArray.contentHashCode(): Int

/**
 * Returns a hash code based on the contents of this array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun CharArray.contentHashCode(): Int

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun <T> Array<out T>.contentToString(): String

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun ByteArray.contentToString(): String

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun ShortArray.contentToString(): String

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun IntArray.contentToString(): String

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun LongArray.contentToString(): String

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun FloatArray.contentToString(): String

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun DoubleArray.contentToString(): String

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun BooleanArray.contentToString(): String

/**
 * Returns a string representation of the contents of the specified array as if it is [List].
 */
@SinceKotlin("1.1")
public header fun CharArray.contentToString(): String

/**
 * Returns the range of valid indices for the array.
 */
public header val <T> Array<out T>.indices: IntRange

/**
 * Returns the range of valid indices for the array.
 */
public header val ByteArray.indices: IntRange

/**
 * Returns the range of valid indices for the array.
 */
public header val ShortArray.indices: IntRange

/**
 * Returns the range of valid indices for the array.
 */
public header val IntArray.indices: IntRange

/**
 * Returns the range of valid indices for the array.
 */
public header val LongArray.indices: IntRange

/**
 * Returns the range of valid indices for the array.
 */
public header val FloatArray.indices: IntRange

/**
 * Returns the range of valid indices for the array.
 */
public header val DoubleArray.indices: IntRange

/**
 * Returns the range of valid indices for the array.
 */
public header val BooleanArray.indices: IntRange

/**
 * Returns the range of valid indices for the array.
 */
public header val CharArray.indices: IntRange

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.isEmpty(): Boolean

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.isEmpty(): Boolean

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.isEmpty(): Boolean

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.isEmpty(): Boolean

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.isEmpty(): Boolean

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.isEmpty(): Boolean

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.isEmpty(): Boolean

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.isEmpty(): Boolean

/**
 * Returns `true` if the array is empty.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.isEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.isNotEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.isNotEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.isNotEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.isNotEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.isNotEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.isNotEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.isNotEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.isNotEmpty(): Boolean

/**
 * Returns `true` if the array is not empty.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.isNotEmpty(): Boolean

/**
 * Returns the last valid index for the array.
 */
public header val <T> Array<out T>.lastIndex: Int

/**
 * Returns the last valid index for the array.
 */
public header val ByteArray.lastIndex: Int

/**
 * Returns the last valid index for the array.
 */
public header val ShortArray.lastIndex: Int

/**
 * Returns the last valid index for the array.
 */
public header val IntArray.lastIndex: Int

/**
 * Returns the last valid index for the array.
 */
public header val LongArray.lastIndex: Int

/**
 * Returns the last valid index for the array.
 */
public header val FloatArray.lastIndex: Int

/**
 * Returns the last valid index for the array.
 */
public header val DoubleArray.lastIndex: Int

/**
 * Returns the last valid index for the array.
 */
public header val BooleanArray.lastIndex: Int

/**
 * Returns the last valid index for the array.
 */
public header val CharArray.lastIndex: Int

/**
 * Returns an array of Boolean containing all of the elements of this generic array.
 */
public header fun Array<out Boolean>.toBooleanArray(): BooleanArray

/**
 * Returns an array of Byte containing all of the elements of this generic array.
 */
public header fun Array<out Byte>.toByteArray(): ByteArray

/**
 * Returns an array of Char containing all of the elements of this generic array.
 */
public header fun Array<out Char>.toCharArray(): CharArray

/**
 * Returns an array of Double containing all of the elements of this generic array.
 */
public header fun Array<out Double>.toDoubleArray(): DoubleArray

/**
 * Returns an array of Float containing all of the elements of this generic array.
 */
public header fun Array<out Float>.toFloatArray(): FloatArray

/**
 * Returns an array of Int containing all of the elements of this generic array.
 */
public header fun Array<out Int>.toIntArray(): IntArray

/**
 * Returns an array of Long containing all of the elements of this generic array.
 */
public header fun Array<out Long>.toLongArray(): LongArray

/**
 * Returns an array of Short containing all of the elements of this generic array.
 */
public header fun Array<out Short>.toShortArray(): ShortArray

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing key-value pairs provided by [transform] function
 * applied to elements of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean>

/**
 * Returns a [Map] containing the elements from the given array indexed by the key
 * returned from [keySelector] function applied to each element.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V>

/**
 * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 * 
 * The returned map preserves the entry iteration order of the original array.
 */
public header inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V>

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function applied to each element of the given array
 * and value is the element itself.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs,
 * where key is provided by the [keySelector] function and
 * and value is provided by the [valueTransform] function applied to elements of the given array.
 * 
 * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M

/**
 * Populates and returns the [destination] mutable map with key-value pairs
 * provided by [transform] function applied to each element of the given array.
 * 
 * If any of two pairs would have the same key the last one gets added to the map.
 */
public header inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C

/**
 * Appends all elements to the given [destination] collection.
 */
public header fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C

/**
 * Returns a [HashSet] of all elements.
 */
public header fun <T> Array<out T>.toHashSet(): HashSet<T>

/**
 * Returns a [HashSet] of all elements.
 */
public header fun ByteArray.toHashSet(): HashSet<Byte>

/**
 * Returns a [HashSet] of all elements.
 */
public header fun ShortArray.toHashSet(): HashSet<Short>

/**
 * Returns a [HashSet] of all elements.
 */
public header fun IntArray.toHashSet(): HashSet<Int>

/**
 * Returns a [HashSet] of all elements.
 */
public header fun LongArray.toHashSet(): HashSet<Long>

/**
 * Returns a [HashSet] of all elements.
 */
public header fun FloatArray.toHashSet(): HashSet<Float>

/**
 * Returns a [HashSet] of all elements.
 */
public header fun DoubleArray.toHashSet(): HashSet<Double>

/**
 * Returns a [HashSet] of all elements.
 */
public header fun BooleanArray.toHashSet(): HashSet<Boolean>

/**
 * Returns a [HashSet] of all elements.
 */
public header fun CharArray.toHashSet(): HashSet<Char>

/**
 * Returns a [List] containing all elements.
 */
public header fun <T> Array<out T>.toList(): List<T>

/**
 * Returns a [List] containing all elements.
 */
public header fun ByteArray.toList(): List<Byte>

/**
 * Returns a [List] containing all elements.
 */
public header fun ShortArray.toList(): List<Short>

/**
 * Returns a [List] containing all elements.
 */
public header fun IntArray.toList(): List<Int>

/**
 * Returns a [List] containing all elements.
 */
public header fun LongArray.toList(): List<Long>

/**
 * Returns a [List] containing all elements.
 */
public header fun FloatArray.toList(): List<Float>

/**
 * Returns a [List] containing all elements.
 */
public header fun DoubleArray.toList(): List<Double>

/**
 * Returns a [List] containing all elements.
 */
public header fun BooleanArray.toList(): List<Boolean>

/**
 * Returns a [List] containing all elements.
 */
public header fun CharArray.toList(): List<Char>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun <T> Array<out T>.toMutableList(): MutableList<T>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun ByteArray.toMutableList(): MutableList<Byte>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun ShortArray.toMutableList(): MutableList<Short>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun IntArray.toMutableList(): MutableList<Int>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun LongArray.toMutableList(): MutableList<Long>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun FloatArray.toMutableList(): MutableList<Float>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun DoubleArray.toMutableList(): MutableList<Double>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun BooleanArray.toMutableList(): MutableList<Boolean>

/**
 * Returns a [MutableList] filled with all elements of this array.
 */
public header fun CharArray.toMutableList(): MutableList<Char>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun <T> Array<out T>.toSet(): Set<T>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun ByteArray.toSet(): Set<Byte>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun ShortArray.toSet(): Set<Short>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun IntArray.toSet(): Set<Int>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun LongArray.toSet(): Set<Long>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun FloatArray.toSet(): Set<Float>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun DoubleArray.toSet(): Set<Double>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun BooleanArray.toSet(): Set<Boolean>

/**
 * Returns a [Set] of all elements.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun CharArray.toSet(): Set<Char>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R>

/**
 * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.
 */
public header inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R>

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C

/**
 * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and returns a map where each group key is associated with a list of corresponding elements.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>>

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and returns a map where each group key is associated with a list of corresponding values.
 * 
 * The returned map preserves the entry iteration order of the keys produced from the original array.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>>

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M

/**
 * Groups elements of the original array by the key returned by the given [keySelector] function
 * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupBy
 */
public header inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M

/**
 * Groups values returned by the [valueTransform] function applied to each element of the original array
 * by the key returned by the given [keySelector] function applied to the element
 * and puts to the [destination] map each group key associated with a list of corresponding values.
 * 
 * @return The [destination] map.
 * 
 * @sample samples.collections.Collections.Transformations.groupByKeysAndValues
 */
public header inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M

/**
 * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations
 * using the specified [keySelector] function to extract a key from each element.
 */
@SinceKotlin("1.1")
public header inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <R> ShortArray.map(transform: (Short) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <R> IntArray.map(transform: (Int) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <R> LongArray.map(transform: (Long) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <R> FloatArray.map(transform: (Float) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <R> CharArray.map(transform: (Char) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <T, R> Array<out T>.mapIndexed(transform: (Int, T) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R> ByteArray.mapIndexed(transform: (Int, Byte) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R> ShortArray.mapIndexed(transform: (Int, Short) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R> IntArray.mapIndexed(transform: (Int, Int) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R> LongArray.mapIndexed(transform: (Int, Long) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R> FloatArray.mapIndexed(transform: (Int, Float) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R> DoubleArray.mapIndexed(transform: (Int, Double) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R> BooleanArray.mapIndexed(transform: (Int, Boolean) -> R): List<R>

/**
 * Returns a list containing the results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R> CharArray.mapIndexed(transform: (Int, Char) -> R): List<R>

/**
 * Returns a list containing only the non-null results of applying the given [transform] function
 * to each element and its index in the original array.
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (Int, T) -> R?): List<R>

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends only the non-null results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (Int, T) -> R?): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (Int, T) -> R): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (Int, Byte) -> R): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (Int, Short) -> R): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (Int, Int) -> R): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (Int, Long) -> R): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (Int, Float) -> R): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (Int, Double) -> R): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (Int, Boolean) -> R): C

/**
 * Applies the given [transform] function to each element and its index in the original array
 * and appends the results to the given [destination].
 * @param [transform] function that takes the index of an element and the element itself
 * and returns the result of the transform applied to the element.
 */
public header inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (Int, Char) -> R): C

/**
 * Returns a list containing only the non-null results of applying the given [transform] function
 * to each element in the original array.
 */
public header inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R>

/**
 * Applies the given [transform] function to each element in the original array
 * and appends only the non-null results to the given [destination].
 */
public header inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C

/**
 * Applies the given [transform] function to each element of the original array
 * and appends the results to the given [destination].
 */
public header inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>>

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>>

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun ShortArray.withIndex(): Iterable<IndexedValue<Short>>

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun IntArray.withIndex(): Iterable<IndexedValue<Int>>

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun LongArray.withIndex(): Iterable<IndexedValue<Long>>

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun FloatArray.withIndex(): Iterable<IndexedValue<Float>>

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>>

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>>

/**
 * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.
 */
public header fun CharArray.withIndex(): Iterable<IndexedValue<Char>>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun <T> Array<out T>.distinct(): List<T>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun ByteArray.distinct(): List<Byte>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun ShortArray.distinct(): List<Short>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun IntArray.distinct(): List<Int>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun LongArray.distinct(): List<Long>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun FloatArray.distinct(): List<Float>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun DoubleArray.distinct(): List<Double>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun BooleanArray.distinct(): List<Boolean>

/**
 * Returns a list containing only distinct elements from the given array.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header fun CharArray.distinct(): List<Char>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean>

/**
 * Returns a list containing only elements from the given array
 * having distinct keys returned by the given [selector] function.
 * 
 * The elements in the resulting list are in the same order as they were in the source array.
 */
public header inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun IntArray.intersect(other: Iterable<Int>): Set<Int>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun LongArray.intersect(other: Iterable<Long>): Set<Long>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean>

/**
 * Returns a set containing all elements that are contained by both this set and the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun CharArray.intersect(other: Iterable<Char>): Set<Char>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun IntArray.subtract(other: Iterable<Int>): Set<Int>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun LongArray.subtract(other: Iterable<Long>): Set<Long>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean>

/**
 * Returns a set containing all elements that are contained by this array and not contained by the specified collection.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header infix fun CharArray.subtract(other: Iterable<Char>): Set<Char>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun <T> Array<out T>.toMutableSet(): MutableSet<T>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun ByteArray.toMutableSet(): MutableSet<Byte>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun ShortArray.toMutableSet(): MutableSet<Short>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun IntArray.toMutableSet(): MutableSet<Int>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun LongArray.toMutableSet(): MutableSet<Long>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun FloatArray.toMutableSet(): MutableSet<Float>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun DoubleArray.toMutableSet(): MutableSet<Double>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun BooleanArray.toMutableSet(): MutableSet<Boolean>

/**
 * Returns a mutable set containing all distinct elements from the given array.
 * 
 * The returned set preserves the element iteration order of the original array.
 */
public header fun CharArray.toMutableSet(): MutableSet<Char>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun ShortArray.union(other: Iterable<Short>): Set<Short>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun IntArray.union(other: Iterable<Int>): Set<Int>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun LongArray.union(other: Iterable<Long>): Set<Long>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun FloatArray.union(other: Iterable<Float>): Set<Float>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun DoubleArray.union(other: Iterable<Double>): Set<Double>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean>

/**
 * Returns a set containing all distinct elements from both collections.
 * 
 * The returned set preserves the element iteration order of the original array.
 * Those elements of the [other] collection that are unique are iterated in the end
 * in the order of the [other] collection.
 */
public header infix fun CharArray.union(other: Iterable<Char>): Set<Char>

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean

/**
 * Returns `true` if all elements match the given [predicate].
 */
public header inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun <T> Array<out T>.any(): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun ByteArray.any(): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun ShortArray.any(): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun IntArray.any(): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun LongArray.any(): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun FloatArray.any(): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun DoubleArray.any(): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun BooleanArray.any(): Boolean

/**
 * Returns `true` if array has at least one element.
 */
public header fun CharArray.any(): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean

/**
 * Returns `true` if at least one element matches the given [predicate].
 */
public header inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun <T> Array<out T>.count(): Int

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ByteArray.count(): Int

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun ShortArray.count(): Int

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun IntArray.count(): Int

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun LongArray.count(): Int

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun FloatArray.count(): Int

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun DoubleArray.count(): Int

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun BooleanArray.count(): Int

/**
 * Returns the number of elements in this array.
 */
@kotlin.internal.InlineOnly
public header inline fun CharArray.count(): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun ShortArray.count(predicate: (Short) -> Boolean): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun IntArray.count(predicate: (Int) -> Boolean): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun LongArray.count(predicate: (Long) -> Boolean): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun FloatArray.count(predicate: (Float) -> Boolean): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int

/**
 * Returns the number of elements matching the given [predicate].
 */
public header inline fun CharArray.count(predicate: (Char) -> Boolean): Int

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <T, R> Array<out T>.fold(initial: R, operation: (R, T) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <R> ByteArray.fold(initial: R, operation: (R, Byte) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <R> ShortArray.fold(initial: R, operation: (R, Short) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <R> IntArray.fold(initial: R, operation: (R, Int) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <R> LongArray.fold(initial: R, operation: (R, Long) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <R> FloatArray.fold(initial: R, operation: (R, Float) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <R> DoubleArray.fold(initial: R, operation: (R, Double) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <R> BooleanArray.fold(initial: R, operation: (R, Boolean) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <R> CharArray.fold(initial: R, operation: (R, Char) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (Int, R, T) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <R> ByteArray.foldIndexed(initial: R, operation: (Int, R, Byte) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <R> ShortArray.foldIndexed(initial: R, operation: (Int, R, Short) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <R> IntArray.foldIndexed(initial: R, operation: (Int, R, Int) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <R> LongArray.foldIndexed(initial: R, operation: (Int, R, Long) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <R> FloatArray.foldIndexed(initial: R, operation: (Int, R, Float) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (Int, R, Double) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (Int, R, Boolean) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself, and calculates the next accumulator value.
 */
public header inline fun <R> CharArray.foldIndexed(initial: R, operation: (Int, R, Char) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <R> IntArray.foldRight(initial: R, operation: (Int, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <R> LongArray.foldRight(initial: R, operation: (Long, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <R> CharArray.foldRight(initial: R, operation: (Char, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (Int, T, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (Int, Byte, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (Int, Short, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (Int, Int, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (Int, Long, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (Int, Float, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (Int, Double, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (Int, Boolean, R) -> R): R

/**
 * Accumulates value starting with [initial] value and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (Int, Char, R) -> R): R

/**
 * Performs the given [action] on each element.
 */
public header inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit

/**
 * Performs the given [action] on each element.
 */
public header inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit

/**
 * Performs the given [action] on each element.
 */
public header inline fun ShortArray.forEach(action: (Short) -> Unit): Unit

/**
 * Performs the given [action] on each element.
 */
public header inline fun IntArray.forEach(action: (Int) -> Unit): Unit

/**
 * Performs the given [action] on each element.
 */
public header inline fun LongArray.forEach(action: (Long) -> Unit): Unit

/**
 * Performs the given [action] on each element.
 */
public header inline fun FloatArray.forEach(action: (Float) -> Unit): Unit

/**
 * Performs the given [action] on each element.
 */
public header inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit

/**
 * Performs the given [action] on each element.
 */
public header inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit

/**
 * Performs the given [action] on each element.
 */
public header inline fun CharArray.forEach(action: (Char) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun <T> Array<out T>.forEachIndexed(action: (Int, T) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun ByteArray.forEachIndexed(action: (Int, Byte) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun ShortArray.forEachIndexed(action: (Int, Short) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun IntArray.forEachIndexed(action: (Int, Int) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun LongArray.forEachIndexed(action: (Int, Long) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun FloatArray.forEachIndexed(action: (Int, Float) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun DoubleArray.forEachIndexed(action: (Int, Double) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun BooleanArray.forEachIndexed(action: (Int, Boolean) -> Unit): Unit

/**
 * Performs the given [action] on each element, providing sequential index with the element.
 * @param [action] function that takes the index of an element and the element itself
 * and performs the desired action on the element.
 */
public header inline fun CharArray.forEachIndexed(action: (Int, Char) -> Unit): Unit

/**
 * Returns the largest element or `null` if there are no elements.
 * 
 * If any of elements is `NaN` returns `NaN`.
 */
@SinceKotlin("1.1")
public header fun Array<out Double>.max(): Double?

/**
 * Returns the largest element or `null` if there are no elements.
 * 
 * If any of elements is `NaN` returns `NaN`.
 */
@SinceKotlin("1.1")
public header fun Array<out Float>.max(): Float?

/**
 * Returns the largest element or `null` if there are no elements.
 */
public header fun <T : Comparable<T>> Array<out T>.max(): T?

/**
 * Returns the largest element or `null` if there are no elements.
 */
public header fun ByteArray.max(): Byte?

/**
 * Returns the largest element or `null` if there are no elements.
 */
public header fun ShortArray.max(): Short?

/**
 * Returns the largest element or `null` if there are no elements.
 */
public header fun IntArray.max(): Int?

/**
 * Returns the largest element or `null` if there are no elements.
 */
public header fun LongArray.max(): Long?

/**
 * Returns the largest element or `null` if there are no elements.
 * 
 * If any of elements is `NaN` returns `NaN`.
 */
public header fun FloatArray.max(): Float?

/**
 * Returns the largest element or `null` if there are no elements.
 * 
 * If any of elements is `NaN` returns `NaN`.
 */
public header fun DoubleArray.max(): Double?

/**
 * Returns the largest element or `null` if there are no elements.
 */
public header fun CharArray.max(): Char?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean?

/**
 * Returns the first element yielding the largest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun ShortArray.maxWith(comparator: Comparator<in Short>): Short?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun IntArray.maxWith(comparator: Comparator<in Int>): Int?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun LongArray.maxWith(comparator: Comparator<in Long>): Long?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun FloatArray.maxWith(comparator: Comparator<in Float>): Float?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean?

/**
 * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun CharArray.maxWith(comparator: Comparator<in Char>): Char?

/**
 * Returns the smallest element or `null` if there are no elements.
 * 
 * If any of elements is `NaN` returns `NaN`.
 */
@SinceKotlin("1.1")
public header fun Array<out Double>.min(): Double?

/**
 * Returns the smallest element or `null` if there are no elements.
 * 
 * If any of elements is `NaN` returns `NaN`.
 */
@SinceKotlin("1.1")
public header fun Array<out Float>.min(): Float?

/**
 * Returns the smallest element or `null` if there are no elements.
 */
public header fun <T : Comparable<T>> Array<out T>.min(): T?

/**
 * Returns the smallest element or `null` if there are no elements.
 */
public header fun ByteArray.min(): Byte?

/**
 * Returns the smallest element or `null` if there are no elements.
 */
public header fun ShortArray.min(): Short?

/**
 * Returns the smallest element or `null` if there are no elements.
 */
public header fun IntArray.min(): Int?

/**
 * Returns the smallest element or `null` if there are no elements.
 */
public header fun LongArray.min(): Long?

/**
 * Returns the smallest element or `null` if there are no elements.
 * 
 * If any of elements is `NaN` returns `NaN`.
 */
public header fun FloatArray.min(): Float?

/**
 * Returns the smallest element or `null` if there are no elements.
 * 
 * If any of elements is `NaN` returns `NaN`.
 */
public header fun DoubleArray.min(): Double?

/**
 * Returns the smallest element or `null` if there are no elements.
 */
public header fun CharArray.min(): Char?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean?

/**
 * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.
 */
public header inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun ShortArray.minWith(comparator: Comparator<in Short>): Short?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun IntArray.minWith(comparator: Comparator<in Int>): Int?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun LongArray.minWith(comparator: Comparator<in Long>): Long?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun FloatArray.minWith(comparator: Comparator<in Float>): Float?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun DoubleArray.minWith(comparator: Comparator<in Double>): Double?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean?

/**
 * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.
 */
public header fun CharArray.minWith(comparator: Comparator<in Char>): Char?

/**
 * Returns `true` if the array has no elements.
 */
public header fun <T> Array<out T>.none(): Boolean

/**
 * Returns `true` if the array has no elements.
 */
public header fun ByteArray.none(): Boolean

/**
 * Returns `true` if the array has no elements.
 */
public header fun ShortArray.none(): Boolean

/**
 * Returns `true` if the array has no elements.
 */
public header fun IntArray.none(): Boolean

/**
 * Returns `true` if the array has no elements.
 */
public header fun LongArray.none(): Boolean

/**
 * Returns `true` if the array has no elements.
 */
public header fun FloatArray.none(): Boolean

/**
 * Returns `true` if the array has no elements.
 */
public header fun DoubleArray.none(): Boolean

/**
 * Returns `true` if the array has no elements.
 */
public header fun BooleanArray.none(): Boolean

/**
 * Returns `true` if the array has no elements.
 */
public header fun CharArray.none(): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean

/**
 * Returns `true` if no elements match the given [predicate].
 */
public header inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun <S, T: S> Array<out T>.reduce(operation: (S, T) -> S): S

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun ByteArray.reduce(operation: (Byte, Byte) -> Byte): Byte

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun ShortArray.reduce(operation: (Short, Short) -> Short): Short

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun IntArray.reduce(operation: (Int, Int) -> Int): Int

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun LongArray.reduce(operation: (Long, Long) -> Long): Long

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun FloatArray.reduce(operation: (Float, Float) -> Float): Float

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun DoubleArray.reduce(operation: (Double, Double) -> Double): Double

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun BooleanArray.reduce(operation: (Boolean, Boolean) -> Boolean): Boolean

/**
 * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.
 */
public header inline fun CharArray.reduce(operation: (Char, Char) -> Char): Char

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun <S, T: S> Array<out T>.reduceIndexed(operation: (Int, S, T) -> S): S

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun ByteArray.reduceIndexed(operation: (Int, Byte, Byte) -> Byte): Byte

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun ShortArray.reduceIndexed(operation: (Int, Short, Short) -> Short): Short

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun IntArray.reduceIndexed(operation: (Int, Int, Int) -> Int): Int

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun LongArray.reduceIndexed(operation: (Int, Long, Long) -> Long): Long

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun FloatArray.reduceIndexed(operation: (Int, Float, Float) -> Float): Float

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun DoubleArray.reduceIndexed(operation: (Int, Double, Double) -> Double): Double

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun BooleanArray.reduceIndexed(operation: (Int, Boolean, Boolean) -> Boolean): Boolean

/**
 * Accumulates value starting with the first element and applying [operation] from left to right
 * to current accumulator value and each element with its index in the original array.
 * @param [operation] function that takes the index of an element, current accumulator value
 * and the element itself and calculates the next accumulator value.
 */
public header inline fun CharArray.reduceIndexed(operation: (Int, Char, Char) -> Char): Char

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun <S, T: S> Array<out T>.reduceRight(operation: (T, S) -> S): S

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun ByteArray.reduceRight(operation: (Byte, Byte) -> Byte): Byte

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun ShortArray.reduceRight(operation: (Short, Short) -> Short): Short

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun IntArray.reduceRight(operation: (Int, Int) -> Int): Int

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun LongArray.reduceRight(operation: (Long, Long) -> Long): Long

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun FloatArray.reduceRight(operation: (Float, Float) -> Float): Float

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun DoubleArray.reduceRight(operation: (Double, Double) -> Double): Double

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun BooleanArray.reduceRight(operation: (Boolean, Boolean) -> Boolean): Boolean

/**
 * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
 */
public header inline fun CharArray.reduceRight(operation: (Char, Char) -> Char): Char

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun <S, T: S> Array<out T>.reduceRightIndexed(operation: (Int, T, S) -> S): S

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun ByteArray.reduceRightIndexed(operation: (Int, Byte, Byte) -> Byte): Byte

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun ShortArray.reduceRightIndexed(operation: (Int, Short, Short) -> Short): Short

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun IntArray.reduceRightIndexed(operation: (Int, Int, Int) -> Int): Int

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun LongArray.reduceRightIndexed(operation: (Int, Long, Long) -> Long): Long

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun FloatArray.reduceRightIndexed(operation: (Int, Float, Float) -> Float): Float

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun DoubleArray.reduceRightIndexed(operation: (Int, Double, Double) -> Double): Double

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun BooleanArray.reduceRightIndexed(operation: (Int, Boolean, Boolean) -> Boolean): Boolean

/**
 * Accumulates value starting with last element and applying [operation] from right to left
 * to each element with its index in the original array and current accumulator value.
 * @param [operation] function that takes the index of an element, the element itself
 * and current accumulator value, and calculates the next accumulator value.
 */
public header inline fun CharArray.reduceRightIndexed(operation: (Int, Char, Char) -> Char): Char

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun ShortArray.sumBy(selector: (Short) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun IntArray.sumBy(selector: (Int) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun LongArray.sumBy(selector: (Long) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun FloatArray.sumBy(selector: (Float) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun CharArray.sumBy(selector: (Char) -> Int): Int

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double

/**
 * Returns the sum of all values produced by [selector] function applied to each element in the array.
 */
public header inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double

/**
 * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.
 */
public header fun <T : Any> Array<T?>.requireNoNulls(): Array<T>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>>

/**
 * Splits the original array into pair of lists,
 * where *first* list contains elements for which [predicate] yielded `true`,
 * while *second* list contains elements for which [predicate] yielded `false`.
 */
public header inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (T, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (Byte, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (Short, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (Int, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (Long, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (Float, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (Double, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (Boolean, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (Char, R) -> V): List<V>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (T, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (Byte, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (Short, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (Int, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (Long, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (Float, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (Double, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (Boolean, R) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (Char, R) -> V): List<V>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>>

/**
 * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.
 */
public header infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <V> ByteArray.zip(other: ByteArray, transform: (Byte, Byte) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <V> ShortArray.zip(other: ShortArray, transform: (Short, Short) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <V> IntArray.zip(other: IntArray, transform: (Int, Int) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <V> LongArray.zip(other: LongArray, transform: (Long, Long) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <V> FloatArray.zip(other: FloatArray, transform: (Float, Float) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (Double, Double) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (Boolean, Boolean) -> V): List<V>

/**
 * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.
 */
public header inline fun <V> CharArray.zip(other: CharArray, transform: (Char, Char) -> V): List<V>

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((T) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(if (element == null) "null" else element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Byte) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Short) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Int) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Long) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Float) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Double) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Boolean) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Char) -> CharSequence)? = null): A {
    buffer.append(prefix)
    var count = 0
    for (element in this) {
        if (++count > 1) buffer.append(separator)
        if (limit < 0 || count <= limit) {
            if (transform != null)
                buffer.append(transform(element))
            else
                buffer.append(element.toString())
        } else break
    }
    if (limit >= 0 && count > limit) buffer.append(truncated)
    buffer.append(postfix)
    return buffer
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun <T> Array<out T>.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((T) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun ByteArray.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Byte) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun ShortArray.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Short) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun IntArray.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Int) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun LongArray.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Long) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun FloatArray.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Float) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun DoubleArray.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Double) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun BooleanArray.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Boolean) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.
 * 
 * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]
 * elements will be appended, followed by the [truncated] string (which defaults to "...").
 */
public fun CharArray.joinToString(separator: CharSequence = ", ", prefix: CharSequence = "", postfix: CharSequence = "", limit: Int = -1, truncated: CharSequence = "...", transform: ((Char) -> CharSequence)? = null): String {
    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()
}

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun <T> Array<out T>.asIterable(): Iterable<T>

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun ByteArray.asIterable(): Iterable<Byte>

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun ShortArray.asIterable(): Iterable<Short>

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun IntArray.asIterable(): Iterable<Int>

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun LongArray.asIterable(): Iterable<Long>

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun FloatArray.asIterable(): Iterable<Float>

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun DoubleArray.asIterable(): Iterable<Double>

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun BooleanArray.asIterable(): Iterable<Boolean>

/**
 * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.
 */
public header fun CharArray.asIterable(): Iterable<Char>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun <T> Array<out T>.asSequence(): Sequence<T>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun ByteArray.asSequence(): Sequence<Byte>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun ShortArray.asSequence(): Sequence<Short>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun IntArray.asSequence(): Sequence<Int>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun LongArray.asSequence(): Sequence<Long>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun FloatArray.asSequence(): Sequence<Float>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun DoubleArray.asSequence(): Sequence<Double>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun BooleanArray.asSequence(): Sequence<Boolean>

/**
 * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.
 */
public header fun CharArray.asSequence(): Sequence<Char>

/**
 * Returns an average value of elements in the array.
 */
@kotlin.jvm.JvmName("averageOfByte")
public header fun Array<out Byte>.average(): Double

/**
 * Returns an average value of elements in the array.
 */
@kotlin.jvm.JvmName("averageOfShort")
public header fun Array<out Short>.average(): Double

/**
 * Returns an average value of elements in the array.
 */
@kotlin.jvm.JvmName("averageOfInt")
public header fun Array<out Int>.average(): Double

/**
 * Returns an average value of elements in the array.
 */
@kotlin.jvm.JvmName("averageOfLong")
public header fun Array<out Long>.average(): Double

/**
 * Returns an average value of elements in the array.
 */
@kotlin.jvm.JvmName("averageOfFloat")
public header fun Array<out Float>.average(): Double

/**
 * Returns an average value of elements in the array.
 */
@kotlin.jvm.JvmName("averageOfDouble")
public header fun Array<out Double>.average(): Double

/**
 * Returns an average value of elements in the array.
 */
public header fun ByteArray.average(): Double

/**
 * Returns an average value of elements in the array.
 */
public header fun ShortArray.average(): Double

/**
 * Returns an average value of elements in the array.
 */
public header fun IntArray.average(): Double

/**
 * Returns an average value of elements in the array.
 */
public header fun LongArray.average(): Double

/**
 * Returns an average value of elements in the array.
 */
public header fun FloatArray.average(): Double

/**
 * Returns an average value of elements in the array.
 */
public header fun DoubleArray.average(): Double

/**
 * Returns the sum of all elements in the array.
 */
@kotlin.jvm.JvmName("sumOfByte")
public header fun Array<out Byte>.sum(): Int

/**
 * Returns the sum of all elements in the array.
 */
@kotlin.jvm.JvmName("sumOfShort")
public header fun Array<out Short>.sum(): Int

/**
 * Returns the sum of all elements in the array.
 */
@kotlin.jvm.JvmName("sumOfInt")
public header fun Array<out Int>.sum(): Int

/**
 * Returns the sum of all elements in the array.
 */
@kotlin.jvm.JvmName("sumOfLong")
public header fun Array<out Long>.sum(): Long

/**
 * Returns the sum of all elements in the array.
 */
@kotlin.jvm.JvmName("sumOfFloat")
public header fun Array<out Float>.sum(): Float

/**
 * Returns the sum of all elements in the array.
 */
@kotlin.jvm.JvmName("sumOfDouble")
public header fun Array<out Double>.sum(): Double

/**
 * Returns the sum of all elements in the array.
 */
public header fun ByteArray.sum(): Int

/**
 * Returns the sum of all elements in the array.
 */
public header fun ShortArray.sum(): Int

/**
 * Returns the sum of all elements in the array.
 */
public header fun IntArray.sum(): Int

/**
 * Returns the sum of all elements in the array.
 */
public header fun LongArray.sum(): Long

/**
 * Returns the sum of all elements in the array.
 */
public header fun FloatArray.sum(): Float

/**
 * Returns the sum of all elements in the array.
 */
public header fun DoubleArray.sum(): Double

/**
 * Returns a [List] that wraps the original array.
 */
public header fun <T> Array<out T>.asList(): List<T>

/**
 * Returns a [List] that wraps the original array.
 */
public header fun ByteArray.asList(): List<Byte>

/**
 * Returns a [List] that wraps the original array.
 */
public header fun ShortArray.asList(): List<Short>

/**
 * Returns a [List] that wraps the original array.
 */
public header fun IntArray.asList(): List<Int>

/**
 * Returns a [List] that wraps the original array.
 */
public header fun LongArray.asList(): List<Long>

/**
 * Returns a [List] that wraps the original array.
 */
public header fun FloatArray.asList(): List<Float>

/**
 * Returns a [List] that wraps the original array.
 */
public header fun DoubleArray.asList(): List<Double>

/**
 * Returns a [List] that wraps the original array.
 */
public header fun BooleanArray.asList(): List<Boolean>

/**
 * Returns a [List] that wraps the original array.
 */
public header fun CharArray.asList(): List<Char>

/**
 * Returns new array which is a copy of the original array.
 */
public header fun <T> Array<T>.copyOf(): Array<T>

/**
 * Returns new array which is a copy of the original array.
 */
public header fun ByteArray.copyOf(): ByteArray

/**
 * Returns new array which is a copy of the original array.
 */
public header fun ShortArray.copyOf(): ShortArray

/**
 * Returns new array which is a copy of the original array.
 */
public header fun IntArray.copyOf(): IntArray

/**
 * Returns new array which is a copy of the original array.
 */
public header fun LongArray.copyOf(): LongArray

/**
 * Returns new array which is a copy of the original array.
 */
public header fun FloatArray.copyOf(): FloatArray

/**
 * Returns new array which is a copy of the original array.
 */
public header fun DoubleArray.copyOf(): DoubleArray

/**
 * Returns new array which is a copy of the original array.
 */
public header fun BooleanArray.copyOf(): BooleanArray

/**
 * Returns new array which is a copy of the original array.
 */
public header fun CharArray.copyOf(): CharArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun ByteArray.copyOf(newSize: Int): ByteArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun ShortArray.copyOf(newSize: Int): ShortArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun IntArray.copyOf(newSize: Int): IntArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun LongArray.copyOf(newSize: Int): LongArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun FloatArray.copyOf(newSize: Int): FloatArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun DoubleArray.copyOf(newSize: Int): DoubleArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun BooleanArray.copyOf(newSize: Int): BooleanArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun CharArray.copyOf(newSize: Int): CharArray

/**
 * Returns new array which is a copy of the original array, resized to the given [newSize].
 */
public header fun <T> Array<T>.copyOf(newSize: Int): Array<T?>

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray

/**
 * Returns new array which is a copy of range of original array.
 */
public header fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun <T> Array<T>.plus(element: T): Array<T>

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun ByteArray.plus(element: Byte): ByteArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun ShortArray.plus(element: Short): ShortArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun IntArray.plus(element: Int): IntArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun LongArray.plus(element: Long): LongArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun FloatArray.plus(element: Float): FloatArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun DoubleArray.plus(element: Double): DoubleArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun BooleanArray.plus(element: Boolean): BooleanArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header operator fun CharArray.plus(element: Char): CharArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun ShortArray.plus(elements: Collection<Short>): ShortArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun IntArray.plus(elements: Collection<Int>): IntArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun LongArray.plus(elements: Collection<Long>): LongArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun FloatArray.plus(elements: Collection<Float>): FloatArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.
 */
public header operator fun CharArray.plus(elements: Collection<Char>): CharArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun ByteArray.plus(elements: ByteArray): ByteArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun ShortArray.plus(elements: ShortArray): ShortArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun IntArray.plus(elements: IntArray): IntArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun LongArray.plus(elements: LongArray): LongArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun FloatArray.plus(elements: FloatArray): FloatArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray

/**
 * Returns an array containing all elements of the original array and then all elements of the given [elements] array.
 */
public header operator fun CharArray.plus(elements: CharArray): CharArray

/**
 * Returns an array containing all elements of the original array and then the given [element].
 */
public header fun <T> Array<T>.plusElement(element: T): Array<T>

/**
 * Sorts the array in-place.
 */
public header fun IntArray.sort(): Unit

/**
 * Sorts the array in-place.
 */
public header fun LongArray.sort(): Unit

/**
 * Sorts the array in-place.
 */
public header fun ByteArray.sort(): Unit

/**
 * Sorts the array in-place.
 */
public header fun ShortArray.sort(): Unit

/**
 * Sorts the array in-place.
 */
public header fun DoubleArray.sort(): Unit

/**
 * Sorts the array in-place.
 */
public header fun FloatArray.sort(): Unit

/**
 * Sorts the array in-place.
 */
public header fun CharArray.sort(): Unit

/**
 * Sorts the array in-place according to the natural order of its elements.
 */
public header fun <T: Comparable<T>> Array<out T>.sort(): Unit

/**
 * Sorts the array in-place according to the order specified by the given [comparator].
 */
public header fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit

/**
 * Returns a *typed* object array containing all of the elements of this primitive array.
 */
public header fun ByteArray.toTypedArray(): Array<Byte>

/**
 * Returns a *typed* object array containing all of the elements of this primitive array.
 */
public header fun ShortArray.toTypedArray(): Array<Short>

/**
 * Returns a *typed* object array containing all of the elements of this primitive array.
 */
public header fun IntArray.toTypedArray(): Array<Int>

/**
 * Returns a *typed* object array containing all of the elements of this primitive array.
 */
public header fun LongArray.toTypedArray(): Array<Long>

/**
 * Returns a *typed* object array containing all of the elements of this primitive array.
 */
public header fun FloatArray.toTypedArray(): Array<Float>

/**
 * Returns a *typed* object array containing all of the elements of this primitive array.
 */
public header fun DoubleArray.toTypedArray(): Array<Double>

/**
 * Returns a *typed* object array containing all of the elements of this primitive array.
 */
public header fun BooleanArray.toTypedArray(): Array<Boolean>

/**
 * Returns a *typed* object array containing all of the elements of this primitive array.
 */
public header fun CharArray.toTypedArray(): Array<Char>

/**
 * Sorts the array in-place according to the order specified by the given [comparison] function.
 */
public header inline fun <T> Array<out T>.sort(noinline comparison: (T, T) -> Int): Unit

/**
 * Sorts the array in-place according to the order specified by the given [comparison] function.
 */
public header inline fun ByteArray.sort(noinline comparison: (Byte, Byte) -> Int): Unit

/**
 * Sorts the array in-place according to the order specified by the given [comparison] function.
 */
public header inline fun ShortArray.sort(noinline comparison: (Short, Short) -> Int): Unit

/**
 * Sorts the array in-place according to the order specified by the given [comparison] function.
 */
public header inline fun IntArray.sort(noinline comparison: (Int, Int) -> Int): Unit

/**
 * Sorts the array in-place according to the order specified by the given [comparison] function.
 */
public header inline fun LongArray.sort(noinline comparison: (Long, Long) -> Int): Unit

/**
 * Sorts the array in-place according to the order specified by the given [comparison] function.
 */
public header inline fun FloatArray.sort(noinline comparison: (Float, Float) -> Int): Unit

/**
 * Sorts the array in-place according to the order specified by the given [comparison] function.
 */
public header inline fun DoubleArray.sort(noinline comparison: (Double, Double) -> Int): Unit

/**
 * Sorts the array in-place according to the order specified by the given [comparison] function.
 */
public header inline fun CharArray.sort(noinline comparison: (Char, Char) -> Int): Unit

