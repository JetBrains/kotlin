FILE: inlining.kt
    public final inline fun invoke(f: R|(kotlin/Int) -> kotlin/Int|): R|kotlin/Int| {
        lval x: R|kotlin/Int| = R|<local>/f|.R|SubstitutionOverride<kotlin/Function1.invoke: R|kotlin/Int|>|(Int(0))
        ^invoke R|<local>/f|.R|SubstitutionOverride<kotlin/Function1.invoke: R|kotlin/Int|>|(Int(0))
    }
    public final inline fun invoke_with_int(f: R|(kotlin/Int) -> kotlin/Int|, n: R|kotlin/Int|): R|kotlin/Int| {
        lval x: R|kotlin/Int| = R|<local>/n|.R|kotlin/Int.plus|(R|<local>/n|)
        ^invoke_with_int R|<local>/f|.R|SubstitutionOverride<kotlin/Function1.invoke: R|kotlin/Int|>|(R|<local>/x|)
    }
    @R|kotlin/Suppress|(names = vararg(String(WRONG_INVOCATION_KIND), String(LEAKED_IN_PLACE_LAMBDA))) @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun call_invoke(g: R|(kotlin/Int) -> kotlin/Int|): R|kotlin/Int|
        [R|Contract description]
         <
            CallsInPlace(g, AT_LEAST_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|kotlin/Int|>(R|<local>/g|, R|kotlin/contracts/InvocationKind.AT_LEAST_ONCE|)
            }
            )
        }

        lval z: R|kotlin/Int| = R|/invoke|(R|<local>/g|)
        ^call_invoke R|/invoke|(R|<local>/g|)
    }
    @R|kotlin/Suppress|(names = vararg(String(WRONG_INVOCATION_KIND), String(LEAKED_IN_PLACE_LAMBDA))) @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun call_invoke_with_int(g: R|(kotlin/Int) -> kotlin/Int|): R|kotlin/Int|
        [R|Contract description]
         <
            CallsInPlace(g, AT_LEAST_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|kotlin/Int|>(R|<local>/g|, R|kotlin/contracts/InvocationKind.AT_LEAST_ONCE|)
            }
            )
        }

        lval z: R|kotlin/Int| = R|/invoke_with_int|(R|<local>/g|, Int(1))
        ^call_invoke_with_int R|/invoke_with_int|(R|<local>/g|, R|<local>/g|.R|SubstitutionOverride<kotlin/Function1.invoke: R|kotlin/Int|>|(Int(1)))
    }
    @R|kotlin/Suppress|(names = vararg(String(WRONG_INVOCATION_KIND), String(LEAKED_IN_PLACE_LAMBDA))) @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun name_clashes(f: R|(kotlin/Int) -> kotlin/Int|): R|kotlin/Int|
        [R|Contract description]
         <
            CallsInPlace(f, AT_LEAST_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|kotlin/Int|>(R|<local>/f|, R|kotlin/contracts/InvocationKind.AT_LEAST_ONCE|)
            }
            )
        }

        lval x: R|kotlin/Int| = R|/invoke|(R|<local>/f|)
        ^name_clashes R|/invoke_with_int|(R|<local>/f|, R|<local>/x|)
    }
    @R|kotlin/Suppress|(names = vararg(String(WRONG_INVOCATION_KIND), String(LEAKED_IN_PLACE_LAMBDA))) @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun different_return_type(f: R|(kotlin/Int) -> kotlin/Int|): R|kotlin/Boolean|
        [R|Contract description]
         <
            CallsInPlace(f, AT_LEAST_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|kotlin/Int|>(R|<local>/f|, R|kotlin/contracts/InvocationKind.AT_LEAST_ONCE|)
            }
            )
        }

        lval x: R|kotlin/Int| = R|/invoke|(R|<local>/f|)
        ^different_return_type ==(R|<local>/x|, R|/invoke|(R|<local>/f|))
    }
