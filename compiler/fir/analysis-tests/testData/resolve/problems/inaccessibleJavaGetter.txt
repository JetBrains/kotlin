FILE: test.kt
    public abstract interface DescriptorWithAccessor : R|kotlin/Any| {
        public abstract val setter: R|kotlin/String|
            public get(): R|kotlin/String|

        public abstract val isDelegated: R|kotlin/Boolean|
            public get(): R|kotlin/Boolean|

    }
    public final class WrappedPropertyDescriptor : R|PropertyDescriptor| {
        public constructor(): R|WrappedPropertyDescriptor| {
            super<R|kotlin/Any|>()
        }

        public final override val setter: R|kotlin/String|
            public get(): R|kotlin/String| {
                ^ String(K)
            }

        public final override val isDelegated: R|kotlin/Boolean|
            public get(): R|kotlin/Boolean| {
                ^ Boolean(false)
            }

    }
    public final fun test(): R|kotlin/Unit| {
        lval descriptor: R|WrappedPropertyDescriptor| = R|/WrappedPropertyDescriptor.WrappedPropertyDescriptor|()
        lval res1: R|kotlin/String| = R|<local>/descriptor|.R|/WrappedPropertyDescriptor.setter|
        lval res2: R|ERROR CLASS: Unresolved name: getSetter| = R|<local>/descriptor|.<Unresolved name: getSetter>#()
        lval res3: R|kotlin/Boolean| = R|<local>/descriptor|.R|/WrappedPropertyDescriptor.isDelegated|
        lval res4: R|ERROR CLASS: Unresolved name: isDelegated| = R|<local>/descriptor|.<Unresolved name: isDelegated>#()
    }
