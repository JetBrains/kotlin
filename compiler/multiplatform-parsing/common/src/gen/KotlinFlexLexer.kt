// Generated by JFlex 1.10.14 http://jflex.de/  (tweaked for IntelliJ platform)
// source: compiler/multiplatform-parsing/common/src/org/jetbrains/kotlin/kmp/lexer/Kotlin.flex

@file:Suppress("PackageDirectoryMismatch") // The generated files are located in another directory

package org.jetbrains.kotlin.kmp.lexer

import com.intellij.platform.syntax.SyntaxElementType
import com.intellij.platform.syntax.element.SyntaxTokenTypes
import com.intellij.platform.syntax.util.lexer.FlexLexer
import org.jetbrains.annotations.ApiStatus
import kotlin.jvm.JvmStatic // Not needed on JVM, but needed when compiling other targets

@ApiStatus.Experimental

class KotlinFlexLexer : FlexLexer {
companion object {
  /** This character denotes the end of file */
  private const val YYEOF = -1 

  /** initial size of the lookahead buffer */
  private const val ZZ_BUFFERSIZE: Int = 16384

  /** lexical states */
  public const val YYINITIAL: Int = 0
  public const val STRING_PREFIX: Int = 2
  public const val STRING: Int = 4
  public const val RAW_STRING: Int = 6
  public const val SHORT_TEMPLATE_ENTRY: Int = 8
  public const val BLOCK_COMMENT: Int = 10
  public const val DOC_COMMENT: Int = 12
  public const val LONG_TEMPLATE_ENTRY: Int = 14
  public const val UNMATCHED_BACKTICK: Int = 16

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  @JvmStatic
  private val ZZ_LEXSTATE: IntArray = intArrayOf(
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6, 
     0, 0
  )

  /**
   * Top-level table for translating characters to character classes
   */
  private const val ZZ_CMAP_TOP_PACKED_0: String  =
    "\u0001\u0000\u0001\u0100\u0001\u0200\u0001\u0300\u0001\u0400\u0001\u0500\u0001\u0600\u0001\u0700"+
    "\u0001\u0800\u0001\u0900\u0001\u0a00\u0001\u0b00\u0001\u0c00\u0001\u0d00\u0001\u0e00\u0001\u0f00"+
    "\u0001\u1000\u0001\u0100\u0001\u1100\u0001\u1200\u0001\u1300\u0001\u0100\u0001\u1400\u0001\u1500"+
    "\u0001\u1600\u0001\u1700\u0001\u1800\u0001\u1900\u0001\u1a00\u0001\u1b00\u0001\u0100\u0001\u1c00"+
    "\u0001\u1d00\u0001\u1e00\u000a\u1f00\u0001\u2000\u0001\u2100\u0001\u2200\u0001\u1f00\u0001\u2300"+
    "\u0001\u2400\u0002\u1f00\u0019\u0100\u0001\u2500\u0051\u0100\u0001\u2600\u0004\u0100\u0001\u2700"+
    "\u0001\u0100\u0001\u2800\u0001\u2900\u0001\u2a00\u0001\u2b00\u0001\u2c00\u0001\u2d00\u002b\u0100"+
    "\u0001\u2e00\u0008\u2f00\u0019\u1f00\u0001\u0100\u0001\u3000\u0001\u3100\u0001\u0100\u0001\u3200"+
    "\u0001\u3300\u0001\u3400\u0001\u3500\u0001\u1f00\u0001\u3600\u0001\u3700\u0001\u3800\u0001\u3900"+
    "\u0001\u0100\u0001\u3a00\u0001\u3b00\u0001\u3c00\u0001\u3d00\u0001\u3e00\u0001\u3f00\u0001\u4000"+
    "\u0001\u1f00\u0001\u4100\u0001\u4200\u0001\u4300\u0001\u4400\u0001\u4500\u0001\u4600\u0001\u4700"+
    "\u0001\u4800\u0001\u4900\u0001\u4a00\u0001\u4b00\u0001\u4c00\u0001\u1f00\u0001\u4d00\u0001\u4e00"+
    "\u0001\u4f00\u0001\u1f00\u0003\u0100\u0001\u5000\u0001\u5100\u0001\u5200\u000a\u1f00\u0004\u0100"+
    "\u0001\u5300\u000f\u1f00\u0002\u0100\u0001\u5400\u0021\u1f00\u0002\u0100\u0001\u5500\u0001\u5600"+
    "\u0002\u1f00\u0001\u5700\u0001\u5800\u0017\u0100\u0001\u5900\u0002\u0100\u0001\u5a00\u0025\u1f00"+
    "\u0001\u0100\u0001\u5b00\u0001\u5c00\u0009\u1f00\u0001\u5d00\u0017\u1f00\u0001\u5e00\u0001\u5f00"+
    "\u0001\u6000\u0001\u6100\u0009\u1f00\u0001\u6200\u0001\u6300\u0005\u1f00\u0001\u6400\u0001\u6500"+
    "\u0004\u1f00\u0001\u6600\u0011\u1f00\u00a6\u0100\u0001\u6700\u0010\u0100\u0001\u6800\u0001\u6900"+
    "\u0015\u0100\u0001\u6a00\u001c\u0100\u0001\u6b00\u000c\u1f00\u0002\u0100\u0001\u6c00\u0e05\u1f00"

  @JvmStatic
  private fun zzUnpackcmap_top(): IntArray {
    val result: IntArray = IntArray(4352)
    var offset: Int = 0
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackcmap_top(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_CMAP_TOP: IntArray = zzUnpackcmap_top()


  /**
   * Second-level tables for translating characters to character classes
   */
  private const val ZZ_CMAP_BLOCKS_PACKED_0: String  =
    "\u0009\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0003\u0012\u0000\u0001\u0001"+
    "\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000c"+
    "\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014"+
    "\u0009\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c"+
    "\u0001\u001d\u0001\u001e\u0002\u001d\u0001\u001f\u0001\u0020\u0005\u0021\u0001\u0022\u0008\u0021"+
    "\u0001\u0023\u0002\u0021\u0001\u0024\u0002\u0021\u0001\u0025\u0001\u0026\u0001\u0027\u0001\u0000"+
    "\u0001\u0028\u0001\u0029\u0001\u002a\u0001\u002b\u0001\u002c\u0001\u002d\u0001\u002e\u0001\u002f"+
    "\u0001\u0030\u0001\u0031\u0001\u0032\u0001\u0033\u0001\u0034\u0001\u0035\u0001\u0021\u0001\u0036"+
    "\u0001\u0037\u0001\u0038\u0001\u0021\u0001\u0039\u0001\u003a\u0001\u003b\u0001\u003c\u0001\u003d"+
    "\u0001\u003e\u0001\u0024\u0001\u003f\u0001\u0021\u0001\u0040\u0001\u0041\u0001\u0042\u0007\u0000"+
    "\u0001\u0003\u0024\u0000\u0001\u0021\u000a\u0000\u0001\u0021\u0004\u0000\u0001\u0021\u0005\u0000"+
    "\u0017\u0021\u0001\u0000\u001f\u0021\u0001\u0000\u01ca\u0021\u0004\u0000\u000c\u0021\u000e\u0000"+
    "\u0005\u0021\u0007\u0000\u0001\u0021\u0001\u0000\u0001\u0021\u0081\u0000\u0005\u0021\u0001\u0000"+
    "\u0002\u0021\u0002\u0000\u0004\u0021\u0001\u0000\u0001\u0021\u0006\u0000\u0001\u0021\u0001\u0000"+
    "\u0003\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0014\u0021\u0001\u0000\u0053\u0021\u0001\u0000"+
    "\u008b\u0021\u0008\u0000\u00a6\u0021\u0001\u0000\u0026\u0021\u0002\u0000\u0001\u0021\u0006\u0000"+
    "\u0029\u0021\u0047\u0000\u001b\u0021\u0004\u0000\u0004\u0021\u002d\u0000\u002b\u0021\u0015\u0000"+
    "\u000a\u0043\u0004\u0000\u0002\u0021\u0001\u0000\u0063\u0021\u0001\u0000\u0001\u0021\u000f\u0000"+
    "\u0002\u0021\u0007\u0000\u0002\u0021\u000a\u0043\u0003\u0021\u0002\u0000\u0001\u0021\u0010\u0000"+
    "\u0001\u0021\u0001\u0000\u001e\u0021\u001d\u0000\u0059\u0021\u000b\u0000\u0001\u0021\u000e\u0000"+
    "\u000a\u0043\u0021\u0021\u0009\u0000\u0002\u0021\u0004\u0000\u0001\u0021\u0005\u0000\u0016\u0021"+
    "\u0004\u0000\u0001\u0021\u0009\u0000\u0001\u0021\u0003\u0000\u0001\u0021\u0017\u0000\u0019\u0021"+
    "\u0007\u0000\u000b\u0021\u0035\u0000\u0015\u0021\u0001\u0000\u0008\u0021\u0046\u0000\u0036\u0021"+
    "\u0003\u0000\u0001\u0021\u0012\u0000\u0001\u0021\u0007\u0000\u000a\u0021\u0004\u0000\u000a\u0043"+
    "\u0001\u0000\u0010\u0021\u0004\u0000\u0008\u0021\u0002\u0000\u0002\u0021\u0002\u0000\u0016\u0021"+
    "\u0001\u0000\u0007\u0021\u0001\u0000\u0001\u0021\u0003\u0000\u0004\u0021\u0003\u0000\u0001\u0021"+
    "\u0010\u0000\u0001\u0021\u000d\u0000\u0002\u0021\u0001\u0000\u0003\u0021\u0004\u0000\u000a\u0043"+
    "\u0002\u0021\u000a\u0000\u0001\u0021\u0008\u0000\u0006\u0021\u0004\u0000\u0002\u0021\u0002\u0000"+
    "\u0016\u0021\u0001\u0000\u0007\u0021\u0001\u0000\u0002\u0021\u0001\u0000\u0002\u0021\u0001\u0000"+
    "\u0002\u0021\u001f\u0000\u0004\u0021\u0001\u0000\u0001\u0021\u0007\u0000\u000a\u0043\u0002\u0000"+
    "\u0003\u0021\u0010\u0000\u0009\u0021\u0001\u0000\u0003\u0021\u0001\u0000\u0016\u0021\u0001\u0000"+
    "\u0007\u0021\u0001\u0000\u0002\u0021\u0001\u0000\u0005\u0021\u0003\u0000\u0001\u0021\u0012\u0000"+
    "\u0001\u0021\u000f\u0000\u0002\u0021\u0004\u0000\u000a\u0043\u0009\u0000\u0001\u0021\u000b\u0000"+
    "\u0008\u0021\u0002\u0000\u0002\u0021\u0002\u0000\u0016\u0021\u0001\u0000\u0007\u0021\u0001\u0000"+
    "\u0002\u0021\u0001\u0000\u0005\u0021\u0003\u0000\u0001\u0021\u001e\u0000\u0002\u0021\u0001\u0000"+
    "\u0003\u0021\u0004\u0000\u000a\u0043\u0001\u0000\u0001\u0021\u0011\u0000\u0001\u0021\u0001\u0000"+
    "\u0006\u0021\u0003\u0000\u0003\u0021\u0001\u0000\u0004\u0021\u0003\u0000\u0002\u0021\u0001\u0000"+
    "\u0001\u0021\u0001\u0000\u0002\u0021\u0003\u0000\u0002\u0021\u0003\u0000\u0003\u0021\u0003\u0000"+
    "\u000c\u0021\u0016\u0000\u0001\u0021\u0015\u0000\u000a\u0043\u0015\u0000\u0008\u0021\u0001\u0000"+
    "\u0003\u0021\u0001\u0000\u0017\u0021\u0001\u0000\u0010\u0021\u0003\u0000\u0001\u0021\u001a\u0000"+
    "\u0003\u0021\u0005\u0000\u0002\u0021\u0004\u0000\u000a\u0043\u0010\u0000\u0001\u0021\u0004\u0000"+
    "\u0008\u0021\u0001\u0000\u0003\u0021\u0001\u0000\u0017\u0021\u0001\u0000\u000a\u0021\u0001\u0000"+
    "\u0005\u0021\u0003\u0000\u0001\u0021\u0020\u0000\u0001\u0021\u0001\u0000\u0002\u0021\u0004\u0000"+
    "\u000a\u0043\u0001\u0000\u0002\u0021\u0012\u0000\u0008\u0021\u0001\u0000\u0003\u0021\u0001\u0000"+
    "\u0029\u0021\u0002\u0000\u0001\u0021\u0010\u0000\u0001\u0021\u0005\u0000\u0003\u0021\u0008\u0000"+
    "\u0003\u0021\u0004\u0000\u000a\u0043\u000a\u0000\u0006\u0021\u0005\u0000\u0012\u0021\u0003\u0000"+
    "\u0018\u0021\u0001\u0000\u0009\u0021\u0001\u0000\u0001\u0021\u0002\u0000\u0007\u0021\u001f\u0000"+
    "\u000a\u0043\u0011\u0000\u0030\u0021\u0001\u0000\u0002\u0021\u000c\u0000\u0007\u0021\u0009\u0000"+
    "\u000a\u0043\u0027\u0000\u0002\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0005\u0021\u0001\u0000"+
    "\u0018\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u000a\u0021\u0001\u0000\u0002\u0021\u0009\u0000"+
    "\u0001\u0021\u0002\u0000\u0005\u0021\u0001\u0000\u0001\u0021\u0009\u0000\u000a\u0043\u0002\u0000"+
    "\u0004\u0021\u0020\u0000\u0001\u0021\u001f\u0000\u000a\u0043\u0016\u0000\u0008\u0021\u0001\u0000"+
    "\u0024\u0021\u001b\u0000\u0005\u0021\u0073\u0000\u002b\u0021\u0014\u0000\u0001\u0021\u000a\u0043"+
    "\u0006\u0000\u0006\u0021\u0004\u0000\u0004\u0021\u0003\u0000\u0001\u0021\u0003\u0000\u0002\u0021"+
    "\u0007\u0000\u0003\u0021\u0004\u0000\u000d\u0021\u000c\u0000\u0001\u0021\u0001\u0000\u000a\u0043"+
    "\u0006\u0000\u0026\u0021\u0001\u0000\u0001\u0021\u0005\u0000\u0001\u0021\u0002\u0000\u002b\u0021"+
    "\u0001\u0000\u004d\u0021\u0001\u0000\u0004\u0021\u0002\u0000\u0007\u0021\u0001\u0000\u0001\u0021"+
    "\u0001\u0000\u0004\u0021\u0002\u0000\u0029\u0021\u0001\u0000\u0004\u0021\u0002\u0000\u0021\u0021"+
    "\u0001\u0000\u0004\u0021\u0002\u0000\u0007\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0004\u0021"+
    "\u0002\u0000\u000f\u0021\u0001\u0000\u0039\u0021\u0001\u0000\u0004\u0021\u0002\u0000\u0043\u0021"+
    "\u0025\u0000\u0010\u0021\u0010\u0000\u0056\u0021\u0002\u0000\u0006\u0021\u0003\u0000\u016c\u0021"+
    "\u0002\u0000\u0011\u0021\u0001\u0000\u001a\u0021\u0005\u0000\u004b\u0021\u0006\u0000\u0008\u0021"+
    "\u0007\u0000\u000d\u0021\u0001\u0000\u0004\u0021\u000e\u0000\u0012\u0021\u000e\u0000\u0012\u0021"+
    "\u000e\u0000\u000d\u0021\u0001\u0000\u0003\u0021\u000f\u0000\u0034\u0021\u0023\u0000\u0001\u0021"+
    "\u0004\u0000\u0001\u0021\u0003\u0000\u000a\u0043\u0026\u0000\u000a\u0043\u0006\u0000\u0059\u0021"+
    "\u0007\u0000\u0005\u0021\u0002\u0000\u0022\u0021\u0001\u0000\u0001\u0021\u0005\u0000\u0046\u0021"+
    "\u000a\u0000\u001f\u0021\u0027\u0000\u000a\u0043\u001e\u0021\u0002\u0000\u0005\u0021\u000b\u0000"+
    "\u002c\u0021\u0004\u0000\u001a\u0021\u0006\u0000\u000a\u0043\u0026\u0000\u0017\u0021\u0009\u0000"+
    "\u0035\u0021\u002b\u0000\u000a\u0043\u0006\u0000\u000a\u0043\u000d\u0000\u0001\u0021\u005d\u0000"+
    "\u002f\u0021\u0011\u0000\u0007\u0021\u0004\u0000\u000a\u0043\u0029\u0000\u001e\u0021\u000d\u0000"+
    "\u0002\u0021\u000a\u0043\u002c\u0021\u001a\u0000\u0024\u0021\u001c\u0000\u000a\u0043\u0003\u0000"+
    "\u0003\u0021\u000a\u0043\u0024\u0021\u0002\u0000\u0009\u0021\u0007\u0000\u002b\u0021\u0002\u0000"+
    "\u0003\u0021\u0029\u0000\u0004\u0021\u0001\u0000\u0006\u0021\u0001\u0000\u0002\u0021\u0003\u0000"+
    "\u0001\u0021\u0005\u0000\u00c0\u0021\u0040\u0000\u0016\u0021\u0002\u0000\u0006\u0021\u0002\u0000"+
    "\u0026\u0021\u0002\u0000\u0006\u0021\u0002\u0000\u0008\u0021\u0001\u0000\u0001\u0021\u0001\u0000"+
    "\u0001\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u001f\u0021\u0002\u0000\u0035\u0021\u0001\u0000"+
    "\u0007\u0021\u0001\u0000\u0001\u0021\u0003\u0000\u0003\u0021\u0001\u0000\u0007\u0021\u0003\u0000"+
    "\u0004\u0021\u0002\u0000\u0006\u0021\u0004\u0000\u000d\u0021\u0005\u0000\u0003\u0021\u0001\u0000"+
    "\u0007\u0021\u002b\u0000\u0002\u0003\u0047\u0000\u0001\u0021\u000d\u0000\u0001\u0021\u0010\u0000"+
    "\u000d\u0021\u0065\u0000\u0001\u0021\u0004\u0000\u0001\u0021\u0002\u0000\u000a\u0021\u0001\u0000"+
    "\u0001\u0021\u0003\u0000\u0005\u0021\u0006\u0000\u0001\u0021\u0001\u0000\u0001\u0021\u0001\u0000"+
    "\u0001\u0021\u0001\u0000\u0004\u0021\u0001\u0000\u000b\u0021\u0002\u0000\u0004\u0021\u0005\u0000"+
    "\u0005\u0021\u0004\u0000\u0001\u0021\u0034\u0000\u0002\u0021\u017b\u0000\u002f\u0021\u0001\u0000"+
    "\u002f\u0021\u0001\u0000\u0085\u0021\u0006\u0000\u0004\u0021\u0003\u0000\u0002\u0021\u000c\u0000"+
    "\u0026\u0021\u0001\u0000\u0001\u0021\u0005\u0000\u0001\u0021\u0002\u0000\u0038\u0021\u0007\u0000"+
    "\u0001\u0021\u0010\u0000\u0017\u0021\u0009\u0000\u0007\u0021\u0001\u0000\u0007\u0021\u0001\u0000"+
    "\u0007\u0021\u0001\u0000\u0007\u0021\u0001\u0000\u0007\u0021\u0001\u0000\u0007\u0021\u0001\u0000"+
    "\u0007\u0021\u0001\u0000\u0007\u0021\u0050\u0000\u0001\u0021\u00d5\u0000\u0002\u0021\u002a\u0000"+
    "\u0005\u0021\u0005\u0000\u0002\u0021\u0004\u0000\u0056\u0021\u0006\u0000\u0003\u0021\u0001\u0000"+
    "\u005a\u0021\u0001\u0000\u0004\u0021\u0005\u0000\u002b\u0021\u0001\u0000\u005e\u0021\u0011\u0000"+
    "\u001b\u0021\u0035\u0000\u00c6\u0021\u004a\u0000\u00f0\u0021\u0010\u0000\u008d\u0021\u0043\u0000"+
    "\u002e\u0021\u0002\u0000\u000d\u0021\u0003\u0000\u0010\u0021\u000a\u0043\u0002\u0021\u0014\u0000"+
    "\u002f\u0021\u0010\u0000\u001f\u0021\u0002\u0000\u0046\u0021\u0031\u0000\u0009\u0021\u0002\u0000"+
    "\u0067\u0021\u0002\u0000\u0035\u0021\u0002\u0000\u0005\u0021\u0030\u0000\u000b\u0021\u0001\u0000"+
    "\u0003\u0021\u0001\u0000\u0004\u0021\u0001\u0000\u0017\u0021\u001d\u0000\u0034\u0021\u000e\u0000"+
    "\u0032\u0021\u001c\u0000\u000a\u0043\u0018\u0000\u0006\u0021\u0003\u0000\u0001\u0021\u0001\u0000"+
    "\u0002\u0021\u0001\u0000\u000a\u0043\u001c\u0021\u000a\u0000\u0017\u0021\u0019\u0000\u001d\u0021"+
    "\u0007\u0000\u002f\u0021\u001c\u0000\u0001\u0021\u000a\u0043\u0006\u0000\u0005\u0021\u0001\u0000"+
    "\u000a\u0021\u000a\u0043\u0005\u0021\u0001\u0000\u0029\u0021\u0017\u0000\u0003\u0021\u0001\u0000"+
    "\u0008\u0021\u0004\u0000\u000a\u0043\u0006\u0000\u0017\u0021\u0003\u0000\u0001\u0021\u0003\u0000"+
    "\u0032\u0021\u0001\u0000\u0001\u0021\u0003\u0000\u0002\u0021\u0002\u0000\u0005\u0021\u0002\u0000"+
    "\u0001\u0021\u0001\u0000\u0001\u0021\u0018\u0000\u0003\u0021\u0002\u0000\u000b\u0021\u0007\u0000"+
    "\u0003\u0021\u000c\u0000\u0006\u0021\u0002\u0000\u0006\u0021\u0002\u0000\u0006\u0021\u0009\u0000"+
    "\u0007\u0021\u0001\u0000\u0007\u0021\u0001\u0000\u002b\u0021\u0001\u0000\u000c\u0021\u0008\u0000"+
    "\u0073\u0021\u000d\u0000\u000a\u0043\u0006\u0000\u00a4\u0021\u000c\u0000\u0017\u0021\u0004\u0000"+
    "\u0031\u0021\u0004\u0000\u0100\u0003\u006e\u0021\u0002\u0000\u006a\u0021\u0026\u0000\u0007\u0021"+
    "\u000c\u0000\u0005\u0021\u0005\u0000\u0001\u0021\u0001\u0000\u000a\u0021\u0001\u0000\u000d\u0021"+
    "\u0001\u0000\u0005\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0002\u0021\u0001\u0000\u0002\u0021"+
    "\u0001\u0000\u006c\u0021\u0021\u0000\u006b\u0021\u0012\u0000\u0040\u0021\u0002\u0000\u0036\u0021"+
    "\u0028\u0000\u000c\u0021\u0074\u0000\u0005\u0021\u0001\u0000\u0087\u0021\u0013\u0000\u000a\u0043"+
    "\u0007\u0000\u001a\u0021\u0006\u0000\u001a\u0021\u000b\u0000\u0059\u0021\u0003\u0000\u0006\u0021"+
    "\u0002\u0000\u0006\u0021\u0002\u0000\u0006\u0021\u0002\u0000\u0003\u0021\u0023\u0000\u000c\u0021"+
    "\u0001\u0000\u001a\u0021\u0001\u0000\u0013\u0021\u0001\u0000\u0002\u0021\u0001\u0000\u000f\u0021"+
    "\u0002\u0000\u000e\u0021\u0022\u0000\u007b\u0021\u0085\u0000\u001d\u0021\u0003\u0000\u0031\u0021"+
    "\u002f\u0000\u0020\u0021\u000d\u0000\u0014\u0021\u0001\u0000\u0008\u0021\u0006\u0000\u0026\u0021"+
    "\u000a\u0000\u001e\u0021\u0002\u0000\u0024\u0021\u0004\u0000\u0008\u0021\u0030\u0000\u009e\u0021"+
    "\u0002\u0000\u000a\u0043\u0006\u0000\u0024\u0021\u0004\u0000\u0024\u0021\u0004\u0000\u0028\u0021"+
    "\u0008\u0000\u0034\u0021\u009c\u0000\u0037\u0021\u0009\u0000\u0016\u0021\u000a\u0000\u0008\u0021"+
    "\u0098\u0000\u0006\u0021\u0002\u0000\u0001\u0021\u0001\u0000\u002c\u0021\u0001\u0000\u0002\u0021"+
    "\u0003\u0000\u0001\u0021\u0002\u0000\u0017\u0021\u000a\u0000\u0017\u0021\u0009\u0000\u001f\u0021"+
    "\u0041\u0000\u0013\u0021\u0001\u0000\u0002\u0021\u000a\u0000\u0016\u0021\u000a\u0000\u001a\u0021"+
    "\u0046\u0000\u0038\u0021\u0006\u0000\u0002\u0021\u0040\u0000\u0001\u0021\u000f\u0000\u0004\u0021"+
    "\u0001\u0000\u0003\u0021\u0001\u0000\u001d\u0021\u002a\u0000\u001d\u0021\u0003\u0000\u001d\u0021"+
    "\u0023\u0000\u0008\u0021\u0001\u0000\u001c\u0021\u001b\u0000\u0036\u0021\u000a\u0000\u0016\u0021"+
    "\u000a\u0000\u0013\u0021\u000d\u0000\u0012\u0021\u006e\u0000\u0049\u0021\u0037\u0000\u0033\u0021"+
    "\u000d\u0000\u0033\u0021\u000d\u0000\u0024\u0021\u000c\u0000\u000a\u0043\u00c6\u0000\u001d\u0021"+
    "\u000a\u0000\u0001\u0021\u0008\u0000\u0016\u0021\u009a\u0000\u0017\u0021\u000c\u0000\u0035\u0021"+
    "\u002e\u0000\u000a\u0043\u0013\u0000\u002d\u0021\u0020\u0000\u0019\u0021\u0007\u0000\u000a\u0043"+
    "\u0009\u0000\u0024\u0021\u000f\u0000\u000a\u0043\u0004\u0000\u0001\u0021\u000b\u0000\u0023\u0021"+
    "\u0003\u0000\u0001\u0021\u000c\u0000\u0030\u0021\u000e\u0000\u0004\u0021\u000b\u0000\u000a\u0043"+
    "\u0001\u0021\u0001\u0000\u0001\u0021\u0023\u0000\u0012\u0021\u0001\u0000\u0019\u0021\u0054\u0000"+
    "\u0007\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0004\u0021\u0001\u0000\u000f\u0021\u0001\u0000"+
    "\u000a\u0021\u0007\u0000\u002f\u0021\u0011\u0000\u000a\u0043\u000b\u0000\u0008\u0021\u0002\u0000"+
    "\u0002\u0021\u0002\u0000\u0016\u0021\u0001\u0000\u0007\u0021\u0001\u0000\u0002\u0021\u0001\u0000"+
    "\u0005\u0021\u0003\u0000\u0001\u0021\u0012\u0000\u0001\u0021\u000c\u0000\u0005\u0021\u009e\u0000"+
    "\u0035\u0021\u0012\u0000\u0004\u0021\u0005\u0000\u000a\u0043\u0005\u0000\u0001\u0021\u0020\u0000"+
    "\u0030\u0021\u0014\u0000\u0002\u0021\u0001\u0000\u0001\u0021\u0008\u0000\u000a\u0043\u00a6\u0000"+
    "\u002f\u0021\u0029\u0000\u0004\u0021\u0024\u0000\u0030\u0021\u0014\u0000\u0001\u0021\u000b\u0000"+
    "\u000a\u0043\u0026\u0000\u002b\u0021\u000d\u0000\u0001\u0021\u0007\u0000\u000a\u0043\u0036\u0000"+
    "\u001b\u0021\u0015\u0000\u000a\u0043\u00c6\u0000\u002c\u0021\u0074\u0000\u0040\u0021\u000a\u0043"+
    "\u0015\u0000\u0001\u0021\u00a0\u0000\u0008\u0021\u0002\u0000\u0027\u0021\u0010\u0000\u0001\u0021"+
    "\u0001\u0000\u0001\u0021\u001c\u0000\u0001\u0021\u000a\u0000\u0028\u0021\u0007\u0000\u0001\u0021"+
    "\u0015\u0000\u0001\u0021\u000b\u0000\u002e\u0021\u0013\u0000\u0001\u0021\u0022\u0000\u0039\u0021"+
    "\u0007\u0000\u0009\u0021\u0001\u0000\u0025\u0021\u0011\u0000\u0001\u0021\u000f\u0000\u000a\u0043"+
    "\u0018\u0000\u001e\u0021\u0070\u0000\u0007\u0021\u0001\u0000\u0002\u0021\u0001\u0000\u0026\u0021"+
    "\u0015\u0000\u0001\u0021\u0009\u0000\u000a\u0043\u0006\u0000\u0006\u0021\u0001\u0000\u0002\u0021"+
    "\u0001\u0000\u0020\u0021\u000e\u0000\u0001\u0021\u0007\u0000\u000a\u0043\u0136\u0000\u0013\u0021"+
    "\u000d\u0000\u009a\u0021\u00e6\u0000\u00c4\u0021\u00bc\u0000\u002f\u0021\u00d1\u0000\u0047\u0021"+
    "\u00b9\u0000\u0039\u0021\u0007\u0000\u001f\u0021\u0001\u0000\u000a\u0043\u0066\u0000\u001e\u0021"+
    "\u0012\u0000\u0030\u0021\u0010\u0000\u0004\u0021\u000c\u0000\u000a\u0043\u0009\u0000\u0015\u0021"+
    "\u0005\u0000\u0013\u0021\u00b0\u0000\u0040\u0021\u0080\u0000\u004b\u0021\u0005\u0000\u0001\u0021"+
    "\u0042\u0000\u000d\u0021\u0040\u0000\u0002\u0021\u0001\u0000\u0001\u0021\u001c\u0000\u00f8\u0021"+
    "\u0008\u0000\u00f3\u0021\u000d\u0000\u001f\u0021\u0031\u0000\u0003\u0021\u0011\u0000\u0004\u0021"+
    "\u0008\u0000\u018c\u0021\u0004\u0000\u006b\u0021\u0005\u0000\u000d\u0021\u0003\u0000\u0009\u0021"+
    "\u0007\u0000\u000a\u0021\u0066\u0000\u0055\u0021\u0001\u0000\u0047\u0021\u0001\u0000\u0002\u0021"+
    "\u0002\u0000\u0001\u0021\u0002\u0000\u0002\u0021\u0002\u0000\u0004\u0021\u0001\u0000\u000c\u0021"+
    "\u0001\u0000\u0001\u0021\u0001\u0000\u0007\u0021\u0001\u0000\u0041\u0021\u0001\u0000\u0004\u0021"+
    "\u0002\u0000\u0008\u0021\u0001\u0000\u0007\u0021\u0001\u0000\u001c\u0021\u0001\u0000\u0004\u0021"+
    "\u0001\u0000\u0005\u0021\u0001\u0000\u0001\u0021\u0003\u0000\u0007\u0021\u0001\u0000\u0154\u0021"+
    "\u0002\u0000\u0019\u0021\u0001\u0000\u0019\u0021\u0001\u0000\u001f\u0021\u0001\u0000\u0019\u0021"+
    "\u0001\u0000\u001f\u0021\u0001\u0000\u0019\u0021\u0001\u0000\u001f\u0021\u0001\u0000\u0019\u0021"+
    "\u0001\u0000\u001f\u0021\u0001\u0000\u0019\u0021\u0001\u0000\u0008\u0021\u0002\u0000\u0032\u0043"+
    "\u002d\u0021\u000a\u0000\u0007\u0021\u0002\u0000\u000a\u0043\u0004\u0000\u0001\u0021\u0171\u0000"+
    "\u002c\u0021\u0004\u0000\u000a\u0043\u0006\u0000\u00c5\u0021\u003b\u0000\u0044\u0021\u0007\u0000"+
    "\u0001\u0021\u0004\u0000\u000a\u0043\u00a6\u0000\u0004\u0021\u0001\u0000\u001b\u0021\u0001\u0000"+
    "\u0002\u0021\u0001\u0000\u0001\u0021\u0002\u0000\u0001\u0021\u0001\u0000\u000a\u0021\u0001\u0000"+
    "\u0004\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0001\u0021\u0006\u0000\u0001\u0021\u0004\u0000"+
    "\u0001\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0003\u0021\u0001\u0000"+
    "\u0002\u0021\u0001\u0000\u0001\u0021\u0002\u0000\u0001\u0021\u0001\u0000\u0001\u0021\u0001\u0000"+
    "\u0001\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u0002\u0021\u0001\u0000"+
    "\u0001\u0021\u0002\u0000\u0004\u0021\u0001\u0000\u0007\u0021\u0001\u0000\u0004\u0021\u0001\u0000"+
    "\u0004\u0021\u0001\u0000\u0001\u0021\u0001\u0000\u000a\u0021\u0001\u0000\u0011\u0021\u0005\u0000"+
    "\u0003\u0021\u0001\u0000\u0005\u0021\u0001\u0000\u0011\u0021\u0044\u0000\u00d7\u0021\u0029\u0000"+
    "\u0035\u0021\u000b\u0000\u00de\u0021\u0002\u0000\u0182\u0021\u000e\u0000\u0131\u0021\u001f\u0000"+
    "\u001e\u0021\u00e2\u0000"

  @JvmStatic
  private fun zzUnpackcmap_blocks(): IntArray {
    val result: IntArray = IntArray(27904)
    var offset: Int = 0
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackcmap_blocks(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_CMAP_BLOCKS: IntArray = zzUnpackcmap_blocks()

  /**
   * Translates DFA states to action switch labels.
   */
  private const val ZZ_ACTION_PACKED_0: String  =
    "\u0007\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0001\u0001\u0006"+
    "\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e"+
    "\u0001\u000f\u0001\u0010\u0002\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016"+
    "\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u000f\u0019\u0001\u001d"+
    "\u0001\u0001\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001\u0022\u0001\u0020\u0001\u0001"+
    "\u0002\u0020\u0001\u0023\u0001\u0001\u0001\u0023\u0003\u0024\u0001\u0025\u0001\u0026\u0001\u0027"+
    "\u0001\u0000\u0001\u0028\u0001\u0000\u0001\u0029\u0001\u0000\u0001\u002a\u0001\u002b\u0002\u0008"+
    "\u0001\u002c\u0001\u002d\u0001\u002e\u0001\u002f\u0001\u0030\u0001\u0031\u0001\u0032\u0001\u0033"+
    "\u0001\u0034\u0001\u0035\u0001\u0036\u0002\u0000\u0001\u0011\u0002\u0033\u0003\u0011\u0001\u0037"+
    "\u0001\u0038\u0001\u0039\u0001\u003a\u0001\u003b\u0001\u003c\u0001\u0000\u0001\u003d\u0003\u0019"+
    "\u0001\u003e\u0004\u0019\u0001\u003f\u0001\u0040\u0001\u0041\u000a\u0019\u0001\u0042\u0001\u0000"+
    "\u0001\u0043\u0001\u0000\u0001\u0044\u0002\u0045\u0002\u0000\u0001\u0023\u0001\u0046\u0001\u0047"+
    "\u0001\u0048\u0001\u0049\u0001\u004a\u0001\u0000\u0001\u004b\u0001\u004c\u0001\u004d\u0001\u004e"+
    "\u0002\u0000\u0001\u0033\u0001\u004f\u0001\u0019\u0001\u0050\u0005\u0019\u0001\u0051\u0001\u0052"+
    "\u0009\u0019\u0001\u0053\u0001\u0019\u0001\u0054\u0001\u0055\u0002\u0019\u0001\u0056\u0002\u0000"+
    "\u0001\u0057\u0002\u0023\u0001\u0058\u0001\u0029\u0001\u0059\u0003\u0019\u0001\u005a\u0002\u0019"+
    "\u0001\u005b\u0004\u0019\u0001\u005c\u0001\u0019\u0001\u005d\u0001\u0019\u0001\u005e\u0001\u0019"+
    "\u0001\u0043\u0001\u0000\u0001\u005f\u0001\u0060\u0001\u0061\u0001\u0019\u0001\u0062\u0004\u0019"+
    "\u0001\u0063\u0001\u0064\u0002\u0019\u0001\u0065\u0001\u0000\u0002\u0019\u0001\u0066\u0001\u0019"+
    "\u0001\u0067\u0001\u0019\u0001\u0068\u0002\u0019\u0001\u0069\u0001\u0019\u0001\u006a\u0002\u0019"+
    "\u0001\u006b\u0001\u006c"

  @JvmStatic
  private fun zzUnpackAction(): IntArray {
    val result: IntArray = IntArray(236)
    var offset: Int = 0
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackAction(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_ACTION: IntArray = zzUnpackAction()


  /**
   * Translates a state to a row index in the transition table
   */
  private const val ZZ_ROWMAP_PACKED_0: String  =
    "\u0000\u0000\u0000\u0044\u0000\u0088\u0000\u00cc\u0000\u0110\u0000\u0154\u0000\u0198\u0000\u01dc"+
    "\u0000\u0220\u0000\u0264\u0000\u01dc\u0000\u02a8\u0000\u02ec\u0000\u0330\u0000\u0374\u0000\u03b8"+
    "\u0000\u01dc\u0000\u01dc\u0000\u03fc\u0000\u0440\u0000\u01dc\u0000\u0484\u0000\u04c8\u0000\u050c"+
    "\u0000\u0550\u0000\u0594\u0000\u05d8\u0000\u061c\u0000\u0660\u0000\u06a4\u0000\u06e8\u0000\u01dc"+
    "\u0000\u01dc\u0000\u072c\u0000\u01dc\u0000\u01dc\u0000\u0770\u0000\u07b4\u0000\u07f8\u0000\u083c"+
    "\u0000\u0880\u0000\u08c4\u0000\u0908\u0000\u094c\u0000\u0990\u0000\u09d4\u0000\u0a18\u0000\u0a5c"+
    "\u0000\u0aa0\u0000\u0ae4\u0000\u0b28\u0000\u0b6c\u0000\u01dc\u0000\u0bb0\u0000\u01dc\u0000\u0bf4"+
    "\u0000\u0c38\u0000\u01dc\u0000\u01dc\u0000\u0c7c\u0000\u0cc0\u0000\u01dc\u0000\u0d04\u0000\u0d48"+
    "\u0000\u0d8c\u0000\u0dd0\u0000\u01dc\u0000\u0e14\u0000\u0e58\u0000\u01dc\u0000\u01dc\u0000\u0e9c"+
    "\u0000\u0ee0\u0000\u0f24\u0000\u0f68\u0000\u0fac\u0000\u0ff0\u0000\u01dc\u0000\u01dc\u0000\u01dc"+
    "\u0000\u1034\u0000\u01dc\u0000\u01dc\u0000\u01dc\u0000\u01dc\u0000\u01dc\u0000\u01dc\u0000\u1078"+
    "\u0000\u10bc\u0000\u1100\u0000\u1144\u0000\u01dc\u0000\u1188\u0000\u11cc\u0000\u1210\u0000\u1254"+
    "\u0000\u01dc\u0000\u1298\u0000\u12dc\u0000\u1320\u0000\u01dc\u0000\u01dc\u0000\u01dc\u0000\u1364"+
    "\u0000\u01dc\u0000\u01dc\u0000\u13a8\u0000\u13ec\u0000\u1430\u0000\u1474\u0000\u14b8\u0000\u072c"+
    "\u0000\u14fc\u0000\u1540\u0000\u1584\u0000\u15c8\u0000\u072c\u0000\u160c\u0000\u072c\u0000\u1650"+
    "\u0000\u1694\u0000\u16d8\u0000\u171c\u0000\u1760\u0000\u17a4\u0000\u17e8\u0000\u182c\u0000\u1870"+
    "\u0000\u18b4\u0000\u01dc\u0000\u18f8\u0000\u193c\u0000\u1980\u0000\u01dc\u0000\u01dc\u0000\u19c4"+
    "\u0000\u1a08\u0000\u1a4c\u0000\u1a90\u0000\u01dc\u0000\u01dc\u0000\u01dc\u0000\u1ad4\u0000\u1ad4"+
    "\u0000\u1b18\u0000\u01dc\u0000\u01dc\u0000\u1b5c\u0000\u01dc\u0000\u1ba0\u0000\u1be4\u0000\u1c28"+
    "\u0000\u01dc\u0000\u01dc\u0000\u01dc\u0000\u1c6c\u0000\u1cb0\u0000\u1cf4\u0000\u1d38\u0000\u1d7c"+
    "\u0000\u072c\u0000\u072c\u0000\u1dc0\u0000\u1e04\u0000\u1e48\u0000\u1e8c\u0000\u1ed0\u0000\u1f14"+
    "\u0000\u1f58\u0000\u1f9c\u0000\u1fe0\u0000\u072c\u0000\u2024\u0000\u072c\u0000\u072c\u0000\u2068"+
    "\u0000\u20ac\u0000\u01dc\u0000\u20f0\u0000\u2134\u0000\u1a08\u0000\u01dc\u0000\u2178\u0000\u01dc"+
    "\u0000\u01dc\u0000\u01dc\u0000\u21bc\u0000\u2200\u0000\u2244\u0000\u072c\u0000\u2288\u0000\u22cc"+
    "\u0000\u072c\u0000\u2310\u0000\u2354\u0000\u2398\u0000\u23dc\u0000\u072c\u0000\u2420\u0000\u072c"+
    "\u0000\u2464\u0000\u072c\u0000\u24a8\u0000\u01dc\u0000\u24ec\u0000\u0d48\u0000\u072c\u0000\u072c"+
    "\u0000\u2530\u0000\u072c\u0000\u2574\u0000\u25b8\u0000\u25fc\u0000\u2640\u0000\u072c\u0000\u072c"+
    "\u0000\u2684\u0000\u26c8\u0000\u072c\u0000\u270c\u0000\u2750\u0000\u2794\u0000\u072c\u0000\u27d8"+
    "\u0000\u072c\u0000\u281c\u0000\u072c\u0000\u2860\u0000\u28a4\u0000\u072c\u0000\u28e8\u0000\u072c"+
    "\u0000\u292c\u0000\u2970\u0000\u072c\u0000\u072c"

  @JvmStatic
  private fun zzUnpackRowMap(): IntArray {
    val result: IntArray = IntArray(236)
    var offset: Int = 0
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackRowMap(packed: String, offset: Int, result: IntArray): Int {
    var i: Int = 0  /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length - 1
    while (i < l) {
      val high: Int = packed[i++].code shl 16
      result[j++] = high or packed[i++].code
    }
    return j
  }

  @JvmStatic
  private val ZZ_ROWMAP: IntArray = zzUnpackRowMap()

  /**
   * The transition table of the DFA
   */
  private const val ZZ_TRANS_PACKED_0: String  =
    "\u0001\u0008\u0002\u0009\u0001\u0008\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000c\u0001\u000d"+
    "\u0001\u000e\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015"+
    "\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d"+
    "\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0008\u0022\u0001\u0023\u0001\u0008\u0001\u0024"+
    "\u0001\u0022\u0001\u0025\u0001\u0026\u0001\u0027\u0001\u0028\u0001\u0029\u0001\u002a\u0001\u002b"+
    "\u0002\u0022\u0001\u002c\u0003\u0022\u0001\u002d\u0001\u002e\u0001\u002f\u0001\u0030\u0001\u0031"+
    "\u0001\u0032\u0001\u0022\u0001\u0033\u0001\u0034\u0001\u0022\u0001\u0035\u0001\u0036\u0001\u0037"+
    "\u0001\u0008\u0006\u0000\u0001\u0038\u003d\u0000\u0002\u0039\u0001\u003a\u0003\u0039\u0001\u003b"+
    "\u0001\u0039\u0001\u003c\u001d\u0039\u0001\u003d\u001f\u0039\u0001\u003e\u0003\u0039\u0001\u003f"+
    "\u0001\u0039\u0001\u003c\u001d\u0039\u0001\u003e\u001d\u0039\u0002\u0008\u0003\u0000\u0018\u0008"+
    "\u0008\u0040\u0003\u0008\u0001\u0040\u0001\u0041\u0011\u0040\u0001\u0042\u0004\u0040\u0004\u0008"+
    "\u000e\u0043\u0001\u0044\u0004\u0043\u0001\u0045\u0030\u0043\u0001\u0008\u0002\u0009\u0001\u0008"+
    "\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0010"+
    "\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u0018"+
    "\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020"+
    "\u0001\u0021\u0008\u0022\u0001\u0023\u0001\u0008\u0001\u0024\u0001\u0022\u0001\u0025\u0001\u0026"+
    "\u0001\u0027\u0001\u0028\u0001\u0029\u0001\u002a\u0001\u002b\u0002\u0022\u0001\u002c\u0003\u0022"+
    "\u0001\u002d\u0001\u002e\u0001\u002f\u0001\u0030\u0001\u0031\u0001\u0032\u0001\u0022\u0001\u0033"+
    "\u0001\u0034\u0001\u0022\u0001\u0046\u0001\u0036\u0001\u0047\u0001\u0008\u0045\u0000\u0002\u0009"+
    "\u0001\u0000\u0001\u0009\u0058\u0000\u0001\u0048\u0018\u0000\u0001\u0049\u0016\u0000\u0001\u004a"+
    "\u0044\u0000\u0001\u000b\u0001\u0000\u0001\u004b\u0014\u0000\u0008\u004c\u0003\u0000\u0001\u004c"+
    "\u0001\u004d\u0016\u004c\u001d\u0000\u0001\u004e\u0034\u0000\u0001\u004f\u0039\u0000\u0002\u0010"+
    "\u0001\u0000\u0008\u0010\u0001\u0050\u001a\u0010\u0001\u0051\u001d\u0010\u0019\u0000\u0001\u0052"+
    "\u0039\u0000\u0001\u0053\u0009\u0000\u0001\u0054\u003b\u0000\u0001\u0055\u0007\u0000\u0001\u0056"+
    "\u0001\u0057\u003b\u0000\u0001\u0058\u0001\u0000\u0002\u0059\u003c\u0000\u0001\u005a\u0004\u0000"+
    "\u0001\u005b\u0005\u0000\u0001\u005c\u003c\u0000\u0001\u005d\u0001\u0000\u0002\u005e\u0008\u0000"+
    "\u0001\u005f\u0001\u0060\u0001\u0061\u0001\u0000\u0001\u0062\u0001\u0063\u0001\u0064\u0003\u0000"+
    "\u0001\u005e\u0002\u0000\u0001\u005f\u0002\u0000\u0001\u0060\u0001\u0061\u0005\u0000\u0001\u0062"+
    "\u0006\u0000\u0001\u0063\u0019\u0000\u0001\u005d\u0001\u0000\u0002\u001a\u0009\u0000\u0001\u0060"+
    "\u0001\u0061\u0001\u0000\u0001\u0062\u0001\u0063\u0004\u0000\u0001\u001a\u0005\u0000\u0001\u0060"+
    "\u0001\u0061\u0005\u0000\u0001\u0062\u0006\u0000\u0001\u0063\u001d\u0000\u0001\u0065\u0044\u0000"+
    "\u0001\u0066\u0045\u0000\u0001\u0067\u0043\u0000\u0001\u0068\u0001\u0069\u0042\u0000\u0001\u006a"+
    "\u003e\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0016\u0022"+
    "\u0003\u0000\u0001\u0022\u0002\u006b\u0001\u0000\u0026\u006b\u0001\u0000\u001a\u006b\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0010\u0022\u0001\u006c"+
    "\u0005\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u000f\u0022\u0001\u006d\u0006\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000b\u0022\u0001\u006e"+
    "\u0001\u0022\u0001\u006f\u0008\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000d\u0022\u0001\u0070\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000"+
    "\u000b\u0022\u0001\u0071\u000a\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0001\u0072\u000c\u0022\u0001\u0073\u0004\u0022"+
    "\u0001\u0074\u0003\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u0005\u0022\u0001\u0075\u0006\u0022\u0001\u0076\u0003\u0022"+
    "\u0001\u0077\u0005\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u0012\u0022\u0001\u0078\u0003\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0001\u0022"+
    "\u0001\u0079\u0014\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u0001\u007a\u0015\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u007b"+
    "\u0011\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u0012\u0022\u0001\u007c\u0003\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0007\u0022\u0001\u007d"+
    "\u0007\u0022\u0001\u007e\u0005\u0022\u0001\u007f\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0001\u0080\u0015\u0022\u0003\u0000"+
    "\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000"+
    "\u0007\u0022\u0001\u0081\u000e\u0022\u0003\u0000\u0001\u0022\u0041\u0000\u0001\u0082\u0008\u0000"+
    "\u0001\u0083\u003d\u0000\u0002\u0039\u0001\u0000\u0003\u0039\u0001\u0000\u0001\u0039\u0001\u0000"+
    "\u001d\u0039\u0001\u0000\u001d\u0039\u0008\u0000\u0001\u003c\u0014\u0000\u0008\u0084\u0003\u0000"+
    "\u0001\u0084\u0001\u0085\u0016\u0084\u0001\u0086\u0003\u0000\u0002\u0087\u0001\u0000\u0039\u0087"+
    "\u0001\u0088\u0007\u0087\u0006\u0000\u0001\u0089\u0051\u0000\u0002\u0040\u0007\u0000\u0008\u0040"+
    "\u0003\u0000\u0001\u0040\u0001\u0000\u0016\u0040\u0003\u0000\u0001\u0040\u0002\u008a\u0001\u0000"+
    "\u0026\u008a\u0001\u0000\u001a\u008a\u0014\u0000\u0002\u0040\u0007\u0000\u0008\u0040\u0003\u0000"+
    "\u0001\u0040\u0001\u0000\u0007\u0040\u0001\u008b\u000e\u0040\u0003\u0000\u0001\u0040\u0013\u0000"+
    "\u0001\u008c\u003e\u0000\u0001\u008d\u004e\u0000\u0001\u008e\u0060\u0000\u0001\u008f\u0003\u0000"+
    "\u0001\u0090\u0009\u0000\u0002\u004a\u0001\u0000\u0041\u004a\u0006\u0000\u0001\u000b\u0001\u0000"+
    "\u0001\u004b\u004f\u0000\u0002\u004c\u0007\u0000\u0008\u004c\u0003\u0000\u0001\u004c\u0001\u0000"+
    "\u0016\u004c\u0003\u0000\u0001\u004c\u0002\u0091\u0001\u0000\u0026\u0091\u0001\u0000\u001a\u0091"+
    "\u0002\u0010\u0001\u0000\u0041\u0010\u0012\u0000\u0001\u0092\u0005\u0000\u0001\u0093\u003f\u0000"+
    "\u0002\u0059\u0009\u0000\u0001\u0060\u0001\u0061\u0007\u0000\u0001\u0059\u0005\u0000\u0001\u0060"+
    "\u0001\u0061\u0022\u0000\u0001\u0094\u0035\u0000\u0002\u005b\u0001\u0000\u0041\u005b\u0012\u0000"+
    "\u0001\u0095\u0001\u0000\u0002\u0059\u0040\u0000\u0001\u0096\u0001\u0000\u0002\u005e\u0009\u0000"+
    "\u0001\u0060\u0001\u0061\u0007\u0000\u0001\u005e\u0005\u0000\u0001\u0060\u0001\u0061\u0026\u0000"+
    "\u0001\u0097\u0001\u0000\u0002\u005f\u000c\u0000\u0001\u0062\u0001\u0063\u0004\u0000\u0001\u005f"+
    "\u000c\u0000\u0001\u0062\u0006\u0000\u0001\u0063\u0016\u0000\u0001\u0098\u0001\u0000\u0001\u0098"+
    "\u0002\u0000\u0002\u0098\u000a\u0000\u0001\u0061\u0007\u0000\u0001\u0098\u0006\u0000\u0001\u0061"+
    "\u0026\u0000\u0001\u0097\u0043\u0000\u0001\u0097\u000f\u0000\u0001\u0062\u0012\u0000\u0001\u0062"+
    "\u0020\u0000\u0001\u0097\u0001\u0000\u0002\u0064\u0007\u0000\u0004\u0064\u0001\u0000\u0001\u0062"+
    "\u0001\u0063\u0004\u0000\u0001\u0064\u0001\u0000\u0006\u0064\u0005\u0000\u0001\u0062\u0006\u0000"+
    "\u0001\u0063\u0020\u0000\u0001\u0099\u002a\u0000\u0002\u006b\u0001\u0000\u0026\u006b\u0001\u009a"+
    "\u001a\u006b\u0014\u0000\u0002\u0022\u0005\u0000\u0001\u009b\u0001\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u0016\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u009c\u0011\u0022\u0003\u0000"+
    "\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000"+
    "\u0001\u009d\u0015\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u000c\u0022\u0001\u009e\u0009\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0010\u0022"+
    "\u0001\u009f\u0005\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u000b\u0022\u0001\u00a0\u000a\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000f\u0022"+
    "\u0001\u00a1\u0006\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u000c\u0022\u0001\u00a2\u0009\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0011\u0022"+
    "\u0001\u00a3\u0004\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u000b\u0022\u0001\u00a4\u000a\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0009\u0022"+
    "\u0001\u00a5\u000c\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u0002\u0022\u0001\u00a6\u0013\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0011\u0022"+
    "\u0001\u00a7\u0004\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u000e\u0022\u0001\u00a8\u0007\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0008\u0022"+
    "\u0001\u00a9\u0006\u0022\u0001\u00aa\u0006\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0012\u0022\u0001\u00ab\u0002\u0022"+
    "\u0001\u00ac\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u000e\u0022\u0001\u00ad\u0007\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000b\u0022\u0001\u00ae"+
    "\u0003\u0022\u0001\u00af\u0006\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u00b0\u0003\u0022\u0001\u00b1"+
    "\u000d\u0022\u0003\u0000\u0001\u0022\u0006\u0000\u0001\u00b2\u0051\u0000\u0002\u0084\u0007\u0000"+
    "\u0008\u0084\u0003\u0000\u0001\u0084\u0001\u0000\u0016\u0084\u0003\u0000\u0001\u0084\u0002\u00b3"+
    "\u0001\u0000\u0026\u00b3\u0001\u0000\u001a\u00b3\u0014\u0000\u0002\u00b4\u0007\u0000\u0004\u00b4"+
    "\u0009\u0000\u0006\u00b4\u001a\u0000\u0001\u00b5\u003d\u0000\u0002\u008a\u0001\u0000\u0026\u008a"+
    "\u0001\u00b6\u001a\u008a\u0014\u0000\u0002\u0040\u0007\u0000\u0008\u0040\u0003\u0000\u0001\u0040"+
    "\u0001\u0000\u0008\u0040\u0001\u00b7\u000d\u0040\u0003\u0000\u0001\u0040\u0014\u0000\u0002\u00b8"+
    "\u0007\u0000\u0008\u00b8\u0003\u0000\u0001\u00b8\u0001\u0000\u0016\u00b8\u0003\u0000\u0001\u00b8"+
    "\u0002\u0091\u0001\u0000\u0026\u0091\u0001\u00b9\u001a\u0091\u0013\u0000\u0001\u00ba\u0044\u0000"+
    "\u0002\u0059\u0040\u0000\u0001\u0095\u0045\u0000\u0002\u0098\u000a\u0000\u0001\u0061\u0007\u0000"+
    "\u0001\u0098\u0006\u0000\u0001\u0061\u0028\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u0001\u00bb\u0015\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0010\u0022\u0001\u00bc\u0005\u0022"+
    "\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022"+
    "\u0001\u0000\u0011\u0022\u0001\u00bd\u0004\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u00be\u0011\u0022"+
    "\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022"+
    "\u0001\u0000\u0010\u0022\u0001\u00bf\u0005\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u00c0\u0011\u0022"+
    "\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022"+
    "\u0001\u0000\u000b\u0022\u0001\u00c1\u000a\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u00c2\u0011\u0022"+
    "\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022"+
    "\u0001\u0000\u000a\u0022\u0001\u00c3\u000b\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0012\u0022\u0001\u00c4\u0003\u0022"+
    "\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022"+
    "\u0001\u0000\u0004\u0022\u0001\u00c5\u0011\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0010\u0022\u0001\u00c6\u0005\u0022"+
    "\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022"+
    "\u0001\u0000\u000d\u0022\u0001\u00c7\u0008\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u00c8\u0011\u0022"+
    "\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022"+
    "\u0001\u0000\u0004\u0022\u0001\u00c9\u0011\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022"+
    "\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000c\u0022\u0001\u00ca\u0009\u0022"+
    "\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022"+
    "\u0001\u0000\u000b\u0022\u0001\u00cb\u000a\u0022\u0003\u0000\u0001\u0022\u0002\u00b3\u0001\u0000"+
    "\u0026\u00b3\u0001\u00cc\u001a\u00b3\u0014\u0000\u0002\u00cd\u0007\u0000\u0004\u00cd\u0009\u0000"+
    "\u0006\u00cd\u0028\u0000\u0002\u0040\u0007\u0000\u0008\u0040\u0003\u0000\u0001\u0040\u0001\u0000"+
    "\u0010\u0040\u0001\u00ce\u0005\u0040\u0003\u0000\u0001\u0040\u0014\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000a\u0022\u0001\u00cf\u000b\u0022\u0003\u0000"+
    "\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000"+
    "\u0010\u0022\u0001\u00d0\u0005\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0008\u0022\u0001\u00d1\u000d\u0022\u0003\u0000"+
    "\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000"+
    "\u0004\u0022\u0001\u00d2\u0011\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000f\u0022\u0001\u00d3\u0006\u0022\u0003\u0000"+
    "\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000"+
    "\u0002\u0022\u0001\u00d4\u0013\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0001\u00d5\u0015\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000f\u0022"+
    "\u0001\u00d6\u0006\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u000f\u0022\u0001\u00d7\u0006\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0014\u0022"+
    "\u0001\u00d8\u0001\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u0001\u00d9\u000c\u0022\u0001\u00da\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000"+
    "\u0004\u0022\u0001\u00db\u0011\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u00dc\u0007\u0000"+
    "\u0004\u00dc\u0009\u0000\u0006\u00dc\u0028\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u000c\u0022\u0001\u00dd\u0009\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0005\u0022\u0001\u00de"+
    "\u0010\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u0011\u0022\u0001\u00df\u0004\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0006\u0022\u0001\u00e0"+
    "\u000f\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u000c\u0022\u0001\u00e1\u0009\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u000b\u0022\u0001\u00e2"+
    "\u000a\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u0005\u0022\u0001\u00e3\u0010\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0087\u0007\u0000\u0004\u0087\u0009\u0000\u0006\u0087\u0028\u0000\u0002\u0022\u0007\u0000"+
    "\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0012\u0022\u0001\u00e4\u0003\u0022\u0003\u0000"+
    "\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000"+
    "\u0001\u00e5\u0015\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u00e6\u0011\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0008\u0022"+
    "\u0001\u00e7\u000d\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u00e8\u0011\u0022\u0003\u0000\u0001\u0022"+
    "\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0002\u0022"+
    "\u0001\u00e9\u0013\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022"+
    "\u0003\u0000\u0001\u0022\u0001\u0000\u0001\u00ea\u0015\u0022\u0003\u0000\u0001\u0022\u0014\u0000"+
    "\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000\u0001\u0022\u0001\u0000\u0004\u0022\u0001\u00eb"+
    "\u0011\u0022\u0003\u0000\u0001\u0022\u0014\u0000\u0002\u0022\u0007\u0000\u0008\u0022\u0003\u0000"+
    "\u0001\u0022\u0001\u0000\u0010\u0022\u0001\u00ec\u0005\u0022\u0003\u0000\u0001\u0022"

  @JvmStatic
  private fun zzUnpacktrans(): IntArray {
    val result: IntArray = IntArray(10676)
    var offset: Int = 0
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpacktrans(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      value--
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_TRANS: IntArray = zzUnpacktrans()


  /* error codes */
  private const val ZZ_UNKNOWN_ERROR = 0
  private const val ZZ_NO_MATCH = 1
  private const val ZZ_PUSHBACK_2BIG = 2

  /* error messages for the codes above */
  @JvmStatic
  val ZZ_ERROR_MSG = arrayOf(
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  )

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private const val ZZ_ATTRIBUTE_PACKED_0: String  =
    "\u0007\u0000\u0001\u0009\u0002\u0001\u0001\u0009\u0005\u0001\u0002\u0009\u0002\u0001\u0001\u0009"+
    "\u000a\u0001\u0002\u0009\u0001\u0001\u0002\u0009\u0010\u0001\u0001\u0009\u0001\u0001\u0001\u0009"+
    "\u0002\u0001\u0002\u0009\u0002\u0001\u0001\u0009\u0004\u0001\u0001\u0009\u0002\u0001\u0002\u0009"+
    "\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0003\u0009\u0001\u0001"+
    "\u0006\u0009\u0004\u0001\u0001\u0009\u0002\u0000\u0002\u0001\u0001\u0009\u0003\u0001\u0003\u0009"+
    "\u0001\u0001\u0002\u0009\u0001\u0000\u0016\u0001\u0001\u0009\u0001\u0000\u0001\u0001\u0001\u0000"+
    "\u0002\u0009\u0001\u0001\u0002\u0000\u0001\u0001\u0003\u0009\u0002\u0001\u0001\u0000\u0002\u0009"+
    "\u0001\u0001\u0001\u0009\u0002\u0000\u0001\u0001\u0003\u0009\u0016\u0001\u0001\u0009\u0002\u0000"+
    "\u0001\u0001\u0001\u0009\u0001\u0001\u0003\u0009\u0011\u0001\u0001\u0009\u0001\u0000\u000e\u0001"+
    "\u0001\u0000\u0010\u0001"

  @JvmStatic
  private fun zzUnpackAttribute(): IntArray {
    val result: IntArray = IntArray(236)
    var offset: Int = 0
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
    return result
  }

  @JvmStatic
  private fun zzUnpackAttribute(packed: String , offset: Int, result: IntArray): Int {
    var i: Int = 0       /* index in packed string  */
    var j: Int = offset  /* index in unpacked array */
    val l: Int = packed.length
    while (i < l) {
      var count: Int = packed[i++].code
      var value: Int = packed[i++].code
      do
          result[j++] = value
      while (--count > 0)
    }
    return j
  }

  @JvmStatic
  private val ZZ_ATTRIBUTE: IntArray = zzUnpackAttribute()

}
  /** the current state of the DFA */
  private var zzState = 0

  /** the current lexical state */
  private var zzLexicalState = YYINITIAL

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private var zzBuffer: CharSequence = "" 

  /** the textposition at the last accepting state */
  private var zzMarkedPos = 0

  /** the current text position in the buffer */
  private var zzCurrentPos = 0

  /** startRead marks the beginning of the yytext() string in the buffer */
  private var zzStartRead = 0

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private var zzEndRead = 0

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private var zzAtEOF = false

  /** Number of newlines encountered up to the start of the matched text. */
  @Suppress("unused")
  private var yyline: Int = 0

  /** Number of characters from the last newline up to the start of the matched text. */
  @Suppress("unused")
  protected var yycolumn: Int = 0

  /** Number of characters up to the start of the matched text. */
  @Suppress("unused")
  private var yychar: Long = 0

  /** Whether the scanner is currently at the beginning of a line. */
  @Suppress("unused")
  private var zzAtBOL: Boolean = false

  /** Whether the user-EOF-code has already been executed. */
  @Suppress("unused")
  private var zzEOFDone: Boolean = false

  /* user code: */
  private class State(val state: Int, val lBraceCount: Int, val requiredInterpolationPrefix: Int) {
      override fun toString(): String {
          return "yystate = $state" +
                  (if (lBraceCount == 0) "" else "lBraceCount = $lBraceCount") +
                  (if (requiredInterpolationPrefix == -1) "" else "requiredInterpolationPrefix = $requiredInterpolationPrefix")
      }
  }

  private val states: MutableList<State> = mutableListOf()
  private var lBraceCount = 0
  private var requiredInterpolationPrefix = 0

  private var commentStart = 0
  private var commentDepth = 0

  private fun pushState(state: Int) {
      states.add(State(yystate(), lBraceCount, requiredInterpolationPrefix))
      lBraceCount = 0
      requiredInterpolationPrefix = -1
      yybegin(state)
  }

  private fun pushInterpolationPrefix(interpolationPrefix: Int) {
      states.add(State(yystate(), lBraceCount, requiredInterpolationPrefix))
      lBraceCount = 0
      requiredInterpolationPrefix = interpolationPrefix
      yybegin(STRING_PREFIX)
  }

  private fun popState() {
      val state: State = states.removeLast()
      lBraceCount = state.lBraceCount
      requiredInterpolationPrefix = state.requiredInterpolationPrefix
      yybegin(state.state)
  }

  private fun commentStateToTokenType(state: Int): SyntaxElementType {
    return when (state) {
      BLOCK_COMMENT -> KtTokens.BLOCK_COMMENT
      DOC_COMMENT -> KtTokens.DOC_COMMENT
      else -> throw IllegalArgumentException("Unexpected state: $state")
    }
  }



  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private fun zzMaxBufferLen(): Int {
    return Int.MAX_VALUE
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private fun zzCanGrow(): Boolean {
    return true
  }


  override fun getTokenStart(): Int {
    return zzStartRead
  }

  override fun getTokenEnd(): Int {
    return getTokenStart() + yylength()
  }

  override fun reset(buffer: CharSequence, start: Int, end: Int, initialState: Int) {
    zzBuffer = buffer
    zzCurrentPos = start
    zzMarkedPos = start
    zzStartRead = start
    zzAtEOF  = false
    zzAtBOL = true
    zzEndRead = end
    yybegin(initialState)
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   */
  private fun zzRefill(): Boolean {
    return true
  }


  /**
   * Returns the current lexical state.
   */
  override fun yystate(): Int {
    return zzLexicalState
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  override fun yybegin(newState: Int) {
    zzLexicalState = newState
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  fun yytext(): CharSequence {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos)
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  fun yycharat(position: Int): Char {
    return zzBuffer[zzStartRead + position] 
  }


  /**
   * Returns the length of the matched text region.
   */
  fun yylength(): Int {
    return zzMarkedPos - zzStartRead 
  }

  /**
   * Implementation of the `codePointAt` method of `java.lang.Character` for CharSequences
   *
   * @param index the index of the character for which to retrieve the code point.
   * @return the Unicode code point at the specified index.
   * @throws IndexOutOfBoundsException if the index is outside the bounds of the character sequence.
   */
  fun CharSequence.codePoint(index: Int): Int {
      val high = this[index]
      if (high.isHighSurrogate() && index + 1 < length) {
          val low = this[index + 1]
          if (low.isLowSurrogate()) {
              val codePoint: String = "$high$low"
              return codePoint.codePointAt(0)
          }
      }
      return high.code
  }

  /** Returns the character (Unicode code point) at the specified index. */
  internal fun String.codePointAt(index: Int): Int {
      val high = this[index]
      if (high.isHighSurrogate() && index + 1 < this.length) {
          val low = this[index + 1]
          if (low.isLowSurrogate()) {
              return Char.toCodePoint(high, low)
          }
      }
      return high.code
  }
  
  internal fun CharSequence.offsetByCodePoints(index: Int, codePointOffset: Int): Int {
    val length = this.length
    if (index < 0 || index > length) throw IndexOutOfBoundsException()

    var x = index
    if (codePointOffset >= 0) {
      var i: Int = 0
      
      while (x < length && i < codePointOffset) {
        if (this[x++].isHighSurrogate() && x < length && this[x].isLowSurrogate()) x++
        i++
      }
      
      if (i < codePointOffset) throw IndexOutOfBoundsException()
      
    } else {
      var i: Int = codePointOffset
      
      while (x > 0 && i < 0) {
        if (this[--x].isLowSurrogate() && x > 0 && this[x - 1].isHighSurrogate()) x--
        i++
      }
      
      if (i < 0) {
        throw IndexOutOfBoundsException()
      }
    }
    
    return x
  }

  internal fun Char.Companion.toCodePoint(high: Char, low: Char): Int =
      (((high - MIN_HIGH_SURROGATE) shl 10) or (low - MIN_LOW_SURROGATE)) + 0x10000

  private fun charCount(codePoint: Int): Int = if (codePoint < 0x10000) 1 else 2


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public fun yypushback(number: Int)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG)

    zzMarkedPos -= number
  }


  private fun zzScanError(errorCode: Int) {
    val message = try {
      ZZ_ERROR_MSG[errorCode]
    } catch (e: IndexOutOfBoundsException) {
      ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR]
    }

    throw Error(message)
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private fun zzCMap(input: Int): Int {
    val offset: Int = input and 255
    return if(offset == input) ZZ_CMAP_BLOCKS[offset] else ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input shr 8] or offset]
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   */
  override fun advance(): SyntaxElementType?
  {
    var zzInput: Int = 0 
    var zzAction: Int = 0 

    val zzTransL: IntArray = ZZ_TRANS
    val zzRowMapL: IntArray = ZZ_ROWMAP
    val zzAttrL: IntArray = ZZ_ATTRIBUTE

    while (true) {
      // cached fields:
      var zzCurrentPosL = 0
      var zzMarkedPosL: Int = zzMarkedPos 
      var zzEndReadL: Int = zzEndRead 
      var zzBufferL: CharSequence = zzBuffer 

      zzAction = -1

      zzCurrentPosL = zzMarkedPosL
      zzCurrentPos = zzMarkedPosL
      zzStartRead = zzMarkedPosL

      zzState = ZZ_LEXSTATE[zzLexicalState]

      // set up zzAction for empty match case:
      var zzAttributes: Int = zzAttrL[zzState]
      if ( (zzAttributes and 1) == 1 ) {
        zzAction = zzState
      }


      zzForAction@ while (true) {
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL.codePoint(zzCurrentPosL)
            zzCurrentPosL += charCount(zzInput)
          }
          else if (zzAtEOF) {
            zzInput = YYEOF
            break@zzForAction
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL
            zzMarkedPos   = zzMarkedPosL
            val eof: Boolean = zzRefill()
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos
            zzMarkedPosL   = zzMarkedPos
            zzBufferL      = zzBuffer
            zzEndReadL     = zzEndRead
            if (eof) {
              zzInput = YYEOF
              break@zzForAction
            }
            else {
              zzInput = zzBufferL.codePoint(zzCurrentPosL)
              zzCurrentPosL += charCount(zzInput)
            }
          }
          val zzNext: Int = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)]
          if (zzNext == -1) break@zzForAction
          zzState = zzNext

          zzAttributes = zzAttrL[zzState]
          if ( (zzAttributes and 1) == 1 ) {
            zzAction = zzState
            zzMarkedPosL = zzCurrentPosL
            if ( (zzAttributes and 8) == 8 ) break@zzForAction
          }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true
            when (zzLexicalState) {
            BLOCK_COMMENT -> {
              val state = yystate()
            popState()
            zzStartRead = commentStart
            return commentStateToTokenType(state)
            }  // fall though
            237 -> break
            DOC_COMMENT -> {
              val state = yystate()
            popState()
            zzStartRead = commentStart
            return commentStateToTokenType(state)
            }  // fall though
            238 -> break
            else -> {
        return null
              }
        }
      }
      else {
        when (if (zzAction < 0) zzAction else ZZ_ACTION[zzAction]) {
          1 -> {
            return SyntaxTokenTypes.BAD_CHARACTER
            }
          // fall through
          109 -> break
          2 -> {
            return KtTokens.WHITE_SPACE
            }
          // fall through
          110 -> break
          3 -> {
            return KtTokens.EXCL
            }
          // fall through
          111 -> break
          4 -> {
            val interpolationPrefix = yylength() - 1
            pushInterpolationPrefix(maxOf(interpolationPrefix, 1))
            yypushback(1)
            if (interpolationPrefix != 0) return KtTokens.INTERPOLATION_PREFIX
            }
          // fall through
          112 -> break
          5 -> {
            return KtTokens.HASH
            }
          // fall through
          113 -> break
          6 -> {
            return KtTokens.PERC
            }
          // fall through
          114 -> break
          7 -> {
            return KtTokens.AND
            }
          // fall through
          115 -> break
          8 -> {
            return KtTokens.CHARACTER_LITERAL
            }
          // fall through
          116 -> break
          9 -> {
            return KtTokens.LPAR
            }
          // fall through
          117 -> break
          10 -> {
            return KtTokens.RPAR
            }
          // fall through
          118 -> break
          11 -> {
            return KtTokens.MUL
            }
          // fall through
          119 -> break
          12 -> {
            return KtTokens.PLUS
            }
          // fall through
          120 -> break
          13 -> {
            return KtTokens.COMMA
            }
          // fall through
          121 -> break
          14 -> {
            return KtTokens.MINUS
            }
          // fall through
          122 -> break
          15 -> {
            return KtTokens.DOT
            }
          // fall through
          123 -> break
          16 -> {
            return KtTokens.DIV
            }
          // fall through
          124 -> break
          17 -> {
            return KtTokens.INTEGER_LITERAL
            }
          // fall through
          125 -> break
          18 -> {
            return KtTokens.COLON
            }
          // fall through
          126 -> break
          19 -> {
            return KtTokens.SEMICOLON
            }
          // fall through
          127 -> break
          20 -> {
            return KtTokens.LT
            }
          // fall through
          128 -> break
          21 -> {
            return KtTokens.EQ
            }
          // fall through
          129 -> break
          22 -> {
            return KtTokens.GT
            }
          // fall through
          130 -> break
          23 -> {
            return KtTokens.QUEST
            }
          // fall through
          131 -> break
          24 -> {
            return KtTokens.AT
            }
          // fall through
          132 -> break
          25 -> {
            return KtTokens.IDENTIFIER
            }
          // fall through
          133 -> break
          26 -> {
            return KtTokens.LBRACKET
            }
          // fall through
          134 -> break
          27 -> {
            return KtTokens.RBRACKET
            }
          // fall through
          135 -> break
          28 -> {
            pushState(UNMATCHED_BACKTICK)
            return SyntaxTokenTypes.BAD_CHARACTER
            }
          // fall through
          136 -> break
          29 -> {
            return KtTokens.LBRACE
            }
          // fall through
          137 -> break
          30 -> {
            return KtTokens.RBRACE
            }
          // fall through
          138 -> break
          31 -> {
            yybegin(STRING)
            return KtTokens.OPEN_QUOTE
            }
          // fall through
          139 -> break
          32 -> {
            return KtTokens.REGULAR_STRING_PART
            }
          // fall through
          140 -> break
          33 -> {
            popState()
            yypushback(1)
            return KtTokens.DANGLING_NEWLINE
            }
          // fall through
          141 -> break
          34 -> {
            popState()
            return KtTokens.CLOSING_QUOTE
            }
          // fall through
          142 -> break
          35 -> {
            popState()
            return KtTokens.IDENTIFIER
            }
          // fall through
          143 -> break
          36 -> {
            
            }
          // fall through
          144 -> break
          37 -> {
            lBraceCount++
            return KtTokens.LBRACE
            }
          // fall through
          145 -> break
          38 -> {
            if (lBraceCount == 0) {
                popState()
                return KtTokens.LONG_TEMPLATE_ENTRY_END
            }
            lBraceCount--
            return KtTokens.RBRACE
            }
          // fall through
          146 -> break
          39 -> {
            return KtTokens.EXCLEQ
            }
          // fall through
          147 -> break
          40 -> {
            if (zzCurrentPos == 0) {
                return KtTokens.SHEBANG_COMMENT
            }
            else {
                yypushback(yylength() - 1)
                return KtTokens.HASH
            }
            }
          // fall through
          148 -> break
          41 -> {
            return KtTokens.FIELD_IDENTIFIER
            }
          // fall through
          149 -> break
          42 -> {
            return KtTokens.PERCEQ
            }
          // fall through
          150 -> break
          43 -> {
            return KtTokens.ANDAND
            }
          // fall through
          151 -> break
          44 -> {
            return KtTokens.MULTEQ
            }
          // fall through
          152 -> break
          45 -> {
            return KtTokens.PLUSPLUS
            }
          // fall through
          153 -> break
          46 -> {
            return KtTokens.PLUSEQ
            }
          // fall through
          154 -> break
          47 -> {
            return KtTokens.MINUSMINUS
            }
          // fall through
          155 -> break
          48 -> {
            return KtTokens.MINUSEQ
            }
          // fall through
          156 -> break
          49 -> {
            return KtTokens.ARROW
            }
          // fall through
          157 -> break
          50 -> {
            return KtTokens.RANGE
            }
          // fall through
          158 -> break
          51 -> {
            return KtTokens.FLOAT_LITERAL
            }
          // fall through
          159 -> break
          52 -> {
            pushState(BLOCK_COMMENT)
            commentDepth = 0
            commentStart = getTokenStart()
            }
          // fall through
          160 -> break
          53 -> {
            return KtTokens.EOL_COMMENT
            }
          // fall through
          161 -> break
          54 -> {
            return KtTokens.DIVEQ
            }
          // fall through
          162 -> break
          55 -> {
            return KtTokens.COLONCOLON
            }
          // fall through
          163 -> break
          56 -> {
            return KtTokens.DOUBLE_SEMICOLON
            }
          // fall through
          164 -> break
          57 -> {
            return KtTokens.LTEQ
            }
          // fall through
          165 -> break
          58 -> {
            return KtTokens.EQEQ
            }
          // fall through
          166 -> break
          59 -> {
            return KtTokens.DOUBLE_ARROW
            }
          // fall through
          167 -> break
          60 -> {
            return KtTokens.GTEQ
            }
          // fall through
          168 -> break
          61 -> {
            return KtTokens.AS_KEYWORD
            }
          // fall through
          169 -> break
          62 -> {
            return KtTokens.DO_KEYWORD
            }
          // fall through
          170 -> break
          63 -> {
            return KtTokens.IF_KEYWORD
            }
          // fall through
          171 -> break
          64 -> {
            return KtTokens.IN_MODIFIER
            }
          // fall through
          172 -> break
          65 -> {
            return KtTokens.IS_KEYWORD
            }
          // fall through
          173 -> break
          66 -> {
            return KtTokens.OROR
            }
          // fall through
          174 -> break
          67 -> {
            var interpolationPrefix = 0
            var i = 0
            while (i < yylength()) {
                if (yycharat(i) == '$') {
                    interpolationPrefix++
                } else {
                    break
                }
                i++
            }
            val rest = yylength() - interpolationPrefix
            if (interpolationPrefix == requiredInterpolationPrefix) {
                pushState(SHORT_TEMPLATE_ENTRY)
                yypushback(rest)
                return KtTokens.SHORT_TEMPLATE_ENTRY_START
            } else if (interpolationPrefix < requiredInterpolationPrefix) {
                yypushback(rest)
                return KtTokens.REGULAR_STRING_PART
            } else {
                yypushback(requiredInterpolationPrefix + rest)
                return KtTokens.REGULAR_STRING_PART
            }
            }
          // fall through
          175 -> break
          68 -> {
            val interpolationPrefix = yylength() - 1
            if (interpolationPrefix == requiredInterpolationPrefix) {
                pushState(LONG_TEMPLATE_ENTRY)
                return KtTokens.LONG_TEMPLATE_ENTRY_START
            } else if (interpolationPrefix < requiredInterpolationPrefix) {
                yypushback(1)
                return KtTokens.REGULAR_STRING_PART
            } else {
                yypushback(requiredInterpolationPrefix + 1)
                return KtTokens.REGULAR_STRING_PART
            }
            }
          // fall through
          176 -> break
          69 -> {
            return KtTokens.ESCAPE_SEQUENCE
            }
          // fall through
          177 -> break
          70 -> {
            if (commentDepth > 0) {
                commentDepth--
            }
            else {
                 val state = yystate()
                 popState()
                 zzStartRead = commentStart
                 return commentStateToTokenType(state)
            }
            }
          // fall through
          178 -> break
          71 -> {
            commentDepth++
            }
          // fall through
          179 -> break
          72 -> {
            return KtTokens.EXCLEQEQEQ
            }
          // fall through
          180 -> break
          73 -> {
            return KtTokens.NOT_IN
            }
          // fall through
          181 -> break
          74 -> {
            return KtTokens.NOT_IS
            }
          // fall through
          182 -> break
          75 -> {
            return KtTokens.RESERVED
            }
          // fall through
          183 -> break
          76 -> {
            return KtTokens.RANGE_UNTIL
            }
          // fall through
          184 -> break
          77 -> {
            pushState(DOC_COMMENT)
            commentDepth = 0
            commentStart = getTokenStart()
            }
          // fall through
          185 -> break
          78 -> {
            yypushback(2)
            return KtTokens.INTEGER_LITERAL
            }
          // fall through
          186 -> break
          79 -> {
            return KtTokens.EQEQEQ
            }
          // fall through
          187 -> break
          80 -> {
            return KtTokens.AS_SAFE
            }
          // fall through
          188 -> break
          81 -> {
            return KtTokens.FOR_KEYWORD
            }
          // fall through
          189 -> break
          82 -> {
            return KtTokens.FUN_MODIFIER
            }
          // fall through
          190 -> break
          83 -> {
            return KtTokens.TRY_KEYWORD
            }
          // fall through
          191 -> break
          84 -> {
            return KtTokens.VAL_KEYWORD
            }
          // fall through
          192 -> break
          85 -> {
            return KtTokens.VAR_KEYWORD
            }
          // fall through
          193 -> break
          86 -> {
            yybegin(RAW_STRING)
            return KtTokens.OPEN_QUOTE
            }
          // fall through
          194 -> break
          87 -> {
            val length = yytext().length
            if (length <= 3) { // closing """
                popState()
                return KtTokens.CLOSING_QUOTE
            } else { // some quotes at the end of a string, e.g. """ "foo""""
                yypushback(3) // return the closing quotes (""") to the stream
                return KtTokens.REGULAR_STRING_PART
            }
            }
          // fall through
          195 -> break
          88 -> {
            yypushback(3)
            return KtTokens.EXCL
            }
          // fall through
          196 -> break
          89 -> {
            return KtTokens.BLOCK_COMMENT
            }
          // fall through
          197 -> break
          90 -> {
            return KtTokens.ELSE_KEYWORD
            }
          // fall through
          198 -> break
          91 -> {
            return KtTokens.NULL_KEYWORD
            }
          // fall through
          199 -> break
          92 -> {
            return KtTokens.THIS_KEYWORD
            }
          // fall through
          200 -> break
          93 -> {
            return KtTokens.TRUE_KEYWORD
            }
          // fall through
          201 -> break
          94 -> {
            return KtTokens.WHEN_KEYWORD
            }
          // fall through
          202 -> break
          95 -> {
            popState()
            return KtTokens.THIS_KEYWORD
            }
          // fall through
          203 -> break
          96 -> {
            return KtTokens.BREAK_KEYWORD
            }
          // fall through
          204 -> break
          97 -> {
            return KtTokens.CLASS_KEYWORD
            }
          // fall through
          205 -> break
          98 -> {
            return KtTokens.FALSE_KEYWORD
            }
          // fall through
          206 -> break
          99 -> {
            return KtTokens.SUPER_KEYWORD
            }
          // fall through
          207 -> break
          100 -> {
            return KtTokens.THROW_KEYWORD
            }
          // fall through
          208 -> break
          101 -> {
            return KtTokens.WHILE_KEYWORD
            }
          // fall through
          209 -> break
          102 -> {
            return KtTokens.OBJECT_KEYWORD
            }
          // fall through
          210 -> break
          103 -> {
            return KtTokens.RETURN_KEYWORD
            }
          // fall through
          211 -> break
          104 -> {
            return KtTokens.TYPEOF_KEYWORD
            }
          // fall through
          212 -> break
          105 -> {
            return KtTokens.PACKAGE_KEYWORD
            }
          // fall through
          213 -> break
          106 -> {
            return KtTokens.CONTINUE_KEYWORD
            }
          // fall through
          214 -> break
          107 -> {
            return KtTokens.INTERFACE_KEYWORD
            }
          // fall through
          215 -> break
          108 -> {
            return KtTokens.TYPE_ALIAS_KEYWORD
            }
          // fall through
          216 -> break
          else ->
            zzScanError(ZZ_NO_MATCH)
        }
      }
    }
    return null
  }


}
