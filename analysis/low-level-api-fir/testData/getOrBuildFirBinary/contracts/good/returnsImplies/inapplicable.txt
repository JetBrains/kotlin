KT element: KtClass
KT element text:
public final class Foo public constructor() {
    public final fun wrongFalse(x: kotlin.String?): kotlin.Boolean { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun wrongTrue(x: kotlin.String?): kotlin.Boolean { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun nullableConstant(x: kotlin.String?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun string(): kotlin.String { /* compiled code */ }

    public final fun nullableReturn(x: kotlin.String?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun returnsNull(x: kotlin.String?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun wrongReturnType(x: kotlin.String?): kotlin.Any? { contract { /* compiled contract */ }; /* compiled code */ }
}
FIR element: FirRegularClassImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
public final [ResolvedTo(BODY_RESOLVE)] class Foo : R|kotlin/Any| {
    public final [ResolvedTo(BODY_RESOLVE)] fun nullableConstant([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Any?|

    public final [ResolvedTo(BODY_RESOLVE)] fun nullableReturn([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Any?|

    public final [ResolvedTo(BODY_RESOLVE)] fun returnsNull([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(NOT_NULL) -> x != null
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun string(): R|kotlin/String|

    public final [ResolvedTo(BODY_RESOLVE)] fun wrongFalse([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(FALSE) -> x != null
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun wrongReturnType([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun wrongTrue([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/String?|): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null
        >


    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] constructor(): R|Foo|

}
