// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature}
 */
public final class AccessorIdSignature extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature)
    AccessorIdSignatureOrBuilder {
  // Use AccessorIdSignature.newBuilder() to construct.
  private AccessorIdSignature(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private AccessorIdSignature(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final AccessorIdSignature defaultInstance;
  public static AccessorIdSignature getDefaultInstance() {
    return defaultInstance;
  }

  public AccessorIdSignature getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private AccessorIdSignature(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            propertySignature_ = input.readInt32();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            name_ = input.readInt32();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            accessorHashId_ = input.readInt64();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            flags_ = input.readInt64();
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<AccessorIdSignature> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<AccessorIdSignature>() {
    public AccessorIdSignature parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new AccessorIdSignature(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<AccessorIdSignature> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int PROPERTY_SIGNATURE_FIELD_NUMBER = 1;
  private int propertySignature_;
  /**
   * <code>required int32 property_signature = 1;</code>
   */
  public boolean hasPropertySignature() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required int32 property_signature = 1;</code>
   */
  public int getPropertySignature() {
    return propertySignature_;
  }

  public static final int NAME_FIELD_NUMBER = 2;
  private int name_;
  /**
   * <code>required int32 name = 2;</code>
   */
  public boolean hasName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required int32 name = 2;</code>
   */
  public int getName() {
    return name_;
  }

  public static final int ACCESSOR_HASH_ID_FIELD_NUMBER = 3;
  private long accessorHashId_;
  /**
   * <code>required int64 accessor_hash_id = 3;</code>
   */
  public boolean hasAccessorHashId() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required int64 accessor_hash_id = 3;</code>
   */
  public long getAccessorHashId() {
    return accessorHashId_;
  }

  public static final int FLAGS_FIELD_NUMBER = 4;
  private long flags_;
  /**
   * <code>optional int64 flags = 4 [default = 0];</code>
   */
  public boolean hasFlags() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional int64 flags = 4 [default = 0];</code>
   */
  public long getFlags() {
    return flags_;
  }

  private void initFields() {
    propertySignature_ = 0;
    name_ = 0;
    accessorHashId_ = 0L;
    flags_ = 0L;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasPropertySignature()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasAccessorHashId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, propertySignature_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, name_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt64(3, accessorHashId_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt64(4, flags_);
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(1, propertySignature_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(2, name_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(3, accessorHashId_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(4, flags_);
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature)
      org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignatureOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      propertySignature_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      accessorHashId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000004);
      flags_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature result = new org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.propertySignature_ = propertySignature_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.name_ = name_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.accessorHashId_ = accessorHashId_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.flags_ = flags_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.getDefaultInstance()) return this;
      if (other.hasPropertySignature()) {
        setPropertySignature(other.getPropertySignature());
      }
      if (other.hasName()) {
        setName(other.getName());
      }
      if (other.hasAccessorHashId()) {
        setAccessorHashId(other.getAccessorHashId());
      }
      if (other.hasFlags()) {
        setFlags(other.getFlags());
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (!hasPropertySignature()) {
        
        return false;
      }
      if (!hasName()) {
        
        return false;
      }
      if (!hasAccessorHashId()) {
        
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int propertySignature_ ;
    /**
     * <code>required int32 property_signature = 1;</code>
     */
    public boolean hasPropertySignature() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 property_signature = 1;</code>
     */
    public int getPropertySignature() {
      return propertySignature_;
    }
    /**
     * <code>required int32 property_signature = 1;</code>
     */
    public Builder setPropertySignature(int value) {
      bitField0_ |= 0x00000001;
      propertySignature_ = value;
      
      return this;
    }
    /**
     * <code>required int32 property_signature = 1;</code>
     */
    public Builder clearPropertySignature() {
      bitField0_ = (bitField0_ & ~0x00000001);
      propertySignature_ = 0;
      
      return this;
    }

    private int name_ ;
    /**
     * <code>required int32 name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 name = 2;</code>
     */
    public int getName() {
      return name_;
    }
    /**
     * <code>required int32 name = 2;</code>
     */
    public Builder setName(int value) {
      bitField0_ |= 0x00000002;
      name_ = value;
      
      return this;
    }
    /**
     * <code>required int32 name = 2;</code>
     */
    public Builder clearName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      name_ = 0;
      
      return this;
    }

    private long accessorHashId_ ;
    /**
     * <code>required int64 accessor_hash_id = 3;</code>
     */
    public boolean hasAccessorHashId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int64 accessor_hash_id = 3;</code>
     */
    public long getAccessorHashId() {
      return accessorHashId_;
    }
    /**
     * <code>required int64 accessor_hash_id = 3;</code>
     */
    public Builder setAccessorHashId(long value) {
      bitField0_ |= 0x00000004;
      accessorHashId_ = value;
      
      return this;
    }
    /**
     * <code>required int64 accessor_hash_id = 3;</code>
     */
    public Builder clearAccessorHashId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      accessorHashId_ = 0L;
      
      return this;
    }

    private long flags_ ;
    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    public long getFlags() {
      return flags_;
    }
    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    public Builder setFlags(long value) {
      bitField0_ |= 0x00000008;
      flags_ = value;
      
      return this;
    }
    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    public Builder clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000008);
      flags_ = 0L;
      
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature)
  }

  static {
    defaultInstance = new AccessorIdSignature(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature)
}
