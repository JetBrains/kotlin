//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.runtime.ReadOnlyComposable


import androidx.compose.runtime.*

@Composable
@ExplicitGroupsComposable
inline fun ReusableContentHost(active: Boolean, crossinline content: @Composable () -> Unit) {
    currentComposer.startReusableGroup(200, active)
    val activeChanged = currentComposer.changed(active)
    if (active) {
        content()
    } else {
        currentComposer.deactivateToEndGroup(activeChanged)
    }
    currentComposer.endReusableGroup()
}

//
// Transformed IR
// ------------------------------------------

@Composable
@ExplicitGroupsComposable
@ComposableInferredTarget(scheme = "[0[0]]")
fun ReusableContentHost(active: Boolean, crossinline content: Function2<Composer, Int, Unit>, %composer: Composer?, %changed: Int) {
  sourceInformationMarkerStart(%composer, <>, "CC(ReusableContentHost)<conten...>:Test.kt")
  %composer.startReusableGroup(200, active)
  val activeChanged = %composer.changed(active)
  if (active) {
    content(%composer, 0b1110 and %changed shr 0b0011)
  } else {
    %composer.deactivateToEndGroup(activeChanged)
  }
  %composer.endReusableGroup()
  sourceInformationMarkerEnd(%composer)
}
