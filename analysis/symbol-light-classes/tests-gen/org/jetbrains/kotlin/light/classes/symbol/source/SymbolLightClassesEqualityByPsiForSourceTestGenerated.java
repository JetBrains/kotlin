/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.light.classes.symbol.source;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi")
@TestDataPath("$PROJECT_ROOT")
public class SymbolLightClassesEqualityByPsiForSourceTestGenerated extends AbstractSymbolLightClassesEqualityByPsiForSourceTest {
  @Test
  public void testAllFilesPresentInLightClassByPsi() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
  }

  @Test
  @TestMetadata("allowedTargets.kt")
  public void testAllowedTargets() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/allowedTargets.kt");
  }

  @Test
  @TestMetadata("annotationInAnnotationParameters.kt")
  public void testAnnotationInAnnotationParameters() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/annotationInAnnotationParameters.kt");
  }

  @Test
  @TestMetadata("annotationWithSetParamPropertyModifier.kt")
  public void testAnnotationWithSetParamPropertyModifier() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/annotationWithSetParamPropertyModifier.kt");
  }

  @Test
  @TestMetadata("annotationWithVaragArguments.kt")
  public void testAnnotationWithVaragArguments() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/annotationWithVaragArguments.kt");
  }

  @Test
  @TestMetadata("annotations.kt")
  public void testAnnotations() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/annotations.kt");
  }

  @Test
  @TestMetadata("AnnotationsOnEnumEntry.kt")
  public void testAnnotationsOnEnumEntry() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/AnnotationsOnEnumEntry.kt");
  }

  @Test
  @TestMetadata("AnnotationsWithUnresolvedAnnotations.kt")
  public void testAnnotationsWithUnresolvedAnnotations() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/AnnotationsWithUnresolvedAnnotations.kt");
  }

  @Test
  @TestMetadata("classModifiers.kt")
  public void testClassModifiers() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/classModifiers.kt");
  }

  @Test
  @TestMetadata("companionDuplication.kt")
  public void testCompanionDuplication() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/companionDuplication.kt");
  }

  @Test
  @TestMetadata("constructors.kt")
  public void testConstructors() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/constructors.kt");
  }

  @Test
  @TestMetadata("coroutines.kt")
  public void testCoroutines() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/coroutines.kt");
  }

  @Test
  @TestMetadata("dataClasses.kt")
  public void testDataClasses() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/dataClasses.kt");
  }

  @Test
  @TestMetadata("defaultMethodInKotlinWithSettingAll.kt")
  public void testDefaultMethodInKotlinWithSettingAll() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/defaultMethodInKotlinWithSettingAll.kt");
  }

  @Test
  @TestMetadata("defaultMethodInKotlinWithSettingAllCompatibility.kt")
  public void testDefaultMethodInKotlinWithSettingAllCompatibility() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/defaultMethodInKotlinWithSettingAllCompatibility.kt");
  }

  @Test
  @TestMetadata("defaultParameterValue.kt")
  public void testDefaultParameterValue() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/defaultParameterValue.kt");
  }

  @Test
  @TestMetadata("DelegatedProperty.kt")
  public void testDelegatedProperty() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/DelegatedProperty.kt");
  }

  @Test
  @TestMetadata("delegatesWithAnnotations.kt")
  public void testDelegatesWithAnnotations() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/delegatesWithAnnotations.kt");
  }

  @Test
  @TestMetadata("delegatingToInterfaces.kt")
  public void testDelegatingToInterfaces() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/delegatingToInterfaces.kt");
  }

  @Test
  @TestMetadata("deprecatedHiddenProperty_accessors.kt")
  public void testDeprecatedHiddenProperty_accessors() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/deprecatedHiddenProperty_accessors.kt");
  }

  @Test
  @TestMetadata("deprecatedHiddenProperty_getter.kt")
  public void testDeprecatedHiddenProperty_getter() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/deprecatedHiddenProperty_getter.kt");
  }

  @Test
  @TestMetadata("deprecatedHiddenProperty_interface.kt")
  public void testDeprecatedHiddenProperty_interface() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/deprecatedHiddenProperty_interface.kt");
  }

  @Test
  @TestMetadata("deprecatedHiddenProperty_noAccessor.kt")
  public void testDeprecatedHiddenProperty_noAccessor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/deprecatedHiddenProperty_noAccessor.kt");
  }

  @Test
  @TestMetadata("deprecatedHiddenProperty_setter.kt")
  public void testDeprecatedHiddenProperty_setter() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/deprecatedHiddenProperty_setter.kt");
  }

  @Test
  @TestMetadata("dollarsInNameLocal.kt")
  public void testDollarsInNameLocal() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/dollarsInNameLocal.kt");
  }

  @Test
  @TestMetadata("enumMembers.kt")
  public void testEnumMembers() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/enumMembers.kt");
  }

  @Test
  @TestMetadata("enums.kt")
  public void testEnums() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/enums.kt");
  }

  @Test
  @TestMetadata("exposedAnonymousType.kt")
  public void testExposedAnonymousType() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/exposedAnonymousType.kt");
  }

  @Test
  @TestMetadata("fieldModifiers.kt")
  public void testFieldModifiers() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/fieldModifiers.kt");
  }

  @Test
  @TestMetadata("generics.kt")
  public void testGenerics() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/generics.kt");
  }

  @Test
  @TestMetadata("implementingKotlinCollections.kt")
  public void testImplementingKotlinCollections() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/implementingKotlinCollections.kt");
  }

  @Test
  @TestMetadata("importAliases.kt")
  public void testImportAliases() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/importAliases.kt");
  }

  @Test
  @TestMetadata("inferringAnonymousObjectTypes.kt")
  public void testInferringAnonymousObjectTypes() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/inferringAnonymousObjectTypes.kt");
  }

  @Test
  @TestMetadata("inheritance.kt")
  public void testInheritance() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/inheritance.kt");
  }

  @Test
  @TestMetadata("inlineClasses.kt")
  public void testInlineClasses() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/inlineClasses.kt");
  }

  @Test
  @TestMetadata("inlineOnly.kt")
  public void testInlineOnly() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/inlineOnly.kt");
  }

  @Test
  @TestMetadata("inlineReified.kt")
  public void testInlineReified() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/inlineReified.kt");
  }

  @Test
  @TestMetadata("jvmField.kt")
  public void testJvmField() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmField.kt");
  }

  @Test
  @TestMetadata("jvmName.kt")
  public void testJvmName() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmName.kt");
  }

  @Test
  @TestMetadata("jvmOverloads.kt")
  public void testJvmOverloads() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmOverloads.kt");
  }

  @Test
  @TestMetadata("jvmRecord.kt")
  public void testJvmRecord() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmRecord.kt");
  }

  @Test
  @TestMetadata("jvmStaticOnPropertySetter.kt")
  public void testJvmStaticOnPropertySetter() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmStaticOnPropertySetter.kt");
  }

  @Test
  @TestMetadata("jvmSynthetic.kt")
  public void testJvmSynthetic() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmSynthetic.kt");
  }

  @Test
  @TestMetadata("jvmSyntheticForAccessors.kt")
  public void testJvmSyntheticForAccessors() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmSyntheticForAccessors.kt");
  }

  @Test
  @TestMetadata("jvmWildcardAnnotations.kt")
  public void testJvmWildcardAnnotations() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmWildcardAnnotations.kt");
  }

  @Test
  @TestMetadata("LateinitProperties.kt")
  public void testLateinitProperties() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/LateinitProperties.kt");
  }

  @Test
  @TestMetadata("lateinitProperty.kt")
  public void testLateinitProperty() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/lateinitProperty.kt");
  }

  @Test
  @TestMetadata("localClassDerived.kt")
  public void testLocalClassDerived() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/localClassDerived.kt");
  }

  @Test
  @TestMetadata("objects.kt")
  public void testObjects() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/objects.kt");
  }

  @Test
  @TestMetadata("overriddenReturnTypeNullability.kt")
  public void testOverriddenReturnTypeNullability() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/overriddenReturnTypeNullability.kt");
  }

  @Test
  @TestMetadata("properties.kt")
  public void testProperties() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/properties.kt");
  }

  @Test
  @TestMetadata("propertyAnnotations.kt")
  public void testPropertyAnnotations() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/propertyAnnotations.kt");
  }

  @Test
  @TestMetadata("simpleFunctions.kt")
  public void testSimpleFunctions() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/simpleFunctions.kt");
  }

  @Test
  @TestMetadata("strangeIdentifiers.kt")
  public void testStrangeIdentifiers() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/strangeIdentifiers.kt");
  }

  @Test
  @TestMetadata("targetAnnotation.kt")
  public void testTargetAnnotation() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/targetAnnotation.kt");
  }

  @Test
  @TestMetadata("throwsAnnotation.kt")
  public void testThrowsAnnotation() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/throwsAnnotation.kt");
  }

  @Test
  @TestMetadata("typeAliases.kt")
  public void testTypeAliases() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/typeAliases.kt");
  }

  @Test
  @TestMetadata("typeAnnotations.kt")
  public void testTypeAnnotations() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/typeAnnotations.kt");
  }

  @Test
  @TestMetadata("typealiasInAnnotation.kt")
  public void testTypealiasInAnnotation() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/typealiasInAnnotation.kt");
  }

  @Test
  @TestMetadata("typealiasInTypeArguments.kt")
  public void testTypealiasInTypeArguments() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/typealiasInTypeArguments.kt");
  }

  @Test
  @TestMetadata("unresolvedGenericSupertypes.kt")
  public void testUnresolvedGenericSupertypes() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/unresolvedGenericSupertypes.kt");
  }

  @Test
  @TestMetadata("unresolvedWithAliasedImport.kt")
  public void testUnresolvedWithAliasedImport() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/unresolvedWithAliasedImport.kt");
  }

  @Test
  @TestMetadata("unsafePropertyInitializers.kt")
  public void testUnsafePropertyInitializers() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/unsafePropertyInitializers.kt");
  }

  @Test
  @TestMetadata("valueClassInSignature.kt")
  public void testValueClassInSignature() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/valueClassInSignature.kt");
  }

  @Test
  @TestMetadata("varargParameterWithIncompletedTypeInAnnotationPrimaryConstructor.kt")
  public void testVarargParameterWithIncompletedTypeInAnnotationPrimaryConstructor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/varargParameterWithIncompletedTypeInAnnotationPrimaryConstructor.kt");
  }

  @Test
  @TestMetadata("varargParameterWithIncompletedTypeInPrimaryConstructor.kt")
  public void testVarargParameterWithIncompletedTypeInPrimaryConstructor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/varargParameterWithIncompletedTypeInPrimaryConstructor.kt");
  }

  @Test
  @TestMetadata("varargParameterWithoutTypeInAnnotationPrimaryConstructor.kt")
  public void testVarargParameterWithoutTypeInAnnotationPrimaryConstructor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/varargParameterWithoutTypeInAnnotationPrimaryConstructor.kt");
  }

  @Test
  @TestMetadata("varargParameterWithoutTypeInPrimaryConstructor.kt")
  public void testVarargParameterWithoutTypeInPrimaryConstructor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/varargParameterWithoutTypeInPrimaryConstructor.kt");
  }

  @Test
  @TestMetadata("varargPropertyWithIncompletedTypeInAnnotationPrimaryConstructor.kt")
  public void testVarargPropertyWithIncompletedTypeInAnnotationPrimaryConstructor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/varargPropertyWithIncompletedTypeInAnnotationPrimaryConstructor.kt");
  }

  @Test
  @TestMetadata("varargPropertyWithIncompletedTypeInPrimaryConstructor.kt")
  public void testVarargPropertyWithIncompletedTypeInPrimaryConstructor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/varargPropertyWithIncompletedTypeInPrimaryConstructor.kt");
  }

  @Test
  @TestMetadata("varargPropertyWithoutTypeInAnnotationPrimaryConstructor.kt")
  public void testVarargPropertyWithoutTypeInAnnotationPrimaryConstructor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/varargPropertyWithoutTypeInAnnotationPrimaryConstructor.kt");
  }

  @Test
  @TestMetadata("varargPropertyWithoutTypeInPrimaryConstructor.kt")
  public void testVarargPropertyWithoutTypeInPrimaryConstructor() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/varargPropertyWithoutTypeInPrimaryConstructor.kt");
  }

  @Test
  @TestMetadata("wildcardOptimization.kt")
  public void testWildcardOptimization() {
    runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/wildcardOptimization.kt");
  }

  @Nested
  @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/facades")
  @TestDataPath("$PROJECT_ROOT")
  public class Facades {
    @Test
    public void testAllFilesPresentInFacades() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/facades"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("coroutines.kt")
    public void testCoroutines() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/coroutines.kt");
    }

    @Test
    @TestMetadata("importAliases.kt")
    public void testImportAliases() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/importAliases.kt");
    }

    @Test
    @TestMetadata("inlineOnly.kt")
    public void testInlineOnly() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/inlineOnly.kt");
    }

    @Test
    @TestMetadata("jvmField.kt")
    public void testJvmField() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/jvmField.kt");
    }

    @Test
    @TestMetadata("jvmName.kt")
    public void testJvmName() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/jvmName.kt");
    }

    @Test
    @TestMetadata("jvmWildcardAnnotations.kt")
    public void testJvmWildcardAnnotations() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/jvmWildcardAnnotations.kt");
    }

    @Test
    @TestMetadata("lateinitProperty.kt")
    public void testLateinitProperty() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/lateinitProperty.kt");
    }

    @Test
    @TestMetadata("multifileFacade.kt")
    public void testMultifileFacade() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/multifileFacade.kt");
    }

    @Test
    @TestMetadata("multifileFacadeJvmName.kt")
    public void testMultifileFacadeJvmName() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/multifileFacadeJvmName.kt");
    }

    @Test
    @TestMetadata("properties.kt")
    public void testProperties() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/properties.kt");
    }

    @Test
    @TestMetadata("reifiedInlineReturnsObject.kt")
    public void testReifiedInlineReturnsObject() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/reifiedInlineReturnsObject.kt");
    }

    @Test
    @TestMetadata("simpleFunctions.kt")
    public void testSimpleFunctions() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/simpleFunctions.kt");
    }

    @Test
    @TestMetadata("throwsAnnotation.kt")
    public void testThrowsAnnotation() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/throwsAnnotation.kt");
    }

    @Test
    @TestMetadata("valueClassInSignature.kt")
    public void testValueClassInSignature() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/valueClassInSignature.kt");
    }

    @Test
    @TestMetadata("varargParameterWithIncompletedType.kt")
    public void testVarargParameterWithIncompletedType() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/varargParameterWithIncompletedType.kt");
    }

    @Test
    @TestMetadata("varargParameterWithoutType.kt")
    public void testVarargParameterWithoutType() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/varargParameterWithoutType.kt");
    }

    @Test
    @TestMetadata("wildcardOptimization.kt")
    public void testWildcardOptimization() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/facades/wildcardOptimization.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed")
  @TestDataPath("$PROJECT_ROOT")
  public class JvmExposeBoxed {
    @Test
    public void testAllFilesPresentInJvmExposeBoxed() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("companionObject.kt")
    public void testCompanionObject() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/companionObject.kt");
    }

    @Test
    @TestMetadata("constructor.kt")
    public void testConstructor() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/constructor.kt");
    }

    @Test
    @TestMetadata("constructorBoxed.kt")
    public void testConstructorBoxed() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/constructorBoxed.kt");
    }

    @Test
    @TestMetadata("contextAndReceiverVariable.kt")
    public void testContextAndReceiverVariable() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/contextAndReceiverVariable.kt");
    }

    @Test
    @TestMetadata("contextVariable.kt")
    public void testContextVariable() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/contextVariable.kt");
    }

    @Test
    @TestMetadata("contexts.kt")
    public void testContexts() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/contexts.kt");
    }

    @Test
    @TestMetadata("extension.kt")
    public void testExtension() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/extension.kt");
    }

    @Test
    @TestMetadata("extensionVariable.kt")
    public void testExtensionVariable() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/extensionVariable.kt");
    }

    @Test
    @TestMetadata("getter.kt")
    public void testGetter() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/getter.kt");
    }

    @Test
    @TestMetadata("globalGetter.kt")
    public void testGlobalGetter() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/globalGetter.kt");
    }

    @Test
    @TestMetadata("globalReturn.kt")
    public void testGlobalReturn() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/globalReturn.kt");
    }

    @Test
    @TestMetadata("globalVariable.kt")
    public void testGlobalVariable() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/globalVariable.kt");
    }

    @Test
    @TestMetadata("globalVariableContext.kt")
    public void testGlobalVariableContext() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/globalVariableContext.kt");
    }

    @Test
    @TestMetadata("globalVariableContextAndReceiver.kt")
    public void testGlobalVariableContextAndReceiver() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/globalVariableContextAndReceiver.kt");
    }

    @Test
    @TestMetadata("initBlock.kt")
    public void testInitBlock() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/initBlock.kt");
    }

    @Test
    @TestMetadata("int.kt")
    public void testInt() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/int.kt");
    }

    @Test
    @TestMetadata("jvmStatic.kt")
    public void testJvmStatic() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/jvmStatic.kt");
    }

    @Test
    @TestMetadata("lambda.kt")
    public void testLambda() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/lambda.kt");
    }

    @Test
    @TestMetadata("method.kt")
    public void testMethod() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/method.kt");
    }

    @Test
    @TestMetadata("methodReturn.kt")
    public void testMethodReturn() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/methodReturn.kt");
    }

    @Test
    @TestMetadata("methodReturnClassAnnotation.kt")
    public void testMethodReturnClassAnnotation() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/methodReturnClassAnnotation.kt");
    }

    @Test
    @TestMetadata("methodReturnWithJvmName.kt")
    public void testMethodReturnWithJvmName() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/methodReturnWithJvmName.kt");
    }

    @Test
    @TestMetadata("methodWithAnnotation.kt")
    public void testMethodWithAnnotation() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/methodWithAnnotation.kt");
    }

    @Test
    @TestMetadata("noArg.kt")
    public void testNoArg() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/noArg.kt");
    }

    @Test
    @TestMetadata("noArg2.kt")
    public void testNoArg2() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/noArg2.kt");
    }

    @Test
    @TestMetadata("noArg3.kt")
    public void testNoArg3() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/noArg3.kt");
    }

    @Test
    @TestMetadata("noArg4.kt")
    public void testNoArg4() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/noArg4.kt");
    }

    @Test
    @TestMetadata("noArgNoValueClass.kt")
    public void testNoArgNoValueClass() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/noArgNoValueClass.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/simple.kt");
    }

    @Test
    @TestMetadata("suspend.kt")
    public void testSuspend() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/suspend.kt");
    }

    @Test
    @TestMetadata("suspendError.kt")
    public void testSuspendError() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/suspendError.kt");
    }

    @Test
    @TestMetadata("uint.kt")
    public void testUint() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/uint.kt");
    }

    @Test
    @TestMetadata("uintInt.kt")
    public void testUintInt() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/uintInt.kt");
    }

    @Test
    @TestMetadata("uintReceiver.kt")
    public void testUintReceiver() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/uintReceiver.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive")
    @TestDataPath("$PROJECT_ROOT")
    public class Directive {
      @Test
      public void testAllFilesPresentInDirective() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("companionObject.kt")
      public void testCompanionObject() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/companionObject.kt");
      }

      @Test
      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/constructor.kt");
      }

      @Test
      @TestMetadata("constructorBoxed.kt")
      public void testConstructorBoxed() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/constructorBoxed.kt");
      }

      @Test
      @TestMetadata("contextAndReceiverVariable.kt")
      public void testContextAndReceiverVariable() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/contextAndReceiverVariable.kt");
      }

      @Test
      @TestMetadata("contextVariable.kt")
      public void testContextVariable() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/contextVariable.kt");
      }

      @Test
      @TestMetadata("dataClassWithValueClass.kt")
      public void testDataClassWithValueClass() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/dataClassWithValueClass.kt");
      }

      @Test
      @TestMetadata("extensionVariable.kt")
      public void testExtensionVariable() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/extensionVariable.kt");
      }

      @Test
      @TestMetadata("getter.kt")
      public void testGetter() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/getter.kt");
      }

      @Test
      @TestMetadata("globalGetter.kt")
      public void testGlobalGetter() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/globalGetter.kt");
      }

      @Test
      @TestMetadata("globalReturn.kt")
      public void testGlobalReturn() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/globalReturn.kt");
      }

      @Test
      @TestMetadata("globalVariable.kt")
      public void testGlobalVariable() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/globalVariable.kt");
      }

      @Test
      @TestMetadata("globalVariableContext.kt")
      public void testGlobalVariableContext() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/globalVariableContext.kt");
      }

      @Test
      @TestMetadata("globalVariableContextAndReceiver.kt")
      public void testGlobalVariableContextAndReceiver() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/globalVariableContextAndReceiver.kt");
      }

      @Test
      @TestMetadata("initBlock.kt")
      public void testInitBlock() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/initBlock.kt");
      }

      @Test
      @TestMetadata("int.kt")
      public void testInt() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/int.kt");
      }

      @Test
      @TestMetadata("lambda.kt")
      public void testLambda() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/lambda.kt");
      }

      @Test
      @TestMetadata("method.kt")
      public void testMethod() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/method.kt");
      }

      @Test
      @TestMetadata("methodReturn.kt")
      public void testMethodReturn() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/methodReturn.kt");
      }

      @Test
      @TestMetadata("methodReturnBoxedPrimitive.kt")
      public void testMethodReturnBoxedPrimitive() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/methodReturnBoxedPrimitive.kt");
      }

      @Test
      @TestMetadata("methodReturnWithJvmName.kt")
      public void testMethodReturnWithJvmName() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/methodReturnWithJvmName.kt");
      }

      @Test
      @TestMetadata("noArg.kt")
      public void testNoArg() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/noArg.kt");
      }

      @Test
      @TestMetadata("noArg2.kt")
      public void testNoArg2() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/noArg2.kt");
      }

      @Test
      @TestMetadata("noArg3.kt")
      public void testNoArg3() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/noArg3.kt");
      }

      @Test
      @TestMetadata("noArg4.kt")
      public void testNoArg4() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/noArg4.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/simple.kt");
      }

      @Test
      @TestMetadata("suspend.kt")
      public void testSuspend() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/suspend.kt");
      }

      @Test
      @TestMetadata("synthetic.kt")
      public void testSynthetic() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/synthetic.kt");
      }

      @Test
      @TestMetadata("uint.kt")
      public void testUint() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/uint.kt");
      }

      @Test
      @TestMetadata("uintInt.kt")
      public void testUintInt() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/uintInt.kt");
      }

      @Test
      @TestMetadata("uintReceiver.kt")
      public void testUintReceiver() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/uintReceiver.kt");
      }

      @Test
      @TestMetadata("valueClassInsideDefaultImpl.kt")
      public void testValueClassInsideDefaultImpl() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/valueClassInsideDefaultImpl.kt");
      }

      @Test
      @TestMetadata("valueClassMembers.kt")
      public void testValueClassMembers() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/valueClassMembers.kt");
      }

      @Test
      @TestMetadata("valueClassWithConstructorOverride.kt")
      public void testValueClassWithConstructorOverride() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/valueClassWithConstructorOverride.kt");
      }

      @Test
      @TestMetadata("valueClassWithDelegatedSuperInterface.kt")
      public void testValueClassWithDelegatedSuperInterface() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/valueClassWithDelegatedSuperInterface.kt");
      }

      @Test
      @TestMetadata("valueClassWithInternalParam.kt")
      public void testValueClassWithInternalParam() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/valueClassWithInternalParam.kt");
      }

      @Test
      @TestMetadata("valueClassWithPrivateParam.kt")
      public void testValueClassWithPrivateParam() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/valueClassWithPrivateParam.kt");
      }

      @Test
      @TestMetadata("valueClassWithSuperInterface.kt")
      public void testValueClassWithSuperInterface() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/valueClassWithSuperInterface.kt");
      }

      @Test
      @TestMetadata("varargAndValueClass.kt")
      public void testVarargAndValueClass() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/varargAndValueClass.kt");
      }

      @Test
      @TestMetadata("variable.kt")
      public void testVariable() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/variable.kt");
      }

      @Test
      @TestMetadata("variableBoxedPrimitive.kt")
      public void testVariableBoxedPrimitive() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/variableBoxedPrimitive.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction")
    @TestDataPath("$PROJECT_ROOT")
    public class FeatureInteraction {
      @Test
      public void testAllFilesPresentInFeatureInteraction() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("globalLateinit.kt")
      public void testGlobalLateinit() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/globalLateinit.kt");
      }

      @Test
      @TestMetadata("jvmField.kt")
      public void testJvmField() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmField.kt");
      }

      @Test
      @TestMetadata("jvmFieldCompanion.kt")
      public void testJvmFieldCompanion() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmFieldCompanion.kt");
      }

      @Test
      @TestMetadata("jvmName.kt")
      public void testJvmName() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmName.kt");
      }

      @Test
      @TestMetadata("jvmNameClass.kt")
      public void testJvmNameClass() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmNameClass.kt");
      }

      @Test
      @TestMetadata("jvmNameDirective.kt")
      public void testJvmNameDirective() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmNameDirective.kt");
      }

      @Test
      @TestMetadata("jvmNameVariable.kt")
      public void testJvmNameVariable() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmNameVariable.kt");
      }

      @Test
      @TestMetadata("jvmNameVariableDirective.kt")
      public void testJvmNameVariableDirective() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmNameVariableDirective.kt");
      }

      @Test
      @TestMetadata("jvmNameVariableSetterExplicitBoxed.kt")
      public void testJvmNameVariableSetterExplicitBoxed() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmNameVariableSetterExplicitBoxed.kt");
      }

      @Test
      @TestMetadata("jvmNameVariableWithReceiverSetterExplicitBoxed.kt")
      public void testJvmNameVariableWithReceiverSetterExplicitBoxed() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmNameVariableWithReceiverSetterExplicitBoxed.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsConstructor.kt")
      public void testJvmOverloadsConstructor() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsConstructor.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsConstructor2.kt")
      public void testJvmOverloadsConstructor2() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsConstructor2.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsInlineReceiver.kt")
      public void testJvmOverloadsInlineReceiver() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsInlineReceiver.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsInlineReceiverDefaultName.kt")
      public void testJvmOverloadsInlineReceiverDefaultName() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsInlineReceiverDefaultName.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsRegularReceiver.kt")
      public void testJvmOverloadsRegularReceiver() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsRegularReceiver.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsRegularReceiverDefaultName.kt")
      public void testJvmOverloadsRegularReceiverDefaultName() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsRegularReceiverDefaultName.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsReturnType.kt")
      public void testJvmOverloadsReturnType() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsReturnType.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsReturnTypeDefaultName.kt")
      public void testJvmOverloadsReturnTypeDefaultName() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsReturnTypeDefaultName.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsReturnTypeDirective.kt")
      public void testJvmOverloadsReturnTypeDirective() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsReturnTypeDirective.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsReturnTypeJvmName.kt")
      public void testJvmOverloadsReturnTypeJvmName() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsReturnTypeJvmName.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsReturnTypeJvmNameDefaultName.kt")
      public void testJvmOverloadsReturnTypeJvmNameDefaultName() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsReturnTypeJvmNameDefaultName.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsReturnTypeJvmNameDirective.kt")
      public void testJvmOverloadsReturnTypeJvmNameDirective() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsReturnTypeJvmNameDirective.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsValueParameter.kt")
      public void testJvmOverloadsValueParameter() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsValueParameter.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsValueParameter2.kt")
      public void testJvmOverloadsValueParameter2() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsValueParameter2.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsValueParameterDefaultName.kt")
      public void testJvmOverloadsValueParameterDefaultName() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsValueParameterDefaultName.kt");
      }

      @Test
      @TestMetadata("jvmOverloadsValueParameterDefaultName2.kt")
      public void testJvmOverloadsValueParameterDefaultName2() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmOverloadsValueParameterDefaultName2.kt");
      }

      @Test
      @TestMetadata("jvmStatic.kt")
      public void testJvmStatic() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmStatic.kt");
      }

      @Test
      @TestMetadata("jvmStaticCompanion.kt")
      public void testJvmStaticCompanion() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmStaticCompanion.kt");
      }

      @Test
      @TestMetadata("jvmStaticCompanionAnnotation.kt")
      public void testJvmStaticCompanionAnnotation() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmStaticCompanionAnnotation.kt");
      }

      @Test
      @TestMetadata("jvmStaticCompanionClassAnnotation.kt")
      public void testJvmStaticCompanionClassAnnotation() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmStaticCompanionClassAnnotation.kt");
      }

      @Test
      @TestMetadata("jvmStaticVariable.kt")
      public void testJvmStaticVariable() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmStaticVariable.kt");
      }

      @Test
      @TestMetadata("jvmStaticVariableCompanion.kt")
      public void testJvmStaticVariableCompanion() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmStaticVariableCompanion.kt");
      }

      @Test
      @TestMetadata("jvmStaticVariableCompanionAnnotation.kt")
      public void testJvmStaticVariableCompanionAnnotation() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmStaticVariableCompanionAnnotation.kt");
      }

      @Test
      @TestMetadata("jvmStaticVariableCompanionClassAnnotation.kt")
      public void testJvmStaticVariableCompanionClassAnnotation() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/jvmStaticVariableCompanionClassAnnotation.kt");
      }

      @Test
      @TestMetadata("lateinit.kt")
      public void testLateinit() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/lateinit.kt");
      }

      @Test
      @TestMetadata("throws.kt")
      public void testThrows() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/throws.kt");
      }

      @Test
      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction/vararg.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit")
    @TestDataPath("$PROJECT_ROOT")
    public class Inherit {
      @Test
      public void testAllFilesPresentInInherit() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
      }

      @Nested
      @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit/child")
      @TestDataPath("$PROJECT_ROOT")
      public class Child {
        @Test
        @TestMetadata("abstractFun.kt")
        public void testAbstractFun() {
          runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit/child/abstractFun.kt");
        }

        @Test
        public void testAllFilesPresentInChild() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit/child"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("interface.kt")
        public void testInterface() {
          runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit/child/interface.kt");
        }

        @Test
        @TestMetadata("openFun.kt")
        public void testOpenFun() {
          runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit/child/openFun.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts")
  @TestDataPath("$PROJECT_ROOT")
  public class Scripts {
    @Test
    public void testAllFilesPresentInScripts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts"), Pattern.compile("^([^.]+)\\.kt$"), null, true);
    }
  }
}
