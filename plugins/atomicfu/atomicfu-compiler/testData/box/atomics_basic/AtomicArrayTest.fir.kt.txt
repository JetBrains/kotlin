data class ARef {
  val n: Int
    field = n
    get

  constructor(n: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): Int {
    return <this>.#n
  }

  fun copy(n: Int = <this>.#n): ARef {
    return ARef(n = n)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is ARef -> return false
    }
    val tmp_0: ARef = other as ARef
    when {
      EQEQ(arg0 = <this>.#n, arg1 = tmp_0.#n).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#n.hashCode()
  }

  override fun toString(): String {
    return "ARef(" + "n=" + <this>.#n + ")"
  }

}

private class AtomicArrayClass {
  val intArr: AtomicIntArray
    field = AtomicIntArray(size = 10)
    get(): AtomicIntArray {
      return <this>.#intArr
    }

  val longArr: AtomicLongArray
    field = AtomicLongArray(size = 10)
    get(): AtomicLongArray {
      return <this>.#longArr
    }

  val booleanArr: AtomicIntArray
    field = AtomicIntArray(size = 10)
    get(): AtomicIntArray {
      return <this>.#booleanArr
    }

  val refArr: AtomicArray<T>
    field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 10))
    get(): AtomicArray<T> {
      return <this>.#refArr
    }

  val anyArr: AtomicArray<T>
    field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 10))
    get(): AtomicArray<T> {
      return <this>.#anyArr
    }

  internal var a$volatile: Any?
    field = ARef(n = 8)
    internal get(): Any? {
      return <this>.#a$volatile
    }
    internal set(value: Any?) {
      return <this>.#a$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class AtomicArrayTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testAnyArray() {
    val A: AtomicArrayClass = AtomicArrayClass()
    val s1: String = "aaa"
    val s2: String = "bbb"
    A.<get-anyArr>().set(index = 0, newValue = s1)
    assertEquals<Any?>(expected = "aaa", actual = A.<get-anyArr>().get(index = 0) as Any?)
    assertTrue(actual = A.<get-anyArr>().compareAndSet(index = 0, expectedValue = s1, newValue = s2))
    assertEquals<Any?>(expected = "bbb", actual = A.<get-anyArr>().get(index = 0) as Any?)
    val r0: Any? = A.<get-anyArr>().get(index = 0) as Any?
    A.<get-anyArr>().set(index = 3, newValue = r0)
    assertEquals<Any?>(expected = "bbb", actual = A.<get-anyArr>().get(index = 3) as Any?)
  }

  fun testBooleanArray() {
    val A: AtomicArrayClass = AtomicArrayClass()
    assertFalse(actual = EQEQ(arg0 = A.<get-booleanArr>().get(index = 1), arg1 = 1) as Boolean)
    assertTrue(actual = A.<get-booleanArr>().compareAndSet(index = 1, expectedValue = when {
      false -> 1
      else -> 0
    }, newValue = when {
      true -> 1
      else -> 0
    }))
    A.<get-booleanArr>().set(index = 0, newValue = when {
      true -> 1
      else -> 0
    })
    assertFalse(actual = EQEQ(arg0 = A.<get-booleanArr>().getAndSet(index = 2, newValue = when {
      true -> 1
      else -> 0
    }), arg1 = 1))
    assertTrue(actual = when {
      when {
        EQEQ(arg0 = A.<get-booleanArr>().get(index = 0), arg1 = 1) as Boolean -> EQEQ(arg0 = A.<get-booleanArr>().get(index = 1), arg1 = 1) as Boolean
        else -> false
      } -> EQEQ(arg0 = A.<get-booleanArr>().get(index = 2), arg1 = 1) as Boolean
      else -> false
    })
    A.<get-booleanArr>().set(index = 0, newValue = when {
      false -> 1
      else -> 0
    })
    assertFalse(actual = EQEQ(arg0 = A.<get-booleanArr>().get(index = 0), arg1 = 1) as Boolean)
  }

  fun testIntArray() {
    val A: AtomicArrayClass = AtomicArrayClass()
    assertTrue(actual = A.<get-intArr>().compareAndSet(index = 0, expectedValue = 0, newValue = 3))
    assertEquals<Int>(expected = 0, actual = A.<get-intArr>().get(index = 1) as Int)
    A.<get-intArr>().set(index = 0, newValue = 5)
    assertEquals<Int>(expected = 5, actual = A.<get-intArr>().get(index = 0) as Int.plus(other = A.<get-intArr>().get(index = 1) as Int).plus(other = A.<get-intArr>().get(index = 2) as Int))
    assertTrue(actual = A.<get-intArr>().compareAndSet(index = 0, expectedValue = 5, newValue = 10))
    assertEquals<Int>(expected = 10, actual = A.<get-intArr>().getAndDecrement(index = 0))
    assertEquals<Int>(expected = 9, actual = A.<get-intArr>().get(index = 0) as Int)
    A.<get-intArr>().set(index = 2, newValue = 2)
    assertEquals<Int>(expected = 2, actual = A.<get-intArr>().get(index = 2) as Int)
    assertTrue(actual = A.<get-intArr>().compareAndSet(index = 2, expectedValue = 2, newValue = 34))
    assertEquals<Int>(expected = 34, actual = A.<get-intArr>().get(index = 2) as Int)
  }

  fun testLongArray() {
    val A: AtomicArrayClass = AtomicArrayClass()
    A.<get-longArr>().set(index = 0, newValue = 2424920024888888848L)
    assertEquals<Long>(expected = 2424920024888888848L, actual = A.<get-longArr>().get(index = 0) as Long)
    A.<get-longArr>().set(index = 0, newValue = 8424920024888888848L)
    assertEquals<Long>(expected = 8424920024888888848L, actual = A.<get-longArr>().get(index = 0) as Long)
    val ac: Long = A.<get-longArr>().get(index = 0) as Long
    A.<get-longArr>().set(index = 3, newValue = ac)
    assertEquals<Long>(expected = 8424920024888888848L, actual = A.<get-longArr>().getAndSet(index = 3, newValue = 8924920024888888848L))
    assertEquals<Long>(expected = 8924920024888888848L, actual = A.<get-longArr>().get(index = 3) as Long)
    val ac1: Long = A.<get-longArr>().get(index = 3) as Long
    A.<get-longArr>().set(index = 4, newValue = ac1)
    assertEquals<Long>(expected = 8924920024888888849L, actual = A.<get-longArr>().incrementAndGet(index = 4))
    assertEquals<Long>(expected = 8924920024888888849L, actual = A.<get-longArr>().get(index = 4) as Long)
    assertEquals<Long>(expected = 8924920024888888849L, actual = A.<get-longArr>().getAndDecrement(index = 4))
    assertEquals<Long>(expected = 8924920024888888848L, actual = A.<get-longArr>().get(index = 4) as Long)
    A.<get-longArr>().set(index = 4, newValue = 8924920024888888848L)
    assertEquals<Long>(expected = 8924920024888888848L, actual = A.<get-longArr>().getAndAdd(index = 4, delta = 100000000000000000L))
    val ac2: Long = A.<get-longArr>().get(index = 4) as Long
    A.<get-longArr>().set(index = 1, newValue = ac2)
    assertEquals<Long>(expected = 9024920024888888848L, actual = A.<get-longArr>().get(index = 1) as Long)
    assertEquals<Long>(expected = -198452011965886959L, actual = A.<get-longArr>().addAndGet(index = 1, delta = -9223372036854775807L))
    assertEquals<Long>(expected = -198452011965886959L, actual = A.<get-longArr>().get(index = 1) as Long)
    assertEquals<Long>(expected = -198452011965886958L, actual = A.<get-longArr>().incrementAndGet(index = 1))
    assertEquals<Long>(expected = -198452011965886958L, actual = A.<get-longArr>().get(index = 1) as Long)
    assertEquals<Long>(expected = -198452011965886959L, actual = A.<get-longArr>().decrementAndGet(index = 1))
    assertEquals<Long>(expected = -198452011965886959L, actual = A.<get-longArr>().get(index = 1) as Long)
  }

  fun testRefArray() {
    val A: AtomicArrayClass = AtomicArrayClass()
    val a2: ARef = ARef(n = 2)
    val a3: ARef = ARef(n = 3)
    A.<get-refArr>().set(index = 0, newValue = a2)
    assertEquals<Int>(expected = 2, actual = CHECK_NOT_NULL<ARef>(arg0 = A.<get-refArr>().get(index = 0) as Any?).<get-n>())
    assertTrue(actual = A.<get-refArr>().compareAndSet(index = 0, expectedValue = a2, newValue = a3))
    assertEquals<Int>(expected = 3, actual = CHECK_NOT_NULL<ARef>(arg0 = A.<get-refArr>().get(index = 0) as Any?).<get-n>())
    val r0: ARef? = A.<get-refArr>().get(index = 0) as Any?
    A.<get-refArr>().set(index = 3, newValue = r0)
    assertEquals<Int>(expected = 3, actual = CHECK_NOT_NULL<ARef>(arg0 = A.<get-refArr>().get(index = 3) as Any?).<get-n>())
    val a: ARef = atomicGetField<Any?>(/* <this> = AtomicArrayClassA::a$volatile */) as Any?
    assertTrue(actual = A.<get-refArr>().compareAndSet(index = 3, expectedValue = a3, newValue = a))
  }

}

fun box(): String {
  val testClass: AtomicArrayTest = AtomicArrayTest()
  testClass.testIntArray()
  testClass.testLongArray()
  testClass.testBooleanArray()
  testClass.testRefArray()
  testClass.testAnyArray()
  return "OK"
}
