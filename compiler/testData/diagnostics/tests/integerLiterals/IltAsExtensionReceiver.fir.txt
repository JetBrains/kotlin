FILE: IltAsExtensionReceiver.kt
    public final fun test_Long(): R|kotlin/Unit| {
        local final fun R|kotlin/Long|.foo(): R|kotlin/Unit| {
        }

        Int(2).R|<local>/foo<None of the following candidates is applicable because of receiver type mismatch: [<local>/foo]>#|()
        Int(2)?.{ $subj$.R|<local>/foo<None of the following candidates is applicable because of receiver type mismatch: [<local>/foo]>#|() }
    }
    public final fun test_LongResolution(): R|kotlin/Unit| {
        local final fun R|kotlin/Int|.foo(): R|kotlin/Int| {
            ^foo Int(1)
        }

        when () {
            Boolean(true) ->  {
                local final fun R|kotlin/Long|.foo(): R|kotlin/String| {
                    ^foo String(2)
                }

                lval x: R|kotlin/Int| = Int(2).R|<local>/foo|()
                lval y: R|kotlin/Int?| = Int(2)?.{ $subj$.R|<local>/foo|() }
            }
        }

    }
    public final fun test_Int(): R|kotlin/Unit| {
        local final fun R|kotlin/Int|.foo(): R|kotlin/Unit| {
        }

        Int(2).R|<local>/foo|()
        Int(2)?.{ $subj$.R|<local>/foo|() }
    }
    public final fun test_Short(): R|kotlin/Unit| {
        local final fun R|kotlin/Short|.foo(): R|kotlin/Unit| {
        }

        Int(2).R|<local>/foo<None of the following candidates is applicable because of receiver type mismatch: [<local>/foo]>#|()
        Int(2)?.{ $subj$.R|<local>/foo<None of the following candidates is applicable because of receiver type mismatch: [<local>/foo]>#|() }
    }
