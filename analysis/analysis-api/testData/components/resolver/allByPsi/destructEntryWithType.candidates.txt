KtFile: 'destructEntryWithType.kts'
  NO_CANDIDATES

KtPackageDirective(0,12): 'package util'
  NO_CANDIDATES

KtNameReferenceExpression(8,12): 'util'
  NO_CANDIDATES

KtImportList(12,12): ''
  NO_CANDIDATES

KtScript(12,250): ''
  NO_CANDIDATES

KtBlockExpression(12,250): ''
  NO_CANDIDATES

KtClass(14,52): 'annotation class Anno(val str: String)'
  NO_CANDIDATES

KtDeclarationModifierList(14,24): 'annotation'
  NO_CANDIDATES

KtPrimaryConstructor(35,52): '(val str: String)'
  NO_CANDIDATES

KtParameterList(35,52): '(val str: String)'
  NO_CANDIDATES

KtParameter(36,51): 'val str: String'
  NO_CANDIDATES

KtTypeReference(45,51): 'String'
  NO_CANDIDATES

KtUserType(45,51): 'String'
  NO_CANDIDATES

KtNameReferenceExpression(45,51): 'String'
  NO_CANDIDATES

KtProperty(53,75): 'const val constant = 0'
  NO_CANDIDATES

KtDeclarationModifierList(53,58): 'const'
  NO_CANDIDATES

KtConstantExpression(74,75): '0'
  NO_CANDIDATES

KtClass(76,129): 'data class MyPair(val a: List<List<Int>>, val b: Int)'
  NO_CANDIDATES

KtDeclarationModifierList(76,80): 'data'
  NO_CANDIDATES

KtPrimaryConstructor(93,129): '(val a: List<List<Int>>, val b: Int)'
  NO_CANDIDATES

KtParameterList(93,129): '(val a: List<List<Int>>, val b: Int)'
  NO_CANDIDATES

KtParameter(94,116): 'val a: List<List<Int>>'
  NO_CANDIDATES

KtTypeReference(101,116): 'List<List<Int>>'
  NO_CANDIDATES

KtUserType(101,116): 'List<List<Int>>'
  NO_CANDIDATES

KtNameReferenceExpression(101,105): 'List'
  NO_CANDIDATES

KtTypeArgumentList(105,116): '<List<Int>>'
  NO_CANDIDATES

KtTypeProjection(106,115): 'List<Int>'
  NO_CANDIDATES

KtTypeReference(106,115): 'List<Int>'
  NO_CANDIDATES

KtUserType(106,115): 'List<Int>'
  NO_CANDIDATES

KtNameReferenceExpression(106,110): 'List'
  NO_CANDIDATES

KtTypeArgumentList(110,115): '<Int>'
  NO_CANDIDATES

KtTypeProjection(111,114): 'Int'
  NO_CANDIDATES

KtTypeReference(111,114): 'Int'
  NO_CANDIDATES

KtUserType(111,114): 'Int'
  NO_CANDIDATES

KtNameReferenceExpression(111,114): 'Int'
  NO_CANDIDATES

KtParameter(118,128): 'val b: Int'
  NO_CANDIDATES

KtTypeReference(125,128): 'Int'
  NO_CANDIDATES

KtUserType(125,128): 'Int'
  NO_CANDIDATES

KtNameReferenceExpression(125,128): 'Int'
  NO_CANDIDATES

KtProperty(130,146): 'val pair: MyPair'
  NO_CANDIDATES

KtTypeReference(140,146): 'MyPair'
  NO_CANDIDATES

KtUserType(140,146): 'MyPair'
  NO_CANDIDATES

KtNameReferenceExpression(140,146): 'MyPair'
  NO_CANDIDATES

KtDestructuringDeclaration(148,249): 'val (left: @Anno(0 + constant) List<@Anno(1 + constant) List<@Anno(2 + constant) Int>>, right) = pair'
  NO_CANDIDATES

KtDestructuringDeclarationEntry(153,234): 'left: @Anno(0 + constant) List<@Anno(1 + constant) List<@Anno(2 + constant) Int>>'
  NO_CANDIDATES

KtTypeReference(159,234): '@Anno(0 + constant) List<@Anno(1 + constant) List<@Anno(2 + constant) Int>>'
  NO_CANDIDATES

KtDeclarationModifierList(159,178): '@Anno(0 + constant)'
  NO_CANDIDATES

KtAnnotationEntry(159,178): '@Anno(0 + constant)'
  KaInapplicableCallCandidateInfo:
    candidate = KaAnnotationCall:
      argumentMapping = {
        0 + constant -> (KaVariableSignature:
          name = str
          receiverType = null
          returnType = kotlin.String
          symbol = str: kotlin.String
          contextParameters = []
          callableId = null)
      }
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = util.Anno
          symbol = <constructor>(str: kotlin.String): util.Anno
          valueParameters = [
            KaVariableSignature:
              name = str
              receiverType = null
              returnType = kotlin.String
              symbol = str: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>
    isInBestCandidates = true

KtConstructorCalleeExpression(160,164): 'Anno'
  KaInapplicableCallCandidateInfo:
    candidate = KaAnnotationCall:
      argumentMapping = {
        0 + constant -> (KaVariableSignature:
          name = str
          receiverType = null
          returnType = kotlin.String
          symbol = str: kotlin.String
          contextParameters = []
          callableId = null)
      }
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = util.Anno
          symbol = <constructor>(str: kotlin.String): util.Anno
          valueParameters = [
            KaVariableSignature:
              name = str
              receiverType = null
              returnType = kotlin.String
              symbol = str: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>
    isInBestCandidates = true

KtTypeReference(160,164): 'Anno'
  NO_CANDIDATES

KtUserType(160,164): 'Anno'
  NO_CANDIDATES

KtNameReferenceExpression(160,164): 'Anno'
  NO_CANDIDATES

KtValueArgumentList(164,178): '(0 + constant)'
  NO_CANDIDATES

KtValueArgument(165,177): '0 + constant'
  NO_CANDIDATES

KtBinaryExpression(165,177): '0 + constant'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Double
          symbol = other: kotlin.Double
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Double
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Double
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Double
              symbol = other: kotlin.Double
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Double' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Float
          symbol = other: kotlin.Float
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Float
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Float
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Float
              symbol = other: kotlin.Float
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Float' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Byte
          symbol = other: kotlin.Byte
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Byte
              symbol = other: kotlin.Byte
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Byte' was expected.>
    isInBestCandidates = false

  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Short
          symbol = other: kotlin.Short
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Short
              symbol = other: kotlin.Short
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Short' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Long
          symbol = other: kotlin.Long
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Long
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Long
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Long
              symbol = other: kotlin.Long
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Long' was expected.>
    isInBestCandidates = false

KtConstantExpression(165,166): '0'
  NO_CANDIDATES

KtOperationReferenceExpression(167,168): '+'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Double
          symbol = other: kotlin.Double
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Double
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Double
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Double
              symbol = other: kotlin.Double
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Double' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Float
          symbol = other: kotlin.Float
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Float
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Float
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Float
              symbol = other: kotlin.Float
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Float' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Byte
          symbol = other: kotlin.Byte
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Byte
              symbol = other: kotlin.Byte
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Byte' was expected.>
    isInBestCandidates = false

  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Short
          symbol = other: kotlin.Short
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Short
              symbol = other: kotlin.Short
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Short' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Long
          symbol = other: kotlin.Long
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Long
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Long
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Long
              symbol = other: kotlin.Long
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Long' was expected.>
    isInBestCandidates = false

KtNameReferenceExpression(169,177): 'constant'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = constant
          receiverType = null
          returnType = kotlin.Int
          symbol = val constant: kotlin.Int
          contextParameters = []
          callableId = util/constant
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtUserType(179,234): 'List<@Anno(1 + constant) List<@Anno(2 + constant) Int>>'
  NO_CANDIDATES

KtNameReferenceExpression(179,183): 'List'
  NO_CANDIDATES

KtTypeArgumentList(183,234): '<@Anno(1 + constant) List<@Anno(2 + constant) Int>>'
  NO_CANDIDATES

KtTypeProjection(184,233): '@Anno(1 + constant) List<@Anno(2 + constant) Int>'
  NO_CANDIDATES

KtTypeReference(184,233): '@Anno(1 + constant) List<@Anno(2 + constant) Int>'
  NO_CANDIDATES

KtDeclarationModifierList(184,203): '@Anno(1 + constant)'
  NO_CANDIDATES

KtAnnotationEntry(184,203): '@Anno(1 + constant)'
  KaInapplicableCallCandidateInfo:
    candidate = KaAnnotationCall:
      argumentMapping = {
        1 + constant -> (KaVariableSignature:
          name = str
          receiverType = null
          returnType = kotlin.String
          symbol = str: kotlin.String
          contextParameters = []
          callableId = null)
      }
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = util.Anno
          symbol = <constructor>(str: kotlin.String): util.Anno
          valueParameters = [
            KaVariableSignature:
              name = str
              receiverType = null
              returnType = kotlin.String
              symbol = str: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>
    isInBestCandidates = true

KtConstructorCalleeExpression(185,189): 'Anno'
  KaInapplicableCallCandidateInfo:
    candidate = KaAnnotationCall:
      argumentMapping = {
        1 + constant -> (KaVariableSignature:
          name = str
          receiverType = null
          returnType = kotlin.String
          symbol = str: kotlin.String
          contextParameters = []
          callableId = null)
      }
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = util.Anno
          symbol = <constructor>(str: kotlin.String): util.Anno
          valueParameters = [
            KaVariableSignature:
              name = str
              receiverType = null
              returnType = kotlin.String
              symbol = str: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>
    isInBestCandidates = true

KtTypeReference(185,189): 'Anno'
  NO_CANDIDATES

KtUserType(185,189): 'Anno'
  NO_CANDIDATES

KtNameReferenceExpression(185,189): 'Anno'
  NO_CANDIDATES

KtValueArgumentList(189,203): '(1 + constant)'
  NO_CANDIDATES

KtValueArgument(190,202): '1 + constant'
  NO_CANDIDATES

KtBinaryExpression(190,202): '1 + constant'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Double
          symbol = other: kotlin.Double
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Double
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Double
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Double
              symbol = other: kotlin.Double
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Double' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Float
          symbol = other: kotlin.Float
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Float
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Float
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Float
              symbol = other: kotlin.Float
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Float' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Byte
          symbol = other: kotlin.Byte
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Byte
              symbol = other: kotlin.Byte
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Byte' was expected.>
    isInBestCandidates = false

  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Short
          symbol = other: kotlin.Short
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Short
              symbol = other: kotlin.Short
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Short' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Long
          symbol = other: kotlin.Long
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Long
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Long
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Long
              symbol = other: kotlin.Long
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Long' was expected.>
    isInBestCandidates = false

KtConstantExpression(190,191): '1'
  NO_CANDIDATES

KtOperationReferenceExpression(192,193): '+'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Double
          symbol = other: kotlin.Double
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Double
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Double
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Double
              symbol = other: kotlin.Double
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Double' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Float
          symbol = other: kotlin.Float
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Float
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Float
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Float
              symbol = other: kotlin.Float
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Float' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Byte
          symbol = other: kotlin.Byte
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Byte
              symbol = other: kotlin.Byte
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Byte' was expected.>
    isInBestCandidates = false

  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Short
          symbol = other: kotlin.Short
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Short
              symbol = other: kotlin.Short
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Short' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Long
          symbol = other: kotlin.Long
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Long
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Long
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Long
              symbol = other: kotlin.Long
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Long' was expected.>
    isInBestCandidates = false

KtNameReferenceExpression(194,202): 'constant'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = constant
          receiverType = null
          returnType = kotlin.Int
          symbol = val constant: kotlin.Int
          contextParameters = []
          callableId = util/constant
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtUserType(204,233): 'List<@Anno(2 + constant) Int>'
  NO_CANDIDATES

KtNameReferenceExpression(204,208): 'List'
  NO_CANDIDATES

KtTypeArgumentList(208,233): '<@Anno(2 + constant) Int>'
  NO_CANDIDATES

KtTypeProjection(209,232): '@Anno(2 + constant) Int'
  NO_CANDIDATES

KtTypeReference(209,232): '@Anno(2 + constant) Int'
  NO_CANDIDATES

KtDeclarationModifierList(209,228): '@Anno(2 + constant)'
  NO_CANDIDATES

KtAnnotationEntry(209,228): '@Anno(2 + constant)'
  KaInapplicableCallCandidateInfo:
    candidate = KaAnnotationCall:
      argumentMapping = {
        2 + constant -> (KaVariableSignature:
          name = str
          receiverType = null
          returnType = kotlin.String
          symbol = str: kotlin.String
          contextParameters = []
          callableId = null)
      }
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = util.Anno
          symbol = <constructor>(str: kotlin.String): util.Anno
          valueParameters = [
            KaVariableSignature:
              name = str
              receiverType = null
              returnType = kotlin.String
              symbol = str: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>
    isInBestCandidates = true

KtConstructorCalleeExpression(210,214): 'Anno'
  KaInapplicableCallCandidateInfo:
    candidate = KaAnnotationCall:
      argumentMapping = {
        2 + constant -> (KaVariableSignature:
          name = str
          receiverType = null
          returnType = kotlin.String
          symbol = str: kotlin.String
          contextParameters = []
          callableId = null)
      }
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = util.Anno
          symbol = <constructor>(str: kotlin.String): util.Anno
          valueParameters = [
            KaVariableSignature:
              name = str
              receiverType = null
              returnType = kotlin.String
              symbol = str: kotlin.String
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = null
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>
    isInBestCandidates = true

KtTypeReference(210,214): 'Anno'
  NO_CANDIDATES

KtUserType(210,214): 'Anno'
  NO_CANDIDATES

KtNameReferenceExpression(210,214): 'Anno'
  NO_CANDIDATES

KtValueArgumentList(214,228): '(2 + constant)'
  NO_CANDIDATES

KtValueArgument(215,227): '2 + constant'
  NO_CANDIDATES

KtBinaryExpression(215,227): '2 + constant'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Double
          symbol = other: kotlin.Double
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Double
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Double
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Double
              symbol = other: kotlin.Double
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Double' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Float
          symbol = other: kotlin.Float
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Float
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Float
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Float
              symbol = other: kotlin.Float
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Float' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Byte
          symbol = other: kotlin.Byte
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Byte
              symbol = other: kotlin.Byte
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Byte' was expected.>
    isInBestCandidates = false

  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Short
          symbol = other: kotlin.Short
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Short
              symbol = other: kotlin.Short
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Short' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Long
          symbol = other: kotlin.Long
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Long
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Long
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Long
              symbol = other: kotlin.Long
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Long' was expected.>
    isInBestCandidates = false

KtConstantExpression(215,216): '2'
  NO_CANDIDATES

KtOperationReferenceExpression(217,218): '+'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Double
          symbol = other: kotlin.Double
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Double
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Double
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Double
              symbol = other: kotlin.Double
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Double' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Float
          symbol = other: kotlin.Float
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Float
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Float
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Float
              symbol = other: kotlin.Float
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Float' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Byte
          symbol = other: kotlin.Byte
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Byte
              symbol = other: kotlin.Byte
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Byte' was expected.>
    isInBestCandidates = false

  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    isInBestCandidates = true

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Short
          symbol = other: kotlin.Short
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Short
              symbol = other: kotlin.Short
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Short' was expected.>
    isInBestCandidates = false

  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Long
          symbol = other: kotlin.Long
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Long
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Long
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Long
              symbol = other: kotlin.Long
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'Long' was expected.>
    isInBestCandidates = false

KtNameReferenceExpression(219,227): 'constant'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = constant
          receiverType = null
          returnType = kotlin.Int
          symbol = val constant: kotlin.Int
          contextParameters = []
          callableId = util/constant
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtUserType(229,232): 'Int'
  NO_CANDIDATES

KtNameReferenceExpression(229,232): 'Int'
  NO_CANDIDATES

KtDestructuringDeclarationEntry(236,241): 'right'
  NO_CANDIDATES

KtNameReferenceExpression(245,249): 'pair'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = pair
          receiverType = null
          returnType = util.MyPair
          symbol = val pair: util.MyPair
          contextParameters = []
          callableId = util/pair
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true
