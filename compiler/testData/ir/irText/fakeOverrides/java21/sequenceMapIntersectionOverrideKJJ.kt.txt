abstract class A : HashMap<Int, Int>, SequencedMap<Int, Int> {
  constructor() /* primary */ {
    super/*HashMap*/<Int, Int>()
    /* <init>() */

  }

}

class B : HashMap<Int, Int>, SequencedMap<Int, Int> {
  constructor() /* primary */ {
    super/*HashMap*/<Int, Int>()
    /* <init>() */

  }

  override fun reversed(): SequencedMap<Int, Int> {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

}

fun test(a: A, b: B) {
  a.<get-size>() /*~> Unit */
  a.putLast(p0 = null, p1 = 1) /*~> Unit */
  a.putLast(p0 = 2, p1 = null) /*~> Unit */
  a.firstEntry() /*~> Unit */
  a.lastEntry() /*~> Unit */
  a.reversed() /*~> Unit */
  b.reversed() /*~> Unit */
}
