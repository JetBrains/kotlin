private var a$volatile: Int
  field = 0
  private get(): Int {
    return #a$volatile
  }
  private set(value: Int) {
    return #a$volatile = value
  }

private var b$volatile: Long
  field = 2424920024888888848L
  private get(): Long {
    return #b$volatile
  }
  private set(value: Long) {
    return #b$volatile = value
  }

private var c$volatile: Boolean
  field = true
  private get(): Boolean {
    return #c$volatile
  }
  private set(value: Boolean) {
    return #c$volatile = value
  }

private var abcNode$volatile: Any?
  field = ANode<BNode<CNode>>(b = BNode<CNode>(c = CNode(d = 8)))
  private get(): Any? {
    return #abcNode$volatile
  }
  private set(value: Any?) {
    return #abcNode$volatile = value
  }

private var any$volatile: Any?
  field = null
  private get(): Any? {
    return #any$volatile
  }
  private set(value: Any?) {
    return #any$volatile = value
  }

internal var a_internal$volatile: Int
  field = 0
  internal get(): Int {
    return #a_internal$volatile
  }
  internal set(value: Int) {
    return #a_internal$volatile = value
  }

internal var b_internal$volatile: Long
  field = 2424920024888888848L
  internal get(): Long {
    return #b_internal$volatile
  }
  internal set(value: Long) {
    return #b_internal$volatile = value
  }

internal var c_internal$volatile: Boolean
  field = true
  internal get(): Boolean {
    return #c_internal$volatile
  }
  internal set(value: Boolean) {
    return #c_internal$volatile = value
  }

internal var abcNode_internal$volatile: Any?
  field = ANode<BNode<CNode>>(b = BNode<CNode>(c = CNode(d = 8)))
  internal get(): Any? {
    return #abcNode_internal$volatile
  }
  internal set(value: Any?) {
    return #abcNode_internal$volatile = value
  }

internal var any_internal$volatile: Any?
  field = null
  internal get(): Any? {
    return #any_internal$volatile
  }
  internal set(value: Any?) {
    return #any_internal$volatile = value
  }

private val intArr: AtomicIntArray
  field = AtomicIntArray(size = 3)
  private get(): AtomicIntArray {
    return #intArr
  }

private val longArr: AtomicLongArray
  field = AtomicLongArray(size = 5)
  private get(): AtomicLongArray {
    return #longArr
  }

private val booleanArr: AtomicIntArray
  field = AtomicIntArray(size = 4)
  private get(): AtomicIntArray {
    return #booleanArr
  }

private val refArr: AtomicArray<T>
  field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 5))
  private get(): AtomicArray<T> {
    return #refArr
  }

private val anyRefArr: AtomicArray<T>
  field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 10))
  private get(): AtomicArray<T> {
    return #anyRefArr
  }

private val stringAtomicNullArr: AtomicArray<T>
  field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 10))
  private get(): AtomicArray<T> {
    return #stringAtomicNullArr
  }

data class ANode<T : Any?> {
  val b: T
    field = b
    get

  constructor(b: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): T {
    return <this>.#b
  }

  fun copy(b: T = <this>.#b): ANode<T> {
    return ANode<T>(b = b)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is ANode<T> -> return false
    }
    val tmp_0: ANode<T> = other as ANode<T>
    when {
      EQEQ(arg0 = <this>.#b, arg1 = tmp_0.#b).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return when {
      EQEQ(arg0 = <this>.#b, arg1 = null) -> 0
      else -> <this>.#b.hashCode()
    }
  }

  override fun toString(): String {
    return "ANode(" + "b=" + <this>.#b + ")"
  }

}

data class BNode<T : Any?> {
  val c: T
    field = c
    get

  constructor(c: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): T {
    return <this>.#c
  }

  fun copy(c: T = <this>.#c): BNode<T> {
    return BNode<T>(c = c)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is BNode<T> -> return false
    }
    val tmp_1: BNode<T> = other as BNode<T>
    when {
      EQEQ(arg0 = <this>.#c, arg1 = tmp_1.#c).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return when {
      EQEQ(arg0 = <this>.#c, arg1 = null) -> 0
      else -> <this>.#c.hashCode()
    }
  }

  override fun toString(): String {
    return "BNode(" + "c=" + <this>.#c + ")"
  }

}

data class CNode {
  val d: Int
    field = d
    get

  constructor(d: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): Int {
    return <this>.#d
  }

  fun copy(d: Int = <this>.#d): CNode {
    return CNode(d = d)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is CNode -> return false
    }
    val tmp_2: CNode = other as CNode
    when {
      EQEQ(arg0 = <this>.#d, arg1 = tmp_2.#d).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#d.hashCode()
  }

  override fun toString(): String {
    return "CNode(" + "d=" + <this>.#d + ")"
  }

}

class TopLevelArrayTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testBooleanArray() {
    assertFalse(actual = EQEQ(arg0 = <get-booleanArr>().get(index = 1), arg1 = 1) as Boolean)
    <get-booleanArr>().compareAndSet(index = 1, expectedValue = when {
      false -> 1
      else -> 0
    }, newValue = when {
      true -> 1
      else -> 0
    }) /*~> Unit */
    <get-booleanArr>().set(index = 0, newValue = when {
      true -> 1
      else -> 0
    })
    assertFalse(actual = EQEQ(arg0 = <get-booleanArr>().getAndSet(index = 2, newValue = when {
      true -> 1
      else -> 0
    }), arg1 = 1))
    assertTrue(actual = when {
      when {
        EQEQ(arg0 = <get-booleanArr>().get(index = 0), arg1 = 1) as Boolean -> EQEQ(arg0 = <get-booleanArr>().get(index = 1), arg1 = 1) as Boolean
        else -> false
      } -> EQEQ(arg0 = <get-booleanArr>().get(index = 2), arg1 = 1) as Boolean
      else -> false
    })
  }

  fun testIntArray() {
    assertTrue(actual = <get-intArr>().compareAndSet(index = 0, expectedValue = 0, newValue = 3))
    assertEquals<Int>(expected = 0, actual = <get-intArr>().get(index = 1) as Int)
    <get-intArr>().set(index = 0, newValue = 5)
    assertEquals<Int>(expected = 5, actual = <get-intArr>().get(index = 0) as Int.plus(other = <get-intArr>().get(index = 1) as Int).plus(other = <get-intArr>().get(index = 2) as Int))
    assertTrue(actual = <get-intArr>().compareAndSet(index = 0, expectedValue = 5, newValue = 10))
    assertEquals<Int>(expected = 10, actual = <get-intArr>().getAndDecrement(index = 0))
    assertEquals<Int>(expected = 9, actual = <get-intArr>().get(index = 0) as Int)
    <get-intArr>().set(index = 2, newValue = 2)
    assertEquals<Int>(expected = 2, actual = <get-intArr>().get(index = 2) as Int)
    assertTrue(actual = <get-intArr>().compareAndSet(index = 2, expectedValue = 2, newValue = 34))
    assertEquals<Int>(expected = 34, actual = <get-intArr>().get(index = 2) as Int)
  }

  fun testLongArray() {
    <get-longArr>().set(index = 0, newValue = 2424920024888888848L)
    assertEquals<Long>(expected = 2424920024888888848L, actual = <get-longArr>().get(index = 0) as Long)
    <get-longArr>().set(index = 0, newValue = 8424920024888888848L)
    assertEquals<Long>(expected = 8424920024888888848L, actual = <get-longArr>().get(index = 0) as Long)
    val ac: Long = <get-longArr>().get(index = 0) as Long
    <get-longArr>().set(index = 3, newValue = ac)
    assertEquals<Long>(expected = 8424920024888888848L, actual = <get-longArr>().getAndSet(index = 3, newValue = 8924920024888888848L))
    assertEquals<Long>(expected = 8924920024888888848L, actual = <get-longArr>().get(index = 3) as Long)
    val ac1: Long = <get-longArr>().get(index = 3) as Long
    <get-longArr>().set(index = 4, newValue = ac1)
    assertEquals<Long>(expected = 8924920024888888849L, actual = <get-longArr>().incrementAndGet(index = 4))
    assertEquals<Long>(expected = 8924920024888888849L, actual = <get-longArr>().get(index = 4) as Long)
    assertEquals<Long>(expected = 8924920024888888849L, actual = <get-longArr>().getAndDecrement(index = 4))
    assertEquals<Long>(expected = 8924920024888888848L, actual = <get-longArr>().get(index = 4) as Long)
    <get-longArr>().set(index = 4, newValue = 8924920024888888848L)
    assertEquals<Long>(expected = 8924920024888888848L, actual = <get-longArr>().getAndAdd(index = 4, delta = 100000000000000000L))
    val ac2: Long = <get-longArr>().get(index = 4) as Long
    <get-longArr>().set(index = 1, newValue = ac2)
    assertEquals<Long>(expected = 9024920024888888848L, actual = <get-longArr>().get(index = 1) as Long)
    assertEquals<Long>(expected = -198452011965886959L, actual = <get-longArr>().addAndGet(index = 1, delta = -9223372036854775807L))
    assertEquals<Long>(expected = -198452011965886959L, actual = <get-longArr>().get(index = 1) as Long)
    assertEquals<Long>(expected = -198452011965886958L, actual = <get-longArr>().incrementAndGet(index = 1))
    assertEquals<Long>(expected = -198452011965886958L, actual = <get-longArr>().get(index = 1) as Long)
    assertEquals<Long>(expected = -198452011965886959L, actual = <get-longArr>().decrementAndGet(index = 1))
    assertEquals<Long>(expected = -198452011965886959L, actual = <get-longArr>().get(index = 1) as Long)
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testRefArray() {
    val a2: ANode<BNode<CNode>> = ANode<BNode<CNode>>(b = BNode<CNode>(c = CNode(d = 2)))
    val a3: ANode<BNode<CNode>> = ANode<BNode<CNode>>(b = BNode<CNode>(c = CNode(d = 3)))
    <get-refArr>().set(index = 0, newValue = a2)
    assertEquals<Int>(expected = 2, actual = CHECK_NOT_NULL<ANode<BNode<CNode>>>(arg0 = <get-refArr>().get(index = 0) as Any?).<get-b>().<get-c>().<get-d>())
    assertTrue(actual = <get-refArr>().compareAndSet(index = 0, expectedValue = a2, newValue = a3))
    assertEquals<Int>(expected = 3, actual = CHECK_NOT_NULL<ANode<BNode<CNode>>>(arg0 = <get-refArr>().get(index = 0) as Any?).<get-b>().<get-c>().<get-d>())
    val r0: ANode<BNode<CNode>>? = <get-refArr>().get(index = 0) as Any?
    <get-refArr>().set(index = 3, newValue = r0)
    assertEquals<Int>(expected = 3, actual = CHECK_NOT_NULL<ANode<BNode<CNode>>>(arg0 = <get-refArr>().get(index = 3) as Any?).<get-b>().<get-c>().<get-d>())
    val a: ANode<BNode<CNode>> = atomicGetField<Any?>(/* <this> = ::abcNode$volatile */) as Any?
    assertTrue(actual = <get-refArr>().compareAndSet(index = 3, expectedValue = a3, newValue = a))
  }

}

class TopLevelPrimitiveTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testTopLevelArrayOfNulls() {
    assertEquals<String?>(expected = null, actual = <get-stringAtomicNullArr>().get(index = 0) as Any?)
    assertTrue(actual = <get-stringAtomicNullArr>().compareAndSet(index = 0, expectedValue = null, newValue = "aa"))
    <get-stringAtomicNullArr>().set(index = 1, newValue = "aa")
    assertTrue(actual = EQEQ(arg0 = <get-stringAtomicNullArr>().get(index = 0) as Any?, arg1 = <get-stringAtomicNullArr>().get(index = 1) as Any?))
  }

  fun testTopLevelBoolean() {
    assertTrue(actual = atomicGetField<Boolean>(/* <this> = ::c$volatile */) as Boolean)
    atomicSetField<Boolean>(/* <this> = ::c$volatile, */ newValue = false)
    assertFalse(actual = atomicGetField<Boolean>(/* <this> = ::c$volatile */) as Boolean)
    assertTrue(actual = getAndSetField<Boolean>(/* <this> = ::c$volatile, */ newValue = true).not())
    assertTrue(actual = compareAndSetField<Boolean>(/* <this> = ::c$volatile, */ expectedValue = true, newValue = false))
    assertFalse(actual = atomicGetField<Boolean>(/* <this> = ::c$volatile */) as Boolean)
  }

  fun testTopLevelInt() {
    assertEquals<Int>(expected = 0, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertEquals<Int>(expected = 0, actual = getAndSetField<Int>(/* <this> = ::a$volatile, */ newValue = 3))
    assertTrue(actual = compareAndSetField<Int>(/* <this> = ::a$volatile, */ expectedValue = 3, newValue = 8))
    atomicSetField<Int>(/* <this> = ::a$volatile, */ newValue = 1)
    assertEquals<Int>(expected = 1, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertEquals<Int>(expected = 1, actual = getAndSetField<Int>(/* <this> = ::a$volatile, */ newValue = 2))
    assertEquals<Int>(expected = 2, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertEquals<Int>(expected = 2, actual = getAndAddField(/* <this> = ::a$volatile, */ delta = 1))
    assertEquals<Int>(expected = 3, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertEquals<Int>(expected = 3, actual = getAndAddField(/* <this> = ::a$volatile, */ delta = -1))
    assertEquals<Int>(expected = 2, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertEquals<Int>(expected = 2, actual = getAndAddField(/* <this> = ::a$volatile, */ delta = 2))
    assertEquals<Int>(expected = 4, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertEquals<Int>(expected = 7, actual = getAndAddField(/* <this> = ::a$volatile, */ delta = 3).plus(other = 3))
    assertEquals<Int>(expected = 7, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertEquals<Int>(expected = 8, actual = getAndAddField(/* <this> = ::a$volatile, */ delta = 1).plus(other = 1))
    assertEquals<Int>(expected = 8, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertEquals<Int>(expected = 7, actual = getAndAddField(/* <this> = ::a$volatile, */ delta = -1).plus(other = -1))
    assertEquals<Int>(expected = 7, actual = atomicGetField<Int>(/* <this> = ::a$volatile */) as Int)
    assertTrue(actual = compareAndSetField<Int>(/* <this> = ::a$volatile, */ expectedValue = 7, newValue = 10))
  }

  fun testTopLevelLong() {
    assertEquals<Long>(expected = 2424920024888888848L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
    atomicSetField<Long>(/* <this> = ::b$volatile, */ newValue = 8424920024888888848L)
    assertEquals<Long>(expected = 8424920024888888848L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
    assertEquals<Long>(expected = 8424920024888888848L, actual = getAndSetField<Long>(/* <this> = ::b$volatile, */ newValue = 8924920024888888848L))
    assertEquals<Long>(expected = 8924920024888888848L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
    assertEquals<Long>(expected = 8924920024888888849L, actual = getAndAddField(/* <this> = ::b$volatile, */ delta = 1L /*as Long */).plus(other = 1L))
    assertEquals<Long>(expected = 8924920024888888849L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
    assertEquals<Long>(expected = 8924920024888888849L, actual = getAndAddField(/* <this> = ::b$volatile, */ delta = -1L /*as Long */))
    assertEquals<Long>(expected = 8924920024888888848L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
    assertEquals<Long>(expected = 8924920024888888848L, actual = getAndAddField(/* <this> = ::b$volatile, */ delta = 100000000000000000L /*as Long */))
    assertEquals<Long>(expected = 9024920024888888848L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
    assertEquals<Long>(expected = -198452011965886959L, actual = getAndAddField(/* <this> = ::b$volatile, */ delta = -9223372036854775807L /*as Long */).plus(other = -9223372036854775807L))
    assertEquals<Long>(expected = -198452011965886959L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
    assertEquals<Long>(expected = -198452011965886958L, actual = getAndAddField(/* <this> = ::b$volatile, */ delta = 1L /*as Long */).plus(other = 1L))
    assertEquals<Long>(expected = -198452011965886958L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
    assertEquals<Long>(expected = -198452011965886959L, actual = getAndAddField(/* <this> = ::b$volatile, */ delta = -1L /*as Long */).plus(other = -1L))
    assertEquals<Long>(expected = -198452011965886959L, actual = atomicGetField<Long>(/* <this> = ::b$volatile */) as Long)
  }

  fun testTopLevelRef() {
    assertEquals<Int>(expected = 8, actual = atomicGetField<Any?>(/* <this> = ::abcNode$volatile */) as Any?.<get-b>().<get-c>().<get-d>())
    val newNode: ANode<BNode<CNode>> = ANode<BNode<CNode>>(b = BNode<CNode>(c = CNode(d = 76)))
    assertEquals<Int>(expected = 8, actual = getAndSetField<Any?>(/* <this> = ::abcNode$volatile, */ newValue = newNode).<get-b>().<get-c>().<get-d>())
    assertEquals<Int>(expected = 76, actual = atomicGetField<Any?>(/* <this> = ::abcNode$volatile */) as Any?.<get-b>().<get-c>().<get-d>())
    val l: IntArray = IntArray(size = 4, init = local fun <anonymous>(i: Int): Int {
      return i
    }
)
    atomicSetField<Any?>(/* <this> = ::any$volatile, */ newValue = l)
    assertEquals<Int>(expected = 2, actual = atomicGetField<Any?>(/* <this> = ::any$volatile */) as Any? as IntArray.get(index = 2))
  }

}

fun box(): String {
  val primitiveTest: TopLevelPrimitiveTest = TopLevelPrimitiveTest()
  primitiveTest.testTopLevelInt()
  primitiveTest.testTopLevelLong()
  primitiveTest.testTopLevelBoolean()
  primitiveTest.testTopLevelRef()
  primitiveTest.testTopLevelArrayOfNulls()
  val arrayTest: TopLevelArrayTest = TopLevelArrayTest()
  arrayTest.testIntArray()
  arrayTest.testLongArray()
  arrayTest.testBooleanArray()
  arrayTest.testRefArray()
  return "OK"
}
