private var _topLevelInt$volatile: Int
  field = 42
  private get(): Int {
    return #_topLevelInt$volatile
  }
  private set(value: Int) {
    return #_topLevelInt$volatile = value
  }

@Volatile
private /* static field */ var topLevelVolatile$volatile: Int = 56
class DelegatedProperties {
  private var _a$volatile: Int
    field = 42
    private get(): Int {
      return <this>.#_a$volatile
    }
    private set(value: Int) {
      return <this>.#_a$volatile = value
    }

  private var _l$volatile: Long
    field = 55555555555L
    private get(): Long {
      return <this>.#_l$volatile
    }
    private set(value: Long) {
      return <this>.#_l$volatile = value
    }

  private var _b$volatile: Boolean
    field = false
    private get(): Boolean {
      return <this>.#_b$volatile
    }
    private set(value: Boolean) {
      return <this>.#_b$volatile = value
    }

  private var _ref$volatile: Any?
    field = A(b = B(n = 77))
    private get(): Any? {
      return <this>.#_ref$volatile
    }
    private set(value: Any?) {
      return <this>.#_ref$volatile = value
    }

  @Volatile
  private var vInt$volatile: Int = 77
  @Volatile
  private var vLong$volatile: Int = 777777777
  @Volatile
  private var vBoolean$volatile: Boolean = false
  @Volatile
  private var vRef$volatile: Any? = A(b = B(n = 77))
  class A {
    val b: B
      field = b
      get

    constructor(b: B) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  class B {
    val n: Int
      field = n
      get

    constructor(n: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun test() {
    <this>.testDelegatedAtomicInt()
    <this>.testDelegatedAtomicLong()
    <this>.testDelegatedAtomicBoolean()
    <this>.testDelegatedAtomicRef()
    <this>.testVolatileInt()
    <this>.testVolatileBoolean()
    <this>.testVolatileLong()
    <this>.testVolatileRef()
    <this>.testDelegatedVariablesFlow()
  }

  fun testDelegatedAtomicBoolean() {
    assertEquals<Boolean>(expected = false, actual = <this>.<get-b>())
    atomicSetField<Boolean>(/* <this> = DelegatedProperties<this>::_b$volatile, */ newValue = true)
    assertEquals<Boolean>(expected = true, actual = <this>.<get-b>())
    <this>.<set-b>(<set-?> = false)
    assertTrue(actual = compareAndSetField<Boolean>(/* <this> = DelegatedProperties<this>::_b$volatile, */ expectedValue = false, newValue = true))
    assertEquals<Boolean>(expected = true, actual = atomicGetField<Boolean>(/* <this> = DelegatedProperties<this>::_b$volatile */) as Boolean)
    assertEquals<Boolean>(expected = true, actual = <this>.<get-b>())
  }

  fun testDelegatedAtomicInt() {
    assertEquals<Int>(expected = 42, actual = <this>.<get-a>())
    assertEquals<Int>(expected = 42, actual = <this>.<get-privateA>())
    compareAndSetField<Int>(/* <this> = DelegatedProperties<this>::_a$volatile, */ expectedValue = 42, newValue = 56) /*~> Unit */
    assertEquals<Int>(expected = 56, actual = <this>.<get-a>())
    assertEquals<Int>(expected = 56, actual = <this>.<get-privateA>())
    <this>.<set-a>(<set-?> = 77)
    compareAndSetField<Int>(/* <this> = DelegatedProperties<this>::_a$volatile, */ expectedValue = 77, newValue = 66) /*~> Unit */
    <this>.<set-privateA>(<set-?> = 88)
    compareAndSetField<Int>(/* <this> = DelegatedProperties<this>::_a$volatile, */ expectedValue = 88, newValue = 66) /*~> Unit */
    assertEquals<Int>(expected = 66, actual = atomicGetField<Int>(/* <this> = DelegatedProperties<this>::_a$volatile */) as Int)
    assertEquals<Int>(expected = 66, actual = <this>.<get-a>())
    assertEquals<Int>(expected = 66, actual = <this>.<get-privateA>())
    val aValue: Int = <this>.<get-a>().plus(other = <this>.<get-privateA>())
    assertEquals<Int>(expected = 132, actual = aValue)
  }

  fun testDelegatedAtomicLong() {
    assertEquals<Long>(expected = 55555555555L, actual = <this>.<get-l>())
    getAndAddField(/* <this> = DelegatedProperties<this>::_l$volatile, */ delta = 1L /*as Long */) /*~> Unit */
    assertEquals<Long>(expected = 55555555556L, actual = <this>.<get-l>())
    <this>.<set-l>(<set-?> = 7777777777777L)
    assertTrue(actual = compareAndSetField<Long>(/* <this> = DelegatedProperties<this>::_l$volatile, */ expectedValue = 7777777777777L, newValue = 66666666666L))
    assertEquals<Long>(expected = 66666666666L, actual = atomicGetField<Long>(/* <this> = DelegatedProperties<this>::_l$volatile */) as Long)
    assertEquals<Long>(expected = 66666666666L, actual = <this>.<get-l>())
  }

  fun testDelegatedAtomicRef() {
    assertEquals<Int>(expected = 77, actual = <this>.<get-ref>().<get-b>().<get-n>())
    atomicSetField<Any?>(/* <this> = DelegatedProperties<this>::_ref$volatile, */ newValue = A(b = B(n = 66)))
    assertEquals<Int>(expected = 66, actual = <this>.<get-ref>().<get-b>().<get-n>())
    assertTrue(actual = compareAndSetField<Any?>(/* <this> = DelegatedProperties<this>::_ref$volatile, */ expectedValue = atomicGetField<Any?>(/* <this> = DelegatedProperties<this>::_ref$volatile */) as Any?, newValue = A(b = B(n = 56))))
    assertEquals<Int>(expected = 56, actual = <this>.<get-ref>().<get-b>().<get-n>())
    <this>.<set-ref>(<set-?> = A(b = B(n = 99)))
    assertEquals<Int>(expected = 99, actual = atomicGetField<Any?>(/* <this> = DelegatedProperties<this>::_ref$volatile */) as Any?.<get-b>().<get-n>())
  }

  fun testDelegatedVariablesFlow() {
    atomicSetField<Int>(/* <this> = DelegatedProperties<this>::_a$volatile, */ newValue = 55)
    assertEquals<Int>(expected = 55, actual = atomicGetField<Int>(/* <this> = DelegatedProperties<this>::_a$volatile */) as Int)
    assertEquals<Int>(expected = 55, actual = <this>.<get-a>())
    var aValue: Int = <this>.<get-a>()
    assertEquals<Int>(expected = 55, actual = aValue)
  }

  fun testVolatileBoolean() {
    assertEquals<Boolean>(expected = false, actual = <this>.<get-vBoolean>())
    <this>.<set-vBoolean>(<set-?> = true)
    assertEquals<Boolean>(expected = true, actual = <this>.<get-vBoolean>())
  }

  fun testVolatileInt() {
    assertEquals<Int>(expected = 77, actual = <this>.<get-vInt>())
    <this>.<set-vInt>(<set-?> = 55)
    assertEquals<Int>(expected = 110, actual = <this>.<get-vInt>().times(other = 2))
  }

  fun testVolatileLong() {
    assertEquals<Int>(expected = 777777777, actual = <this>.<get-vLong>())
    <this>.<set-vLong>(<set-?> = 55)
    assertEquals<Int>(expected = 55, actual = <this>.<get-vLong>())
  }

  fun testVolatileRef() {
    assertEquals<Int>(expected = 77, actual = <this>.<get-vRef>().<get-b>().<get-n>())
    <this>.<set-vRef>(<set-?> = A(b = B(n = 99)))
    assertEquals<Int>(expected = 99, actual = <this>.<get-vRef>().<get-b>().<get-n>())
  }

  var a: Int /* by */
    get(): Int {
      return <this>.#_a$volatile
    }
    set(<set-?>: Int) {
      return <this>.#_a$volatile = <set-?>
    }

  private var b: Boolean /* by */
    private get(): Boolean {
      return <this>.#_b$volatile
    }
    private set(<set-?>: Boolean) {
      return <this>.#_b$volatile = <set-?>
    }

  private var l: Long /* by */
    private get(): Long {
      return <this>.#_l$volatile
    }
    private set(<set-?>: Long) {
      return <this>.#_l$volatile = <set-?>
    }

  private var privateA: Int /* by */
    private get(): Int {
      return <this>.#_a$volatile
    }
    private set(<set-?>: Int) {
      return <this>.#_a$volatile = <set-?>
    }

  private var ref: A /* by */
    private get(): A {
      return <this>.#_ref$volatile
    }
    private set(<set-?>: A) {
      return <this>.#_ref$volatile = <set-?>
    }

  private var vBoolean: Boolean /* by */
    private get(): Boolean {
      return <this>.#vBoolean$volatile
    }
    private set(<set-?>: Boolean) {
      return <this>.#vBoolean$volatile = <set-?>
    }

  private var vInt: Int /* by */
    private get(): Int {
      return <this>.#vInt$volatile
    }
    private set(<set-?>: Int) {
      return <this>.#vInt$volatile = <set-?>
    }

  private var vLong: Int /* by */
    private get(): Int {
      return <this>.#vLong$volatile
    }
    private set(<set-?>: Int) {
      return <this>.#vLong$volatile = <set-?>
    }

  private var vRef: A /* by */
    private get(): A {
      return <this>.#vRef$volatile
    }
    private set(<set-?>: A) {
      return <this>.#vRef$volatile = <set-?>
    }

}

fun box(): String {
  val testClass: DelegatedProperties = DelegatedProperties()
  testClass.test()
  testTopLevelDelegatedProperties()
  testTopLevelVolatileProperties()
  return "OK"
}

fun testTopLevelDelegatedProperties() {
  assertEquals<Int>(expected = 42, actual = <get-topLevelInt>())
  compareAndSetField<Int>(/* <this> = ::_topLevelInt$volatile, */ expectedValue = 42, newValue = 56) /*~> Unit */
  assertEquals<Int>(expected = 56, actual = <get-topLevelInt>())
  <set-topLevelInt>(<set-?> = 77)
  compareAndSetField<Int>(/* <this> = ::_topLevelInt$volatile, */ expectedValue = 77, newValue = 66) /*~> Unit */
  assertEquals<Int>(expected = 66, actual = atomicGetField<Int>(/* <this> = ::_topLevelInt$volatile */) as Int)
  assertEquals<Int>(expected = 66, actual = <get-topLevelInt>())
}

fun testTopLevelVolatileProperties() {
  assertEquals<Int>(expected = 56, actual = <get-topLevelVolatile>())
  <set-topLevelVolatile>(<set-?> = 55)
  assertEquals<Int>(expected = 110, actual = <get-topLevelVolatile>().times(other = 2))
}

var topLevelInt: Int /* by */
  get(): Int {
    return #_topLevelInt$volatile
  }
  set(<set-?>: Int) {
    return #_topLevelInt$volatile = <set-?>
  }

private var topLevelVolatile: Int /* by */
  private get(): Int {
    return #topLevelVolatile$volatile
  }
  private set(<set-?>: Int) {
    return #topLevelVolatile$volatile = <set-?>
  }
