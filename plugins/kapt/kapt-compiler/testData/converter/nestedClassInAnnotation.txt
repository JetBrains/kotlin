package test;

@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
/**
 * public final annotation class test/Anno : kotlin/Annotation {
 *
 *   // signature: <init>(Lkotlin/Array;)V
 *   public constructor(value: kotlin/Array<kotlin/reflect/KClass<*>>)
 *
 *   // getter: value()[Ljava/lang/Class;
 *   public final val value: kotlin/Array<kotlin/reflect/KClass<*>>
 *     public final get
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public abstract @interface Anno {

    public abstract java.lang.Class<?>[] value();
}

////////////////////

package test;

@Anno(value = {A.class, A.B.class, A.B.C.class})
/**
 * public final class test/Klass : kotlin/Any {
 *
 *   // signature: <init>()V
 *   public constructor()
 *
 *   // field: x:Lerror/NonExistentClass;
 *   private final lateinit var x: error/NonExistentClass
 *     private final get
 *     private final set
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public final class Klass {
    private error.NonExistentClass x;

    public Klass() {
        super();
    }
}
