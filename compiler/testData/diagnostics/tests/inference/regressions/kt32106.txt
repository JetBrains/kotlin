package

public fun main(): kotlin.Unit

public final class MutableLiveData</*0*/ T> {
    public constructor MutableLiveData</*0*/ T>()
    public final var value: Query<kotlin.Int>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Query</*0*/ out T : kotlin.Any> {
    private constructor Query</*0*/ out T : kotlin.Any>(/*0*/ result: T?, /*1*/ error: kotlin.Throwable?, /*2*/ inProgress: kotlin.Boolean)
    private final val error: kotlin.Throwable?
    public final val inProgress: kotlin.Boolean
    private final val result: T?
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        private constructor Companion()
        public final val inProgress: Query<kotlin.Nothing>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final fun forError(/*0*/ e: kotlin.Throwable): Query<kotlin.Nothing>
        public final fun </*0*/ T : kotlin.Any> forResult(/*0*/ result: T): Query<T>
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
