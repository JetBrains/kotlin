class LambdaTest {
  private var a$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  private var rs$volatile: Any?
    field = "bbbb"
    private get(): Any? {
      return <this>.#rs$volatile
    }
    private set(value: Any?) {
      return <this>.#rs$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_0: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_0)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_1: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_1)
    }
  }

  private inline fun <T : Any?> inlineLambda(arg: T, crossinline block: Function1<T, Unit>) {
    return block.invoke(p1 = arg)
  }

  fun loopInLambda1(to: Int) {
    return <this>.inlineLambda<Int>(arg = to, block = local fun <anonymous>(arg: Int) {
      <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
        return LambdaTest<this>::a$volatile
      }
, action$atomicfu = local fun <anonymous>(value: Int) {
        compareAndSetField<Int>(/* <this> = LambdaTest<this>::a$volatile, */ expectedValue = value, newValue = arg) /*~> Unit */
        return Unit
      }
)
    }
)
  }

  fun loopInLambda2(to: Int) {
    return <this>.inlineLambda<Int>(arg = to, block = local fun <anonymous>(arg1: Int) {
      <this>.inlineLambda<Int>(arg = arg1, block = local fun <anonymous>(arg2: Int) {
        <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
          return LambdaTest<this>::a$volatile
        }
, action$atomicfu = local fun <anonymous>(value: Int) {
          compareAndSetField<Int>(/* <this> = LambdaTest<this>::a$volatile, */ expectedValue = value, newValue = arg2) /*~> Unit */
          return Unit
        }
)
      }
)
    }
)
  }

  fun loopInLambda2Ref(to: String) {
    return <this>.inlineLambda<String>(arg = to, block = local fun <anonymous>(arg1: String) {
      <this>.inlineLambda<String>(arg = arg1, block = local fun <anonymous>(arg2: String) {
        <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <rs$volatile-getter>(): KMutableProperty0<Any?> {
          return LambdaTest<this>::rs$volatile
        }
, action$atomicfu = local fun <anonymous>(value: String) {
          compareAndSetField<Any?>(/* <this> = LambdaTest<this>::rs$volatile, */ expectedValue = value, newValue = arg2) /*~> Unit */
          return Unit
        }
)
      }
)
    }
)
  }

  fun test() {
    <this>.loopInLambda1(to = 34)
    assertEquals<Int>(expected = 34, actual = atomicGetField<Int>(/* <this> = LambdaTest<this>::a$volatile */) as Int)
    <this>.loopInLambda1(to = 77)
    assertEquals<Int>(expected = 77, actual = atomicGetField<Int>(/* <this> = LambdaTest<this>::a$volatile */) as Int)
    <this>.loopInLambda2Ref(to = "bbb")
    assertEquals<String>(expected = "bbb", actual = atomicGetField<Any?>(/* <this> = LambdaTest<this>::rs$volatile */) as Any?)
  }

}

fun box(): String {
  val testClass: LambdaTest = LambdaTest()
  testClass.test()
  return "OK"
}
