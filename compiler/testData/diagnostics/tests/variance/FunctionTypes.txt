package

internal fun </*0*/ T> getT(): T

internal interface In</*0*/ in T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal interface Test</*0*/ in I, /*1*/ out O, /*2*/ P> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal abstract fun neOk1(/*0*/ i: (I) -> O): (O) -> I
    internal abstract fun neOk2(/*0*/ i: (In<O>) -> In<I>): kotlin.Unit
    internal open fun neOk3(): (In<I>) -> In<O>
    internal abstract fun ok1(/*0*/ i: (O) -> I): (I) -> O
    internal abstract fun ok2(/*0*/ i: (P) -> P): (P) -> P
    internal open fun ok3(/*0*/ i: (In<I>) -> In<O>): (In<O>) -> In<I>
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
