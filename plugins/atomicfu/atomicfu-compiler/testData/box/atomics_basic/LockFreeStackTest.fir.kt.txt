class LockFreeStack<T : Any?> {
  private var top$volatile: Any?
    field = null
    private get(): Any? {
      return <this>.#top$volatile
    }
    private set(value: Any?) {
      return <this>.#top$volatile = value
    }

  private class Node<T : Any?> {
    val value: T
      field = value
      get

    val next: Node<T>?
      field = next
      get

    constructor(value: T, next: Node<T>?) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_0: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_1: R = action$atomicfu.invoke(p1 = tmp_0)
      when {
        compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_0, newValue = tmp_1) -> return tmp_0
      }
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_2: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_2)
    }
  }

  private inline fun update$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>) {
    while (true) { // BLOCK
      val tmp_3: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_4: R = action$atomicfu.invoke(p1 = tmp_3)
      when {
        compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_3, newValue = tmp_4) -> return Unit
      }
    }
  }

  fun clear() {
    atomicSetField<Any?>(/* <this> = LockFreeStack<this>::top$volatile, */ newValue = null)
  }

  fun isEmpty(): Boolean {
    return EQEQ(arg0 = atomicGetField<Any?>(/* <this> = LockFreeStack<this>::top$volatile */) as Any?, arg1 = null)
  }

  fun popLoop(): T? {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <top$volatile-getter>(): Any? {
      return LockFreeStack<this>::top$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: Node<T>?) {
      when {
        EQEQ(arg0 = cur, arg1 = null) -> return null
      }
      when {
        compareAndSetField<Any?>(/* <this> = LockFreeStack<this>::top$volatile, */ expectedValue = cur, newValue = cur.<get-next>()) -> return cur.<get-value>()
      }
    }
)
  }

  fun popUpdate(): T? {
    return { // BLOCK
      val tmp_5: Node<T>? = <this>.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <top$volatile-getter>(): Any? {
        return LockFreeStack<this>::top$volatile
      }
, action$atomicfu = local fun <anonymous>(cur: Node<T>?): Node<T>? {
        return { // BLOCK
          val tmp_6: Node<T>? = cur
          when {
            EQEQ(arg0 = tmp_6, arg1 = null) -> null
            else -> tmp_6.<get-next>()
          }
        }
      }
)
      when {
        EQEQ(arg0 = tmp_5, arg1 = null) -> null
        else -> tmp_5.<get-value>()
      }
    }
  }

  fun pushLoop(value: T) {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <top$volatile-getter>(): Any? {
      return LockFreeStack<this>::top$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: Node<T>?) {
      val upd: Node<T> = Node<T>(value = value, next = cur)
      when {
        compareAndSetField<Any?>(/* <this> = LockFreeStack<this>::top$volatile, */ expectedValue = cur, newValue = upd) -> return Unit
      }
    }
)
  }

  fun pushUpdate(value: T) {
    <this>.update$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <top$volatile-getter>(): Any? {
      return LockFreeStack<this>::top$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: Node<T>?): Node<T>? {
      return Node<T>(value = value, next = cur)
    }
)
  }

}

class LockFreeStackTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testClear() {
    val s: LockFreeStack<String> = LockFreeStack<String>()
    assertTrue(actual = s.isEmpty())
    s.pushLoop(value = "A")
    assertTrue(actual = s.isEmpty().not())
    s.clear()
    assertTrue(actual = s.isEmpty())
  }

  fun testPushPopLoop() {
    val s: LockFreeStack<String> = LockFreeStack<String>()
    assertTrue(actual = s.isEmpty())
    s.pushLoop(value = "A")
    assertTrue(actual = s.isEmpty().not())
    assertEquals<String?>(expected = "A", actual = s.popLoop())
    assertTrue(actual = s.isEmpty())
  }

  fun testPushPopUpdate() {
    val s: LockFreeStack<String> = LockFreeStack<String>()
    assertTrue(actual = s.isEmpty())
    s.pushUpdate(value = "A")
    assertTrue(actual = s.isEmpty().not())
    assertEquals<String?>(expected = "A", actual = s.popUpdate())
    assertTrue(actual = s.isEmpty())
  }

}

fun box(): String {
  val testClass: LockFreeStackTest = LockFreeStackTest()
  testClass.testClear()
  testClass.testPushPopLoop()
  testClass.testPushPopUpdate()
  return "OK"
}
