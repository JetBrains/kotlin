package

public var i: kotlin.Int
public const val i2: kotlin.Int = 1
public val i3: kotlin.Int
public val iAnn: Ann
public fun foo(): kotlin.Int

@kotlin.annotation.Retention(value = AnnotationRetention.SOURCE) @kotlin.annotation.Repeatable public final annotation class Ann : kotlin.Annotation {
    public constructor Ann(/*0*/ i: kotlin.IntArray)
    public final val i: kotlin.IntArray
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.annotation.Retention(value = AnnotationRetention.SOURCE) @kotlin.annotation.Repeatable public final annotation class AnnAnn : kotlin.Annotation {
    public constructor AnnAnn(/*0*/ i: kotlin.Array<Ann>)
    public final val i: kotlin.Array<Ann>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@Ann(i = {}) @Ann(i = {1}) @Ann(i = {}) @Ann(i = {1}) @Ann(i = {{1}}) public final class Test {
    public constructor Test()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@AnnAnn(i = {Ann(i = {1})}) @AnnAnn(i = {}) public final class TestAnn {
    public constructor TestAnn()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
