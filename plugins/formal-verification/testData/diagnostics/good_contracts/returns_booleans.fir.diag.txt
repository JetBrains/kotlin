/returns_booleans.kt:(121,133): info: Generated Viper text for returns_true:
method f$returns_true$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures true
  ensures df$rt$boolFromRef(ret$0) == true
{
  ret$0 := df$rt$boolToRef(true)
  goto lbl$ret$0
  label lbl$ret$0
}

/returns_booleans.kt:(268,281): info: Generated Viper text for returns_false:
method f$returns_false$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures true
  ensures df$rt$boolFromRef(ret$0) == false
{
  ret$0 := df$rt$boolToRef(false)
  goto lbl$ret$0
  label lbl$ret$0
}

/returns_booleans.kt:(418,435): info: Generated Viper text for conditional_basic:
method f$conditional_basic$TF$T$Boolean(p$b: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == true ==> true
  ensures df$rt$boolFromRef(ret$0) == false ==> df$rt$boolFromRef(p$b)
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$b), df$rt$boolType())
  ret$0 := df$rt$boolToRef(true)
  goto lbl$ret$0
  label lbl$ret$0
}

/returns_booleans.kt:(612,636): info: Generated Viper text for binary_logic_expressions:
method f$binary_logic_expressions$TF$T$Boolean$T$Boolean(p$a: Ref, p$b: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == false ==>
    df$rt$boolFromRef(p$b) && false
  ensures df$rt$boolFromRef(ret$0) == true ==>
    (true || df$rt$boolFromRef(p$a)) && (df$rt$boolFromRef(p$b) || true)
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$a), df$rt$boolType())
  inhale df$rt$isSubtype(df$rt$typeOf(p$b), df$rt$boolType())
  ret$0 := df$rt$boolToRef(true)
  goto lbl$ret$0
  label lbl$ret$0
}

/returns_booleans.kt:(855,866): info: Generated Viper text for logical_not:
method f$logical_not$TF$T$Boolean(p$b: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == true ==>
    !df$rt$boolFromRef(p$b) && df$rt$boolFromRef(p$b)
  ensures df$rt$boolFromRef(ret$0) == false ==>
    df$rt$boolFromRef(p$b) || !df$rt$boolFromRef(p$b)
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$b), df$rt$boolType())
  ret$0 := df$rt$boolToRef(false)
  goto lbl$ret$0
  label lbl$ret$0
}

/returns_booleans.kt:(1052,1075): info: Generated Viper text for call_fun_with_contracts:
method f$binary_logic_expressions$TF$T$Boolean$T$Boolean(p$a: Ref, p$b: Ref)
  returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$boolType())
  ensures df$rt$boolFromRef(ret) == false ==>
    df$rt$boolFromRef(p$b) && false
  ensures df$rt$boolFromRef(ret) == true ==>
    (true || df$rt$boolFromRef(p$a)) && (df$rt$boolFromRef(p$b) || true)


method f$call_fun_with_contracts$TF$T$Boolean(p$b: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == true
{
  var l0$a: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$b), df$rt$boolType())
  l0$a := f$binary_logic_expressions$TF$T$Boolean$T$Boolean(p$b, p$b)
  ret$0 := l0$a
  goto lbl$ret$0
  label lbl$ret$0
}

/returns_booleans.kt:(1467,1480): info: Generated Viper text for isNullOrEmpty:
field sp$size: Ref

method f$isNullOrEmpty$TF$c$pkg$kotlin_collections$Collection(p$collection: Ref)
  returns (ret$0: Ref)
  requires p$collection != df$rt$nullValue() ==>
    acc(p$collection.sp$size, write)
  requires p$collection != df$rt$nullValue() ==>
    df$rt$intFromRef(p$collection.sp$size) >= 0
  ensures p$collection != df$rt$nullValue() ==>
    acc(p$collection.sp$size, write)
  ensures p$collection != df$rt$nullValue() ==>
    df$rt$intFromRef(p$collection.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == false ==>
    p$collection != df$rt$nullValue()
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$collection), df$rt$nullable(df$rt$T$c$pkg$kotlin_collections$Collection()))
  inhale p$collection != df$rt$nullValue() ==>
    acc(p$pkg$kotlin_collections$c$Collection$shared(p$collection), wildcard)
  if (p$collection == df$rt$nullValue()) {
    ret$0 := df$rt$boolToRef(true)
  } else {
    ret$0 := f$pkg$kotlin_collections$c$Collection$isEmpty$TF$T$c$pkg$kotlin_collections$Collection(p$collection)}
  goto lbl$ret$0
  label lbl$ret$0
}

method f$pkg$kotlin_collections$c$Collection$isEmpty$TF$T$c$pkg$kotlin_collections$Collection(this: Ref)
  returns (ret: Ref)
  requires acc(this.sp$size, write)
  requires df$rt$intFromRef(this.sp$size) >= 0
  ensures acc(this.sp$size, write)
  ensures df$rt$intFromRef(this.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$boolType())
  ensures df$rt$intFromRef(this.sp$size) ==
    old(df$rt$intFromRef(this.sp$size))
  ensures df$rt$boolFromRef(ret) ==> df$rt$intFromRef(this.sp$size) == 0
  ensures !df$rt$boolFromRef(ret) ==> df$rt$intFromRef(this.sp$size) > 0
