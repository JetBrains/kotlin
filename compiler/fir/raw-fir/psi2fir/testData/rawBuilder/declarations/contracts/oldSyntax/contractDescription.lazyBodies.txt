FILE: contractDescription.kt
    public? final? fun test_1(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public? final? fun test_2(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public? final? var test_3: Int = LAZY_EXPRESSION
        public? get(): Int
            [L|Contract description] { LAZY_BLOCK }
        public? set(value: Int): R|kotlin/Unit|
            [L|Contract description] { LAZY_BLOCK }
    public? final? fun test_4(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public final? class MyClass : R|kotlin/Any| {
        public? constructor(x: Boolean): R|MyClass|
            [L|Contract description] { LAZY_BLOCK }

    }
    public? final? fun annotated(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public? final? fun parenthesized(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public? final? fun labeled(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public? final? fun test_5(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun test_6(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun test_7(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun test_8(): R|kotlin/Unit| { LAZY_BLOCK }
