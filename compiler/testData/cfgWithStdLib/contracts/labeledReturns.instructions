== myLet ==
inline fun <T, R> T.myLet(block: (T) -> R): R {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }
    return block(this)
}
---------------------
L0:
  1 <START>
    v(block: (T) -> R)
    magic[FAKE_INITIALIZER](block: (T) -> R) -> <v0>
    w(block|<v0>)
  2 mark({ contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) } return block(this) })
    mark({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })
    jmp?(L2)                                                                                      NEXT:[r({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) }) -> <v1>, d({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })]
    d({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })                                       NEXT:[<SINK>]
L2 [after local declaration]:
    r({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) }) -> <v1>                               PREV:[jmp?(L2)]
    mark(contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) })
    call(contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }, contract|<v1>) -> <v2>
    r(block) -> <v3>
    r(this, <this>) -> <v4>
    mark(block(this))
    call(block(this), invoke|<v3>, <v4>) -> <v5>
    ret(*|<v5>) L1
L1:
  1 <END>                                                                                         NEXT:[<SINK>]
error:
    <ERROR>                                                                                       PREV:[]
sink:
    <SINK>                                                                                        PREV:[<ERROR>, <END>, d({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })]
=====================
== anonymous_0 ==
{
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }
---------------------
L3:
  3 <START>
  4 mark(callsInPlace(block, InvocationKind.EXACTLY_ONCE))
    magic[IMPLICIT_RECEIVER](callsInPlace(block, InvocationKind.EXACTLY_ONCE)) -> <v0>
    r(block) -> <v1>
    mark(InvocationKind.EXACTLY_ONCE)
    r(EXACTLY_ONCE) -> <v2>
    mark(callsInPlace(block, InvocationKind.EXACTLY_ONCE))
    call(callsInPlace(block, InvocationKind.EXACTLY_ONCE), callsInPlace|<v0>, <v1>, <v2>) -> <v3>
L4:
  3 <END>                                                                                            NEXT:[<SINK>]
error:
    <ERROR>                                                                                          PREV:[]
sink:
    <SINK>                                                                                           PREV:[<ERROR>, <END>]
=====================
== myRun ==
inline fun myRun(block: () -> Unit) {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }
    block()
}
---------------------
L0:
  1 <START>
    v(block: () -> Unit)
    magic[FAKE_INITIALIZER](block: () -> Unit) -> <v0>
    w(block|<v0>)
  2 mark({ contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) } block() })
    mark({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })
    jmp?(L2)                                                                                      NEXT:[r({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) }) -> <v1>, d({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })]
    d({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })                                       NEXT:[<SINK>]
L2 [after local declaration]:
    r({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) }) -> <v1>                               PREV:[jmp?(L2)]
    mark(contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) })
    call(contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }, contract|<v1>) -> <v2>
    r(block) -> <v3>
    mark(block())
    call(block(), invoke|<v3>) -> <v4>
L1:
  1 <END>                                                                                         NEXT:[<SINK>]
error:
    <ERROR>                                                                                       PREV:[]
sink:
    <SINK>                                                                                        PREV:[<ERROR>, <END>, d({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })]
=====================
== anonymous_1 ==
{
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }
---------------------
L3:
  3 <START>
  4 mark(callsInPlace(block, InvocationKind.EXACTLY_ONCE))
    magic[IMPLICIT_RECEIVER](callsInPlace(block, InvocationKind.EXACTLY_ONCE)) -> <v0>
    r(block) -> <v1>
    mark(InvocationKind.EXACTLY_ONCE)
    r(EXACTLY_ONCE) -> <v2>
    mark(callsInPlace(block, InvocationKind.EXACTLY_ONCE))
    call(callsInPlace(block, InvocationKind.EXACTLY_ONCE), callsInPlace|<v0>, <v1>, <v2>) -> <v3>
L4:
  3 <END>                                                                                            NEXT:[<SINK>]
error:
    <ERROR>                                                                                          PREV:[]
sink:
    <SINK>                                                                                           PREV:[<ERROR>, <END>]
=====================
== unknownRun ==
inline fun unknownRun(block: () -> Unit) = block()
---------------------
L0:
  1 <START>
    v(block: () -> Unit)
    magic[FAKE_INITIALIZER](block: () -> Unit) -> <v0>
    w(block|<v0>)
    r(block) -> <v1>
    mark(block())
    call(block(), invoke|<v1>) -> <v2>
    ret(*|<v2>) L1
L1:
    <END>                                                 NEXT:[<SINK>]
error:
    <ERROR>                                               PREV:[]
sink:
    <SINK>                                                PREV:[<ERROR>, <END>]
=====================
== getBool ==
fun getBool(): Boolean = false
---------------------
L0:
  1 <START>
    r(false) -> <v0>
    ret(*|<v0>) L1
L1:
    <END>               NEXT:[<SINK>]
error:
    <ERROR>             PREV:[]
sink:
    <SINK>              PREV:[<ERROR>, <END>]
=====================
== threeLayersReturn ==
fun threeLayersReturn(x: Int?): Int? {
    // Inner always jumps to outer
    // And middle always calls inner
    // So, in fact, middle never finished normally
    // Hence 'y = 54' in middle is unreachable, and middle doesn't performs definite initialization
    // Hence, outer doesn't performs definite initialization
    val y: Int
    myRun outer@ {
        myRun middle@ {
            x.myLet inner@ {
                if (it == null) {
                    return@outer Unit
                }
                else {
                    return@outer Unit
                }
            }
        }
        // Possible to report unreachable here
        y = 54
    }
    return y.inc()
}
---------------------
L0:
  1 <START>
    v(x: Int?)
    magic[FAKE_INITIALIZER](x: Int?) -> <v0>
    w(x|<v0>)
  2 mark({ // Inner always jumps to outer // And middle always calls inner // So, in fact, middle never finished normally // Hence 'y = 54' in middle is unreachable, and middle doesn't performs definite initialization // Hence, outer doesn't performs definite initialization val y: Int myRun outer@ { myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } } // Possible to report unreachable here y = 54 } return y.inc() })
    v(val y: Int)
    mark(outer@ { myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } } // Possible to report unreachable here y = 54 })
    mark({ myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } } // Possible to report unreachable here y = 54 })
    r({ myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } } // Possible to report unreachable here y = 54 }) -> <v1>
    mark(myRun outer@ { myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } } // Possible to report unreachable here y = 54 })
    call(myRun outer@ { myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } } // Possible to report unreachable here y = 54 }, myRun|<v1>) -> <v2>
L2 [before inlined declaration]:
    inlined({ myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } } // Possible to report unreachable here y = 54 })
L3 [after inlined declaration]:
    mark(y.inc())
    r(y) -> <v3>
    mark(inc())
    call(inc(), inc|<v3>) -> <v4>
    ret(*|<v4>) L1
L1:
  1 <END>                                                                                                                                                                                                                                                                                                                                                                                                                                                                               NEXT:[<SINK>]
error:
    <ERROR>                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PREV:[]
sink:
    <SINK>                                                                                                                                                                                                                                                                                                                                                                                                                                                                              PREV:[<ERROR>, <END>]
=====================
== inlined anonymous_2 ==
{
        myRun middle@ {
            x.myLet inner@ {
                if (it == null) {
                    return@outer Unit
                }
                else {
                    return@outer Unit
                }
            }
        }
        // Possible to report unreachable here
        y = 54
    }
---------------------
L4:
  3 <START>
  4 mark(myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } } // Possible to report unreachable here y = 54)
    mark(middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } })
    mark({ x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } })
    r({ x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } }) -> <v0>
    mark(myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } })
    call(myRun middle@ { x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } }, myRun|<v0>) -> <v1>
L6 [before inlined declaration]:
    inlined({ x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } })                                                             NEXT:[<SINK>]
L7 [after inlined declaration]:
-   r(54) -> <v2>                                                                                                                                                PREV:[]
-   w(y|<v2>)                                                                                                                                                    PREV:[]
L5:
  3 <END>                                                                                                                                                        NEXT:[<SINK>]                                                                                                                                                       PREV:[ret(*|<v3>) L5, ret(*|<v5>) L5]
error:
-   <ERROR>                                                                                                                                                      PREV:[]
sink:
    <SINK>                                                                                                                                                       PREV:[<END>, inlined({ x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } } })]
=====================
== inlined anonymous_3 ==
{
            x.myLet inner@ {
                if (it == null) {
                    return@outer Unit
                }
                else {
                    return@outer Unit
                }
            }
        }
---------------------
L8:
  5 <START>
  6 mark(x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } })
    mark(x.myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } })
    r(x) -> <v0>
    mark(inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } })
    mark({ if (it == null) { return@outer Unit } else { return@outer Unit } })
    r({ if (it == null) { return@outer Unit } else { return@outer Unit } }) -> <v1>
    mark(myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } })
    call(myLet inner@ { if (it == null) { return@outer Unit } else { return@outer Unit } }, myLet|<v0>, <v1>)
L10 [before inlined declaration]:
    inlined({ if (it == null) { return@outer Unit } else { return@outer Unit } })                                NEXT:[<SINK>]
L11 [after inlined declaration]:
-   jmp(error)                                                                                                   NEXT:[<ERROR>]                                                                                                      PREV:[]
-   jmp(error)                                                                                                   NEXT:[<ERROR>]                                                                                                      PREV:[]
L9:
- 5 <END>                                                                                                        NEXT:[<SINK>]                                                                                                       PREV:[]
error:
-   <ERROR>                                                                                                      PREV:[]
sink:
    <SINK>                                                                                                       PREV:[inlined({ if (it == null) { return@outer Unit } else { return@outer Unit } })]
=====================
== inlined anonymous_4 ==
{
                if (it == null) {
                    return@outer Unit
                }
                else {
                    return@outer Unit
                }
            }
---------------------
L12:
  7 <START>
  8 mark(if (it == null) { return@outer Unit } else { return@outer Unit })
    mark(if (it == null) { return@outer Unit } else { return@outer Unit })
    r(it) -> <v0>
    r(null) -> <v1>
    mark(it == null)
    call(it == null, equals|<v0>, <v1>) -> <v2>
    jf(L14|<v2>)                                                                                    NEXT:[mark({ return@outer Unit }), mark({ return@outer Unit })]
  9 mark({ return@outer Unit })
    r(Unit) -> <v3>
    ret(*|<v3>) L5                                                                                  NEXT:[<END>]
- 8 jmp(L15)                                                                                        NEXT:[merge(if (it == null) { return@outer Unit } else { return@outer Unit }|!<v4>, !<v6>) -> <v7>]    PREV:[]
L14 [else branch]:
  9 mark({ return@outer Unit })                                                                     PREV:[jf(L14|<v2>)]
    r(Unit) -> <v5>
    ret(*|<v5>) L5                                                                                  NEXT:[<END>]
L15 ['if' expression result]:
- 8 merge(if (it == null) { return@outer Unit } else { return@outer Unit }|!<v4>, !<v6>) -> <v7>    PREV:[]
- 7 ret(*|<v7>) L13                                                                                 PREV:[]
L13:
-   <END>                                                                                           NEXT:[<SINK>]                                                                                          PREV:[]
error:
-   <ERROR>                                                                                         PREV:[]
sink:
-   <SINK>                                                                                          PREV:[]
=====================
