private class AAA {
  private var _counter$volatile: Long
    field = 5L
    private get(): Long {
      return <this>.#_counter$volatile
    }
    private set(value: Long) {
      return <this>.#_counter$volatile = value
    }

  var lateInitInt$volatile: Int
    get(): Int {
      return <this>.#lateInitInt$volatile
    }
    set(value: Int) {
      return <this>.#lateInitInt$volatile = value
    }

  val intArr: AtomicIntArray
    get(): AtomicIntArray {
      return <this>.#intArr
    }

  init {
    <this>.#lateInitInt$volatile = 10
    assertTrue(actual = compareAndSetField<Int>(/* <this> = AAA<this>::lateInitInt$volatile, */ expectedValue = 10, newValue = 100))
    assertEquals<Int>(expected = 100, actual = atomicGetField<Int>(/* <this> = AAA<this>::lateInitInt$volatile */) as Int)
    <this>.#intArr = AtomicIntArray(size = 10)
    <this>.<get-intArr>().set(index = 0, newValue = 10)
    assertTrue(actual = <this>.<get-intArr>().compareAndSet(index = 0, expectedValue = 10, newValue = 100))
    <this>.<get-intArr>().set(index = 1, newValue = 20)
  }

  init {
    assertEquals<Long>(expected = 5L, actual = atomicGetField<Long>(/* <this> = AAA<this>::_counter$volatile */) as Long)
    assertEquals<Long>(expected = 5L, actual = <this>.<get-counterValue>())
    assertEquals<Long>(expected = 5L, actual = <this>.<get-delegateCounterValue>())
    assertEquals<Int>(expected = 120, actual = <this>.<get-intArr>().get(index = 0) as Int.plus(other = <this>.<get-intArr>().get(index = 1) as Int))
  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  val counterValue: Long
    get(): Long {
      return atomicGetField<Long>(/* <this> = AAA<this>::_counter$volatile */) as Long
    }

  val delegateCounterValue: Long /* by */
    get(): Long {
      return <this>.#_counter$volatile
    }

}

fun box(): String {
  val intClass: AAA = AAA()
  return "OK"
}
