/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.formver.plugin.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/formal-verification/testData/diagnostics")
@TestDataPath("$PROJECT_ROOT")
public class FirLightTreeFormVerPluginDiagnosticsTestGenerated extends AbstractFirLightTreeFormVerPluginDiagnosticsTest {
    @Test
    public void testAllFilesPresentInDiagnostics() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/formal-verification/testData/diagnostics"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("returns_booleans.kt")
    public void testReturns_booleans() throws Exception {
        runTest("plugins/formal-verification/testData/diagnostics/returns_booleans.kt");
    }

    @Test
    @TestMetadata("returns_null.kt")
    public void testReturns_null() throws Exception {
        runTest("plugins/formal-verification/testData/diagnostics/returns_null.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() throws Exception {
        runTest("plugins/formal-verification/testData/diagnostics/simple.kt");
    }

    @Nested
    @TestMetadata("plugins/formal-verification/testData/diagnostics/no_contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class No_contracts {
        @Test
        public void testAllFilesPresentInNo_contracts() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/formal-verification/testData/diagnostics/no_contracts"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("arithmetic.kt")
        public void testArithmetic() throws Exception {
            runTest("plugins/formal-verification/testData/diagnostics/no_contracts/arithmetic.kt");
        }

        @Test
        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("plugins/formal-verification/testData/diagnostics/no_contracts/basic.kt");
        }

        @Test
        @TestMetadata("boolean_logic.kt")
        public void testBoolean_logic() throws Exception {
            runTest("plugins/formal-verification/testData/diagnostics/no_contracts/boolean_logic.kt");
        }

        @Test
        @TestMetadata("function_call.kt")
        public void testFunction_call() throws Exception {
            runTest("plugins/formal-verification/testData/diagnostics/no_contracts/function_call.kt");
        }

        @Test
        @TestMetadata("function_object.kt")
        public void testFunction_object() throws Exception {
            runTest("plugins/formal-verification/testData/diagnostics/no_contracts/function_object.kt");
        }

        @Test
        @TestMetadata("loop.kt")
        public void testLoop() throws Exception {
            runTest("plugins/formal-verification/testData/diagnostics/no_contracts/loop.kt");
        }

        @Test
        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            runTest("plugins/formal-verification/testData/diagnostics/no_contracts/nullable.kt");
        }

        @Test
        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("plugins/formal-verification/testData/diagnostics/no_contracts/when.kt");
        }
    }
}
