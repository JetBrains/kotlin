// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFile}
 */
public  final class IrFile extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrFile, IrFile.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
    IrFileOrBuilder {
  private IrFile() {
    declarationId_ = emptyIntList();
    fqName_ = emptyIntList();
    annotation_ = emptyProtobufList();
    explicitlyExportedToCompiler_ = emptyLongList();
    preprocessedInlineFunctions_ = emptyIntList();
  }
  private int bitField0_;
  public static final int DECLARATION_ID_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.protobuf.Internal.IntList declarationId_;
  /**
   * <code>repeated int32 declaration_id = 1;</code>
   * @return A list containing the declarationId.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getDeclarationIdList() {
    return declarationId_;
  }
  /**
   * <code>repeated int32 declaration_id = 1;</code>
   * @return The count of declarationId.
   */
  @java.lang.Override
  public int getDeclarationIdCount() {
    return declarationId_.size();
  }
  /**
   * <code>repeated int32 declaration_id = 1;</code>
   * @param index The index of the element to return.
   * @return The declarationId at the given index.
   */
  @java.lang.Override
  public int getDeclarationId(int index) {
    return declarationId_.getInt(index);
  }
  private int declarationIdMemoizedSerializedSize = -1;
  private void ensureDeclarationIdIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = declarationId_;
    if (!tmp.isModifiable()) {
      declarationId_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int32 declaration_id = 1;</code>
   * @param index The index to set the value at.
   * @param value The declarationId to set.
   */
  private void setDeclarationId(
      int index, int value) {
    ensureDeclarationIdIsMutable();
    declarationId_.setInt(index, value);
  }
  /**
   * <code>repeated int32 declaration_id = 1;</code>
   * @param value The declarationId to add.
   */
  private void addDeclarationId(int value) {
    ensureDeclarationIdIsMutable();
    declarationId_.addInt(value);
  }
  /**
   * <code>repeated int32 declaration_id = 1;</code>
   * @param values The declarationId to add.
   */
  private void addAllDeclarationId(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureDeclarationIdIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, declarationId_);
  }
  /**
   * <code>repeated int32 declaration_id = 1;</code>
   */
  private void clearDeclarationId() {
    declarationId_ = emptyIntList();
  }

  public static final int FILE_ENTRY_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry fileEntry_;
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  @java.lang.Override
  public boolean hasFileEntry() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry() {
    return fileEntry_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance() : fileEntry_;
  }
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
    value.getClass();  // minimal bytecode null check
    fileEntry_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
    value.getClass();  // minimal bytecode null check
    if (fileEntry_ != null &&
        fileEntry_ != org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance()) {
      fileEntry_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.newBuilder(fileEntry_).mergeFrom(value).buildPartial();
    } else {
      fileEntry_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  private void clearFileEntry() {  fileEntry_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int FILE_ENTRY_ID_FIELD_NUMBER = 7;
  private int fileEntryId_;
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>int32 file_entry_id = 7;</code>
   * @return Whether the fileEntryId field is set.
   */
  @java.lang.Override
  public boolean hasFileEntryId() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>int32 file_entry_id = 7;</code>
   * @return The fileEntryId.
   */
  @java.lang.Override
  public int getFileEntryId() {
    return fileEntryId_;
  }
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>int32 file_entry_id = 7;</code>
   * @param value The fileEntryId to set.
   */
  private void setFileEntryId(int value) {
    bitField0_ |= 0x00000002;
    fileEntryId_ = value;
  }
  /**
   * <pre>
   * Required: either `file_entry` or `file_entry_id` is present.
   * </pre>
   *
   * <code>int32 file_entry_id = 7;</code>
   */
  private void clearFileEntryId() {
    bitField0_ = (bitField0_ & ~0x00000002);
    fileEntryId_ = 0;
  }

  public static final int FQ_NAME_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.protobuf.Internal.IntList fqName_;
  /**
   * <code>repeated int32 fq_name = 3;</code>
   * @return A list containing the fqName.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getFqNameList() {
    return fqName_;
  }
  /**
   * <code>repeated int32 fq_name = 3;</code>
   * @return The count of fqName.
   */
  @java.lang.Override
  public int getFqNameCount() {
    return fqName_.size();
  }
  /**
   * <code>repeated int32 fq_name = 3;</code>
   * @param index The index of the element to return.
   * @return The fqName at the given index.
   */
  @java.lang.Override
  public int getFqName(int index) {
    return fqName_.getInt(index);
  }
  private int fqNameMemoizedSerializedSize = -1;
  private void ensureFqNameIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = fqName_;
    if (!tmp.isModifiable()) {
      fqName_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int32 fq_name = 3;</code>
   * @param index The index to set the value at.
   * @param value The fqName to set.
   */
  private void setFqName(
      int index, int value) {
    ensureFqNameIsMutable();
    fqName_.setInt(index, value);
  }
  /**
   * <code>repeated int32 fq_name = 3;</code>
   * @param value The fqName to add.
   */
  private void addFqName(int value) {
    ensureFqNameIsMutable();
    fqName_.addInt(value);
  }
  /**
   * <code>repeated int32 fq_name = 3;</code>
   * @param values The fqName to add.
   */
  private void addAllFqName(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureFqNameIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, fqName_);
  }
  /**
   * <code>repeated int32 fq_name = 3;</code>
   */
  private void clearFqName() {
    fqName_ = emptyIntList();
  }

  public static final int ANNOTATION_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> annotation_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  @java.lang.Override
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> getAnnotationList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder> 
      getAnnotationOrBuilderList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  @java.lang.Override
  public int getAnnotationCount() {
    return annotation_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index) {
    return annotation_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder getAnnotationOrBuilder(
      int index) {
    return annotation_.get(index);
  }
  private void ensureAnnotationIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> tmp = annotation_;
    if (!tmp.isModifiable()) {
      annotation_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setAnnotation(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.set(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addAnnotation(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.add(value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addAnnotation(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.add(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  private void addAllAnnotation(
      java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> values) {
    ensureAnnotationIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, annotation_);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  private void clearAnnotation() {
    annotation_ = emptyProtobufList();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  private void removeAnnotation(int index) {
    ensureAnnotationIsMutable();
    annotation_.remove(index);
  }

  public static final int EXPLICITLY_EXPORTED_TO_COMPILER_FIELD_NUMBER = 5;
  private org.jetbrains.kotlin.protobuf.Internal.LongList explicitlyExportedToCompiler_;
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
   * @return A list containing the explicitlyExportedToCompiler.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getExplicitlyExportedToCompilerList() {
    return explicitlyExportedToCompiler_;
  }
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
   * @return The count of explicitlyExportedToCompiler.
   */
  @java.lang.Override
  public int getExplicitlyExportedToCompilerCount() {
    return explicitlyExportedToCompiler_.size();
  }
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
   * @param index The index of the element to return.
   * @return The explicitlyExportedToCompiler at the given index.
   */
  @java.lang.Override
  public long getExplicitlyExportedToCompiler(int index) {
    return explicitlyExportedToCompiler_.getLong(index);
  }
  private int explicitlyExportedToCompilerMemoizedSerializedSize = -1;
  private void ensureExplicitlyExportedToCompilerIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.LongList tmp = explicitlyExportedToCompiler_;
    if (!tmp.isModifiable()) {
      explicitlyExportedToCompiler_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
   * @param index The index to set the value at.
   * @param value The explicitlyExportedToCompiler to set.
   */
  private void setExplicitlyExportedToCompiler(
      int index, long value) {
    ensureExplicitlyExportedToCompilerIsMutable();
    explicitlyExportedToCompiler_.setLong(index, value);
  }
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
   * @param value The explicitlyExportedToCompiler to add.
   */
  private void addExplicitlyExportedToCompiler(long value) {
    ensureExplicitlyExportedToCompilerIsMutable();
    explicitlyExportedToCompiler_.addLong(value);
  }
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
   * @param values The explicitlyExportedToCompiler to add.
   */
  private void addAllExplicitlyExportedToCompiler(
      java.lang.Iterable<? extends java.lang.Long> values) {
    ensureExplicitlyExportedToCompilerIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, explicitlyExportedToCompiler_);
  }
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
   */
  private void clearExplicitlyExportedToCompiler() {
    explicitlyExportedToCompiler_ = emptyLongList();
  }

  public static final int PREPROCESSED_INLINE_FUNCTIONS_FIELD_NUMBER = 8;
  private org.jetbrains.kotlin.protobuf.Internal.IntList preprocessedInlineFunctions_;
  /**
   * <code>repeated int32 preprocessed_inline_functions = 8;</code>
   * @return A list containing the preprocessedInlineFunctions.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getPreprocessedInlineFunctionsList() {
    return preprocessedInlineFunctions_;
  }
  /**
   * <code>repeated int32 preprocessed_inline_functions = 8;</code>
   * @return The count of preprocessedInlineFunctions.
   */
  @java.lang.Override
  public int getPreprocessedInlineFunctionsCount() {
    return preprocessedInlineFunctions_.size();
  }
  /**
   * <code>repeated int32 preprocessed_inline_functions = 8;</code>
   * @param index The index of the element to return.
   * @return The preprocessedInlineFunctions at the given index.
   */
  @java.lang.Override
  public int getPreprocessedInlineFunctions(int index) {
    return preprocessedInlineFunctions_.getInt(index);
  }
  private int preprocessedInlineFunctionsMemoizedSerializedSize = -1;
  private void ensurePreprocessedInlineFunctionsIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = preprocessedInlineFunctions_;
    if (!tmp.isModifiable()) {
      preprocessedInlineFunctions_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int32 preprocessed_inline_functions = 8;</code>
   * @param index The index to set the value at.
   * @param value The preprocessedInlineFunctions to set.
   */
  private void setPreprocessedInlineFunctions(
      int index, int value) {
    ensurePreprocessedInlineFunctionsIsMutable();
    preprocessedInlineFunctions_.setInt(index, value);
  }
  /**
   * <code>repeated int32 preprocessed_inline_functions = 8;</code>
   * @param value The preprocessedInlineFunctions to add.
   */
  private void addPreprocessedInlineFunctions(int value) {
    ensurePreprocessedInlineFunctionsIsMutable();
    preprocessedInlineFunctions_.addInt(value);
  }
  /**
   * <code>repeated int32 preprocessed_inline_functions = 8;</code>
   * @param values The preprocessedInlineFunctions to add.
   */
  private void addAllPreprocessedInlineFunctions(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensurePreprocessedInlineFunctionsIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, preprocessedInlineFunctions_);
  }
  /**
   * <code>repeated int32 preprocessed_inline_functions = 8;</code>
   */
  private void clearPreprocessedInlineFunctions() {
    preprocessedInlineFunctions_ = emptyIntList();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrFile prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFile}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFile, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrFileOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrFile.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>repeated int32 declaration_id = 1;</code>
     * @return A list containing the declarationId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getDeclarationIdList() {
      return java.util.Collections.unmodifiableList(
          instance.getDeclarationIdList());
    }
    /**
     * <code>repeated int32 declaration_id = 1;</code>
     * @return The count of declarationId.
     */
    @java.lang.Override
    public int getDeclarationIdCount() {
      return instance.getDeclarationIdCount();
    }
    /**
     * <code>repeated int32 declaration_id = 1;</code>
     * @param index The index of the element to return.
     * @return The declarationId at the given index.
     */
    @java.lang.Override
    public int getDeclarationId(int index) {
      return instance.getDeclarationId(index);
    }
    /**
     * <code>repeated int32 declaration_id = 1;</code>
     * @param value The declarationId to set.
     * @return This builder for chaining.
     */
    public Builder setDeclarationId(
        int index, int value) {
      copyOnWrite();
      instance.setDeclarationId(index, value);
      return this;
    }
    /**
     * <code>repeated int32 declaration_id = 1;</code>
     * @param value The declarationId to add.
     * @return This builder for chaining.
     */
    public Builder addDeclarationId(int value) {
      copyOnWrite();
      instance.addDeclarationId(value);
      return this;
    }
    /**
     * <code>repeated int32 declaration_id = 1;</code>
     * @param values The declarationId to add.
     * @return This builder for chaining.
     */
    public Builder addAllDeclarationId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllDeclarationId(values);
      return this;
    }
    /**
     * <code>repeated int32 declaration_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearDeclarationId() {
      copyOnWrite();
      instance.clearDeclarationId();
      return this;
    }

    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    @java.lang.Override
    public boolean hasFileEntry() {
      return instance.hasFileEntry();
    }
    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry() {
      return instance.getFileEntry();
    }
    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder setFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
      copyOnWrite();
      instance.setFileEntry(value);
      return this;
      }
    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder setFileEntry(
        org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder builderForValue) {
      copyOnWrite();
      instance.setFileEntry(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder mergeFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
      copyOnWrite();
      instance.mergeFileEntry(value);
      return this;
    }
    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder clearFileEntry() {  copyOnWrite();
      instance.clearFileEntry();
      return this;
    }

    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>int32 file_entry_id = 7;</code>
     * @return Whether the fileEntryId field is set.
     */
    @java.lang.Override
    public boolean hasFileEntryId() {
      return instance.hasFileEntryId();
    }
    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>int32 file_entry_id = 7;</code>
     * @return The fileEntryId.
     */
    @java.lang.Override
    public int getFileEntryId() {
      return instance.getFileEntryId();
    }
    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>int32 file_entry_id = 7;</code>
     * @param value The fileEntryId to set.
     * @return This builder for chaining.
     */
    public Builder setFileEntryId(int value) {
      copyOnWrite();
      instance.setFileEntryId(value);
      return this;
    }
    /**
     * <pre>
     * Required: either `file_entry` or `file_entry_id` is present.
     * </pre>
     *
     * <code>int32 file_entry_id = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearFileEntryId() {
      copyOnWrite();
      instance.clearFileEntryId();
      return this;
    }

    /**
     * <code>repeated int32 fq_name = 3;</code>
     * @return A list containing the fqName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getFqNameList() {
      return java.util.Collections.unmodifiableList(
          instance.getFqNameList());
    }
    /**
     * <code>repeated int32 fq_name = 3;</code>
     * @return The count of fqName.
     */
    @java.lang.Override
    public int getFqNameCount() {
      return instance.getFqNameCount();
    }
    /**
     * <code>repeated int32 fq_name = 3;</code>
     * @param index The index of the element to return.
     * @return The fqName at the given index.
     */
    @java.lang.Override
    public int getFqName(int index) {
      return instance.getFqName(index);
    }
    /**
     * <code>repeated int32 fq_name = 3;</code>
     * @param value The fqName to set.
     * @return This builder for chaining.
     */
    public Builder setFqName(
        int index, int value) {
      copyOnWrite();
      instance.setFqName(index, value);
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3;</code>
     * @param value The fqName to add.
     * @return This builder for chaining.
     */
    public Builder addFqName(int value) {
      copyOnWrite();
      instance.addFqName(value);
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3;</code>
     * @param values The fqName to add.
     * @return This builder for chaining.
     */
    public Builder addAllFqName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllFqName(values);
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearFqName() {
      copyOnWrite();
      instance.clearFqName();
      return this;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> getAnnotationList() {
      return java.util.Collections.unmodifiableList(
          instance.getAnnotationList());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return instance.getAnnotationCount();
    }/**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index) {
      return instance.getAnnotation(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder setAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.setAnnotation(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder setAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.setAnnotation(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAnnotation(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.addAnnotation(value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.addAnnotation(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAnnotation(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.addAnnotation(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.addAnnotation(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> values) {
      copyOnWrite();
      instance.addAllAnnotation(values);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder clearAnnotation() {
      copyOnWrite();
      instance.clearAnnotation();
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder removeAnnotation(int index) {
      copyOnWrite();
      instance.removeAnnotation(index);
      return this;
    }

    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
     * @return A list containing the explicitlyExportedToCompiler.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getExplicitlyExportedToCompilerList() {
      return java.util.Collections.unmodifiableList(
          instance.getExplicitlyExportedToCompilerList());
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
     * @return The count of explicitlyExportedToCompiler.
     */
    @java.lang.Override
    public int getExplicitlyExportedToCompilerCount() {
      return instance.getExplicitlyExportedToCompilerCount();
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
     * @param index The index of the element to return.
     * @return The explicitlyExportedToCompiler at the given index.
     */
    @java.lang.Override
    public long getExplicitlyExportedToCompiler(int index) {
      return instance.getExplicitlyExportedToCompiler(index);
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
     * @param value The explicitlyExportedToCompiler to set.
     * @return This builder for chaining.
     */
    public Builder setExplicitlyExportedToCompiler(
        int index, long value) {
      copyOnWrite();
      instance.setExplicitlyExportedToCompiler(index, value);
      return this;
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
     * @param value The explicitlyExportedToCompiler to add.
     * @return This builder for chaining.
     */
    public Builder addExplicitlyExportedToCompiler(long value) {
      copyOnWrite();
      instance.addExplicitlyExportedToCompiler(value);
      return this;
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
     * @param values The explicitlyExportedToCompiler to add.
     * @return This builder for chaining.
     */
    public Builder addAllExplicitlyExportedToCompiler(
        java.lang.Iterable<? extends java.lang.Long> values) {
      copyOnWrite();
      instance.addAllExplicitlyExportedToCompiler(values);
      return this;
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearExplicitlyExportedToCompiler() {
      copyOnWrite();
      instance.clearExplicitlyExportedToCompiler();
      return this;
    }

    /**
     * <code>repeated int32 preprocessed_inline_functions = 8;</code>
     * @return A list containing the preprocessedInlineFunctions.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPreprocessedInlineFunctionsList() {
      return java.util.Collections.unmodifiableList(
          instance.getPreprocessedInlineFunctionsList());
    }
    /**
     * <code>repeated int32 preprocessed_inline_functions = 8;</code>
     * @return The count of preprocessedInlineFunctions.
     */
    @java.lang.Override
    public int getPreprocessedInlineFunctionsCount() {
      return instance.getPreprocessedInlineFunctionsCount();
    }
    /**
     * <code>repeated int32 preprocessed_inline_functions = 8;</code>
     * @param index The index of the element to return.
     * @return The preprocessedInlineFunctions at the given index.
     */
    @java.lang.Override
    public int getPreprocessedInlineFunctions(int index) {
      return instance.getPreprocessedInlineFunctions(index);
    }
    /**
     * <code>repeated int32 preprocessed_inline_functions = 8;</code>
     * @param value The preprocessedInlineFunctions to set.
     * @return This builder for chaining.
     */
    public Builder setPreprocessedInlineFunctions(
        int index, int value) {
      copyOnWrite();
      instance.setPreprocessedInlineFunctions(index, value);
      return this;
    }
    /**
     * <code>repeated int32 preprocessed_inline_functions = 8;</code>
     * @param value The preprocessedInlineFunctions to add.
     * @return This builder for chaining.
     */
    public Builder addPreprocessedInlineFunctions(int value) {
      copyOnWrite();
      instance.addPreprocessedInlineFunctions(value);
      return this;
    }
    /**
     * <code>repeated int32 preprocessed_inline_functions = 8;</code>
     * @param values The preprocessedInlineFunctions to add.
     * @return This builder for chaining.
     */
    public Builder addAllPreprocessedInlineFunctions(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllPreprocessedInlineFunctions(values);
      return this;
    }
    /**
     * <code>repeated int32 preprocessed_inline_functions = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearPreprocessedInlineFunctions() {
      copyOnWrite();
      instance.clearPreprocessedInlineFunctions();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrFile();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "declarationId_",
            "fileEntry_",
            "fqName_",
            "annotation_",
            org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.class,
            "explicitlyExportedToCompiler_",
            "fileEntryId_",
            "preprocessedInlineFunctions_",
          };
          java.lang.String info =
              "\u0004\u0007\u0000\u0001\u0001\b\u0007\u0000\u0005\u0002\u0001\'\u0002\u1409\u0000" +
              "\u0003\'\u0004\u041b\u0005%\u0007\u1004\u0001\b\'";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrFile> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrFile.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrFile>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrFile DEFAULT_INSTANCE;
  static {
    IrFile defaultInstance = new IrFile();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrFile.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrFile> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrFile> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
