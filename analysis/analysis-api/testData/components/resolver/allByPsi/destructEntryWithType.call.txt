KtFile: 'destructEntryWithType.kts'
  null

KtPackageDirective(0,12): 'package util'
  null

KtNameReferenceExpression(8,12): 'util'
  null

KtImportList(12,12): ''
  null

KtScript(12,250): ''
  null

KtBlockExpression(12,250): ''
  null

KtClass(14,52): 'annotation class Anno(val str: String)'
  null

KtDeclarationModifierList(14,24): 'annotation'
  null

KtPrimaryConstructor(35,52): '(val str: String)'
  null

KtParameterList(35,52): '(val str: String)'
  null

KtParameter(36,51): 'val str: String'
  null

KtTypeReference(45,51): 'String'
  null

KtUserType(45,51): 'String'
  null

KtNameReferenceExpression(45,51): 'String'
  null

KtProperty(53,75): 'const val constant = 0'
  null

KtDeclarationModifierList(53,58): 'const'
  null

KtConstantExpression(74,75): '0'
  null

KtClass(76,129): 'data class MyPair(val a: List<List<Int>>, val b: Int)'
  null

KtDeclarationModifierList(76,80): 'data'
  null

KtPrimaryConstructor(93,129): '(val a: List<List<Int>>, val b: Int)'
  null

KtParameterList(93,129): '(val a: List<List<Int>>, val b: Int)'
  null

KtParameter(94,116): 'val a: List<List<Int>>'
  null

KtTypeReference(101,116): 'List<List<Int>>'
  null

KtUserType(101,116): 'List<List<Int>>'
  null

KtNameReferenceExpression(101,105): 'List'
  null

KtTypeArgumentList(105,116): '<List<Int>>'
  null

KtTypeProjection(106,115): 'List<Int>'
  null

KtTypeReference(106,115): 'List<Int>'
  null

KtUserType(106,115): 'List<Int>'
  null

KtNameReferenceExpression(106,110): 'List'
  null

KtTypeArgumentList(110,115): '<Int>'
  null

KtTypeProjection(111,114): 'Int'
  null

KtTypeReference(111,114): 'Int'
  null

KtUserType(111,114): 'Int'
  null

KtNameReferenceExpression(111,114): 'Int'
  null

KtParameter(118,128): 'val b: Int'
  null

KtTypeReference(125,128): 'Int'
  null

KtUserType(125,128): 'Int'
  null

KtNameReferenceExpression(125,128): 'Int'
  null

KtProperty(130,146): 'val pair: MyPair'
  null

KtTypeReference(140,146): 'MyPair'
  null

KtUserType(140,146): 'MyPair'
  null

KtNameReferenceExpression(140,146): 'MyPair'
  null

KtDestructuringDeclaration(148,249): 'val (left: @Anno(0 + constant) List<@Anno(1 + constant) List<@Anno(2 + constant) Int>>, right) = pair'
  null

KtDestructuringDeclarationEntry(153,234): 'left: @Anno(0 + constant) List<@Anno(1 + constant) List<@Anno(2 + constant) Int>>'
  null

KtTypeReference(159,234): '@Anno(0 + constant) List<@Anno(1 + constant) List<@Anno(2 + constant) Int>>'
  null

KtDeclarationModifierList(159,178): '@Anno(0 + constant)'
  null

KtAnnotationEntry(159,178): '@Anno(0 + constant)'
  KaErrorCallInfo:
    candidateCalls = [
      KaAnnotationCall:
        argumentMapping = {
          0 + constant -> (KaVariableSignature:
            name = str
            receiverType = null
            returnType = kotlin.String
            symbol = str: kotlin.String
            contextParameters = []
            callableId = null)
        }
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = util.Anno
            symbol = <constructor>(str: kotlin.String): util.Anno
            valueParameters = [
              KaVariableSignature:
                name = str
                receiverType = null
                returnType = kotlin.String
                symbol = str: kotlin.String
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = null
        typeArgumentsMapping = {}
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtConstructorCalleeExpression(160,164): 'Anno'
  KaErrorCallInfo:
    candidateCalls = [
      KaAnnotationCall:
        argumentMapping = {
          0 + constant -> (KaVariableSignature:
            name = str
            receiverType = null
            returnType = kotlin.String
            symbol = str: kotlin.String
            contextParameters = []
            callableId = null)
        }
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = util.Anno
            symbol = <constructor>(str: kotlin.String): util.Anno
            valueParameters = [
              KaVariableSignature:
                name = str
                receiverType = null
                returnType = kotlin.String
                symbol = str: kotlin.String
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = null
        typeArgumentsMapping = {}
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtTypeReference(160,164): 'Anno'
  null

KtUserType(160,164): 'Anno'
  null

KtNameReferenceExpression(160,164): 'Anno'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtValueArgumentList(164,178): '(0 + constant)'
  null

KtValueArgument(165,177): '0 + constant'
  null

KtBinaryExpression(165,177): '0 + constant'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}

KtConstantExpression(165,166): '0'
  null

KtOperationReferenceExpression(167,168): '+'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}

KtNameReferenceExpression(169,177): 'constant'
  KaSuccessCallInfo:
    call = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = constant
          receiverType = null
          returnType = kotlin.Int
          symbol = val constant: kotlin.Int
          contextParameters = []
          callableId = util/constant
      simpleAccess = Read
      typeArgumentsMapping = {}

KtUserType(179,234): 'List<@Anno(1 + constant) List<@Anno(2 + constant) Int>>'
  null

KtNameReferenceExpression(179,183): 'List'
  null

KtTypeArgumentList(183,234): '<@Anno(1 + constant) List<@Anno(2 + constant) Int>>'
  null

KtTypeProjection(184,233): '@Anno(1 + constant) List<@Anno(2 + constant) Int>'
  null

KtTypeReference(184,233): '@Anno(1 + constant) List<@Anno(2 + constant) Int>'
  null

KtDeclarationModifierList(184,203): '@Anno(1 + constant)'
  null

KtAnnotationEntry(184,203): '@Anno(1 + constant)'
  KaErrorCallInfo:
    candidateCalls = [
      KaAnnotationCall:
        argumentMapping = {
          1 + constant -> (KaVariableSignature:
            name = str
            receiverType = null
            returnType = kotlin.String
            symbol = str: kotlin.String
            contextParameters = []
            callableId = null)
        }
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = util.Anno
            symbol = <constructor>(str: kotlin.String): util.Anno
            valueParameters = [
              KaVariableSignature:
                name = str
                receiverType = null
                returnType = kotlin.String
                symbol = str: kotlin.String
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = null
        typeArgumentsMapping = {}
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtConstructorCalleeExpression(185,189): 'Anno'
  KaErrorCallInfo:
    candidateCalls = [
      KaAnnotationCall:
        argumentMapping = {
          1 + constant -> (KaVariableSignature:
            name = str
            receiverType = null
            returnType = kotlin.String
            symbol = str: kotlin.String
            contextParameters = []
            callableId = null)
        }
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = util.Anno
            symbol = <constructor>(str: kotlin.String): util.Anno
            valueParameters = [
              KaVariableSignature:
                name = str
                receiverType = null
                returnType = kotlin.String
                symbol = str: kotlin.String
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = null
        typeArgumentsMapping = {}
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtTypeReference(185,189): 'Anno'
  null

KtUserType(185,189): 'Anno'
  null

KtNameReferenceExpression(185,189): 'Anno'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtValueArgumentList(189,203): '(1 + constant)'
  null

KtValueArgument(190,202): '1 + constant'
  null

KtBinaryExpression(190,202): '1 + constant'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}

KtConstantExpression(190,191): '1'
  null

KtOperationReferenceExpression(192,193): '+'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 1
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}

KtNameReferenceExpression(194,202): 'constant'
  KaSuccessCallInfo:
    call = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = constant
          receiverType = null
          returnType = kotlin.Int
          symbol = val constant: kotlin.Int
          contextParameters = []
          callableId = util/constant
      simpleAccess = Read
      typeArgumentsMapping = {}

KtUserType(204,233): 'List<@Anno(2 + constant) Int>'
  null

KtNameReferenceExpression(204,208): 'List'
  null

KtTypeArgumentList(208,233): '<@Anno(2 + constant) Int>'
  null

KtTypeProjection(209,232): '@Anno(2 + constant) Int'
  null

KtTypeReference(209,232): '@Anno(2 + constant) Int'
  null

KtDeclarationModifierList(209,228): '@Anno(2 + constant)'
  null

KtAnnotationEntry(209,228): '@Anno(2 + constant)'
  KaErrorCallInfo:
    candidateCalls = [
      KaAnnotationCall:
        argumentMapping = {
          2 + constant -> (KaVariableSignature:
            name = str
            receiverType = null
            returnType = kotlin.String
            symbol = str: kotlin.String
            contextParameters = []
            callableId = null)
        }
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = util.Anno
            symbol = <constructor>(str: kotlin.String): util.Anno
            valueParameters = [
              KaVariableSignature:
                name = str
                receiverType = null
                returnType = kotlin.String
                symbol = str: kotlin.String
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = null
        typeArgumentsMapping = {}
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtConstructorCalleeExpression(210,214): 'Anno'
  KaErrorCallInfo:
    candidateCalls = [
      KaAnnotationCall:
        argumentMapping = {
          2 + constant -> (KaVariableSignature:
            name = str
            receiverType = null
            returnType = kotlin.String
            symbol = str: kotlin.String
            contextParameters = []
            callableId = null)
        }
        partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          contextArguments = []
          dispatchReceiver = null
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = util.Anno
            symbol = <constructor>(str: kotlin.String): util.Anno
            valueParameters = [
              KaVariableSignature:
                name = str
                receiverType = null
                returnType = kotlin.String
                symbol = str: kotlin.String
                contextParameters = []
                callableId = null
            ]
            contextParameters = []
            callableId = null
        typeArgumentsMapping = {}
    ]
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtTypeReference(210,214): 'Anno'
  null

KtUserType(210,214): 'Anno'
  null

KtNameReferenceExpression(210,214): 'Anno'
  KaErrorCallInfo:
    candidateCalls = []
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Int', but 'String' was expected.>

KtValueArgumentList(214,228): '(2 + constant)'
  null

KtValueArgument(215,227): '2 + constant'
  null

KtBinaryExpression(215,227): '2 + constant'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}

KtConstantExpression(215,216): '2'
  null

KtOperationReferenceExpression(217,218): '+'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        constant -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 2
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/Int.plus(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = kotlin/Int.plus
      typeArgumentsMapping = {}

KtNameReferenceExpression(219,227): 'constant'
  KaSuccessCallInfo:
    call = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = constant
          receiverType = null
          returnType = kotlin.Int
          symbol = val constant: kotlin.Int
          contextParameters = []
          callableId = util/constant
      simpleAccess = Read
      typeArgumentsMapping = {}

KtUserType(229,232): 'Int'
  null

KtNameReferenceExpression(229,232): 'Int'
  null

KtDestructuringDeclarationEntry(236,241): 'right'
  null

KtNameReferenceExpression(245,249): 'pair'
  KaSuccessCallInfo:
    call = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = pair
          receiverType = null
          returnType = util.MyPair
          symbol = val pair: util.MyPair
          contextParameters = []
          callableId = util/pair
      simpleAccess = Read
      typeArgumentsMapping = {}
