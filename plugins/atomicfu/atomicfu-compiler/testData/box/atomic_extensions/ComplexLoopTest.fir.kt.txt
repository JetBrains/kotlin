class LoopTest {
  private var a$volatile: Int
    field = 10
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  private var b$volatile: Int
    field = 11
    private get(): Int {
      return <this>.#b$volatile
    }
    private set(value: Int) {
      return <this>.#b$volatile = value
    }

  private var c$volatile: Int
    field = 12
    private get(): Int {
      return <this>.#c$volatile
    }
    private set(value: Int) {
      return <this>.#c$volatile = value
    }

  private var r$volatile: Any?
    field = "aaa"
    private get(): Any? {
      return <this>.#r$volatile
    }
    private set(value: Any?) {
      return <this>.#r$volatile = value
    }

  private val intArr: AtomicIntArray
    field = AtomicIntArray(size = 10)
    private get(): AtomicIntArray {
      return <this>.#intArr
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun extensionEmbeddedLoops$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur1: Int) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur1, newValue = to) /*~> Unit */
      <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur2: Int) {
        return cur2
      }
)
    }
)
  }

  private inline fun extensionEmbeddedLoops$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur1: Int) {
      compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur1, newValue = to) /*~> Unit */
      <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur2: Int) {
        return cur2
      }
)
    }
)
  }

  private inline fun extesntionEmbeddedRefUpdate$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, to: String): String {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(value: String) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = value, newValue = to) /*~> Unit */
      return <this>.updateAndGet$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: String): String {
        return cur + "AAA"
      }
)
    }
)
  }

  private inline fun extesntionEmbeddedRefUpdate$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, to: String): String {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(value: String) {
      compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = value, newValue = to) /*~> Unit */
      return <this>.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: String): String {
        return cur + "AAA"
      }
)
    }
)
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_0: T = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_0)
    }
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_1: Int = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_1)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_2: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_2)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_3: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_3)
    }
  }

  private inline fun updateAndGet$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_4: T = handler$atomicfu.get(index = index$atomicfu)
      val tmp_5: R = action$atomicfu.invoke(p1 = tmp_4)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_4, newValue = tmp_5) -> return tmp_5
      }
    }
  }

  private inline fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_6: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_7: R = action$atomicfu.invoke(p1 = tmp_6)
      when {
        compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_6, newValue = tmp_7) -> return tmp_7
      }
    }
  }

  private inline fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Int>): Int {
    while (true) { // BLOCK
      val tmp_8: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_9: R = action$atomicfu.invoke(p1 = tmp_8)
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_8, newValue = tmp_9) -> return tmp_9
      }
    }
  }

  private inline fun embeddedLoops(to: Int): Int {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, action$atomicfu = local fun <anonymous>(aValue: Int) {
      <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <b$volatile-getter>(): KMutableProperty0<Int> {
        return LoopTest<this>::b$volatile
      }
, action$atomicfu = local fun <anonymous>(bValue: Int) {
        when {
          compareAndSetField<Int>(/* <this> = LoopTest<this>::b$volatile, */ expectedValue = bValue, newValue = to) -> return aValue.plus(other = bValue)
        }
      }
)
    }
)
  }

  private inline fun embeddedUpdate(to: Int): Int {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, action$atomicfu = local fun <anonymous>(aValue: Int) {
      compareAndSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ expectedValue = aValue, newValue = to) /*~> Unit */
      return <this>.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
        return LoopTest<this>::a$volatile
      }
, action$atomicfu = local fun <anonymous>(cur: Int): Int {
        return cur.plus(other = 100)
      }
)
    }
)
  }

  fun test() {
    assertEquals<Int>(expected = 21, actual = <this>.embeddedLoops(to = 12))
    assertEquals<Int>(expected = 77, actual = <this>.extensionEmbeddedLoops$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <c$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::c$volatile
    }
, to = 77))
    assertEquals<Int>(expected = 66, actual = <this>.extensionEmbeddedLoops$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 0, to = 66))
    assertEquals<Int>(expected = 166, actual = <this>.embeddedUpdate(to = 66))
    assertEquals<String>(expected = "bbbAAA", actual = <this>.extesntionEmbeddedRefUpdate$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <r$volatile-getter>(): KMutableProperty0<Any?> {
      return LoopTest<this>::r$volatile
    }
, to = "bbb"))
  }

}

fun box(): String {
  val testClass: LoopTest = LoopTest()
  testClass.test()
  return "OK"
}
