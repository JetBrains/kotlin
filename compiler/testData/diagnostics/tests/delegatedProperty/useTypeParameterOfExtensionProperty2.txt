package

public val </*0*/ T> kotlin.collections.List<T>.leakingT: T
public val </*0*/ T> kotlin.collections.List<T>.second: T
public fun </*0*/ T, /*1*/ V> logged(/*0*/ getter: (T) -> V): kotlin.properties.ReadOnlyProperty<T, V>
public fun main(): kotlin.Unit

public final class Delegate</*0*/ T> {
    public constructor Delegate</*0*/ T>(/*0*/ fn: (kotlin.collections.List<T>) -> T)
    private final var cache: T?
    private final val fn: (kotlin.collections.List<T>) -> T
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun getValue(/*0*/ thisRef: kotlin.collections.List<T>, /*1*/ kProperty: kotlin.reflect.KProperty<*>): T
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
