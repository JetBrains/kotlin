// KJS_WITH_FULL_RUNTIME
// Auto-generated by GenerateInRangeExpressionTestData. Do not edit!
// WITH_RUNTIME



val range0 = 1 .. 3
val range1 = 3 .. 1

val element0 = (-1).toByte()
val element1 = (-1).toShort()
val element2 = (-1)
val element3 = (-1).toLong()
val element4 = 0.toByte()
val element5 = 0.toShort()
val element6 = 0
val element7 = 0.toLong()
val element8 = 1.toByte()
val element9 = 1.toShort()
val element10 = 1
val element11 = 1.toLong()
val element12 = 2.toByte()
val element13 = 2.toShort()
val element14 = 2
val element15 = 2.toLong()
val element16 = 3.toByte()
val element17 = 3.toShort()
val element18 = 3
val element19 = 3.toLong()
val element20 = 4.toByte()
val element21 = 4.toShort()
val element22 = 4
val element23 = 4.toLong()

fun box(): String {
    testR0xE0()
    testR0xE1()
    testR0xE2()
    testR0xE3()
    testR0xE4()
    testR0xE5()
    testR0xE6()
    testR0xE7()
    testR0xE8()
    testR0xE9()
    testR0xE10()
    testR0xE11()
    testR0xE12()
    testR0xE13()
    testR0xE14()
    testR0xE15()
    testR0xE16()
    testR0xE17()
    testR0xE18()
    testR0xE19()
    testR0xE20()
    testR0xE21()
    testR0xE22()
    testR0xE23()
    testR1xE0()
    testR1xE1()
    testR1xE2()
    testR1xE3()
    testR1xE4()
    testR1xE5()
    testR1xE6()
    testR1xE7()
    testR1xE8()
    testR1xE9()
    testR1xE10()
    testR1xE11()
    testR1xE12()
    testR1xE13()
    testR1xE14()
    testR1xE15()
    testR1xE16()
    testR1xE17()
    testR1xE18()
    testR1xE19()
    testR1xE20()
    testR1xE21()
    testR1xE22()
    testR1xE23()
    return "OK"
}

fun testR0xE0() {
    // with possible local optimizations
    if ((-1).toByte() in 1 .. 3 != range0.contains((-1).toByte())) throw AssertionError()
    if ((-1).toByte() !in 1 .. 3 != !range0.contains((-1).toByte())) throw AssertionError()
    if (!((-1).toByte() in 1 .. 3) != !range0.contains((-1).toByte())) throw AssertionError()
    if (!((-1).toByte() !in 1 .. 3) != range0.contains((-1).toByte())) throw AssertionError()
    // no local optimizations
    if (element0 in 1 .. 3 != range0.contains(element0)) throw AssertionError()
    if (element0 !in 1 .. 3 != !range0.contains(element0)) throw AssertionError()
    if (!(element0 in 1 .. 3) != !range0.contains(element0)) throw AssertionError()
    if (!(element0 !in 1 .. 3) != range0.contains(element0)) throw AssertionError()
}

fun testR0xE1() {
    // with possible local optimizations
    if ((-1).toShort() in 1 .. 3 != range0.contains((-1).toShort())) throw AssertionError()
    if ((-1).toShort() !in 1 .. 3 != !range0.contains((-1).toShort())) throw AssertionError()
    if (!((-1).toShort() in 1 .. 3) != !range0.contains((-1).toShort())) throw AssertionError()
    if (!((-1).toShort() !in 1 .. 3) != range0.contains((-1).toShort())) throw AssertionError()
    // no local optimizations
    if (element1 in 1 .. 3 != range0.contains(element1)) throw AssertionError()
    if (element1 !in 1 .. 3 != !range0.contains(element1)) throw AssertionError()
    if (!(element1 in 1 .. 3) != !range0.contains(element1)) throw AssertionError()
    if (!(element1 !in 1 .. 3) != range0.contains(element1)) throw AssertionError()
}

fun testR0xE2() {
    // with possible local optimizations
    if ((-1) in 1 .. 3 != range0.contains((-1))) throw AssertionError()
    if ((-1) !in 1 .. 3 != !range0.contains((-1))) throw AssertionError()
    if (!((-1) in 1 .. 3) != !range0.contains((-1))) throw AssertionError()
    if (!((-1) !in 1 .. 3) != range0.contains((-1))) throw AssertionError()
    // no local optimizations
    if (element2 in 1 .. 3 != range0.contains(element2)) throw AssertionError()
    if (element2 !in 1 .. 3 != !range0.contains(element2)) throw AssertionError()
    if (!(element2 in 1 .. 3) != !range0.contains(element2)) throw AssertionError()
    if (!(element2 !in 1 .. 3) != range0.contains(element2)) throw AssertionError()
}

fun testR0xE3() {
    // with possible local optimizations
    if ((-1).toLong() in 1 .. 3 != range0.contains((-1).toLong())) throw AssertionError()
    if ((-1).toLong() !in 1 .. 3 != !range0.contains((-1).toLong())) throw AssertionError()
    if (!((-1).toLong() in 1 .. 3) != !range0.contains((-1).toLong())) throw AssertionError()
    if (!((-1).toLong() !in 1 .. 3) != range0.contains((-1).toLong())) throw AssertionError()
    // no local optimizations
    if (element3 in 1 .. 3 != range0.contains(element3)) throw AssertionError()
    if (element3 !in 1 .. 3 != !range0.contains(element3)) throw AssertionError()
    if (!(element3 in 1 .. 3) != !range0.contains(element3)) throw AssertionError()
    if (!(element3 !in 1 .. 3) != range0.contains(element3)) throw AssertionError()
}

fun testR0xE4() {
    // with possible local optimizations
    if (0.toByte() in 1 .. 3 != range0.contains(0.toByte())) throw AssertionError()
    if (0.toByte() !in 1 .. 3 != !range0.contains(0.toByte())) throw AssertionError()
    if (!(0.toByte() in 1 .. 3) != !range0.contains(0.toByte())) throw AssertionError()
    if (!(0.toByte() !in 1 .. 3) != range0.contains(0.toByte())) throw AssertionError()
    // no local optimizations
    if (element4 in 1 .. 3 != range0.contains(element4)) throw AssertionError()
    if (element4 !in 1 .. 3 != !range0.contains(element4)) throw AssertionError()
    if (!(element4 in 1 .. 3) != !range0.contains(element4)) throw AssertionError()
    if (!(element4 !in 1 .. 3) != range0.contains(element4)) throw AssertionError()
}

fun testR0xE5() {
    // with possible local optimizations
    if (0.toShort() in 1 .. 3 != range0.contains(0.toShort())) throw AssertionError()
    if (0.toShort() !in 1 .. 3 != !range0.contains(0.toShort())) throw AssertionError()
    if (!(0.toShort() in 1 .. 3) != !range0.contains(0.toShort())) throw AssertionError()
    if (!(0.toShort() !in 1 .. 3) != range0.contains(0.toShort())) throw AssertionError()
    // no local optimizations
    if (element5 in 1 .. 3 != range0.contains(element5)) throw AssertionError()
    if (element5 !in 1 .. 3 != !range0.contains(element5)) throw AssertionError()
    if (!(element5 in 1 .. 3) != !range0.contains(element5)) throw AssertionError()
    if (!(element5 !in 1 .. 3) != range0.contains(element5)) throw AssertionError()
}

fun testR0xE6() {
    // with possible local optimizations
    if (0 in 1 .. 3 != range0.contains(0)) throw AssertionError()
    if (0 !in 1 .. 3 != !range0.contains(0)) throw AssertionError()
    if (!(0 in 1 .. 3) != !range0.contains(0)) throw AssertionError()
    if (!(0 !in 1 .. 3) != range0.contains(0)) throw AssertionError()
    // no local optimizations
    if (element6 in 1 .. 3 != range0.contains(element6)) throw AssertionError()
    if (element6 !in 1 .. 3 != !range0.contains(element6)) throw AssertionError()
    if (!(element6 in 1 .. 3) != !range0.contains(element6)) throw AssertionError()
    if (!(element6 !in 1 .. 3) != range0.contains(element6)) throw AssertionError()
}

fun testR0xE7() {
    // with possible local optimizations
    if (0.toLong() in 1 .. 3 != range0.contains(0.toLong())) throw AssertionError()
    if (0.toLong() !in 1 .. 3 != !range0.contains(0.toLong())) throw AssertionError()
    if (!(0.toLong() in 1 .. 3) != !range0.contains(0.toLong())) throw AssertionError()
    if (!(0.toLong() !in 1 .. 3) != range0.contains(0.toLong())) throw AssertionError()
    // no local optimizations
    if (element7 in 1 .. 3 != range0.contains(element7)) throw AssertionError()
    if (element7 !in 1 .. 3 != !range0.contains(element7)) throw AssertionError()
    if (!(element7 in 1 .. 3) != !range0.contains(element7)) throw AssertionError()
    if (!(element7 !in 1 .. 3) != range0.contains(element7)) throw AssertionError()
}

fun testR0xE8() {
    // with possible local optimizations
    if (1.toByte() in 1 .. 3 != range0.contains(1.toByte())) throw AssertionError()
    if (1.toByte() !in 1 .. 3 != !range0.contains(1.toByte())) throw AssertionError()
    if (!(1.toByte() in 1 .. 3) != !range0.contains(1.toByte())) throw AssertionError()
    if (!(1.toByte() !in 1 .. 3) != range0.contains(1.toByte())) throw AssertionError()
    // no local optimizations
    if (element8 in 1 .. 3 != range0.contains(element8)) throw AssertionError()
    if (element8 !in 1 .. 3 != !range0.contains(element8)) throw AssertionError()
    if (!(element8 in 1 .. 3) != !range0.contains(element8)) throw AssertionError()
    if (!(element8 !in 1 .. 3) != range0.contains(element8)) throw AssertionError()
}

fun testR0xE9() {
    // with possible local optimizations
    if (1.toShort() in 1 .. 3 != range0.contains(1.toShort())) throw AssertionError()
    if (1.toShort() !in 1 .. 3 != !range0.contains(1.toShort())) throw AssertionError()
    if (!(1.toShort() in 1 .. 3) != !range0.contains(1.toShort())) throw AssertionError()
    if (!(1.toShort() !in 1 .. 3) != range0.contains(1.toShort())) throw AssertionError()
    // no local optimizations
    if (element9 in 1 .. 3 != range0.contains(element9)) throw AssertionError()
    if (element9 !in 1 .. 3 != !range0.contains(element9)) throw AssertionError()
    if (!(element9 in 1 .. 3) != !range0.contains(element9)) throw AssertionError()
    if (!(element9 !in 1 .. 3) != range0.contains(element9)) throw AssertionError()
}

fun testR0xE10() {
    // with possible local optimizations
    if (1 in 1 .. 3 != range0.contains(1)) throw AssertionError()
    if (1 !in 1 .. 3 != !range0.contains(1)) throw AssertionError()
    if (!(1 in 1 .. 3) != !range0.contains(1)) throw AssertionError()
    if (!(1 !in 1 .. 3) != range0.contains(1)) throw AssertionError()
    // no local optimizations
    if (element10 in 1 .. 3 != range0.contains(element10)) throw AssertionError()
    if (element10 !in 1 .. 3 != !range0.contains(element10)) throw AssertionError()
    if (!(element10 in 1 .. 3) != !range0.contains(element10)) throw AssertionError()
    if (!(element10 !in 1 .. 3) != range0.contains(element10)) throw AssertionError()
}

fun testR0xE11() {
    // with possible local optimizations
    if (1.toLong() in 1 .. 3 != range0.contains(1.toLong())) throw AssertionError()
    if (1.toLong() !in 1 .. 3 != !range0.contains(1.toLong())) throw AssertionError()
    if (!(1.toLong() in 1 .. 3) != !range0.contains(1.toLong())) throw AssertionError()
    if (!(1.toLong() !in 1 .. 3) != range0.contains(1.toLong())) throw AssertionError()
    // no local optimizations
    if (element11 in 1 .. 3 != range0.contains(element11)) throw AssertionError()
    if (element11 !in 1 .. 3 != !range0.contains(element11)) throw AssertionError()
    if (!(element11 in 1 .. 3) != !range0.contains(element11)) throw AssertionError()
    if (!(element11 !in 1 .. 3) != range0.contains(element11)) throw AssertionError()
}

fun testR0xE12() {
    // with possible local optimizations
    if (2.toByte() in 1 .. 3 != range0.contains(2.toByte())) throw AssertionError()
    if (2.toByte() !in 1 .. 3 != !range0.contains(2.toByte())) throw AssertionError()
    if (!(2.toByte() in 1 .. 3) != !range0.contains(2.toByte())) throw AssertionError()
    if (!(2.toByte() !in 1 .. 3) != range0.contains(2.toByte())) throw AssertionError()
    // no local optimizations
    if (element12 in 1 .. 3 != range0.contains(element12)) throw AssertionError()
    if (element12 !in 1 .. 3 != !range0.contains(element12)) throw AssertionError()
    if (!(element12 in 1 .. 3) != !range0.contains(element12)) throw AssertionError()
    if (!(element12 !in 1 .. 3) != range0.contains(element12)) throw AssertionError()
}

fun testR0xE13() {
    // with possible local optimizations
    if (2.toShort() in 1 .. 3 != range0.contains(2.toShort())) throw AssertionError()
    if (2.toShort() !in 1 .. 3 != !range0.contains(2.toShort())) throw AssertionError()
    if (!(2.toShort() in 1 .. 3) != !range0.contains(2.toShort())) throw AssertionError()
    if (!(2.toShort() !in 1 .. 3) != range0.contains(2.toShort())) throw AssertionError()
    // no local optimizations
    if (element13 in 1 .. 3 != range0.contains(element13)) throw AssertionError()
    if (element13 !in 1 .. 3 != !range0.contains(element13)) throw AssertionError()
    if (!(element13 in 1 .. 3) != !range0.contains(element13)) throw AssertionError()
    if (!(element13 !in 1 .. 3) != range0.contains(element13)) throw AssertionError()
}

fun testR0xE14() {
    // with possible local optimizations
    if (2 in 1 .. 3 != range0.contains(2)) throw AssertionError()
    if (2 !in 1 .. 3 != !range0.contains(2)) throw AssertionError()
    if (!(2 in 1 .. 3) != !range0.contains(2)) throw AssertionError()
    if (!(2 !in 1 .. 3) != range0.contains(2)) throw AssertionError()
    // no local optimizations
    if (element14 in 1 .. 3 != range0.contains(element14)) throw AssertionError()
    if (element14 !in 1 .. 3 != !range0.contains(element14)) throw AssertionError()
    if (!(element14 in 1 .. 3) != !range0.contains(element14)) throw AssertionError()
    if (!(element14 !in 1 .. 3) != range0.contains(element14)) throw AssertionError()
}

fun testR0xE15() {
    // with possible local optimizations
    if (2.toLong() in 1 .. 3 != range0.contains(2.toLong())) throw AssertionError()
    if (2.toLong() !in 1 .. 3 != !range0.contains(2.toLong())) throw AssertionError()
    if (!(2.toLong() in 1 .. 3) != !range0.contains(2.toLong())) throw AssertionError()
    if (!(2.toLong() !in 1 .. 3) != range0.contains(2.toLong())) throw AssertionError()
    // no local optimizations
    if (element15 in 1 .. 3 != range0.contains(element15)) throw AssertionError()
    if (element15 !in 1 .. 3 != !range0.contains(element15)) throw AssertionError()
    if (!(element15 in 1 .. 3) != !range0.contains(element15)) throw AssertionError()
    if (!(element15 !in 1 .. 3) != range0.contains(element15)) throw AssertionError()
}

fun testR0xE16() {
    // with possible local optimizations
    if (3.toByte() in 1 .. 3 != range0.contains(3.toByte())) throw AssertionError()
    if (3.toByte() !in 1 .. 3 != !range0.contains(3.toByte())) throw AssertionError()
    if (!(3.toByte() in 1 .. 3) != !range0.contains(3.toByte())) throw AssertionError()
    if (!(3.toByte() !in 1 .. 3) != range0.contains(3.toByte())) throw AssertionError()
    // no local optimizations
    if (element16 in 1 .. 3 != range0.contains(element16)) throw AssertionError()
    if (element16 !in 1 .. 3 != !range0.contains(element16)) throw AssertionError()
    if (!(element16 in 1 .. 3) != !range0.contains(element16)) throw AssertionError()
    if (!(element16 !in 1 .. 3) != range0.contains(element16)) throw AssertionError()
}

fun testR0xE17() {
    // with possible local optimizations
    if (3.toShort() in 1 .. 3 != range0.contains(3.toShort())) throw AssertionError()
    if (3.toShort() !in 1 .. 3 != !range0.contains(3.toShort())) throw AssertionError()
    if (!(3.toShort() in 1 .. 3) != !range0.contains(3.toShort())) throw AssertionError()
    if (!(3.toShort() !in 1 .. 3) != range0.contains(3.toShort())) throw AssertionError()
    // no local optimizations
    if (element17 in 1 .. 3 != range0.contains(element17)) throw AssertionError()
    if (element17 !in 1 .. 3 != !range0.contains(element17)) throw AssertionError()
    if (!(element17 in 1 .. 3) != !range0.contains(element17)) throw AssertionError()
    if (!(element17 !in 1 .. 3) != range0.contains(element17)) throw AssertionError()
}

fun testR0xE18() {
    // with possible local optimizations
    if (3 in 1 .. 3 != range0.contains(3)) throw AssertionError()
    if (3 !in 1 .. 3 != !range0.contains(3)) throw AssertionError()
    if (!(3 in 1 .. 3) != !range0.contains(3)) throw AssertionError()
    if (!(3 !in 1 .. 3) != range0.contains(3)) throw AssertionError()
    // no local optimizations
    if (element18 in 1 .. 3 != range0.contains(element18)) throw AssertionError()
    if (element18 !in 1 .. 3 != !range0.contains(element18)) throw AssertionError()
    if (!(element18 in 1 .. 3) != !range0.contains(element18)) throw AssertionError()
    if (!(element18 !in 1 .. 3) != range0.contains(element18)) throw AssertionError()
}

fun testR0xE19() {
    // with possible local optimizations
    if (3.toLong() in 1 .. 3 != range0.contains(3.toLong())) throw AssertionError()
    if (3.toLong() !in 1 .. 3 != !range0.contains(3.toLong())) throw AssertionError()
    if (!(3.toLong() in 1 .. 3) != !range0.contains(3.toLong())) throw AssertionError()
    if (!(3.toLong() !in 1 .. 3) != range0.contains(3.toLong())) throw AssertionError()
    // no local optimizations
    if (element19 in 1 .. 3 != range0.contains(element19)) throw AssertionError()
    if (element19 !in 1 .. 3 != !range0.contains(element19)) throw AssertionError()
    if (!(element19 in 1 .. 3) != !range0.contains(element19)) throw AssertionError()
    if (!(element19 !in 1 .. 3) != range0.contains(element19)) throw AssertionError()
}

fun testR0xE20() {
    // with possible local optimizations
    if (4.toByte() in 1 .. 3 != range0.contains(4.toByte())) throw AssertionError()
    if (4.toByte() !in 1 .. 3 != !range0.contains(4.toByte())) throw AssertionError()
    if (!(4.toByte() in 1 .. 3) != !range0.contains(4.toByte())) throw AssertionError()
    if (!(4.toByte() !in 1 .. 3) != range0.contains(4.toByte())) throw AssertionError()
    // no local optimizations
    if (element20 in 1 .. 3 != range0.contains(element20)) throw AssertionError()
    if (element20 !in 1 .. 3 != !range0.contains(element20)) throw AssertionError()
    if (!(element20 in 1 .. 3) != !range0.contains(element20)) throw AssertionError()
    if (!(element20 !in 1 .. 3) != range0.contains(element20)) throw AssertionError()
}

fun testR0xE21() {
    // with possible local optimizations
    if (4.toShort() in 1 .. 3 != range0.contains(4.toShort())) throw AssertionError()
    if (4.toShort() !in 1 .. 3 != !range0.contains(4.toShort())) throw AssertionError()
    if (!(4.toShort() in 1 .. 3) != !range0.contains(4.toShort())) throw AssertionError()
    if (!(4.toShort() !in 1 .. 3) != range0.contains(4.toShort())) throw AssertionError()
    // no local optimizations
    if (element21 in 1 .. 3 != range0.contains(element21)) throw AssertionError()
    if (element21 !in 1 .. 3 != !range0.contains(element21)) throw AssertionError()
    if (!(element21 in 1 .. 3) != !range0.contains(element21)) throw AssertionError()
    if (!(element21 !in 1 .. 3) != range0.contains(element21)) throw AssertionError()
}

fun testR0xE22() {
    // with possible local optimizations
    if (4 in 1 .. 3 != range0.contains(4)) throw AssertionError()
    if (4 !in 1 .. 3 != !range0.contains(4)) throw AssertionError()
    if (!(4 in 1 .. 3) != !range0.contains(4)) throw AssertionError()
    if (!(4 !in 1 .. 3) != range0.contains(4)) throw AssertionError()
    // no local optimizations
    if (element22 in 1 .. 3 != range0.contains(element22)) throw AssertionError()
    if (element22 !in 1 .. 3 != !range0.contains(element22)) throw AssertionError()
    if (!(element22 in 1 .. 3) != !range0.contains(element22)) throw AssertionError()
    if (!(element22 !in 1 .. 3) != range0.contains(element22)) throw AssertionError()
}

fun testR0xE23() {
    // with possible local optimizations
    if (4.toLong() in 1 .. 3 != range0.contains(4.toLong())) throw AssertionError()
    if (4.toLong() !in 1 .. 3 != !range0.contains(4.toLong())) throw AssertionError()
    if (!(4.toLong() in 1 .. 3) != !range0.contains(4.toLong())) throw AssertionError()
    if (!(4.toLong() !in 1 .. 3) != range0.contains(4.toLong())) throw AssertionError()
    // no local optimizations
    if (element23 in 1 .. 3 != range0.contains(element23)) throw AssertionError()
    if (element23 !in 1 .. 3 != !range0.contains(element23)) throw AssertionError()
    if (!(element23 in 1 .. 3) != !range0.contains(element23)) throw AssertionError()
    if (!(element23 !in 1 .. 3) != range0.contains(element23)) throw AssertionError()
}

fun testR1xE0() {
    // with possible local optimizations
    if ((-1).toByte() in 3 .. 1 != range1.contains((-1).toByte())) throw AssertionError()
    if ((-1).toByte() !in 3 .. 1 != !range1.contains((-1).toByte())) throw AssertionError()
    if (!((-1).toByte() in 3 .. 1) != !range1.contains((-1).toByte())) throw AssertionError()
    if (!((-1).toByte() !in 3 .. 1) != range1.contains((-1).toByte())) throw AssertionError()
    // no local optimizations
    if (element0 in 3 .. 1 != range1.contains(element0)) throw AssertionError()
    if (element0 !in 3 .. 1 != !range1.contains(element0)) throw AssertionError()
    if (!(element0 in 3 .. 1) != !range1.contains(element0)) throw AssertionError()
    if (!(element0 !in 3 .. 1) != range1.contains(element0)) throw AssertionError()
}

fun testR1xE1() {
    // with possible local optimizations
    if ((-1).toShort() in 3 .. 1 != range1.contains((-1).toShort())) throw AssertionError()
    if ((-1).toShort() !in 3 .. 1 != !range1.contains((-1).toShort())) throw AssertionError()
    if (!((-1).toShort() in 3 .. 1) != !range1.contains((-1).toShort())) throw AssertionError()
    if (!((-1).toShort() !in 3 .. 1) != range1.contains((-1).toShort())) throw AssertionError()
    // no local optimizations
    if (element1 in 3 .. 1 != range1.contains(element1)) throw AssertionError()
    if (element1 !in 3 .. 1 != !range1.contains(element1)) throw AssertionError()
    if (!(element1 in 3 .. 1) != !range1.contains(element1)) throw AssertionError()
    if (!(element1 !in 3 .. 1) != range1.contains(element1)) throw AssertionError()
}

fun testR1xE2() {
    // with possible local optimizations
    if ((-1) in 3 .. 1 != range1.contains((-1))) throw AssertionError()
    if ((-1) !in 3 .. 1 != !range1.contains((-1))) throw AssertionError()
    if (!((-1) in 3 .. 1) != !range1.contains((-1))) throw AssertionError()
    if (!((-1) !in 3 .. 1) != range1.contains((-1))) throw AssertionError()
    // no local optimizations
    if (element2 in 3 .. 1 != range1.contains(element2)) throw AssertionError()
    if (element2 !in 3 .. 1 != !range1.contains(element2)) throw AssertionError()
    if (!(element2 in 3 .. 1) != !range1.contains(element2)) throw AssertionError()
    if (!(element2 !in 3 .. 1) != range1.contains(element2)) throw AssertionError()
}

fun testR1xE3() {
    // with possible local optimizations
    if ((-1).toLong() in 3 .. 1 != range1.contains((-1).toLong())) throw AssertionError()
    if ((-1).toLong() !in 3 .. 1 != !range1.contains((-1).toLong())) throw AssertionError()
    if (!((-1).toLong() in 3 .. 1) != !range1.contains((-1).toLong())) throw AssertionError()
    if (!((-1).toLong() !in 3 .. 1) != range1.contains((-1).toLong())) throw AssertionError()
    // no local optimizations
    if (element3 in 3 .. 1 != range1.contains(element3)) throw AssertionError()
    if (element3 !in 3 .. 1 != !range1.contains(element3)) throw AssertionError()
    if (!(element3 in 3 .. 1) != !range1.contains(element3)) throw AssertionError()
    if (!(element3 !in 3 .. 1) != range1.contains(element3)) throw AssertionError()
}

fun testR1xE4() {
    // with possible local optimizations
    if (0.toByte() in 3 .. 1 != range1.contains(0.toByte())) throw AssertionError()
    if (0.toByte() !in 3 .. 1 != !range1.contains(0.toByte())) throw AssertionError()
    if (!(0.toByte() in 3 .. 1) != !range1.contains(0.toByte())) throw AssertionError()
    if (!(0.toByte() !in 3 .. 1) != range1.contains(0.toByte())) throw AssertionError()
    // no local optimizations
    if (element4 in 3 .. 1 != range1.contains(element4)) throw AssertionError()
    if (element4 !in 3 .. 1 != !range1.contains(element4)) throw AssertionError()
    if (!(element4 in 3 .. 1) != !range1.contains(element4)) throw AssertionError()
    if (!(element4 !in 3 .. 1) != range1.contains(element4)) throw AssertionError()
}

fun testR1xE5() {
    // with possible local optimizations
    if (0.toShort() in 3 .. 1 != range1.contains(0.toShort())) throw AssertionError()
    if (0.toShort() !in 3 .. 1 != !range1.contains(0.toShort())) throw AssertionError()
    if (!(0.toShort() in 3 .. 1) != !range1.contains(0.toShort())) throw AssertionError()
    if (!(0.toShort() !in 3 .. 1) != range1.contains(0.toShort())) throw AssertionError()
    // no local optimizations
    if (element5 in 3 .. 1 != range1.contains(element5)) throw AssertionError()
    if (element5 !in 3 .. 1 != !range1.contains(element5)) throw AssertionError()
    if (!(element5 in 3 .. 1) != !range1.contains(element5)) throw AssertionError()
    if (!(element5 !in 3 .. 1) != range1.contains(element5)) throw AssertionError()
}

fun testR1xE6() {
    // with possible local optimizations
    if (0 in 3 .. 1 != range1.contains(0)) throw AssertionError()
    if (0 !in 3 .. 1 != !range1.contains(0)) throw AssertionError()
    if (!(0 in 3 .. 1) != !range1.contains(0)) throw AssertionError()
    if (!(0 !in 3 .. 1) != range1.contains(0)) throw AssertionError()
    // no local optimizations
    if (element6 in 3 .. 1 != range1.contains(element6)) throw AssertionError()
    if (element6 !in 3 .. 1 != !range1.contains(element6)) throw AssertionError()
    if (!(element6 in 3 .. 1) != !range1.contains(element6)) throw AssertionError()
    if (!(element6 !in 3 .. 1) != range1.contains(element6)) throw AssertionError()
}

fun testR1xE7() {
    // with possible local optimizations
    if (0.toLong() in 3 .. 1 != range1.contains(0.toLong())) throw AssertionError()
    if (0.toLong() !in 3 .. 1 != !range1.contains(0.toLong())) throw AssertionError()
    if (!(0.toLong() in 3 .. 1) != !range1.contains(0.toLong())) throw AssertionError()
    if (!(0.toLong() !in 3 .. 1) != range1.contains(0.toLong())) throw AssertionError()
    // no local optimizations
    if (element7 in 3 .. 1 != range1.contains(element7)) throw AssertionError()
    if (element7 !in 3 .. 1 != !range1.contains(element7)) throw AssertionError()
    if (!(element7 in 3 .. 1) != !range1.contains(element7)) throw AssertionError()
    if (!(element7 !in 3 .. 1) != range1.contains(element7)) throw AssertionError()
}

fun testR1xE8() {
    // with possible local optimizations
    if (1.toByte() in 3 .. 1 != range1.contains(1.toByte())) throw AssertionError()
    if (1.toByte() !in 3 .. 1 != !range1.contains(1.toByte())) throw AssertionError()
    if (!(1.toByte() in 3 .. 1) != !range1.contains(1.toByte())) throw AssertionError()
    if (!(1.toByte() !in 3 .. 1) != range1.contains(1.toByte())) throw AssertionError()
    // no local optimizations
    if (element8 in 3 .. 1 != range1.contains(element8)) throw AssertionError()
    if (element8 !in 3 .. 1 != !range1.contains(element8)) throw AssertionError()
    if (!(element8 in 3 .. 1) != !range1.contains(element8)) throw AssertionError()
    if (!(element8 !in 3 .. 1) != range1.contains(element8)) throw AssertionError()
}

fun testR1xE9() {
    // with possible local optimizations
    if (1.toShort() in 3 .. 1 != range1.contains(1.toShort())) throw AssertionError()
    if (1.toShort() !in 3 .. 1 != !range1.contains(1.toShort())) throw AssertionError()
    if (!(1.toShort() in 3 .. 1) != !range1.contains(1.toShort())) throw AssertionError()
    if (!(1.toShort() !in 3 .. 1) != range1.contains(1.toShort())) throw AssertionError()
    // no local optimizations
    if (element9 in 3 .. 1 != range1.contains(element9)) throw AssertionError()
    if (element9 !in 3 .. 1 != !range1.contains(element9)) throw AssertionError()
    if (!(element9 in 3 .. 1) != !range1.contains(element9)) throw AssertionError()
    if (!(element9 !in 3 .. 1) != range1.contains(element9)) throw AssertionError()
}

fun testR1xE10() {
    // with possible local optimizations
    if (1 in 3 .. 1 != range1.contains(1)) throw AssertionError()
    if (1 !in 3 .. 1 != !range1.contains(1)) throw AssertionError()
    if (!(1 in 3 .. 1) != !range1.contains(1)) throw AssertionError()
    if (!(1 !in 3 .. 1) != range1.contains(1)) throw AssertionError()
    // no local optimizations
    if (element10 in 3 .. 1 != range1.contains(element10)) throw AssertionError()
    if (element10 !in 3 .. 1 != !range1.contains(element10)) throw AssertionError()
    if (!(element10 in 3 .. 1) != !range1.contains(element10)) throw AssertionError()
    if (!(element10 !in 3 .. 1) != range1.contains(element10)) throw AssertionError()
}

fun testR1xE11() {
    // with possible local optimizations
    if (1.toLong() in 3 .. 1 != range1.contains(1.toLong())) throw AssertionError()
    if (1.toLong() !in 3 .. 1 != !range1.contains(1.toLong())) throw AssertionError()
    if (!(1.toLong() in 3 .. 1) != !range1.contains(1.toLong())) throw AssertionError()
    if (!(1.toLong() !in 3 .. 1) != range1.contains(1.toLong())) throw AssertionError()
    // no local optimizations
    if (element11 in 3 .. 1 != range1.contains(element11)) throw AssertionError()
    if (element11 !in 3 .. 1 != !range1.contains(element11)) throw AssertionError()
    if (!(element11 in 3 .. 1) != !range1.contains(element11)) throw AssertionError()
    if (!(element11 !in 3 .. 1) != range1.contains(element11)) throw AssertionError()
}

fun testR1xE12() {
    // with possible local optimizations
    if (2.toByte() in 3 .. 1 != range1.contains(2.toByte())) throw AssertionError()
    if (2.toByte() !in 3 .. 1 != !range1.contains(2.toByte())) throw AssertionError()
    if (!(2.toByte() in 3 .. 1) != !range1.contains(2.toByte())) throw AssertionError()
    if (!(2.toByte() !in 3 .. 1) != range1.contains(2.toByte())) throw AssertionError()
    // no local optimizations
    if (element12 in 3 .. 1 != range1.contains(element12)) throw AssertionError()
    if (element12 !in 3 .. 1 != !range1.contains(element12)) throw AssertionError()
    if (!(element12 in 3 .. 1) != !range1.contains(element12)) throw AssertionError()
    if (!(element12 !in 3 .. 1) != range1.contains(element12)) throw AssertionError()
}

fun testR1xE13() {
    // with possible local optimizations
    if (2.toShort() in 3 .. 1 != range1.contains(2.toShort())) throw AssertionError()
    if (2.toShort() !in 3 .. 1 != !range1.contains(2.toShort())) throw AssertionError()
    if (!(2.toShort() in 3 .. 1) != !range1.contains(2.toShort())) throw AssertionError()
    if (!(2.toShort() !in 3 .. 1) != range1.contains(2.toShort())) throw AssertionError()
    // no local optimizations
    if (element13 in 3 .. 1 != range1.contains(element13)) throw AssertionError()
    if (element13 !in 3 .. 1 != !range1.contains(element13)) throw AssertionError()
    if (!(element13 in 3 .. 1) != !range1.contains(element13)) throw AssertionError()
    if (!(element13 !in 3 .. 1) != range1.contains(element13)) throw AssertionError()
}

fun testR1xE14() {
    // with possible local optimizations
    if (2 in 3 .. 1 != range1.contains(2)) throw AssertionError()
    if (2 !in 3 .. 1 != !range1.contains(2)) throw AssertionError()
    if (!(2 in 3 .. 1) != !range1.contains(2)) throw AssertionError()
    if (!(2 !in 3 .. 1) != range1.contains(2)) throw AssertionError()
    // no local optimizations
    if (element14 in 3 .. 1 != range1.contains(element14)) throw AssertionError()
    if (element14 !in 3 .. 1 != !range1.contains(element14)) throw AssertionError()
    if (!(element14 in 3 .. 1) != !range1.contains(element14)) throw AssertionError()
    if (!(element14 !in 3 .. 1) != range1.contains(element14)) throw AssertionError()
}

fun testR1xE15() {
    // with possible local optimizations
    if (2.toLong() in 3 .. 1 != range1.contains(2.toLong())) throw AssertionError()
    if (2.toLong() !in 3 .. 1 != !range1.contains(2.toLong())) throw AssertionError()
    if (!(2.toLong() in 3 .. 1) != !range1.contains(2.toLong())) throw AssertionError()
    if (!(2.toLong() !in 3 .. 1) != range1.contains(2.toLong())) throw AssertionError()
    // no local optimizations
    if (element15 in 3 .. 1 != range1.contains(element15)) throw AssertionError()
    if (element15 !in 3 .. 1 != !range1.contains(element15)) throw AssertionError()
    if (!(element15 in 3 .. 1) != !range1.contains(element15)) throw AssertionError()
    if (!(element15 !in 3 .. 1) != range1.contains(element15)) throw AssertionError()
}

fun testR1xE16() {
    // with possible local optimizations
    if (3.toByte() in 3 .. 1 != range1.contains(3.toByte())) throw AssertionError()
    if (3.toByte() !in 3 .. 1 != !range1.contains(3.toByte())) throw AssertionError()
    if (!(3.toByte() in 3 .. 1) != !range1.contains(3.toByte())) throw AssertionError()
    if (!(3.toByte() !in 3 .. 1) != range1.contains(3.toByte())) throw AssertionError()
    // no local optimizations
    if (element16 in 3 .. 1 != range1.contains(element16)) throw AssertionError()
    if (element16 !in 3 .. 1 != !range1.contains(element16)) throw AssertionError()
    if (!(element16 in 3 .. 1) != !range1.contains(element16)) throw AssertionError()
    if (!(element16 !in 3 .. 1) != range1.contains(element16)) throw AssertionError()
}

fun testR1xE17() {
    // with possible local optimizations
    if (3.toShort() in 3 .. 1 != range1.contains(3.toShort())) throw AssertionError()
    if (3.toShort() !in 3 .. 1 != !range1.contains(3.toShort())) throw AssertionError()
    if (!(3.toShort() in 3 .. 1) != !range1.contains(3.toShort())) throw AssertionError()
    if (!(3.toShort() !in 3 .. 1) != range1.contains(3.toShort())) throw AssertionError()
    // no local optimizations
    if (element17 in 3 .. 1 != range1.contains(element17)) throw AssertionError()
    if (element17 !in 3 .. 1 != !range1.contains(element17)) throw AssertionError()
    if (!(element17 in 3 .. 1) != !range1.contains(element17)) throw AssertionError()
    if (!(element17 !in 3 .. 1) != range1.contains(element17)) throw AssertionError()
}

fun testR1xE18() {
    // with possible local optimizations
    if (3 in 3 .. 1 != range1.contains(3)) throw AssertionError()
    if (3 !in 3 .. 1 != !range1.contains(3)) throw AssertionError()
    if (!(3 in 3 .. 1) != !range1.contains(3)) throw AssertionError()
    if (!(3 !in 3 .. 1) != range1.contains(3)) throw AssertionError()
    // no local optimizations
    if (element18 in 3 .. 1 != range1.contains(element18)) throw AssertionError()
    if (element18 !in 3 .. 1 != !range1.contains(element18)) throw AssertionError()
    if (!(element18 in 3 .. 1) != !range1.contains(element18)) throw AssertionError()
    if (!(element18 !in 3 .. 1) != range1.contains(element18)) throw AssertionError()
}

fun testR1xE19() {
    // with possible local optimizations
    if (3.toLong() in 3 .. 1 != range1.contains(3.toLong())) throw AssertionError()
    if (3.toLong() !in 3 .. 1 != !range1.contains(3.toLong())) throw AssertionError()
    if (!(3.toLong() in 3 .. 1) != !range1.contains(3.toLong())) throw AssertionError()
    if (!(3.toLong() !in 3 .. 1) != range1.contains(3.toLong())) throw AssertionError()
    // no local optimizations
    if (element19 in 3 .. 1 != range1.contains(element19)) throw AssertionError()
    if (element19 !in 3 .. 1 != !range1.contains(element19)) throw AssertionError()
    if (!(element19 in 3 .. 1) != !range1.contains(element19)) throw AssertionError()
    if (!(element19 !in 3 .. 1) != range1.contains(element19)) throw AssertionError()
}

fun testR1xE20() {
    // with possible local optimizations
    if (4.toByte() in 3 .. 1 != range1.contains(4.toByte())) throw AssertionError()
    if (4.toByte() !in 3 .. 1 != !range1.contains(4.toByte())) throw AssertionError()
    if (!(4.toByte() in 3 .. 1) != !range1.contains(4.toByte())) throw AssertionError()
    if (!(4.toByte() !in 3 .. 1) != range1.contains(4.toByte())) throw AssertionError()
    // no local optimizations
    if (element20 in 3 .. 1 != range1.contains(element20)) throw AssertionError()
    if (element20 !in 3 .. 1 != !range1.contains(element20)) throw AssertionError()
    if (!(element20 in 3 .. 1) != !range1.contains(element20)) throw AssertionError()
    if (!(element20 !in 3 .. 1) != range1.contains(element20)) throw AssertionError()
}

fun testR1xE21() {
    // with possible local optimizations
    if (4.toShort() in 3 .. 1 != range1.contains(4.toShort())) throw AssertionError()
    if (4.toShort() !in 3 .. 1 != !range1.contains(4.toShort())) throw AssertionError()
    if (!(4.toShort() in 3 .. 1) != !range1.contains(4.toShort())) throw AssertionError()
    if (!(4.toShort() !in 3 .. 1) != range1.contains(4.toShort())) throw AssertionError()
    // no local optimizations
    if (element21 in 3 .. 1 != range1.contains(element21)) throw AssertionError()
    if (element21 !in 3 .. 1 != !range1.contains(element21)) throw AssertionError()
    if (!(element21 in 3 .. 1) != !range1.contains(element21)) throw AssertionError()
    if (!(element21 !in 3 .. 1) != range1.contains(element21)) throw AssertionError()
}

fun testR1xE22() {
    // with possible local optimizations
    if (4 in 3 .. 1 != range1.contains(4)) throw AssertionError()
    if (4 !in 3 .. 1 != !range1.contains(4)) throw AssertionError()
    if (!(4 in 3 .. 1) != !range1.contains(4)) throw AssertionError()
    if (!(4 !in 3 .. 1) != range1.contains(4)) throw AssertionError()
    // no local optimizations
    if (element22 in 3 .. 1 != range1.contains(element22)) throw AssertionError()
    if (element22 !in 3 .. 1 != !range1.contains(element22)) throw AssertionError()
    if (!(element22 in 3 .. 1) != !range1.contains(element22)) throw AssertionError()
    if (!(element22 !in 3 .. 1) != range1.contains(element22)) throw AssertionError()
}

fun testR1xE23() {
    // with possible local optimizations
    if (4.toLong() in 3 .. 1 != range1.contains(4.toLong())) throw AssertionError()
    if (4.toLong() !in 3 .. 1 != !range1.contains(4.toLong())) throw AssertionError()
    if (!(4.toLong() in 3 .. 1) != !range1.contains(4.toLong())) throw AssertionError()
    if (!(4.toLong() !in 3 .. 1) != range1.contains(4.toLong())) throw AssertionError()
    // no local optimizations
    if (element23 in 3 .. 1 != range1.contains(element23)) throw AssertionError()
    if (element23 !in 3 .. 1 != !range1.contains(element23)) throw AssertionError()
    if (!(element23 in 3 .. 1) != !range1.contains(element23)) throw AssertionError()
    if (!(element23 !in 3 .. 1) != range1.contains(element23)) throw AssertionError()
}


