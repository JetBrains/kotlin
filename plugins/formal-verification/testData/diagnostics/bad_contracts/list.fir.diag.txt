/list.kt:(91,110): info: Generated Viper text for empty_list_expr_get:
field special$size: Int

method global$fun_empty_list_expr_get$fun_take$$return$T_Unit()
  returns (ret$0: dom$Unit)
{
  var local0$s: Int
  var anonymous$0: Ref
  anonymous$0 := pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  local0$s := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(anonymous$0,
    0)
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Int)
  returns (ret: Int)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  requires local$index >= 0
  requires this.special$size > local$index
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures this.special$size == old(this.special$size)


method pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  returns (ret: Ref)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures ret.special$size >= 0
  ensures ret.special$size == 0


/list.kt:(127,146): warning: Invalid index for the following list sub-expression, the index may be greater than the list's size.

/list.kt:(168,182): info: Generated Viper text for empty_list_get:
field special$size: Int

method global$fun_empty_list_get$fun_take$$return$T_Unit()
  returns (ret$0: dom$Unit)
{
  var local0$myList: Ref
  var local0$s: Int
  local0$myList := pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  local0$s := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local0$myList,
    0)
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Int)
  returns (ret: Int)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  requires local$index >= 0
  requires this.special$size > local$index
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures this.special$size == old(this.special$size)


method pkg$kotlin$collections$global$fun_emptyList$fun_take$$return$T_class_pkg$kotlin$collections$global$class_List()
  returns (ret: Ref)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures ret.special$size >= 0
  ensures ret.special$size == 0


/list.kt:(239,248): warning: Invalid index for list 'myList', the index may be greater than the list's size.

/list.kt:(270,281): info: Generated Viper text for unsafe_last:
field special$size: Int

method global$fun_unsafe_last$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Int(local$l: Ref)
  returns (ret$0: Int)
  requires acc(local$l.special$size, write)
  requires local$l.special$size >= 0
  ensures acc(local$l.special$size, write)
  ensures local$l.special$size >= 0
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$l): dom$Type), dom$Type$pkg$kotlin$collections$global$class_List())
  ret$0 := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$l,
    local$l.special$size - 1)
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Int)
  returns (ret: Int)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  requires local$index >= 0
  requires this.special$size > local$index
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures this.special$size == old(this.special$size)


/list.kt:(315,328): warning: Invalid index for list 'l', the index may be less than zero.

/list.kt:(350,357): info: Generated Viper text for add_get:
field special$size: Int

method global$fun_add_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$return$T_Unit(local$l: Ref)
  returns (ret$0: dom$Unit)
  requires acc(local$l.special$size, write)
  requires local$l.special$size >= 0
  ensures acc(local$l.special$size, write)
  ensures local$l.special$size >= 0
{
  var anonymous$0: Bool
  var local0$n: Int
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$l): dom$Type), dom$Type$pkg$kotlin$collections$global$class_MutableList())
  anonymous$0 := pkg$kotlin$collections$class_MutableList$fun_add$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Boolean(local$l,
    1)
  local0$n := pkg$kotlin$collections$class_MutableList$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Int(local$l,
    1)
  label label$ret$0
}

method pkg$kotlin$collections$class_MutableList$fun_add$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Boolean(this: Ref,
  local$element: Int)
  returns (ret: Bool)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures this.special$size == old(this.special$size) + 1


method pkg$kotlin$collections$class_MutableList$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_MutableList$T_Int$return$T_Int(this: Ref,
  local$index: Int)
  returns (ret: Int)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  requires local$index >= 0
  requires this.special$size > local$index
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures this.special$size == old(this.special$size)


/list.kt:(406,410): warning: Invalid index for list 'l', the index may be greater than the list's size.
