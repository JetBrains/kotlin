KtFile: 'arrayAccess.kt'
  NO_CANDIDATES

KtPackageDirective(0,0): ''
  NO_CANDIDATES

KtImportList(0,0): ''
  NO_CANDIDATES

KtNamedFunction(0,131): 'fun usage(list: MutableList<Int>) {'
  NO_CANDIDATES

KtParameterList(9,33): '(list: MutableList<Int>)'
  NO_CANDIDATES

KtParameter(10,32): 'list: MutableList<Int>'
  NO_CANDIDATES

KtTypeReference(16,32): 'MutableList<Int>'
  NO_CANDIDATES

KtUserType(16,32): 'MutableList<Int>'
  NO_CANDIDATES

KtNameReferenceExpression(16,27): 'MutableList'
  NO_CANDIDATES

KtTypeArgumentList(27,32): '<Int>'
  NO_CANDIDATES

KtTypeProjection(28,31): 'Int'
  NO_CANDIDATES

KtTypeReference(28,31): 'Int'
  NO_CANDIDATES

KtUserType(28,31): 'Int'
  NO_CANDIDATES

KtNameReferenceExpression(28,31): 'Int'
  NO_CANDIDATES

KtBlockExpression(34,131): '{'
  NO_CANDIDATES

KtBinaryExpression(40,49): 'list += 1'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        1 -> (KaVariableSignature:
          name = element
          receiverType = null
          returnType = kotlin.Int
          symbol = element: T
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.collections.MutableCollection<in kotlin.Int>
          returnType = kotlin.Unit
          symbol = kotlin/collections/plusAssign(<extension receiver>: kotlin.collections.MutableCollection<in T>, element: T): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = element
              receiverType = null
              returnType = kotlin.Int
              symbol = element: T
              callableId = null
          ]
          callableId = kotlin/collections/plusAssign
      typeArgumentsMapping = {
        T -> (kotlin.Int)
      }
    isInBestCandidates = true

KtNameReferenceExpression(40,44): 'list'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = list
          receiverType = null
          returnType = kotlin.collections.MutableList<kotlin.Int>
          symbol = list: kotlin.collections.MutableList<kotlin.Int>
          callableId = null
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtOperationReferenceExpression(45,47): '+='
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        1 -> (KaVariableSignature:
          name = element
          receiverType = null
          returnType = kotlin.Int
          symbol = element: T
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.collections.MutableCollection<in kotlin.Int>
          returnType = kotlin.Unit
          symbol = kotlin/collections/plusAssign(<extension receiver>: kotlin.collections.MutableCollection<in T>, element: T): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = element
              receiverType = null
              returnType = kotlin.Int
              symbol = element: T
              callableId = null
          ]
          callableId = kotlin/collections/plusAssign
      typeArgumentsMapping = {
        T -> (kotlin.Int)
      }
    isInBestCandidates = true

KtConstantExpression(48,49): '1'
  NO_CANDIDATES

KtProperty(54,81): 'val implicitIndex = list[0]'
  NO_CANDIDATES

KtArrayAccessExpression(74,81): 'list[0]'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        0 -> (KaVariableSignature:
          name = index
          receiverType = null
          returnType = kotlin.Int
          symbol = index: kotlin.Int
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.get
      typeArgumentsMapping = {}
    isInBestCandidates = true
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        0 -> (KaVariableSignature:
          name = key
          receiverType = null
          returnType = kotlin.Int
          symbol = key: K
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
          returnType = ERROR_TYPE?
          symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
          valueParameters = [
            KaVariableSignature:
              name = key
              receiverType = null
              returnType = kotlin.Int
              symbol = key: K
              callableId = null
          ]
          callableId = kotlin/collections/get
      typeArgumentsMapping = {
        K -> (kotlin.Int),
        V -> (ERROR_TYPE)
      }
    diagnostic = ERROR<UNRESOLVED_REFERENCE: RECEIVER_TYPE_ERROR with get>
    isInBestCandidates = false
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        0 -> (KaVariableSignature:
          name = name
          receiverType = null
          returnType = kotlin.String
          symbol = name: kotlin.String
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.text.MatchGroupCollection
          returnType = kotlin.text.MatchGroup?
          symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
          valueParameters = [
            KaVariableSignature:
              name = name
              receiverType = null
              returnType = kotlin.String
              symbol = name: kotlin.String
              callableId = null
          ]
          callableId = kotlin/text/get
      typeArgumentsMapping = {}
    diagnostic = ERROR<CONSTANT_EXPECTED_TYPE_MISMATCH: The integer literal does not conform to the expected type String>
    isInBestCandidates = false

KtNameReferenceExpression(74,78): 'list'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = list
          receiverType = null
          returnType = kotlin.collections.MutableList<kotlin.Int>
          symbol = list: kotlin.collections.MutableList<kotlin.Int>
          callableId = null
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtContainerNode(78,81): '[0]'
  NO_CANDIDATES

KtConstantExpression(79,80): '0'
  NO_CANDIDATES

KtProperty(86,129): 'val explicitIndex = list.get(implicitIndex)'
  NO_CANDIDATES

KtDotQualifiedExpression(106,129): 'list.get(implicitIndex)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = index
          receiverType = null
          returnType = kotlin.Int
          symbol = index: kotlin.Int
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.get
      typeArgumentsMapping = {}
    isInBestCandidates = true
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = key
          receiverType = null
          returnType = kotlin.Int
          symbol = key: K
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
          returnType = ERROR_TYPE?
          symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
          valueParameters = [
            KaVariableSignature:
              name = key
              receiverType = null
              returnType = kotlin.Int
              symbol = key: K
              callableId = null
          ]
          callableId = kotlin/collections/get
      typeArgumentsMapping = {
        K -> (kotlin.Int),
        V -> (ERROR_TYPE)
      }
    diagnostic = ERROR<UNRESOLVED_REFERENCE: RECEIVER_TYPE_ERROR with get>
    isInBestCandidates = false
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = name
          receiverType = null
          returnType = kotlin.String
          symbol = name: kotlin.String
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.text.MatchGroupCollection
          returnType = kotlin.text.MatchGroup?
          symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
          valueParameters = [
            KaVariableSignature:
              name = name
              receiverType = null
              returnType = kotlin.String
              symbol = name: kotlin.String
              callableId = null
          ]
          callableId = kotlin/text/get
      typeArgumentsMapping = {}
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but String was expected>
    isInBestCandidates = false

KtNameReferenceExpression(106,110): 'list'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = list
          receiverType = null
          returnType = kotlin.collections.MutableList<kotlin.Int>
          symbol = list: kotlin.collections.MutableList<kotlin.Int>
          callableId = null
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtCallExpression(111,129): 'get(implicitIndex)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = index
          receiverType = null
          returnType = kotlin.Int
          symbol = index: kotlin.Int
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.get
      typeArgumentsMapping = {}
    isInBestCandidates = true
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = key
          receiverType = null
          returnType = kotlin.Int
          symbol = key: K
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
          returnType = ERROR_TYPE?
          symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
          valueParameters = [
            KaVariableSignature:
              name = key
              receiverType = null
              returnType = kotlin.Int
              symbol = key: K
              callableId = null
          ]
          callableId = kotlin/collections/get
      typeArgumentsMapping = {
        K -> (kotlin.Int),
        V -> (ERROR_TYPE)
      }
    diagnostic = ERROR<UNRESOLVED_REFERENCE: RECEIVER_TYPE_ERROR with get>
    isInBestCandidates = false
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = name
          receiverType = null
          returnType = kotlin.String
          symbol = name: kotlin.String
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.text.MatchGroupCollection
          returnType = kotlin.text.MatchGroup?
          symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
          valueParameters = [
            KaVariableSignature:
              name = name
              receiverType = null
              returnType = kotlin.String
              symbol = name: kotlin.String
              callableId = null
          ]
          callableId = kotlin/text/get
      typeArgumentsMapping = {}
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but String was expected>
    isInBestCandidates = false

KtNameReferenceExpression(111,114): 'get'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = index
          receiverType = null
          returnType = kotlin.Int
          symbol = index: kotlin.Int
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.get
      typeArgumentsMapping = {}
    isInBestCandidates = true
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = key
          receiverType = null
          returnType = kotlin.Int
          symbol = key: K
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
          returnType = ERROR_TYPE?
          symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
          valueParameters = [
            KaVariableSignature:
              name = key
              receiverType = null
              returnType = kotlin.Int
              symbol = key: K
              callableId = null
          ]
          callableId = kotlin/collections/get
      typeArgumentsMapping = {
        K -> (kotlin.Int),
        V -> (ERROR_TYPE)
      }
    diagnostic = ERROR<UNRESOLVED_REFERENCE: RECEIVER_TYPE_ERROR with get>
    isInBestCandidates = false
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        implicitIndex -> (KaVariableSignature:
          name = name
          receiverType = null
          returnType = kotlin.String
          symbol = name: kotlin.String
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.text.MatchGroupCollection
          returnType = kotlin.text.MatchGroup?
          symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
          valueParameters = [
            KaVariableSignature:
              name = name
              receiverType = null
              returnType = kotlin.String
              symbol = name: kotlin.String
              callableId = null
          ]
          callableId = kotlin/text/get
      typeArgumentsMapping = {}
    diagnostic = ERROR<UNRESOLVED_REFERENCE: RECEIVER_TYPE_ERROR with get>
    isInBestCandidates = false

KtValueArgumentList(114,129): '(implicitIndex)'
  NO_CANDIDATES

KtValueArgument(115,128): 'implicitIndex'
  NO_CANDIDATES

KtNameReferenceExpression(115,128): 'implicitIndex'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = implicitIndex
          receiverType = null
          returnType = kotlin.Int
          symbol = val implicitIndex: kotlin.Int
          callableId = null
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNamedFunction(133,201): 'fun foo(i: Int, list: MutableList<Int>) {'
  NO_CANDIDATES

KtParameterList(140,172): '(i: Int, list: MutableList<Int>)'
  NO_CANDIDATES

KtParameter(141,147): 'i: Int'
  NO_CANDIDATES

KtTypeReference(144,147): 'Int'
  NO_CANDIDATES

KtUserType(144,147): 'Int'
  NO_CANDIDATES

KtNameReferenceExpression(144,147): 'Int'
  NO_CANDIDATES

KtParameter(149,171): 'list: MutableList<Int>'
  NO_CANDIDATES

KtTypeReference(155,171): 'MutableList<Int>'
  NO_CANDIDATES

KtUserType(155,171): 'MutableList<Int>'
  NO_CANDIDATES

KtNameReferenceExpression(155,166): 'MutableList'
  NO_CANDIDATES

KtTypeArgumentList(166,171): '<Int>'
  NO_CANDIDATES

KtTypeProjection(167,170): 'Int'
  NO_CANDIDATES

KtTypeReference(167,170): 'Int'
  NO_CANDIDATES

KtUserType(167,170): 'Int'
  NO_CANDIDATES

KtNameReferenceExpression(167,170): 'Int'
  NO_CANDIDATES

KtBlockExpression(173,201): '{'
  NO_CANDIDATES

KtCallExpression(179,199): 'foo(--list[i], list)'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        --list[i] -> (KaVariableSignature:
          name = i
          receiverType = null
          returnType = kotlin.Int
          symbol = i: kotlin.Int
          callableId = null),
        list -> (KaVariableSignature:
          name = list
          receiverType = null
          returnType = kotlin.collections.MutableList<kotlin.Int>
          symbol = list: kotlin.collections.MutableList<kotlin.Int>
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /foo(i: kotlin.Int, list: kotlin.collections.MutableList<kotlin.Int>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = i
              receiverType = null
              returnType = kotlin.Int
              symbol = i: kotlin.Int
              callableId = null,
            KaVariableSignature:
              name = list
              receiverType = null
              returnType = kotlin.collections.MutableList<kotlin.Int>
              symbol = list: kotlin.collections.MutableList<kotlin.Int>
              callableId = null
          ]
          callableId = /foo
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtNameReferenceExpression(179,182): 'foo'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        --list[i] -> (KaVariableSignature:
          name = i
          receiverType = null
          returnType = kotlin.Int
          symbol = i: kotlin.Int
          callableId = null),
        list -> (KaVariableSignature:
          name = list
          receiverType = null
          returnType = kotlin.collections.MutableList<kotlin.Int>
          symbol = list: kotlin.collections.MutableList<kotlin.Int>
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /foo(i: kotlin.Int, list: kotlin.collections.MutableList<kotlin.Int>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = i
              receiverType = null
              returnType = kotlin.Int
              symbol = i: kotlin.Int
              callableId = null,
            KaVariableSignature:
              name = list
              receiverType = null
              returnType = kotlin.collections.MutableList<kotlin.Int>
              symbol = list: kotlin.collections.MutableList<kotlin.Int>
              callableId = null
          ]
          callableId = /foo
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtValueArgumentList(182,199): '(--list[i], list)'
  NO_CANDIDATES

KtValueArgument(183,192): '--list[i]'
  NO_CANDIDATES

KtPrefixExpression(183,192): '--list[i]'
  KaApplicableCallCandidateInfo:
    candidate = KaCompoundArrayAccessCall:
      compoundOperation = KaCompoundUnaryOperation:
        kind = DEC
        operationPartiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          dispatchReceiver = KaExplicitReceiverValue:
            expression = list[i]
            isSafeNavigation = false
            type = kotlin.Int
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = kotlin.Int
            symbol = kotlin/Int.dec(<dispatch receiver>: kotlin.Int): kotlin.Int
            valueParameters = []
            callableId = kotlin/Int.dec
        precedence = PREFIX
      getPartiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.get
      indexArguments = [
        i
      ]
      setPartiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.set(<dispatch receiver>: kotlin.collections.MutableList<E>, index: kotlin.Int, element: E): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null,
            KaVariableSignature:
              name = element
              receiverType = null
              returnType = kotlin.Int
              symbol = element: E
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.set
    isInBestCandidates = true

KtOperationReferenceExpression(183,185): '--'
  KaApplicableCallCandidateInfo:
    candidate = KaCompoundArrayAccessCall:
      compoundOperation = KaCompoundUnaryOperation:
        kind = DEC
        operationPartiallyAppliedSymbol = KaPartiallyAppliedSymbol:
          dispatchReceiver = KaExplicitReceiverValue:
            expression = list[i]
            isSafeNavigation = false
            type = kotlin.Int
          extensionReceiver = null
          signature = KaFunctionSignature:
            receiverType = null
            returnType = kotlin.Int
            symbol = kotlin/Int.dec(<dispatch receiver>: kotlin.Int): kotlin.Int
            valueParameters = []
            callableId = kotlin/Int.dec
        precedence = PREFIX
      getPartiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.get
      indexArguments = [
        i
      ]
      setPartiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.set(<dispatch receiver>: kotlin.collections.MutableList<E>, index: kotlin.Int, element: E): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null,
            KaVariableSignature:
              name = element
              receiverType = null
              returnType = kotlin.Int
              symbol = element: E
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.set
    isInBestCandidates = true

KtArrayAccessExpression(185,192): 'list[i]'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        i -> (KaVariableSignature:
          name = index
          receiverType = null
          returnType = kotlin.Int
          symbol = index: kotlin.Int
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Int
          symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
          valueParameters = [
            KaVariableSignature:
              name = index
              receiverType = null
              returnType = kotlin.Int
              symbol = index: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/collections/MutableList.get
      typeArgumentsMapping = {}
    isInBestCandidates = true
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        i -> (KaVariableSignature:
          name = key
          receiverType = null
          returnType = kotlin.Int
          symbol = key: K
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
          returnType = ERROR_TYPE?
          symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
          valueParameters = [
            KaVariableSignature:
              name = key
              receiverType = null
              returnType = kotlin.Int
              symbol = key: K
              callableId = null
          ]
          callableId = kotlin/collections/get
      typeArgumentsMapping = {
        K -> (kotlin.Int),
        V -> (ERROR_TYPE)
      }
    diagnostic = ERROR<UNRESOLVED_REFERENCE: RECEIVER_TYPE_ERROR with get>
    isInBestCandidates = false
  
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        i -> (KaVariableSignature:
          name = name
          receiverType = null
          returnType = kotlin.String
          symbol = name: kotlin.String
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = KaExplicitReceiverValue:
          expression = list
          isSafeNavigation = false
          type = kotlin.collections.MutableList<kotlin.Int>
        signature = KaFunctionSignature:
          receiverType = kotlin.text.MatchGroupCollection
          returnType = kotlin.text.MatchGroup?
          symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
          valueParameters = [
            KaVariableSignature:
              name = name
              receiverType = null
              returnType = kotlin.String
              symbol = name: kotlin.String
              callableId = null
          ]
          callableId = kotlin/text/get
      typeArgumentsMapping = {}
    diagnostic = ERROR<TYPE_MISMATCH: Type mismatch: inferred type is Int but String was expected>
    isInBestCandidates = false

KtNameReferenceExpression(185,189): 'list'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = list
          receiverType = null
          returnType = kotlin.collections.MutableList<kotlin.Int>
          symbol = list: kotlin.collections.MutableList<kotlin.Int>
          callableId = null
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtContainerNode(189,192): '[i]'
  NO_CANDIDATES

KtNameReferenceExpression(190,191): 'i'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = i
          receiverType = null
          returnType = kotlin.Int
          symbol = i: kotlin.Int
          callableId = null
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true

KtValueArgument(194,198): 'list'
  NO_CANDIDATES

KtNameReferenceExpression(194,198): 'list'
  KaApplicableCallCandidateInfo:
    candidate = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = list
          receiverType = null
          returnType = kotlin.collections.MutableList<kotlin.Int>
          symbol = list: kotlin.collections.MutableList<kotlin.Int>
          callableId = null
      simpleAccess = Read
      typeArgumentsMapping = {}
    isInBestCandidates = true