/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.test.cases.generated.cases.components.typeProvider;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.fir.test.configurators.AnalysisApiFirTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.typeProvider.AbstractVarargArrayTypeTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/typeProvider/varargArrayType")
@TestDataPath("$PROJECT_ROOT")
public class FirIdeNormalAnalysisSourceModuleVarargArrayTypeTestGenerated extends AbstractVarargArrayTypeTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFirTestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fir,
        TestModuleKind.Source,
        AnalysisSessionMode.Normal,
        AnalysisApiMode.Ide
      )
    );
  }

  @Test
  public void testAllFilesPresentInVarargArrayType() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/typeProvider/varargArrayType"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @Test
  @TestMetadata("genericVarargParameter.kt")
  public void testGenericVarargParameter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/genericVarargParameter.kt");
  }

  @Test
  @TestMetadata("intVarargParameter.kt")
  public void testIntVarargParameter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/intVarargParameter.kt");
  }

  @Test
  @TestMetadata("nonVarargParameter.kt")
  public void testNonVarargParameter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/nonVarargParameter.kt");
  }

  @Test
  @TestMetadata("notFirstVarargParameters.kt")
  public void testNotFirstVarargParameters() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/notFirstVarargParameters.kt");
  }

  @Test
  @TestMetadata("nullableIntVarargParameter.kt")
  public void testNullableIntVarargParameter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/nullableIntVarargParameter.kt");
  }

  @Test
  @TestMetadata("nullableUIntVarargParameter.kt")
  public void testNullableUIntVarargParameter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/nullableUIntVarargParameter.kt");
  }

  @Test
  @TestMetadata("stringVarargParameter.kt")
  public void testStringVarargParameter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/stringVarargParameter.kt");
  }

  @Test
  @TestMetadata("twoVarargParameters.kt")
  public void testTwoVarargParameters() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/twoVarargParameters.kt");
  }

  @Test
  @TestMetadata("uIntVarargParameter.kt")
  public void testUIntVarargParameter() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/uIntVarargParameter.kt");
  }

  @Test
  @TestMetadata("varargParameterInAnonymousFunction.kt")
  public void testVarargParameterInAnonymousFunction() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/varargParameterInAnonymousFunction.kt");
  }

  @Test
  @TestMetadata("varargParameterWithLocalType.kt")
  public void testVarargParameterWithLocalType() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/varargParameterWithLocalType.kt");
  }

  @Test
  @TestMetadata("varargParameterWithNoType.kt")
  public void testVarargParameterWithNoType() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/varargParameterWithNoType.kt");
  }

  @Test
  @TestMetadata("varargWithUserClass.kt")
  public void testVarargWithUserClass() {
    runTest("analysis/analysis-api/testData/components/typeProvider/varargArrayType/varargWithUserClass.kt");
  }
}
