FILE: inPropertyDeclaration.kt
    public final fun <A, R> context(context: R|A|, block: R|@ContextFunctionTypeParams (A) -> R|): R|R| {
        ^context R|<local>/block|.R|SubstitutionOverride<kotlin/Function1.invoke: R|R|>|(R|<local>/context|)
    }
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun foo(a: R|kotlin/String|): R|kotlin/String| {
            ^foo R|<local>/a|
        }

        public final fun usage1(): R|kotlin/Unit| {
            R|/prop1|
            R|/prop2|
        }

    }
    context(c: R|A|)
    public final var prop1: R|kotlin/String|
        public get(): R|kotlin/String| {
            ^ R|<local>/c|.R|/A.foo|(String())
        }
        public set(value: R|kotlin/String|): R|kotlin/Unit| {
            R|<local>/c|.R|/A.foo|(String())
        }
    context(c: R|A|)
    public final val prop2: R|kotlin/String|
        public get(): R|kotlin/String| {
            ^ R|<local>/c|.R|/A.foo|(String())
        }
    public final fun usage2(c: R|A|): R|kotlin/Unit| {
        R|/context|<R|A|, R|kotlin/String|>(R|<local>/c|, <L> = context@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
            R|/prop1|
            ^ R|/prop2|
        }
        )
    }
    public final fun usage3(c: R|A|): R|kotlin/Unit| {
        R|kotlin/with|<R|A|, R|kotlin/String|>(R|<local>/c|, <L> = with@fun R|A|.<anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|/prop1|
            ^ R|/prop2|
        }
        )
    }
    context(c: R|A|)
    public final fun usage4(): R|kotlin/Unit| {
        R|/prop1|
        R|/prop2|
    }
