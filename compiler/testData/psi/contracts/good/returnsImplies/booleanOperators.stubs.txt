FILE[kind=Facade[packageFqName=<root>, facadeFqName=BooleanOperatorsKt]]
  PACKAGE_DIRECTIVE
  IMPORT_LIST
    IMPORT_DIRECTIVE[importedFqName=kotlin.contracts, isAllUnder=true, isValid=true]
      DOT_QUALIFIED_EXPRESSION
        REFERENCE_EXPRESSION[referencedName=kotlin]
        REFERENCE_EXPRESSION[referencedName=contracts]
  FUN[fqName=myRequire, hasBody=true, hasNoExpressionBody=true, hasTypeParameterListBeforeFunctionName=false, isExtension=false, isTopLevel=true, mayHaveContract=true, name=myRequire]
    MODIFIER_LIST[]
      ANNOTATION_ENTRY[hasValueArguments=true, shortName=OptIn]
        CONSTRUCTOR_CALLEE
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION[referencedName=OptIn]
        VALUE_ARGUMENT_LIST
          VALUE_ARGUMENT[isSpread=false]
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION[referencedName=ExperimentalContracts]
    VALUE_PARAMETER_LIST
      VALUE_PARAMETER[fqName=null, hasDefaultValue=false, hasValOrVar=false, isMutable=false, name=b]
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION[referencedName=Boolean]
  FUN[fqName=myRequireAnd, hasBody=true, hasNoExpressionBody=true, hasTypeParameterListBeforeFunctionName=false, isExtension=false, isTopLevel=true, mayHaveContract=true, name=myRequireAnd]
    MODIFIER_LIST[]
      ANNOTATION_ENTRY[hasValueArguments=true, shortName=OptIn]
        CONSTRUCTOR_CALLEE
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION[referencedName=OptIn]
        VALUE_ARGUMENT_LIST
          VALUE_ARGUMENT[isSpread=false]
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION[referencedName=ExperimentalContracts]
    VALUE_PARAMETER_LIST
      VALUE_PARAMETER[fqName=null, hasDefaultValue=false, hasValOrVar=false, isMutable=false, name=b1]
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION[referencedName=Boolean]
      VALUE_PARAMETER[fqName=null, hasDefaultValue=false, hasValOrVar=false, isMutable=false, name=b2]
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION[referencedName=Boolean]
  FUN[fqName=myRequireOr, hasBody=true, hasNoExpressionBody=true, hasTypeParameterListBeforeFunctionName=false, isExtension=false, isTopLevel=true, mayHaveContract=true, name=myRequireOr]
    MODIFIER_LIST[]
      ANNOTATION_ENTRY[hasValueArguments=true, shortName=OptIn]
        CONSTRUCTOR_CALLEE
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION[referencedName=OptIn]
        VALUE_ARGUMENT_LIST
          VALUE_ARGUMENT[isSpread=false]
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION[referencedName=ExperimentalContracts]
    VALUE_PARAMETER_LIST
      VALUE_PARAMETER[fqName=null, hasDefaultValue=false, hasValOrVar=false, isMutable=false, name=b1]
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION[referencedName=Boolean]
      VALUE_PARAMETER[fqName=null, hasDefaultValue=false, hasValOrVar=false, isMutable=false, name=b2]
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION[referencedName=Boolean]
  FUN[fqName=myRequireNot, hasBody=true, hasNoExpressionBody=true, hasTypeParameterListBeforeFunctionName=false, isExtension=false, isTopLevel=true, mayHaveContract=true, name=myRequireNot]
    MODIFIER_LIST[]
      ANNOTATION_ENTRY[hasValueArguments=true, shortName=OptIn]
        CONSTRUCTOR_CALLEE
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION[referencedName=OptIn]
        VALUE_ARGUMENT_LIST
          VALUE_ARGUMENT[isSpread=false]
            CLASS_LITERAL_EXPRESSION
              REFERENCE_EXPRESSION[referencedName=ExperimentalContracts]
    VALUE_PARAMETER_LIST
      VALUE_PARAMETER[fqName=null, hasDefaultValue=false, hasValOrVar=false, isMutable=false, name=b]
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION[referencedName=Boolean]
