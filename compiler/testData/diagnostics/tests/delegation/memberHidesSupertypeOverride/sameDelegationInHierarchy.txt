package

public fun box(): kotlin.String

public interface Base {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Delegate : Base {
    public constructor Delegate()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class MyClass : Base {
    public constructor MyClass()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*delegation*/ fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
