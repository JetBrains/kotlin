
RAW_FIR:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] enum class Foo : R|kotlin/Enum<Foo>| {
        private [RAW_FIR] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @Anno() public final static [RAW_FIR] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = LAZY_EXPRESSION
        public final static [RAW_FIR] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] fun valueOf([RAW_FIR] value: R|kotlin/String|): R|Foo| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [RAW_FIR] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

IMPORTS:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] enum class Foo : R|kotlin/Enum<Foo>| {
        private [RAW_FIR] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @Anno() public final static [RAW_FIR] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = LAZY_EXPRESSION
        public final static [RAW_FIR] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] fun valueOf([RAW_FIR] value: R|kotlin/String|): R|Foo| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [RAW_FIR] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] enum class Foo : R|kotlin/Enum<Foo>| {
        private [RAW_FIR] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @Anno() public final static [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = LAZY_EXPRESSION
        public final static [RAW_FIR] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] fun valueOf([RAW_FIR] value: R|kotlin/String|): R|Foo| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [RAW_FIR] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

COMPANION_GENERATION:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] enum class Foo : R|kotlin/Enum<Foo>| {
        private [RAW_FIR] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @Anno() public final static [COMPANION_GENERATION] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = LAZY_EXPRESSION
        public final static [RAW_FIR] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] fun valueOf([RAW_FIR] value: R|kotlin/String|): R|Foo| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [RAW_FIR] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

SUPER_TYPES:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] enum class Foo : R|kotlin/Enum<Foo>| {
        private [RAW_FIR] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @Anno() public final static [SUPER_TYPES] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = LAZY_EXPRESSION
        public final static [RAW_FIR] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] fun valueOf([RAW_FIR] value: R|kotlin/String|): R|Foo| {
        }

        public final static [RAW_FIR] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [RAW_FIR] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

TYPES:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [SUPER_TYPES] enum class Foo : R|kotlin/Enum<Foo>| {
        private [SUPER_TYPES] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @R|Anno|() public final static [TYPES] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = LAZY_EXPRESSION
        public final static [SUPER_TYPES] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [SUPER_TYPES] [ContainingClassKey=Foo] fun valueOf([SUPER_TYPES] value: R|kotlin/String|): R|Foo| {
        }

        public final static [SUPER_TYPES] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [SUPER_TYPES] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

STATUS:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [SUPER_TYPES] enum class Foo : R|kotlin/Enum<Foo>| {
        private [TYPES] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @R|Anno|() public final static [STATUS] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = LAZY_EXPRESSION
        public final static [TYPES] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [TYPES] [ContainingClassKey=Foo] fun valueOf([TYPES] value: R|kotlin/String|): R|Foo| {
        }

        public final static [TYPES] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [TYPES] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

EXPECT_ACTUAL_MATCHING:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [SUPER_TYPES] enum class Foo : R|kotlin/Enum<Foo>| {
        private [TYPES] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @R|Anno|() public final static [EXPECT_ACTUAL_MATCHING] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
            private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Foo|>()
            }

        }

        public final static [TYPES] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [TYPES] [ContainingClassKey=Foo] fun valueOf([TYPES] value: R|kotlin/String|): R|Foo| {
        }

        public final static [TYPES] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [TYPES] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [STATUS] enum class Foo : R|kotlin/Enum<Foo>| {
        private [STATUS] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @R|Anno|() public final static [ARGUMENTS_OF_ANNOTATIONS] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
            private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Foo|>()
            }

        }

        public final static [STATUS] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] fun valueOf([STATUS] value: R|kotlin/String|): R|Foo| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [STATUS] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

CONTRACTS:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [STATUS] enum class Foo : R|kotlin/Enum<Foo>| {
        private [STATUS] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @R|Anno|() public final static [CONTRACTS] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
            private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Foo|>()
            }

        }

        public final static [STATUS] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] fun valueOf([STATUS] value: R|kotlin/String|): R|Foo| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [STATUS] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: enumEntry.kt
    public? final? [RAW_FIR] annotation class Anno : R|kotlin/Annotation| {
        public? [RAW_FIR] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [STATUS] enum class Foo : R|kotlin/Enum<Foo>| {
        private [STATUS] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @R|Anno|() public final static [IMPLICIT_TYPES_BODY_RESOLVE] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
            private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Foo|>()
            }

        }

        public final static [STATUS] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] fun valueOf([STATUS] value: R|kotlin/String|): R|Foo| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [STATUS] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: enumEntry.kt
    public final [SUPER_TYPES] annotation class Anno : R|kotlin/Annotation| {
        public [STATUS] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [STATUS] enum class Foo : R|kotlin/Enum<Foo>| {
        private [STATUS] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @R|Anno|() public final static [ANNOTATIONS_ARGUMENTS_MAPPING] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
            private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Foo|>()
            }

        }

        public final static [STATUS] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] fun valueOf([STATUS] value: R|kotlin/String|): R|Foo| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [STATUS] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

BODY_RESOLVE:
FILE: enumEntry.kt
    public final [SUPER_TYPES] annotation class Anno : R|kotlin/Annotation| {
        public [STATUS] [ContainingClassKey=Anno] constructor(): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [STATUS] enum class Foo : R|kotlin/Enum<Foo>| {
        private [STATUS] [ContainingClassKey=Foo] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Enum<Foo>|>
        }

        @R|Anno|() public final static [BODY_RESOLVE] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
            private [BODY_RESOLVE] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Foo|>()
            }

        }

        public final static [STATUS] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] fun valueOf([STATUS] value: R|kotlin/String|): R|Foo| {
        }

        public final static [STATUS] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [STATUS] get(): R|kotlin/enums/EnumEntries<Foo>|

    }

FILE RAW TO BODY:
FILE: enumEntry.kt
    public final [BODY_RESOLVE] annotation class Anno : R|kotlin/Annotation| {
        public [BODY_RESOLVE] [ContainingClassKey=Anno] constructor(): R|Anno| {
            super<R|kotlin/Any|>()
        }

    }
    public final [BODY_RESOLVE] enum class Foo : R|kotlin/Enum<Foo>| {
        private [BODY_RESOLVE] [ContainingClassKey=Foo] constructor(): R|Foo| {
            super<R|kotlin/Enum<Foo>|>()
        }

        @R|Anno|() public final static [BODY_RESOLVE] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
            private [BODY_RESOLVE] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Foo|>()
            }

        }

        public final static [BODY_RESOLVE] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
        }

        public final static [BODY_RESOLVE] [ContainingClassKey=Foo] fun valueOf([BODY_RESOLVE] value: R|kotlin/String|): R|Foo| {
        }

        public final static [BODY_RESOLVE] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
            public [BODY_RESOLVE] get(): R|kotlin/enums/EnumEntries<Foo>|

    }
