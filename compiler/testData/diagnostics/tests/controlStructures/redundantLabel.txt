package

public fun testAnnotatedLambdaLabel(): () -> kotlin.Unit
public fun testAnonymousFunctionLabel(): () -> kotlin.Unit
public fun testAnonymousObjectLabel(): kotlin.Any
public fun testDoWhileLoopLabel(): kotlin.Unit
public fun testForLoopLabel(/*0*/ xs: kotlin.collections.List<kotlin.Any>): kotlin.Unit
public fun testHighOrderFunctionCallLabel(): kotlin.Unit
public fun testLabelBoundToInvokeOperatorExpression(): kotlin.Int
public fun testLabelBoundToLambda(): kotlin.Int
public fun testLambdaLabel(): () -> kotlin.Int
public fun testParenthesizedLambdaLabel(): () -> kotlin.Unit
public fun testValLabel(): kotlin.Unit
public fun testWhileLoopLabel(): kotlin.Unit

@kotlin.annotation.Target(allowedTargets = {AnnotationTarget.EXPRESSION}) @kotlin.annotation.Retention(value = AnnotationRetention.SOURCE) public final annotation class Ann : kotlin.Annotation {
    public constructor Ann()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
