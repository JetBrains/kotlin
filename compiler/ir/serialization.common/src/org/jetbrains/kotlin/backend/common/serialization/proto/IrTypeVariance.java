// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf enum {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeVariance}
 *
 * <pre>
 * Should we import metadata variance, or better stay separate?
 * </pre>
 */
public enum IrTypeVariance
    implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
  /**
   * <code>IN = 0;</code>
   */
  IN(0, 0),
  /**
   * <code>OUT = 1;</code>
   */
  OUT(1, 1),
  /**
   * <code>INV = 2;</code>
   */
  INV(2, 2),
  ;

  /**
   * <code>IN = 0;</code>
   */
  public static final int IN_VALUE = 0;
  /**
   * <code>OUT = 1;</code>
   */
  public static final int OUT_VALUE = 1;
  /**
   * <code>INV = 2;</code>
   */
  public static final int INV_VALUE = 2;


  public final int getNumber() { return value; }

  public static IrTypeVariance valueOf(int value) {
    switch (value) {
      case 0: return IN;
      case 1: return OUT;
      case 2: return INV;
      default: return null;
    }
  }

  public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeVariance>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeVariance>
      internalValueMap =
        new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrTypeVariance>() {
          public IrTypeVariance findValueByNumber(int number) {
            return IrTypeVariance.valueOf(number);
          }
        };

  private final int value;

  private IrTypeVariance(int index, int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeVariance)
}
