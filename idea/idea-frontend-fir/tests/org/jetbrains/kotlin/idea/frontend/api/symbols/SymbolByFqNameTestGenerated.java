/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.frontend.api.symbols;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/idea-frontend-fir/testData/symbols/symbolByFqName")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class SymbolByFqNameTestGenerated extends AbstractSymbolByFqNameTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInSymbolByFqName() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/symbols/symbolByFqName"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @TestMetadata("class.kt")
    public void testClass() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/class.kt");
    }

    @TestMetadata("classFromJdk.kt")
    public void testClassFromJdk() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/classFromJdk.kt");
    }

    @TestMetadata("enumEntry.kt")
    public void testEnumEntry() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/enumEntry.kt");
    }

    @TestMetadata("fileWalkDirectionEnum.kt")
    public void testFileWalkDirectionEnum() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/fileWalkDirectionEnum.kt");
    }

    @TestMetadata("iterator.kt")
    public void testIterator() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/iterator.kt");
    }

    @TestMetadata("listOf.kt")
    public void testListOf() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/listOf.kt");
    }

    @TestMetadata("memberFunction.kt")
    public void testMemberFunction() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/memberFunction.kt");
    }

    @TestMetadata("memberFunctionWithOverloads.kt")
    public void testMemberFunctionWithOverloads() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/memberFunctionWithOverloads.kt");
    }

    @TestMetadata("nestedClass.kt")
    public void testNestedClass() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbols/symbolByFqName/nestedClass.kt");
    }
}
