== f ==
fun f() {
    class LocalClass() {
        fun f() {
            val x = ""

            fun loc() {
                val x3 = ""
            }
        }
    }
}
---------------------
L0:
  1 <START>
  2 mark({ class LocalClass() { fun f() { val x = "" fun loc() { val x3 = "" } } } })
    jmp?(L2)                                                                             NEXT:[<END>, d(fun f() { val x = "" fun loc() { val x3 = "" } })]
    d(fun f() { val x = "" fun loc() { val x3 = "" } })                                  NEXT:[<SINK>]
L1:
L2:
  1 <END>                                                                                NEXT:[<SINK>]                                                                               PREV:[jmp?(L2)]
error:
    <ERROR>                                                                              PREV:[]
sink:
    <SINK>                                                                               PREV:[<ERROR>, <END>, d(fun f() { val x = "" fun loc() { val x3 = "" } })]
=====================
== f ==
fun f() {
            val x = ""

            fun loc() {
                val x3 = ""
            }
        }
---------------------
L3:
  3 <START>
  4 mark({ val x = "" fun loc() { val x3 = "" } })
    v(val x = "")
    mark("")
    r("")
    w(x)
    jmp?(L5)                                          NEXT:[<END>, d(fun loc() { val x3 = "" })]
    d(fun loc() { val x3 = "" })                      NEXT:[<SINK>]
L4:
L5:
  3 <END>                                             NEXT:[<SINK>]                                            PREV:[jmp?(L5)]
error:
    <ERROR>                                           PREV:[]
sink:
    <SINK>                                            PREV:[<ERROR>, <END>, d(fun loc() { val x3 = "" })]
=====================
== loc ==
fun loc() {
                val x3 = ""
            }
---------------------
L6:
  5 <START>
  6 mark({ val x3 = "" })
    v(val x3 = "")
    mark("")
    r("")
    w(x3)
L7:
  5 <END>                    NEXT:[<SINK>]
error:
    <ERROR>                  PREV:[]
sink:
    <SINK>                   PREV:[<ERROR>, <END>]
=====================
