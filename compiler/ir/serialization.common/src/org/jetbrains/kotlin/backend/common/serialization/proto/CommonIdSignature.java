// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature}
 */
public  final class CommonIdSignature extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        CommonIdSignature, CommonIdSignature.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature)
    CommonIdSignatureOrBuilder {
  private CommonIdSignature() {
    packageFqName_ = emptyIntList();
    declarationFqName_ = emptyIntList();
  }
  private int bitField0_;
  public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.protobuf.Internal.IntList packageFqName_;
  /**
   * <code>repeated int32 package_fq_name = 1;</code>
   * @return A list containing the packageFqName.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getPackageFqNameList() {
    return packageFqName_;
  }
  /**
   * <code>repeated int32 package_fq_name = 1;</code>
   * @return The count of packageFqName.
   */
  @java.lang.Override
  public int getPackageFqNameCount() {
    return packageFqName_.size();
  }
  /**
   * <code>repeated int32 package_fq_name = 1;</code>
   * @param index The index of the element to return.
   * @return The packageFqName at the given index.
   */
  @java.lang.Override
  public int getPackageFqName(int index) {
    return packageFqName_.getInt(index);
  }
  private int packageFqNameMemoizedSerializedSize = -1;
  private void ensurePackageFqNameIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = packageFqName_;
    if (!tmp.isModifiable()) {
      packageFqName_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int32 package_fq_name = 1;</code>
   * @param index The index to set the value at.
   * @param value The packageFqName to set.
   */
  private void setPackageFqName(
      int index, int value) {
    ensurePackageFqNameIsMutable();
    packageFqName_.setInt(index, value);
  }
  /**
   * <code>repeated int32 package_fq_name = 1;</code>
   * @param value The packageFqName to add.
   */
  private void addPackageFqName(int value) {
    ensurePackageFqNameIsMutable();
    packageFqName_.addInt(value);
  }
  /**
   * <code>repeated int32 package_fq_name = 1;</code>
   * @param values The packageFqName to add.
   */
  private void addAllPackageFqName(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensurePackageFqNameIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, packageFqName_);
  }
  /**
   * <code>repeated int32 package_fq_name = 1;</code>
   */
  private void clearPackageFqName() {
    packageFqName_ = emptyIntList();
  }

  public static final int DECLARATION_FQ_NAME_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.protobuf.Internal.IntList declarationFqName_;
  /**
   * <code>repeated int32 declaration_fq_name = 2;</code>
   * @return A list containing the declarationFqName.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getDeclarationFqNameList() {
    return declarationFqName_;
  }
  /**
   * <code>repeated int32 declaration_fq_name = 2;</code>
   * @return The count of declarationFqName.
   */
  @java.lang.Override
  public int getDeclarationFqNameCount() {
    return declarationFqName_.size();
  }
  /**
   * <code>repeated int32 declaration_fq_name = 2;</code>
   * @param index The index of the element to return.
   * @return The declarationFqName at the given index.
   */
  @java.lang.Override
  public int getDeclarationFqName(int index) {
    return declarationFqName_.getInt(index);
  }
  private int declarationFqNameMemoizedSerializedSize = -1;
  private void ensureDeclarationFqNameIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = declarationFqName_;
    if (!tmp.isModifiable()) {
      declarationFqName_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int32 declaration_fq_name = 2;</code>
   * @param index The index to set the value at.
   * @param value The declarationFqName to set.
   */
  private void setDeclarationFqName(
      int index, int value) {
    ensureDeclarationFqNameIsMutable();
    declarationFqName_.setInt(index, value);
  }
  /**
   * <code>repeated int32 declaration_fq_name = 2;</code>
   * @param value The declarationFqName to add.
   */
  private void addDeclarationFqName(int value) {
    ensureDeclarationFqNameIsMutable();
    declarationFqName_.addInt(value);
  }
  /**
   * <code>repeated int32 declaration_fq_name = 2;</code>
   * @param values The declarationFqName to add.
   */
  private void addAllDeclarationFqName(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureDeclarationFqNameIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, declarationFqName_);
  }
  /**
   * <code>repeated int32 declaration_fq_name = 2;</code>
   */
  private void clearDeclarationFqName() {
    declarationFqName_ = emptyIntList();
  }

  public static final int MEMBER_UNIQ_ID_FIELD_NUMBER = 3;
  private long memberUniqId_;
  /**
   * <code>int64 member_uniq_id = 3;</code>
   * @return Whether the memberUniqId field is set.
   */
  @java.lang.Override
  public boolean hasMemberUniqId() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>int64 member_uniq_id = 3;</code>
   * @return The memberUniqId.
   */
  @java.lang.Override
  public long getMemberUniqId() {
    return memberUniqId_;
  }
  /**
   * <code>int64 member_uniq_id = 3;</code>
   * @param value The memberUniqId to set.
   */
  private void setMemberUniqId(long value) {
    bitField0_ |= 0x00000001;
    memberUniqId_ = value;
  }
  /**
   * <code>int64 member_uniq_id = 3;</code>
   */
  private void clearMemberUniqId() {
    bitField0_ = (bitField0_ & ~0x00000001);
    memberUniqId_ = 0L;
  }

  public static final int FLAGS_FIELD_NUMBER = 4;
  private long flags_;
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @return Whether the flags field is set.
   */
  @java.lang.Override
  public boolean hasFlags() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @return The flags.
   */
  @java.lang.Override
  public long getFlags() {
    return flags_;
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @param value The flags to set.
   */
  private void setFlags(long value) {
    bitField0_ |= 0x00000002;
    flags_ = value;
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   */
  private void clearFlags() {
    bitField0_ = (bitField0_ & ~0x00000002);
    flags_ = 0L;
  }

  public static final int DEBUG_INFO_FIELD_NUMBER = 5;
  private int debugInfo_;
  /**
   * <code>int32 debug_info = 5;</code>
   * @return Whether the debugInfo field is set.
   */
  @java.lang.Override
  public boolean hasDebugInfo() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>int32 debug_info = 5;</code>
   * @return The debugInfo.
   */
  @java.lang.Override
  public int getDebugInfo() {
    return debugInfo_;
  }
  /**
   * <code>int32 debug_info = 5;</code>
   * @param value The debugInfo to set.
   */
  private void setDebugInfo(int value) {
    bitField0_ |= 0x00000004;
    debugInfo_ = value;
  }
  /**
   * <code>int32 debug_info = 5;</code>
   */
  private void clearDebugInfo() {
    bitField0_ = (bitField0_ & ~0x00000004);
    debugInfo_ = 0;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature)
      org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignatureOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>repeated int32 package_fq_name = 1;</code>
     * @return A list containing the packageFqName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPackageFqNameList() {
      return java.util.Collections.unmodifiableList(
          instance.getPackageFqNameList());
    }
    /**
     * <code>repeated int32 package_fq_name = 1;</code>
     * @return The count of packageFqName.
     */
    @java.lang.Override
    public int getPackageFqNameCount() {
      return instance.getPackageFqNameCount();
    }
    /**
     * <code>repeated int32 package_fq_name = 1;</code>
     * @param index The index of the element to return.
     * @return The packageFqName at the given index.
     */
    @java.lang.Override
    public int getPackageFqName(int index) {
      return instance.getPackageFqName(index);
    }
    /**
     * <code>repeated int32 package_fq_name = 1;</code>
     * @param value The packageFqName to set.
     * @return This builder for chaining.
     */
    public Builder setPackageFqName(
        int index, int value) {
      copyOnWrite();
      instance.setPackageFqName(index, value);
      return this;
    }
    /**
     * <code>repeated int32 package_fq_name = 1;</code>
     * @param value The packageFqName to add.
     * @return This builder for chaining.
     */
    public Builder addPackageFqName(int value) {
      copyOnWrite();
      instance.addPackageFqName(value);
      return this;
    }
    /**
     * <code>repeated int32 package_fq_name = 1;</code>
     * @param values The packageFqName to add.
     * @return This builder for chaining.
     */
    public Builder addAllPackageFqName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllPackageFqName(values);
      return this;
    }
    /**
     * <code>repeated int32 package_fq_name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPackageFqName() {
      copyOnWrite();
      instance.clearPackageFqName();
      return this;
    }

    /**
     * <code>repeated int32 declaration_fq_name = 2;</code>
     * @return A list containing the declarationFqName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getDeclarationFqNameList() {
      return java.util.Collections.unmodifiableList(
          instance.getDeclarationFqNameList());
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2;</code>
     * @return The count of declarationFqName.
     */
    @java.lang.Override
    public int getDeclarationFqNameCount() {
      return instance.getDeclarationFqNameCount();
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2;</code>
     * @param index The index of the element to return.
     * @return The declarationFqName at the given index.
     */
    @java.lang.Override
    public int getDeclarationFqName(int index) {
      return instance.getDeclarationFqName(index);
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2;</code>
     * @param value The declarationFqName to set.
     * @return This builder for chaining.
     */
    public Builder setDeclarationFqName(
        int index, int value) {
      copyOnWrite();
      instance.setDeclarationFqName(index, value);
      return this;
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2;</code>
     * @param value The declarationFqName to add.
     * @return This builder for chaining.
     */
    public Builder addDeclarationFqName(int value) {
      copyOnWrite();
      instance.addDeclarationFqName(value);
      return this;
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2;</code>
     * @param values The declarationFqName to add.
     * @return This builder for chaining.
     */
    public Builder addAllDeclarationFqName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllDeclarationFqName(values);
      return this;
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDeclarationFqName() {
      copyOnWrite();
      instance.clearDeclarationFqName();
      return this;
    }

    /**
     * <code>int64 member_uniq_id = 3;</code>
     * @return Whether the memberUniqId field is set.
     */
    @java.lang.Override
    public boolean hasMemberUniqId() {
      return instance.hasMemberUniqId();
    }
    /**
     * <code>int64 member_uniq_id = 3;</code>
     * @return The memberUniqId.
     */
    @java.lang.Override
    public long getMemberUniqId() {
      return instance.getMemberUniqId();
    }
    /**
     * <code>int64 member_uniq_id = 3;</code>
     * @param value The memberUniqId to set.
     * @return This builder for chaining.
     */
    public Builder setMemberUniqId(long value) {
      copyOnWrite();
      instance.setMemberUniqId(value);
      return this;
    }
    /**
     * <code>int64 member_uniq_id = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearMemberUniqId() {
      copyOnWrite();
      instance.clearMemberUniqId();
      return this;
    }

    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return instance.hasFlags();
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return The flags.
     */
    @java.lang.Override
    public long getFlags() {
      return instance.getFlags();
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @param value The flags to set.
     * @return This builder for chaining.
     */
    public Builder setFlags(long value) {
      copyOnWrite();
      instance.setFlags(value);
      return this;
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return This builder for chaining.
     */
    public Builder clearFlags() {
      copyOnWrite();
      instance.clearFlags();
      return this;
    }

    /**
     * <code>int32 debug_info = 5;</code>
     * @return Whether the debugInfo field is set.
     */
    @java.lang.Override
    public boolean hasDebugInfo() {
      return instance.hasDebugInfo();
    }
    /**
     * <code>int32 debug_info = 5;</code>
     * @return The debugInfo.
     */
    @java.lang.Override
    public int getDebugInfo() {
      return instance.getDebugInfo();
    }
    /**
     * <code>int32 debug_info = 5;</code>
     * @param value The debugInfo to set.
     * @return This builder for chaining.
     */
    public Builder setDebugInfo(int value) {
      copyOnWrite();
      instance.setDebugInfo(value);
      return this;
    }
    /**
     * <code>int32 debug_info = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDebugInfo() {
      copyOnWrite();
      instance.clearDebugInfo();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "packageFqName_",
            "declarationFqName_",
            "memberUniqId_",
            "flags_",
            "debugInfo_",
          };
          java.lang.String info =
              "\u0004\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0002\u0000\u0001\'\u0002\'\u0003" +
              "\u1002\u0000\u0004\u1002\u0001\u0005\u1004\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature DEFAULT_INSTANCE;
  static {
    CommonIdSignature defaultInstance = new CommonIdSignature();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      CommonIdSignature.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<CommonIdSignature> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<CommonIdSignature> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
