KtFile: 'labels.kt'
  null

KtPackageDirective(0,0): ''
  null

KtImportList(0,0): ''
  null

KtNamedFunction(0,44): 'fun foo(action: () -> Unit) {'
  null

KtParameterList(7,27): '(action: () -> Unit)'
  null

KtParameter(8,26): 'action: () -> Unit'
  null

KtTypeReference(16,26): '() -> Unit'
  null

KtFunctionType(16,26): '() -> Unit'
  null

KtParameterList(16,18): '()'
  null

KtTypeReference(22,26): 'Unit'
  null

KtUserType(22,26): 'Unit'
  null

KtNameReferenceExpression(22,26): 'Unit'
  null

KtBlockExpression(28,44): '{'
  null

KtCallExpression(34,42): 'action()'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {}
      isImplicitInvoke = true
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = action
          isSafeNavigation = false
          type = kotlin.Function0<kotlin.Unit>
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = kotlin/Function0.invoke(<dispatch receiver>: kotlin.Function0<R>): R
          valueParameters = []
          callableId = kotlin/Function0.invoke
      typeArgumentsMapping = {}

KtNameReferenceExpression(34,40): 'action'
  KaSuccessCallInfo:
    call = KaSimpleVariableAccessCall:
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function0<kotlin.Unit>
          symbol = action: kotlin.Function0<kotlin.Unit>
          callableId = null
      simpleAccess = Read
      typeArgumentsMapping = {}

KtValueArgumentList(40,42): '()'
  null

KtNamedFunction(46,163): 'fun usage() {'
  null

KtParameterList(55,57): '()'
  null

KtBlockExpression(58,163): '{'
  null

KtCallExpression(64,102): 'foo label@{'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        label@{
                return@label
            } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function0<kotlin.Unit>
          symbol = action: kotlin.Function0<kotlin.Unit>
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /foo(action: kotlin.Function0<kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function0<kotlin.Unit>
              symbol = action: kotlin.Function0<kotlin.Unit>
              callableId = null
          ]
          callableId = /foo
      typeArgumentsMapping = {}

KtNameReferenceExpression(64,67): 'foo'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        label@{
                return@label
            } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function0<kotlin.Unit>
          symbol = action: kotlin.Function0<kotlin.Unit>
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /foo(action: kotlin.Function0<kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function0<kotlin.Unit>
              symbol = action: kotlin.Function0<kotlin.Unit>
              callableId = null
          ]
          callableId = /foo
      typeArgumentsMapping = {}

KtLambdaArgument(68,102): 'label@{'
  null

KtLabeledExpression(68,102): 'label@{'
  null

KtContainerNode(68,74): 'label@'
  null

KtLabelReferenceExpression(68,74): 'label@'
  null

KtLambdaExpression(74,102): '{'
  null

KtFunctionLiteral(74,102): '{'
  null

KtBlockExpression(84,96): 'return@label'
  null

KtReturnExpression(84,96): 'return@label'
  null

KtContainerNode(90,96): '@label'
  null

KtLabelReferenceExpression(90,96): '@label'
  null

KtLabeledExpression(108,161): 'myFor@ for (i in 0..1) {'
  null

KtContainerNode(108,114): 'myFor@'
  null

KtLabelReferenceExpression(108,114): 'myFor@'
  null

KtForExpression(115,161): 'for (i in 0..1) {'
  null

KtParameter(120,121): 'i'
  null

KtContainerNode(125,129): '0..1'
  null

KtBinaryExpression(125,129): '0..1'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        1 -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.ranges.IntRange
          symbol = kotlin/Int.rangeTo(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.ranges.IntRange
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/Int.rangeTo
      typeArgumentsMapping = {}

KtConstantExpression(125,126): '0'
  null

KtOperationReferenceExpression(126,128): '..'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        1 -> (KaVariableSignature:
          name = other
          receiverType = null
          returnType = kotlin.Int
          symbol = other: kotlin.Int
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        dispatchReceiver = KaExplicitReceiverValue:
          expression = 0
          isSafeNavigation = false
          type = kotlin.Int
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.ranges.IntRange
          symbol = kotlin/Int.rangeTo(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.ranges.IntRange
          valueParameters = [
            KaVariableSignature:
              name = other
              receiverType = null
              returnType = kotlin.Int
              symbol = other: kotlin.Int
              callableId = null
          ]
          callableId = kotlin/Int.rangeTo
      typeArgumentsMapping = {}

KtConstantExpression(128,129): '1'
  null

KtContainerNodeForControlStructureBody(131,161): '{'
  null

KtBlockExpression(131,161): '{'
  null

KtContinueExpression(141,155): 'continue@myFor'
  null

KtContainerNode(149,155): '@myFor'
  null

KtLabelReferenceExpression(149,155): '@myFor'
  null