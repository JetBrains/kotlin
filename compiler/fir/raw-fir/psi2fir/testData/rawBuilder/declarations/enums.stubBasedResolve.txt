FILE: [ResolvedTo(BODY_RESOLVE)] enums.kt
    public final [ResolvedTo(BODY_RESOLVE)] enum class Order : R|kotlin/Enum<Order>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Order] constructor(): R|Order| {
            super<R|kotlin/Enum<Order>|>()
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Order] enum entry FIRST: R|Order|
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Order] enum entry SECOND: R|Order|
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Order] enum entry THIRD: R|Order|
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Order] fun values(): R|kotlin/Array<Order>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Order] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|Order| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Order] val entries: R|kotlin/enums/EnumEntries<Order>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<Order>|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] enum class Planet : R|kotlin/Enum<Planet>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Planet] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Planet.m] m: R|kotlin/Double|, [ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Planet.r] r: R|kotlin/Double|): R|Planet| {
            super<R|kotlin/Enum<Planet>|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val m: R|kotlin/Double| = R|<local>/m|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Planet] get(): R|kotlin/Double|

        internal final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val r: R|kotlin/Double| = R|<local>/r|
            internal [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Planet] get(): R|kotlin/Double|

        public final static [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Planet] enum entry MERCURY: R|Planet| = LAZY_EXPRESSION
        public final static [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Planet] enum entry VENERA: R|Planet| = LAZY_EXPRESSION
        public final static [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Planet] enum entry EARTH: R|Planet| = LAZY_EXPRESSION
        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] val g: R|kotlin/Double| = LAZY_EXPRESSION
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Planet] get(): R|kotlin/Double|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun sayHello(): R|kotlin/Unit|

        public final companion [ResolvedTo(ANNOTATION_ARGUMENTS)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|Planet.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(CONTRACTS)] val G: <implicit> = LAZY_EXPRESSION
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Companion] get(): <implicit>

        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Planet] fun values(): R|kotlin/Array<Planet>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Planet] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|Planet| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Planet] val entries: R|kotlin/enums/EnumEntries<Planet>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<Planet>|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] enum class PseudoInsn : R|kotlin/Enum<PseudoInsn>| {
        private [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=PseudoInsn] constructor([ResolvedTo(ANNOTATION_ARGUMENTS)] [CorrespondingProperty=/PseudoInsn.signature] signature: R|kotlin/String| = LAZY_EXPRESSION): R|PseudoInsn| {
            LAZY_super<R|kotlin/Enum<PseudoInsn>|>
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val signature: R|kotlin/String| = R|<local>/signature|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PseudoInsn] get(): R|kotlin/String|

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PseudoInsn] enum entry FIX_STACK_BEFORE_JUMP: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>()
            }

        }

        public final static [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=PseudoInsn] enum entry FAKE_ALWAYS_TRUE_IFEQ: R|PseudoInsn| = LAZY_EXPRESSION
        public final static [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=PseudoInsn] enum entry FAKE_ALWAYS_FALSE_IFEQ: R|PseudoInsn| = LAZY_EXPRESSION
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PseudoInsn] enum entry SAVE_STACK_BEFORE_TRY: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>()
            }

        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PseudoInsn] enum entry RESTORE_STACK_IN_TRY_CATCH: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>()
            }

        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PseudoInsn] enum entry STORE_NOT_NULL: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>()
            }

        }

        public final static [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=PseudoInsn] enum entry AS_NOT_NULL: R|PseudoInsn| = LAZY_EXPRESSION
        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun emit(): R|kotlin/Unit| { LAZY_BLOCK }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PseudoInsn] fun values(): R|kotlin/Array<PseudoInsn>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PseudoInsn] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|PseudoInsn| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PseudoInsn] val entries: R|kotlin/enums/EnumEntries<PseudoInsn>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<PseudoInsn>|

    }