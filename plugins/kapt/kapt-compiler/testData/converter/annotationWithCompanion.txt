@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
/**
 * public final annotation class Foo : kotlin/Annotation {
 *
 *   // signature: <init>(Ljava/lang/String;)V
 *   public constructor(value: kotlin/String)
 *
 *   // getter: value()Ljava/lang/String;
 *   public final val value: kotlin/String
 *     public final get
 *
 *   // companion object: Companion
 *
 *   // nested class: Companion
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public abstract @interface Foo {
    @org.jetbrains.annotations.NotNull()
    public static final Foo.Companion Companion = null;

    public abstract java.lang.String value();

    @kotlin.jvm.JvmStatic()
    @org.jetbrains.annotations.NotNull()
    public static Foo create(@org.jetbrains.annotations.NotNull()
    java.lang.String value) {
        return null;
    }

    /**
     * public final companion object Foo.Companion : kotlin/Any {
     *
     *   // signature: <init>()V
     *   private constructor()
     *
     *   // signature: create(Ljava/lang/String;)LFoo;
     *   public final fun create(value: kotlin/String): Foo
     *
     *   // module name: main
     * }
     */
    @kotlin.Metadata()
    public static final class Companion {

        private Companion() {
            super();
        }

        @kotlin.jvm.JvmStatic()
        @org.jetbrains.annotations.NotNull()
        public final Foo create(@org.jetbrains.annotations.NotNull()
        java.lang.String value) {
            return null;
        }
    }
}
