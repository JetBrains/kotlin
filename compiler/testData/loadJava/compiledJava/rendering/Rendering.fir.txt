public open class Rendering : R|kotlin/Any| {
    public constructor(): R|test/Rendering|

    public/*package*/ open inner class A_Plain : R|kotlin/Any| {
        public/*package*/ test/Rendering.constructor(): R|test/Rendering.A_Plain|

    }
    public/*package*/ open inner class B_Super : R|kotlin/Any| {
        public/*package*/ test/Rendering.constructor(): R|test/Rendering.B_Super|

    }
    public/*package*/ open inner class C_Sub : R|test/Rendering.B_Super| {
        public/*package*/ test/Rendering.constructor(): R|test/Rendering.C_Sub|

    }
    public/*package*/ open inner class D_SuperG<T : R|kotlin/Any!|> : R|kotlin/Any| {
        public/*package*/ test/Rendering.constructor<T : R|kotlin/Any!|>(): R|test/Rendering.D_SuperG<T>|

    }
    public/*package*/ open inner class E_SubG : R|test/Rendering.D_SuperG<kotlin/String!>| {
        public/*package*/ test/Rendering.constructor(): R|test/Rendering.E_SubG|

    }
    public/*package*/ abstract interface F_Array : R|kotlin/Any| {
        public abstract fun foo1(strings: R|ft<kotlin/Array<kotlin/String!>, kotlin/Array<out kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo2(strings: R|ft<kotlin/Array<ft<kotlin/collections/MutableList<kotlin/String!>, kotlin/collections/List<kotlin/String!>?>>, kotlin/Array<out ft<kotlin/collections/MutableList<kotlin/String!>, kotlin/collections/List<kotlin/String!>?>>?>|): R|kotlin/Unit|

        public abstract fun foo3(vararg args: R|ft<kotlin/Array<kotlin/Int!>, kotlin/Array<out kotlin/Int!>?>|): R|kotlin/Unit|

        public abstract fun foo4(vararg args: R|ft<kotlin/Array<kotlin/String!>, kotlin/Array<out kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo5(vararg args: R|ft<kotlin/Array<ft<kotlin/collections/MutableList<kotlin/String!>, kotlin/collections/List<kotlin/String!>?>>, kotlin/Array<out ft<kotlin/collections/MutableList<kotlin/String!>, kotlin/collections/List<kotlin/String!>?>>?>|): R|kotlin/Unit|

    }
    public/*package*/ abstract interface G_Collections : R|kotlin/Any| {
        public abstract fun foo1(x: R|ft<kotlin/collections/MutableIterator<kotlin/String!>, kotlin/collections/Iterator<kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo2(x: R|ft<kotlin/collections/MutableIterable<kotlin/String!>, kotlin/collections/Iterable<kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo3(x: R|ft<kotlin/collections/MutableCollection<kotlin/String!>, kotlin/collections/Collection<kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo4(x: R|ft<kotlin/collections/MutableList<kotlin/String!>, kotlin/collections/List<kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo5(x: R|ft<kotlin/collections/MutableSet<kotlin/String!>, kotlin/collections/Set<kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo6(x: R|ft<kotlin/collections/MutableMap<kotlin/String!, kotlin/String!>, kotlin/collections/Map<kotlin/String!, kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo7(x: R|ft<kotlin/collections/MutableMap.MutableEntry<kotlin/String!, kotlin/String!>, kotlin/collections/Map.Entry<kotlin/String!, kotlin/String!>?>|): R|kotlin/Unit|

    }
    public/*package*/ abstract interface H_Raw : R|kotlin/Any| {
        public abstract fun foo1(x: R|ft<Raw type kotlin/collections/MutableList<kotlin/Any?>, kotlin/collections/List<*>?>|): R|kotlin/Unit|

        public abstract fun foo2(x: R|ft<Raw type test/Rendering.D_SuperG<kotlin/Any!>, test/Rendering.D_SuperG<*>?>|): R|kotlin/Unit|

    }
    public/*package*/ abstract interface I_Wildcard : R|kotlin/Any| {
        public abstract fun foo1(x: R|ft<kotlin/collections/MutableList<out kotlin/String!>, kotlin/collections/List<out kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo2(x: R|ft<kotlin/collections/MutableList<in kotlin/String!>, kotlin/collections/MutableList<in kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo3(x: R|ft<kotlin/collections/MutableList<*>, kotlin/collections/List<*>?>|): R|kotlin/Unit|

        public abstract fun foo4(x: R|ft<test/Rendering.D_SuperG<out kotlin/String!>, test/Rendering.D_SuperG<out kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo5(x: R|ft<test/Rendering.D_SuperG<in kotlin/String!>, test/Rendering.D_SuperG<in kotlin/String!>?>|): R|kotlin/Unit|

        public abstract fun foo6(x: R|ft<test/Rendering.D_SuperG<*>, test/Rendering.D_SuperG<*>?>|): R|kotlin/Unit|

    }
}
