/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/diagnostics/tests/multiplatform")
@TestDataPath("$PROJECT_ROOT")
public class FirOldFrontendMPPDiagnosticsWithLightTreeTestGenerated extends AbstractFirLightTreeWithActualizerDiagnosticsTest {
    @Test
    @TestMetadata("actualFakeOverride.kt")
    public void testActualFakeOverride() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualFakeOverride.kt");
    }

    @Test
    @TestMetadata("actualFakeOverrideVirtual.kt")
    public void testActualFakeOverrideVirtual() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualFakeOverrideVirtual.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_defaultParamsIncompatibility.kt")
    public void testActualFakeOverride_defaultParamsIncompatibility() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualFakeOverride_defaultParamsIncompatibility.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams.kt")
    public void testActualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams.kt")
    public void testActualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_substitutionFakeOverride.kt")
    public void testActualFakeOverride_substitutionFakeOverride() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualFakeOverride_substitutionFakeOverride.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_transitiveFakeOverrides_compatible.kt")
    public void testActualFakeOverride_transitiveFakeOverrides_compatible() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualFakeOverride_transitiveFakeOverrides_compatible.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_transitiveFakeOverrides_incompatible.kt")
    public void testActualFakeOverride_transitiveFakeOverrides_incompatible() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualFakeOverride_transitiveFakeOverrides_incompatible.kt");
    }

    @Test
    @TestMetadata("actualTypealiasToSpecialAnnotation.kt")
    public void testActualTypealiasToSpecialAnnotation() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToSpecialAnnotation.kt");
    }

    @Test
    @TestMetadata("actualTypealias_defaultParamsIncompatibility.kt")
    public void testActualTypealias_defaultParamsIncompatibility() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealias_defaultParamsIncompatibility.kt");
    }

    @Test
    public void testAllFilesPresentInMultiplatform() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("arraySort.kt")
    public void testArraySort() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/arraySort.kt");
    }

    @Test
    @TestMetadata("arraySortFixed.kt")
    public void testArraySortFixed() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/arraySortFixed.kt");
    }

    @Test
    @TestMetadata("checkNoActualForExpectInLastModule.kt")
    public void testCheckNoActualForExpectInLastModule() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/checkNoActualForExpectInLastModule.kt");
    }

    @Test
    @TestMetadata("defaultParams_inheritanceByDelegation_negative.kt")
    public void testDefaultParams_inheritanceByDelegation_negative() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/defaultParams_inheritanceByDelegation_negative.kt");
    }

    @Test
    @TestMetadata("defaultParams_inheritanceByDelegation_positive.kt")
    public void testDefaultParams_inheritanceByDelegation_positive() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/defaultParams_inheritanceByDelegation_positive.kt");
    }

    @Test
    @TestMetadata("expectAbstractToString.kt")
    public void testExpectAbstractToString() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectAbstractToString.kt");
    }

    @Test
    @TestMetadata("expectDataObject.kt")
    public void testExpectDataObject() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectDataObject.kt");
    }

    @Test
    @TestMetadata("expectExternal.kt")
    public void testExpectExternal() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectExternal.kt");
    }

    @Test
    @TestMetadata("expectInterfaceApplicability.kt")
    public void testExpectInterfaceApplicability() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectInterfaceApplicability.kt");
    }

    @Test
    @TestMetadata("expectObjectWithAbstractMember.kt")
    public void testExpectObjectWithAbstractMember() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectObjectWithAbstractMember.kt");
    }

    @Test
    @TestMetadata("expectOptInAnnotation.kt")
    public void testExpectOptInAnnotation() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectOptInAnnotation.kt");
    }

    @Test
    @TestMetadata("expectTailrec.kt")
    public void testExpectTailrec() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectTailrec.kt");
    }

    @Test
    @TestMetadata("headerFunInNonHeaderClass.kt")
    public void testHeaderFunInNonHeaderClass() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/headerFunInNonHeaderClass.kt");
    }

    @Test
    @TestMetadata("implDelegatedMember.kt")
    public void testImplDelegatedMember() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implDelegatedMember.kt");
    }

    @Test
    @TestMetadata("implDynamic.kt")
    public void testImplDynamic() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implDynamic.kt");
    }

    @Test
    @TestMetadata("implFakeOverride.kt")
    public void testImplFakeOverride() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implFakeOverride.kt");
    }

    @Test
    @TestMetadata("implicitActualFakeOverride_AbstractMap.kt")
    public void testImplicitActualFakeOverride_AbstractMap() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implicitActualFakeOverride_AbstractMap.kt");
    }

    @Test
    @TestMetadata("implicitActualFakeOverride_simple.kt")
    public void testImplicitActualFakeOverride_simple() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implicitActualFakeOverride_simple.kt");
    }

    @Test
    @TestMetadata("incDecOperatorsInExpectClass.kt")
    public void testIncDecOperatorsInExpectClass() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/incDecOperatorsInExpectClass.kt");
    }

    @Test
    @TestMetadata("incompatibles.kt")
    public void testIncompatibles() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/incompatibles.kt");
    }

    @Test
    @TestMetadata("kt54827.kt")
    public void testKt54827() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt54827.kt");
    }

    @Test
    @TestMetadata("kt58153.kt")
    public void testKt58153() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt58153.kt");
    }

    @Test
    @TestMetadata("kt60902.kt")
    public void testKt60902() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt60902.kt");
    }

    @Test
    @TestMetadata("manyImplMemberNotImplemented.kt")
    public void testManyImplMemberNotImplemented() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/manyImplMemberNotImplemented.kt");
    }

    @Test
    @TestMetadata("manyInterfacesMemberNotImplemented.kt")
    public void testManyInterfacesMemberNotImplemented() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/manyInterfacesMemberNotImplemented.kt");
    }

    @Test
    @TestMetadata("modifierApplicability.kt")
    public void testModifierApplicability() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/modifierApplicability.kt");
    }

    @Test
    @TestMetadata("multipleExpectInterfacesImplementation.kt")
    public void testMultipleExpectInterfacesImplementation() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/multipleExpectInterfacesImplementation.kt");
    }

    @Test
    @TestMetadata("namedArguments.kt")
    public void testNamedArguments() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/namedArguments.kt");
    }

    @Test
    @TestMetadata("optionalExpectationDiagnostics.kt")
    public void testOptionalExpectationDiagnostics() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/optionalExpectationDiagnostics.kt");
    }

    @Test
    @TestMetadata("privateTopLevelDeclarations.kt")
    public void testPrivateTopLevelDeclarations() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/privateTopLevelDeclarations.kt");
    }

    @Test
    @TestMetadata("sealedClassWithPrivateConstructor.kt")
    public void testSealedClassWithPrivateConstructor() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedClassWithPrivateConstructor.kt");
    }

    @Test
    @TestMetadata("sealedTypeAlias.kt")
    public void testSealedTypeAlias() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedTypeAlias.kt");
    }

    @Test
    @TestMetadata("sealedTypeAliasTopLevel.kt")
    public void testSealedTypeAliasTopLevel() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedTypeAliasTopLevel.kt");
    }

    @Test
    @TestMetadata("smartcastOnMemberPropertyFromCommonClass.kt")
    public void testSmartcastOnMemberPropertyFromCommonClass() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/smartcastOnMemberPropertyFromCommonClass.kt");
    }

    @Test
    @TestMetadata("supertypeActualizationWithAny.kt")
    public void testSupertypeActualizationWithAny() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/supertypeActualizationWithAny.kt");
    }

    @Test
    @TestMetadata("varSetterVisibility.kt")
    public void testVarSetterVisibility() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/varSetterVisibility.kt");
    }

    @Test
    @TestMetadata("widerVisibilityInActualClassifier.kt")
    public void testWiderVisibilityInActualClassifier() throws Exception {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibilityInActualClassifier.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker")
    @TestDataPath("$PROJECT_ROOT")
    public class ActualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker {
        @Test
        @TestMetadata("actualTypealias.kt")
        public void testActualTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualTypealias.kt");
        }

        @Test
        @TestMetadata("actualizeFakeOverridePropertyToJavaMethod.kt")
        public void testActualizeFakeOverridePropertyToJavaMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizeFakeOverridePropertyToJavaMethod.kt");
        }

        @Test
        @TestMetadata("actualizePrimaryConstructorWithSecondaryConstructor.kt")
        public void testActualizePrimaryConstructorWithSecondaryConstructor() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizePrimaryConstructorWithSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("actualizeSecondaryConstructorWithPrimaryConstructor.kt")
        public void testActualizeSecondaryConstructorWithPrimaryConstructor() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizeSecondaryConstructorWithPrimaryConstructor.kt");
        }

        @Test
        public void testAllFilesPresentInActualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("allowDifferentMembersInActual_class.kt")
        public void testAllowDifferentMembersInActual_class() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/allowDifferentMembersInActual_class.kt");
        }

        @Test
        @TestMetadata("allowDifferentMembersInActual_typealias.kt")
        public void testAllowDifferentMembersInActual_typealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/allowDifferentMembersInActual_typealias.kt");
        }

        @Test
        @TestMetadata("changeClassTypeParameterNames.kt")
        public void testChangeClassTypeParameterNames() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeClassTypeParameterNames.kt");
        }

        @Test
        @TestMetadata("changeFunctionTypeParameterNamesInOverride.kt")
        public void testChangeFunctionTypeParameterNamesInOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeFunctionTypeParameterNamesInOverride.kt");
        }

        @Test
        @TestMetadata("changeLateinitInOverride.kt")
        public void testChangeLateinitInOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeLateinitInOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityInOverride.kt")
        public void testChangeModalityInOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityInOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityOfSubstitutedFakeOverride.kt")
        public void testChangeModalityOfSubstitutedFakeOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityOfSubstitutedFakeOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityOfToStringInOverride.kt")
        public void testChangeModalityOfToStringInOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityOfToStringInOverride.kt");
        }

        @Test
        @TestMetadata("changeParameterNameInOverride.kt")
        public void testChangeParameterNameInOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeParameterNameInOverride.kt");
        }

        @Test
        @TestMetadata("changeSetterVisibilityInOverride.kt")
        public void testChangeSetterVisibilityInOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeSetterVisibilityInOverride.kt");
        }

        @Test
        @TestMetadata("changeVisibilityInOverride.kt")
        public void testChangeVisibilityInOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeVisibilityInOverride.kt");
        }

        @Test
        @TestMetadata("covariantFunctionOverride.kt")
        public void testCovariantFunctionOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantFunctionOverride.kt");
        }

        @Test
        @TestMetadata("covariantOverrideGenericUpperBound.kt")
        public void testCovariantOverrideGenericUpperBound() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantOverrideGenericUpperBound.kt");
        }

        @Test
        @TestMetadata("covariantOverrideGenerics.kt")
        public void testCovariantOverrideGenerics() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantOverrideGenerics.kt");
        }

        @Test
        @TestMetadata("covariantPropertyOverride.kt")
        public void testCovariantPropertyOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantPropertyOverride.kt");
        }

        @Test
        @TestMetadata("fakeOverrideChangedToRealOverride.kt")
        public void testFakeOverrideChangedToRealOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/fakeOverrideChangedToRealOverride.kt");
        }

        @Test
        @TestMetadata("finalClassIsActualizedByOpenClass.kt")
        public void testFinalClassIsActualizedByOpenClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/finalClassIsActualizedByOpenClass.kt");
        }

        @Test
        @TestMetadata("finalMethodIsActualizedByOpenMethod.kt")
        public void testFinalMethodIsActualizedByOpenMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/finalMethodIsActualizedByOpenMethod.kt");
        }

        @Test
        @TestMetadata("flexibleTypesMatching.kt")
        public void testFlexibleTypesMatching() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/flexibleTypesMatching.kt");
        }

        @Test
        @TestMetadata("injectClass.kt")
        public void testInjectClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectClass.kt");
        }

        @Test
        @TestMetadata("injectContextReceiverOverload.kt")
        public void testInjectContextReceiverOverload() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectContextReceiverOverload.kt");
        }

        @Test
        @TestMetadata("injectEmptySuperClass.kt")
        public void testInjectEmptySuperClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectEmptySuperClass.kt");
        }

        @Test
        @TestMetadata("injectExtensionReceiverOverload.kt")
        public void testInjectExtensionReceiverOverload() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectExtensionReceiverOverload.kt");
        }

        @Test
        @TestMetadata("injectGenericUpperBoundOverload.kt")
        public void testInjectGenericUpperBoundOverload() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectGenericUpperBoundOverload.kt");
        }

        @Test
        @TestMetadata("injectMethod_internalMethod.kt")
        public void testInjectMethod_internalMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_internalMethod.kt");
        }

        @Test
        @TestMetadata("injectMethod_privateMethod.kt")
        public void testInjectMethod_privateMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_privateMethod.kt");
        }

        @Test
        @TestMetadata("injectMethod_protectedMethod.kt")
        public void testInjectMethod_protectedMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_protectedMethod.kt");
        }

        @Test
        @TestMetadata("injectMethod_publicMethod.kt")
        public void testInjectMethod_publicMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_publicMethod.kt");
        }

        @Test
        @TestMetadata("injectMethod_publicMethodInJava.kt")
        public void testInjectMethod_publicMethodInJava() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_publicMethodInJava.kt");
        }

        @Test
        @TestMetadata("injectParameterOverload.kt")
        public void testInjectParameterOverload() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectParameterOverload.kt");
        }

        @Test
        @TestMetadata("injectParameterOverloadWithGenerics.kt")
        public void testInjectParameterOverloadWithGenerics() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectParameterOverloadWithGenerics.kt");
        }

        @Test
        @TestMetadata("injectPrimaryConstructor.kt")
        public void testInjectPrimaryConstructor() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPrimaryConstructor.kt");
        }

        @Test
        @TestMetadata("injectPrivateProperty.kt")
        public void testInjectPrivateProperty() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPrivateProperty.kt");
        }

        @Test
        @TestMetadata("injectProperty.kt")
        public void testInjectProperty() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectProperty.kt");
        }

        @Test
        @TestMetadata("injectPropertyWithTheSameSignatureAsExistingFunction.kt")
        public void testInjectPropertyWithTheSameSignatureAsExistingFunction() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPropertyWithTheSameSignatureAsExistingFunction.kt");
        }

        @Test
        @TestMetadata("injectPublicFakeOverrideMethod.kt")
        public void testInjectPublicFakeOverrideMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPublicFakeOverrideMethod.kt");
        }

        @Test
        @TestMetadata("injectSecondaryConstructor.kt")
        public void testInjectSecondaryConstructor() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("injectSupertype_SupertypeIsExpectActualPair.kt")
        public void testInjectSupertype_SupertypeIsExpectActualPair() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSupertype_SupertypeIsExpectActualPair.kt");
        }

        @Test
        @TestMetadata("injectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride.kt")
        public void testInjectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride.kt");
        }

        @Test
        @TestMetadata("injectVarargParameterOverload.kt")
        public void testInjectVarargParameterOverload() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectVarargParameterOverload.kt");
        }

        @Test
        @TestMetadata("nestedExpectOpenClass.kt")
        public void testNestedExpectOpenClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/nestedExpectOpenClass.kt");
        }

        @Test
        @TestMetadata("propertyKindOverride.kt")
        public void testPropertyKindOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/propertyKindOverride.kt");
        }

        @Test
        @TestMetadata("severalMismatches.kt")
        public void testSeveralMismatches() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/severalMismatches.kt");
        }

        @Test
        @TestMetadata("substitutedFakeOverrideChangedToRealOverride.kt")
        public void testSubstitutedFakeOverrideChangedToRealOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/substitutedFakeOverrideChangedToRealOverride.kt");
        }

        @Test
        @TestMetadata("superTypesAreTheSameModuloActualTypealias.kt")
        public void testSuperTypesAreTheSameModuloActualTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloActualTypealias.kt");
        }

        @Test
        @TestMetadata("superTypesAreTheSameModuloTypealias1.kt")
        public void testSuperTypesAreTheSameModuloTypealias1() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloTypealias1.kt");
        }

        @Test
        @TestMetadata("superTypesAreTheSameModuloTypealias2.kt")
        public void testSuperTypesAreTheSameModuloTypealias2() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloTypealias2.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper.kt")
        public void testSupertypeIsExpectActual_covariantOverrideOfInjectedFromSuper() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_injectMethod.kt")
        public void testSupertypeIsExpectActual_injectMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectMethod.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_injectSupertype.kt")
        public void testSupertypeIsExpectActual_injectSupertype() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectSupertype.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_simpleOverride.kt")
        public void testSupertypeIsExpectActual_simpleOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_simpleOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod.kt")
        public void testSupertypeIsExpectActual_supertypeIsActualTypealias_injectMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/annotationMatching")
    @TestDataPath("$PROJECT_ROOT")
    public class AnnotationMatching {
        @Test
        @TestMetadata("actualInnerClassMissingMember.kt")
        public void testActualInnerClassMissingMember() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/actualInnerClassMissingMember.kt");
        }

        @Test
        public void testAllFilesPresentInAnnotationMatching() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/annotationMatching"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("annotationArgumentsConstExpressions.kt")
        public void testAnnotationArgumentsConstExpressions() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/annotationArgumentsConstExpressions.kt");
        }

        @Test
        @TestMetadata("annotationArgumentsDefaults.kt")
        public void testAnnotationArgumentsDefaults() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/annotationArgumentsDefaults.kt");
        }

        @Test
        @TestMetadata("annotationTarget.kt")
        public void testAnnotationTarget() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/annotationTarget.kt");
        }

        @Test
        @TestMetadata("annotationTypeParameters.kt")
        public void testAnnotationTypeParameters() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/annotationTypeParameters.kt");
        }

        @Test
        @TestMetadata("basicOnDeclaration.kt")
        public void testBasicOnDeclaration() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/basicOnDeclaration.kt");
        }

        @Test
        @TestMetadata("checkDiagnosticFullText.kt")
        public void testCheckDiagnosticFullText() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/checkDiagnosticFullText.kt");
        }

        @Test
        @TestMetadata("classScopeInnerClasses.kt")
        public void testClassScopeInnerClasses() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/classScopeInnerClasses.kt");
        }

        @Test
        @TestMetadata("classScopeViaTypealiasIncompatible.kt")
        public void testClassScopeViaTypealiasIncompatible() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/classScopeViaTypealiasIncompatible.kt");
        }

        @Test
        @TestMetadata("compatibleOverrides.kt")
        public void testCompatibleOverrides() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/compatibleOverrides.kt");
        }

        @Test
        @TestMetadata("differentOrder.kt")
        public void testDifferentOrder() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/differentOrder.kt");
        }

        @Test
        @TestMetadata("enumEntries.kt")
        public void testEnumEntries() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/enumEntries.kt");
        }

        @Test
        @TestMetadata("fakeOverrides.kt")
        public void testFakeOverrides() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/fakeOverrides.kt");
        }

        @Test
        @TestMetadata("floatNumbersComparison.kt")
        public void testFloatNumbersComparison() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/floatNumbersComparison.kt");
        }

        @Test
        @TestMetadata("intrinsicConstEvaluation.kt")
        public void testIntrinsicConstEvaluation() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/intrinsicConstEvaluation.kt");
        }

        @Test
        @TestMetadata("kclassArgWithExpectClass.kt")
        public void testKclassArgWithExpectClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/kclassArgWithExpectClass.kt");
        }

        @Test
        @TestMetadata("kotlinAnaloguesForJavaAnnotations.kt")
        public void testKotlinAnaloguesForJavaAnnotations() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/kotlinAnaloguesForJavaAnnotations.kt");
        }

        @Test
        @TestMetadata("repeatableNoArg.kt")
        public void testRepeatableNoArg() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/repeatableNoArg.kt");
        }

        @Test
        @TestMetadata("repeatableWithArg.kt")
        public void testRepeatableWithArg() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/repeatableWithArg.kt");
        }

        @Test
        @TestMetadata("skippedAnnotations.kt")
        public void testSkippedAnnotations() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/skippedAnnotations.kt");
        }

        @Test
        @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
        public void testSourceRetentionAnnotationsWhenTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/sourceRetentionAnnotationsWhenTypealias.kt");
        }

        @Test
        @TestMetadata("substitutionOverrideInTwoClasses.kt")
        public void testSubstitutionOverrideInTwoClasses() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/substitutionOverrideInTwoClasses.kt");
        }

        @Test
        @TestMetadata("twoActualTypealiasesToSameClass.kt")
        public void testTwoActualTypealiasesToSameClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/twoActualTypealiasesToSameClass.kt");
        }

        @Test
        @TestMetadata("typealias.kt")
        public void testTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/typealias.kt");
        }

        @Test
        @TestMetadata("typealiasToJavaLibrary.kt")
        public void testTypealiasToJavaLibrary() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/typealiasToJavaLibrary.kt");
        }

        @Test
        @TestMetadata("typealiasToKtLibrary.kt")
        public void testTypealiasToKtLibrary() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/typealiasToKtLibrary.kt");
        }

        @Test
        @TestMetadata("withAnnotationActualTypealias.kt")
        public void testWithAnnotationActualTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/withAnnotationActualTypealias.kt");
        }

        @Test
        @TestMetadata("withOtherIncomatibilities.kt")
        public void testWithOtherIncomatibilities() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/annotationMatching/withOtherIncomatibilities.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/complexMatchings")
    @TestDataPath("$PROJECT_ROOT")
    public class ComplexMatchings {
        @Test
        public void testAllFilesPresentInComplexMatchings() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/complexMatchings"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("expectCtorlessFinalToActualObject.kt")
        public void testExpectCtorlessFinalToActualObject() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/complexMatchings/expectCtorlessFinalToActualObject.kt");
        }

        @Test
        @TestMetadata("expectCtorlessFinalToActualObjectViaTypealias.kt")
        public void testExpectCtorlessFinalToActualObjectViaTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/complexMatchings/expectCtorlessFinalToActualObjectViaTypealias.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class DefaultArguments {
        @Test
        public void testAllFilesPresentInDefaultArguments() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/defaultArguments"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("annotationArgumentEquality.kt")
        public void testAnnotationArgumentEquality() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationArgumentEquality.kt");
        }

        @Test
        @TestMetadata("annotations.kt")
        public void testAnnotations() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotations.kt");
        }

        @Test
        @TestMetadata("annotationsViaActualTypeAlias.kt")
        public void testAnnotationsViaActualTypeAlias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias.kt");
        }

        @Test
        @TestMetadata("annotationsViaActualTypeAlias2.kt")
        public void testAnnotationsViaActualTypeAlias2() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias2.kt");
        }

        @Test
        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructor.kt");
        }

        @Test
        @TestMetadata("constructorDefaultArgsViaActualTypealias.kt")
        public void testConstructorDefaultArgsViaActualTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructorDefaultArgsViaActualTypealias.kt");
        }

        @Test
        @TestMetadata("expectAnnotationAndInlineClassWithDefaultValue.kt")
        public void testExpectAnnotationAndInlineClassWithDefaultValue() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectAnnotationAndInlineClassWithDefaultValue.kt");
        }

        @Test
        @TestMetadata("expectedDeclaresDefaultArguments.kt")
        public void testExpectedDeclaresDefaultArguments() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedDeclaresDefaultArguments.kt");
        }

        @Test
        @TestMetadata("expectedInheritsDefaultArguments.kt")
        public void testExpectedInheritsDefaultArguments() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedInheritsDefaultArguments.kt");
        }

        @Test
        @TestMetadata("expectedVsNonExpectedWithDefaults.kt")
        public void testExpectedVsNonExpectedWithDefaults() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedVsNonExpectedWithDefaults.kt");
        }

        @Test
        @TestMetadata("methodDefaultArgsViaActualTypealias.kt")
        public void testMethodDefaultArgsViaActualTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualTypealias.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/deprecated")
    @TestDataPath("$PROJECT_ROOT")
    public class Deprecated {
        @Test
        public void testAllFilesPresentInDeprecated() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/deprecated"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("header.kt")
        public void testHeader() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/deprecated/header.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/enum")
    @TestDataPath("$PROJECT_ROOT")
    public class Enum {
        @Test
        @TestMetadata("additionalEntriesInImpl.kt")
        public void testAdditionalEntriesInImpl() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/enum/additionalEntriesInImpl.kt");
        }

        @Test
        public void testAllFilesPresentInEnum() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/enum"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("constructorInHeaderEnum.kt")
        public void testConstructorInHeaderEnum() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/enum/constructorInHeaderEnum.kt");
        }

        @Test
        @TestMetadata("differentEntryOrder.kt")
        public void testDifferentEntryOrder() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/enum/differentEntryOrder.kt");
        }

        @Test
        @TestMetadata("enumEntryWithBody.kt")
        public void testEnumEntryWithBody() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/enum/enumEntryWithBody.kt");
        }

        @Test
        @TestMetadata("javaEnum.kt")
        public void testJavaEnum() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/enum/javaEnum.kt");
        }

        @Test
        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/enum/simpleEnum.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness")
    @TestDataPath("$PROJECT_ROOT")
    public class Exhaustiveness {
        @Test
        public void testAllFilesPresentInExhaustiveness() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("commonSealedWithPlatformInheritor.kt")
        public void testCommonSealedWithPlatformInheritor() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/commonSealedWithPlatformInheritor.kt");
        }

        @Test
        @TestMetadata("expectEnum.kt")
        public void testExpectEnum() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectEnum.kt");
        }

        @Test
        @TestMetadata("expectSealedClass.kt")
        public void testExpectSealedClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClass.kt");
        }

        @Test
        @TestMetadata("expectSealedClassWithActualTypealias.kt")
        public void testExpectSealedClassWithActualTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassWithActualTypealias.kt");
        }

        @Test
        @TestMetadata("expectSealedInterface.kt")
        public void testExpectSealedInterface() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedInterface.kt");
        }

        @Test
        @TestMetadata("kt45796.kt")
        public void testKt45796() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/kt45796.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/generic")
    @TestDataPath("$PROJECT_ROOT")
    public class Generic {
        @Test
        public void testAllFilesPresentInGeneric() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/generic"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("functionTypeParameterBounds.kt")
        public void testFunctionTypeParameterBounds() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/generic/functionTypeParameterBounds.kt");
        }

        @Test
        @TestMetadata("genericMemberBounds.kt")
        public void testGenericMemberBounds() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/generic/genericMemberBounds.kt");
        }

        @Test
        @TestMetadata("membersInGenericClass.kt")
        public void testMembersInGenericClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/generic/membersInGenericClass.kt");
        }

        @Test
        @TestMetadata("typeParameterBoundsDifferentOrderActualMissing.kt")
        public void testTypeParameterBoundsDifferentOrderActualMissing() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/generic/typeParameterBoundsDifferentOrderActualMissing.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/headerClass")
    @TestDataPath("$PROJECT_ROOT")
    public class HeaderClass {
        @Test
        @TestMetadata("actualClassWithDefaultValuesInAnnotationViaTypealias.kt")
        public void testActualClassWithDefaultValuesInAnnotationViaTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDefaultValuesInAnnotationViaTypealias.kt");
        }

        @Test
        @TestMetadata("actualClassWithDifferentConstructors.kt")
        public void testActualClassWithDifferentConstructors() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDifferentConstructors.kt");
        }

        @Test
        @TestMetadata("actualMethodInExpectClass.kt")
        public void testActualMethodInExpectClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMethodInExpectClass.kt");
        }

        @Test
        @TestMetadata("actualMissing.kt")
        public void testActualMissing() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMissing.kt");
        }

        @Test
        public void testAllFilesPresentInHeaderClass() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/headerClass"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("baseExpectClassWithoutConstructor.kt")
        public void testBaseExpectClassWithoutConstructor() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/baseExpectClassWithoutConstructor.kt");
        }

        @Test
        @TestMetadata("classKinds.kt")
        public void testClassKinds() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/classKinds.kt");
        }

        @Test
        @TestMetadata("dontOverrideMethodsFromInterfaceInCommonCode.kt")
        public void testDontOverrideMethodsFromInterfaceInCommonCode() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/dontOverrideMethodsFromInterfaceInCommonCode.kt");
        }

        @Test
        @TestMetadata("equalsOverrideInActualInterface.kt")
        public void testEqualsOverrideInActualInterface() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/equalsOverrideInActualInterface.kt");
        }

        @Test
        @TestMetadata("expectClassWithExplicitAbstractMember.kt")
        public void testExpectClassWithExplicitAbstractMember() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithExplicitAbstractMember.kt");
        }

        @Test
        @TestMetadata("expectClassWithoutConstructor.kt")
        public void testExpectClassWithoutConstructor() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithoutConstructor.kt");
        }

        @Test
        @TestMetadata("expectDeclarationWithStrongIncompatibilities.kt")
        public void testExpectDeclarationWithStrongIncompatibilities() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithStrongIncompatibilities.kt");
        }

        @Test
        @TestMetadata("expectDeclarationWithWeakIncompatibilities.kt")
        public void testExpectDeclarationWithWeakIncompatibilities() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithWeakIncompatibilities.kt");
        }

        @Test
        @TestMetadata("expectFinalActualOpen.kt")
        public void testExpectFinalActualOpen() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFinalActualOpen.kt");
        }

        @Test
        @TestMetadata("expectFunInterface.kt")
        public void testExpectFunInterface() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFunInterface.kt");
        }

        @Test
        @TestMetadata("explicitConstructorDelegation.kt")
        public void testExplicitConstructorDelegation() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/explicitConstructorDelegation.kt");
        }

        @Test
        @TestMetadata("extendExpectedClassWithAbstractMember.kt")
        public void testExtendExpectedClassWithAbstractMember() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithAbstractMember.kt");
        }

        @Test
        @TestMetadata("extendExpectedClassWithoutExplicitOverrideOfMethod.kt")
        public void testExtendExpectedClassWithoutExplicitOverrideOfMethod() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithoutExplicitOverrideOfMethod.kt");
        }

        @Test
        @TestMetadata("extraHeaderOnMembers.kt")
        public void testExtraHeaderOnMembers() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extraHeaderOnMembers.kt");
        }

        @Test
        @TestMetadata("functionAndPropertyWithSameName.kt")
        public void testFunctionAndPropertyWithSameName() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/functionAndPropertyWithSameName.kt");
        }

        @Test
        @TestMetadata("genericClassImplTypeAlias.kt")
        public void testGenericClassImplTypeAlias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/genericClassImplTypeAlias.kt");
        }

        @Test
        @TestMetadata("headerClassMember.kt")
        public void testHeaderClassMember() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassMember.kt");
        }

        @Test
        @TestMetadata("headerClassWithFunctionBody.kt")
        public void testHeaderClassWithFunctionBody() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassWithFunctionBody.kt");
        }

        @Test
        @TestMetadata("implDataClass.kt")
        public void testImplDataClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/implDataClass.kt");
        }

        @Test
        @TestMetadata("implOpenClass.kt")
        public void testImplOpenClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/implOpenClass.kt");
        }

        @Test
        @TestMetadata("inheritanceByDelegationInExpectClass.kt")
        public void testInheritanceByDelegationInExpectClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/inheritanceByDelegationInExpectClass.kt");
        }

        @Test
        @TestMetadata("memberPropertyKinds.kt")
        public void testMemberPropertyKinds() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/memberPropertyKinds.kt");
        }

        @Test
        @TestMetadata("modalityCheckForExplicitAndImplicitOverride.kt")
        public void testModalityCheckForExplicitAndImplicitOverride() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/modalityCheckForExplicitAndImplicitOverride.kt");
        }

        @Test
        @TestMetadata("morePermissiveVisibilityOnActual.kt")
        public void testMorePermissiveVisibilityOnActual() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActual.kt");
        }

        @Test
        @TestMetadata("morePermissiveVisibilityOnActualViaTypeAlias.kt")
        public void testMorePermissiveVisibilityOnActualViaTypeAlias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActualViaTypeAlias.kt");
        }

        @Test
        @TestMetadata("nestedClasses.kt")
        public void testNestedClasses() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClasses.kt");
        }

        @Test
        @TestMetadata("nestedClassesWithErrors.kt")
        public void testNestedClassesWithErrors() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClassesWithErrors.kt");
        }

        @Test
        @TestMetadata("noImplKeywordOnMember.kt")
        public void testNoImplKeywordOnMember() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/noImplKeywordOnMember.kt");
        }

        @Test
        @TestMetadata("privateMembers.kt")
        public void testPrivateMembers() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/privateMembers.kt");
        }

        @Test
        @TestMetadata("simpleHeaderClass.kt")
        public void testSimpleHeaderClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/simpleHeaderClass.kt");
        }

        @Test
        @TestMetadata("smartCastOnExpectClass.kt")
        public void testSmartCastOnExpectClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/smartCastOnExpectClass.kt");
        }

        @Test
        @TestMetadata("superClass.kt")
        public void testSuperClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/superClass.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp")
    @TestDataPath("$PROJECT_ROOT")
    public class Hmpp {
        @Test
        public void testAllFilesPresentInHmpp() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("intermediateActualHasAdditionalSupertypes.kt")
        public void testIntermediateActualHasAdditionalSupertypes() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/intermediateActualHasAdditionalSupertypes.kt");
        }

        @Test
        @TestMetadata("kt57320.kt")
        public void testKt57320() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/kt57320.kt");
        }

        @Test
        @TestMetadata("kt-55570.kt")
        public void testKt_55570() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/kt-55570.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/simple.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class MultiplatformCompositeAnalysis {
            @Test
            public void testAllFilesPresentInMultiplatformCompositeAnalysis() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("expectAndActualInTheSameModule.kt")
            public void testExpectAndActualInTheSameModule() throws Exception {
                runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/expectAndActualInTheSameModule.kt");
            }

            @Test
            @TestMetadata("expectAndActualInTheSameModuleIncompatibilities.kt")
            public void testExpectAndActualInTheSameModuleIncompatibilities() throws Exception {
                runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/expectAndActualInTheSameModuleIncompatibilities.kt");
            }

            @Test
            @TestMetadata("intermediateWithActualAndExpect.kt")
            public void testIntermediateWithActualAndExpect() throws Exception {
                runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/intermediateWithActualAndExpect.kt");
            }

            @Test
            @TestMetadata("sealedInheritorsInComplexModuleStructure.kt")
            public void testSealedInheritorsInComplexModuleStructure() throws Exception {
                runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsInComplexModuleStructure.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching")
            @TestDataPath("$PROJECT_ROOT")
            public class AnnotationMatching {
                @Test
                public void testAllFilesPresentInAnnotationMatching() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
                }

                @Test
                @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
                public void testSourceRetentionAnnotationsWhenTypealias() throws Exception {
                    runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/sourceRetentionAnnotationsWhenTypealias.kt");
                }

                @Test
                @TestMetadata("typealiasedAnnotation.kt")
                public void testTypealiasedAnnotation() throws Exception {
                    runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAnnotation.kt");
                }

                @Test
                @TestMetadata("typealiasedAnnotationAsArgument.kt")
                public void testTypealiasedAnnotationAsArgument() throws Exception {
                    runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAnnotationAsArgument.kt");
                }

                @Test
                @TestMetadata("typealiasedAsKClassArg.kt")
                public void testTypealiasedAsKClassArg() throws Exception {
                    runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAsKClassArg.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
        @Test
        public void testAllFilesPresentInInlineClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/inlineClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("expectActualInlineClass.kt")
        public void testExpectActualInlineClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/inlineClasses/expectActualInlineClass.kt");
        }

        @Test
        @TestMetadata("jvmInlineExpectValueClass.kt")
        public void testJvmInlineExpectValueClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/inlineClasses/jvmInlineExpectValueClass.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/java")
    @TestDataPath("$PROJECT_ROOT")
    public class Java {
        @Test
        public void testAllFilesPresentInJava() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/java"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("flexibleTypes.kt")
        public void testFlexibleTypes() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/java/flexibleTypes.kt");
        }

        @Test
        @TestMetadata("implicitJavaActualizationAllowed.kt")
        public void testImplicitJavaActualizationAllowed() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualizationAllowed.kt");
        }

        @Test
        @TestMetadata("implicitJavaActualizationDisallowed.kt")
        public void testImplicitJavaActualizationDisallowed() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualizationDisallowed.kt");
        }

        @Test
        @TestMetadata("implicitJavaActualization_multipleActuals.kt")
        public void testImplicitJavaActualization_multipleActuals() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualization_multipleActuals.kt");
        }

        @Test
        @TestMetadata("inheritedJavaMembers.kt")
        public void testInheritedJavaMembers() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/java/inheritedJavaMembers.kt");
        }

        @Test
        @TestMetadata("parameterNames.kt")
        public void testParameterNames() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/java/parameterNames.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelFun")
    @TestDataPath("$PROJECT_ROOT")
    public class TopLevelFun {
        @Test
        public void testAllFilesPresentInTopLevelFun() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/topLevelFun"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("callHeaderFun.kt")
        public void testCallHeaderFun() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callHeaderFun.kt");
        }

        @Test
        @TestMetadata("callableReferenceOnExpectFun.kt")
        public void testCallableReferenceOnExpectFun() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callableReferenceOnExpectFun.kt");
        }

        @Test
        @TestMetadata("conflictingHeaderDeclarations.kt")
        public void testConflictingHeaderDeclarations() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingHeaderDeclarations.kt");
        }

        @Test
        @TestMetadata("conflictingImplDeclarations.kt")
        public void testConflictingImplDeclarations() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingImplDeclarations.kt");
        }

        @Test
        @TestMetadata("functionModifiers.kt")
        public void testFunctionModifiers() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/functionModifiers.kt");
        }

        @Test
        @TestMetadata("headerAndImplInDIfferentPackages.kt")
        public void testHeaderAndImplInDIfferentPackages() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerAndImplInDIfferentPackages.kt");
        }

        @Test
        @TestMetadata("headerDeclarationWithBody.kt")
        public void testHeaderDeclarationWithBody() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerDeclarationWithBody.kt");
        }

        @Test
        @TestMetadata("headerWithoutImpl.kt")
        public void testHeaderWithoutImpl() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerWithoutImpl.kt");
        }

        @Test
        @TestMetadata("implDeclarationWithoutBody.kt")
        public void testImplDeclarationWithoutBody() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implDeclarationWithoutBody.kt");
        }

        @Test
        @TestMetadata("implWithoutHeader.kt")
        public void testImplWithoutHeader() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implWithoutHeader.kt");
        }

        @Test
        @TestMetadata("inlineFun.kt")
        public void testInlineFun() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/inlineFun.kt");
        }

        @Test
        @TestMetadata("simpleHeaderFun.kt")
        public void testSimpleHeaderFun() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/simpleHeaderFun.kt");
        }

        @Test
        @TestMetadata("valueParameterModifiers.kt")
        public void testValueParameterModifiers() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/valueParameterModifiers.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty")
    @TestDataPath("$PROJECT_ROOT")
    public class TopLevelProperty {
        @Test
        public void testAllFilesPresentInTopLevelProperty() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("differentKindsOfProperties.kt")
        public void testDifferentKindsOfProperties() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/differentKindsOfProperties.kt");
        }

        @Test
        @TestMetadata("simpleHeaderVar.kt")
        public void testSimpleHeaderVar() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/simpleHeaderVar.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/typealias")
    @TestDataPath("$PROJECT_ROOT")
    public class Typealias {
        @Test
        @TestMetadata("actualTypealiasToNothing.kt")
        public void testActualTypealiasToNothing() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNothing.kt");
        }

        @Test
        @TestMetadata("actualTypealiasToNullableType.kt")
        public void testActualTypealiasToNullableType() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNullableType.kt");
        }

        @Test
        public void testAllFilesPresentInTypealias() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/typealias"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), TargetBackend.JVM_IR, true);
        }
    }
}
