open enum class MyEnum : Enum<MyEnum> {

  Z = Z()
  private enum entry class Z : MyEnum {
    var counter: Int
      field = 0
      get
      set

    val aLambda: Function0<Unit>
      field = local fun <anonymous>() {
        MyEnum.Z.<set-counter>(<set-?> = 1)
        MyEnum.Z.foo()
      }

      get

    val anObject: Any
      field = { // BLOCK
        local class <no name provided> {
          init {
            MyEnum.Z.<set-counter>(<set-?> = 1)
            MyEnum.Z.foo()
          }

          constructor() /* primary */ {
            super/*Any*/()
            /* <init>() */

          }

          fun test() {
            MyEnum.Z.<set-counter>(<set-?> = 1)
            MyEnum.Z.foo()
          }

        }

        <no name provided>()
      }
      get

    private constructor() /* primary */ {
      super/*MyEnum*/() /*~> Unit */
      /* <init>() */

    }

    fun bar() {
      <this>.<set-counter>(<set-?> = 1)
      <this>.foo()
    }

    fun foo() {
    }

  }

  private constructor() /* primary */ {
    super/*Enum*/<MyEnum>()
    /* <init>() */

  }

  fun valueOf(value: String): MyEnum /* Synthetic body for ENUM_VALUEOF */

  fun values(): Array<MyEnum> /* Synthetic body for ENUM_VALUES */

  val entries: EnumEntries<MyEnum>
    get(): EnumEntries<MyEnum> /* Synthetic body for ENUM_ENTRIES */

}

