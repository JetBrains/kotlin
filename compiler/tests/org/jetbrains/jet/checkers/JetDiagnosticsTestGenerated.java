/*
 * Copyright 2010-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jetbrains.jet.checkers;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve;

/** This class is generated by {@link org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve}. DO NOT MODIFY MANUALLY */
public class JetDiagnosticsTestGenerated extends AbstractDiagnosticsTestWithEagerResolve {
    @TestMetadata("compiler/testData/diagnostics/tests")
    public static class Tests extends AbstractDiagnosticsTestWithEagerResolve {
        @TestMetadata("Abstract.kt")
        public void testAbstract() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Abstract.kt");
        }
        
        @TestMetadata("AbstractEnum.kt")
        public void testAbstractEnum() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AbstractEnum.kt");
        }
        
        @TestMetadata("AbstractInAbstractClass.kt")
        public void testAbstractInAbstractClass() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AbstractInAbstractClass.kt");
        }
        
        @TestMetadata("AbstractInClass.kt")
        public void testAbstractInClass() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AbstractInClass.kt");
        }
        
        @TestMetadata("AbstractInEnum.kt")
        public void testAbstractInEnum() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AbstractInEnum.kt");
        }
        
        @TestMetadata("AbstractInTrait.kt")
        public void testAbstractInTrait() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AbstractInTrait.kt");
        }
        
        public void testAllFilesPresentInTests() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests"), "kt", false);
        }
        
        @TestMetadata("AnonymousInitializerVarAndConstructor.kt")
        public void testAnonymousInitializerVarAndConstructor() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AnonymousInitializerVarAndConstructor.kt");
        }
        
        @TestMetadata("AnonymousInitializers.kt")
        public void testAnonymousInitializers() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AnonymousInitializers.kt");
        }
        
        @TestMetadata("AutoCreatedIt.kt")
        public void testAutoCreatedIt() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AutoCreatedIt.kt");
        }
        
        @TestMetadata("AutocastAmbiguitites.kt")
        public void testAutocastAmbiguitites() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AutocastAmbiguitites.kt");
        }
        
        @TestMetadata("AutocastsForStableIdentifiers.kt")
        public void testAutocastsForStableIdentifiers() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AutocastsForStableIdentifiers.kt");
        }
        
        @TestMetadata("Basic.kt")
        public void testBasic() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Basic.kt");
        }
        
        @TestMetadata("BinaryCallsOnNullableValues.kt")
        public void testBinaryCallsOnNullableValues() throws Exception {
            doTest("compiler/testData/diagnostics/tests/BinaryCallsOnNullableValues.kt");
        }
        
        @TestMetadata("Bounds.kt")
        public void testBounds() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Bounds.kt");
        }
        
        @TestMetadata("BreakContinue.kt")
        public void testBreakContinue() throws Exception {
            doTest("compiler/testData/diagnostics/tests/BreakContinue.kt");
        }
        
        @TestMetadata("Builders.kt")
        public void testBuilders() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Builders.kt");
        }
        
        @TestMetadata("Casts.kt")
        public void testCasts() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Casts.kt");
        }
        
        @TestMetadata("CharacterLiterals.kt")
        public void testCharacterLiterals() throws Exception {
            doTest("compiler/testData/diagnostics/tests/CharacterLiterals.kt");
        }
        
        @TestMetadata("ClassObjectCannotAccessClassFields.kt")
        public void testClassObjectCannotAccessClassFields() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ClassObjectCannotAccessClassFields.kt");
        }
        
        @TestMetadata("ClassObjectVisibility.kt")
        public void testClassObjectVisibility() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ClassObjectVisibility.kt");
        }
        
        @TestMetadata("ClassObjects.kt")
        public void testClassObjects() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ClassObjects.kt");
        }
        
        @TestMetadata("Constants.kt")
        public void testConstants() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Constants.kt");
        }
        
        @TestMetadata("Constructors.kt")
        public void testConstructors() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Constructors.kt");
        }
        
        @TestMetadata("CovariantOverrideType.kt")
        public void testCovariantOverrideType() throws Exception {
            doTest("compiler/testData/diagnostics/tests/CovariantOverrideType.kt");
        }
        
        @TestMetadata("CyclicHierarchy.kt")
        public void testCyclicHierarchy() throws Exception {
            doTest("compiler/testData/diagnostics/tests/CyclicHierarchy.kt");
        }
        
        @TestMetadata("DanglingFunctionLiteral.kt")
        public void testDanglingFunctionLiteral() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DanglingFunctionLiteral.kt");
        }
        
        @TestMetadata("DefaultValuesTypechecking.kt")
        public void testDefaultValuesTypechecking() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DefaultValuesTypechecking.kt");
        }
        
        @TestMetadata("DeferredTypes.kt")
        public void testDeferredTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DeferredTypes.kt");
        }
        
        @TestMetadata("DelegationAndOverriding.kt")
        public void testDelegationAndOverriding() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DelegationAndOverriding.kt");
        }
        
        @TestMetadata("DelegationNotTotrait.kt")
        public void testDelegationNotTotrait() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DelegationNotTotrait.kt");
        }
        
        @TestMetadata("DiamondFunction.kt")
        public void testDiamondFunction() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DiamondFunction.kt");
        }
        
        @TestMetadata("DiamondFunctionGeneric.kt")
        public void testDiamondFunctionGeneric() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DiamondFunctionGeneric.kt");
        }
        
        @TestMetadata("DiamondProperty.kt")
        public void testDiamondProperty() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DiamondProperty.kt");
        }
        
        @TestMetadata("Dollar.kt")
        public void testDollar() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Dollar.kt");
        }
        
        @TestMetadata("Enums.kt")
        public void testEnums() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Enums.kt");
        }
        
        @TestMetadata("ForRangeConventions.kt")
        public void testForRangeConventions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ForRangeConventions.kt");
        }
        
        @TestMetadata("FunctionCalleeExpressions.kt")
        public void testFunctionCalleeExpressions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/FunctionCalleeExpressions.kt");
        }
        
        @TestMetadata("FunctionReturnTypes.kt")
        public void testFunctionReturnTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/FunctionReturnTypes.kt");
        }
        
        @TestMetadata("GenericArgumentConsistency.kt")
        public void testGenericArgumentConsistency() throws Exception {
            doTest("compiler/testData/diagnostics/tests/GenericArgumentConsistency.kt");
        }
        
        @TestMetadata("GenericFunctionIsLessSpecific.kt")
        public void testGenericFunctionIsLessSpecific() throws Exception {
            doTest("compiler/testData/diagnostics/tests/GenericFunctionIsLessSpecific.kt");
        }
        
        @TestMetadata("IllegalModifiers.kt")
        public void testIllegalModifiers() throws Exception {
            doTest("compiler/testData/diagnostics/tests/IllegalModifiers.kt");
        }
        
        @TestMetadata("ImportResolutionOrder.kt")
        public void testImportResolutionOrder() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ImportResolutionOrder.kt");
        }
        
        @TestMetadata("IncDec.kt")
        public void testIncDec() throws Exception {
            doTest("compiler/testData/diagnostics/tests/IncDec.kt");
        }
        
        @TestMetadata("IncorrectCharacterLiterals.kt")
        public void testIncorrectCharacterLiterals() throws Exception {
            doTest("compiler/testData/diagnostics/tests/IncorrectCharacterLiterals.kt");
        }
        
        @TestMetadata("InferNullabilityInThenBlock.kt")
        public void testInferNullabilityInThenBlock() throws Exception {
            doTest("compiler/testData/diagnostics/tests/InferNullabilityInThenBlock.kt");
        }
        
        @TestMetadata("InnerClassClassObject.kt")
        public void testInnerClassClassObject() throws Exception {
            doTest("compiler/testData/diagnostics/tests/InnerClassClassObject.kt");
        }
        
        @TestMetadata("IsExpressions.kt")
        public void testIsExpressions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/IsExpressions.kt");
        }
        
        @TestMetadata("LValueAssignment.kt")
        public void testLValueAssignment() throws Exception {
            doTest("compiler/testData/diagnostics/tests/LValueAssignment.kt");
        }
        
        @TestMetadata("MergePackagesWithJava.kt")
        public void testMergePackagesWithJava() throws Exception {
            doTest("compiler/testData/diagnostics/tests/MergePackagesWithJava.kt");
        }
        
        @TestMetadata("MultilineStringTemplates.kt")
        public void testMultilineStringTemplates() throws Exception {
            doTest("compiler/testData/diagnostics/tests/MultilineStringTemplates.kt");
        }
        
        @TestMetadata("MultipleBounds.kt")
        public void testMultipleBounds() throws Exception {
            doTest("compiler/testData/diagnostics/tests/MultipleBounds.kt");
        }
        
        @TestMetadata("NamedArgumentsAndDefaultValues.kt")
        public void testNamedArgumentsAndDefaultValues() throws Exception {
            doTest("compiler/testData/diagnostics/tests/NamedArgumentsAndDefaultValues.kt");
        }
        
        @TestMetadata("NamespaceAsExpression.kt")
        public void testNamespaceAsExpression() throws Exception {
            doTest("compiler/testData/diagnostics/tests/NamespaceAsExpression.kt");
        }
        
        @TestMetadata("NamespaceInExpressionPosition.kt")
        public void testNamespaceInExpressionPosition() throws Exception {
            doTest("compiler/testData/diagnostics/tests/NamespaceInExpressionPosition.kt");
        }
        
        @TestMetadata("NamespaceQualified.kt")
        public void testNamespaceQualified() throws Exception {
            doTest("compiler/testData/diagnostics/tests/NamespaceQualified.kt");
        }
        
        @TestMetadata("Nullability.kt")
        public void testNullability() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Nullability.kt");
        }
        
        @TestMetadata("OverrideFunctionWithParamDefaultValue.kt")
        public void testOverrideFunctionWithParamDefaultValue() throws Exception {
            doTest("compiler/testData/diagnostics/tests/OverrideFunctionWithParamDefaultValue.kt");
        }
        
        @TestMetadata("OverridenFunctionAndSpecifiedTypeParameter.kt")
        public void testOverridenFunctionAndSpecifiedTypeParameter() throws Exception {
            doTest("compiler/testData/diagnostics/tests/OverridenFunctionAndSpecifiedTypeParameter.kt");
        }
        
        @TestMetadata("OverridingVarByVal.kt")
        public void testOverridingVarByVal() throws Exception {
            doTest("compiler/testData/diagnostics/tests/OverridingVarByVal.kt");
        }
        
        @TestMetadata("PrimaryConstructors.kt")
        public void testPrimaryConstructors() throws Exception {
            doTest("compiler/testData/diagnostics/tests/PrimaryConstructors.kt");
        }
        
        @TestMetadata("ProcessingEmptyImport.kt")
        public void testProcessingEmptyImport() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ProcessingEmptyImport.kt");
        }
        
        @TestMetadata("ProjectionOnFunctionArgumentErrror.kt")
        public void testProjectionOnFunctionArgumentErrror() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ProjectionOnFunctionArgumentErrror.kt");
        }
        
        @TestMetadata("ProjectionsInSupertypes.kt")
        public void testProjectionsInSupertypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ProjectionsInSupertypes.kt");
        }
        
        @TestMetadata("Properties.kt")
        public void testProperties() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Properties.kt");
        }
        
        @TestMetadata("QualifiedExpressions.kt")
        public void testQualifiedExpressions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/QualifiedExpressions.kt");
        }
        
        @TestMetadata("QualifiedThis.kt")
        public void testQualifiedThis() throws Exception {
            doTest("compiler/testData/diagnostics/tests/QualifiedThis.kt");
        }
        
        @TestMetadata("RecursiveTypeInference.kt")
        public void testRecursiveTypeInference() throws Exception {
            doTest("compiler/testData/diagnostics/tests/RecursiveTypeInference.kt");
        }
        
        @TestMetadata("ResolveOfJavaGenerics.kt")
        public void testResolveOfJavaGenerics() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ResolveOfJavaGenerics.kt");
        }
        
        @TestMetadata("ResolveToJava.kt")
        public void testResolveToJava() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ResolveToJava.kt");
        }
        
        @TestMetadata("Return.kt")
        public void testReturn() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Return.kt");
        }
        
        @TestMetadata("SafeCallNonNullReceiver.kt")
        public void testSafeCallNonNullReceiver() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiver.kt");
        }
        
        @TestMetadata("SafeCallNonNullReceiverReturnNull.kt")
        public void testSafeCallNonNullReceiverReturnNull() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiverReturnNull.kt");
        }
        
        @TestMetadata("ShiftFunctionTypes.kt")
        public void testShiftFunctionTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ShiftFunctionTypes.kt");
        }
        
        @TestMetadata("StarsInFunctionCalls.kt")
        public void testStarsInFunctionCalls() throws Exception {
            doTest("compiler/testData/diagnostics/tests/StarsInFunctionCalls.kt");
        }
        
        @TestMetadata("StringTemplates.kt")
        public void testStringTemplates() throws Exception {
            doTest("compiler/testData/diagnostics/tests/StringTemplates.kt");
        }
        
        @TestMetadata("Super.kt")
        public void testSuper() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Super.kt");
        }
        
        @TestMetadata("SupertypeListChecks.kt")
        public void testSupertypeListChecks() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SupertypeListChecks.kt");
        }
        
        @TestMetadata("SyntaxErrorInTestHighlighting.kt")
        public void testSyntaxErrorInTestHighlighting() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlighting.kt");
        }
        
        @TestMetadata("SyntaxErrorInTestHighlightingEof.kt")
        public void testSyntaxErrorInTestHighlightingEof() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlightingEof.kt");
        }
        
        @TestMetadata("TraitSupertypeList.kt")
        public void testTraitSupertypeList() throws Exception {
            doTest("compiler/testData/diagnostics/tests/TraitSupertypeList.kt");
        }
        
        @TestMetadata("TypeInference.kt")
        public void testTypeInference() throws Exception {
            doTest("compiler/testData/diagnostics/tests/TypeInference.kt");
        }
        
        @TestMetadata("UninitializedOrReassignedVariables.kt")
        public void testUninitializedOrReassignedVariables() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UninitializedOrReassignedVariables.kt");
        }
        
        @TestMetadata("UnitByDefaultForFunctionTypes.kt")
        public void testUnitByDefaultForFunctionTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UnitByDefaultForFunctionTypes.kt");
        }
        
        @TestMetadata("UnreachableCode.kt")
        public void testUnreachableCode() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UnreachableCode.kt");
        }
        
        @TestMetadata("Unresolved.kt")
        public void testUnresolved() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Unresolved.kt");
        }
        
        @TestMetadata("UnusedVariables.kt")
        public void testUnusedVariables() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UnusedVariables.kt");
        }
        
        @TestMetadata("ValAndFunOverrideCompatibilityClash.kt")
        public void testValAndFunOverrideCompatibilityClash() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ValAndFunOverrideCompatibilityClash.kt");
        }
        
        @TestMetadata("VarargTypes.kt")
        public void testVarargTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/VarargTypes.kt");
        }
        
        @TestMetadata("Varargs.kt")
        public void testVarargs() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Varargs.kt");
        }
        
        @TestMetadata("Variance.kt")
        public void testVariance() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Variance.kt");
        }
        
        @TestMetadata("When.kt")
        public void testWhen() throws Exception {
            doTest("compiler/testData/diagnostics/tests/When.kt");
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/annotations")
        public static class Annotations extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInAnnotations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/annotations"), "kt", false);
            }
            
            @TestMetadata("AmbigiousAnnotationConstructor.kt")
            public void testAmbigiousAnnotationConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AmbigiousAnnotationConstructor.kt");
            }
            
            @TestMetadata("AnnotatedConstructorParams.kt")
            public void testAnnotatedConstructorParams() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructorParams.kt");
            }
            
            @TestMetadata("AnnotationsForClasses.kt")
            public void testAnnotationsForClasses() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AnnotationsForClasses.kt");
            }
            
            @TestMetadata("BasicAnnotations.kt")
            public void testBasicAnnotations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/BasicAnnotations.kt");
            }
            
            @TestMetadata("Deprecated.kt")
            public void testDeprecated() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/Deprecated.kt");
            }
            
            @TestMetadata("JavaAnnotationConstructors.kt")
            public void testJavaAnnotationConstructors() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/JavaAnnotationConstructors.kt");
            }
            
            @TestMetadata("kt1860-negative.kt")
            public void testKt1860_negative() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/kt1860-negative.kt");
            }
            
            @TestMetadata("kt1860-positive.kt")
            public void testKt1860_positive() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/kt1860-positive.kt");
            }
            
            @TestMetadata("NonAnnotationClass.kt")
            public void testNonAnnotationClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/NonAnnotationClass.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/backingField")
        public static class BackingField extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInBackingField() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/backingField"), "kt", false);
            }
            
            @TestMetadata("CustomGetSet.kt")
            public void testCustomGetSet() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomGetSet.kt");
            }
            
            @TestMetadata("CustomGetVal.kt")
            public void testCustomGetVal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomGetVal.kt");
            }
            
            @TestMetadata("CustomGetValGlobal.kt")
            public void testCustomGetValGlobal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomGetValGlobal.kt");
            }
            
            @TestMetadata("CustomGetVar.kt")
            public void testCustomGetVar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomGetVar.kt");
            }
            
            @TestMetadata("CustomSet.kt")
            public void testCustomSet() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomSet.kt");
            }
            
            @TestMetadata("CyclicReferenceInitializer.kt")
            public void testCyclicReferenceInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CyclicReferenceInitializer.kt");
            }
            
            @TestMetadata("kt462BackingFieldsResolve.kt")
            public void testKt462BackingFieldsResolve() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/kt462BackingFieldsResolve.kt");
            }
            
            @TestMetadata("kt782namespaceLevel.kt")
            public void testKt782namespaceLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/kt782namespaceLevel.kt");
            }
            
            @TestMetadata("ReadForwardInAnonymous.kt")
            public void testReadForwardInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadForwardInAnonymous.kt");
            }
            
            @TestMetadata("ReadForwardInPropertyInitializer.kt")
            public void testReadForwardInPropertyInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadForwardInPropertyInitializer.kt");
            }
            
            @TestMetadata("ReadInAnonymous.kt")
            public void testReadInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadInAnonymous.kt");
            }
            
            @TestMetadata("ReadInAnotherPropertyIntializer.kt")
            public void testReadInAnotherPropertyIntializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadInAnotherPropertyIntializer.kt");
            }
            
            @TestMetadata("ReadInFunction.kt")
            public void testReadInFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadInFunction.kt");
            }
            
            @TestMetadata("ReadNonexistentAbstractPropertyInAnonymous.kt")
            public void testReadNonexistentAbstractPropertyInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentAbstractPropertyInAnonymous.kt");
            }
            
            @TestMetadata("ReadNonexistentAbstractPropertyInFunction.kt")
            public void testReadNonexistentAbstractPropertyInFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentAbstractPropertyInFunction.kt");
            }
            
            @TestMetadata("ReadNonexistentCustomGetInAnonymous.kt")
            public void testReadNonexistentCustomGetInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentCustomGetInAnonymous.kt");
            }
            
            @TestMetadata("ReadNonexistentCustomGetInAnotherInitializer.kt")
            public void testReadNonexistentCustomGetInAnotherInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentCustomGetInAnotherInitializer.kt");
            }
            
            @TestMetadata("ReadNonexistentDeclaredInHigher.kt")
            public void testReadNonexistentDeclaredInHigher() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentDeclaredInHigher.kt");
            }
            
            @TestMetadata("ReadNonexistentPropertyInAnonymous.kt")
            public void testReadNonexistentPropertyInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentPropertyInAnonymous.kt");
            }
            
            @TestMetadata("WriteNonexistentDeclaredInHigher.kt")
            public void testWriteNonexistentDeclaredInHigher() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/WriteNonexistentDeclaredInHigher.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/cast")
        public static class Cast extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInCast() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/cast"), "kt", false);
            }
            
            @TestMetadata("AsErasedError.kt")
            public void testAsErasedError() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/AsErasedError.kt");
            }
            
            @TestMetadata("AsErasedFine.kt")
            public void testAsErasedFine() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/AsErasedFine.kt");
            }
            
            @TestMetadata("AsErasedStar.kt")
            public void testAsErasedStar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/AsErasedStar.kt");
            }
            
            @TestMetadata("AsErasedWarning.kt")
            public void testAsErasedWarning() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/AsErasedWarning.kt");
            }
            
            @TestMetadata("IsErasedAllowParameterSubtype.kt")
            public void testIsErasedAllowParameterSubtype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowParameterSubtype.kt");
            }
            
            @TestMetadata("IsErasedAllowSameClassParameter.kt")
            public void testIsErasedAllowSameClassParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameClassParameter.kt");
            }
            
            @TestMetadata("IsErasedAllowSameParameterParameter.kt")
            public void testIsErasedAllowSameParameterParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameParameterParameter.kt");
            }
            
            @TestMetadata("IsErasedDisallowFromAny.kt")
            public void testIsErasedDisallowFromAny() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromAny.kt");
            }
            
            @TestMetadata("IsErasedDisallowFromOut.kt")
            public void testIsErasedDisallowFromOut() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOut.kt");
            }
            
            @TestMetadata("IsErasedStar.kt")
            public void testIsErasedStar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedStar.kt");
            }
            
            @TestMetadata("IsReified.kt")
            public void testIsReified() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsReified.kt");
            }
            
            @TestMetadata("IsTraits.kt")
            public void testIsTraits() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsTraits.kt");
            }
            
            @TestMetadata("WhenErasedDisallowFromAny.kt")
            public void testWhenErasedDisallowFromAny() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/WhenErasedDisallowFromAny.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/checkArguments")
        public static class CheckArguments extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInCheckArguments() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/checkArguments"), "kt", false);
            }
            
            @TestMetadata("kt1897_diagnostic_part.kt")
            public void testKt1897_diagnostic_part() throws Exception {
                doTest("compiler/testData/diagnostics/tests/checkArguments/kt1897_diagnostic_part.kt");
            }
            
            @TestMetadata("kt1940.kt")
            public void testKt1940() throws Exception {
                doTest("compiler/testData/diagnostics/tests/checkArguments/kt1940.kt");
            }
            
            @TestMetadata("SpreadVarargs.kt")
            public void testSpreadVarargs() throws Exception {
                doTest("compiler/testData/diagnostics/tests/checkArguments/SpreadVarargs.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis")
        public static class ControlFlowAnalysis extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInControlFlowAnalysis() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/controlFlowAnalysis"), "kt", false);
            }
            
            @TestMetadata("checkInnerLocalDeclarations.kt")
            public void testCheckInnerLocalDeclarations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkInnerLocalDeclarations.kt");
            }
            
            @TestMetadata("kt1001.kt")
            public void testKt1001() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1001.kt");
            }
            
            @TestMetadata("kt1027.kt")
            public void testKt1027() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1027.kt");
            }
            
            @TestMetadata("kt1066.kt")
            public void testKt1066() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1066.kt");
            }
            
            @TestMetadata("kt1156.kt")
            public void testKt1156() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1156.kt");
            }
            
            @TestMetadata("kt1185enums.kt")
            public void testKt1185enums() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1185enums.kt");
            }
            
            @TestMetadata("kt1189.kt")
            public void testKt1189() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1189.kt");
            }
            
            @TestMetadata("kt1191.kt")
            public void testKt1191() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1191.kt");
            }
            
            @TestMetadata("kt1219.1301.kt")
            public void testKt1219_1301() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1219.1301.kt");
            }
            
            @TestMetadata("kt1571.kt")
            public void testKt1571() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1571.kt");
            }
            
            @TestMetadata("kt1977.kt")
            public void testKt1977() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1977.kt");
            }
            
            @TestMetadata("kt2166_kt2103.kt")
            public void testKt2166_kt2103() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2166_kt2103.kt");
            }
            
            @TestMetadata("kt2226.kt")
            public void testKt2226() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2226.kt");
            }
            
            @TestMetadata("kt510.kt")
            public void testKt510() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt510.kt");
            }
            
            @TestMetadata("kt607.kt")
            public void testKt607() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt607.kt");
            }
            
            @TestMetadata("kt609.kt")
            public void testKt609() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt609.kt");
            }
            
            @TestMetadata("kt610.kt")
            public void testKt610() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt610.kt");
            }
            
            @TestMetadata("kt776.kt")
            public void testKt776() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt776.kt");
            }
            
            @TestMetadata("kt843.kt")
            public void testKt843() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt843.kt");
            }
            
            @TestMetadata("kt897.kt")
            public void testKt897() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt897.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/controlStructures")
        public static class ControlStructures extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInControlStructures() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/controlStructures"), "kt", false);
            }
            
            @TestMetadata("ForWithoutBraces.kt")
            public void testForWithoutBraces() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/ForWithoutBraces.kt");
            }
            
            @TestMetadata("kt1075.kt")
            public void testKt1075() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt1075.kt");
            }
            
            @TestMetadata("kt657.kt")
            public void testKt657() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt657.kt");
            }
            
            @TestMetadata("kt770.kt351.kt735_StatementType.kt")
            public void testKt770_kt351_kt735_StatementType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt770.kt351.kt735_StatementType.kt");
            }
            
            @TestMetadata("kt786.kt")
            public void testKt786() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt786.kt");
            }
            
            @TestMetadata("kt799.kt")
            public void testKt799() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt799.kt");
            }
            
            @TestMetadata("tryReturnType.kt")
            public void testTryReturnType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/tryReturnType.kt");
            }
            
            @TestMetadata("when.kt234.kt973.kt")
            public void testWhen_kt234_kt973() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/when.kt234.kt973.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/dataFlow")
        public static class DataFlow extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInDataFlow() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/dataFlow"), "kt", false);
            }
            
            @TestMetadata("CalleeExpression.kt")
            public void testCalleeExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlow/CalleeExpression.kt");
            }
            
            @TestMetadata("TupleExpression.kt")
            public void testTupleExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlow/TupleExpression.kt");
            }
            
            @TestMetadata("WhenSubject.kt")
            public void testWhenSubject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlow/WhenSubject.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal")
        public static class DataFlowInfoTraversal extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInDataFlowInfoTraversal() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/dataFlowInfoTraversal"), "kt", false);
            }
            
            @TestMetadata("AndOr.kt")
            public void testAndOr() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AndOr.kt");
            }
            
            @TestMetadata("ArrayAccess.kt")
            public void testArrayAccess() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayAccess.kt");
            }
            
            @TestMetadata("BinaryExpression.kt")
            public void testBinaryExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpression.kt");
            }
            
            @TestMetadata("DeepIf.kt")
            public void testDeepIf() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DeepIf.kt");
            }
            
            @TestMetadata("DoWhile.kt")
            public void testDoWhile() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhile.kt");
            }
            
            @TestMetadata("Elvis.kt")
            public void testElvis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Elvis.kt");
            }
            
            @TestMetadata("ExclExcl.kt")
            public void testExclExcl() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ExclExcl.kt");
            }
            
            @TestMetadata("For.kt")
            public void testFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/For.kt");
            }
            
            @TestMetadata("FunctionLiteral.kt")
            public void testFunctionLiteral() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/FunctionLiteral.kt");
            }
            
            @TestMetadata("IfThenElse.kt")
            public void testIfThenElse() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElse.kt");
            }
            
            @TestMetadata("IfThenElseBothInvalid.kt")
            public void testIfThenElseBothInvalid() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElseBothInvalid.kt");
            }
            
            @TestMetadata("ObjectExpression.kt")
            public void testObjectExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ObjectExpression.kt");
            }
            
            @TestMetadata("QualifiedExpression.kt")
            public void testQualifiedExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/QualifiedExpression.kt");
            }
            
            @TestMetadata("Return.kt")
            public void testReturn() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Return.kt");
            }
            
            @TestMetadata("ThisSuper.kt")
            public void testThisSuper() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ThisSuper.kt");
            }
            
            @TestMetadata("Throw.kt")
            public void testThrow() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Throw.kt");
            }
            
            @TestMetadata("TryCatch.kt")
            public void testTryCatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryCatch.kt");
            }
            
            @TestMetadata("UnaryExpression.kt")
            public void testUnaryExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/UnaryExpression.kt");
            }
            
            @TestMetadata("When.kt")
            public void testWhen() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/When.kt");
            }
            
            @TestMetadata("While.kt")
            public void testWhile() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/While.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks")
        public static class DeclarationChecks extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInDeclarationChecks() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/declarationChecks"), "kt", false);
            }
            
            @TestMetadata("kt1141.kt")
            public void testKt1141() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt1141.kt");
            }
            
            @TestMetadata("kt1193.kt")
            public void testKt1193() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt1193.kt");
            }
            
            @TestMetadata("kt2096.kt")
            public void testKt2096() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt2096.kt");
            }
            
            @TestMetadata("kt2142.kt")
            public void testKt2142() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt2142.kt");
            }
            
            @TestMetadata("kt559.kt")
            public void testKt559() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt559.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/extensions")
        public static class Extensions extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInExtensions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/extensions"), "kt", false);
            }
            
            @TestMetadata("ExtensionFunctions.kt")
            public void testExtensionFunctions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/ExtensionFunctions.kt");
            }
            
            @TestMetadata("ExtensionsCalledOnSuper.kt")
            public void testExtensionsCalledOnSuper() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/ExtensionsCalledOnSuper.kt");
            }
            
            @TestMetadata("GenericIterator.kt")
            public void testGenericIterator() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/GenericIterator.kt");
            }
            
            @TestMetadata("GenericIterator2.kt")
            public void testGenericIterator2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/GenericIterator2.kt");
            }
            
            @TestMetadata("kt1875.kt")
            public void testKt1875() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/kt1875.kt");
            }
            
            @TestMetadata("kt2317.kt")
            public void testKt2317() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/kt2317.kt");
            }
            
            @TestMetadata("kt819ExtensionProperties.kt")
            public void testKt819ExtensionProperties() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/kt819ExtensionProperties.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/generics")
        public static class Generics extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInGenerics() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/generics"), "kt", false);
            }
            
            @TestMetadata("kt1575-Class.kt")
            public void testKt1575_Class() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/kt1575-Class.kt");
            }
            
            @TestMetadata("kt1575-ClassObject.kt")
            public void testKt1575_ClassObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/kt1575-ClassObject.kt");
            }
            
            @TestMetadata("kt1575-Function.kt")
            public void testKt1575_Function() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/kt1575-Function.kt");
            }
            
            @TestMetadata("Projections.kt")
            public void testProjections() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/Projections.kt");
            }
            
            @TestMetadata("RecursiveUpperBoundCheck.kt")
            public void testRecursiveUpperBoundCheck() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundCheck.kt");
            }
            
            @TestMetadata("RecursiveUpperBoundWithTwoArguments.kt")
            public void testRecursiveUpperBoundWithTwoArguments() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundWithTwoArguments.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode")
        public static class IncompleteCode extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInIncompleteCode() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/incompleteCode"), "kt", false);
            }
            
            @TestMetadata("arrayBracketsRange.kt")
            public void testArrayBracketsRange() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/arrayBracketsRange.kt");
            }
            
            @TestMetadata("incompleteAssignment.kt")
            public void testIncompleteAssignment() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteAssignment.kt");
            }
            
            @TestMetadata("kt1955.kt")
            public void testKt1955() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/kt1955.kt");
            }
            
            @TestMetadata("kt2014.kt")
            public void testKt2014() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/kt2014.kt");
            }
            
            @TestMetadata("plusOnTheRight.kt")
            public void testPlusOnTheRight() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/plusOnTheRight.kt");
            }
            
            @TestMetadata("pseudocodeTraverseNextInstructions.kt")
            public void testPseudocodeTraverseNextInstructions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/pseudocodeTraverseNextInstructions.kt");
            }
            
            @TestMetadata("senselessComparisonWithNull.kt")
            public void testSenselessComparisonWithNull() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/senselessComparisonWithNull.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError")
            public static class DiagnosticWithSyntaxError extends AbstractDiagnosticsTestWithEagerResolve {
                public void testAllFilesPresentInDiagnosticWithSyntaxError() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError"), "kt", false);
                }
                
                @TestMetadata("checkBackingFieldException.kt")
                public void testCheckBackingFieldException() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/checkBackingFieldException.kt");
                }
                
                @TestMetadata("funEquals.kt")
                public void testFunEquals() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funEquals.kt");
                }
                
                @TestMetadata("funKeyword.kt")
                public void testFunKeyword() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funKeyword.kt");
                }
                
                @TestMetadata("incompleteVal.kt")
                public void testIncompleteVal() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteVal.kt");
                }
                
                @TestMetadata("incompleteValWithAccessor.kt")
                public void testIncompleteValWithAccessor() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteValWithAccessor.kt");
                }
                
                @TestMetadata("incompleteWhen.kt")
                public void testIncompleteWhen() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteWhen.kt");
                }
                
                @TestMetadata("namedFun.kt")
                public void testNamedFun() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/namedFun.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("IncompleteCode");
                suite.addTestSuite(IncompleteCode.class);
                suite.addTestSuite(DiagnosticWithSyntaxError.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/inference")
        public static class Inference extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInInference() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/inference"), "kt", false);
            }
            
            @TestMetadata("arrayConstructor.kt")
            public void testArrayConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/arrayConstructor.kt");
            }
            
            @TestMetadata("conflictingSubstitutions.kt")
            public void testConflictingSubstitutions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/conflictingSubstitutions.kt");
            }
            
            @TestMetadata("dependOnExpectedType.kt")
            public void testDependOnExpectedType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/dependOnExpectedType.kt");
            }
            
            @TestMetadata("hasErrorInConstrainingTypes.kt")
            public void testHasErrorInConstrainingTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/hasErrorInConstrainingTypes.kt");
            }
            
            @TestMetadata("inferInFunctionLiterals.kt")
            public void testInferInFunctionLiterals() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/inferInFunctionLiterals.kt");
            }
            
            @TestMetadata("kt1293.kt")
            public void testKt1293() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/kt1293.kt");
            }
            
            @TestMetadata("listConstructor.kt")
            public void testListConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/listConstructor.kt");
            }
            
            @TestMetadata("mapFunction.kt")
            public void testMapFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/mapFunction.kt");
            }
            
            @TestMetadata("NoInferenceFromDeclaredBounds.kt")
            public void testNoInferenceFromDeclaredBounds() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/NoInferenceFromDeclaredBounds.kt");
            }
            
            @TestMetadata("noInformationForParameter.kt")
            public void testNoInformationForParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/noInformationForParameter.kt");
            }
            
            @TestMetadata("typeConstructorMismatch.kt")
            public void testTypeConstructorMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/typeConstructorMismatch.kt");
            }
            
            @TestMetadata("typeInferenceExpectedTypeMismatch.kt")
            public void testTypeInferenceExpectedTypeMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/typeInferenceExpectedTypeMismatch.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inference/regressions")
            public static class Regressions extends AbstractDiagnosticsTestWithEagerResolve {
                public void testAllFilesPresentInRegressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/inference/regressions"), "kt", false);
                }
                
                @TestMetadata("kt1029.kt")
                public void testKt1029() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1029.kt");
                }
                
                @TestMetadata("kt1031.kt")
                public void testKt1031() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1031.kt");
                }
                
                @TestMetadata("kt1558.kt")
                public void testKt1558() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1558.kt");
                }
                
                @TestMetadata("kt1944.kt")
                public void testKt1944() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1944.kt");
                }
                
                @TestMetadata("kt2179.kt")
                public void testKt2179() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2179.kt");
                }
                
                @TestMetadata("kt2294.kt")
                public void testKt2294() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2294.kt");
                }
                
                @TestMetadata("kt2320.kt")
                public void testKt2320() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2320.kt");
                }
                
                @TestMetadata("kt2324.kt")
                public void testKt2324() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2324.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Inference");
                suite.addTestSuite(Inference.class);
                suite.addTestSuite(Regressions.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/infos")
        public static class Infos extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInInfos() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/infos"), "kt", false);
            }
            
            @TestMetadata("Autocasts.kt")
            public void testAutocasts() throws Exception {
                doTest("compiler/testData/diagnostics/tests/infos/Autocasts.kt");
            }
            
            @TestMetadata("PropertiesWithBackingFields.kt")
            public void testPropertiesWithBackingFields() throws Exception {
                doTest("compiler/testData/diagnostics/tests/infos/PropertiesWithBackingFields.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/j+k")
        public static class J_k extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInJ_k() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/j+k"), "kt", false);
            }
            
            @TestMetadata("kt1402.kt")
            public void testKt1402() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt1402.kt");
            }
            
            @TestMetadata("OverrideVararg.kt")
            public void testOverrideVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/OverrideVararg.kt");
            }
            
            @TestMetadata("packageVisibility.kt")
            public void testPackageVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/packageVisibility.kt");
            }
            
            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/Simple.kt");
            }
            
            @TestMetadata("StaticMembersFromSuperclasses.kt")
            public void testStaticMembersFromSuperclasses() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/StaticMembersFromSuperclasses.kt");
            }
            
            @TestMetadata("SupertypeArgumentsNullability-NotNull-SpecialTypes.kt")
            public void testSupertypeArgumentsNullability_NotNull_SpecialTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-SpecialTypes.kt");
            }
            
            @TestMetadata("SupertypeArgumentsNullability-NotNull-UserTypes.kt")
            public void testSupertypeArgumentsNullability_NotNull_UserTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-UserTypes.kt");
            }
            
            @TestMetadata("SupertypeArgumentsNullability-SpecialTypes.kt")
            public void testSupertypeArgumentsNullability_SpecialTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-SpecialTypes.kt");
            }
            
            @TestMetadata("SupertypeArgumentsNullability-UserTypes.kt")
            public void testSupertypeArgumentsNullability_UserTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt");
            }
            
            @TestMetadata("UnboxingNulls.kt")
            public void testUnboxingNulls() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/UnboxingNulls.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/jdk-annotations")
        public static class Jdk_annotations extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInJdk_annotations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/jdk-annotations"), "kt", false);
            }
            
            @TestMetadata("ArrayListAndMap.kt")
            public void testArrayListAndMap() throws Exception {
                doTest("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListAndMap.kt");
            }
            
            @TestMetadata("ArrayListClone.kt")
            public void testArrayListClone() throws Exception {
                doTest("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListClone.kt");
            }
            
            @TestMetadata("ArrayListToArray.kt")
            public void testArrayListToArray() throws Exception {
                doTest("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListToArray.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/library")
        public static class Library extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInLibrary() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/library"), "kt", false);
            }
            
            @TestMetadata("kt828.kt")
            public void testKt828() throws Exception {
                doTest("compiler/testData/diagnostics/tests/library/kt828.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts")
        public static class NullabilityAndAutoCasts extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInNullabilityAndAutoCasts() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts"), "kt", false);
            }
            
            @TestMetadata("AssertNotNull.kt")
            public void testAssertNotNull() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/AssertNotNull.kt");
            }
            
            @TestMetadata("funcLiteralArgsInsideUnresolvedFunction.kt")
            public void testFuncLiteralArgsInsideUnresolvedFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/funcLiteralArgsInsideUnresolvedFunction.kt");
            }
            
            @TestMetadata("InfixCallNullability.kt")
            public void testInfixCallNullability() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/InfixCallNullability.kt");
            }
            
            @TestMetadata("kt1270.kt")
            public void testKt1270() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt1270.kt");
            }
            
            @TestMetadata("kt1680.kt")
            public void testKt1680() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt1680.kt");
            }
            
            @TestMetadata("kt1778.kt")
            public void testKt1778() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt1778.kt");
            }
            
            @TestMetadata("kt2109.kt")
            public void testKt2109() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2109.kt");
            }
            
            @TestMetadata("kt2125.kt")
            public void testKt2125() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2125.kt");
            }
            
            @TestMetadata("kt2146.kt")
            public void testKt2146() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2146.kt");
            }
            
            @TestMetadata("kt2164.kt")
            public void testKt2164() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2164.kt");
            }
            
            @TestMetadata("kt2176.kt")
            public void testKt2176() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2176.kt");
            }
            
            @TestMetadata("kt2195.kt")
            public void testKt2195() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2195.kt");
            }
            
            @TestMetadata("kt2212.kt")
            public void testKt2212() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2212.kt");
            }
            
            @TestMetadata("kt2216.kt")
            public void testKt2216() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2216.kt");
            }
            
            @TestMetadata("kt2223.kt")
            public void testKt2223() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2223.kt");
            }
            
            @TestMetadata("kt2234.kt")
            public void testKt2234() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2234.kt");
            }
            
            @TestMetadata("kt244.kt")
            public void testKt244() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt244.kt");
            }
            
            @TestMetadata("kt362.kt")
            public void testKt362() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt362.kt");
            }
            
            @TestMetadata("NullableNothingIsExactlyNull.kt")
            public void testNullableNothingIsExactlyNull() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/NullableNothingIsExactlyNull.kt");
            }
            
            @TestMetadata("PreferExtensionsOnNullableReceiver.kt")
            public void testPreferExtensionsOnNullableReceiver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/PreferExtensionsOnNullableReceiver.kt");
            }
            
            @TestMetadata("QualifiedExpressionNullability.kt")
            public void testQualifiedExpressionNullability() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/QualifiedExpressionNullability.kt");
            }
            
            @TestMetadata("ReceiverNullability.kt")
            public void testReceiverNullability() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/ReceiverNullability.kt");
            }
            
            @TestMetadata("SenselessNullInWhen.kt")
            public void testSenselessNullInWhen() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/SenselessNullInWhen.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/objects")
        public static class Objects extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInObjects() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/objects"), "kt", false);
            }
            
            @TestMetadata("kt2240.kt")
            public void testKt2240() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/kt2240.kt");
            }
            
            @TestMetadata("Objects.kt")
            public void testObjects() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/Objects.kt");
            }
            
            @TestMetadata("ObjectsInheritance.kt")
            public void testObjectsInheritance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/ObjectsInheritance.kt");
            }
            
            @TestMetadata("ObjectsLocal.kt")
            public void testObjectsLocal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/ObjectsLocal.kt");
            }
            
            @TestMetadata("ObjectsNested.kt")
            public void testObjectsNested() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/ObjectsNested.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading")
        public static class OperatorsOverloading extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInOperatorsOverloading() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/operatorsOverloading"), "kt", false);
            }
            
            @TestMetadata("AssignOperatorAmbiguity.kt")
            public void testAssignOperatorAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorAmbiguity.kt");
            }
            
            @TestMetadata("IteratorAmbiguity.kt")
            public void testIteratorAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/operatorsOverloading/IteratorAmbiguity.kt");
            }
            
            @TestMetadata("kt1028.kt")
            public void testKt1028() throws Exception {
                doTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt1028.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/overload")
        public static class Overload extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInOverload() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/overload"), "kt", false);
            }
            
            @TestMetadata("ConflictingOverloadsFunsDifferentReturnInClass.kt")
            public void testConflictingOverloadsFunsDifferentReturnInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInClass.kt");
            }
            
            @TestMetadata("ConflictingOverloadsFunsDifferentReturnInPackage.kt")
            public void testConflictingOverloadsFunsDifferentReturnInPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInPackage.kt");
            }
            
            @TestMetadata("ConflictingOverloadsIdenticalExtFunsInPackage.kt")
            public void testConflictingOverloadsIdenticalExtFunsInPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalExtFunsInPackage.kt");
            }
            
            @TestMetadata("ConflictingOverloadsIdenticalFunsInClass.kt")
            public void testConflictingOverloadsIdenticalFunsInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsInClass.kt");
            }
            
            @TestMetadata("ConflictingOverloadsIdenticalFunsTPInClass.kt")
            public void testConflictingOverloadsIdenticalFunsTPInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsTPInClass.kt");
            }
            
            @TestMetadata("ConflictingOverloadsIdenticalValsInClass.kt")
            public void testConflictingOverloadsIdenticalValsInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalValsInClass.kt");
            }
            
            @TestMetadata("ConflictingOverloadsValsDifferentTypeInClass.kt")
            public void testConflictingOverloadsValsDifferentTypeInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsValsDifferentTypeInClass.kt");
            }
            
            @TestMetadata("ConstructorVsFunOverload.kt")
            public void testConstructorVsFunOverload() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConstructorVsFunOverload.kt");
            }
            
            @TestMetadata("ExtFunDifferentReceiver.kt")
            public void testExtFunDifferentReceiver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ExtFunDifferentReceiver.kt");
            }
            
            @TestMetadata("FunNoConflictInDifferentPackages.kt")
            public void testFunNoConflictInDifferentPackages() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/FunNoConflictInDifferentPackages.kt");
            }
            
            @TestMetadata("OverloadFunRegularAndExt.kt")
            public void testOverloadFunRegularAndExt() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/OverloadFunRegularAndExt.kt");
            }
            
            @TestMetadata("OverloadVarAndFunInClass.kt")
            public void testOverloadVarAndFunInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/OverloadVarAndFunInClass.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/override")
        public static class Override extends AbstractDiagnosticsTestWithEagerResolve {
            @TestMetadata("AbstractFunImplemented.kt")
            public void testAbstractFunImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractFunImplemented.kt");
            }
            
            @TestMetadata("AbstractFunNotImplemented.kt")
            public void testAbstractFunNotImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractFunNotImplemented.kt");
            }
            
            @TestMetadata("AbstractValImplemented.kt")
            public void testAbstractValImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractValImplemented.kt");
            }
            
            @TestMetadata("AbstractValNotImplemented.kt")
            public void testAbstractValNotImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractValNotImplemented.kt");
            }
            
            @TestMetadata("AbstractVarImplemented.kt")
            public void testAbstractVarImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractVarImplemented.kt");
            }
            
            @TestMetadata("AbstractVarNotImplemented.kt")
            public void testAbstractVarNotImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractVarNotImplemented.kt");
            }
            
            public void testAllFilesPresentInOverride() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/override"), "kt", false);
            }
            
            @TestMetadata("AllPrivateFromSuperTypes.kt")
            public void testAllPrivateFromSuperTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AllPrivateFromSuperTypes.kt");
            }
            
            @TestMetadata("AllProtectedFromSupertypes.kt")
            public void testAllProtectedFromSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AllProtectedFromSupertypes.kt");
            }
            
            @TestMetadata("ComplexValRedeclaration.kt")
            public void testComplexValRedeclaration() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ComplexValRedeclaration.kt");
            }
            
            @TestMetadata("ConflictingFunctionSignatureFromSuperclass.kt")
            public void testConflictingFunctionSignatureFromSuperclass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ConflictingFunctionSignatureFromSuperclass.kt");
            }
            
            @TestMetadata("ConflictingParameterNames.kt")
            public void testConflictingParameterNames() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ConflictingParameterNames.kt");
            }
            
            @TestMetadata("ConflictingParameterNames-MultipleSupertypes.kt")
            public void testConflictingParameterNames_MultipleSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ConflictingParameterNames-MultipleSupertypes.kt");
            }
            
            @TestMetadata("ConflictingPropertySignatureFromSuperclass.kt")
            public void testConflictingPropertySignatureFromSuperclass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ConflictingPropertySignatureFromSuperclass.kt");
            }
            
            @TestMetadata("DefaultParameterValueInOverride.kt")
            public void testDefaultParameterValueInOverride() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DefaultParameterValueInOverride.kt");
            }
            
            @TestMetadata("DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt")
            public void testDefaultParameterValues_NoErrorsWhenInheritingFromOneTypeTwice() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt");
            }
            
            @TestMetadata("DelegationFun.kt")
            public void testDelegationFun() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DelegationFun.kt");
            }
            
            @TestMetadata("DelegationVal.kt")
            public void testDelegationVal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DelegationVal.kt");
            }
            
            @TestMetadata("DelegationVar.kt")
            public void testDelegationVar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DelegationVar.kt");
            }
            
            @TestMetadata("EqualityOfIntersectionTypes.kt")
            public void testEqualityOfIntersectionTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/EqualityOfIntersectionTypes.kt");
            }
            
            @TestMetadata("ExtendFunctionClass.kt")
            public void testExtendFunctionClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ExtendFunctionClass.kt");
            }
            
            @TestMetadata("FakeOverrideAbstractAndNonAbstractFun.kt")
            public void testFakeOverrideAbstractAndNonAbstractFun() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/FakeOverrideAbstractAndNonAbstractFun.kt");
            }
            
            @TestMetadata("Generics.kt")
            public void testGenerics() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/Generics.kt");
            }
            
            @TestMetadata("InvisiblePotentialOverride.kt")
            public void testInvisiblePotentialOverride() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/InvisiblePotentialOverride.kt");
            }
            
            @TestMetadata("kt1862.kt")
            public void testKt1862() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/kt1862.kt");
            }
            
            @TestMetadata("MultipleDefaultParametersInSupertypes.kt")
            public void testMultipleDefaultParametersInSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypes.kt");
            }
            
            @TestMetadata("MultipleDefaultParametersInSupertypesNoOverride.kt")
            public void testMultipleDefaultParametersInSupertypesNoOverride() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypesNoOverride.kt");
            }
            
            @TestMetadata("MultipleDefaultsInSupertypesNoExplicitOverride.kt")
            public void testMultipleDefaultsInSupertypesNoExplicitOverride() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/MultipleDefaultsInSupertypesNoExplicitOverride.kt");
            }
            
            @TestMetadata("NonGenerics.kt")
            public void testNonGenerics() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/NonGenerics.kt");
            }
            
            @TestMetadata("ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt")
            public void testParameterDefaultValues_DefaultValueFromOnlyOneSupertype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt");
            }
            
            @TestMetadata("ProtectedAndPrivateFromSupertypes.kt")
            public void testProtectedAndPrivateFromSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ProtectedAndPrivateFromSupertypes.kt");
            }
            
            @TestMetadata("SuspiciousCase1.kt")
            public void testSuspiciousCase1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/SuspiciousCase1.kt");
            }
            
            @TestMetadata("ToAbstractMembersFromSuper-kt1996.kt")
            public void testToAbstractMembersFromSuper_kt1996() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ToAbstractMembersFromSuper-kt1996.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/redeclarations")
        public static class Redeclarations extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInRedeclarations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/redeclarations"), "kt", false);
            }
            
            @TestMetadata("kt2247.kt")
            public void testKt2247() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/kt2247.kt");
            }
            
            @TestMetadata("MultiFilePackageRedeclaration.kt")
            public void testMultiFilePackageRedeclaration() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/MultiFilePackageRedeclaration.kt");
            }
            
            @TestMetadata("Redeclarations.kt")
            public void testRedeclarations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/Redeclarations.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/regressions")
        public static class Regressions extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInRegressions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/regressions"), "kt", false);
            }
            
            @TestMetadata("AmbiguityOnLazyTypeComputation.kt")
            public void testAmbiguityOnLazyTypeComputation() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/AmbiguityOnLazyTypeComputation.kt");
            }
            
            @TestMetadata("AssignmentsUnderOperators.kt")
            public void testAssignmentsUnderOperators() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/AssignmentsUnderOperators.kt");
            }
            
            @TestMetadata("CoercionToUnit.kt")
            public void testCoercionToUnit() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/CoercionToUnit.kt");
            }
            
            @TestMetadata("DoubleDefine.kt")
            public void testDoubleDefine() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/DoubleDefine.kt");
            }
            
            @TestMetadata("ErrorsOnIbjectExpressionsAsParameters.kt")
            public void testErrorsOnIbjectExpressionsAsParameters() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/ErrorsOnIbjectExpressionsAsParameters.kt");
            }
            
            @TestMetadata("Jet11.kt")
            public void testJet11() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet11.kt");
            }
            
            @TestMetadata("Jet121.kt")
            public void testJet121() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet121.kt");
            }
            
            @TestMetadata("Jet124.kt")
            public void testJet124() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet124.kt");
            }
            
            @TestMetadata("Jet169.kt")
            public void testJet169() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet169.kt");
            }
            
            @TestMetadata("Jet17.kt")
            public void testJet17() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet17.kt");
            }
            
            @TestMetadata("Jet183.kt")
            public void testJet183() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet183.kt");
            }
            
            @TestMetadata("Jet183-1.kt")
            public void testJet183_1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet183-1.kt");
            }
            
            @TestMetadata("Jet53.kt")
            public void testJet53() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet53.kt");
            }
            
            @TestMetadata("Jet67.kt")
            public void testJet67() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet67.kt");
            }
            
            @TestMetadata("Jet68.kt")
            public void testJet68() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet68.kt");
            }
            
            @TestMetadata("Jet69.kt")
            public void testJet69() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet69.kt");
            }
            
            @TestMetadata("Jet72.kt")
            public void testJet72() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet72.kt");
            }
            
            @TestMetadata("Jet81.kt")
            public void testJet81() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet81.kt");
            }
            
            @TestMetadata("kt127.kt")
            public void testKt127() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt127.kt");
            }
            
            @TestMetadata("kt128.kt")
            public void testKt128() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt128.kt");
            }
            
            @TestMetadata("kt1489_1728.kt")
            public void testKt1489_1728() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1489_1728.kt");
            }
            
            @TestMetadata("kt1550.kt")
            public void testKt1550() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1550.kt");
            }
            
            @TestMetadata("kt1639-JFrame.kt")
            public void testKt1639_JFrame() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1639-JFrame.kt");
            }
            
            @TestMetadata("kt1647.kt")
            public void testKt1647() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1647.kt");
            }
            
            @TestMetadata("kt1736.kt")
            public void testKt1736() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1736.kt");
            }
            
            @TestMetadata("kt174.kt")
            public void testKt174() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt174.kt");
            }
            
            @TestMetadata("kt201.kt")
            public void testKt201() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt201.kt");
            }
            
            @TestMetadata("kt235.kt")
            public void testKt235() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt235.kt");
            }
            
            @TestMetadata("kt2376.kt")
            public void testKt2376() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt2376.kt");
            }
            
            @TestMetadata("kt251.kt")
            public void testKt251() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt251.kt");
            }
            
            @TestMetadata("kt258.kt")
            public void testKt258() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt258.kt");
            }
            
            @TestMetadata("kt26.kt")
            public void testKt26() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt26.kt");
            }
            
            @TestMetadata("kt26-1.kt")
            public void testKt26_1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt26-1.kt");
            }
            
            @TestMetadata("kt282.kt")
            public void testKt282() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt282.kt");
            }
            
            @TestMetadata("kt287.kt")
            public void testKt287() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt287.kt");
            }
            
            @TestMetadata("kt302.kt")
            public void testKt302() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt302.kt");
            }
            
            @TestMetadata("kt303.kt")
            public void testKt303() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt303.kt");
            }
            
            @TestMetadata("kt306.kt")
            public void testKt306() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt306.kt");
            }
            
            @TestMetadata("kt307.kt")
            public void testKt307() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt307.kt");
            }
            
            @TestMetadata("kt312.kt")
            public void testKt312() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt312.kt");
            }
            
            @TestMetadata("kt313.kt")
            public void testKt313() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt313.kt");
            }
            
            @TestMetadata("kt316.kt")
            public void testKt316() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt316.kt");
            }
            
            @TestMetadata("kt328.kt")
            public void testKt328() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt328.kt");
            }
            
            @TestMetadata("kt335.336.kt")
            public void testKt335_336() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt335.336.kt");
            }
            
            @TestMetadata("kt337.kt")
            public void testKt337() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt337.kt");
            }
            
            @TestMetadata("kt352.kt")
            public void testKt352() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt352.kt");
            }
            
            @TestMetadata("kt353.kt")
            public void testKt353() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt353.kt");
            }
            
            @TestMetadata("kt385.109.441.kt")
            public void testKt385_109_441() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt385.109.441.kt");
            }
            
            @TestMetadata("kt394.kt")
            public void testKt394() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt394.kt");
            }
            
            @TestMetadata("kt398.kt")
            public void testKt398() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt398.kt");
            }
            
            @TestMetadata("kt399.kt")
            public void testKt399() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt399.kt");
            }
            
            @TestMetadata("kt402.kt")
            public void testKt402() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt402.kt");
            }
            
            @TestMetadata("kt41.kt")
            public void testKt41() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt41.kt");
            }
            
            @TestMetadata("kt411.kt")
            public void testKt411() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt411.kt");
            }
            
            @TestMetadata("kt439.kt")
            public void testKt439() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt439.kt");
            }
            
            @TestMetadata("kt442.kt")
            public void testKt442() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt442.kt");
            }
            
            @TestMetadata("kt443.kt")
            public void testKt443() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt443.kt");
            }
            
            @TestMetadata("kt455.kt")
            public void testKt455() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt455.kt");
            }
            
            @TestMetadata("kt456.kt")
            public void testKt456() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt456.kt");
            }
            
            @TestMetadata("kt459.kt")
            public void testKt459() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt459.kt");
            }
            
            @TestMetadata("kt469.kt")
            public void testKt469() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt469.kt");
            }
            
            @TestMetadata("kt498.kt")
            public void testKt498() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt498.kt");
            }
            
            @TestMetadata("kt524.kt")
            public void testKt524() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt524.kt");
            }
            
            @TestMetadata("kt526UnresolvedReferenceInnerStatic.kt")
            public void testKt526UnresolvedReferenceInnerStatic() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt526UnresolvedReferenceInnerStatic.kt");
            }
            
            @TestMetadata("kt549.kt")
            public void testKt549() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt549.kt");
            }
            
            @TestMetadata("kt557.kt")
            public void testKt557() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt557.kt");
            }
            
            @TestMetadata("kt571.kt")
            public void testKt571() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt571.kt");
            }
            
            @TestMetadata("kt575.kt")
            public void testKt575() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt575.kt");
            }
            
            @TestMetadata("kt58.kt")
            public void testKt58() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt58.kt");
            }
            
            @TestMetadata("kt580.kt")
            public void testKt580() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt580.kt");
            }
            
            @TestMetadata("kt588.kt")
            public void testKt588() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt588.kt");
            }
            
            @TestMetadata("kt597.kt")
            public void testKt597() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt597.kt");
            }
            
            @TestMetadata("kt600.kt")
            public void testKt600() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt600.kt");
            }
            
            @TestMetadata("kt604.kt")
            public void testKt604() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt604.kt");
            }
            
            @TestMetadata("kt618.kt")
            public void testKt618() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt618.kt");
            }
            
            @TestMetadata("kt629.kt")
            public void testKt629() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt629.kt");
            }
            
            @TestMetadata("kt630.kt")
            public void testKt630() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt630.kt");
            }
            
            @TestMetadata("kt688.kt")
            public void testKt688() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt688.kt");
            }
            
            @TestMetadata("kt691.kt")
            public void testKt691() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt691.kt");
            }
            
            @TestMetadata("kt701.kt")
            public void testKt701() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt701.kt");
            }
            
            @TestMetadata("kt716.kt")
            public void testKt716() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt716.kt");
            }
            
            @TestMetadata("kt743.kt")
            public void testKt743() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt743.kt");
            }
            
            @TestMetadata("kt750.kt")
            public void testKt750() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt750.kt");
            }
            
            @TestMetadata("kt762.kt")
            public void testKt762() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt762.kt");
            }
            
            @TestMetadata("kt847.kt")
            public void testKt847() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt847.kt");
            }
            
            @TestMetadata("kt860.kt")
            public void testKt860() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt860.kt");
            }
            
            @TestMetadata("OrphanStarProjection.kt")
            public void testOrphanStarProjection() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/OrphanStarProjection.kt");
            }
            
            @TestMetadata("OutProjections.kt")
            public void testOutProjections() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/OutProjections.kt");
            }
            
            @TestMetadata("OverrideResolution.kt")
            public void testOverrideResolution() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/OverrideResolution.kt");
            }
            
            @TestMetadata("SpecififcityByReceiver.kt")
            public void testSpecififcityByReceiver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/SpecififcityByReceiver.kt");
            }
            
            @TestMetadata("TypeMismatchOnUnaryOperations.kt")
            public void testTypeMismatchOnUnaryOperations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/TypeMismatchOnUnaryOperations.kt");
            }
            
            @TestMetadata("TypeParameterAsASupertype.kt")
            public void testTypeParameterAsASupertype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/TypeParameterAsASupertype.kt");
            }
            
            @TestMetadata("UnavaliableQualifiedThis.kt")
            public void testUnavaliableQualifiedThis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/UnavaliableQualifiedThis.kt");
            }
            
            @TestMetadata("WrongTraceInCallResolver.kt")
            public void testWrongTraceInCallResolver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/WrongTraceInCallResolver.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/scopes")
        public static class Scopes extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInScopes() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/scopes"), "kt", false);
            }
            
            @TestMetadata("ImportFromCurrentWithDifferentName.kt")
            public void testImportFromCurrentWithDifferentName() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportFromCurrentWithDifferentName.kt");
            }
            
            @TestMetadata("ImportObjectHidesCurrentPackage.kt")
            public void testImportObjectHidesCurrentPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportObjectHidesCurrentPackage.kt");
            }
            
            @TestMetadata("ImportTwoTimes.kt")
            public void testImportTwoTimes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportTwoTimes.kt");
            }
            
            @TestMetadata("ImportTwoTimesStar.kt")
            public void testImportTwoTimesStar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportTwoTimesStar.kt");
            }
            
            @TestMetadata("Imports.kt")
            public void testImports() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/Imports.kt");
            }
            
            @TestMetadata("ImportsConflicting.kt")
            public void testImportsConflicting() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportsConflicting.kt");
            }
            
            @TestMetadata("ImportsUselessSimpleImport.kt")
            public void testImportsUselessSimpleImport() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportsUselessSimpleImport.kt");
            }
            
            @TestMetadata("ImportsUselessSimpleImport2.kt")
            public void testImportsUselessSimpleImport2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportsUselessSimpleImport2.kt");
            }
            
            @TestMetadata("Imports-hidden.kt")
            public void testImports_hidden() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/Imports-hidden.kt");
            }
            
            @TestMetadata("initializerScopeOfExtensionProperty.kt")
            public void testInitializerScopeOfExtensionProperty() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/initializerScopeOfExtensionProperty.kt");
            }
            
            @TestMetadata("kt1078.kt")
            public void testKt1078() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1078.kt");
            }
            
            @TestMetadata("kt1080.kt")
            public void testKt1080() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1080.kt");
            }
            
            @TestMetadata("kt1244.kt")
            public void testKt1244() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1244.kt");
            }
            
            @TestMetadata("kt1248.kt")
            public void testKt1248() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1248.kt");
            }
            
            @TestMetadata("kt151.kt")
            public void testKt151() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt151.kt");
            }
            
            @TestMetadata("kt1579.kt")
            public void testKt1579() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1579.kt");
            }
            
            @TestMetadata("kt1579_map_entry.kt")
            public void testKt1579_map_entry() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1579_map_entry.kt");
            }
            
            @TestMetadata("kt1580.kt")
            public void testKt1580() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1580.kt");
            }
            
            @TestMetadata("kt1642.kt")
            public void testKt1642() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1642.kt");
            }
            
            @TestMetadata("kt1738.kt")
            public void testKt1738() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1738.kt");
            }
            
            @TestMetadata("kt1805.kt")
            public void testKt1805() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1805.kt");
            }
            
            @TestMetadata("kt1806.kt")
            public void testKt1806() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1806.kt");
            }
            
            @TestMetadata("kt1822.kt")
            public void testKt1822() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1822.kt");
            }
            
            @TestMetadata("kt1942.kt")
            public void testKt1942() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1942.kt");
            }
            
            @TestMetadata("kt2262.kt")
            public void testKt2262() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt2262.kt");
            }
            
            @TestMetadata("kt250.617.10.kt")
            public void testKt250_617_10() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt250.617.10.kt");
            }
            
            @TestMetadata("kt323.kt")
            public void testKt323() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt323.kt");
            }
            
            @TestMetadata("kt37.kt")
            public void testKt37() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt37.kt");
            }
            
            @TestMetadata("kt421Scopes.kt")
            public void testKt421Scopes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt421Scopes.kt");
            }
            
            @TestMetadata("kt587.kt")
            public void testKt587() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt587.kt");
            }
            
            @TestMetadata("kt900.kt")
            public void testKt900() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt900.kt");
            }
            
            @TestMetadata("kt900-1.kt")
            public void testKt900_1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt900-1.kt");
            }
            
            @TestMetadata("kt900-2.kt")
            public void testKt900_2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt900-2.kt");
            }
            
            @TestMetadata("kt939.kt")
            public void testKt939() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt939.kt");
            }
            
            @TestMetadata("kt955.kt")
            public void testKt955() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt955.kt");
            }
            
            @TestMetadata("stopResolutionOnAmbiguity.kt")
            public void testStopResolutionOnAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/stopResolutionOnAmbiguity.kt");
            }
            
            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/visibility.kt");
            }
            
            @TestMetadata("visibility2.kt")
            public void testVisibility2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/visibility2.kt");
            }
            
            @TestMetadata("VisibilityInheritModifier.kt")
            public void testVisibilityInheritModifier() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/VisibilityInheritModifier.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/shadowing")
        public static class Shadowing extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInShadowing() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/shadowing"), "kt", false);
            }
            
            @TestMetadata("ShadowParameterInFunctionBody.kt")
            public void testShadowParameterInFunctionBody() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInFunctionBody.kt");
            }
            
            @TestMetadata("ShadowParameterInNestedBlockInFor.kt")
            public void testShadowParameterInNestedBlockInFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInNestedBlockInFor.kt");
            }
            
            @TestMetadata("ShadowPropertyInClosure.kt")
            public void testShadowPropertyInClosure() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInClosure.kt");
            }
            
            @TestMetadata("ShadowPropertyInFor.kt")
            public void testShadowPropertyInFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFor.kt");
            }
            
            @TestMetadata("ShadowPropertyInFunction.kt")
            public void testShadowPropertyInFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFunction.kt");
            }
            
            @TestMetadata("ShadowVariableInFor.kt")
            public void testShadowVariableInFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInFor.kt");
            }
            
            @TestMetadata("ShadowVariableInNestedBlock.kt")
            public void testShadowVariableInNestedBlock() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedBlock.kt");
            }
            
            @TestMetadata("ShadowVariableInNestedClosure.kt")
            public void testShadowVariableInNestedClosure() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosure.kt");
            }
            
            @TestMetadata("ShadowVariableInNestedClosureParam.kt")
            public void testShadowVariableInNestedClosureParam() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosureParam.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/substitutions")
        public static class Substitutions extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInSubstitutions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/substitutions"), "kt", false);
            }
            
            @TestMetadata("kt1558-short.kt")
            public void testKt1558_short() throws Exception {
                doTest("compiler/testData/diagnostics/tests/substitutions/kt1558-short.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/subtyping")
        public static class Subtyping extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInSubtyping() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/subtyping"), "kt", false);
            }
            
            @TestMetadata("kt2069.kt")
            public void testKt2069() throws Exception {
                doTest("compiler/testData/diagnostics/tests/subtyping/kt2069.kt");
            }
            
            @TestMetadata("kt-1457.kt")
            public void testKt_1457() throws Exception {
                doTest("compiler/testData/diagnostics/tests/subtyping/kt-1457.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/tuples")
        public static class Tuples extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInTuples() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/tuples"), "kt", false);
            }
            
            @TestMetadata("BasicTuples.kt")
            public void testBasicTuples() throws Exception {
                doTest("compiler/testData/diagnostics/tests/tuples/BasicTuples.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/varargs")
        public static class Varargs extends AbstractDiagnosticsTestWithEagerResolve {
            public void testAllFilesPresentInVarargs() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/varargs"), "kt", false);
            }
            
            @TestMetadata("AmbiguousVararg.kt")
            public void testAmbiguousVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/AmbiguousVararg.kt");
            }
            
            @TestMetadata("kt1781.kt")
            public void testKt1781() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt1781.kt");
            }
            
            @TestMetadata("kt1835.kt")
            public void testKt1835() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt1835.kt");
            }
            
            @TestMetadata("kt1838-param.kt")
            public void testKt1838_param() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt1838-param.kt");
            }
            
            @TestMetadata("kt1838-val.kt")
            public void testKt1838_val() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt1838-val.kt");
            }
            
            @TestMetadata("MoreSpecificVarargsOfEqualLength.kt")
            public void testMoreSpecificVarargsOfEqualLength() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/MoreSpecificVarargsOfEqualLength.kt");
            }
            
            @TestMetadata("MostSepcificVarargsWithJava.kt")
            public void testMostSepcificVarargsWithJava() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/MostSepcificVarargsWithJava.kt");
            }
            
            @TestMetadata("NilaryVsVararg.kt")
            public void testNilaryVsVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/NilaryVsVararg.kt");
            }
            
            @TestMetadata("UnaryVsVararg.kt")
            public void testUnaryVsVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/UnaryVsVararg.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Tests");
            suite.addTestSuite(Tests.class);
            suite.addTestSuite(Annotations.class);
            suite.addTestSuite(BackingField.class);
            suite.addTestSuite(Cast.class);
            suite.addTestSuite(CheckArguments.class);
            suite.addTestSuite(ControlFlowAnalysis.class);
            suite.addTestSuite(ControlStructures.class);
            suite.addTestSuite(DataFlow.class);
            suite.addTestSuite(DataFlowInfoTraversal.class);
            suite.addTestSuite(DeclarationChecks.class);
            suite.addTestSuite(Extensions.class);
            suite.addTestSuite(Generics.class);
            suite.addTest(IncompleteCode.innerSuite());
            suite.addTest(Inference.innerSuite());
            suite.addTestSuite(Infos.class);
            suite.addTestSuite(J_k.class);
            suite.addTestSuite(Jdk_annotations.class);
            suite.addTestSuite(Library.class);
            suite.addTestSuite(NullabilityAndAutoCasts.class);
            suite.addTestSuite(Objects.class);
            suite.addTestSuite(OperatorsOverloading.class);
            suite.addTestSuite(Overload.class);
            suite.addTestSuite(Override.class);
            suite.addTestSuite(Redeclarations.class);
            suite.addTestSuite(Regressions.class);
            suite.addTestSuite(Scopes.class);
            suite.addTestSuite(Shadowing.class);
            suite.addTestSuite(Substitutions.class);
            suite.addTestSuite(Subtyping.class);
            suite.addTestSuite(Tuples.class);
            suite.addTestSuite(Varargs.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/diagnostics/tests/script")
    public static class Script extends AbstractDiagnosticsTestWithEagerResolve {
        @TestMetadata("AccessForwardDeclarationInScript.ktscript")
        public void testAccessForwardDeclarationInScript() throws Exception {
            doTest("compiler/testData/diagnostics/tests/script/AccessForwardDeclarationInScript.ktscript");
        }
        
        public void testAllFilesPresentInScript() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.checkers.AbstractDiagnosticsTestWithEagerResolve", new File("compiler/testData/diagnostics/tests/script"), "ktscript", false);
        }
        
        @TestMetadata("ComplexScript.ktscript")
        public void testComplexScript() throws Exception {
            doTest("compiler/testData/diagnostics/tests/script/ComplexScript.ktscript");
        }
        
        @TestMetadata("imports.ktscript")
        public void testImports() throws Exception {
            doTest("compiler/testData/diagnostics/tests/script/imports.ktscript");
        }
        
        @TestMetadata("SimpleScript.ktscript")
        public void testSimpleScript() throws Exception {
            doTest("compiler/testData/diagnostics/tests/script/SimpleScript.ktscript");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("JetDiagnosticsTestGenerated");
        suite.addTest(Tests.innerSuite());
        suite.addTestSuite(Script.class);
        return suite;
    }
}
