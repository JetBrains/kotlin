// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

public interface FileEntryOrBuilder extends
    // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
    org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

  /**
   * <code>optional string name_old = 1;</code>
   *
   * <pre>
   * Required: either `name` or `name_inline` must be present.
   * </pre>
   */
  boolean hasNameOld();
  /**
   * <code>optional string name_old = 1;</code>
   *
   * <pre>
   * Required: either `name` or `name_inline` must be present.
   * </pre>
   */
  java.lang.String getNameOld();
  /**
   * <code>optional string name_old = 1;</code>
   *
   * <pre>
   * Required: either `name` or `name_inline` must be present.
   * </pre>
   */
  org.jetbrains.kotlin.protobuf.ByteString
      getNameOldBytes();

  /**
   * <code>optional int32 name = 4;</code>
   *
   * <pre>
   * After 2.3.0 the string is stored in a string table with an index pointing to it,
   * </pre>
   */
  boolean hasName();
  /**
   * <code>optional int32 name = 4;</code>
   *
   * <pre>
   * After 2.3.0 the string is stored in a string table with an index pointing to it,
   * </pre>
   */
  int getName();

  /**
   * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
   *
   * <pre>
   * the same way as in all other messages.
   * </pre>
   */
  java.util.List<java.lang.Integer> getLineStartOffsetList();
  /**
   * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
   *
   * <pre>
   * the same way as in all other messages.
   * </pre>
   */
  int getLineStartOffsetCount();
  /**
   * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
   *
   * <pre>
   * the same way as in all other messages.
   * </pre>
   */
  int getLineStartOffset(int index);

  /**
   * <code>optional int32 first_relevant_line_index = 3 [default = 0];</code>
   */
  boolean hasFirstRelevantLineIndex();
  /**
   * <code>optional int32 first_relevant_line_index = 3 [default = 0];</code>
   */
  int getFirstRelevantLineIndex();
}