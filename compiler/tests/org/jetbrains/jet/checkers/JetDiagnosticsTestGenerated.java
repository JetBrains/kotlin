/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.checkers;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.checkers.AbstractJetDiagnosticsTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({JetDiagnosticsTestGenerated.Tests.class, JetDiagnosticsTestGenerated.Script.class, JetDiagnosticsTestGenerated.TailRecursion.class})
public class JetDiagnosticsTestGenerated extends AbstractJetDiagnosticsTest {
    @TestMetadata("compiler/testData/diagnostics/tests")
    @InnerTestClasses({Tests.Annotations.class, Tests.BackingField.class, Tests.CallableReference.class, Tests.Cast.class, Tests.CheckArguments.class, Tests.ClassObjects.class, Tests.ControlFlowAnalysis.class, Tests.ControlStructures.class, Tests.DataClasses.class, Tests.DataFlow.class, Tests.DataFlowInfoTraversal.class, Tests.DeclarationChecks.class, Tests.DelegatedProperty.class, Tests.Deparenthesize.class, Tests.Enum.class, Tests.Evaluate.class, Tests.Extensions.class, Tests.FunctionLiterals.class, Tests.Generics.class, Tests.IncompleteCode.class, Tests.Inference.class, Tests.Infos.class, Tests.Inline.class, Tests.Inner.class, Tests.J_k.class, Tests.Jdk_annotations.class, Tests.Library.class, Tests.NullabilityAndAutoCasts.class, Tests.NullableTypes.class, Tests.Numbers.class, Tests.Objects.class, Tests.OperatorsOverloading.class, Tests.Overload.class, Tests.Override.class, Tests.Recovery.class, Tests.Redeclarations.class, Tests.Regressions.class, Tests.Resolve.class, Tests.Scopes.class, Tests.SenselessComparison.class, Tests.Shadowing.class, Tests.SmartCasts.class, Tests.Substitutions.class, Tests.Subtyping.class, Tests.Suppress.class, Tests.ThisAndSuper.class, Tests.Unit.class, Tests.Varargs.class, Tests.When.class})
    public static class Tests extends AbstractJetDiagnosticsTest {
        @TestMetadata("Abstract.kt")
        public void testAbstract() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Abstract.kt");
        }
        
        @TestMetadata("AbstractInAbstractClass.kt")
        public void testAbstractInAbstractClass() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AbstractInAbstractClass.kt");
        }
        
        @TestMetadata("AbstractInClass.kt")
        public void testAbstractInClass() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AbstractInClass.kt");
        }
        
        @TestMetadata("AbstractInTrait.kt")
        public void testAbstractInTrait() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AbstractInTrait.kt");
        }
        
        public void testAllFilesPresentInTests() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("AnonymousInitializerVarAndConstructor.kt")
        public void testAnonymousInitializerVarAndConstructor() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AnonymousInitializerVarAndConstructor.kt");
        }
        
        @TestMetadata("AnonymousInitializers.kt")
        public void testAnonymousInitializers() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AnonymousInitializers.kt");
        }
        
        @TestMetadata("AutoCreatedIt.kt")
        public void testAutoCreatedIt() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AutoCreatedIt.kt");
        }
        
        @TestMetadata("AutocastAmbiguitites.kt")
        public void testAutocastAmbiguitites() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AutocastAmbiguitites.kt");
        }
        
        @TestMetadata("AutocastsForStableIdentifiers.kt")
        public void testAutocastsForStableIdentifiers() throws Exception {
            doTest("compiler/testData/diagnostics/tests/AutocastsForStableIdentifiers.kt");
        }
        
        @TestMetadata("Basic.kt")
        public void testBasic() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Basic.kt");
        }
        
        @TestMetadata("BinaryCallsOnNullableValues.kt")
        public void testBinaryCallsOnNullableValues() throws Exception {
            doTest("compiler/testData/diagnostics/tests/BinaryCallsOnNullableValues.kt");
        }
        
        @TestMetadata("Bounds.kt")
        public void testBounds() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Bounds.kt");
        }
        
        @TestMetadata("BreakContinue.kt")
        public void testBreakContinue() throws Exception {
            doTest("compiler/testData/diagnostics/tests/BreakContinue.kt");
        }
        
        @TestMetadata("Builders.kt")
        public void testBuilders() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Builders.kt");
        }
        
        @TestMetadata("Casts.kt")
        public void testCasts() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Casts.kt");
        }
        
        @TestMetadata("CharacterLiterals.kt")
        public void testCharacterLiterals() throws Exception {
            doTest("compiler/testData/diagnostics/tests/CharacterLiterals.kt");
        }
        
        @TestMetadata("checkType.kt")
        public void testCheckType() throws Exception {
            doTest("compiler/testData/diagnostics/tests/checkType.kt");
        }
        
        @TestMetadata("CompareToWithErrorType.kt")
        public void testCompareToWithErrorType() throws Exception {
            doTest("compiler/testData/diagnostics/tests/CompareToWithErrorType.kt");
        }
        
        @TestMetadata("Constants.kt")
        public void testConstants() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Constants.kt");
        }
        
        @TestMetadata("Constructors.kt")
        public void testConstructors() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Constructors.kt");
        }
        
        @TestMetadata("ConstructorsOfPrimitives.kt")
        public void testConstructorsOfPrimitives() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ConstructorsOfPrimitives.kt");
        }
        
        @TestMetadata("CovariantOverrideType.kt")
        public void testCovariantOverrideType() throws Exception {
            doTest("compiler/testData/diagnostics/tests/CovariantOverrideType.kt");
        }
        
        @TestMetadata("CyclicHierarchy.kt")
        public void testCyclicHierarchy() throws Exception {
            doTest("compiler/testData/diagnostics/tests/CyclicHierarchy.kt");
        }
        
        @TestMetadata("DefaultValuesTypechecking.kt")
        public void testDefaultValuesTypechecking() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DefaultValuesTypechecking.kt");
        }
        
        @TestMetadata("DeferredTypes.kt")
        public void testDeferredTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DeferredTypes.kt");
        }
        
        @TestMetadata("DelegationAndOverriding.kt")
        public void testDelegationAndOverriding() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DelegationAndOverriding.kt");
        }
        
        @TestMetadata("DelegationNotTotrait.kt")
        public void testDelegationNotTotrait() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DelegationNotTotrait.kt");
        }
        
        @TestMetadata("DelegationToJavaIface.kt")
        public void testDelegationToJavaIface() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DelegationToJavaIface.kt");
        }
        
        @TestMetadata("Delegation_ClashingFunctions.kt")
        public void testDelegation_ClashingFunctions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Delegation_ClashingFunctions.kt");
        }
        
        @TestMetadata("Delegation_Hierarchy.kt")
        public void testDelegation_Hierarchy() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Delegation_Hierarchy.kt");
        }
        
        @TestMetadata("Delegation_MultipleDelegates.kt")
        public void testDelegation_MultipleDelegates() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Delegation_MultipleDelegates.kt");
        }
        
        @TestMetadata("Delegation_ScopeInitializationOrder.kt")
        public void testDelegation_ScopeInitializationOrder() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Delegation_ScopeInitializationOrder.kt");
        }
        
        @TestMetadata("DiamondFunction.kt")
        public void testDiamondFunction() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DiamondFunction.kt");
        }
        
        @TestMetadata("DiamondFunctionGeneric.kt")
        public void testDiamondFunctionGeneric() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DiamondFunctionGeneric.kt");
        }
        
        @TestMetadata("DiamondProperty.kt")
        public void testDiamondProperty() throws Exception {
            doTest("compiler/testData/diagnostics/tests/DiamondProperty.kt");
        }
        
        @TestMetadata("Dollar.kt")
        public void testDollar() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Dollar.kt");
        }
        
        @TestMetadata("ForRangeConventions.kt")
        public void testForRangeConventions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ForRangeConventions.kt");
        }
        
        @TestMetadata("FunctionCalleeExpressions.kt")
        public void testFunctionCalleeExpressions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/FunctionCalleeExpressions.kt");
        }
        
        @TestMetadata("FunctionReturnTypes.kt")
        public void testFunctionReturnTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/FunctionReturnTypes.kt");
        }
        
        @TestMetadata("GenericArgumentConsistency.kt")
        public void testGenericArgumentConsistency() throws Exception {
            doTest("compiler/testData/diagnostics/tests/GenericArgumentConsistency.kt");
        }
        
        @TestMetadata("GenericFunctionIsLessSpecific.kt")
        public void testGenericFunctionIsLessSpecific() throws Exception {
            doTest("compiler/testData/diagnostics/tests/GenericFunctionIsLessSpecific.kt");
        }
        
        @TestMetadata("IllegalModifiers.kt")
        public void testIllegalModifiers() throws Exception {
            doTest("compiler/testData/diagnostics/tests/IllegalModifiers.kt");
        }
        
        @TestMetadata("ImportResolutionOrder.kt")
        public void testImportResolutionOrder() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ImportResolutionOrder.kt");
        }
        
        @TestMetadata("IncDec.kt")
        public void testIncDec() throws Exception {
            doTest("compiler/testData/diagnostics/tests/IncDec.kt");
        }
        
        @TestMetadata("IncorrectCharacterLiterals.kt")
        public void testIncorrectCharacterLiterals() throws Exception {
            doTest("compiler/testData/diagnostics/tests/IncorrectCharacterLiterals.kt");
        }
        
        @TestMetadata("InferNullabilityInThenBlock.kt")
        public void testInferNullabilityInThenBlock() throws Exception {
            doTest("compiler/testData/diagnostics/tests/InferNullabilityInThenBlock.kt");
        }
        
        @TestMetadata("IsExpressions.kt")
        public void testIsExpressions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/IsExpressions.kt");
        }
        
        @TestMetadata("kt310.kt")
        public void testKt310() throws Exception {
            doTest("compiler/testData/diagnostics/tests/kt310.kt");
        }
        
        @TestMetadata("kt53.kt")
        public void testKt53() throws Exception {
            doTest("compiler/testData/diagnostics/tests/kt53.kt");
        }
        
        @TestMetadata("LValueAssignment.kt")
        public void testLValueAssignment() throws Exception {
            doTest("compiler/testData/diagnostics/tests/LValueAssignment.kt");
        }
        
        @TestMetadata("MergePackagesWithJava.kt")
        public void testMergePackagesWithJava() throws Exception {
            doTest("compiler/testData/diagnostics/tests/MergePackagesWithJava.kt");
        }
        
        @TestMetadata("MultilineStringTemplates.kt")
        public void testMultilineStringTemplates() throws Exception {
            doTest("compiler/testData/diagnostics/tests/MultilineStringTemplates.kt");
        }
        
        @TestMetadata("MultipleBounds.kt")
        public void testMultipleBounds() throws Exception {
            doTest("compiler/testData/diagnostics/tests/MultipleBounds.kt");
        }
        
        @TestMetadata("NamedArgumentsAndDefaultValues.kt")
        public void testNamedArgumentsAndDefaultValues() throws Exception {
            doTest("compiler/testData/diagnostics/tests/NamedArgumentsAndDefaultValues.kt");
        }
        
        @TestMetadata("Nullability.kt")
        public void testNullability() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Nullability.kt");
        }
        
        @TestMetadata("OverrideFunctionWithParamDefaultValue.kt")
        public void testOverrideFunctionWithParamDefaultValue() throws Exception {
            doTest("compiler/testData/diagnostics/tests/OverrideFunctionWithParamDefaultValue.kt");
        }
        
        @TestMetadata("OverridenFunctionAndSpecifiedTypeParameter.kt")
        public void testOverridenFunctionAndSpecifiedTypeParameter() throws Exception {
            doTest("compiler/testData/diagnostics/tests/OverridenFunctionAndSpecifiedTypeParameter.kt");
        }
        
        @TestMetadata("OverridingVarByVal.kt")
        public void testOverridingVarByVal() throws Exception {
            doTest("compiler/testData/diagnostics/tests/OverridingVarByVal.kt");
        }
        
        @TestMetadata("PackageAsExpression.kt")
        public void testPackageAsExpression() throws Exception {
            doTest("compiler/testData/diagnostics/tests/PackageAsExpression.kt");
        }
        
        @TestMetadata("PackageInExpressionPosition.kt")
        public void testPackageInExpressionPosition() throws Exception {
            doTest("compiler/testData/diagnostics/tests/PackageInExpressionPosition.kt");
        }
        
        @TestMetadata("PackageQualified.kt")
        public void testPackageQualified() throws Exception {
            doTest("compiler/testData/diagnostics/tests/PackageQualified.kt");
        }
        
        @TestMetadata("PrimaryConstructors.kt")
        public void testPrimaryConstructors() throws Exception {
            doTest("compiler/testData/diagnostics/tests/PrimaryConstructors.kt");
        }
        
        @TestMetadata("ProcessingEmptyImport.kt")
        public void testProcessingEmptyImport() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ProcessingEmptyImport.kt");
        }
        
        @TestMetadata("ProjectionOnFunctionArgumentErrror.kt")
        public void testProjectionOnFunctionArgumentErrror() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ProjectionOnFunctionArgumentErrror.kt");
        }
        
        @TestMetadata("ProjectionsInSupertypes.kt")
        public void testProjectionsInSupertypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ProjectionsInSupertypes.kt");
        }
        
        @TestMetadata("Properties.kt")
        public void testProperties() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Properties.kt");
        }
        
        @TestMetadata("QualifiedExpressions.kt")
        public void testQualifiedExpressions() throws Exception {
            doTest("compiler/testData/diagnostics/tests/QualifiedExpressions.kt");
        }
        
        @TestMetadata("RecursiveTypeInference.kt")
        public void testRecursiveTypeInference() throws Exception {
            doTest("compiler/testData/diagnostics/tests/RecursiveTypeInference.kt");
        }
        
        @TestMetadata("ResolveOfJavaGenerics.kt")
        public void testResolveOfJavaGenerics() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ResolveOfJavaGenerics.kt");
        }
        
        @TestMetadata("ResolveToJava.kt")
        public void testResolveToJava() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ResolveToJava.kt");
        }
        
        @TestMetadata("Return.kt")
        public void testReturn() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Return.kt");
        }
        
        @TestMetadata("SafeCallNonNullReceiver.kt")
        public void testSafeCallNonNullReceiver() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiver.kt");
        }
        
        @TestMetadata("SafeCallNonNullReceiverReturnNull.kt")
        public void testSafeCallNonNullReceiverReturnNull() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiverReturnNull.kt");
        }
        
        @TestMetadata("SafeCallOnFakePackage.kt")
        public void testSafeCallOnFakePackage() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SafeCallOnFakePackage.kt");
        }
        
        @TestMetadata("ShiftFunctionTypes.kt")
        public void testShiftFunctionTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ShiftFunctionTypes.kt");
        }
        
        @TestMetadata("StarsInFunctionCalls.kt")
        public void testStarsInFunctionCalls() throws Exception {
            doTest("compiler/testData/diagnostics/tests/StarsInFunctionCalls.kt");
        }
        
        @TestMetadata("StringTemplates.kt")
        public void testStringTemplates() throws Exception {
            doTest("compiler/testData/diagnostics/tests/StringTemplates.kt");
        }
        
        @TestMetadata("SupertypeListChecks.kt")
        public void testSupertypeListChecks() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SupertypeListChecks.kt");
        }
        
        @TestMetadata("SyntaxErrorInTestHighlighting.kt")
        public void testSyntaxErrorInTestHighlighting() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlighting.kt");
        }
        
        @TestMetadata("SyntaxErrorInTestHighlightingEof.kt")
        public void testSyntaxErrorInTestHighlightingEof() throws Exception {
            doTest("compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlightingEof.kt");
        }
        
        @TestMetadata("TraitOverrideObjectMethods.kt")
        public void testTraitOverrideObjectMethods() throws Exception {
            doTest("compiler/testData/diagnostics/tests/TraitOverrideObjectMethods.kt");
        }
        
        @TestMetadata("TraitSupertypeList.kt")
        public void testTraitSupertypeList() throws Exception {
            doTest("compiler/testData/diagnostics/tests/TraitSupertypeList.kt");
        }
        
        @TestMetadata("TypeInference.kt")
        public void testTypeInference() throws Exception {
            doTest("compiler/testData/diagnostics/tests/TypeInference.kt");
        }
        
        @TestMetadata("TypeMismatchOnOverrideWithSyntaxErrors.kt")
        public void testTypeMismatchOnOverrideWithSyntaxErrors() throws Exception {
            doTest("compiler/testData/diagnostics/tests/TypeMismatchOnOverrideWithSyntaxErrors.kt");
        }
        
        @TestMetadata("UninitializedOrReassignedVariables.kt")
        public void testUninitializedOrReassignedVariables() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UninitializedOrReassignedVariables.kt");
        }
        
        @TestMetadata("UnitByDefaultForFunctionTypes.kt")
        public void testUnitByDefaultForFunctionTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UnitByDefaultForFunctionTypes.kt");
        }
        
        @TestMetadata("UnitValue.kt")
        public void testUnitValue() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UnitValue.kt");
        }
        
        @TestMetadata("UnreachableCode.kt")
        public void testUnreachableCode() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UnreachableCode.kt");
        }
        
        @TestMetadata("Unresolved.kt")
        public void testUnresolved() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Unresolved.kt");
        }
        
        @TestMetadata("UnusedVariables.kt")
        public void testUnusedVariables() throws Exception {
            doTest("compiler/testData/diagnostics/tests/UnusedVariables.kt");
        }
        
        @TestMetadata("ValAndFunOverrideCompatibilityClash.kt")
        public void testValAndFunOverrideCompatibilityClash() throws Exception {
            doTest("compiler/testData/diagnostics/tests/ValAndFunOverrideCompatibilityClash.kt");
        }
        
        @TestMetadata("VarargTypes.kt")
        public void testVarargTypes() throws Exception {
            doTest("compiler/testData/diagnostics/tests/VarargTypes.kt");
        }
        
        @TestMetadata("Varargs.kt")
        public void testVarargs() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Varargs.kt");
        }
        
        @TestMetadata("Variance.kt")
        public void testVariance() throws Exception {
            doTest("compiler/testData/diagnostics/tests/Variance.kt");
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/annotations")
        @InnerTestClasses({Annotations.AnnotationParameterMustBeConstant.class})
        public static class Annotations extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInAnnotations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/annotations"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AmbigiousAnnotationConstructor.kt")
            public void testAmbigiousAnnotationConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AmbigiousAnnotationConstructor.kt");
            }
            
            @TestMetadata("AnnotatedConstructorParams.kt")
            public void testAnnotatedConstructorParams() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructorParams.kt");
            }
            
            @TestMetadata("AnnotationForClassTypeParameter.kt")
            public void testAnnotationForClassTypeParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter.kt");
            }
            
            @TestMetadata("AnnotationForFunctionTypeParameter.kt")
            public void testAnnotationForFunctionTypeParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AnnotationForFunctionTypeParameter.kt");
            }
            
            @TestMetadata("AnnotationForObject.kt")
            public void testAnnotationForObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AnnotationForObject.kt");
            }
            
            @TestMetadata("annotationInheritance.kt")
            public void testAnnotationInheritance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/annotationInheritance.kt");
            }
            
            @TestMetadata("annotationModifier.kt")
            public void testAnnotationModifier() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/annotationModifier.kt");
            }
            
            @TestMetadata("AnnotationsForClasses.kt")
            public void testAnnotationsForClasses() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AnnotationsForClasses.kt");
            }
            
            @TestMetadata("AnnotationsForPropertyTypeParameter.kt")
            public void testAnnotationsForPropertyTypeParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/AnnotationsForPropertyTypeParameter.kt");
            }
            
            @TestMetadata("BasicAnnotations.kt")
            public void testBasicAnnotations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/BasicAnnotations.kt");
            }
            
            @TestMetadata("ConstructorCall.kt")
            public void testConstructorCall() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/ConstructorCall.kt");
            }
            
            @TestMetadata("Deprecated.kt")
            public void testDeprecated() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/Deprecated.kt");
            }
            
            @TestMetadata("invalidTypesInAnnotationConstructor.kt")
            public void testInvalidTypesInAnnotationConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/invalidTypesInAnnotationConstructor.kt");
            }
            
            @TestMetadata("JavaAnnotationConstructors.kt")
            public void testJavaAnnotationConstructors() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/JavaAnnotationConstructors.kt");
            }
            
            @TestMetadata("kt1860-negative.kt")
            public void testKt1860_negative() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/kt1860-negative.kt");
            }
            
            @TestMetadata("kt1860-positive.kt")
            public void testKt1860_positive() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/kt1860-positive.kt");
            }
            
            @TestMetadata("kt1886annotationBody.kt")
            public void testKt1886annotationBody() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/kt1886annotationBody.kt");
            }
            
            @TestMetadata("missingValOnParameter.kt")
            public void testMissingValOnParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/missingValOnParameter.kt");
            }
            
            @TestMetadata("NonAnnotationClass.kt")
            public void testNonAnnotationClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/NonAnnotationClass.kt");
            }
            
            @TestMetadata("onExpression.kt")
            public void testOnExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/onExpression.kt");
            }
            
            @TestMetadata("onInitializer.kt")
            public void testOnInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/onInitializer.kt");
            }
            
            @TestMetadata("onLoops.kt")
            public void testOnLoops() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/onLoops.kt");
            }
            
            @TestMetadata("onMultiDeclaration.kt")
            public void testOnMultiDeclaration() throws Exception {
                doTest("compiler/testData/diagnostics/tests/annotations/onMultiDeclaration.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant")
            public static class AnnotationParameterMustBeConstant extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInAnnotationParameterMustBeConstant() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("booleanLocalVal.kt")
                public void testBooleanLocalVal() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/booleanLocalVal.kt");
                }
                
                @TestMetadata("compareAndEquals.kt")
                public void testCompareAndEquals() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/compareAndEquals.kt");
                }
                
                @TestMetadata("enumConst.kt")
                public void testEnumConst() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/enumConst.kt");
                }
                
                @TestMetadata("javaProperties.kt")
                public void testJavaProperties() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/javaProperties.kt");
                }
                
                @TestMetadata("kotlinProperties.kt")
                public void testKotlinProperties() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/kotlinProperties.kt");
                }
                
                @TestMetadata("strings.kt")
                public void testStrings() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/strings.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Annotations");
                suite.addTestSuite(Annotations.class);
                suite.addTestSuite(AnnotationParameterMustBeConstant.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/backingField")
        public static class BackingField extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInBackingField() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/backingField"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("CustomGetSet.kt")
            public void testCustomGetSet() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomGetSet.kt");
            }
            
            @TestMetadata("CustomGetVal.kt")
            public void testCustomGetVal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomGetVal.kt");
            }
            
            @TestMetadata("CustomGetValGlobal.kt")
            public void testCustomGetValGlobal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomGetValGlobal.kt");
            }
            
            @TestMetadata("CustomGetVar.kt")
            public void testCustomGetVar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomGetVar.kt");
            }
            
            @TestMetadata("CustomSet.kt")
            public void testCustomSet() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CustomSet.kt");
            }
            
            @TestMetadata("CyclicReferenceInitializer.kt")
            public void testCyclicReferenceInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/CyclicReferenceInitializer.kt");
            }
            
            @TestMetadata("kt462BackingFieldsResolve.kt")
            public void testKt462BackingFieldsResolve() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/kt462BackingFieldsResolve.kt");
            }
            
            @TestMetadata("kt782packageLevel.kt")
            public void testKt782packageLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/kt782packageLevel.kt");
            }
            
            @TestMetadata("qualifiedWithThis.kt")
            public void testQualifiedWithThis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/qualifiedWithThis.kt");
            }
            
            @TestMetadata("ReadForwardInAnonymous.kt")
            public void testReadForwardInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadForwardInAnonymous.kt");
            }
            
            @TestMetadata("ReadForwardInPropertyInitializer.kt")
            public void testReadForwardInPropertyInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadForwardInPropertyInitializer.kt");
            }
            
            @TestMetadata("ReadInAnonymous.kt")
            public void testReadInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadInAnonymous.kt");
            }
            
            @TestMetadata("ReadInAnotherPropertyIntializer.kt")
            public void testReadInAnotherPropertyIntializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadInAnotherPropertyIntializer.kt");
            }
            
            @TestMetadata("ReadInFunction.kt")
            public void testReadInFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadInFunction.kt");
            }
            
            @TestMetadata("ReadNonexistentAbstractPropertyInAnonymous.kt")
            public void testReadNonexistentAbstractPropertyInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentAbstractPropertyInAnonymous.kt");
            }
            
            @TestMetadata("ReadNonexistentAbstractPropertyInFunction.kt")
            public void testReadNonexistentAbstractPropertyInFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentAbstractPropertyInFunction.kt");
            }
            
            @TestMetadata("ReadNonexistentCustomGetInAnonymous.kt")
            public void testReadNonexistentCustomGetInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentCustomGetInAnonymous.kt");
            }
            
            @TestMetadata("ReadNonexistentCustomGetInAnotherInitializer.kt")
            public void testReadNonexistentCustomGetInAnotherInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentCustomGetInAnotherInitializer.kt");
            }
            
            @TestMetadata("ReadNonexistentDeclaredInHigher.kt")
            public void testReadNonexistentDeclaredInHigher() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentDeclaredInHigher.kt");
            }
            
            @TestMetadata("ReadNonexistentPropertyInAnonymous.kt")
            public void testReadNonexistentPropertyInAnonymous() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/ReadNonexistentPropertyInAnonymous.kt");
            }
            
            @TestMetadata("WriteNonexistentDeclaredInHigher.kt")
            public void testWriteNonexistentDeclaredInHigher() throws Exception {
                doTest("compiler/testData/diagnostics/tests/backingField/WriteNonexistentDeclaredInHigher.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/callableReference")
        public static class CallableReference extends AbstractJetDiagnosticsTest {
            @TestMetadata("abstractClassConstructors.kt")
            public void testAbstractClassConstructors() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/abstractClassConstructors.kt");
            }
            
            public void testAllFilesPresentInCallableReference() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/callableReference"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ambiguityTopLevelVsTopLevel.kt")
            public void testAmbiguityTopLevelVsTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/ambiguityTopLevelVsTopLevel.kt");
            }
            
            @TestMetadata("constructorFromClass.kt")
            public void testConstructorFromClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/constructorFromClass.kt");
            }
            
            @TestMetadata("constructorFromExtension.kt")
            public void testConstructorFromExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/constructorFromExtension.kt");
            }
            
            @TestMetadata("constructorFromExtensionInClass.kt")
            public void testConstructorFromExtensionInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/constructorFromExtensionInClass.kt");
            }
            
            @TestMetadata("constructorFromTopLevel.kt")
            public void testConstructorFromTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/constructorFromTopLevel.kt");
            }
            
            @TestMetadata("differentPackageClass.kt")
            public void testDifferentPackageClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/differentPackageClass.kt");
            }
            
            @TestMetadata("differentPackageExtension.kt")
            public void testDifferentPackageExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/differentPackageExtension.kt");
            }
            
            @TestMetadata("differentPackageTopLevel.kt")
            public void testDifferentPackageTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/differentPackageTopLevel.kt");
            }
            
            @TestMetadata("empty.kt")
            public void testEmpty() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/empty.kt");
            }
            
            @TestMetadata("extensionFromClass.kt")
            public void testExtensionFromClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/extensionFromClass.kt");
            }
            
            @TestMetadata("extensionFromExtension.kt")
            public void testExtensionFromExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/extensionFromExtension.kt");
            }
            
            @TestMetadata("extensionFromExtensionInClass.kt")
            public void testExtensionFromExtensionInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/extensionFromExtensionInClass.kt");
            }
            
            @TestMetadata("extensionFromTopLevel.kt")
            public void testExtensionFromTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/extensionFromTopLevel.kt");
            }
            
            @TestMetadata("extensionInClassDisallowed.kt")
            public void testExtensionInClassDisallowed() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/extensionInClassDisallowed.kt");
            }
            
            @TestMetadata("genericClassFromTopLevel.kt")
            public void testGenericClassFromTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/genericClassFromTopLevel.kt");
            }
            
            @TestMetadata("importedInnerConstructor.kt")
            public void testImportedInnerConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/importedInnerConstructor.kt");
            }
            
            @TestMetadata("innerConstructorFromClass.kt")
            public void testInnerConstructorFromClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/innerConstructorFromClass.kt");
            }
            
            @TestMetadata("innerConstructorFromExtension.kt")
            public void testInnerConstructorFromExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/innerConstructorFromExtension.kt");
            }
            
            @TestMetadata("innerConstructorFromTopLevel.kt")
            public void testInnerConstructorFromTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/innerConstructorFromTopLevel.kt");
            }
            
            @TestMetadata("lhsNotAClass.kt")
            public void testLhsNotAClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/lhsNotAClass.kt");
            }
            
            @TestMetadata("localConstructor.kt")
            public void testLocalConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/localConstructor.kt");
            }
            
            @TestMetadata("localConstructorFromExtensionInLocalClass.kt")
            public void testLocalConstructorFromExtensionInLocalClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/localConstructorFromExtensionInLocalClass.kt");
            }
            
            @TestMetadata("localConstructorFromLocalClass.kt")
            public void testLocalConstructorFromLocalClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/localConstructorFromLocalClass.kt");
            }
            
            @TestMetadata("localConstructorFromLocalExtension.kt")
            public void testLocalConstructorFromLocalExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/localConstructorFromLocalExtension.kt");
            }
            
            @TestMetadata("localNamedFun.kt")
            public void testLocalNamedFun() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/localNamedFun.kt");
            }
            
            @TestMetadata("localNamedFunFromExtensionInLocalClass.kt")
            public void testLocalNamedFunFromExtensionInLocalClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/localNamedFunFromExtensionInLocalClass.kt");
            }
            
            @TestMetadata("localNamedFunFromLocalClass.kt")
            public void testLocalNamedFunFromLocalClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/localNamedFunFromLocalClass.kt");
            }
            
            @TestMetadata("localNamedFunFromLocalExtension.kt")
            public void testLocalNamedFunFromLocalExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/localNamedFunFromLocalExtension.kt");
            }
            
            @TestMetadata("longQualifiedName.kt")
            public void testLongQualifiedName() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/longQualifiedName.kt");
            }
            
            @TestMetadata("longQualifiedNameGeneric.kt")
            public void testLongQualifiedNameGeneric() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/longQualifiedNameGeneric.kt");
            }
            
            @TestMetadata("memberFromClass.kt")
            public void testMemberFromClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/memberFromClass.kt");
            }
            
            @TestMetadata("memberFromExtension.kt")
            public void testMemberFromExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/memberFromExtension.kt");
            }
            
            @TestMetadata("memberFromExtensionInClass.kt")
            public void testMemberFromExtensionInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/memberFromExtensionInClass.kt");
            }
            
            @TestMetadata("memberFromTopLevel.kt")
            public void testMemberFromTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/memberFromTopLevel.kt");
            }
            
            @TestMetadata("nestedConstructorFromClass.kt")
            public void testNestedConstructorFromClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/nestedConstructorFromClass.kt");
            }
            
            @TestMetadata("nestedConstructorFromExtension.kt")
            public void testNestedConstructorFromExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/nestedConstructorFromExtension.kt");
            }
            
            @TestMetadata("nestedConstructorFromTopLevel.kt")
            public void testNestedConstructorFromTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/nestedConstructorFromTopLevel.kt");
            }
            
            @TestMetadata("noAmbiguityLocalVsTopLevel.kt")
            public void testNoAmbiguityLocalVsTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/noAmbiguityLocalVsTopLevel.kt");
            }
            
            @TestMetadata("noAmbiguityMemberVsExtension.kt")
            public void testNoAmbiguityMemberVsExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/noAmbiguityMemberVsExtension.kt");
            }
            
            @TestMetadata("noAmbiguityMemberVsTopLevel.kt")
            public void testNoAmbiguityMemberVsTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/noAmbiguityMemberVsTopLevel.kt");
            }
            
            @TestMetadata("renameOnImport.kt")
            public void testRenameOnImport() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/renameOnImport.kt");
            }
            
            @TestMetadata("topLevelFromClass.kt")
            public void testTopLevelFromClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/topLevelFromClass.kt");
            }
            
            @TestMetadata("topLevelFromExtension.kt")
            public void testTopLevelFromExtension() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/topLevelFromExtension.kt");
            }
            
            @TestMetadata("topLevelFromExtensionInClass.kt")
            public void testTopLevelFromExtensionInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/topLevelFromExtensionInClass.kt");
            }
            
            @TestMetadata("topLevelFromTopLevel.kt")
            public void testTopLevelFromTopLevel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/topLevelFromTopLevel.kt");
            }
            
            @TestMetadata("unresolved.kt")
            public void testUnresolved() throws Exception {
                doTest("compiler/testData/diagnostics/tests/callableReference/unresolved.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/cast")
        @InnerTestClasses({Cast.Bare.class, Cast.NeverSucceeds.class})
        public static class Cast extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInCast() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/cast"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AsErasedError.kt")
            public void testAsErasedError() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/AsErasedError.kt");
            }
            
            @TestMetadata("AsErasedFine.kt")
            public void testAsErasedFine() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/AsErasedFine.kt");
            }
            
            @TestMetadata("AsErasedStar.kt")
            public void testAsErasedStar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/AsErasedStar.kt");
            }
            
            @TestMetadata("AsErasedWarning.kt")
            public void testAsErasedWarning() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/AsErasedWarning.kt");
            }
            
            @TestMetadata("constants.kt")
            public void testConstants() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/constants.kt");
            }
            
            @TestMetadata("DowncastMap.kt")
            public void testDowncastMap() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/DowncastMap.kt");
            }
            
            @TestMetadata("IsArray.kt")
            public void testIsArray() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsArray.kt");
            }
            
            @TestMetadata("IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt")
            public void testIsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt");
            }
            
            @TestMetadata("IsErasedAllowForExactSupertypeCheck.kt")
            public void testIsErasedAllowForExactSupertypeCheck() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForExactSupertypeCheck.kt");
            }
            
            @TestMetadata("IsErasedAllowForOverridenVarianceWithProjection.kt")
            public void testIsErasedAllowForOverridenVarianceWithProjection() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForOverridenVarianceWithProjection.kt");
            }
            
            @TestMetadata("IsErasedAllowForSupertypeCheckWithContrvariance.kt")
            public void testIsErasedAllowForSupertypeCheckWithContrvariance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithContrvariance.kt");
            }
            
            @TestMetadata("IsErasedAllowForSupertypeCheckWithCovariance.kt")
            public void testIsErasedAllowForSupertypeCheckWithCovariance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithCovariance.kt");
            }
            
            @TestMetadata("IsErasedAllowForTypeWithIrrelevantMixin.kt")
            public void testIsErasedAllowForTypeWithIrrelevantMixin() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithIrrelevantMixin.kt");
            }
            
            @TestMetadata("IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt")
            public void testIsErasedAllowForTypeWithTwoSameTypeSubstitutions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt");
            }
            
            @TestMetadata("IsErasedAllowForTypeWithoutTypeArguments.kt")
            public void testIsErasedAllowForTypeWithoutTypeArguments() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithoutTypeArguments.kt");
            }
            
            @TestMetadata("IsErasedAllowFromOut.kt")
            public void testIsErasedAllowFromOut() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut.kt");
            }
            
            @TestMetadata("IsErasedAllowFromOut2.kt")
            public void testIsErasedAllowFromOut2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut2.kt");
            }
            
            @TestMetadata("IsErasedAllowFromOutAtClass.kt")
            public void testIsErasedAllowFromOutAtClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOutAtClass.kt");
            }
            
            @TestMetadata("IsErasedAllowParameterSubtype.kt")
            public void testIsErasedAllowParameterSubtype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowParameterSubtype.kt");
            }
            
            @TestMetadata("IsErasedAllowSameClassParameter.kt")
            public void testIsErasedAllowSameClassParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameClassParameter.kt");
            }
            
            @TestMetadata("IsErasedAllowSameParameterParameter.kt")
            public void testIsErasedAllowSameParameterParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameParameterParameter.kt");
            }
            
            @TestMetadata("isErasedAnyAndStarred.kt")
            public void testIsErasedAnyAndStarred() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/isErasedAnyAndStarred.kt");
            }
            
            @TestMetadata("IsErasedDisallowDifferentArgInvariantPosition.kt")
            public void testIsErasedDisallowDifferentArgInvariantPosition() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowDifferentArgInvariantPosition.kt");
            }
            
            @TestMetadata("IsErasedDisallowForOverridenVariance.kt")
            public void testIsErasedDisallowForOverridenVariance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowForOverridenVariance.kt");
            }
            
            @TestMetadata("IsErasedDisallowForTypeWithConstraints.kt")
            public void testIsErasedDisallowForTypeWithConstraints() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowForTypeWithConstraints.kt");
            }
            
            @TestMetadata("IsErasedDisallowFromAny.kt")
            public void testIsErasedDisallowFromAny() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromAny.kt");
            }
            
            @TestMetadata("IsErasedDisallowFromIn.kt")
            public void testIsErasedDisallowFromIn() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromIn.kt");
            }
            
            @TestMetadata("IsErasedDisallowFromOut.kt")
            public void testIsErasedDisallowFromOut() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOut.kt");
            }
            
            @TestMetadata("IsErasedDisallowFromOutAtClass.kt")
            public void testIsErasedDisallowFromOutAtClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOutAtClass.kt");
            }
            
            @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt")
            public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt");
            }
            
            @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt")
            public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt");
            }
            
            @TestMetadata("IsErasedNonGeneric.kt")
            public void testIsErasedNonGeneric() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedNonGeneric.kt");
            }
            
            @TestMetadata("IsErasedNullableTasT.kt")
            public void testIsErasedNullableTasT() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedNullableTasT.kt");
            }
            
            @TestMetadata("IsErasedStar.kt")
            public void testIsErasedStar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedStar.kt");
            }
            
            @TestMetadata("isErasedTAndStarred.kt")
            public void testIsErasedTAndStarred() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/isErasedTAndStarred.kt");
            }
            
            @TestMetadata("IsErasedTasT.kt")
            public void testIsErasedTasT() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedTasT.kt");
            }
            
            @TestMetadata("IsErasedToErrorType.kt")
            public void testIsErasedToErrorType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsErasedToErrorType.kt");
            }
            
            @TestMetadata("isErasedUnrelatedAndStarred.kt")
            public void testIsErasedUnrelatedAndStarred() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/isErasedUnrelatedAndStarred.kt");
            }
            
            @TestMetadata("IsRecursionSustainable.kt")
            public void testIsRecursionSustainable() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsRecursionSustainable.kt");
            }
            
            @TestMetadata("IsReified.kt")
            public void testIsReified() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsReified.kt");
            }
            
            @TestMetadata("IsTraits.kt")
            public void testIsTraits() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/IsTraits.kt");
            }
            
            @TestMetadata("kt614.kt")
            public void testKt614() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/kt614.kt");
            }
            
            @TestMetadata("WhenErasedDisallowFromAny.kt")
            public void testWhenErasedDisallowFromAny() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/WhenErasedDisallowFromAny.kt");
            }
            
            @TestMetadata("WhenWithExpression.kt")
            public void testWhenWithExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/cast/WhenWithExpression.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/cast/bare")
            public static class Bare extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInBare() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/cast/bare"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("AsNestedBare.kt")
                public void testAsNestedBare() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/AsNestedBare.kt");
                }
                
                @TestMetadata("AsNullable.kt")
                public void testAsNullable() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/AsNullable.kt");
                }
                
                @TestMetadata("AsNullableNotEnough.kt")
                public void testAsNullableNotEnough() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/AsNullableNotEnough.kt");
                }
                
                @TestMetadata("EitherAs.kt")
                public void testEitherAs() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/EitherAs.kt");
                }
                
                @TestMetadata("EitherIs.kt")
                public void testEitherIs() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/EitherIs.kt");
                }
                
                @TestMetadata("EitherNotIs.kt")
                public void testEitherNotIs() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/EitherNotIs.kt");
                }
                
                @TestMetadata("EitherSafeAs.kt")
                public void testEitherSafeAs() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/EitherSafeAs.kt");
                }
                
                @TestMetadata("EitherWhen.kt")
                public void testEitherWhen() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/EitherWhen.kt");
                }
                
                @TestMetadata("ErrorsInSubstitution.kt")
                public void testErrorsInSubstitution() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/ErrorsInSubstitution.kt");
                }
                
                @TestMetadata("FromErrorType.kt")
                public void testFromErrorType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/FromErrorType.kt");
                }
                
                @TestMetadata("NullableAs.kt")
                public void testNullableAs() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/NullableAs.kt");
                }
                
                @TestMetadata("NullableAsNotEnough.kt")
                public void testNullableAsNotEnough() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNotEnough.kt");
                }
                
                @TestMetadata("NullableAsNullable.kt")
                public void testNullableAsNullable() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNullable.kt");
                }
                
                @TestMetadata("NullableAsNullableNotEnough.kt")
                public void testNullableAsNullableNotEnough() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/NullableAsNullableNotEnough.kt");
                }
                
                @TestMetadata("RedundantNullable.kt")
                public void testRedundantNullable() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/RedundantNullable.kt");
                }
                
                @TestMetadata("ToErrorType.kt")
                public void testToErrorType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/ToErrorType.kt");
                }
                
                @TestMetadata("UnrelatedAs.kt")
                public void testUnrelatedAs() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedAs.kt");
                }
                
                @TestMetadata("UnrelatedColon.kt")
                public void testUnrelatedColon() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedColon.kt");
                }
                
                @TestMetadata("UnrelatedIs.kt")
                public void testUnrelatedIs() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/bare/UnrelatedIs.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds")
            public static class NeverSucceeds extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNeverSucceeds() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/cast/neverSucceeds"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("MappedDirect.kt")
                public void testMappedDirect() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedDirect.kt");
                }
                
                @TestMetadata("MappedSubtypes.kt")
                public void testMappedSubtypes() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedSubtypes.kt");
                }
                
                @TestMetadata("NoGenericsRelated.kt")
                public void testNoGenericsRelated() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsRelated.kt");
                }
                
                @TestMetadata("NoGenericsUnrelated.kt")
                public void testNoGenericsUnrelated() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsUnrelated.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Cast");
                suite.addTestSuite(Cast.class);
                suite.addTestSuite(Bare.class);
                suite.addTestSuite(NeverSucceeds.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/checkArguments")
        public static class CheckArguments extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInCheckArguments() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/checkArguments"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("booleanExpressions.kt")
            public void testBooleanExpressions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/checkArguments/booleanExpressions.kt");
            }
            
            @TestMetadata("kt1897_diagnostic_part.kt")
            public void testKt1897_diagnostic_part() throws Exception {
                doTest("compiler/testData/diagnostics/tests/checkArguments/kt1897_diagnostic_part.kt");
            }
            
            @TestMetadata("kt1940.kt")
            public void testKt1940() throws Exception {
                doTest("compiler/testData/diagnostics/tests/checkArguments/kt1940.kt");
            }
            
            @TestMetadata("SpreadVarargs.kt")
            public void testSpreadVarargs() throws Exception {
                doTest("compiler/testData/diagnostics/tests/checkArguments/SpreadVarargs.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/classObjects")
        public static class ClassObjects extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInClassObjects() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/classObjects"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ClassObjectCannotAccessClassFields.kt")
            public void testClassObjectCannotAccessClassFields() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/ClassObjectCannotAccessClassFields.kt");
            }
            
            @TestMetadata("classObjectInLocalClass.kt")
            public void testClassObjectInLocalClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/classObjectInLocalClass.kt");
            }
            
            @TestMetadata("ClassObjectVisibility.kt")
            public void testClassObjectVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/ClassObjectVisibility.kt");
            }
            
            @TestMetadata("ClassObjects.kt")
            public void testClassObjects() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/ClassObjects.kt");
            }
            
            @TestMetadata("importClassInClassObject.kt")
            public void testImportClassInClassObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/importClassInClassObject.kt");
            }
            
            @TestMetadata("InnerClassClassObject.kt")
            public void testInnerClassClassObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/InnerClassClassObject.kt");
            }
            
            @TestMetadata("invisibleClassObjects.kt")
            public void testInvisibleClassObjects() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/invisibleClassObjects.kt");
            }
            
            @TestMetadata("kt3866.kt")
            public void testKt3866() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/kt3866.kt");
            }
            
            @TestMetadata("nestedClassInPrivateClassObject.kt")
            public void testNestedClassInPrivateClassObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/classObjects/nestedClassInPrivateClassObject.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis")
        @InnerTestClasses({ControlFlowAnalysis.DefiniteReturn.class})
        public static class ControlFlowAnalysis extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInControlFlowAnalysis() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/controlFlowAnalysis"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("backingFieldInsideGetter.kt")
            public void testBackingFieldInsideGetter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/backingFieldInsideGetter.kt");
            }
            
            @TestMetadata("checkInnerLocalDeclarations.kt")
            public void testCheckInnerLocalDeclarations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkInnerLocalDeclarations.kt");
            }
            
            @TestMetadata("checkPropertyAccessor.kt")
            public void testCheckPropertyAccessor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkPropertyAccessor.kt");
            }
            
            @TestMetadata("DeadCode.kt")
            public void testDeadCode() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/DeadCode.kt");
            }
            
            @TestMetadata("definiteReturnInWhen.kt")
            public void testDefiniteReturnInWhen() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturnInWhen.kt");
            }
            
            @TestMetadata("kt1001.kt")
            public void testKt1001() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1001.kt");
            }
            
            @TestMetadata("kt1027.kt")
            public void testKt1027() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1027.kt");
            }
            
            @TestMetadata("kt1066.kt")
            public void testKt1066() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1066.kt");
            }
            
            @TestMetadata("kt1156.kt")
            public void testKt1156() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1156.kt");
            }
            
            @TestMetadata("kt1185enums.kt")
            public void testKt1185enums() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1185enums.kt");
            }
            
            @TestMetadata("kt1189.kt")
            public void testKt1189() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1189.kt");
            }
            
            @TestMetadata("kt1191.kt")
            public void testKt1191() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1191.kt");
            }
            
            @TestMetadata("kt1219.1301.kt")
            public void testKt1219_1301() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1219.1301.kt");
            }
            
            @TestMetadata("kt1571.kt")
            public void testKt1571() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1571.kt");
            }
            
            @TestMetadata("kt1977.kt")
            public void testKt1977() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1977.kt");
            }
            
            @TestMetadata("kt2166_kt2103.kt")
            public void testKt2166_kt2103() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2166_kt2103.kt");
            }
            
            @TestMetadata("kt2226.kt")
            public void testKt2226() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2226.kt");
            }
            
            @TestMetadata("kt2330.kt")
            public void testKt2330() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2330.kt");
            }
            
            @TestMetadata("kt2369.kt")
            public void testKt2369() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2369.kt");
            }
            
            @TestMetadata("kt2585_1.kt")
            public void testKt2585_1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2585_1.kt");
            }
            
            @TestMetadata("kt2585_2.kt")
            public void testKt2585_2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2585_2.kt");
            }
            
            @TestMetadata("kt2585_3.kt")
            public void testKt2585_3() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2585_3.kt");
            }
            
            @TestMetadata("kt2845.kt")
            public void testKt2845() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2845.kt");
            }
            
            @TestMetadata("kt2960.kt")
            public void testKt2960() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2960.kt");
            }
            
            @TestMetadata("kt2972.kt")
            public void testKt2972() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2972.kt");
            }
            
            @TestMetadata("kt3444.kt")
            public void testKt3444() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3444.kt");
            }
            
            @TestMetadata("kt3501.kt")
            public void testKt3501() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3501.kt");
            }
            
            @TestMetadata("kt4405.kt")
            public void testKt4405() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4405.kt");
            }
            
            @TestMetadata("kt510.kt")
            public void testKt510() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt510.kt");
            }
            
            @TestMetadata("kt607.kt")
            public void testKt607() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt607.kt");
            }
            
            @TestMetadata("kt609.kt")
            public void testKt609() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt609.kt");
            }
            
            @TestMetadata("kt610.kt")
            public void testKt610() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt610.kt");
            }
            
            @TestMetadata("kt776.kt")
            public void testKt776() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt776.kt");
            }
            
            @TestMetadata("kt843.kt")
            public void testKt843() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt843.kt");
            }
            
            @TestMetadata("kt897.kt")
            public void testKt897() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt897.kt");
            }
            
            @TestMetadata("localClasses.kt")
            public void testLocalClasses() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/localClasses.kt");
            }
            
            @TestMetadata("propertiesOrderInPackage.kt")
            public void testPropertiesOrderInPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesOrderInPackage.kt");
            }
            
            @TestMetadata("referenceToPropertyInitializer.kt")
            public void testReferenceToPropertyInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/referenceToPropertyInitializer.kt");
            }
            
            @TestMetadata("repeatUnitializedErrorOnlyForLocalVars.kt")
            public void testRepeatUnitializedErrorOnlyForLocalVars() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/repeatUnitializedErrorOnlyForLocalVars.kt");
            }
            
            @TestMetadata("uninitializedInLocalDeclarations.kt")
            public void testUninitializedInLocalDeclarations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedInLocalDeclarations.kt");
            }
            
            @TestMetadata("unreachableCode.kt")
            public void testUnreachableCode() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unreachableCode.kt");
            }
            
            @TestMetadata("varInitializationInIfInCycle.kt")
            public void testVarInitializationInIfInCycle() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/varInitializationInIfInCycle.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn")
            public static class DefiniteReturn extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInDefiniteReturn() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("kt3444_ReturnFromLocalFunctions.kt")
                public void testKt3444_ReturnFromLocalFunctions() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt3444_ReturnFromLocalFunctions.kt");
                }
                
                @TestMetadata("kt4034.kt")
                public void testKt4034() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt4034.kt");
                }
                
                @TestMetadata("ReturnFromFunctionInObject.kt")
                public void testReturnFromFunctionInObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/ReturnFromFunctionInObject.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("ControlFlowAnalysis");
                suite.addTestSuite(ControlFlowAnalysis.class);
                suite.addTestSuite(DefiniteReturn.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/controlStructures")
        public static class ControlStructures extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInControlStructures() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/controlStructures"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("emptyIf.kt")
            public void testEmptyIf() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/emptyIf.kt");
            }
            
            @TestMetadata("forLoopWithNullableRange.kt")
            public void testForLoopWithNullableRange() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/forLoopWithNullableRange.kt");
            }
            
            @TestMetadata("forWithNullableIterator.kt")
            public void testForWithNullableIterator() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/forWithNullableIterator.kt");
            }
            
            @TestMetadata("ForWithoutBraces.kt")
            public void testForWithoutBraces() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/ForWithoutBraces.kt");
            }
            
            @TestMetadata("ForbidStatementAsDirectFunctionBody.kt")
            public void testForbidStatementAsDirectFunctionBody() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/ForbidStatementAsDirectFunctionBody.kt");
            }
            
            @TestMetadata("jumpAcrossFunctionBoundary.kt")
            public void testJumpAcrossFunctionBoundary() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/jumpAcrossFunctionBoundary.kt");
            }
            
            @TestMetadata("kt1075.kt")
            public void testKt1075() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt1075.kt");
            }
            
            @TestMetadata("kt4310.kt")
            public void testKt4310() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt4310.kt");
            }
            
            @TestMetadata("kt657.kt")
            public void testKt657() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt657.kt");
            }
            
            @TestMetadata("kt770.kt351.kt735_StatementType.kt")
            public void testKt770_kt351_kt735_StatementType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt770.kt351.kt735_StatementType.kt");
            }
            
            @TestMetadata("kt786.kt")
            public void testKt786() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt786.kt");
            }
            
            @TestMetadata("kt799.kt")
            public void testKt799() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/kt799.kt");
            }
            
            @TestMetadata("tryReturnType.kt")
            public void testTryReturnType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/tryReturnType.kt");
            }
            
            @TestMetadata("valVarCatchParameter.kt")
            public void testValVarCatchParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/valVarCatchParameter.kt");
            }
            
            @TestMetadata("valVarLoopParameter.kt")
            public void testValVarLoopParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/valVarLoopParameter.kt");
            }
            
            @TestMetadata("when.kt234.kt973.kt")
            public void testWhen_kt234_kt973() throws Exception {
                doTest("compiler/testData/diagnostics/tests/controlStructures/when.kt234.kt973.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/dataClasses")
        public static class DataClasses extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDataClasses() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/dataClasses"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("bothParamsAreNotProperties.kt")
            public void testBothParamsAreNotProperties() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/bothParamsAreNotProperties.kt");
            }
            
            @TestMetadata("componentFunctionInSubClass.kt")
            public void testComponentFunctionInSubClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/componentFunctionInSubClass.kt");
            }
            
            @TestMetadata("componentFunctionVisibility.kt")
            public void testComponentFunctionVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/componentFunctionVisibility.kt");
            }
            
            @TestMetadata("componentFunctionsAreFinal.kt")
            public void testComponentFunctionsAreFinal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/componentFunctionsAreFinal.kt");
            }
            
            @TestMetadata("componentNamedComponent1.kt")
            public void testComponentNamedComponent1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/componentNamedComponent1.kt");
            }
            
            @TestMetadata("conflictingOverloads.kt")
            public void testConflictingOverloads() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/conflictingOverloads.kt");
            }
            
            @TestMetadata("dataClassOverrideConflict.kt")
            public void testDataClassOverrideConflict() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/dataClassOverrideConflict.kt");
            }
            
            @TestMetadata("emptyConstructor.kt")
            public void testEmptyConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/emptyConstructor.kt");
            }
            
            @TestMetadata("firstParamIsVal.kt")
            public void testFirstParamIsVal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/firstParamIsVal.kt");
            }
            
            @TestMetadata("firstParamIsVar.kt")
            public void testFirstParamIsVar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/firstParamIsVar.kt");
            }
            
            @TestMetadata("implementTraitWhichHasComponent1.kt")
            public void testImplementTraitWhichHasComponent1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasComponent1.kt");
            }
            
            @TestMetadata("implementTraitWhichHasFinalComponent1.kt")
            public void testImplementTraitWhichHasFinalComponent1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasFinalComponent1.kt");
            }
            
            @TestMetadata("multiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/multiDeclaration.kt");
            }
            
            @TestMetadata("multiDeclarationFor.kt")
            public void testMultiDeclarationFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/multiDeclarationFor.kt");
            }
            
            @TestMetadata("notADataClass.kt")
            public void testNotADataClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/notADataClass.kt");
            }
            
            @TestMetadata("oneValParam.kt")
            public void testOneValParam() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/oneValParam.kt");
            }
            
            @TestMetadata("overrideInvisibleMember.kt")
            public void testOverrideInvisibleMember() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/overrideInvisibleMember.kt");
            }
            
            @TestMetadata("secondParamIsVal.kt")
            public void testSecondParamIsVal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/secondParamIsVal.kt");
            }
            
            @TestMetadata("secondParamIsVar.kt")
            public void testSecondParamIsVar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/secondParamIsVar.kt");
            }
            
            @TestMetadata("twoValParams.kt")
            public void testTwoValParams() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/twoValParams.kt");
            }
            
            @TestMetadata("twoVarParams.kt")
            public void testTwoVarParams() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataClasses/twoVarParams.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/dataFlow")
        @InnerTestClasses({DataFlow.Local.class})
        public static class DataFlow extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDataFlow() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/dataFlow"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("CalleeExpression.kt")
            public void testCalleeExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlow/CalleeExpression.kt");
            }
            
            @TestMetadata("EmptyIf.kt")
            public void testEmptyIf() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlow/EmptyIf.kt");
            }
            
            @TestMetadata("IsExpression.kt")
            public void testIsExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlow/IsExpression.kt");
            }
            
            @TestMetadata("WhenSubject.kt")
            public void testWhenSubject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlow/WhenSubject.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/local")
            public static class Local extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInLocal() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/dataFlow/local"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("kt2835.kt")
                public void testKt2835() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/kt2835.kt");
                }
                
                @TestMetadata("LocalClassBase.kt")
                public void testLocalClassBase() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassBase.kt");
                }
                
                @TestMetadata("LocalClassDefaultParameters.kt")
                public void testLocalClassDefaultParameters() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDefaultParameters.kt");
                }
                
                @TestMetadata("LocalClassDelegatedProperties.kt")
                public void testLocalClassDelegatedProperties() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegatedProperties.kt");
                }
                
                @TestMetadata("LocalClassDelegation.kt")
                public void testLocalClassDelegation() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegation.kt");
                }
                
                @TestMetadata("LocalClassFunctions.kt")
                public void testLocalClassFunctions() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassFunctions.kt");
                }
                
                @TestMetadata("LocalClassInMemberOfLocalClass.kt")
                public void testLocalClassInMemberOfLocalClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInMemberOfLocalClass.kt");
                }
                
                @TestMetadata("LocalClassInitializer.kt")
                public void testLocalClassInitializer() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInitializer.kt");
                }
                
                @TestMetadata("LocalClassProperty.kt")
                public void testLocalClassProperty() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassProperty.kt");
                }
                
                @TestMetadata("LocalObject.kt")
                public void testLocalObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalObject.kt");
                }
                
                @TestMetadata("LocalObjectDelegation.kt")
                public void testLocalObjectDelegation() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalObjectDelegation.kt");
                }
                
                @TestMetadata("NestedLocalClass.kt")
                public void testNestedLocalClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/dataFlow/local/NestedLocalClass.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("DataFlow");
                suite.addTestSuite(DataFlow.class);
                suite.addTestSuite(Local.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal")
        public static class DataFlowInfoTraversal extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDataFlowInfoTraversal() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/dataFlowInfoTraversal"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AndOr.kt")
            public void testAndOr() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AndOr.kt");
            }
            
            @TestMetadata("ArrayAccess.kt")
            public void testArrayAccess() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayAccess.kt");
            }
            
            @TestMetadata("ArrayExpression.kt")
            public void testArrayExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayExpression.kt");
            }
            
            @TestMetadata("ArrayGetSetConvention.kt")
            public void testArrayGetSetConvention() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayGetSetConvention.kt");
            }
            
            @TestMetadata("ArrayIndices.kt")
            public void testArrayIndices() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayIndices.kt");
            }
            
            @TestMetadata("Assignment.kt")
            public void testAssignment() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Assignment.kt");
            }
            
            @TestMetadata("AssignmentInInitializer.kt")
            public void testAssignmentInInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentInInitializer.kt");
            }
            
            @TestMetadata("AssignmentOperation.kt")
            public void testAssignmentOperation() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentOperation.kt");
            }
            
            @TestMetadata("AssignmentToArrayElement.kt")
            public void testAssignmentToArrayElement() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentToArrayElement.kt");
            }
            
            @TestMetadata("BinaryExpression.kt")
            public void testBinaryExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpression.kt");
            }
            
            @TestMetadata("BinaryExpressionBooleanOperations.kt")
            public void testBinaryExpressionBooleanOperations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionBooleanOperations.kt");
            }
            
            @TestMetadata("BinaryExpressionCompareToConvention.kt")
            public void testBinaryExpressionCompareToConvention() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionCompareToConvention.kt");
            }
            
            @TestMetadata("BinaryExpressionContainsConvention.kt")
            public void testBinaryExpressionContainsConvention() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionContainsConvention.kt");
            }
            
            @TestMetadata("BinaryExpressionElvis.kt")
            public void testBinaryExpressionElvis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionElvis.kt");
            }
            
            @TestMetadata("BinaryExpressionEqualsConvention.kt")
            public void testBinaryExpressionEqualsConvention() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionEqualsConvention.kt");
            }
            
            @TestMetadata("BinaryExpressionIdentifier.kt")
            public void testBinaryExpressionIdentifier() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionIdentifier.kt");
            }
            
            @TestMetadata("BinaryExpressionPlusConvention.kt")
            public void testBinaryExpressionPlusConvention() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionPlusConvention.kt");
            }
            
            @TestMetadata("Condition.kt")
            public void testCondition() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Condition.kt");
            }
            
            @TestMetadata("ContinueOuterLoop.kt")
            public void testContinueOuterLoop() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ContinueOuterLoop.kt");
            }
            
            @TestMetadata("DeepIf.kt")
            public void testDeepIf() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DeepIf.kt");
            }
            
            @TestMetadata("DoWhile.kt")
            public void testDoWhile() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhile.kt");
            }
            
            @TestMetadata("DoWhileCondition.kt")
            public void testDoWhileCondition() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhileCondition.kt");
            }
            
            @TestMetadata("Elvis.kt")
            public void testElvis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Elvis.kt");
            }
            
            @TestMetadata("ExclExcl.kt")
            public void testExclExcl() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ExclExcl.kt");
            }
            
            @TestMetadata("For.kt")
            public void testFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/For.kt");
            }
            
            @TestMetadata("ForLoopRange.kt")
            public void testForLoopRange() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ForLoopRange.kt");
            }
            
            @TestMetadata("FunctionLiteral.kt")
            public void testFunctionLiteral() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/FunctionLiteral.kt");
            }
            
            @TestMetadata("IfStatement.kt")
            public void testIfStatement() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfStatement.kt");
            }
            
            @TestMetadata("IfThenElse.kt")
            public void testIfThenElse() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElse.kt");
            }
            
            @TestMetadata("IfThenElseBothInvalid.kt")
            public void testIfThenElseBothInvalid() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElseBothInvalid.kt");
            }
            
            @TestMetadata("IsExpression.kt")
            public void testIsExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IsExpression.kt");
            }
            
            @TestMetadata("ManyIfs.kt")
            public void testManyIfs() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ManyIfs.kt");
            }
            
            @TestMetadata("MultiDeclaration.kt")
            public void testMultiDeclaration() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/MultiDeclaration.kt");
            }
            
            @TestMetadata("ObjectExpression.kt")
            public void testObjectExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ObjectExpression.kt");
            }
            
            @TestMetadata("QualifiedExpression.kt")
            public void testQualifiedExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/QualifiedExpression.kt");
            }
            
            @TestMetadata("Return.kt")
            public void testReturn() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Return.kt");
            }
            
            @TestMetadata("StringTemplate.kt")
            public void testStringTemplate() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/StringTemplate.kt");
            }
            
            @TestMetadata("ThisSuper.kt")
            public void testThisSuper() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ThisSuper.kt");
            }
            
            @TestMetadata("Throw.kt")
            public void testThrow() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Throw.kt");
            }
            
            @TestMetadata("TryCatch.kt")
            public void testTryCatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryCatch.kt");
            }
            
            @TestMetadata("TryFinally.kt")
            public void testTryFinally() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryFinally.kt");
            }
            
            @TestMetadata("UnaryExpression.kt")
            public void testUnaryExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/UnaryExpression.kt");
            }
            
            @TestMetadata("When.kt")
            public void testWhen() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/When.kt");
            }
            
            @TestMetadata("WhenEntry.kt")
            public void testWhenEntry() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntry.kt");
            }
            
            @TestMetadata("WhenIn.kt")
            public void testWhenIn() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenIn.kt");
            }
            
            @TestMetadata("WhenSubject.kt")
            public void testWhenSubject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenSubject.kt");
            }
            
            @TestMetadata("While.kt")
            public void testWhile() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/While.kt");
            }
            
            @TestMetadata("WhileCondition.kt")
            public void testWhileCondition() throws Exception {
                doTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhileCondition.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks")
        @InnerTestClasses({DeclarationChecks.MultiDeclarations.class})
        public static class DeclarationChecks extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDeclarationChecks() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/declarationChecks"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ambiguousObjectExpressionType.kt")
            public void testAmbiguousObjectExpressionType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/ambiguousObjectExpressionType.kt");
            }
            
            @TestMetadata("ComponentFunctionReturnTypeMismatch.kt")
            public void testComponentFunctionReturnTypeMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/ComponentFunctionReturnTypeMismatch.kt");
            }
            
            @TestMetadata("ConflictingAndRedundantProjections.kt")
            public void testConflictingAndRedundantProjections() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/ConflictingAndRedundantProjections.kt");
            }
            
            @TestMetadata("DataFlowInMultiDeclInFor.kt")
            public void testDataFlowInMultiDeclInFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInMultiDeclInFor.kt");
            }
            
            @TestMetadata("DataFlowInfoInMultiDecl.kt")
            public void testDataFlowInfoInMultiDecl() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInfoInMultiDecl.kt");
            }
            
            @TestMetadata("kt1141.kt")
            public void testKt1141() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt1141.kt");
            }
            
            @TestMetadata("kt1193.kt")
            public void testKt1193() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt1193.kt");
            }
            
            @TestMetadata("kt2096.kt")
            public void testKt2096() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt2096.kt");
            }
            
            @TestMetadata("kt2142.kt")
            public void testKt2142() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt2142.kt");
            }
            
            @TestMetadata("kt2397.kt")
            public void testKt2397() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt2397.kt");
            }
            
            @TestMetadata("kt2631_MultipleDeclaration.kt")
            public void testKt2631_MultipleDeclaration() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt2631_MultipleDeclaration.kt");
            }
            
            @TestMetadata("kt2643MultiDeclInControlFlow.kt")
            public void testKt2643MultiDeclInControlFlow() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt2643MultiDeclInControlFlow.kt");
            }
            
            @TestMetadata("kt559.kt")
            public void testKt559() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/kt559.kt");
            }
            
            @TestMetadata("localDeclarationModifiers.kt")
            public void testLocalDeclarationModifiers() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/localDeclarationModifiers.kt");
            }
            
            @TestMetadata("localFunctionNoInheritVisibility.kt")
            public void testLocalFunctionNoInheritVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/localFunctionNoInheritVisibility.kt");
            }
            
            @TestMetadata("LocalVariableWithNoTypeInformation.kt")
            public void testLocalVariableWithNoTypeInformation() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/LocalVariableWithNoTypeInformation.kt");
            }
            
            @TestMetadata("MultiDeclarationErrors.kt")
            public void testMultiDeclarationErrors() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/MultiDeclarationErrors.kt");
            }
            
            @TestMetadata("packageDeclarationModifiers.kt")
            public void testPackageDeclarationModifiers() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/packageDeclarationModifiers.kt");
            }
            
            @TestMetadata("propertyInPackageHasNoInheritVisibility.kt")
            public void testPropertyInPackageHasNoInheritVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/propertyInPackageHasNoInheritVisibility.kt");
            }
            
            @TestMetadata("RedeclarationsInMultiDecl.kt")
            public void testRedeclarationsInMultiDecl() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/RedeclarationsInMultiDecl.kt");
            }
            
            @TestMetadata("unambiguousObjectExpressionType.kt")
            public void testUnambiguousObjectExpressionType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/unambiguousObjectExpressionType.kt");
            }
            
            @TestMetadata("valVarFunctionParameter.kt")
            public void testValVarFunctionParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/valVarFunctionParameter.kt");
            }
            
            @TestMetadata("VarianceOnFunctionAndPropertyTypeParameters.kt")
            public void testVarianceOnFunctionAndPropertyTypeParameters() throws Exception {
                doTest("compiler/testData/diagnostics/tests/declarationChecks/VarianceOnFunctionAndPropertyTypeParameters.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations")
            public static class MultiDeclarations extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInMultiDeclarations() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("DoubleDeclForLoop.kt")
                public void testDoubleDeclForLoop() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/DoubleDeclForLoop.kt");
                }
                
                @TestMetadata("FolLoopTypeComponentTypeMismatch.kt")
                public void testFolLoopTypeComponentTypeMismatch() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/FolLoopTypeComponentTypeMismatch.kt");
                }
                
                @TestMetadata("ForLoopComponentFunctionAmbiguity.kt")
                public void testForLoopComponentFunctionAmbiguity() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/ForLoopComponentFunctionAmbiguity.kt");
                }
                
                @TestMetadata("ForLoopComponentFunctionMissing.kt")
                public void testForLoopComponentFunctionMissing() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/ForLoopComponentFunctionMissing.kt");
                }
                
                @TestMetadata("ForLoopWithExtensions.kt")
                public void testForLoopWithExtensions() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/ForLoopWithExtensions.kt");
                }
                
                @TestMetadata("ForWithExplicitTypes.kt")
                public void testForWithExplicitTypes() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/ForWithExplicitTypes.kt");
                }
                
                @TestMetadata("kt2829.kt")
                public void testKt2829() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/kt2829.kt");
                }
                
                @TestMetadata("RedeclarationInForLoop.kt")
                public void testRedeclarationInForLoop() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/RedeclarationInForLoop.kt");
                }
                
                @TestMetadata("SingleDeclForLoop.kt")
                public void testSingleDeclForLoop() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/declarationChecks/multiDeclarations/SingleDeclForLoop.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("DeclarationChecks");
                suite.addTestSuite(DeclarationChecks.class);
                suite.addTestSuite(MultiDeclarations.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty")
        @InnerTestClasses({DelegatedProperty.Inference.class})
        public static class DelegatedProperty extends AbstractJetDiagnosticsTest {
            @TestMetadata("absentErrorAboutInitializer.kt")
            public void testAbsentErrorAboutInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutInitializer.kt");
            }
            
            @TestMetadata("absentErrorAboutType.kt")
            public void testAbsentErrorAboutType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutType.kt");
            }
            
            @TestMetadata("abstractDelegatedProperty.kt")
            public void testAbstractDelegatedProperty() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/abstractDelegatedProperty.kt");
            }
            
            public void testAllFilesPresentInDelegatedProperty() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("backingField.kt")
            public void testBackingField() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/backingField.kt");
            }
            
            @TestMetadata("delegatedPropertyOverridedInTrait.kt")
            public void testDelegatedPropertyOverridedInTrait() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTrait.kt");
            }
            
            @TestMetadata("delegatedPropertyOverridedInTraitTypeMismatch.kt")
            public void testDelegatedPropertyOverridedInTraitTypeMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTraitTypeMismatch.kt");
            }
            
            @TestMetadata("genericGetter.kt")
            public void testGenericGetter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/genericGetter.kt");
            }
            
            @TestMetadata("getterWithSubtype.kt")
            public void testGetterWithSubtype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/getterWithSubtype.kt");
            }
            
            @TestMetadata("inTrait.kt")
            public void testInTrait() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/inTrait.kt");
            }
            
            @TestMetadata("incompleteTypeInference.kt")
            public void testIncompleteTypeInference() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/incompleteTypeInference.kt");
            }
            
            @TestMetadata("localVariable.kt")
            public void testLocalVariable() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/localVariable.kt");
            }
            
            @TestMetadata("missedGetter.kt")
            public void testMissedGetter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/missedGetter.kt");
            }
            
            @TestMetadata("missedSetter.kt")
            public void testMissedSetter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/missedSetter.kt");
            }
            
            @TestMetadata("propertyDefferedType.kt")
            public void testPropertyDefferedType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/propertyDefferedType.kt");
            }
            
            @TestMetadata("publicDelegatedProperty.kt")
            public void testPublicDelegatedProperty() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/publicDelegatedProperty.kt");
            }
            
            @TestMetadata("recursiveType.kt")
            public void testRecursiveType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/recursiveType.kt");
            }
            
            @TestMetadata("redundantGetter.kt")
            public void testRedundantGetter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/redundantGetter.kt");
            }
            
            @TestMetadata("redundantSetter.kt")
            public void testRedundantSetter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/redundantSetter.kt");
            }
            
            @TestMetadata("setterThisTypeMismatch.kt")
            public void testSetterThisTypeMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/setterThisTypeMismatch.kt");
            }
            
            @TestMetadata("setterWithSupertype.kt")
            public void testSetterWithSupertype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/setterWithSupertype.kt");
            }
            
            @TestMetadata("thisInDelegate.kt")
            public void testThisInDelegate() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/thisInDelegate.kt");
            }
            
            @TestMetadata("thisOfAnyType.kt")
            public void testThisOfAnyType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfAnyType.kt");
            }
            
            @TestMetadata("thisOfNothingNullableType.kt")
            public void testThisOfNothingNullableType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingNullableType.kt");
            }
            
            @TestMetadata("thisOfNothingType.kt")
            public void testThisOfNothingType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingType.kt");
            }
            
            @TestMetadata("twoGetMethods.kt")
            public void testTwoGetMethods() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/twoGetMethods.kt");
            }
            
            @TestMetadata("typeMismatchForGetReturnType.kt")
            public void testTypeMismatchForGetReturnType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetReturnType.kt");
            }
            
            @TestMetadata("typeMismatchForGetWithGeneric.kt")
            public void testTypeMismatchForGetWithGeneric() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetWithGeneric.kt");
            }
            
            @TestMetadata("typeMismatchForSetParameter.kt")
            public void testTypeMismatchForSetParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForSetParameter.kt");
            }
            
            @TestMetadata("typeMismatchForThisGetParameter.kt")
            public void testTypeMismatchForThisGetParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForThisGetParameter.kt");
            }
            
            @TestMetadata("wrongCountOfParametersInGet.kt")
            public void testWrongCountOfParametersInGet() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInGet.kt");
            }
            
            @TestMetadata("wrongCountOfParametersInSet.kt")
            public void testWrongCountOfParametersInSet() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInSet.kt");
            }
            
            @TestMetadata("wrongSetterReturnType.kt")
            public void testWrongSetterReturnType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongSetterReturnType.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference")
            public static class Inference extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInference() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/delegatedProperty/inference"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("differentDelegatedExpressions.kt")
                public void testDifferentDelegatedExpressions() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/differentDelegatedExpressions.kt");
                }
                
                @TestMetadata("extensionGet.kt")
                public void testExtensionGet() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionGet.kt");
                }
                
                @TestMetadata("extensionProperty.kt")
                public void testExtensionProperty() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionProperty.kt");
                }
                
                @TestMetadata("noErrorsForImplicitConstraints.kt")
                public void testNoErrorsForImplicitConstraints() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/noErrorsForImplicitConstraints.kt");
                }
                
                @TestMetadata("noExpectedTypeForSupertypeConstraint.kt")
                public void testNoExpectedTypeForSupertypeConstraint() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/noExpectedTypeForSupertypeConstraint.kt");
                }
                
                @TestMetadata("useCompleterWithoutExpectedType.kt")
                public void testUseCompleterWithoutExpectedType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useCompleterWithoutExpectedType.kt");
                }
                
                @TestMetadata("useExpectedType.kt")
                public void testUseExpectedType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedType.kt");
                }
                
                @TestMetadata("useExpectedTypeForVal.kt")
                public void testUseExpectedTypeForVal() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedTypeForVal.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("DelegatedProperty");
                suite.addTestSuite(DelegatedProperty.class);
                suite.addTestSuite(Inference.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/deparenthesize")
        public static class Deparenthesize extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInDeparenthesize() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/deparenthesize"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ArrayAccessAssignment.kt")
            public void testArrayAccessAssignment() throws Exception {
                doTest("compiler/testData/diagnostics/tests/deparenthesize/ArrayAccessAssignment.kt");
            }
            
            @TestMetadata("checkDeparenthesizedType.kt")
            public void testCheckDeparenthesizedType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/deparenthesize/checkDeparenthesizedType.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/enum")
        @InnerTestClasses({Enum.Inner.class})
        public static class Enum extends AbstractJetDiagnosticsTest {
            @TestMetadata("AbstractEnum.kt")
            public void testAbstractEnum() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/AbstractEnum.kt");
            }
            
            @TestMetadata("AbstractInEnum.kt")
            public void testAbstractInEnum() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/AbstractInEnum.kt");
            }
            
            public void testAllFilesPresentInEnum() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/enum"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("classObjectOfPrivateEnum.kt")
            public void testClassObjectOfPrivateEnum() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/classObjectOfPrivateEnum.kt");
            }
            
            @TestMetadata("dontCreatePackageTypeForEnumEntry.kt")
            public void testDontCreatePackageTypeForEnumEntry() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/dontCreatePackageTypeForEnumEntry.kt");
            }
            
            @TestMetadata("entryShouldBeOfEnumType.kt")
            public void testEntryShouldBeOfEnumType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/entryShouldBeOfEnumType.kt");
            }
            
            @TestMetadata("enumEntryCannotHaveClassObject.kt")
            public void testEnumEntryCannotHaveClassObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/enumEntryCannotHaveClassObject.kt");
            }
            
            @TestMetadata("enumInheritance.kt")
            public void testEnumInheritance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/enumInheritance.kt");
            }
            
            @TestMetadata("enumModifier.kt")
            public void testEnumModifier() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/enumModifier.kt");
            }
            
            @TestMetadata("enumStarImport.kt")
            public void testEnumStarImport() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/enumStarImport.kt");
            }
            
            @TestMetadata("enumWithEmptyName.kt")
            public void testEnumWithEmptyName() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/enumWithEmptyName.kt");
            }
            
            @TestMetadata("extensionNamedAsEnumEntry.kt")
            public void testExtensionNamedAsEnumEntry() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/extensionNamedAsEnumEntry.kt");
            }
            
            @TestMetadata("importEnumFromJava.kt")
            public void testImportEnumFromJava() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/importEnumFromJava.kt");
            }
            
            @TestMetadata("inheritFromEnumEntry.kt")
            public void testInheritFromEnumEntry() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/inheritFromEnumEntry.kt");
            }
            
            @TestMetadata("inheritanceFromEnum.kt")
            public void testInheritanceFromEnum() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/inheritanceFromEnum.kt");
            }
            
            @TestMetadata("javaEnumValueOfMethod.kt")
            public void testJavaEnumValueOfMethod() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/javaEnumValueOfMethod.kt");
            }
            
            @TestMetadata("javaEnumValuesMethod.kt")
            public void testJavaEnumValuesMethod() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/javaEnumValuesMethod.kt");
            }
            
            @TestMetadata("javaEnumWithAbstractFun.kt")
            public void testJavaEnumWithAbstractFun() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/javaEnumWithAbstractFun.kt");
            }
            
            @TestMetadata("javaEnumWithFuns.kt")
            public void testJavaEnumWithFuns() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/javaEnumWithFuns.kt");
            }
            
            @TestMetadata("javaEnumWithNameClashing.kt")
            public void testJavaEnumWithNameClashing() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/javaEnumWithNameClashing.kt");
            }
            
            @TestMetadata("javaEnumWithProperty.kt")
            public void testJavaEnumWithProperty() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/javaEnumWithProperty.kt");
            }
            
            @TestMetadata("kt2834.kt")
            public void testKt2834() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/kt2834.kt");
            }
            
            @TestMetadata("starImportNestedClassAndEntries.kt")
            public void testStarImportNestedClassAndEntries() throws Exception {
                doTest("compiler/testData/diagnostics/tests/enum/starImportNestedClassAndEntries.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/enum/inner")
            public static class Inner extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInner() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/enum/inner"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("existingClassObject.kt")
                public void testExistingClassObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/existingClassObject.kt");
                }
                
                @TestMetadata("insideClass.kt")
                public void testInsideClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/insideClass.kt");
                }
                
                @TestMetadata("insideClassObject.kt")
                public void testInsideClassObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/insideClassObject.kt");
                }
                
                @TestMetadata("insideEnum.kt")
                public void testInsideEnum() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/insideEnum.kt");
                }
                
                @TestMetadata("insideEnumEntry.kt")
                public void testInsideEnumEntry() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/insideEnumEntry.kt");
                }
                
                @TestMetadata("insideInnerClassNotAllowed.kt")
                public void testInsideInnerClassNotAllowed() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/insideInnerClassNotAllowed.kt");
                }
                
                @TestMetadata("insideObject.kt")
                public void testInsideObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/insideObject.kt");
                }
                
                @TestMetadata("insideTrait.kt")
                public void testInsideTrait() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/insideTrait.kt");
                }
                
                @TestMetadata("redeclarationInClassObject.kt")
                public void testRedeclarationInClassObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/redeclarationInClassObject.kt");
                }
                
                @TestMetadata("twoEnums.kt")
                public void testTwoEnums() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/twoEnums.kt");
                }
                
                @TestMetadata("twoEnumsInClassObjectAndInnerClass.kt")
                public void testTwoEnumsInClassObjectAndInnerClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/enum/inner/twoEnumsInClassObjectAndInnerClass.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Enum");
                suite.addTestSuite(Enum.class);
                suite.addTestSuite(Inner.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/evaluate")
        public static class Evaluate extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInEvaluate() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/evaluate"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("binaryMinusDepOnExpType.kt")
            public void testBinaryMinusDepOnExpType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusDepOnExpType.kt");
            }
            
            @TestMetadata("binaryMinusIndepWoExpType.kt")
            public void testBinaryMinusIndepWoExpType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusIndepWoExpType.kt");
            }
            
            @TestMetadata("binaryMinusIndependentExpType.kt")
            public void testBinaryMinusIndependentExpType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/binaryMinusIndependentExpType.kt");
            }
            
            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/float.kt");
            }
            
            @TestMetadata("intOverflow.kt")
            public void testIntOverflow() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/intOverflow.kt");
            }
            
            @TestMetadata("intOverflowWithJavaProperties.kt")
            public void testIntOverflowWithJavaProperties() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/intOverflowWithJavaProperties.kt");
            }
            
            @TestMetadata("integer.kt")
            public void testInteger() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/integer.kt");
            }
            
            @TestMetadata("longOverflow.kt")
            public void testLongOverflow() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/longOverflow.kt");
            }
            
            @TestMetadata("numberBinaryOperations.kt")
            public void testNumberBinaryOperations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperations.kt");
            }
            
            @TestMetadata("numberBinaryOperationsCall.kt")
            public void testNumberBinaryOperationsCall() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsCall.kt");
            }
            
            @TestMetadata("numberBinaryOperationsInfixCall.kt")
            public void testNumberBinaryOperationsInfixCall() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsInfixCall.kt");
            }
            
            @TestMetadata("otherOverflow.kt")
            public void testOtherOverflow() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/otherOverflow.kt");
            }
            
            @TestMetadata("parentesized.kt")
            public void testParentesized() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/parentesized.kt");
            }
            
            @TestMetadata("qualifiedExpressions.kt")
            public void testQualifiedExpressions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/qualifiedExpressions.kt");
            }
            
            @TestMetadata("unaryMinusDepOnExpType.kt")
            public void testUnaryMinusDepOnExpType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusDepOnExpType.kt");
            }
            
            @TestMetadata("unaryMinusIndepWoExpType.kt")
            public void testUnaryMinusIndepWoExpType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusIndepWoExpType.kt");
            }
            
            @TestMetadata("unaryMinusIndependentExpType.kt")
            public void testUnaryMinusIndependentExpType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/unaryMinusIndependentExpType.kt");
            }
            
            @TestMetadata("wrongLongSuffix.kt")
            public void testWrongLongSuffix() throws Exception {
                doTest("compiler/testData/diagnostics/tests/evaluate/wrongLongSuffix.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/extensions")
        public static class Extensions extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInExtensions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/extensions"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("classObject.kt")
            public void testClassObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/classObject.kt");
            }
            
            @TestMetadata("ExtensionFunctions.kt")
            public void testExtensionFunctions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/ExtensionFunctions.kt");
            }
            
            @TestMetadata("ExtensionsCalledOnSuper.kt")
            public void testExtensionsCalledOnSuper() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/ExtensionsCalledOnSuper.kt");
            }
            
            @TestMetadata("GenericIterator.kt")
            public void testGenericIterator() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/GenericIterator.kt");
            }
            
            @TestMetadata("GenericIterator2.kt")
            public void testGenericIterator2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/GenericIterator2.kt");
            }
            
            @TestMetadata("kt1875.kt")
            public void testKt1875() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/kt1875.kt");
            }
            
            @TestMetadata("kt2317.kt")
            public void testKt2317() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/kt2317.kt");
            }
            
            @TestMetadata("kt3470.kt")
            public void testKt3470() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/kt3470.kt");
            }
            
            @TestMetadata("kt3563.kt")
            public void testKt3563() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/kt3563.kt");
            }
            
            @TestMetadata("kt819ExtensionProperties.kt")
            public void testKt819ExtensionProperties() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/kt819ExtensionProperties.kt");
            }
            
            @TestMetadata("noClassObjectsInJava.kt")
            public void testNoClassObjectsInJava() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/noClassObjectsInJava.kt");
            }
            
            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/object.kt");
            }
            
            @TestMetadata("throwOutCandidatesByReceiver.kt")
            public void testThrowOutCandidatesByReceiver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver.kt");
            }
            
            @TestMetadata("throwOutCandidatesByReceiver2.kt")
            public void testThrowOutCandidatesByReceiver2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver2.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals")
        @InnerTestClasses({FunctionLiterals.Return.class})
        public static class FunctionLiterals extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInFunctionLiterals() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/functionLiterals"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("DanglingFunctionLiteral.kt")
            public void testDanglingFunctionLiteral() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/DanglingFunctionLiteral.kt");
            }
            
            @TestMetadata("ExpectedParameterTypeMismatchVariance.kt")
            public void testExpectedParameterTypeMismatchVariance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/ExpectedParameterTypeMismatchVariance.kt");
            }
            
            @TestMetadata("ExpectedParametersTypesMismatch.kt")
            public void testExpectedParametersTypesMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/ExpectedParametersTypesMismatch.kt");
            }
            
            @TestMetadata("functionLIteralInBlockInIf.kt")
            public void testFunctionLIteralInBlockInIf() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/functionLIteralInBlockInIf.kt");
            }
            
            @TestMetadata("functionLiteralWithoutArgumentList.kt")
            public void testFunctionLiteralWithoutArgumentList() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralWithoutArgumentList.kt");
            }
            
            @TestMetadata("kt2906.kt")
            public void testKt2906() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/kt2906.kt");
            }
            
            @TestMetadata("kt4529.kt")
            public void testKt4529() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/kt4529.kt");
            }
            
            @TestMetadata("LabeledFunctionLiterals.kt")
            public void testLabeledFunctionLiterals() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/LabeledFunctionLiterals.kt");
            }
            
            @TestMetadata("NoDanglingFunctionLiteralForNestedCalls.kt")
            public void testNoDanglingFunctionLiteralForNestedCalls() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/NoDanglingFunctionLiteralForNestedCalls.kt");
            }
            
            @TestMetadata("returnNull.kt")
            public void testReturnNull() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/returnNull.kt");
            }
            
            @TestMetadata("unusedLiteral.kt")
            public void testUnusedLiteral() throws Exception {
                doTest("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteral.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/return")
            public static class Return extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInReturn() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/functionLiterals/return"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("AutoLabels.kt")
                public void testAutoLabels() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabels.kt");
                }
                
                @TestMetadata("AutoLabelsNonLocal.kt")
                public void testAutoLabelsNonLocal() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabelsNonLocal.kt");
                }
                
                @TestMetadata("ForbiddenNonLocalReturnNoType.kt")
                public void testForbiddenNonLocalReturnNoType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/ForbiddenNonLocalReturnNoType.kt");
                }
                
                @TestMetadata("LocalAndNonLocalReturnInLambda.kt")
                public void testLocalAndNonLocalReturnInLambda() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalAndNonLocalReturnInLambda.kt");
                }
                
                @TestMetadata("LocalReturnExplicitLabelNoParens.kt")
                public void testLocalReturnExplicitLabelNoParens() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelNoParens.kt");
                }
                
                @TestMetadata("LocalReturnExplicitLabelParens.kt")
                public void testLocalReturnExplicitLabelParens() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelParens.kt");
                }
                
                @TestMetadata("LocalReturnHasTypeNothing.kt")
                public void testLocalReturnHasTypeNothing() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnHasTypeNothing.kt");
                }
                
                @TestMetadata("LocalReturnInNestedFunction.kt")
                public void testLocalReturnInNestedFunction() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedFunction.kt");
                }
                
                @TestMetadata("LocalReturnInNestedLambda.kt")
                public void testLocalReturnInNestedLambda() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedLambda.kt");
                }
                
                @TestMetadata("LocalReturnNoCoercionToUnit.kt")
                public void testLocalReturnNoCoercionToUnit() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNoCoercionToUnit.kt");
                }
                
                @TestMetadata("LocalReturnUnit.kt")
                public void testLocalReturnUnit() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnit.kt");
                }
                
                @TestMetadata("LocalReturnsWithExplicitReturnType.kt")
                public void testLocalReturnsWithExplicitReturnType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnsWithExplicitReturnType.kt");
                }
                
                @TestMetadata("MixedReturnsFromLambda.kt")
                public void testMixedReturnsFromLambda() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/functionLiterals/return/MixedReturnsFromLambda.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("FunctionLiterals");
                suite.addTestSuite(FunctionLiterals.class);
                suite.addTestSuite(Return.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/generics")
        @InnerTestClasses({Generics.TpAsReified.class, Generics.VarProjection.class})
        public static class Generics extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInGenerics() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/generics"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ClassObjectBoundsAreNotSupported.kt")
            public void testClassObjectBoundsAreNotSupported() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/ClassObjectBoundsAreNotSupported.kt");
            }
            
            @TestMetadata("kt1575-Class.kt")
            public void testKt1575_Class() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/kt1575-Class.kt");
            }
            
            @TestMetadata("kt1575-ClassObject.kt")
            public void testKt1575_ClassObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/kt1575-ClassObject.kt");
            }
            
            @TestMetadata("kt1575-Function.kt")
            public void testKt1575_Function() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/kt1575-Function.kt");
            }
            
            @TestMetadata("Projections.kt")
            public void testProjections() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/Projections.kt");
            }
            
            @TestMetadata("PseudoRawTypes.kt")
            public void testPseudoRawTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/PseudoRawTypes.kt");
            }
            
            @TestMetadata("RawTypeInIsExpression.kt")
            public void testRawTypeInIsExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/RawTypeInIsExpression.kt");
            }
            
            @TestMetadata("RawTypeInIsPattern.kt")
            public void testRawTypeInIsPattern() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/RawTypeInIsPattern.kt");
            }
            
            @TestMetadata("RecursiveUpperBoundCheck.kt")
            public void testRecursiveUpperBoundCheck() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundCheck.kt");
            }
            
            @TestMetadata("RecursiveUpperBoundWithTwoArguments.kt")
            public void testRecursiveUpperBoundWithTwoArguments() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundWithTwoArguments.kt");
            }
            
            @TestMetadata("resolveGenericBoundsBeforeSupertypes.kt")
            public void testResolveGenericBoundsBeforeSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/generics/resolveGenericBoundsBeforeSupertypes.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified")
            public static class TpAsReified extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInTpAsReified() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/generics/tpAsReified"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("Conventions.kt")
                public void testConventions() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/tpAsReified/Conventions.kt");
                }
                
                @TestMetadata("InConstructor.kt")
                public void testInConstructor() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InConstructor.kt");
                }
                
                @TestMetadata("InFunction.kt")
                public void testInFunction() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InFunction.kt");
                }
                
                @TestMetadata("InProperty.kt")
                public void testInProperty() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InProperty.kt");
                }
                
                @TestMetadata("InType.kt")
                public void testInType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InType.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/generics/varProjection")
            public static class VarProjection extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInVarProjection() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/generics/varProjection"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("setterNotProjectedOutAssign.kt")
                public void testSetterNotProjectedOutAssign() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/varProjection/setterNotProjectedOutAssign.kt");
                }
                
                @TestMetadata("setterProjectedOutAssign.kt")
                public void testSetterProjectedOutAssign() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutAssign.kt");
                }
                
                @TestMetadata("setterProjectedOutNoPlusAssign.kt")
                public void testSetterProjectedOutNoPlusAssign() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutNoPlusAssign.kt");
                }
                
                @TestMetadata("setterProjectedOutPlusAssignDefined.kt")
                public void testSetterProjectedOutPlusAssignDefined() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutPlusAssignDefined.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Generics");
                suite.addTestSuite(Generics.class);
                suite.addTestSuite(TpAsReified.class);
                suite.addTestSuite(VarProjection.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode")
        @InnerTestClasses({IncompleteCode.DiagnosticWithSyntaxError.class})
        public static class IncompleteCode extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInIncompleteCode() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/incompleteCode"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("arrayBracketsRange.kt")
            public void testArrayBracketsRange() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/arrayBracketsRange.kt");
            }
            
            @TestMetadata("checkNothingIsSubtype.kt")
            public void testCheckNothingIsSubtype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/checkNothingIsSubtype.kt");
            }
            
            @TestMetadata("inExpr.kt")
            public void testInExpr() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/inExpr.kt");
            }
            
            @TestMetadata("incompleteAssignment.kt")
            public void testIncompleteAssignment() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteAssignment.kt");
            }
            
            @TestMetadata("incompleteEquals.kt")
            public void testIncompleteEquals() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/incompleteEquals.kt");
            }
            
            @TestMetadata("kt1955.kt")
            public void testKt1955() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/kt1955.kt");
            }
            
            @TestMetadata("kt2014.kt")
            public void testKt2014() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/kt2014.kt");
            }
            
            @TestMetadata("NoSenselessComparisonForErrorType.kt")
            public void testNoSenselessComparisonForErrorType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/NoSenselessComparisonForErrorType.kt");
            }
            
            @TestMetadata("plusOnTheRight.kt")
            public void testPlusOnTheRight() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/plusOnTheRight.kt");
            }
            
            @TestMetadata("pseudocodeTraverseNextInstructions.kt")
            public void testPseudocodeTraverseNextInstructions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/pseudocodeTraverseNextInstructions.kt");
            }
            
            @TestMetadata("senselessComparisonWithNull.kt")
            public void testSenselessComparisonWithNull() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/senselessComparisonWithNull.kt");
            }
            
            @TestMetadata("SupertypeOfErrorType.kt")
            public void testSupertypeOfErrorType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/SupertypeOfErrorType.kt");
            }
            
            @TestMetadata("typeParameterOnLhsOfDot.kt")
            public void testTypeParameterOnLhsOfDot() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/typeParameterOnLhsOfDot.kt");
            }
            
            @TestMetadata("variableDeclarationInSelector.kt")
            public void testVariableDeclarationInSelector() throws Exception {
                doTest("compiler/testData/diagnostics/tests/incompleteCode/variableDeclarationInSelector.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError")
            public static class DiagnosticWithSyntaxError extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInDiagnosticWithSyntaxError() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("arrayExpression.kt")
                public void testArrayExpression() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/arrayExpression.kt");
                }
                
                @TestMetadata("checkBackingFieldException.kt")
                public void testCheckBackingFieldException() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/checkBackingFieldException.kt");
                }
                
                @TestMetadata("completeFunctionArgumentsOfNestedCalls.kt")
                public void testCompleteFunctionArgumentsOfNestedCalls() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/completeFunctionArgumentsOfNestedCalls.kt");
                }
                
                @TestMetadata("funEquals.kt")
                public void testFunEquals() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funEquals.kt");
                }
                
                @TestMetadata("funKeyword.kt")
                public void testFunKeyword() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funKeyword.kt");
                }
                
                @TestMetadata("funcitonTypes.kt")
                public void testFuncitonTypes() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funcitonTypes.kt");
                }
                
                @TestMetadata("incompleteVal.kt")
                public void testIncompleteVal() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteVal.kt");
                }
                
                @TestMetadata("incompleteValWithAccessor.kt")
                public void testIncompleteValWithAccessor() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteValWithAccessor.kt");
                }
                
                @TestMetadata("incompleteWhen.kt")
                public void testIncompleteWhen() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteWhen.kt");
                }
                
                @TestMetadata("namedFun.kt")
                public void testNamedFun() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/namedFun.kt");
                }
                
                @TestMetadata("noTypeParamsInReturnType.kt")
                public void testNoTypeParamsInReturnType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/noTypeParamsInReturnType.kt");
                }
                
                @TestMetadata("typeReferenceError.kt")
                public void testTypeReferenceError() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/typeReferenceError.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("IncompleteCode");
                suite.addTestSuite(IncompleteCode.class);
                suite.addTestSuite(DiagnosticWithSyntaxError.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/inference")
        @InnerTestClasses({Inference.Constraints.class, Inference.NestedCalls.class, Inference.Regressions.class, Inference.ReportingImprovements.class, Inference.UpperBounds.class, Inference.Varargs.class})
        public static class Inference extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInInference() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inference"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("arrayConstructor.kt")
            public void testArrayConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/arrayConstructor.kt");
            }
            
            @TestMetadata("cannotCompleteResolveAmbiguity.kt")
            public void testCannotCompleteResolveAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveAmbiguity.kt");
            }
            
            @TestMetadata("cannotCompleteResolveFunctionLiteralsNoUse.kt")
            public void testCannotCompleteResolveFunctionLiteralsNoUse() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveFunctionLiteralsNoUse.kt");
            }
            
            @TestMetadata("cannotCompleteResolveNoInfoForParameter.kt")
            public void testCannotCompleteResolveNoInfoForParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoInfoForParameter.kt");
            }
            
            @TestMetadata("cannotCompleteResolveNoneApplicable.kt")
            public void testCannotCompleteResolveNoneApplicable() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoneApplicable.kt");
            }
            
            @TestMetadata("cannotCompleteResolveWithFunctionLiterals.kt")
            public void testCannotCompleteResolveWithFunctionLiterals() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/cannotCompleteResolveWithFunctionLiterals.kt");
            }
            
            @TestMetadata("completeInferenceIfManyFailed.kt")
            public void testCompleteInferenceIfManyFailed() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/completeInferenceIfManyFailed.kt");
            }
            
            @TestMetadata("conflictingSubstitutions.kt")
            public void testConflictingSubstitutions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/conflictingSubstitutions.kt");
            }
            
            @TestMetadata("dependOnExpectedType.kt")
            public void testDependOnExpectedType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/dependOnExpectedType.kt");
            }
            
            @TestMetadata("dependantOnVariance.kt")
            public void testDependantOnVariance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/dependantOnVariance.kt");
            }
            
            @TestMetadata("dependantOnVarianceNullable.kt")
            public void testDependantOnVarianceNullable() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/dependantOnVarianceNullable.kt");
            }
            
            @TestMetadata("functionPlaceholderError.kt")
            public void testFunctionPlaceholderError() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/functionPlaceholderError.kt");
            }
            
            @TestMetadata("hasErrorInConstrainingTypes.kt")
            public void testHasErrorInConstrainingTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/hasErrorInConstrainingTypes.kt");
            }
            
            @TestMetadata("inferInFunctionLiterals.kt")
            public void testInferInFunctionLiterals() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/inferInFunctionLiterals.kt");
            }
            
            @TestMetadata("kt1293.kt")
            public void testKt1293() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/kt1293.kt");
            }
            
            @TestMetadata("kt3184.kt")
            public void testKt3184() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/kt3184.kt");
            }
            
            @TestMetadata("kt619.kt")
            public void testKt619() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/kt619.kt");
            }
            
            @TestMetadata("listConstructor.kt")
            public void testListConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/listConstructor.kt");
            }
            
            @TestMetadata("mapFunction.kt")
            public void testMapFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/mapFunction.kt");
            }
            
            @TestMetadata("mostSpecificAfterInference.kt")
            public void testMostSpecificAfterInference() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/mostSpecificAfterInference.kt");
            }
            
            @TestMetadata("NoInferenceFromDeclaredBounds.kt")
            public void testNoInferenceFromDeclaredBounds() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/NoInferenceFromDeclaredBounds.kt");
            }
            
            @TestMetadata("noInformationForParameter.kt")
            public void testNoInformationForParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/noInformationForParameter.kt");
            }
            
            @TestMetadata("nullableUpperBound.kt")
            public void testNullableUpperBound() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/nullableUpperBound.kt");
            }
            
            @TestMetadata("opposite.kt")
            public void testOpposite() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/opposite.kt");
            }
            
            @TestMetadata("possibleCycleOnConstraints.kt")
            public void testPossibleCycleOnConstraints() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/possibleCycleOnConstraints.kt");
            }
            
            @TestMetadata("tryNumberLowerBoundsBeforeUpperBounds.kt")
            public void testTryNumberLowerBoundsBeforeUpperBounds() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/tryNumberLowerBoundsBeforeUpperBounds.kt");
            }
            
            @TestMetadata("typeConstructorMismatch.kt")
            public void testTypeConstructorMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/typeConstructorMismatch.kt");
            }
            
            @TestMetadata("typeInferenceExpectedTypeMismatch.kt")
            public void testTypeInferenceExpectedTypeMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/typeInferenceExpectedTypeMismatch.kt");
            }
            
            @TestMetadata("useFunctionLiteralsToInferType.kt")
            public void testUseFunctionLiteralsToInferType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inference/useFunctionLiteralsToInferType.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inference/constraints")
            public static class Constraints extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInConstraints() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inference/constraints"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("constraintOnFunctionLiteral.kt")
                public void testConstraintOnFunctionLiteral() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/constraints/constraintOnFunctionLiteral.kt");
                }
                
                @TestMetadata("equalityConstraintOnNullableType.kt")
                public void testEqualityConstraintOnNullableType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/constraints/equalityConstraintOnNullableType.kt");
                }
                
                @TestMetadata("notNullConstraintOnNullableType.kt")
                public void testNotNullConstraintOnNullableType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/constraints/notNullConstraintOnNullableType.kt");
                }
                
                @TestMetadata("subtypeConstraintOnNullableType.kt")
                public void testSubtypeConstraintOnNullableType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/constraints/subtypeConstraintOnNullableType.kt");
                }
                
                @TestMetadata("supertypeConstraintOnNullableType.kt")
                public void testSupertypeConstraintOnNullableType() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/constraints/supertypeConstraintOnNullableType.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls")
            public static class NestedCalls extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNestedCalls() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inference/nestedCalls"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("arrayAccess.kt")
                public void testArrayAccess() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/arrayAccess.kt");
                }
                
                @TestMetadata("binaryExpressions.kt")
                public void testBinaryExpressions() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/binaryExpressions.kt");
                }
                
                @TestMetadata("checkTypesForQualifiedProperties.kt")
                public void testCheckTypesForQualifiedProperties() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/checkTypesForQualifiedProperties.kt");
                }
                
                @TestMetadata("completeNestedCallsForArraySetExpression.kt")
                public void testCompleteNestedCallsForArraySetExpression() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsForArraySetExpression.kt");
                }
                
                @TestMetadata("completeNestedCallsInference.kt")
                public void testCompleteNestedCallsInference() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsInference.kt");
                }
                
                @TestMetadata("completeNestedForVariableAsFunctionCall.kt")
                public void testCompleteNestedForVariableAsFunctionCall() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedForVariableAsFunctionCall.kt");
                }
                
                @TestMetadata("inferenceForNestedBinaryCall.kt")
                public void testInferenceForNestedBinaryCall() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/inferenceForNestedBinaryCall.kt");
                }
                
                @TestMetadata("kt3395.kt")
                public void testKt3395() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3395.kt");
                }
                
                @TestMetadata("kt3461checkTypes.kt")
                public void testKt3461checkTypes() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3461checkTypes.kt");
                }
                
                @TestMetadata("makeNullableIfSafeCall.kt")
                public void testMakeNullableIfSafeCall() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/makeNullableIfSafeCall.kt");
                }
                
                @TestMetadata("nontrivialCallExpression.kt")
                public void testNontrivialCallExpression() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/nestedCalls/nontrivialCallExpression.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inference/regressions")
            public static class Regressions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInRegressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inference/regressions"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("compareBy.kt")
                public void testCompareBy() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/compareBy.kt");
                }
                
                @TestMetadata("kt1029.kt")
                public void testKt1029() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1029.kt");
                }
                
                @TestMetadata("kt1031.kt")
                public void testKt1031() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1031.kt");
                }
                
                @TestMetadata("kt1127.kt")
                public void testKt1127() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1127.kt");
                }
                
                @TestMetadata("kt1145.kt")
                public void testKt1145() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1145.kt");
                }
                
                @TestMetadata("kt1358.kt")
                public void testKt1358() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1358.kt");
                }
                
                @TestMetadata("kt1410.kt")
                public void testKt1410() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1410.kt");
                }
                
                @TestMetadata("kt1558.kt")
                public void testKt1558() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1558.kt");
                }
                
                @TestMetadata("kt1718.kt")
                public void testKt1718() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1718.kt");
                }
                
                @TestMetadata("kt1944.kt")
                public void testKt1944() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt1944.kt");
                }
                
                @TestMetadata("kt2179.kt")
                public void testKt2179() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2179.kt");
                }
                
                @TestMetadata("kt2200.kt")
                public void testKt2200() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2200.kt");
                }
                
                @TestMetadata("kt2283.kt")
                public void testKt2283() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2283.kt");
                }
                
                @TestMetadata("kt2286.kt")
                public void testKt2286() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2286.kt");
                }
                
                @TestMetadata("kt2294.kt")
                public void testKt2294() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2294.kt");
                }
                
                @TestMetadata("kt2320.kt")
                public void testKt2320() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2320.kt");
                }
                
                @TestMetadata("kt2324.kt")
                public void testKt2324() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2324.kt");
                }
                
                @TestMetadata("kt2407.kt")
                public void testKt2407() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2407.kt");
                }
                
                @TestMetadata("kt2445.kt")
                public void testKt2445() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2445.kt");
                }
                
                @TestMetadata("kt2459.kt")
                public void testKt2459() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2459.kt");
                }
                
                @TestMetadata("kt2484.kt")
                public void testKt2484() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2484.kt");
                }
                
                @TestMetadata("kt2505.kt")
                public void testKt2505() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2505.kt");
                }
                
                @TestMetadata("kt2514.kt")
                public void testKt2514() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2514.kt");
                }
                
                @TestMetadata("kt2741.kt")
                public void testKt2741() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2741.kt");
                }
                
                @TestMetadata("kt2838.kt")
                public void testKt2838() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2838.kt");
                }
                
                @TestMetadata("kt2841.kt")
                public void testKt2841() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841.kt");
                }
                
                @TestMetadata("kt2841_it.kt")
                public void testKt2841_it() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_it.kt");
                }
                
                @TestMetadata("kt2841_it_this.kt")
                public void testKt2841_it_this() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_it_this.kt");
                }
                
                @TestMetadata("kt2841_this.kt")
                public void testKt2841_this() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2841_this.kt");
                }
                
                @TestMetadata("kt2842.kt")
                public void testKt2842() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2842.kt");
                }
                
                @TestMetadata("kt2883.kt")
                public void testKt2883() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt2883.kt");
                }
                
                @TestMetadata("kt3007.kt")
                public void testKt3007() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt3007.kt");
                }
                
                @TestMetadata("kt3038.kt")
                public void testKt3038() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt3038.kt");
                }
                
                @TestMetadata("kt3150.kt")
                public void testKt3150() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt3150.kt");
                }
                
                @TestMetadata("kt3174.kt")
                public void testKt3174() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt3174.kt");
                }
                
                @TestMetadata("kt3301.kt")
                public void testKt3301() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt3301.kt");
                }
                
                @TestMetadata("kt3344.kt")
                public void testKt3344() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt3344.kt");
                }
                
                @TestMetadata("kt702.kt")
                public void testKt702() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt702.kt");
                }
                
                @TestMetadata("kt731.kt")
                public void testKt731() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt731.kt");
                }
                
                @TestMetadata("kt742.kt")
                public void testKt742() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt742.kt");
                }
                
                @TestMetadata("kt832.kt")
                public void testKt832() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt832.kt");
                }
                
                @TestMetadata("kt943.kt")
                public void testKt943() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt943.kt");
                }
                
                @TestMetadata("kt948.kt")
                public void testKt948() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/regressions/kt948.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements")
            public static class ReportingImprovements extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInReportingImprovements() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inference/reportingImprovements"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("cannotInferParameterTypeWithInference.kt")
                public void testCannotInferParameterTypeWithInference() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/cannotInferParameterTypeWithInference.kt");
                }
                
                @TestMetadata("ErrorTypeAsGenericParameter.kt")
                public void testErrorTypeAsGenericParameter() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/ErrorTypeAsGenericParameter.kt");
                }
                
                @TestMetadata("FunctionPlaceholder.kt")
                public void testFunctionPlaceholder() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/FunctionPlaceholder.kt");
                }
                
                @TestMetadata("NoAmbiguityForDifferentFunctionTypes.kt")
                public void testNoAmbiguityForDifferentFunctionTypes() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/NoAmbiguityForDifferentFunctionTypes.kt");
                }
                
                @TestMetadata("subtypeForInvariantWithErrorGenerics.kt")
                public void testSubtypeForInvariantWithErrorGenerics() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/reportingImprovements/subtypeForInvariantWithErrorGenerics.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inference/upperBounds")
            public static class UpperBounds extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInUpperBounds() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inference/upperBounds"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("conflictingSubstitutionsFromUpperBound.kt")
                public void testConflictingSubstitutionsFromUpperBound() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/upperBounds/conflictingSubstitutionsFromUpperBound.kt");
                }
                
                @TestMetadata("doNotInferFromBoundsOnly.kt")
                public void testDoNotInferFromBoundsOnly() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/upperBounds/doNotInferFromBoundsOnly.kt");
                }
                
                @TestMetadata("intersectUpperBounds.kt")
                public void testIntersectUpperBounds() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/upperBounds/intersectUpperBounds.kt");
                }
                
                @TestMetadata("kt2856.kt")
                public void testKt2856() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/upperBounds/kt2856.kt");
                }
                
                @TestMetadata("nonNullUpperBound.kt")
                public void testNonNullUpperBound() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/upperBounds/nonNullUpperBound.kt");
                }
                
                @TestMetadata("useBoundsIfUnknownParameters.kt")
                public void testUseBoundsIfUnknownParameters() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsIfUnknownParameters.kt");
                }
                
                @TestMetadata("useBoundsToInferTypeParamsSimple.kt")
                public void testUseBoundsToInferTypeParamsSimple() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsToInferTypeParamsSimple.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inference/varargs")
            public static class Varargs extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInVarargs() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inference/varargs"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("varargsAndPair.kt")
                public void testVarargsAndPair() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inference/varargs/varargsAndPair.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Inference");
                suite.addTestSuite(Inference.class);
                suite.addTestSuite(Constraints.class);
                suite.addTestSuite(NestedCalls.class);
                suite.addTestSuite(Regressions.class);
                suite.addTestSuite(ReportingImprovements.class);
                suite.addTestSuite(UpperBounds.class);
                suite.addTestSuite(Varargs.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/infos")
        public static class Infos extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInInfos() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/infos"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("Autocasts.kt")
            public void testAutocasts() throws Exception {
                doTest("compiler/testData/diagnostics/tests/infos/Autocasts.kt");
            }
            
            @TestMetadata("PropertiesWithBackingFields.kt")
            public void testPropertiesWithBackingFields() throws Exception {
                doTest("compiler/testData/diagnostics/tests/infos/PropertiesWithBackingFields.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/inline")
        @InnerTestClasses({Inline.BinaryExpressions.class, Inline.NonPublicMember.class, Inline.Regressions.class, Inline.UnaryExpressions.class})
        public static class Inline extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInInline() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inline"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("assignment.kt")
            public void testAssignment() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/assignment.kt");
            }
            
            @TestMetadata("capture.kt")
            public void testCapture() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/capture.kt");
            }
            
            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/constructor.kt");
            }
            
            @TestMetadata("extensionOnFunction.kt")
            public void testExtensionOnFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/extensionOnFunction.kt");
            }
            
            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/functions.kt");
            }
            
            @TestMetadata("invoke.kt")
            public void testInvoke() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/invoke.kt");
            }
            
            @TestMetadata("labeled.kt")
            public void testLabeled() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/labeled.kt");
            }
            
            @TestMetadata("nonVirtualMembersWithInline.kt")
            public void testNonVirtualMembersWithInline() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/nonVirtualMembersWithInline.kt");
            }
            
            @TestMetadata("nothingToInline.kt")
            public void testNothingToInline() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/nothingToInline.kt");
            }
            
            @TestMetadata("nullabilityOperations.kt")
            public void testNullabilityOperations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/nullabilityOperations.kt");
            }
            
            @TestMetadata("nullableFunction.kt")
            public void testNullableFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/nullableFunction.kt");
            }
            
            @TestMetadata("parenthesized.kt")
            public void testParenthesized() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/parenthesized.kt");
            }
            
            @TestMetadata("propagation.kt")
            public void testPropagation() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/propagation.kt");
            }
            
            @TestMetadata("recursion.kt")
            public void testRecursion() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/recursion.kt");
            }
            
            @TestMetadata("returns.kt")
            public void testReturns() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/returns.kt");
            }
            
            @TestMetadata("sam.kt")
            public void testSam() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/sam.kt");
            }
            
            @TestMetadata("typed.kt")
            public void testTyped() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/typed.kt");
            }
            
            @TestMetadata("unsupportedConstruction.kt")
            public void testUnsupportedConstruction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/unsupportedConstruction.kt");
            }
            
            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/vararg.kt");
            }
            
            @TestMetadata("wrongUsage.kt")
            public void testWrongUsage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inline/wrongUsage.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions")
            public static class BinaryExpressions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInBinaryExpressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inline/binaryExpressions"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("andOr.kt")
                public void testAndOr() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/andOr.kt");
                }
                
                @TestMetadata("arrayAccess.kt")
                public void testArrayAccess() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/arrayAccess.kt");
                }
                
                @TestMetadata("assignment.kt")
                public void testAssignment() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/assignment.kt");
                }
                
                @TestMetadata("comparison.kt")
                public void testComparison() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/comparison.kt");
                }
                
                @TestMetadata("componentAccess.kt")
                public void testComponentAccess() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/componentAccess.kt");
                }
                
                @TestMetadata("contains.kt")
                public void testContains() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/contains.kt");
                }
                
                @TestMetadata("mathOperations.kt")
                public void testMathOperations() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/mathOperations.kt");
                }
                
                @TestMetadata("rangeTo.kt")
                public void testRangeTo() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/binaryExpressions/rangeTo.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember")
            public static class NonPublicMember extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNonPublicMember() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inline/nonPublicMember"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("inNonPublicClass.kt")
                public void testInNonPublicClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicClass.kt");
                }
                
                @TestMetadata("inNonPublicInnerClass.kt")
                public void testInNonPublicInnerClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicInnerClass.kt");
                }
                
                @TestMetadata("inPackage.kt")
                public void testInPackage() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inPackage.kt");
                }
                
                @TestMetadata("inPublicClass.kt")
                public void testInPublicClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inPublicClass.kt");
                }
                
                @TestMetadata("localClass.kt")
                public void testLocalClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass.kt");
                }
                
                @TestMetadata("localClass2.kt")
                public void testLocalClass2() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass2.kt");
                }
                
                @TestMetadata("localFun.kt")
                public void testLocalFun() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localFun.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inline/regressions")
            public static class Regressions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInRegressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inline/regressions"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("kt4341.kt")
                public void testKt4341() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/regressions/kt4341.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions")
            public static class UnaryExpressions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInUnaryExpressions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inline/unaryExpressions"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("mathOperation.kt")
                public void testMathOperation() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/mathOperation.kt");
                }
                
                @TestMetadata("notOperation.kt")
                public void testNotOperation() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/notOperation.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Inline");
                suite.addTestSuite(Inline.class);
                suite.addTestSuite(BinaryExpressions.class);
                suite.addTestSuite(NonPublicMember.class);
                suite.addTestSuite(Regressions.class);
                suite.addTestSuite(UnaryExpressions.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/inner")
        @InnerTestClasses({Inner.QualifiedExpression.class})
        public static class Inner extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInInner() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inner"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("classesInClassObjectHeader.kt")
            public void testClassesInClassObjectHeader() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/classesInClassObjectHeader.kt");
            }
            
            @TestMetadata("constructorAccess.kt")
            public void testConstructorAccess() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/constructorAccess.kt");
            }
            
            @TestMetadata("deepInnerClass.kt")
            public void testDeepInnerClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/deepInnerClass.kt");
            }
            
            @TestMetadata("enumEntries.kt")
            public void testEnumEntries() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/enumEntries.kt");
            }
            
            @TestMetadata("extensionFun.kt")
            public void testExtensionFun() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/extensionFun.kt");
            }
            
            @TestMetadata("extensionLambdaInsideNestedClass.kt")
            public void testExtensionLambdaInsideNestedClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/extensionLambdaInsideNestedClass.kt");
            }
            
            @TestMetadata("illegalModifier.kt")
            public void testIllegalModifier() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/illegalModifier.kt");
            }
            
            @TestMetadata("innerClassesInStaticParameters.kt")
            public void testInnerClassesInStaticParameters() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/innerClassesInStaticParameters.kt");
            }
            
            @TestMetadata("innerErrorForClassObjects.kt")
            public void testInnerErrorForClassObjects() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/innerErrorForClassObjects.kt");
            }
            
            @TestMetadata("innerErrorForObjects.kt")
            public void testInnerErrorForObjects() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/innerErrorForObjects.kt");
            }
            
            @TestMetadata("innerThisSuper.kt")
            public void testInnerThisSuper() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/innerThisSuper.kt");
            }
            
            @TestMetadata("localClass.kt")
            public void testLocalClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/localClass.kt");
            }
            
            @TestMetadata("localClassInsideNested.kt")
            public void testLocalClassInsideNested() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/localClassInsideNested.kt");
            }
            
            @TestMetadata("localThisSuper.kt")
            public void testLocalThisSuper() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/localThisSuper.kt");
            }
            
            @TestMetadata("modality.kt")
            public void testModality() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/modality.kt");
            }
            
            @TestMetadata("nestedClassExtendsOuter.kt")
            public void testNestedClassExtendsOuter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuter.kt");
            }
            
            @TestMetadata("nestedClassExtendsOuterGeneric.kt")
            public void testNestedClassExtendsOuterGeneric() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuterGeneric.kt");
            }
            
            @TestMetadata("nestedClassNotAllowed.kt")
            public void testNestedClassNotAllowed() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/nestedClassNotAllowed.kt");
            }
            
            @TestMetadata("nestedVsInnerAccessOuterMember.kt")
            public void testNestedVsInnerAccessOuterMember() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/nestedVsInnerAccessOuterMember.kt");
            }
            
            @TestMetadata("outerGenericParam.kt")
            public void testOuterGenericParam() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/outerGenericParam.kt");
            }
            
            @TestMetadata("outerProtectedMember.kt")
            public void testOuterProtectedMember() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/outerProtectedMember.kt");
            }
            
            @TestMetadata("outerSuperClassMember.kt")
            public void testOuterSuperClassMember() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/outerSuperClassMember.kt");
            }
            
            @TestMetadata("referenceToSelfInLocal.kt")
            public void testReferenceToSelfInLocal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/referenceToSelfInLocal.kt");
            }
            
            @TestMetadata("resolvePackageClassInObjects.kt")
            public void testResolvePackageClassInObjects() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/resolvePackageClassInObjects.kt");
            }
            
            @TestMetadata("selfAnnotationForClassObject.kt")
            public void testSelfAnnotationForClassObject() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/selfAnnotationForClassObject.kt");
            }
            
            @TestMetadata("traits.kt")
            public void testTraits() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/traits.kt");
            }
            
            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/inner/visibility.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression")
            public static class QualifiedExpression extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInQualifiedExpression() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/inner/qualifiedExpression"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("classObjectOfNestedClass.kt")
                public void testClassObjectOfNestedClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/classObjectOfNestedClass.kt");
                }
                
                @TestMetadata("constructNestedClass.kt")
                public void testConstructNestedClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/constructNestedClass.kt");
                }
                
                @TestMetadata("dataLocalVariable.kt")
                public void testDataLocalVariable() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/dataLocalVariable.kt");
                }
                
                @TestMetadata("enumConstant.kt")
                public void testEnumConstant() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/enumConstant.kt");
                }
                
                @TestMetadata("genericNestedClass.kt")
                public void testGenericNestedClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/genericNestedClass.kt");
                }
                
                @TestMetadata("importNestedClass.kt")
                public void testImportNestedClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/importNestedClass.kt");
                }
                
                @TestMetadata("nestedClassInPackage.kt")
                public void testNestedClassInPackage() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedClassInPackage.kt");
                }
                
                @TestMetadata("nestedEnumConstant.kt")
                public void testNestedEnumConstant() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedEnumConstant.kt");
                }
                
                @TestMetadata("nestedObjects.kt")
                public void testNestedObjects() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedObjects.kt");
                }
                
                @TestMetadata("typePosition.kt")
                public void testTypePosition() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/typePosition.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Inner");
                suite.addTestSuite(Inner.class);
                suite.addTestSuite(QualifiedExpression.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/j+k")
        public static class J_k extends AbstractJetDiagnosticsTest {
            @TestMetadata("accessClassObjectFromJava.kt")
            public void testAccessClassObjectFromJava() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/accessClassObjectFromJava.kt");
            }
            
            public void testAllFilesPresentInJ_k() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/j+k"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ambiguousSamAdapters.kt")
            public void testAmbiguousSamAdapters() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/ambiguousSamAdapters.kt");
            }
            
            @TestMetadata("cantDeclareIfSamAdapterIsInherited.kt")
            public void testCantDeclareIfSamAdapterIsInherited() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/cantDeclareIfSamAdapterIsInherited.kt");
            }
            
            @TestMetadata("inheritAbstractSamAdapter.kt")
            public void testInheritAbstractSamAdapter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/inheritAbstractSamAdapter.kt");
            }
            
            @TestMetadata("innerNestedClassFromJava.kt")
            public void testInnerNestedClassFromJava() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/innerNestedClassFromJava.kt");
            }
            
            @TestMetadata("invisiblePackagePrivateInheritedMember.kt")
            public void testInvisiblePackagePrivateInheritedMember() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/invisiblePackagePrivateInheritedMember.kt");
            }
            
            @TestMetadata("KJKInheritance.kt")
            public void testKJKInheritance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/KJKInheritance.kt");
            }
            
            @TestMetadata("KJKInheritanceGeneric.kt")
            public void testKJKInheritanceGeneric() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/KJKInheritanceGeneric.kt");
            }
            
            @TestMetadata("kt1402.kt")
            public void testKt1402() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt1402.kt");
            }
            
            @TestMetadata("kt1431.kt")
            public void testKt1431() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt1431.kt");
            }
            
            @TestMetadata("kt2152.kt")
            public void testKt2152() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt2152.kt");
            }
            
            @TestMetadata("kt2394.kt")
            public void testKt2394() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt2394.kt");
            }
            
            @TestMetadata("kt2606.kt")
            public void testKt2606() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt2606.kt");
            }
            
            @TestMetadata("kt2619.kt")
            public void testKt2619() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt2619.kt");
            }
            
            @TestMetadata("kt2641.kt")
            public void testKt2641() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt2641.kt");
            }
            
            @TestMetadata("kt2890.kt")
            public void testKt2890() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt2890.kt");
            }
            
            @TestMetadata("kt3307.kt")
            public void testKt3307() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/kt3307.kt");
            }
            
            @TestMetadata("mutableIterator.kt")
            public void testMutableIterator() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/mutableIterator.kt");
            }
            
            @TestMetadata("overrideRawType.kt")
            public void testOverrideRawType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/overrideRawType.kt");
            }
            
            @TestMetadata("OverrideVararg.kt")
            public void testOverrideVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/OverrideVararg.kt");
            }
            
            @TestMetadata("packageVisibility.kt")
            public void testPackageVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/packageVisibility.kt");
            }
            
            @TestMetadata("recursiveRawUpperBound.kt")
            public void testRecursiveRawUpperBound() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound.kt");
            }
            
            @TestMetadata("Simple.kt")
            public void testSimple() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/Simple.kt");
            }
            
            @TestMetadata("StaticMembersFromSuperclasses.kt")
            public void testStaticMembersFromSuperclasses() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/StaticMembersFromSuperclasses.kt");
            }
            
            @TestMetadata("SupertypeArgumentsNullability-NotNull-SpecialTypes.kt")
            public void testSupertypeArgumentsNullability_NotNull_SpecialTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-SpecialTypes.kt");
            }
            
            @TestMetadata("SupertypeArgumentsNullability-NotNull-UserTypes.kt")
            public void testSupertypeArgumentsNullability_NotNull_UserTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-UserTypes.kt");
            }
            
            @TestMetadata("SupertypeArgumentsNullability-SpecialTypes.kt")
            public void testSupertypeArgumentsNullability_SpecialTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-SpecialTypes.kt");
            }
            
            @TestMetadata("SupertypeArgumentsNullability-UserTypes.kt")
            public void testSupertypeArgumentsNullability_UserTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt");
            }
            
            @TestMetadata("UnboxingNulls.kt")
            public void testUnboxingNulls() throws Exception {
                doTest("compiler/testData/diagnostics/tests/j+k/UnboxingNulls.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/jdk-annotations")
        @InnerTestClasses({Jdk_annotations.Sql.class})
        public static class Jdk_annotations extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInJdk_annotations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/jdk-annotations"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ArrayListAndMap.kt")
            public void testArrayListAndMap() throws Exception {
                doTest("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListAndMap.kt");
            }
            
            @TestMetadata("ArrayListClone.kt")
            public void testArrayListClone() throws Exception {
                doTest("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListClone.kt");
            }
            
            @TestMetadata("ArrayListToArray.kt")
            public void testArrayListToArray() throws Exception {
                doTest("compiler/testData/diagnostics/tests/jdk-annotations/ArrayListToArray.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/jdk-annotations/sql")
            public static class Sql extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSql() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/jdk-annotations/sql"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("DriverManager.kt")
                public void testDriverManager() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/jdk-annotations/sql/DriverManager.kt");
                }
                
                @TestMetadata("ResultSet.kt")
                public void testResultSet() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/jdk-annotations/sql/ResultSet.kt");
                }
                
                @TestMetadata("Statement.kt")
                public void testStatement() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/jdk-annotations/sql/Statement.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Jdk_annotations");
                suite.addTestSuite(Jdk_annotations.class);
                suite.addTestSuite(Sql.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/library")
        public static class Library extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInLibrary() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/library"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("Collections.kt")
            public void testCollections() throws Exception {
                doTest("compiler/testData/diagnostics/tests/library/Collections.kt");
            }
            
            @TestMetadata("kt828.kt")
            public void testKt828() throws Exception {
                doTest("compiler/testData/diagnostics/tests/library/kt828.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts")
        public static class NullabilityAndAutoCasts extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInNullabilityAndAutoCasts() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AssertNotNull.kt")
            public void testAssertNotNull() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/AssertNotNull.kt");
            }
            
            @TestMetadata("dataFlowInfoAfterExclExcl.kt")
            public void testDataFlowInfoAfterExclExcl() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/dataFlowInfoAfterExclExcl.kt");
            }
            
            @TestMetadata("equalityUnderNotNullCheck.kt")
            public void testEqualityUnderNotNullCheck() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/equalityUnderNotNullCheck.kt");
            }
            
            @TestMetadata("funcLiteralArgsInsideAmbiguity.kt")
            public void testFuncLiteralArgsInsideAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/funcLiteralArgsInsideAmbiguity.kt");
            }
            
            @TestMetadata("funcLiteralArgsInsideUnresolvedFunction.kt")
            public void testFuncLiteralArgsInsideUnresolvedFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/funcLiteralArgsInsideUnresolvedFunction.kt");
            }
            
            @TestMetadata("InfixCallNullability.kt")
            public void testInfixCallNullability() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/InfixCallNullability.kt");
            }
            
            @TestMetadata("kt1270.kt")
            public void testKt1270() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt1270.kt");
            }
            
            @TestMetadata("kt1680.kt")
            public void testKt1680() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt1680.kt");
            }
            
            @TestMetadata("kt1778.kt")
            public void testKt1778() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt1778.kt");
            }
            
            @TestMetadata("kt2109.kt")
            public void testKt2109() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2109.kt");
            }
            
            @TestMetadata("kt2125.kt")
            public void testKt2125() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2125.kt");
            }
            
            @TestMetadata("kt2146.kt")
            public void testKt2146() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2146.kt");
            }
            
            @TestMetadata("kt2164.kt")
            public void testKt2164() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2164.kt");
            }
            
            @TestMetadata("kt2176.kt")
            public void testKt2176() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2176.kt");
            }
            
            @TestMetadata("kt2195.kt")
            public void testKt2195() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2195.kt");
            }
            
            @TestMetadata("kt2212.kt")
            public void testKt2212() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2212.kt");
            }
            
            @TestMetadata("kt2216.kt")
            public void testKt2216() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2216.kt");
            }
            
            @TestMetadata("kt2223.kt")
            public void testKt2223() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2223.kt");
            }
            
            @TestMetadata("kt2234.kt")
            public void testKt2234() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2234.kt");
            }
            
            @TestMetadata("kt2336.kt")
            public void testKt2336() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt2336.kt");
            }
            
            @TestMetadata("kt244.kt")
            public void testKt244() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt244.kt");
            }
            
            @TestMetadata("kt362.kt")
            public void testKt362() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/kt362.kt");
            }
            
            @TestMetadata("noUnnecessaryNotNullAssertionOnErrorType.kt")
            public void testNoUnnecessaryNotNullAssertionOnErrorType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/noUnnecessaryNotNullAssertionOnErrorType.kt");
            }
            
            @TestMetadata("NullableNothingIsExactlyNull.kt")
            public void testNullableNothingIsExactlyNull() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/NullableNothingIsExactlyNull.kt");
            }
            
            @TestMetadata("PreferExtensionsOnNullableReceiver.kt")
            public void testPreferExtensionsOnNullableReceiver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/PreferExtensionsOnNullableReceiver.kt");
            }
            
            @TestMetadata("QualifiedExpressionNullability.kt")
            public void testQualifiedExpressionNullability() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/QualifiedExpressionNullability.kt");
            }
            
            @TestMetadata("ReceiverNullability.kt")
            public void testReceiverNullability() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/ReceiverNullability.kt");
            }
            
            @TestMetadata("SenselessNullInWhen.kt")
            public void testSenselessNullInWhen() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/SenselessNullInWhen.kt");
            }
            
            @TestMetadata("senslessComparisonWithNullOnTypeParameters.kt")
            public void testSenslessComparisonWithNullOnTypeParameters() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/senslessComparisonWithNullOnTypeParameters.kt");
            }
            
            @TestMetadata("smartCastedReceiverWithGenerics.kt")
            public void testSmartCastedReceiverWithGenerics() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/smartCastedReceiverWithGenerics.kt");
            }
            
            @TestMetadata("smartCastsAndBooleanExpressions.kt")
            public void testSmartCastsAndBooleanExpressions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullabilityAndAutoCasts/smartCastsAndBooleanExpressions.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/nullableTypes")
        public static class NullableTypes extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInNullableTypes() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/nullableTypes"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("baseWithNullableUpperBound.kt")
            public void testBaseWithNullableUpperBound() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullableTypes/baseWithNullableUpperBound.kt");
            }
            
            @TestMetadata("nullAssertOnTypeWithNullableUpperBound.kt")
            public void testNullAssertOnTypeWithNullableUpperBound() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullableTypes/nullAssertOnTypeWithNullableUpperBound.kt");
            }
            
            @TestMetadata("nullableArgumentForIn.kt")
            public void testNullableArgumentForIn() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentForIn.kt");
            }
            
            @TestMetadata("redundantNullable.kt")
            public void testRedundantNullable() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullableTypes/redundantNullable.kt");
            }
            
            @TestMetadata("redundantNullableInSupertype.kt")
            public void testRedundantNullableInSupertype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullableTypes/redundantNullableInSupertype.kt");
            }
            
            @TestMetadata("safeCallOnTypeWithNullableUpperBound.kt")
            public void testSafeCallOnTypeWithNullableUpperBound() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullableTypes/safeCallOnTypeWithNullableUpperBound.kt");
            }
            
            @TestMetadata("uselessElvis.kt")
            public void testUselessElvis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/nullableTypes/uselessElvis.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/numbers")
        public static class Numbers extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInNumbers() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/numbers"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("characterIsNotANumber.kt")
            public void testCharacterIsNotANumber() throws Exception {
                doTest("compiler/testData/diagnostics/tests/numbers/characterIsNotANumber.kt");
            }
            
            @TestMetadata("doublesInSimpleConstraints.kt")
            public void testDoublesInSimpleConstraints() throws Exception {
                doTest("compiler/testData/diagnostics/tests/numbers/doublesInSimpleConstraints.kt");
            }
            
            @TestMetadata("intValuesOutOfRange.kt")
            public void testIntValuesOutOfRange() throws Exception {
                doTest("compiler/testData/diagnostics/tests/numbers/intValuesOutOfRange.kt");
            }
            
            @TestMetadata("numbersInSimpleConstraints.kt")
            public void testNumbersInSimpleConstraints() throws Exception {
                doTest("compiler/testData/diagnostics/tests/numbers/numbersInSimpleConstraints.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/objects")
        public static class Objects extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInObjects() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/objects"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("kt2240.kt")
            public void testKt2240() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/kt2240.kt");
            }
            
            @TestMetadata("objectLiteralExpressionTypeMismatch.kt")
            public void testObjectLiteralExpressionTypeMismatch() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/objectLiteralExpressionTypeMismatch.kt");
            }
            
            @TestMetadata("Objects.kt")
            public void testObjects() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/Objects.kt");
            }
            
            @TestMetadata("ObjectsInheritance.kt")
            public void testObjectsInheritance() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/ObjectsInheritance.kt");
            }
            
            @TestMetadata("ObjectsLocal.kt")
            public void testObjectsLocal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/ObjectsLocal.kt");
            }
            
            @TestMetadata("ObjectsNested.kt")
            public void testObjectsNested() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/ObjectsNested.kt");
            }
            
            @TestMetadata("upperBoundViolated.kt")
            public void testUpperBoundViolated() throws Exception {
                doTest("compiler/testData/diagnostics/tests/objects/upperBoundViolated.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading")
        public static class OperatorsOverloading extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInOperatorsOverloading() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/operatorsOverloading"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AssignOperatorAmbiguity.kt")
            public void testAssignOperatorAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorAmbiguity.kt");
            }
            
            @TestMetadata("AssignmentOperations.kt")
            public void testAssignmentOperations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignmentOperations.kt");
            }
            
            @TestMetadata("IteratorAmbiguity.kt")
            public void testIteratorAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/operatorsOverloading/IteratorAmbiguity.kt");
            }
            
            @TestMetadata("kt1028.kt")
            public void testKt1028() throws Exception {
                doTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt1028.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/overload")
        public static class Overload extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInOverload() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/overload"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ConflictingOverloadsFunsDifferentReturnInClass.kt")
            public void testConflictingOverloadsFunsDifferentReturnInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInClass.kt");
            }
            
            @TestMetadata("ConflictingOverloadsFunsDifferentReturnInPackage.kt")
            public void testConflictingOverloadsFunsDifferentReturnInPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInPackage.kt");
            }
            
            @TestMetadata("ConflictingOverloadsIdenticalExtFunsInPackage.kt")
            public void testConflictingOverloadsIdenticalExtFunsInPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalExtFunsInPackage.kt");
            }
            
            @TestMetadata("ConflictingOverloadsIdenticalFunsInClass.kt")
            public void testConflictingOverloadsIdenticalFunsInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsInClass.kt");
            }
            
            @TestMetadata("ConflictingOverloadsIdenticalFunsTPInClass.kt")
            public void testConflictingOverloadsIdenticalFunsTPInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsTPInClass.kt");
            }
            
            @TestMetadata("ConflictingOverloadsIdenticalValsInClass.kt")
            public void testConflictingOverloadsIdenticalValsInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalValsInClass.kt");
            }
            
            @TestMetadata("ConflictingOverloadsValsDifferentTypeInClass.kt")
            public void testConflictingOverloadsValsDifferentTypeInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConflictingOverloadsValsDifferentTypeInClass.kt");
            }
            
            @TestMetadata("ConstructorVsFunOverload.kt")
            public void testConstructorVsFunOverload() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ConstructorVsFunOverload.kt");
            }
            
            @TestMetadata("ExtFunDifferentReceiver.kt")
            public void testExtFunDifferentReceiver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/ExtFunDifferentReceiver.kt");
            }
            
            @TestMetadata("FunNoConflictInDifferentPackages.kt")
            public void testFunNoConflictInDifferentPackages() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/FunNoConflictInDifferentPackages.kt");
            }
            
            @TestMetadata("kt1998.kt")
            public void testKt1998() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/kt1998.kt");
            }
            
            @TestMetadata("OverloadFunRegularAndExt.kt")
            public void testOverloadFunRegularAndExt() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/OverloadFunRegularAndExt.kt");
            }
            
            @TestMetadata("OverloadVarAndFunInClass.kt")
            public void testOverloadVarAndFunInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/OverloadVarAndFunInClass.kt");
            }
            
            @TestMetadata("SyntheticAndNotSynthetic.kt")
            public void testSyntheticAndNotSynthetic() throws Exception {
                doTest("compiler/testData/diagnostics/tests/overload/SyntheticAndNotSynthetic.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/override")
        public static class Override extends AbstractJetDiagnosticsTest {
            @TestMetadata("AbstractFunImplemented.kt")
            public void testAbstractFunImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractFunImplemented.kt");
            }
            
            @TestMetadata("AbstractFunNotImplemented.kt")
            public void testAbstractFunNotImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractFunNotImplemented.kt");
            }
            
            @TestMetadata("AbstractValImplemented.kt")
            public void testAbstractValImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractValImplemented.kt");
            }
            
            @TestMetadata("AbstractValNotImplemented.kt")
            public void testAbstractValNotImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractValNotImplemented.kt");
            }
            
            @TestMetadata("AbstractVarImplemented.kt")
            public void testAbstractVarImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractVarImplemented.kt");
            }
            
            @TestMetadata("AbstractVarNotImplemented.kt")
            public void testAbstractVarNotImplemented() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AbstractVarNotImplemented.kt");
            }
            
            public void testAllFilesPresentInOverride() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/override"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AllPrivateFromSuperTypes.kt")
            public void testAllPrivateFromSuperTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AllPrivateFromSuperTypes.kt");
            }
            
            @TestMetadata("AllProtectedFromSupertypes.kt")
            public void testAllProtectedFromSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/AllProtectedFromSupertypes.kt");
            }
            
            @TestMetadata("ComplexValRedeclaration.kt")
            public void testComplexValRedeclaration() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ComplexValRedeclaration.kt");
            }
            
            @TestMetadata("ConflictingFunctionSignatureFromSuperclass.kt")
            public void testConflictingFunctionSignatureFromSuperclass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ConflictingFunctionSignatureFromSuperclass.kt");
            }
            
            @TestMetadata("ConflictingParameterNames.kt")
            public void testConflictingParameterNames() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ConflictingParameterNames.kt");
            }
            
            @TestMetadata("ConflictingParameterNames-MultipleSupertypes.kt")
            public void testConflictingParameterNames_MultipleSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ConflictingParameterNames-MultipleSupertypes.kt");
            }
            
            @TestMetadata("ConflictingPropertySignatureFromSuperclass.kt")
            public void testConflictingPropertySignatureFromSuperclass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ConflictingPropertySignatureFromSuperclass.kt");
            }
            
            @TestMetadata("DefaultParameterValueInOverride.kt")
            public void testDefaultParameterValueInOverride() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DefaultParameterValueInOverride.kt");
            }
            
            @TestMetadata("DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt")
            public void testDefaultParameterValues_NoErrorsWhenInheritingFromOneTypeTwice() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt");
            }
            
            @TestMetadata("Delegation.kt")
            public void testDelegation() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/Delegation.kt");
            }
            
            @TestMetadata("DelegationFun.kt")
            public void testDelegationFun() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DelegationFun.kt");
            }
            
            @TestMetadata("DelegationVal.kt")
            public void testDelegationVal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DelegationVal.kt");
            }
            
            @TestMetadata("DelegationVar.kt")
            public void testDelegationVar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DelegationVar.kt");
            }
            
            @TestMetadata("DuplicateMethod.kt")
            public void testDuplicateMethod() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/DuplicateMethod.kt");
            }
            
            @TestMetadata("EqualityOfIntersectionTypes.kt")
            public void testEqualityOfIntersectionTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/EqualityOfIntersectionTypes.kt");
            }
            
            @TestMetadata("ExtendFunctionClass.kt")
            public void testExtendFunctionClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ExtendFunctionClass.kt");
            }
            
            @TestMetadata("FakeOverrideAbstractAndNonAbstractFun.kt")
            public void testFakeOverrideAbstractAndNonAbstractFun() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/FakeOverrideAbstractAndNonAbstractFun.kt");
            }
            
            @TestMetadata("Generics.kt")
            public void testGenerics() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/Generics.kt");
            }
            
            @TestMetadata("InvisiblePotentialOverride.kt")
            public void testInvisiblePotentialOverride() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/InvisiblePotentialOverride.kt");
            }
            
            @TestMetadata("kt1862.kt")
            public void testKt1862() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/kt1862.kt");
            }
            
            @TestMetadata("kt2052.kt")
            public void testKt2052() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/kt2052.kt");
            }
            
            @TestMetadata("kt880.kt")
            public void testKt880() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/kt880.kt");
            }
            
            @TestMetadata("MultipleDefaultParametersInSupertypes.kt")
            public void testMultipleDefaultParametersInSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypes.kt");
            }
            
            @TestMetadata("MultipleDefaultParametersInSupertypesNoOverride.kt")
            public void testMultipleDefaultParametersInSupertypesNoOverride() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypesNoOverride.kt");
            }
            
            @TestMetadata("MultipleDefaultsInSupertypesNoExplicitOverride.kt")
            public void testMultipleDefaultsInSupertypesNoExplicitOverride() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/MultipleDefaultsInSupertypesNoExplicitOverride.kt");
            }
            
            @TestMetadata("NonGenerics.kt")
            public void testNonGenerics() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/NonGenerics.kt");
            }
            
            @TestMetadata("OverridingFinalMember.kt")
            public void testOverridingFinalMember() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/OverridingFinalMember.kt");
            }
            
            @TestMetadata("ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt")
            public void testParameterDefaultValues_DefaultValueFromOnlyOneSupertype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt");
            }
            
            @TestMetadata("ParentInheritsManyImplementations.kt")
            public void testParentInheritsManyImplementations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ParentInheritsManyImplementations.kt");
            }
            
            @TestMetadata("ProtectedAndPrivateFromSupertypes.kt")
            public void testProtectedAndPrivateFromSupertypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ProtectedAndPrivateFromSupertypes.kt");
            }
            
            @TestMetadata("SuspiciousCase1.kt")
            public void testSuspiciousCase1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/SuspiciousCase1.kt");
            }
            
            @TestMetadata("ToAbstractMembersFromSuper-kt1996.kt")
            public void testToAbstractMembersFromSuper_kt1996() throws Exception {
                doTest("compiler/testData/diagnostics/tests/override/ToAbstractMembersFromSuper-kt1996.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/recovery")
        public static class Recovery extends AbstractJetDiagnosticsTest {
            @TestMetadata("absentLeftHandSide.kt")
            public void testAbsentLeftHandSide() throws Exception {
                doTest("compiler/testData/diagnostics/tests/recovery/absentLeftHandSide.kt");
            }
            
            public void testAllFilesPresentInRecovery() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/recovery"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/redeclarations")
        public static class Redeclarations extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInRedeclarations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/redeclarations"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ClassRedeclarationInDifferentFiles.kt")
            public void testClassRedeclarationInDifferentFiles() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/ClassRedeclarationInDifferentFiles.kt");
            }
            
            @TestMetadata("ConflictingExtensionProperties.kt")
            public void testConflictingExtensionProperties() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/ConflictingExtensionProperties.kt");
            }
            
            @TestMetadata("kt2247.kt")
            public void testKt2247() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/kt2247.kt");
            }
            
            @TestMetadata("kt2418.kt")
            public void testKt2418() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/kt2418.kt");
            }
            
            @TestMetadata("kt2438.kt")
            public void testKt2438() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/kt2438.kt");
            }
            
            @TestMetadata("kt470.kt")
            public void testKt470() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/kt470.kt");
            }
            
            @TestMetadata("MultiFilePackageRedeclaration.kt")
            public void testMultiFilePackageRedeclaration() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/MultiFilePackageRedeclaration.kt");
            }
            
            @TestMetadata("PropertyAndFunInClass.kt")
            public void testPropertyAndFunInClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/PropertyAndFunInClass.kt");
            }
            
            @TestMetadata("PropertyAndInnerClass.kt")
            public void testPropertyAndInnerClass() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/PropertyAndInnerClass.kt");
            }
            
            @TestMetadata("RedeclarationInMultiFile.kt")
            public void testRedeclarationInMultiFile() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationInMultiFile.kt");
            }
            
            @TestMetadata("Redeclarations.kt")
            public void testRedeclarations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/Redeclarations.kt");
            }
            
            @TestMetadata("RedeclarationsInObjects.kt")
            public void testRedeclarationsInObjects() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/RedeclarationsInObjects.kt");
            }
            
            @TestMetadata("RedeclaredTypeParameters.kt")
            public void testRedeclaredTypeParameters() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/RedeclaredTypeParameters.kt");
            }
            
            @TestMetadata("SingletonAndFunctionSameName.kt")
            public void testSingletonAndFunctionSameName() throws Exception {
                doTest("compiler/testData/diagnostics/tests/redeclarations/SingletonAndFunctionSameName.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/regressions")
        public static class Regressions extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInRegressions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/regressions"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AmbiguityOnLazyTypeComputation.kt")
            public void testAmbiguityOnLazyTypeComputation() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/AmbiguityOnLazyTypeComputation.kt");
            }
            
            @TestMetadata("AssignmentsUnderOperators.kt")
            public void testAssignmentsUnderOperators() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/AssignmentsUnderOperators.kt");
            }
            
            @TestMetadata("CoercionToUnit.kt")
            public void testCoercionToUnit() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/CoercionToUnit.kt");
            }
            
            @TestMetadata("DoubleDefine.kt")
            public void testDoubleDefine() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/DoubleDefine.kt");
            }
            
            @TestMetadata("ea40964.kt")
            public void testEa40964() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/ea40964.kt");
            }
            
            @TestMetadata("ea43298.kt")
            public void testEa43298() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/ea43298.kt");
            }
            
            @TestMetadata("ErrorsOnIbjectExpressionsAsParameters.kt")
            public void testErrorsOnIbjectExpressionsAsParameters() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/ErrorsOnIbjectExpressionsAsParameters.kt");
            }
            
            @TestMetadata("Jet11.kt")
            public void testJet11() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet11.kt");
            }
            
            @TestMetadata("Jet121.kt")
            public void testJet121() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet121.kt");
            }
            
            @TestMetadata("Jet124.kt")
            public void testJet124() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet124.kt");
            }
            
            @TestMetadata("Jet169.kt")
            public void testJet169() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet169.kt");
            }
            
            @TestMetadata("Jet17.kt")
            public void testJet17() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet17.kt");
            }
            
            @TestMetadata("Jet183.kt")
            public void testJet183() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet183.kt");
            }
            
            @TestMetadata("Jet183-1.kt")
            public void testJet183_1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet183-1.kt");
            }
            
            @TestMetadata("Jet53.kt")
            public void testJet53() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet53.kt");
            }
            
            @TestMetadata("Jet67.kt")
            public void testJet67() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet67.kt");
            }
            
            @TestMetadata("Jet68.kt")
            public void testJet68() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet68.kt");
            }
            
            @TestMetadata("Jet69.kt")
            public void testJet69() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet69.kt");
            }
            
            @TestMetadata("Jet72.kt")
            public void testJet72() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet72.kt");
            }
            
            @TestMetadata("Jet81.kt")
            public void testJet81() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/Jet81.kt");
            }
            
            @TestMetadata("kt127.kt")
            public void testKt127() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt127.kt");
            }
            
            @TestMetadata("kt128.kt")
            public void testKt128() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt128.kt");
            }
            
            @TestMetadata("kt1489_1728.kt")
            public void testKt1489_1728() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1489_1728.kt");
            }
            
            @TestMetadata("kt1550.kt")
            public void testKt1550() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1550.kt");
            }
            
            @TestMetadata("kt1639-JFrame.kt")
            public void testKt1639_JFrame() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1639-JFrame.kt");
            }
            
            @TestMetadata("kt1647.kt")
            public void testKt1647() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1647.kt");
            }
            
            @TestMetadata("kt1736.kt")
            public void testKt1736() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt1736.kt");
            }
            
            @TestMetadata("kt174.kt")
            public void testKt174() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt174.kt");
            }
            
            @TestMetadata("kt201.kt")
            public void testKt201() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt201.kt");
            }
            
            @TestMetadata("kt235.kt")
            public void testKt235() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt235.kt");
            }
            
            @TestMetadata("kt2376.kt")
            public void testKt2376() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt2376.kt");
            }
            
            @TestMetadata("kt251.kt")
            public void testKt251() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt251.kt");
            }
            
            @TestMetadata("kt258.kt")
            public void testKt258() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt258.kt");
            }
            
            @TestMetadata("kt26.kt")
            public void testKt26() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt26.kt");
            }
            
            @TestMetadata("kt26-1.kt")
            public void testKt26_1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt26-1.kt");
            }
            
            @TestMetadata("kt282.kt")
            public void testKt282() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt282.kt");
            }
            
            @TestMetadata("kt287.kt")
            public void testKt287() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt287.kt");
            }
            
            @TestMetadata("kt2956.kt")
            public void testKt2956() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt2956.kt");
            }
            
            @TestMetadata("kt302.kt")
            public void testKt302() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt302.kt");
            }
            
            @TestMetadata("kt303.kt")
            public void testKt303() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt303.kt");
            }
            
            @TestMetadata("kt306.kt")
            public void testKt306() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt306.kt");
            }
            
            @TestMetadata("kt307.kt")
            public void testKt307() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt307.kt");
            }
            
            @TestMetadata("kt312.kt")
            public void testKt312() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt312.kt");
            }
            
            @TestMetadata("kt313.kt")
            public void testKt313() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt313.kt");
            }
            
            @TestMetadata("kt316.kt")
            public void testKt316() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt316.kt");
            }
            
            @TestMetadata("kt328.kt")
            public void testKt328() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt328.kt");
            }
            
            @TestMetadata("kt334.kt")
            public void testKt334() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt334.kt");
            }
            
            @TestMetadata("kt335.336.kt")
            public void testKt335_336() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt335.336.kt");
            }
            
            @TestMetadata("kt337.kt")
            public void testKt337() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt337.kt");
            }
            
            @TestMetadata("kt352.kt")
            public void testKt352() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt352.kt");
            }
            
            @TestMetadata("kt353.kt")
            public void testKt353() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt353.kt");
            }
            
            @TestMetadata("kt385.109.441.kt")
            public void testKt385_109_441() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt385.109.441.kt");
            }
            
            @TestMetadata("kt394.kt")
            public void testKt394() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt394.kt");
            }
            
            @TestMetadata("kt398.kt")
            public void testKt398() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt398.kt");
            }
            
            @TestMetadata("kt399.kt")
            public void testKt399() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt399.kt");
            }
            
            @TestMetadata("kt402.kt")
            public void testKt402() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt402.kt");
            }
            
            @TestMetadata("kt41.kt")
            public void testKt41() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt41.kt");
            }
            
            @TestMetadata("kt411.kt")
            public void testKt411() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt411.kt");
            }
            
            @TestMetadata("kt439.kt")
            public void testKt439() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt439.kt");
            }
            
            @TestMetadata("kt442.kt")
            public void testKt442() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt442.kt");
            }
            
            @TestMetadata("kt443.kt")
            public void testKt443() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt443.kt");
            }
            
            @TestMetadata("kt455.kt")
            public void testKt455() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt455.kt");
            }
            
            @TestMetadata("kt456.kt")
            public void testKt456() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt456.kt");
            }
            
            @TestMetadata("kt459.kt")
            public void testKt459() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt459.kt");
            }
            
            @TestMetadata("kt469.kt")
            public void testKt469() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt469.kt");
            }
            
            @TestMetadata("kt498.kt")
            public void testKt498() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt498.kt");
            }
            
            @TestMetadata("kt524.kt")
            public void testKt524() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt524.kt");
            }
            
            @TestMetadata("kt526UnresolvedReferenceInnerStatic.kt")
            public void testKt526UnresolvedReferenceInnerStatic() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt526UnresolvedReferenceInnerStatic.kt");
            }
            
            @TestMetadata("kt549.kt")
            public void testKt549() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt549.kt");
            }
            
            @TestMetadata("kt557.kt")
            public void testKt557() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt557.kt");
            }
            
            @TestMetadata("kt571.kt")
            public void testKt571() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt571.kt");
            }
            
            @TestMetadata("kt575.kt")
            public void testKt575() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt575.kt");
            }
            
            @TestMetadata("kt58.kt")
            public void testKt58() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt58.kt");
            }
            
            @TestMetadata("kt580.kt")
            public void testKt580() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt580.kt");
            }
            
            @TestMetadata("kt588.kt")
            public void testKt588() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt588.kt");
            }
            
            @TestMetadata("kt597.kt")
            public void testKt597() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt597.kt");
            }
            
            @TestMetadata("kt600.kt")
            public void testKt600() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt600.kt");
            }
            
            @TestMetadata("kt604.kt")
            public void testKt604() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt604.kt");
            }
            
            @TestMetadata("kt618.kt")
            public void testKt618() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt618.kt");
            }
            
            @TestMetadata("kt629.kt")
            public void testKt629() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt629.kt");
            }
            
            @TestMetadata("kt630.kt")
            public void testKt630() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt630.kt");
            }
            
            @TestMetadata("kt688.kt")
            public void testKt688() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt688.kt");
            }
            
            @TestMetadata("kt691.kt")
            public void testKt691() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt691.kt");
            }
            
            @TestMetadata("kt701.kt")
            public void testKt701() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt701.kt");
            }
            
            @TestMetadata("kt716.kt")
            public void testKt716() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt716.kt");
            }
            
            @TestMetadata("kt743.kt")
            public void testKt743() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt743.kt");
            }
            
            @TestMetadata("kt750.kt")
            public void testKt750() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt750.kt");
            }
            
            @TestMetadata("kt762.kt")
            public void testKt762() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt762.kt");
            }
            
            @TestMetadata("kt847.kt")
            public void testKt847() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt847.kt");
            }
            
            @TestMetadata("kt860.kt")
            public void testKt860() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/kt860.kt");
            }
            
            @TestMetadata("OrphanStarProjection.kt")
            public void testOrphanStarProjection() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/OrphanStarProjection.kt");
            }
            
            @TestMetadata("OutProjections.kt")
            public void testOutProjections() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/OutProjections.kt");
            }
            
            @TestMetadata("OverrideResolution.kt")
            public void testOverrideResolution() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/OverrideResolution.kt");
            }
            
            @TestMetadata("resolveSubclassOfList.kt")
            public void testResolveSubclassOfList() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/resolveSubclassOfList.kt");
            }
            
            @TestMetadata("SpecififcityByReceiver.kt")
            public void testSpecififcityByReceiver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/SpecififcityByReceiver.kt");
            }
            
            @TestMetadata("TypeMismatchOnUnaryOperations.kt")
            public void testTypeMismatchOnUnaryOperations() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/TypeMismatchOnUnaryOperations.kt");
            }
            
            @TestMetadata("TypeParameterAsASupertype.kt")
            public void testTypeParameterAsASupertype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/TypeParameterAsASupertype.kt");
            }
            
            @TestMetadata("UnavaliableQualifiedThis.kt")
            public void testUnavaliableQualifiedThis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/UnavaliableQualifiedThis.kt");
            }
            
            @TestMetadata("WrongTraceInCallResolver.kt")
            public void testWrongTraceInCallResolver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/regressions/WrongTraceInCallResolver.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/resolve")
        @InnerTestClasses({Resolve.Invoke.class, Resolve.NestedCalls.class, Resolve.SpecialConstructions.class})
        public static class Resolve extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInResolve() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/resolve"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("resolveWithFunctionLiteralWithId.kt")
            public void testResolveWithFunctionLiteralWithId() throws Exception {
                doTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralWithId.kt");
            }
            
            @TestMetadata("resolveWithFunctionLiterals.kt")
            public void testResolveWithFunctionLiterals() throws Exception {
                doTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiterals.kt");
            }
            
            @TestMetadata("resolveWithFunctionLiteralsOverload.kt")
            public void testResolveWithFunctionLiteralsOverload() throws Exception {
                doTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralsOverload.kt");
            }
            
            @TestMetadata("resolveWithGenerics.kt")
            public void testResolveWithGenerics() throws Exception {
                doTest("compiler/testData/diagnostics/tests/resolve/resolveWithGenerics.kt");
            }
            
            @TestMetadata("resolveWithRedeclarationError.kt")
            public void testResolveWithRedeclarationError() throws Exception {
                doTest("compiler/testData/diagnostics/tests/resolve/resolveWithRedeclarationError.kt");
            }
            
            @TestMetadata("resolveWithSpecifiedFunctionLiteralWithId.kt")
            public void testResolveWithSpecifiedFunctionLiteralWithId() throws Exception {
                doTest("compiler/testData/diagnostics/tests/resolve/resolveWithSpecifiedFunctionLiteralWithId.kt");
            }
            
            @TestMetadata("resolveWithoutGenerics.kt")
            public void testResolveWithoutGenerics() throws Exception {
                doTest("compiler/testData/diagnostics/tests/resolve/resolveWithoutGenerics.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke")
            public static class Invoke extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInvoke() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/resolve/invoke"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("invokeAsExtension.kt")
                public void testInvokeAsExtension() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsExtension.kt");
                }
                
                @TestMetadata("invokeAsMember.kt")
                public void testInvokeAsMember() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMember.kt");
                }
                
                @TestMetadata("invokeAsMemberExtension.kt")
                public void testInvokeAsMemberExtension() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtension.kt");
                }
                
                @TestMetadata("invokeAsMemberExtensionToExplicitReceiver.kt")
                public void testInvokeAsMemberExtensionToExplicitReceiver() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtensionToExplicitReceiver.kt");
                }
                
                @TestMetadata("KT-4372.kt")
                public void testKT_4372() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/KT-4372.kt");
                }
                
                @TestMetadata("kt3772.kt")
                public void testKt3772() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/kt3772.kt");
                }
                
                @TestMetadata("kt3833-invokeInsideNestedClass.kt")
                public void testKt3833_invokeInsideNestedClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/kt3833-invokeInsideNestedClass.kt");
                }
                
                @TestMetadata("kt4204-completeNestedCallsForInvoke.kt")
                public void testKt4204_completeNestedCallsForInvoke() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/kt4204-completeNestedCallsForInvoke.kt");
                }
                
                @TestMetadata("valNamedInvoke.kt")
                public void testValNamedInvoke() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/invoke/valNamedInvoke.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls")
            public static class NestedCalls extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInNestedCalls() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/resolve/nestedCalls"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("analyzeArgsInFreeExpressionPosition.kt")
                public void testAnalyzeArgsInFreeExpressionPosition() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeArgsInFreeExpressionPosition.kt");
                }
                
                @TestMetadata("analyzeUnmappedArguments.kt")
                public void testAnalyzeUnmappedArguments() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeUnmappedArguments.kt");
                }
                
                @TestMetadata("completeUnmappedArguments.kt")
                public void testCompleteUnmappedArguments() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/completeUnmappedArguments.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions")
            public static class SpecialConstructions extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInSpecialConstructions() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/resolve/specialConstructions"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("elvisAsCall.kt")
                public void testElvisAsCall() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/elvisAsCall.kt");
                }
                
                @TestMetadata("exclExclAsCall.kt")
                public void testExclExclAsCall() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/exclExclAsCall.kt");
                }
                
                @TestMetadata("reportTypeMismatchDeeplyOnBranches.kt")
                public void testReportTypeMismatchDeeplyOnBranches() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/reportTypeMismatchDeeplyOnBranches.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Resolve");
                suite.addTestSuite(Resolve.class);
                suite.addTestSuite(Invoke.class);
                suite.addTestSuite(NestedCalls.class);
                suite.addTestSuite(SpecialConstructions.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/scopes")
        public static class Scopes extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInScopes() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/scopes"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AmbiguityBetweenRootAndPackage.kt")
            public void testAmbiguityBetweenRootAndPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/AmbiguityBetweenRootAndPackage.kt");
            }
            
            @TestMetadata("AmbiguousNonExtensions.kt")
            public void testAmbiguousNonExtensions() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/AmbiguousNonExtensions.kt");
            }
            
            @TestMetadata("DontImportRootScope.kt")
            public void testDontImportRootScope() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/DontImportRootScope.kt");
            }
            
            @TestMetadata("ImportFromCurrentWithDifferentName.kt")
            public void testImportFromCurrentWithDifferentName() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportFromCurrentWithDifferentName.kt");
            }
            
            @TestMetadata("ImportObjectAndUseAsSupertype.kt")
            public void testImportObjectAndUseAsSupertype() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportObjectAndUseAsSupertype.kt");
            }
            
            @TestMetadata("ImportObjectHidesCurrentPackage.kt")
            public void testImportObjectHidesCurrentPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportObjectHidesCurrentPackage.kt");
            }
            
            @TestMetadata("ImportTwoTimes.kt")
            public void testImportTwoTimes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportTwoTimes.kt");
            }
            
            @TestMetadata("ImportTwoTimesStar.kt")
            public void testImportTwoTimesStar() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportTwoTimesStar.kt");
            }
            
            @TestMetadata("Imports.kt")
            public void testImports() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/Imports.kt");
            }
            
            @TestMetadata("ImportsConflicting.kt")
            public void testImportsConflicting() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportsConflicting.kt");
            }
            
            @TestMetadata("ImportsUselessSimpleImport.kt")
            public void testImportsUselessSimpleImport() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportsUselessSimpleImport.kt");
            }
            
            @TestMetadata("ImportsUselessSimpleImport2.kt")
            public void testImportsUselessSimpleImport2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/ImportsUselessSimpleImport2.kt");
            }
            
            @TestMetadata("Imports-hidden.kt")
            public void testImports_hidden() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/Imports-hidden.kt");
            }
            
            @TestMetadata("initializerScopeOfExtensionProperty.kt")
            public void testInitializerScopeOfExtensionProperty() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/initializerScopeOfExtensionProperty.kt");
            }
            
            @TestMetadata("kt1078.kt")
            public void testKt1078() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1078.kt");
            }
            
            @TestMetadata("kt1080.kt")
            public void testKt1080() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1080.kt");
            }
            
            @TestMetadata("kt1244.kt")
            public void testKt1244() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1244.kt");
            }
            
            @TestMetadata("kt1248.kt")
            public void testKt1248() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1248.kt");
            }
            
            @TestMetadata("kt151.kt")
            public void testKt151() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt151.kt");
            }
            
            @TestMetadata("kt1579.kt")
            public void testKt1579() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1579.kt");
            }
            
            @TestMetadata("kt1579_map_entry.kt")
            public void testKt1579_map_entry() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1579_map_entry.kt");
            }
            
            @TestMetadata("kt1580.kt")
            public void testKt1580() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1580.kt");
            }
            
            @TestMetadata("kt1642.kt")
            public void testKt1642() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1642.kt");
            }
            
            @TestMetadata("kt1738.kt")
            public void testKt1738() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1738.kt");
            }
            
            @TestMetadata("kt1805.kt")
            public void testKt1805() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1805.kt");
            }
            
            @TestMetadata("kt1806.kt")
            public void testKt1806() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1806.kt");
            }
            
            @TestMetadata("kt1822.kt")
            public void testKt1822() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1822.kt");
            }
            
            @TestMetadata("kt1942.kt")
            public void testKt1942() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt1942.kt");
            }
            
            @TestMetadata("kt2262.kt")
            public void testKt2262() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt2262.kt");
            }
            
            @TestMetadata("kt250.617.10.kt")
            public void testKt250_617_10() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt250.617.10.kt");
            }
            
            @TestMetadata("kt323.kt")
            public void testKt323() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt323.kt");
            }
            
            @TestMetadata("kt37.kt")
            public void testKt37() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt37.kt");
            }
            
            @TestMetadata("kt421Scopes.kt")
            public void testKt421Scopes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt421Scopes.kt");
            }
            
            @TestMetadata("kt587.kt")
            public void testKt587() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt587.kt");
            }
            
            @TestMetadata("kt900.kt")
            public void testKt900() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt900.kt");
            }
            
            @TestMetadata("kt900-1.kt")
            public void testKt900_1() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt900-1.kt");
            }
            
            @TestMetadata("kt900-2.kt")
            public void testKt900_2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt900-2.kt");
            }
            
            @TestMetadata("kt939.kt")
            public void testKt939() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt939.kt");
            }
            
            @TestMetadata("kt955.kt")
            public void testKt955() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/kt955.kt");
            }
            
            @TestMetadata("NoAmbiguityBetweenRootAndPackage.kt")
            public void testNoAmbiguityBetweenRootAndPackage() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/NoAmbiguityBetweenRootAndPackage.kt");
            }
            
            @TestMetadata("stopResolutionOnAmbiguity.kt")
            public void testStopResolutionOnAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/stopResolutionOnAmbiguity.kt");
            }
            
            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/visibility.kt");
            }
            
            @TestMetadata("visibility2.kt")
            public void testVisibility2() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/visibility2.kt");
            }
            
            @TestMetadata("VisibilityInheritModifier.kt")
            public void testVisibilityInheritModifier() throws Exception {
                doTest("compiler/testData/diagnostics/tests/scopes/VisibilityInheritModifier.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/senselessComparison")
        public static class SenselessComparison extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSenselessComparison() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/senselessComparison"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("parenthesized.kt")
            public void testParenthesized() throws Exception {
                doTest("compiler/testData/diagnostics/tests/senselessComparison/parenthesized.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/shadowing")
        public static class Shadowing extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInShadowing() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/shadowing"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ShadowMultiDeclarationWithFunParameter.kt")
            public void testShadowMultiDeclarationWithFunParameter() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowMultiDeclarationWithFunParameter.kt");
            }
            
            @TestMetadata("ShadowParameterInFunctionBody.kt")
            public void testShadowParameterInFunctionBody() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInFunctionBody.kt");
            }
            
            @TestMetadata("ShadowParameterInNestedBlockInFor.kt")
            public void testShadowParameterInNestedBlockInFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInNestedBlockInFor.kt");
            }
            
            @TestMetadata("ShadowPropertyInClosure.kt")
            public void testShadowPropertyInClosure() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInClosure.kt");
            }
            
            @TestMetadata("ShadowPropertyInFor.kt")
            public void testShadowPropertyInFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFor.kt");
            }
            
            @TestMetadata("ShadowPropertyInFunction.kt")
            public void testShadowPropertyInFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFunction.kt");
            }
            
            @TestMetadata("ShadowVariableInFor.kt")
            public void testShadowVariableInFor() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInFor.kt");
            }
            
            @TestMetadata("ShadowVariableInNestedBlock.kt")
            public void testShadowVariableInNestedBlock() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedBlock.kt");
            }
            
            @TestMetadata("ShadowVariableInNestedClosure.kt")
            public void testShadowVariableInNestedClosure() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosure.kt");
            }
            
            @TestMetadata("ShadowVariableInNestedClosureParam.kt")
            public void testShadowVariableInNestedClosureParam() throws Exception {
                doTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosureParam.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/smartCasts")
        @InnerTestClasses({SmartCasts.Inference.class})
        public static class SmartCasts extends AbstractJetDiagnosticsTest {
            @TestMetadata("afterBinaryExpr.kt")
            public void testAfterBinaryExpr() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/afterBinaryExpr.kt");
            }
            
            public void testAllFilesPresentInSmartCasts() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/smartCasts"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("classObjectMember.kt")
            public void testClassObjectMember() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/classObjectMember.kt");
            }
            
            @TestMetadata("combineWithNoSelectorInfo.kt")
            public void testCombineWithNoSelectorInfo() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/combineWithNoSelectorInfo.kt");
            }
            
            @TestMetadata("dataFlowInfoForArguments.kt")
            public void testDataFlowInfoForArguments() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/dataFlowInfoForArguments.kt");
            }
            
            @TestMetadata("kt1461.kt")
            public void testKt1461() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/kt1461.kt");
            }
            
            @TestMetadata("kt2422.kt")
            public void testKt2422() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/kt2422.kt");
            }
            
            @TestMetadata("noErrorCheckForPackageLevelVal.kt")
            public void testNoErrorCheckForPackageLevelVal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/noErrorCheckForPackageLevelVal.kt");
            }
            
            @TestMetadata("noUnnecessarySmartCastForReceiver.kt")
            public void testNoUnnecessarySmartCastForReceiver() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/noUnnecessarySmartCastForReceiver.kt");
            }
            
            @TestMetadata("publicVal.kt")
            public void testPublicVal() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/publicVal.kt");
            }
            
            @TestMetadata("thisWithLabel.kt")
            public void testThisWithLabel() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/thisWithLabel.kt");
            }
            
            @TestMetadata("thisWithLabelAsReceiverPart.kt")
            public void testThisWithLabelAsReceiverPart() throws Exception {
                doTest("compiler/testData/diagnostics/tests/smartCasts/thisWithLabelAsReceiverPart.kt");
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/inference")
            public static class Inference extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInInference() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/smartCasts/inference"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("dependentOnPrevArg.kt")
                public void testDependentOnPrevArg() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/dependentOnPrevArg.kt");
                }
                
                @TestMetadata("intersectionTypes.kt")
                public void testIntersectionTypes() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/intersectionTypes.kt");
                }
                
                @TestMetadata("kt1355.kt")
                public void testKt1355() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt1355.kt");
                }
                
                @TestMetadata("kt2746.kt")
                public void testKt2746() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt2746.kt");
                }
                
                @TestMetadata("kt2851.kt")
                public void testKt2851() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt2851.kt");
                }
                
                @TestMetadata("kt4009.kt")
                public void testKt4009() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4009.kt");
                }
                
                @TestMetadata("kt4403.kt")
                public void testKt4403() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4403.kt");
                }
                
                @TestMetadata("kt4415.kt")
                public void testKt4415() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4415.kt");
                }
                
                @TestMetadata("smartCastOnReceiver.kt")
                public void testSmartCastOnReceiver() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/smartCasts/inference/smartCastOnReceiver.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("SmartCasts");
                suite.addTestSuite(SmartCasts.class);
                suite.addTestSuite(Inference.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/substitutions")
        public static class Substitutions extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSubstitutions() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/substitutions"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("kt1558-short.kt")
            public void testKt1558_short() throws Exception {
                doTest("compiler/testData/diagnostics/tests/substitutions/kt1558-short.kt");
            }
            
            @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt")
            public void testUpperBoundsSubstitutionForOverloadResolutionWithAmbiguity() throws Exception {
                doTest("compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt");
            }
            
            @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt")
            public void testUpperBoundsSubstitutionForOverloadResolutionWithErrorTypes() throws Exception {
                doTest("compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/subtyping")
        public static class Subtyping extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSubtyping() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/subtyping"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("kt2069.kt")
            public void testKt2069() throws Exception {
                doTest("compiler/testData/diagnostics/tests/subtyping/kt2069.kt");
            }
            
            @TestMetadata("kt2744.kt")
            public void testKt2744() throws Exception {
                doTest("compiler/testData/diagnostics/tests/subtyping/kt2744.kt");
            }
            
            @TestMetadata("kt304.kt")
            public void testKt304() throws Exception {
                doTest("compiler/testData/diagnostics/tests/subtyping/kt304.kt");
            }
            
            @TestMetadata("kt3159.kt")
            public void testKt3159() throws Exception {
                doTest("compiler/testData/diagnostics/tests/subtyping/kt3159.kt");
            }
            
            @TestMetadata("kt-1457.kt")
            public void testKt_1457() throws Exception {
                doTest("compiler/testData/diagnostics/tests/subtyping/kt-1457.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/suppress")
        @InnerTestClasses({Suppress.AllWarnings.class, Suppress.ManyWarnings.class, Suppress.OneWarning.class})
        public static class Suppress extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInSuppress() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/suppress"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings")
            public static class AllWarnings extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInAllWarnings() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/suppress/allWarnings"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("suppressWarningsOnClass.kt")
                public void testSuppressWarningsOnClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClass.kt");
                }
                
                @TestMetadata("suppressWarningsOnClassObject.kt")
                public void testSuppressWarningsOnClassObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClassObject.kt");
                }
                
                @TestMetadata("suppressWarningsOnExpression.kt")
                public void testSuppressWarningsOnExpression() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnExpression.kt");
                }
                
                @TestMetadata("suppressWarningsOnFunction.kt")
                public void testSuppressWarningsOnFunction() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnFunction.kt");
                }
                
                @TestMetadata("suppressWarningsOnObject.kt")
                public void testSuppressWarningsOnObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnObject.kt");
                }
                
                @TestMetadata("suppressWarningsOnParameter.kt")
                public void testSuppressWarningsOnParameter() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnParameter.kt");
                }
                
                @TestMetadata("suppressWarningsOnProperty.kt")
                public void testSuppressWarningsOnProperty() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnProperty.kt");
                }
                
                @TestMetadata("suppressWarningsOnPropertyAccessor.kt")
                public void testSuppressWarningsOnPropertyAccessor() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnPropertyAccessor.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings")
            public static class ManyWarnings extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInManyWarnings() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/suppress/manyWarnings"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("mixed.kt")
                public void testMixed() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/mixed.kt");
                }
                
                @TestMetadata("onClass.kt")
                public void testOnClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClass.kt");
                }
                
                @TestMetadata("onClassObject.kt")
                public void testOnClassObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClassObject.kt");
                }
                
                @TestMetadata("onExpression.kt")
                public void testOnExpression() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onExpression.kt");
                }
                
                @TestMetadata("onFunction.kt")
                public void testOnFunction() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onFunction.kt");
                }
                
                @TestMetadata("onObject.kt")
                public void testOnObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onObject.kt");
                }
                
                @TestMetadata("onParameter.kt")
                public void testOnParameter() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onParameter.kt");
                }
                
                @TestMetadata("onProperty.kt")
                public void testOnProperty() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onProperty.kt");
                }
                
                @TestMetadata("onPropertyAccessor.kt")
                public void testOnPropertyAccessor() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onPropertyAccessor.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning")
            public static class OneWarning extends AbstractJetDiagnosticsTest {
                public void testAllFilesPresentInOneWarning() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/suppress/oneWarning"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("onClass.kt")
                public void testOnClass() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onClass.kt");
                }
                
                @TestMetadata("onClassObject.kt")
                public void testOnClassObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onClassObject.kt");
                }
                
                @TestMetadata("onExpression.kt")
                public void testOnExpression() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onExpression.kt");
                }
                
                @TestMetadata("onFunction.kt")
                public void testOnFunction() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onFunction.kt");
                }
                
                @TestMetadata("onLocalVariable.kt")
                public void testOnLocalVariable() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onLocalVariable.kt");
                }
                
                @TestMetadata("onObject.kt")
                public void testOnObject() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onObject.kt");
                }
                
                @TestMetadata("onParameter.kt")
                public void testOnParameter() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onParameter.kt");
                }
                
                @TestMetadata("onProperty.kt")
                public void testOnProperty() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onProperty.kt");
                }
                
                @TestMetadata("onPropertyAccessor.kt")
                public void testOnPropertyAccessor() throws Exception {
                    doTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onPropertyAccessor.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Suppress");
                suite.addTestSuite(Suppress.class);
                suite.addTestSuite(AllWarnings.class);
                suite.addTestSuite(ManyWarnings.class);
                suite.addTestSuite(OneWarning.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper")
        public static class ThisAndSuper extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInThisAndSuper() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/thisAndSuper"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ambigousLabelOnThis.kt")
            public void testAmbigousLabelOnThis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/ambigousLabelOnThis.kt");
            }
            
            @TestMetadata("notAccessibleSuperInTrait.kt")
            public void testNotAccessibleSuperInTrait() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/notAccessibleSuperInTrait.kt");
            }
            
            @TestMetadata("QualifiedThis.kt")
            public void testQualifiedThis() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/QualifiedThis.kt");
            }
            
            @TestMetadata("Super.kt")
            public void testSuper() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/Super.kt");
            }
            
            @TestMetadata("superInExtensionFunction.kt")
            public void testSuperInExtensionFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunction.kt");
            }
            
            @TestMetadata("superInExtensionFunctionCall.kt")
            public void testSuperInExtensionFunctionCall() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunctionCall.kt");
            }
            
            @TestMetadata("superInToplevelFunction.kt")
            public void testSuperInToplevelFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/superInToplevelFunction.kt");
            }
            
            @TestMetadata("superIsNotAnExpression.kt")
            public void testSuperIsNotAnExpression() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/superIsNotAnExpression.kt");
            }
            
            @TestMetadata("thisInFunctionLiterals.kt")
            public void testThisInFunctionLiterals() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInFunctionLiterals.kt");
            }
            
            @TestMetadata("thisInInnerClasses.kt")
            public void testThisInInnerClasses() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInInnerClasses.kt");
            }
            
            @TestMetadata("thisInPropertyInitializer.kt")
            public void testThisInPropertyInitializer() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInPropertyInitializer.kt");
            }
            
            @TestMetadata("thisInToplevelFunction.kt")
            public void testThisInToplevelFunction() throws Exception {
                doTest("compiler/testData/diagnostics/tests/thisAndSuper/thisInToplevelFunction.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/unit")
        public static class Unit extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInUnit() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/unit"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("nullableUnit.kt")
            public void testNullableUnit() throws Exception {
                doTest("compiler/testData/diagnostics/tests/unit/nullableUnit.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/varargs")
        public static class Varargs extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInVarargs() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/varargs"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AmbiguousVararg.kt")
            public void testAmbiguousVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/AmbiguousVararg.kt");
            }
            
            @TestMetadata("kt1781.kt")
            public void testKt1781() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt1781.kt");
            }
            
            @TestMetadata("kt1835.kt")
            public void testKt1835() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt1835.kt");
            }
            
            @TestMetadata("kt1838-param.kt")
            public void testKt1838_param() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt1838-param.kt");
            }
            
            @TestMetadata("kt1838-val.kt")
            public void testKt1838_val() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt1838-val.kt");
            }
            
            @TestMetadata("kt422.kt")
            public void testKt422() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/kt422.kt");
            }
            
            @TestMetadata("MoreSpecificVarargsOfEqualLength.kt")
            public void testMoreSpecificVarargsOfEqualLength() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/MoreSpecificVarargsOfEqualLength.kt");
            }
            
            @TestMetadata("MostSepcificVarargsWithJava.kt")
            public void testMostSepcificVarargsWithJava() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/MostSepcificVarargsWithJava.kt");
            }
            
            @TestMetadata("NilaryVsVararg.kt")
            public void testNilaryVsVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/NilaryVsVararg.kt");
            }
            
            @TestMetadata("UnaryVsVararg.kt")
            public void testUnaryVsVararg() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/UnaryVsVararg.kt");
            }
            
            @TestMetadata("varargsAndFunctionLiterals.kt")
            public void testVarargsAndFunctionLiterals() throws Exception {
                doTest("compiler/testData/diagnostics/tests/varargs/varargsAndFunctionLiterals.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/diagnostics/tests/when")
        public static class When extends AbstractJetDiagnosticsTest {
            public void testAllFilesPresentInWhen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/when"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AnnotatedWhenStatement.kt")
            public void testAnnotatedWhenStatement() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/AnnotatedWhenStatement.kt");
            }
            
            @TestMetadata("NoElseExpectedUnit.kt")
            public void testNoElseExpectedUnit() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/NoElseExpectedUnit.kt");
            }
            
            @TestMetadata("NoElseNoExpectedType.kt")
            public void testNoElseNoExpectedType() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/NoElseNoExpectedType.kt");
            }
            
            @TestMetadata("NoElseReturnedCoercionToUnit.kt")
            public void testNoElseReturnedCoercionToUnit() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/NoElseReturnedCoercionToUnit.kt");
            }
            
            @TestMetadata("NoElseReturnedFromLambdaExpectedInt.kt")
            public void testNoElseReturnedFromLambdaExpectedInt() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/NoElseReturnedFromLambdaExpectedInt.kt");
            }
            
            @TestMetadata("NoElseReturnedNonUnit.kt")
            public void testNoElseReturnedNonUnit() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/NoElseReturnedNonUnit.kt");
            }
            
            @TestMetadata("NoElseReturnedUnit.kt")
            public void testNoElseReturnedUnit() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/NoElseReturnedUnit.kt");
            }
            
            @TestMetadata("NoElseWhenStatement.kt")
            public void testNoElseWhenStatement() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/NoElseWhenStatement.kt");
            }
            
            @TestMetadata("When.kt")
            public void testWhen() throws Exception {
                doTest("compiler/testData/diagnostics/tests/when/When.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Tests");
            suite.addTestSuite(Tests.class);
            suite.addTest(Annotations.innerSuite());
            suite.addTestSuite(BackingField.class);
            suite.addTestSuite(CallableReference.class);
            suite.addTest(Cast.innerSuite());
            suite.addTestSuite(CheckArguments.class);
            suite.addTestSuite(ClassObjects.class);
            suite.addTest(ControlFlowAnalysis.innerSuite());
            suite.addTestSuite(ControlStructures.class);
            suite.addTestSuite(DataClasses.class);
            suite.addTest(DataFlow.innerSuite());
            suite.addTestSuite(DataFlowInfoTraversal.class);
            suite.addTest(DeclarationChecks.innerSuite());
            suite.addTest(DelegatedProperty.innerSuite());
            suite.addTestSuite(Deparenthesize.class);
            suite.addTest(Enum.innerSuite());
            suite.addTestSuite(Evaluate.class);
            suite.addTestSuite(Extensions.class);
            suite.addTest(FunctionLiterals.innerSuite());
            suite.addTest(Generics.innerSuite());
            suite.addTest(IncompleteCode.innerSuite());
            suite.addTest(Inference.innerSuite());
            suite.addTestSuite(Infos.class);
            suite.addTest(Inline.innerSuite());
            suite.addTest(Inner.innerSuite());
            suite.addTestSuite(J_k.class);
            suite.addTest(Jdk_annotations.innerSuite());
            suite.addTestSuite(Library.class);
            suite.addTestSuite(NullabilityAndAutoCasts.class);
            suite.addTestSuite(NullableTypes.class);
            suite.addTestSuite(Numbers.class);
            suite.addTestSuite(Objects.class);
            suite.addTestSuite(OperatorsOverloading.class);
            suite.addTestSuite(Overload.class);
            suite.addTestSuite(Override.class);
            suite.addTestSuite(Recovery.class);
            suite.addTestSuite(Redeclarations.class);
            suite.addTestSuite(Regressions.class);
            suite.addTest(Resolve.innerSuite());
            suite.addTestSuite(Scopes.class);
            suite.addTestSuite(SenselessComparison.class);
            suite.addTestSuite(Shadowing.class);
            suite.addTest(SmartCasts.innerSuite());
            suite.addTestSuite(Substitutions.class);
            suite.addTestSuite(Subtyping.class);
            suite.addTest(Suppress.innerSuite());
            suite.addTestSuite(ThisAndSuper.class);
            suite.addTestSuite(Unit.class);
            suite.addTestSuite(Varargs.class);
            suite.addTestSuite(When.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/diagnostics/tests/script")
    public static class Script extends AbstractJetDiagnosticsTest {
        @TestMetadata("AccessForwardDeclarationInScript.ktscript")
        public void testAccessForwardDeclarationInScript() throws Exception {
            doTest("compiler/testData/diagnostics/tests/script/AccessForwardDeclarationInScript.ktscript");
        }
        
        public void testAllFilesPresentInScript() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/diagnostics/tests/script"), Pattern.compile("^(.+)\\.ktscript$"), true);
        }
        
        @TestMetadata("ComplexScript.ktscript")
        public void testComplexScript() throws Exception {
            doTest("compiler/testData/diagnostics/tests/script/ComplexScript.ktscript");
        }
        
        @TestMetadata("imports.ktscript")
        public void testImports() throws Exception {
            doTest("compiler/testData/diagnostics/tests/script/imports.ktscript");
        }
        
        @TestMetadata("SimpleScript.ktscript")
        public void testSimpleScript() throws Exception {
            doTest("compiler/testData/diagnostics/tests/script/SimpleScript.ktscript");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/box/functions/tailRecursion")
    public static class TailRecursion extends AbstractJetDiagnosticsTest {
        public void testAllFilesPresentInTailRecursion() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/codegen/box/functions/tailRecursion"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("defaultArgs.kt")
        public void testDefaultArgs() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/defaultArgs.kt");
        }
        
        @TestMetadata("extensionTailCall.kt")
        public void testExtensionTailCall() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/extensionTailCall.kt");
        }
        
        @TestMetadata("functionWithNoTails.kt")
        public void testFunctionWithNoTails() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/functionWithNoTails.kt");
        }
        
        @TestMetadata("functionWithNonTailRecursions.kt")
        public void testFunctionWithNonTailRecursions() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/functionWithNonTailRecursions.kt");
        }
        
        @TestMetadata("functionWithoutAnnotation.kt")
        public void testFunctionWithoutAnnotation() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/functionWithoutAnnotation.kt");
        }
        
        @TestMetadata("infixCall.kt")
        public void testInfixCall() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/infixCall.kt");
        }
        
        @TestMetadata("infixRecursiveCall.kt")
        public void testInfixRecursiveCall() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/infixRecursiveCall.kt");
        }
        
        @TestMetadata("insideElvis.kt")
        public void testInsideElvis() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/insideElvis.kt");
        }
        
        @TestMetadata("labeledThisReferences.kt")
        public void testLabeledThisReferences() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/labeledThisReferences.kt");
        }
        
        @TestMetadata("loops.kt")
        public void testLoops() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/loops.kt");
        }
        
        @TestMetadata("multilevelBlocks.kt")
        public void testMultilevelBlocks() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/multilevelBlocks.kt");
        }
        
        @TestMetadata("realIteratorFoldl.kt")
        public void testRealIteratorFoldl() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/realIteratorFoldl.kt");
        }
        
        @TestMetadata("realStringEscape.kt")
        public void testRealStringEscape() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/realStringEscape.kt");
        }
        
        @TestMetadata("realStringRepeat.kt")
        public void testRealStringRepeat() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/realStringRepeat.kt");
        }
        
        @TestMetadata("recursiveCallInLambda.kt")
        public void testRecursiveCallInLambda() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/recursiveCallInLambda.kt");
        }
        
        @TestMetadata("recursiveCallInLocalFunction.kt")
        public void testRecursiveCallInLocalFunction() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/recursiveCallInLocalFunction.kt");
        }
        
        @TestMetadata("recursiveInnerFunction.kt")
        public void testRecursiveInnerFunction() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/recursiveInnerFunction.kt");
        }
        
        @TestMetadata("returnIf.kt")
        public void testReturnIf() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/returnIf.kt");
        }
        
        @TestMetadata("returnInCatch.kt")
        public void testReturnInCatch() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInCatch.kt");
        }
        
        @TestMetadata("returnInFinally.kt")
        public void testReturnInFinally() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInFinally.kt");
        }
        
        @TestMetadata("returnInIfInFinally.kt")
        public void testReturnInIfInFinally() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInIfInFinally.kt");
        }
        
        @TestMetadata("returnInParentheses.kt")
        public void testReturnInParentheses() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInParentheses.kt");
        }
        
        @TestMetadata("returnInTry.kt")
        public void testReturnInTry() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInTry.kt");
        }
        
        @TestMetadata("simpleBlock.kt")
        public void testSimpleBlock() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/simpleBlock.kt");
        }
        
        @TestMetadata("simpleReturn.kt")
        public void testSimpleReturn() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/simpleReturn.kt");
        }
        
        @TestMetadata("simpleReturnWithElse.kt")
        public void testSimpleReturnWithElse() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/simpleReturnWithElse.kt");
        }
        
        @TestMetadata("sum.kt")
        public void testSum() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/sum.kt");
        }
        
        @TestMetadata("tailCallInBlockInParentheses.kt")
        public void testTailCallInBlockInParentheses() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/tailCallInBlockInParentheses.kt");
        }
        
        @TestMetadata("tailCallInParentheses.kt")
        public void testTailCallInParentheses() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/tailCallInParentheses.kt");
        }
        
        @TestMetadata("tailRecursionInFinally.kt")
        public void testTailRecursionInFinally() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/tailRecursionInFinally.kt");
        }
        
        @TestMetadata("thisReferences.kt")
        public void testThisReferences() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/thisReferences.kt");
        }
        
        @TestMetadata("unitBlocks.kt")
        public void testUnitBlocks() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/unitBlocks.kt");
        }
        
        @TestMetadata("whenWithCondition.kt")
        public void testWhenWithCondition() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/whenWithCondition.kt");
        }
        
        @TestMetadata("whenWithInRange.kt")
        public void testWhenWithInRange() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/whenWithInRange.kt");
        }
        
        @TestMetadata("whenWithIs.kt")
        public void testWhenWithIs() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/whenWithIs.kt");
        }
        
        @TestMetadata("whenWithoutCondition.kt")
        public void testWhenWithoutCondition() throws Exception {
            doTest("compiler/testData/codegen/box/functions/tailRecursion/whenWithoutCondition.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("JetDiagnosticsTestGenerated");
        suite.addTest(Tests.innerSuite());
        suite.addTestSuite(Script.class);
        suite.addTestSuite(TailRecursion.class);
        return suite;
    }
}
