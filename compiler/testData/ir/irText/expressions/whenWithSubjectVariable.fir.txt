FILE fqName:<root> fileName:/whenWithSubjectVariable.kt
  FUN name:foo visibility:public modality:FINAL <> () returnType:kotlin.Any
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun foo (): kotlin.Any declared in <root>'
        CONST Int type=kotlin.Any value=1
  FUN name:test visibility:public modality:FINAL <> () returnType:kotlin.Int
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test (): kotlin.Int declared in <root>'
        BLOCK type=kotlin.Int origin=WHEN
          VAR name:y type:kotlin.Any [val]
            CALL 'public final fun foo (): kotlin.Any declared in <root>' type=kotlin.Any origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val y: kotlin.Any [val] declared in <root>.test' type=kotlin.Any origin=null
                arg1: CONST Int type=kotlin.Int value=42
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
                GET_VAR 'val y: kotlin.Any [val] declared in <root>.test' type=kotlin.Any origin=null
              then: ERROR_CALL 'Unresolved reference: <Unresolved name: length>#' type=IrErrorType
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Int
                GET_VAR 'val y: kotlin.Any [val] declared in <root>.test' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=2
            BRANCH
              if: ERROR_CALL 'Unresolved reference: <Unresolved name: contains>#' type=IrErrorType
                GET_VAR 'val y: kotlin.Any [val] declared in <root>.test' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=3
            BRANCH
              if: ERROR_CALL 'Unresolved reference: <Unresolved name: contains>#' type=IrErrorType
                GET_VAR 'val y: kotlin.Any [val] declared in <root>.test' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=4
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: ERROR_CALL 'Unresolved reference: <Unresolved name: unaryMinus>#' type=IrErrorType
                CONST Int type=kotlin.Int value=1
