RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] valueClassWithMultiFieldValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class Foo<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] constructor<[ResolvedTo(RAW_FIR)] T>([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.a] a: T, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.b] b: T): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/MyValueClass.foo] foo: Foo<Int>): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<Int> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<Int>

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class Foo<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] constructor<[ResolvedTo(RAW_FIR)] T>([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.a] a: T, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.b] b: T): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/MyValueClass.foo] foo: Foo<Int>): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<Int> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<Int>

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class Foo<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] constructor<[ResolvedTo(RAW_FIR)] T>([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.a] a: T, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.b] b: T): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/MyValueClass.foo] foo: Foo<Int>): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<Int> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<Int>

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class Foo<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] constructor<[ResolvedTo(RAW_FIR)] T>([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.a] a: T, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.b] b: T): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(COMPANION_GENERATION)] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/MyValueClass.foo] foo: Foo<Int>): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<Int> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<Int>

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class Foo<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] constructor<[ResolvedTo(RAW_FIR)] T>([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.a] a: T, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.b] b: T): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(SUPER_TYPES)] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/MyValueClass.foo] foo: Foo<Int>): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<Int> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<Int>

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @JvmInline[Unresolved]() public final? inline [ResolvedTo(RAW_FIR)] class Foo<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] constructor<[ResolvedTo(RAW_FIR)] T>([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.a] a: T, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/Foo.b] b: T): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/MyValueClass.foo] foo: Foo<Int>): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<Int> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<Int>

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class Foo<[ResolvedTo(TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=Foo] constructor<[ResolvedTo(TYPES)] T>([ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.a] a: R|T|, [ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.b] b: R|T|): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(STATUS)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(foo, pack/Foo<kotlin/Int>)])] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/MyValueClass.foo] foo: R|pack/Foo<kotlin/Int>|): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<R|kotlin/Int|> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<R|kotlin/Int|>

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class Foo<[ResolvedTo(TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=Foo] constructor<[ResolvedTo(TYPES)] T>([ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.a] a: R|T|, [ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.b] b: R|T|): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(foo, pack/Foo<kotlin/Int>)])] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/MyValueClass.foo] foo: R|pack/Foo<kotlin/Int>|): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<R|kotlin/Int|> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<R|kotlin/Int|>

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class Foo<[ResolvedTo(TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=Foo] constructor<[ResolvedTo(TYPES)] T>([ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.a] a: R|T|, [ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.b] b: R|T|): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(CONTRACTS)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(foo, pack/Foo<kotlin/Int>)])] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/MyValueClass.foo] foo: R|pack/Foo<kotlin/Int>|): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<R|kotlin/Int|> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<R|kotlin/Int|>

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class Foo<[ResolvedTo(TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=Foo] constructor<[ResolvedTo(TYPES)] T>([ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.a] a: R|T|, [ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.b] b: R|T|): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(foo, pack/Foo<kotlin/Int>)])] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/MyValueClass.foo] foo: R|pack/Foo<kotlin/Int>|): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<R|kotlin/Int|> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<R|kotlin/Int|>

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class Foo<[ResolvedTo(TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=Foo] constructor<[ResolvedTo(TYPES)] T>([ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.a] a: R|T|, [ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.b] b: R|T|): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(CONSTANT_EVALUATION)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(foo, pack/Foo<kotlin/Int>)])] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/MyValueClass.foo] foo: R|pack/Foo<kotlin/Int>|): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<R|kotlin/Int|> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<R|kotlin/Int|>

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class Foo<[ResolvedTo(TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=Foo] constructor<[ResolvedTo(TYPES)] T>([ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.a] a: R|T|, [ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.b] b: R|T|): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(ANNOTATION_ARGUMENTS)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(foo, pack/Foo<kotlin/Int>)])] class MyValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/MyValueClass.foo] foo: R|pack/Foo<kotlin/Int>|): R|pack/MyValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val foo: Foo<R|kotlin/Int|> = R|<local>/foo|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyValueClass] get(): Foo<R|kotlin/Int|>

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] valueClassWithMultiFieldValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? inline [ResolvedTo(TYPES)] class Foo<[ResolvedTo(TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=Foo] constructor<[ResolvedTo(TYPES)] T>([ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.a] a: R|T|, [ResolvedTo(TYPES)] [CorrespondingProperty=pack/Foo.b] b: R|T|): R|pack/Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val a: T = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val b: T = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo] get(): T

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(BODY_RESOLVE)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(foo, pack/Foo<kotlin/Int>)])] class MyValueClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/MyValueClass.foo] foo: R|pack/Foo<kotlin/Int>|): R|pack/MyValueClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val foo: R|pack/Foo<kotlin/Int>| = R|<local>/foo|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyValueClass] get(): R|pack/Foo<kotlin/Int>|

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] valueClassWithMultiFieldValueClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(BODY_RESOLVE)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(a, T), (b, T)])] class Foo<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] constructor<[ResolvedTo(BODY_RESOLVE)] T>([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/Foo.a] a: R|T|, [ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/Foo.b] b: R|T|): R|pack/Foo<T>| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val a: R|T| = R|<local>/a|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|T|

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val b: R|T| = R|<local>/b|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|T|

    }
    @R|kotlin/jvm/JvmInline|[Types]() public final inline [ResolvedTo(BODY_RESOLVE)] [FirValueClassRepresentationKey=MultiFieldValueClassRepresentation(underlyingPropertyNamesToTypes=[(foo, pack/Foo<kotlin/Int>)])] class MyValueClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyValueClass] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/MyValueClass.foo] foo: R|pack/Foo<kotlin/Int>|): R|pack/MyValueClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val foo: R|pack/Foo<kotlin/Int>| = R|<local>/foo|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyValueClass] get(): R|pack/Foo<kotlin/Int>|

    }
