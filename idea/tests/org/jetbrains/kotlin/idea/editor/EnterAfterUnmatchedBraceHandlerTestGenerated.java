/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.editor;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/editor/enterHandler/afterUnmatchedBrace")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class EnterAfterUnmatchedBraceHandlerTestGenerated extends AbstractEnterAfterUnmatchedBraceHandlerTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInAfterUnmatchedBrace() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/testData/editor/enterHandler/afterUnmatchedBrace"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @TestMetadata("lambdaArgumentBeforeFunctionInitializer.kt")
    public void testLambdaArgumentBeforeFunctionInitializer() throws Exception {
        runTest("idea/testData/editor/enterHandler/afterUnmatchedBrace/lambdaArgumentBeforeFunctionInitializer.kt");
    }

    @TestMetadata("lambdaArgumentBeforeLocalPropertyInitializer.kt")
    public void testLambdaArgumentBeforeLocalPropertyInitializer() throws Exception {
        runTest("idea/testData/editor/enterHandler/afterUnmatchedBrace/lambdaArgumentBeforeLocalPropertyInitializer.kt");
    }

    @TestMetadata("lambdaArgumentBeforeMemberPropertyInitializer.kt")
    public void testLambdaArgumentBeforeMemberPropertyInitializer() throws Exception {
        runTest("idea/testData/editor/enterHandler/afterUnmatchedBrace/lambdaArgumentBeforeMemberPropertyInitializer.kt");
    }

    @TestMetadata("lambdaArgumentBeforeTopLevelPropertyInitializer.kt")
    public void testLambdaArgumentBeforeTopLevelPropertyInitializer() throws Exception {
        runTest("idea/testData/editor/enterHandler/afterUnmatchedBrace/lambdaArgumentBeforeTopLevelPropertyInitializer.kt");
    }

    @TestMetadata("notApplicableOnInitializer.kt")
    public void testNotApplicableOnInitializer() throws Exception {
        runTest("idea/testData/editor/enterHandler/afterUnmatchedBrace/notApplicableOnInitializer.kt");
    }

    @TestMetadata("whenBeforeLocalPropertyInitializer.kt")
    public void testWhenBeforeLocalPropertyInitializer() throws Exception {
        runTest("idea/testData/editor/enterHandler/afterUnmatchedBrace/whenBeforeLocalPropertyInitializer.kt");
    }

    @TestMetadata("whenBeforeMemberPropertyInitializer.kt")
    public void testWhenBeforeMemberPropertyInitializer() throws Exception {
        runTest("idea/testData/editor/enterHandler/afterUnmatchedBrace/whenBeforeMemberPropertyInitializer.kt");
    }

    @TestMetadata("whenBeforeTopLevelPropertyInitializer.kt")
    public void testWhenBeforeTopLevelPropertyInitializer() throws Exception {
        runTest("idea/testData/editor/enterHandler/afterUnmatchedBrace/whenBeforeTopLevelPropertyInitializer.kt");
    }
}
