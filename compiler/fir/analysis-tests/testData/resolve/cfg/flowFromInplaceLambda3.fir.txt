FILE: flowFromInplaceLambda3.kt
    public final fun unknown(x: R|() -> kotlin/Unit|): R|kotlin/Unit|
        [R|Contract description]
         <
            CallsInPlace(x, UNKNOWN)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|kotlin/Unit|>(R|<local>/x|, Q|kotlin/contracts/InvocationKind|.R|kotlin/contracts/InvocationKind.UNKNOWN|)
            }
            )
        }

        R|<local>/x|.R|SubstitutionOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
    }
    public final fun atLeastOnce(x: R|() -> kotlin/Unit|): R|kotlin/Unit|
        [R|Contract description]
         <
            CallsInPlace(x, AT_LEAST_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|kotlin/Unit|>(R|<local>/x|, Q|kotlin/contracts/InvocationKind|.R|kotlin/contracts/InvocationKind.AT_LEAST_ONCE|)
            }
            )
        }

        R|<local>/x|.R|SubstitutionOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
    }
    public final fun exactlyOnce(x: R|() -> kotlin/Unit|): R|kotlin/Unit|
        [R|Contract description]
         <
            CallsInPlace(x, EXACTLY_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|kotlin/Unit|>(R|<local>/x|, Q|kotlin/contracts/InvocationKind|.R|kotlin/contracts/InvocationKind.EXACTLY_ONCE|)
            }
            )
        }

        R|<local>/x|.R|SubstitutionOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
    }
    public final fun atMostOnce(x: R|() -> kotlin/Unit|): R|kotlin/Unit|
        [R|Contract description]
         <
            CallsInPlace(x, AT_MOST_ONCE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.callsInPlace|<R|kotlin/Unit|>(R|<local>/x|, Q|kotlin/contracts/InvocationKind|.R|kotlin/contracts/InvocationKind.AT_MOST_ONCE|)
            }
            )
        }

    }
    public final fun test1(): R|kotlin/Unit| {
        lvar x: R|kotlin/Any?|
        R|<local>/x| = String()
        R|<local>/x|.R|kotlin/String.length|
        R|/unknown|(<L> = unknown@fun <anonymous>(): R|kotlin/Unit| <inline=NoInline, kind=UNKNOWN>  {
            R|<local>/x| = Int(1)
        }
        )
        R|<local>/x|.<Unresolved name: length>#
        R|<local>/x|.<Unresolved name: inc>#()
    }
    public final fun test1m(): R|kotlin/Unit| {
        lvar x: R|kotlin/Any?|
        R|<local>/x| = String()
        R|<local>/x|.R|kotlin/String.length|
        R|/unknown|(<L> = unknown@fun <anonymous>(): R|kotlin/Unit| <inline=NoInline, kind=UNKNOWN>  {
            R|<local>/x| = String()
        }
        )
        R|<local>/x|.<Unresolved name: length>#
    }
    public final fun test2(): R|kotlin/Unit| {
        lvar x: R|kotlin/Any?|
        R|<local>/x| = String()
        R|<local>/x|.R|kotlin/String.length|
        R|/atLeastOnce|(<L> = atLeastOnce@fun <anonymous>(): R|kotlin/Unit| <inline=NoInline, kind=AT_LEAST_ONCE>  {
            R|<local>/x| = Int(1)
        }
        )
        R|<local>/x|.<Unresolved name: length>#
        R|<local>/x|.<Unresolved name: inc>#()
    }
    public final fun test3(): R|kotlin/Unit| {
        lvar x: R|kotlin/Any?|
        R|<local>/x| = String()
        R|<local>/x|.R|kotlin/String.length|
        R|/exactlyOnce|(<L> = exactlyOnce@fun <anonymous>(): R|kotlin/Unit| <inline=NoInline, kind=EXACTLY_ONCE>  {
            R|<local>/x| = Int(1)
        }
        )
        R|<local>/x|.<Unresolved name: length>#
        R|<local>/x|.<Unresolved name: inc>#()
    }
    public final fun test4(): R|kotlin/Unit| {
        lvar x: R|kotlin/Any?|
        R|<local>/x| = String()
        R|<local>/x|.R|kotlin/String.length|
        R|/atMostOnce|(<L> = atMostOnce@fun <anonymous>(): R|kotlin/Unit| <inline=NoInline, kind=AT_MOST_ONCE>  {
            R|<local>/x| = Int(1)
        }
        )
        R|<local>/x|.<Unresolved name: length>#
        R|<local>/x|.<Unresolved name: inc>#()
    }
