// DO NOT EDIT MANUALLY! Generated by org.jetbrains.kotlin.generators.gradle.dsl.MppKotlinTargetHierarchyBuilderCodegenKt

package org.jetbrains.kotlin.gradle.plugin

import org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi

@KotlinTargetsDsl
@ExperimentalKotlinGradlePluginApi
interface KotlinTargetHierarchyBuilder {
    /* Declaring groups */
    fun common(build: KotlinTargetHierarchyBuilder.() -> Unit) = group("common", build)
    fun group(name: String, build: KotlinTargetHierarchyBuilder.() -> Unit = {})

    /* low-level APIs */
    fun addCompilations(predicate: (KotlinCompilation<*>) -> Boolean)
    fun removeCompilations(predicate: (KotlinCompilation<*>) -> Boolean)
    fun filterCompilations(predicate: (KotlinCompilation<*>) -> Boolean) =
        removeCompilations { !predicate(it) }

    /* Convenient groups */
    fun anyNative()
    fun anyApple()
    fun anyIos()
    fun anyWatchos()
    fun anyMacos()
    fun anyTvos()
    fun anyMingw()
    fun anyLinux()
    fun anyAndroidNative()
    fun anyJs()

    /* Actual targets */
    fun jvm()
    fun android()
    fun androidNativeX64()
    fun androidNativeX86()
    fun androidNativeArm32()
    fun androidNativeArm64()
    fun iosArm32()
    fun iosArm64()
    fun iosX64()
    fun iosSimulatorArm64()
    fun watchosArm32()
    fun watchosArm64()
    fun watchosX86()
    fun watchosX64()
    fun watchosSimulatorArm64()
    fun watchosDeviceArm64()
    fun tvosArm64()
    fun tvosX64()
    fun tvosSimulatorArm64()
    fun linuxX64()
    fun mingwX86()
    fun mingwX64()
    fun macosX64()
    fun macosArm64()
    fun linuxArm64()
    fun linuxArm32Hfp()
    fun linuxMips32()
    fun linuxMipsel32()
    fun wasm32()
}
