class MultiInit {
  private var a$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  private var b$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#b$volatile
    }
    private set(value: Int) {
      return <this>.#b$volatile = value
    }

  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun foo() {
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun incA(): Int {
    return getAndAddField(/* <this> = MultiInit<this>::a$volatile, */ delta = 1).plus(other = 1)
  }

  fun incB(): Int {
    return getAndAddField(/* <this> = MultiInit<this>::b$volatile, */ delta = 1).plus(other = 1)
  }

}

class MultiInitTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testBasic() {
    val t: MultiInit = MultiInit()
    check(value = EQEQ(arg0 = t.incA(), arg1 = 1))
    check(value = EQEQ(arg0 = t.incA(), arg1 = 2))
    check(value = EQEQ(arg0 = t.incB(), arg1 = 1))
    check(value = EQEQ(arg0 = t.incB(), arg1 = 2))
  }

}

fun box(): String {
  val testClass: MultiInitTest = MultiInitTest()
  testClass.testBasic()
  return "OK"
}
