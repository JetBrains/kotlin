package generators

import java.io.File
import java.io.FileWriter
import java.io.PrintWriter

private fun generateDownTos(outputFile: File, header: String) {

    fun getMaxType(fromType: String, toType: String): String {
        return when {
            fromType == "Double" || toType == "Double" -> "Double"
            fromType == "Float"  || toType == "Float"  -> "Float"
            fromType == "Long"   || toType == "Long"   -> "Long"
            fromType == "Int"    || toType == "Int"    -> "Int"
            fromType == "Short"  || toType == "Short"  -> "Short"
            fromType == "Char"   || toType == "Char"   -> "Char"
            else -> "Byte"
        }
    }

    fun generateDownTo(writer: PrintWriter, fromType: String, toType: String) {
        val elementType = getMaxType(fromType, toType)
        val progressionType = elementType + "Progression"

        val fromExpr = if (elementType == fromType) "this" else "this.to$elementType()"
        val toExpr = if (elementType == toType) "to" else "to.to$elementType()"
        val incrementExpr = when (elementType) {
            "Long" -> "-1.toLong()"
            "Float" -> "-1.toFloat()"
            "Double" -> "-1.0"
            else -> "-1"
        }

        writer.println("""
/**
 * Returns a progression from this value down to the specified [to] value.
 *
 * The [to] value has to be less than this value.
 */
public fun $fromType.downTo(to: $toType): $progressionType {
    return $progressionType($fromExpr, $toExpr, $incrementExpr)
}""")
    }

    println("Writing $outputFile")

    outputFile.getParentFile()?.mkdirs()
    val writer = PrintWriter(FileWriter(outputFile))
    try {
        writer.println(header)

        writer.println("""
$COMMON_AUTOGENERATED_WARNING
""")

        val types = array("Byte", "Char", "Short", "Int", "Long", "Float", "Double")
        for (fromType in types) {
            for (toType in types) {
                generateDownTo(writer, fromType, toType)
            }
        }
    } finally {
        writer.close()
    }
}
