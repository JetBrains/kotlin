KtFile: complicateLTGT.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('test')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      VALUE_PARAMETER
        PsiElement(IDENTIFIER)('x')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('Int')
      PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      VALUE_PARAMETER
        PsiElement(IDENTIFIER)('y')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          USER_TYPE
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('Int')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      IF
        PsiElement(if)('if')
        PsiWhiteSpace(' ')
        PsiElement(LPAR)('(')
        CONDITION
          CALL_EXPRESSION
            REFERENCE_EXPRESSION
              PsiElement(IDENTIFIER)('x')
            PsiWhiteSpace(' ')
            TYPE_ARGUMENT_LIST
              PsiElement(LT)('<')
              PsiWhiteSpace(' ')
              TYPE_PROJECTION
                TYPE_REFERENCE
                  FUNCTION_TYPE
                    VALUE_PARAMETER_LIST
                      PsiElement(LPAR)('(')
                      VALUE_PARAMETER
                        TYPE_REFERENCE
                          PsiErrorElement:Type expected
                            PsiElement(if)('if')
                      PsiErrorElement:Expecting comma or ')'
                        <empty list>
                      PsiWhiteSpace(' ')
                      PsiErrorElement:Expecting ')'
                        PsiElement(LPAR)('(')
                    PsiErrorElement:Expecting '->' to specify return type of a function type
                      <empty list>
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('y')
              PsiWhiteSpace(' ')
              PsiElement(GT)('>')
        PsiErrorElement:Expecting ')
          <empty list>
        PsiWhiteSpace(' ')
        THEN
          INTEGER_CONSTANT
            PsiElement(INTEGER_LITERAL)('115')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(INTEGER_LITERAL)('1')
        PsiWhiteSpace(' ')
        PsiElement(else)('else')
        PsiWhiteSpace(' ')
        PsiElement(INTEGER_LITERAL)('2')
        PsiElement(RPAR)(')')
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          BLOCK
            <empty list>
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')