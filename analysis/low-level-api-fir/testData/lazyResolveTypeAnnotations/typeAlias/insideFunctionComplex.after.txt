@R|pack/TypeAnnWithArg|(arg = <strcat>(String(parameter: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested parameter: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(type: ), R|pack/constant|))  @R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested parameter: ), R|pack/constant|))  {@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested parameter: ), R|pack/constant|))  pack/MyTypeAlias=} kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested type: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested type: ), R|pack/constant|))  kotlin/Int>>>>
  context -> FirValueParameterSymbol <local>/param from FirNamedFunctionSymbol pack/resolveMe
  anchor -> [FirValueParameterSymbol <local>/param from FirNamedFunctionSymbol pack/resolveMe]

@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested parameter: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(type: ), R|pack/constant|))  @R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested parameter: ), R|pack/constant|))  {@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested parameter: ), R|pack/constant|))  pack/MyTypeAlias=} kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested type: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested type: ), R|pack/constant|))  kotlin/Int>>>
  context -> FirValueParameterSymbol <local>/param from FirNamedFunctionSymbol pack/resolveMe
  anchor -> [FirValueParameterSymbol <local>/param from FirNamedFunctionSymbol pack/resolveMe]

@R|pack/TypeAnnWithArg|(arg = <strcat>(String(type: ), R|pack/constant|))  @R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested parameter: ), R|pack/constant|))  {@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested parameter: ), R|pack/constant|))  pack/MyTypeAlias=} kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested type: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested type: ), R|pack/constant|))  kotlin/Int>>
  context -> FirValueParameterSymbol <local>/param from FirNamedFunctionSymbol pack/resolveMe
  anchor -> [FirTypeAliasSymbol pack/MyTypeAlias, FirValueParameterSymbol <local>/param from FirNamedFunctionSymbol pack/resolveMe]

@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested type: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested type: ), R|pack/constant|))  kotlin/Int>
  context -> FirValueParameterSymbol <local>/param from FirNamedFunctionSymbol pack/resolveMe
  anchor -> [FirTypeAliasSymbol pack/MyTypeAlias]

@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested type: ), R|pack/constant|))  kotlin/Int
  context -> FirValueParameterSymbol <local>/param from FirNamedFunctionSymbol pack/resolveMe
  anchor -> [FirTypeAliasSymbol pack/MyTypeAlias]

FILE: [ResolvedTo(IMPORTS)] insideFunctionComplex.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class TypeAnnWithArg : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TypeAnnWithArg] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=pack/TypeAnnWithArg.arg] arg: R|kotlin/String|): R|pack/TypeAnnWithArg| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val arg: R|kotlin/String| = R|<local>/arg|
            public [ResolvedTo(STATUS)] [ContainingClassKey=TypeAnnWithArg] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val constant: R|kotlin/Int| = Int(0)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] typealias MyTypeAlias = R|@R|pack/TypeAnnWithArg|(arg = <strcat>(String(type: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested type: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested type: ), R|pack/constant|))  kotlin/Int>>|
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun resolveMe([ResolvedTo(ANNOTATION_ARGUMENTS)] param: R|@R|pack/TypeAnnWithArg|(arg = <strcat>(String(parameter: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested parameter: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(type: ), R|pack/constant|))  @R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested parameter: ), R|pack/constant|))  {@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested parameter: ), R|pack/constant|))  pack/MyTypeAlias=} kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested type: ), R|pack/constant|))  kotlin/collections/List<@R|pack/TypeAnnWithArg|(arg = <strcat>(String(nested nested type: ), R|pack/constant|))  kotlin/Int>>>>|): R|kotlin/Unit| { LAZY_BLOCK }
