KT element: KtNamedFunction
FIR element: FirSimpleFunctionImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
context([ResolvedTo(BODY_RESOLVE)] <unused var>: R|T1|)
public final suspend [ResolvedTo(BODY_RESOLVE)] fun <[ResolvedTo(BODY_RESOLVE)] T1, [ResolvedTo(BODY_RESOLVE)] T2, [ResolvedTo(BODY_RESOLVE)] R> myContext([ResolvedTo(BODY_RESOLVE)] p1: R|@ContextFunctionTypeParams(2) lib/A.(lib/B, kotlin/Int, kotlin/Int) -> kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] p2: R|@ContextFunctionTypeParams(2) @R|lib/MyAnnotation|()  lib/A.(lib/B, kotlin/Int, kotlin/Int) -> kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] p3: R|@ContextFunctionTypeParams(2) (lib/A.(lib/B, kotlin/Int, kotlin/Int) -> kotlin/Int)?|, [ResolvedTo(BODY_RESOLVE)] p4: R|@ContextFunctionTypeParams(2) suspend lib/A.(lib/B, kotlin/Int, kotlin/Int) -> kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] block: R|@ContextFunctionTypeParams(1) (T2) -> R|): R|R| {
    ^myContext Null(null)!!
}

FIR FILE:
FILE: [ResolvedTo(IMPORTS)] contextParametersInTypes.kt
    package lib

    context([ResolvedTo(BODY_RESOLVE)] <unused var>: R|T1|)
    public final suspend [ResolvedTo(BODY_RESOLVE)] fun <[ResolvedTo(BODY_RESOLVE)] T1, [ResolvedTo(BODY_RESOLVE)] T2, [ResolvedTo(BODY_RESOLVE)] R> myContext([ResolvedTo(BODY_RESOLVE)] p1: R|@ContextFunctionTypeParams(2) lib/A.(lib/B, kotlin/Int, kotlin/Int) -> kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] p2: R|@ContextFunctionTypeParams(2) @R|lib/MyAnnotation|()  lib/A.(lib/B, kotlin/Int, kotlin/Int) -> kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] p3: R|@ContextFunctionTypeParams(2) (lib/A.(lib/B, kotlin/Int, kotlin/Int) -> kotlin/Int)?|, [ResolvedTo(BODY_RESOLVE)] p4: R|@ContextFunctionTypeParams(2) suspend lib/A.(lib/B, kotlin/Int, kotlin/Int) -> kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] block: R|@ContextFunctionTypeParams(1) (T2) -> R|): R|R| {
        ^myContext Null(null)!!
    }
    public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|lib/A| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] val valueA: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): Int

    }
    public final? [ResolvedTo(RAW_FIR)] class B : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|lib/B| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] val valueB: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] get(): Int

    }
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyAnnotation] constructor(): R|lib/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }