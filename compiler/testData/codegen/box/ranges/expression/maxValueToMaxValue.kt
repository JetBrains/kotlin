// KJS_WITH_FULL_RUNTIME
// TODO: muted automatically, investigate should it be ran for JVM_IR or not
// IGNORE_BACKEND: JVM_IR

// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_RUNTIME


const val MaxI = Int.MAX_VALUE
const val MaxB = Byte.MAX_VALUE
const val MaxS = Short.MAX_VALUE
const val MaxL = Long.MAX_VALUE
const val MaxC = Char.MAX_VALUE
const val MaxUI = UInt.MAX_VALUE
const val MaxUL = ULong.MAX_VALUE

fun box(): String {
    val list1 = ArrayList<Int>()
    val range1 = MaxI..MaxI
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<Int>(MaxI)) {
        return "Wrong elements for MaxI..MaxI: $list1"
    }

    val list2 = ArrayList<Int>()
    val range2 = MaxB..MaxB
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<Int>(MaxB.toInt())) {
        return "Wrong elements for MaxB..MaxB: $list2"
    }

    val list3 = ArrayList<Int>()
    val range3 = MaxS..MaxS
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<Int>(MaxS.toInt())) {
        return "Wrong elements for MaxS..MaxS: $list3"
    }

    val list4 = ArrayList<Long>()
    val range4 = MaxL..MaxL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<Long>(MaxL)) {
        return "Wrong elements for MaxL..MaxL: $list4"
    }

    val list5 = ArrayList<Char>()
    val range5 = MaxC..MaxC
    for (i in range5) {
        list5.add(i)
        if (list5.size > 23) break
    }
    if (list5 != listOf<Char>(MaxC)) {
        return "Wrong elements for MaxC..MaxC: $list5"
    }

    val list6 = ArrayList<UInt>()
    val range6 = MaxUI..MaxUI
    for (i in range6) {
        list6.add(i)
        if (list6.size > 23) break
    }
    if (list6 != listOf<UInt>(MaxUI)) {
        return "Wrong elements for MaxUI..MaxUI: $list6"
    }

    val list7 = ArrayList<ULong>()
    val range7 = MaxUL..MaxUL
    for (i in range7) {
        list7.add(i)
        if (list7.size > 23) break
    }
    if (list7 != listOf<ULong>(MaxUL)) {
        return "Wrong elements for MaxUL..MaxUL: $list7"
    }

    return "OK"
}
