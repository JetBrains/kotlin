namespace <root>

internal open class A : jet.Any {
    public final /*constructor*/ fun <init>(): A
    internal final fun foo(): jet.Tuple0
}
internal final class B : A {
    public final /*constructor*/ fun <init>(): B
    internal final fun bar(): jet.Tuple0
    internal final override /*1*/ fun foo(): jet.Tuple0
}
internal final class C : A {
    public final /*constructor*/ fun <init>(): C
    internal final fun bar(): jet.Tuple0
    internal final override /*1*/ fun foo(): jet.Tuple0
}
internal final fun declarationInsidePattern(/*0*/ x: jet.Tuple2<out jet.Any, out jet.Any>): jet.String
internal final fun declarations(/*0*/ a: jet.Any?): jet.Tuple0
internal final fun f(): jet.String
internal final fun f10(/*0*/ init: A?): jet.Tuple0
internal final fun f101(/*0*/ a: A?): jet.Tuple0
internal final fun f11(/*0*/ a: A?): jet.Tuple0
internal final fun f12(/*0*/ a: A?): jet.Tuple0
internal final fun f13(/*0*/ a: A?): jet.Tuple0
internal final fun f14(/*0*/ a: A?): jet.Tuple0
internal final fun f15(/*0*/ a: A?): jet.Tuple0
internal final fun f9(/*0*/ init: A?): jet.Tuple0
internal final fun foo(/*0*/ a: jet.Any): jet.Int
internal final fun getStringLength(/*0*/ obj: jet.Any): jet.Char?
internal final fun illegalTupleReturnType(/*0*/ a: jet.Any): jet.Tuple2<out jet.Any, out jet.String>
internal final fun illegalWhenBlock(/*0*/ a: jet.Any): jet.Int
internal final fun illegalWhenBody(/*0*/ a: jet.Any): jet.Int
internal final fun mergeAutocasts(/*0*/ a: jet.Any?): jet.Tuple0
internal final fun returnFunctionLiteral(/*0*/ a: jet.Any?): jet.Function0<jet.Int>
internal final fun returnFunctionLiteralBlock(/*0*/ a: jet.Any?): jet.Function0<jet.Int>
internal final fun toInt(/*0*/ i: jet.Int?): jet.Int
internal final fun tuples(/*0*/ a: jet.Any?): jet.Tuple0
internal final fun vars(/*0*/ a: jet.Any?): jet.Tuple0
