/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.kotlin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>/Users/yole/jetbrains/kotlin/compiler/frontend/src/org/jetbrains/kotlin/lexer/Kotlin.flex</tt>
 */
class _JetLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int DOC_COMMENT = 10;
  public static final int LONG_TEMPLATE_ENTRY = 12;
  public static final int UNMATCHED_BACKTICK = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13792 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\14\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\140"+
    "\1\25\45\13\1\141\1\13\1\25\1\30\4\13\1\30\1\142\1\143\1\16\1\13\1\16\1\13"+
    "\1\16\1\143\1\71\3\13\1\144\1\1\1\145\1\114\2\1\1\114\5\13\1\27\2\13\1\146"+
    "\4\13\1\40\1\13\1\147\2\1\1\65\1\13\1\150\1\47\2\13\1\151\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\152\5\1\1\107\2\13\1\144\1\153\1\114"+
    "\2\1\1\154\1\13\1\155\1\42\2\13\1\40\1\1\2\13\1\144\1\1\1\156\1\42\1\13\1"+
    "\150\6\1\1\157\1\160\14\13\4\1\21\13\1\140\2\13\1\140\1\161\1\13\1\150\3\13"+
    "\1\162\1\163\1\164\1\124\1\163\2\1\1\165\4\1\1\166\1\1\1\124\6\1\1\167\1\170"+
    "\1\171\1\172\1\173\3\1\1\174\147\1\2\13\1\147\2\13\1\147\10\13\1\175\1\176"+
    "\2\13\1\132\3\13\1\177\1\1\1\13\1\112\4\200\4\1\1\105\35\1\1\201\2\1\1\202"+
    "\1\25\4\13\1\203\1\25\4\13\1\133\1\107\1\13\1\150\1\25\4\13\1\147\1\1\1\13"+
    "\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\124\4\1\2\13\1"+
    "\150\20\13\1\124\1\13\1\204\1\1\2\13\1\147\1\105\1\13\1\150\4\13\1\40\2\1"+
    "\1\205\1\206\5\13\1\207\1\13\1\150\1\27\3\1\1\205\1\210\1\13\1\31\1\1\3\13"+
    "\1\144\1\206\2\13\1\144\1\1\1\114\1\1\1\211\1\42\1\13\1\40\1\13\1\112\1\1"+
    "\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\212\1\213\2\13\1\46\1\1\1\214\1\114"+
    "\1\13\1\215\3\13\1\216\1\217\1\220\1\30\1\66\1\221\1\222\1\200\2\13\1\133"+
    "\1\40\7\13\1\31\1\114\72\13\1\144\1\13\1\223\2\13\1\151\20\1\26\13\1\150\6"+
    "\13\1\77\2\1\1\112\1\224\1\56\1\225\1\226\6\13\1\16\1\1\1\154\25\13\1\150"+
    "\1\1\4\13\1\206\2\13\1\27\2\1\1\151\7\1\1\212\7\13\1\124\1\1\1\114\1\25\1"+
    "\30\1\25\1\30\1\227\4\13\1\147\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13\1\234\2\13\1\40"+
    "\1\13\1\150\2\13\1\235\3\1\11\13\1\150\1\114\5\1\2\13\1\27\3\13\1\144\11\1"+
    "\23\13\1\112\1\13\1\40\1\27\11\1\1\236\2\13\1\237\1\13\1\40\1\13\1\112\1\13"+
    "\1\147\4\1\1\13\1\240\1\13\1\40\1\13\1\77\4\1\3\13\1\241\4\1\1\71\1\242\1"+
    "\13\1\144\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1\3\13\1\40\1\13"+
    "\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\154"+
    "\2\13\1\27\2\1\1\65\1\1\1\154\2\13\2\1\1\13\1\46\1\114\1\154\1\13\1\112\1"+
    "\65\1\1\2\13\1\243\1\154\2\13\1\31\1\244\1\245\2\1\1\13\1\22\1\151\5\1\1\246"+
    "\1\247\1\46\2\13\1\147\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1\250\1\16\21\1\3"+
    "\13\1\1\1\251\1\114\12\1\2\13\1\147\2\1\1\252\2\1\3\13\1\1\1\253\1\114\2\1"+
    "\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114\1\105\34\1\3"+
    "\13\1\46\20\1\71\13\1\77\16\1\14\13\1\144\53\1\2\13\1\147\75\1\44\13\1\112"+
    "\33\1\43\13\1\46\1\13\1\147\1\114\6\1\1\13\1\150\1\1\3\13\1\1\1\144\1\114"+
    "\1\154\1\254\1\13\67\1\4\13\1\47\1\71\3\1\1\154\6\1\1\16\77\1\6\13\1\30\1"+
    "\124\1\46\1\77\66\1\5\13\1\212\3\13\1\143\1\255\1\256\1\257\3\13\1\260\1\261"+
    "\1\13\1\262\1\263\1\36\24\13\1\264\1\13\1\36\1\133\1\13\1\133\1\13\1\212\1"+
    "\13\1\212\1\147\1\13\1\147\1\13\1\56\1\13\1\56\1\13\1\265\3\266\14\13\1\47"+
    "\123\1\1\257\1\13\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\151\1\276\1"+
    "\151\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\150\150\13\1\16\25\1\41\13\1"+
    "\150\36\1");

  /* The ZZ_CMAP_A table has 3056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\10\1\40\1\41\1\40\22\0\1\4\1\14\1\30\1\13\1\11\1\72\1\70\1\25"+
    "\1\76\1\77\1\37\1\65\1\101\1\24\1\21\1\12\1\15\11\1\1\73\1\100\1\66\1\63\1"+
    "\67\1\64\1\102\1\3\1\17\2\3\1\23\1\22\5\5\1\20\13\5\1\16\2\5\1\74\1\26\1\75"+
    "\1\0\1\2\1\7\1\45\1\56\1\52\1\62\1\44\1\51\1\55\1\33\1\34\1\57\1\54\1\46\1"+
    "\5\1\47\1\53\1\43\1\5\1\50\1\35\1\32\1\27\1\61\1\60\1\16\1\42\1\5\1\31\1\71"+
    "\1\36\7\0\1\40\24\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\12\5\4\0\14\5\16\0\5"+
    "\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\4\5\1\0\23\5\1\0\13\5\10\0\6\5\1\0\26\5\2\0\1\5\6\0\10\5\10\0\13\5\5"+
    "\0\3\5\15\0\12\6\4\0\6\5\1\0\1\5\17\0\2\5\7\0\2\5\12\6\3\5\2\0\2\5\1\0\16"+
    "\5\15\0\11\5\13\0\1\5\16\0\12\6\6\5\4\0\2\5\4\0\1\5\5\0\6\5\4\0\1\5\11\0\1"+
    "\5\3\0\1\5\7\0\11\5\7\0\5\5\17\0\26\5\3\0\1\5\2\0\1\5\7\0\12\5\4\0\12\6\1"+
    "\5\4\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0"+
    "\2\5\1\0\1\5\5\0\6\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5\17\0\4\5\1\0\1\5\7\0"+
    "\12\6\2\0\3\5\20\0\11\5\1\0\2\5\1\0\2\5\1\0\5\5\3\0\1\5\2\0\1\5\30\0\1\5\13"+
    "\0\10\5\2\0\1\5\3\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3"+
    "\0\2\5\3\0\3\5\3\0\14\5\13\0\10\5\1\0\2\5\10\0\3\5\5\0\4\5\1\0\5\5\3\0\1\5"+
    "\3\0\2\5\15\0\13\5\2\0\1\5\21\0\1\5\12\0\6\5\5\0\22\5\3\0\10\5\1\0\11\5\1"+
    "\0\1\5\2\0\7\5\11\0\1\5\1\0\2\5\14\0\12\6\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5"+
    "\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0\2\5\11"+
    "\0\1\5\2\0\5\5\1\0\1\5\11\0\12\6\2\0\14\5\1\0\24\5\13\0\5\5\3\0\6\5\4\0\4"+
    "\5\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5\1\0\6\5\1\0\1\5\5\0\1\5\2\0\13"+
    "\5\1\0\15\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\1\5\1\0\4\5\2\0\7\5\1\0\1"+
    "\5\1\0\4\5\2\0\16\5\2\0\6\5\2\0\15\5\2\0\1\5\1\0\10\5\7\0\15\5\1\0\6\5\23"+
    "\0\1\5\4\0\1\5\3\0\11\5\1\0\1\5\5\0\17\5\1\0\16\5\2\0\14\5\13\0\1\5\15\0\7"+
    "\5\7\0\16\5\15\0\2\5\12\6\3\0\3\5\11\0\4\5\1\0\4\5\3\0\2\5\11\0\10\5\1\0\1"+
    "\5\1\0\1\5\1\0\1\5\1\0\6\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5"+
    "\14\0\2\40\7\0\1\5\15\0\1\5\2\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1"+
    "\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5\4\0\2\5\13\0\5"+
    "\5\6\0\4\5\3\0\2\5\14\0\10\5\7\0\10\5\1\0\7\5\6\0\2\5\12\0\5\5\5\0\2\5\3\0"+
    "\7\5\6\0\3\5\12\6\2\5\13\0\11\5\2\0\27\5\2\0\7\5\1\0\3\5\1\0\4\5\1\0\4\5\2"+
    "\0\6\5\3\0\1\5\1\0\1\5\2\0\5\5\1\0\12\5\12\6\5\5\1\0\3\5\1\0\10\5\4\0\7\5"+
    "\3\0\1\5\3\0\2\5\1\0\1\5\3\0\2\5\2\0\5\5\2\0\1\5\1\0\1\5\30\0\3\5\3\0\6\5"+
    "\2\0\6\5\2\0\6\5\11\0\7\5\4\0\5\5\3\0\5\5\5\0\1\5\1\0\10\5\1\0\5\5\1\0\1\5"+
    "\1\0\2\5\1\0\2\5\1\0\12\5\6\0\12\5\2\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\14"+
    "\5\1\0\16\5\1\0\2\5\1\0\2\5\1\0\10\5\6\0\4\5\4\0\16\5\2\0\1\5\1\0\14\5\1\0"+
    "\2\5\3\0\1\5\2\0\4\5\1\0\2\5\12\0\10\5\6\0\6\5\1\0\3\5\1\0\12\5\3\0\1\5\12"+
    "\0\4\5\13\0\12\6\1\5\1\0\1\5\3\0\7\5\1\0\1\5\1\0\4\5\1\0\17\5\1\0\2\5\14\0"+
    "\3\5\4\0\2\5\1\0\1\5\20\0\4\5\10\0\1\5\13\0\10\5\5\0\3\5\2\0\1\5\2\0\2\5\2"+
    "\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0\21\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\14\5"+
    "\1\0\4\5\1\0\5\5\1\0\1\5\3\0\14\5\2\0\13\5\1\0\10\5\2\0\22\6\1\0\2\5\1\0\1"+
    "\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1"+
    "\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1\0\12\5\1\0\5\5\1\0\3\5"+
    "\1\0\5\5\1\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\3\3\1\16\1\17\14\3\1\20\1\21\1\22\1\23"+
    "\1\24\2\1\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\36\1\1\1\40"+
    "\2\36\1\41\1\1\1\41\3\42\1\43\1\44\1\2"+
    "\1\0\2\45\1\0\1\46\1\0\1\47\1\50\1\51"+
    "\1\52\1\0\1\53\1\0\2\2\1\45\1\54\1\55"+
    "\1\56\1\57\2\13\1\0\3\3\1\60\1\61\1\62"+
    "\1\3\1\63\2\3\1\64\13\3\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\0\1\102\2\103\2\0\1\41\1\104"+
    "\1\105\1\0\1\106\1\45\1\3\1\0\1\107\1\110"+
    "\1\111\1\112\1\0\1\113\1\114\4\3\1\115\4\3"+
    "\1\116\2\3\1\117\1\3\1\120\6\3\1\121\1\122"+
    "\1\123\2\0\1\124\2\41\1\46\1\125\1\126\1\127"+
    "\2\3\1\130\3\3\1\131\1\132\7\3\1\133\1\101"+
    "\1\0\1\134\1\135\3\3\1\136\2\3\1\137\1\140"+
    "\2\3\1\141\1\142\1\0\1\3\1\143\2\3\1\144"+
    "\1\3\1\145\2\3\1\146\3\3\1\147\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u0192\0\u053c\0\u057f\0\u05c2"+
    "\0\u0192\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u0192"+
    "\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0192"+
    "\0\u0192\0\u0192\0\u0192\0\u0b84\0\u0192\0\u0192\0\u0bc7\0\u0192"+
    "\0\u0c0a\0\u0c4d\0\u0192\0\u0192\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"+
    "\0\u0192\0\u0d9c\0\u0ddf\0\u0192\0\u0192\0\u0e22\0\u0e65\0\u0192"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u0192\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u0192"+
    "\0\u0192\0\u0192\0\u0192\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u0218\0\u13a1\0\u0218\0\u13e4\0\u0192\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u0218\0\u17d1\0\u0192\0\u0192\0\u0192"+
    "\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u1814"+
    "\0\u1857\0\u0192\0\u0192\0\u189a\0\u18dd\0\u1920\0\u1963\0\u0192"+
    "\0\u0192\0\u19a6\0\u0192\0\u19e9\0\u0192\0\u1a2c\0\u1a6f\0\u1ab2"+
    "\0\u1ab2\0\u0192\0\u1af5\0\u0192\0\u0192\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u0218\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u0192\0\u1d50"+
    "\0\u1d93\0\u0218\0\u1dd6\0\u0218\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u0218\0\u0218\0\u0192\0\u1fab\0\u1fee\0\u18dd"+
    "\0\u0192\0\u2031\0\u0192\0\u0192\0\u0192\0\u0218\0\u2074\0\u20b7"+
    "\0\u0218\0\u20fa\0\u213d\0\u2180\0\u0218\0\u0218\0\u21c3\0\u2206"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u0218\0\u0192\0\u2398"+
    "\0\u0cd3\0\u0218\0\u23db\0\u241e\0\u2461\0\u0218\0\u24a4\0\u24e7"+
    "\0\u0218\0\u0218\0\u252a\0\u256d\0\u0218\0\u0218\0\u25b0\0\u25f3"+
    "\0\u0218\0\u2636\0\u2679\0\u0218\0\u26bc\0\u0218\0\u26ff\0\u2742"+
    "\0\u0218\0\u2785\0\u27c8\0\u280b\0\u0218\0\u0218\0\u0218";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\2\11\1\12\1\11\1\7\1\13\1\12"+
    "\1\14\1\15\1\16\1\17\1\20\3\11\1\21\2\11"+
    "\1\22\1\23\1\7\1\11\1\24\1\25\1\26\1\11"+
    "\1\27\1\30\1\31\1\32\1\0\1\12\1\11\1\33"+
    "\1\34\1\35\1\11\1\36\1\37\1\40\1\41\1\42"+
    "\2\11\1\43\1\11\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\10\67\1\70"+
    "\1\71\14\67\1\72\1\67\1\73\62\67\1\74\1\71"+
    "\14\67\1\74\1\67\1\75\52\67\2\7\2\76\1\7"+
    "\1\76\1\7\1\77\1\0\5\7\3\76\1\7\2\76"+
    "\3\7\1\76\2\7\1\100\3\76\2\7\2\0\21\76"+
    "\20\7\12\101\1\102\24\101\1\103\1\0\42\101\1\7"+
    "\1\10\2\11\1\12\1\11\1\7\1\13\1\12\1\14"+
    "\1\15\1\16\1\17\1\20\3\11\1\21\2\11\1\22"+
    "\1\23\1\7\1\11\1\24\1\104\1\26\1\11\1\27"+
    "\1\30\1\105\1\32\1\0\1\12\1\11\1\33\1\34"+
    "\1\35\1\11\1\36\1\37\1\40\1\41\1\42\2\11"+
    "\1\43\1\11\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\104\0\2\10\12\0"+
    "\1\10\2\0\1\106\1\107\1\110\1\111\20\0\1\111"+
    "\1\0\1\106\2\0\1\110\32\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\4\0\21\11\24\0\1\12\3\0\1\12\30\0\1\12"+
    "\41\0\7\112\2\0\72\112\2\0\2\113\1\0\1\113"+
    "\1\0\1\114\6\0\3\113\1\0\2\113\3\0\1\113"+
    "\2\0\4\113\4\0\21\113\32\0\1\115\24\0\1\116"+
    "\23\0\1\117\33\0\1\120\122\0\1\121\26\0\1\122"+
    "\20\0\2\123\12\0\1\123\1\124\1\125\1\106\1\107"+
    "\1\110\1\111\20\0\1\111\1\0\1\106\2\0\1\110"+
    "\4\0\1\125\25\0\1\126\13\0\1\126\3\0\1\127"+
    "\105\0\1\130\36\0\1\131\3\0\1\132\13\0\10\23"+
    "\1\0\14\23\1\133\1\134\54\23\30\0\1\135\53\0"+
    "\3\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\1\11\1\136\2\11\4\0\1\137\5\11"+
    "\1\140\12\11\21\0\3\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\3\11\1\141\4\0"+
    "\5\11\1\142\1\11\1\143\11\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\144\2\0"+
    "\4\11\4\0\21\11\103\0\1\145\20\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\3\11\1\146\15\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\4\11\1\147\14\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\3\11\1\150\4\0\21\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\151\2\0\4\11"+
    "\4\0\21\11\21\0\3\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\4\0\2\11"+
    "\1\152\16\11\21\0\3\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\153\2\0\4\11\4\0\3\11"+
    "\1\154\5\11\1\155\7\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\4\0\4\11\1\156\4\11\1\157\7\11\21\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\4\0\14\11\1\160\4\11\21\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\4\0\6\11\1\161\12\11\21\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\1\11\1\162\2\11\4\0\21\11\21\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\4\0\3\11\1\163\15\11\21\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\4\0\11\11\1\164\7\11\103\0\1\165"+
    "\3\0\1\166\76\0\1\167\1\0\1\170\100\0\1\171"+
    "\102\0\1\172\107\0\1\173\103\0\1\174\74\0\1\175"+
    "\112\0\1\176\107\0\1\177\2\0\10\67\2\0\14\67"+
    "\1\0\1\67\1\0\52\67\2\0\2\200\1\0\1\200"+
    "\1\0\1\201\6\0\3\200\1\0\2\200\3\0\1\200"+
    "\1\0\1\202\4\200\4\0\21\200\20\0\10\203\1\0"+
    "\16\203\1\204\53\203\30\0\1\205\53\0\3\76\1\0"+
    "\2\76\6\0\4\76\1\0\2\76\3\0\1\76\2\0"+
    "\4\76\4\0\21\76\20\0\7\206\2\0\72\206\1\0"+
    "\3\76\1\0\2\76\6\0\4\76\1\0\2\76\3\0"+
    "\1\76\2\0\1\76\1\207\2\76\4\0\21\76\57\0"+
    "\1\210\55\0\1\211\111\0\1\212\62\0\1\126\13\0"+
    "\1\126\3\0\1\213\62\0\2\214\12\0\1\214\4\0"+
    "\1\110\1\0\1\214\24\0\1\110\13\0\1\214\15\0"+
    "\7\112\1\215\1\0\72\112\1\0\3\113\1\0\2\113"+
    "\6\0\4\113\1\0\2\113\3\0\1\113\2\0\4\113"+
    "\4\0\21\113\20\0\7\216\2\0\72\216\10\115\1\0"+
    "\72\115\37\0\1\217\43\0\10\120\1\0\72\120\35\0"+
    "\1\220\11\0\1\221\116\0\1\222\20\0\2\123\12\0"+
    "\1\123\3\0\1\223\1\110\1\111\20\0\1\111\4\0"+
    "\1\110\32\0\3\124\11\0\1\124\1\0\1\124\1\106"+
    "\1\212\2\124\20\0\2\124\1\106\2\0\2\124\3\0"+
    "\1\124\3\0\1\124\21\0\2\125\12\0\1\125\2\0"+
    "\1\106\1\212\24\0\1\106\35\0\2\126\12\0\1\126"+
    "\4\0\1\110\1\111\20\0\1\111\4\0\1\110\52\0"+
    "\1\224\61\0\10\23\1\0\72\23\30\0\1\225\53\0"+
    "\3\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\2\11\1\226\1\11\4\0\6\11\1\227"+
    "\12\11\21\0\3\11\1\0\2\11\6\0\4\11\1\0"+
    "\2\11\3\0\1\11\2\0\4\11\4\0\1\11\1\230"+
    "\17\11\21\0\3\11\1\0\2\11\6\0\4\11\1\0"+
    "\2\11\3\0\1\231\2\0\4\11\4\0\1\232\20\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\1\233\3\11\4\0\21\11\21\0"+
    "\3\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\4\0\1\11\1\234\17\11\21\0"+
    "\3\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\4\0\10\11\1\235\10\11\21\0"+
    "\3\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\3\11\1\236\4\0\21\11\21\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\4\0\21\11\1\0\1\237\17\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\4\0\4\11\1\240\14\11\21\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\1\241\3\11\4\0\21\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\5\11\1\242\13\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\4\11\1\243\14\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\6\11\1\244\12\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\3\11\1\245\15\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\5\11\1\246\13\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\15\11\1\247\3\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\2\11\1\250\16\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\2\11\1\251\1\11\4\0\2\11\1\252\16\11\21\0"+
    "\3\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\4\0\4\11\1\253\1\11\1\254"+
    "\12\11\103\0\1\255\20\0\3\200\1\0\2\200\6\0"+
    "\4\200\1\0\2\200\3\0\1\200\2\0\4\200\4\0"+
    "\21\200\20\0\7\256\2\0\72\256\1\0\1\257\1\0"+
    "\1\257\11\0\1\257\1\0\1\257\2\0\2\257\20\0"+
    "\2\257\3\0\2\257\3\0\1\257\3\0\1\257\50\0"+
    "\1\260\52\0\7\206\1\261\1\0\72\206\1\0\3\76"+
    "\1\0\2\76\6\0\4\76\1\0\2\76\3\0\1\76"+
    "\2\0\2\76\1\262\1\76\4\0\21\76\41\0\1\213"+
    "\62\0\2\214\12\0\1\214\4\0\1\110\26\0\1\110"+
    "\31\0\7\216\1\263\1\0\72\216\12\0\1\264\71\0"+
    "\3\265\1\0\2\265\6\0\4\265\1\0\2\265\3\0"+
    "\1\265\2\0\4\265\4\0\21\265\21\0\1\126\13\0"+
    "\1\126\66\0\3\11\1\0\2\11\6\0\4\11\1\0"+
    "\2\11\3\0\1\11\2\0\3\11\1\266\4\0\21\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\4\0\11\11\1\267\7\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\4\0\2\11\1\270\16\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\4\0\2\11\1\271\16\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\4\0\2\11\1\272\16\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\4\0\2\11\1\273\16\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\4\0\12\11\1\274\6\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\4\0\2\11\1\275\16\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\4\0\4\11\1\276\14\11"+
    "\21\0\3\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\277\2\0\4\11\4\0\21\11\21\0\3\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\3\11\1\300\4\0\21\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\3\11\1\301\4\0\21\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\1\302"+
    "\3\11\4\0\21\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\2\11\1\303\16\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\3\11\1\304\15\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\4\11\1\305\14\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\5\11\1\306\13\11\20\0\7\256\1\307\1\0\72\256"+
    "\1\0\1\310\1\0\1\310\11\0\1\310\1\0\1\310"+
    "\2\0\2\310\20\0\2\310\3\0\2\310\3\0\1\310"+
    "\3\0\1\310\21\0\3\76\1\0\2\76\6\0\4\76"+
    "\1\0\2\76\3\0\1\76\2\0\3\76\1\311\4\0"+
    "\21\76\21\0\3\11\1\0\2\11\6\0\4\11\1\0"+
    "\2\11\3\0\1\11\2\0\4\11\4\0\16\11\1\312"+
    "\2\11\21\0\3\11\1\0\2\11\6\0\4\11\1\0"+
    "\2\11\3\0\1\11\2\0\4\11\4\0\3\11\1\313"+
    "\5\11\1\314\7\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\6\11\1\315\12\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\6\11\1\316\12\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\3\11\1\317\15\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\6\11\1\320\12\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\2\11\1\321\16\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\3\11\1\322"+
    "\4\0\21\11\21\0\3\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\2\11\1\323\1\11"+
    "\4\0\21\11\21\0\3\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\4\0\10\11"+
    "\1\324\10\11\21\0\3\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\4\0\12\11"+
    "\1\325\6\11\21\0\3\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\4\0\2\11"+
    "\1\326\16\11\21\0\1\327\1\0\1\327\11\0\1\327"+
    "\1\0\1\327\2\0\2\327\20\0\2\327\3\0\2\327"+
    "\3\0\1\327\3\0\1\327\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\4\0\4\11\1\330\14\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\4\0\7\11\1\331\11\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\4\0\7\11\1\332\11\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\4\0\13\11\1\333\5\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\4\0\5\11\1\334\13\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\4\0\5\11\1\335\13\11\21\0\3\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\1\336"+
    "\3\11\4\0\21\11\21\0\1\203\1\0\1\203\11\0"+
    "\1\203\1\0\1\203\2\0\2\203\20\0\2\203\3\0"+
    "\2\203\3\0\1\203\3\0\1\203\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\2\11\1\337\1\11\4\0\21\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\3\11\1\340\15\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\4\0\2\11\1\341\16\11\21\0\3\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\342\2\0"+
    "\4\11\4\0\21\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\3\11\1\343\15\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\10\11\1\344\10\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\4\0"+
    "\2\11\1\345\16\11\21\0\3\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\3\11\1\346"+
    "\4\0\21\11\21\0\3\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\4\0\2\11"+
    "\1\347\16\11\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10318];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\15\1\1\11\3\1\1\11\16\1\1\11"+
    "\7\1\4\11\1\1\2\11\1\1\1\11\2\1\2\11"+
    "\4\1\1\11\2\1\2\11\1\1\1\0\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\4\1\4\11\1\1\1\0\7\1\1\11\20\1"+
    "\12\11\1\1\1\0\2\11\1\1\2\0\1\1\2\11"+
    "\1\0\1\11\1\1\1\11\1\0\3\1\1\11\1\0"+
    "\2\11\11\1\1\11\15\1\1\11\2\0\1\1\1\11"+
    "\1\1\3\11\21\1\1\11\1\0\16\1\1\0\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    private IElementType commentStateToTokenType(int state) {
        switch (state) {
            case BLOCK_COMMENT:
                return KtTokens.BLOCK_COMMENT;
            case DOC_COMMENT:
                return KtTokens.DOC_COMMENT;
            default:
                throw new IllegalArgumentException("Unexpected state: " + state);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _JetLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws KotlinLexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new KotlinLexerException(message + "\n at '" + yytext() + "'\n" + zzBuffer);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws KotlinLexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException, KotlinLexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }
            case 232: break;
            case DOC_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }
            case 233: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 106: break;
          case 2: 
            { return KtTokens.INTEGER_LITERAL;
            }
          case 107: break;
          case 3: 
            { return KtTokens.IDENTIFIER;
            }
          case 108: break;
          case 4: 
            { return KtTokens.WHITE_SPACE;
            }
          case 109: break;
          case 5: 
            { pushState(UNMATCHED_BACKTICK); return TokenType.BAD_CHARACTER;
            }
          case 110: break;
          case 6: 
            { return KtTokens.DIV       ;
            }
          case 111: break;
          case 7: 
            { return KtTokens.HASH      ;
            }
          case 112: break;
          case 8: 
            { return KtTokens.EXCL      ;
            }
          case 113: break;
          case 9: 
            { return KtTokens.DOT       ;
            }
          case 114: break;
          case 10: 
            { return KtTokens.MINUS     ;
            }
          case 115: break;
          case 11: 
            { return KtTokens.CHARACTER_LITERAL;
            }
          case 116: break;
          case 12: 
            { pushState(STRING); return KtTokens.OPEN_QUOTE;
            }
          case 117: break;
          case 13: 
            { return KtTokens.LBRACE    ;
            }
          case 118: break;
          case 14: 
            { return KtTokens.RBRACE    ;
            }
          case 119: break;
          case 15: 
            { return KtTokens.MUL       ;
            }
          case 120: break;
          case 16: 
            { return KtTokens.EQ        ;
            }
          case 121: break;
          case 17: 
            { return KtTokens.QUEST     ;
            }
          case 122: break;
          case 18: 
            { return KtTokens.PLUS      ;
            }
          case 123: break;
          case 19: 
            { return KtTokens.LT        ;
            }
          case 124: break;
          case 20: 
            { return KtTokens.GT        ;
            }
          case 125: break;
          case 21: 
            { return KtTokens.PERC      ;
            }
          case 126: break;
          case 22: 
            { return KtTokens.COLON     ;
            }
          case 127: break;
          case 23: 
            { return KtTokens.LBRACKET  ;
            }
          case 128: break;
          case 24: 
            { return KtTokens.RBRACKET  ;
            }
          case 129: break;
          case 25: 
            { return KtTokens.LPAR      ;
            }
          case 130: break;
          case 26: 
            { return KtTokens.RPAR      ;
            }
          case 131: break;
          case 27: 
            { return KtTokens.SEMICOLON ;
            }
          case 132: break;
          case 28: 
            { return KtTokens.COMMA     ;
            }
          case 133: break;
          case 29: 
            { return KtTokens.AT        ;
            }
          case 134: break;
          case 30: 
            { return KtTokens.REGULAR_STRING_PART;
            }
          case 135: break;
          case 31: 
            { popState(); yypushback(1); return KtTokens.DANGLING_NEWLINE;
            }
          case 136: break;
          case 32: 
            { popState(); return KtTokens.CLOSING_QUOTE;
            }
          case 137: break;
          case 33: 
            { popState(); return KtTokens.IDENTIFIER;
            }
          case 138: break;
          case 34: 
            { 
            }
          case 139: break;
          case 35: 
            { lBraceCount++; return KtTokens.LBRACE;
            }
          case 140: break;
          case 36: 
            { if (lBraceCount == 0) {
                                             popState();
                                             return KtTokens.LONG_TEMPLATE_ENTRY_END;
                                           }
                                           lBraceCount--;
                                           return KtTokens.RBRACE;
            }
          case 141: break;
          case 37: 
            { return KtTokens.FLOAT_LITERAL;
            }
          case 142: break;
          case 38: 
            { return KtTokens.FIELD_IDENTIFIER;
            }
          case 143: break;
          case 39: 
            { return KtTokens.EOL_COMMENT;
            }
          case 144: break;
          case 40: 
            { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          case 145: break;
          case 41: 
            { return KtTokens.DIVEQ     ;
            }
          case 146: break;
          case 42: 
            { if (zzCurrentPos == 0) {
                return KtTokens.SHEBANG_COMMENT;
            }
            else {
                yypushback(yylength() - 1);
                return KtTokens.HASH;
            }
            }
          case 147: break;
          case 43: 
            { return KtTokens.EXCLEQ    ;
            }
          case 148: break;
          case 44: 
            { return KtTokens.RANGE     ;
            }
          case 149: break;
          case 45: 
            { return KtTokens.MINUSMINUS;
            }
          case 150: break;
          case 46: 
            { return KtTokens.MINUSEQ   ;
            }
          case 151: break;
          case 47: 
            { return KtTokens.ARROW     ;
            }
          case 152: break;
          case 48: 
            { return KtTokens.IS_KEYWORD ;
            }
          case 153: break;
          case 49: 
            { return KtTokens.IN_KEYWORD ;
            }
          case 154: break;
          case 50: 
            { return KtTokens.IF_KEYWORD ;
            }
          case 155: break;
          case 51: 
            { return KtTokens.MULTEQ    ;
            }
          case 156: break;
          case 52: 
            { return KtTokens.AS_KEYWORD ;
            }
          case 157: break;
          case 53: 
            { return KtTokens.DO_KEYWORD ;
            }
          case 158: break;
          case 54: 
            { return KtTokens.EQEQ      ;
            }
          case 159: break;
          case 55: 
            { return KtTokens.DOUBLE_ARROW;
            }
          case 160: break;
          case 56: 
            { return KtTokens.PLUSEQ    ;
            }
          case 161: break;
          case 57: 
            { return KtTokens.PLUSPLUS  ;
            }
          case 162: break;
          case 58: 
            { return KtTokens.LTEQ      ;
            }
          case 163: break;
          case 59: 
            { return KtTokens.GTEQ      ;
            }
          case 164: break;
          case 60: 
            { return KtTokens.ANDAND    ;
            }
          case 165: break;
          case 61: 
            { return KtTokens.OROR      ;
            }
          case 166: break;
          case 62: 
            { return KtTokens.PERCEQ    ;
            }
          case 167: break;
          case 63: 
            { return KtTokens.COLONCOLON;
            }
          case 168: break;
          case 64: 
            { return KtTokens.DOUBLE_SEMICOLON;
            }
          case 169: break;
          case 65: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return KtTokens.SHORT_TEMPLATE_ENTRY_START;
            }
          case 170: break;
          case 66: 
            { pushState(LONG_TEMPLATE_ENTRY); return KtTokens.LONG_TEMPLATE_ENTRY_START;
            }
          case 171: break;
          case 67: 
            { return KtTokens.ESCAPE_SEQUENCE;
            }
          case 172: break;
          case 68: 
            { commentDepth++;
            }
          case 173: break;
          case 69: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return commentStateToTokenType(state);
        }
            }
          case 174: break;
          case 70: 
            { yypushback(2); return KtTokens.INTEGER_LITERAL;
            }
          case 175: break;
          case 71: 
            { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          case 176: break;
          case 72: 
            { return KtTokens.NOT_IS;
            }
          case 177: break;
          case 73: 
            { return KtTokens.NOT_IN;
            }
          case 178: break;
          case 74: 
            { return KtTokens.EXCLEQEQEQ;
            }
          case 179: break;
          case 75: 
            { return KtTokens.RESERVED  ;
            }
          case 180: break;
          case 76: 
            { pushState(RAW_STRING); return KtTokens.OPEN_QUOTE;
            }
          case 181: break;
          case 77: 
            { return KtTokens.TRY_KEYWORD ;
            }
          case 182: break;
          case 78: 
            { return KtTokens.AS_SAFE;
            }
          case 183: break;
          case 79: 
            { return KtTokens.FUN_KEYWORD ;
            }
          case 184: break;
          case 80: 
            { return KtTokens.FOR_KEYWORD ;
            }
          case 185: break;
          case 81: 
            { return KtTokens.VAL_KEYWORD ;
            }
          case 186: break;
          case 82: 
            { return KtTokens.VAR_KEYWORD ;
            }
          case 187: break;
          case 83: 
            { return KtTokens.EQEQEQ    ;
            }
          case 188: break;
          case 84: 
            { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return KtTokens.CLOSING_QUOTE;
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return KtTokens.REGULAR_STRING_PART;
                                    }
            }
          case 189: break;
          case 85: 
            { return KtTokens.BLOCK_COMMENT;
            }
          case 190: break;
          case 86: 
            { yypushback(3); return KtTokens.EXCL;
            }
          case 191: break;
          case 87: 
            { return KtTokens.THIS_KEYWORD ;
            }
          case 192: break;
          case 88: 
            { return KtTokens.TRUE_KEYWORD ;
            }
          case 193: break;
          case 89: 
            { return KtTokens.ELSE_KEYWORD ;
            }
          case 194: break;
          case 90: 
            { return KtTokens.NULL_KEYWORD ;
            }
          case 195: break;
          case 91: 
            { return KtTokens.WHEN_KEYWORD ;
            }
          case 196: break;
          case 92: 
            { popState(); return KtTokens.THIS_KEYWORD;
            }
          case 197: break;
          case 93: 
            { return KtTokens.THROW_KEYWORD ;
            }
          case 198: break;
          case 94: 
            { return KtTokens.SUPER_KEYWORD ;
            }
          case 199: break;
          case 95: 
            { return KtTokens.FALSE_KEYWORD ;
            }
          case 200: break;
          case 96: 
            { return KtTokens.CLASS_KEYWORD ;
            }
          case 201: break;
          case 97: 
            { return KtTokens.BREAK_KEYWORD ;
            }
          case 202: break;
          case 98: 
            { return KtTokens.WHILE_KEYWORD ;
            }
          case 203: break;
          case 99: 
            { return KtTokens.TYPEOF_KEYWORD ;
            }
          case 204: break;
          case 100: 
            { return KtTokens.RETURN_KEYWORD ;
            }
          case 205: break;
          case 101: 
            { return KtTokens.OBJECT_KEYWORD ;
            }
          case 206: break;
          case 102: 
            { return KtTokens.PACKAGE_KEYWORD ;
            }
          case 207: break;
          case 103: 
            { return KtTokens.CONTINUE_KEYWORD ;
            }
          case 208: break;
          case 104: 
            { return KtTokens.TYPE_ALIAS_KEYWORD ;
            }
          case 209: break;
          case 105: 
            { return KtTokens.INTERFACE_KEYWORD ;
            }
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
