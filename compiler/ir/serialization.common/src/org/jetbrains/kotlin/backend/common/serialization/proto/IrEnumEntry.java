// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry}
 */
public  final class IrEnumEntry extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrEnumEntry, IrEnumEntry.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
    IrEnumEntryOrBuilder {
  private IrEnumEntry() {
  }
  private int bitField0_;
  public static final int BASE_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public boolean hasBase() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
    return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance() : base_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
    value.getClass();  // minimal bytecode null check
    base_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
    value.getClass();  // minimal bytecode null check
    if (base_ != null &&
        base_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.getDefaultInstance()) {
      base_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.newBuilder(base_).mergeFrom(value).buildPartial();
    } else {
      base_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
   */
  private void clearBase() {  base_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int NAME_FIELD_NUMBER = 2;
  private int name_;
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   * @return Whether the name field is set.
   */
  @java.lang.Override
  public boolean hasName() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   * @return The name.
   */
  @java.lang.Override
  public int getName() {
    return name_;
  }
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   * @param value The name to set.
   */
  private void setName(int value) {
    bitField0_ |= 0x00000002;
    name_ = value;
  }
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   */
  private void clearName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    name_ = 0;
  }

  public static final int INITIALIZER_FIELD_NUMBER = 3;
  private int initializer_;
  /**
   * <code>int32 initializer = 3;</code>
   * @return Whether the initializer field is set.
   */
  @java.lang.Override
  public boolean hasInitializer() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>int32 initializer = 3;</code>
   * @return The initializer.
   */
  @java.lang.Override
  public int getInitializer() {
    return initializer_;
  }
  /**
   * <code>int32 initializer = 3;</code>
   * @param value The initializer to set.
   */
  private void setInitializer(int value) {
    bitField0_ |= 0x00000004;
    initializer_ = value;
  }
  /**
   * <code>int32 initializer = 3;</code>
   */
  private void clearInitializer() {
    bitField0_ = (bitField0_ & ~0x00000004);
    initializer_ = 0;
  }

  public static final int CORRESPONDING_CLASS_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrClass correspondingClass_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
   */
  @java.lang.Override
  public boolean hasCorrespondingClass() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getCorrespondingClass() {
    return correspondingClass_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance() : correspondingClass_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setCorrespondingClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
    value.getClass();  // minimal bytecode null check
    correspondingClass_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeCorrespondingClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
    value.getClass();  // minimal bytecode null check
    if (correspondingClass_ != null &&
        correspondingClass_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance()) {
      correspondingClass_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.newBuilder(correspondingClass_).mergeFrom(value).buildPartial();
    } else {
      correspondingClass_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
   */
  private void clearCorrespondingClass() {  correspondingClass_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntryOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBase() {
      return instance.hasBase();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase getBase() {
      return instance.getBase();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      copyOnWrite();
      instance.setBase(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase.Builder builderForValue) {
      copyOnWrite();
      instance.setBase(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase value) {
      copyOnWrite();
      instance.mergeBase(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1 [features = { ... }</code>
     */
    public Builder clearBase() {  copyOnWrite();
      instance.clearBase();
      return this;
    }

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return instance.hasName();
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return instance.getName();
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(int value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }

    /**
     * <code>int32 initializer = 3;</code>
     * @return Whether the initializer field is set.
     */
    @java.lang.Override
    public boolean hasInitializer() {
      return instance.hasInitializer();
    }
    /**
     * <code>int32 initializer = 3;</code>
     * @return The initializer.
     */
    @java.lang.Override
    public int getInitializer() {
      return instance.getInitializer();
    }
    /**
     * <code>int32 initializer = 3;</code>
     * @param value The initializer to set.
     * @return This builder for chaining.
     */
    public Builder setInitializer(int value) {
      copyOnWrite();
      instance.setInitializer(value);
      return this;
    }
    /**
     * <code>int32 initializer = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearInitializer() {
      copyOnWrite();
      instance.clearInitializer();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    @java.lang.Override
    public boolean hasCorrespondingClass() {
      return instance.hasCorrespondingClass();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getCorrespondingClass() {
      return instance.getCorrespondingClass();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public Builder setCorrespondingClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
      copyOnWrite();
      instance.setCorrespondingClass(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public Builder setCorrespondingClass(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder builderForValue) {
      copyOnWrite();
      instance.setCorrespondingClass(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public Builder mergeCorrespondingClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
      copyOnWrite();
      instance.mergeCorrespondingClass(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    public Builder clearCorrespondingClass() {  copyOnWrite();
      instance.clearCorrespondingClass();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "base_",
            "name_",
            "initializer_",
            "correspondingClass_",
          };
          java.lang.String info =
              "\u0004\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0003\u0001\u1509\u0000\u0002" +
              "\u1504\u0001\u0003\u1004\u0002\u0004\u1409\u0003";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry DEFAULT_INSTANCE;
  static {
    IrEnumEntry defaultInstance = new IrEnumEntry();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrEnumEntry.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrEnumEntry> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrEnumEntry> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
