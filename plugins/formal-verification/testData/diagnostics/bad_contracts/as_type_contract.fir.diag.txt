/as_type_contract.kt:(150,154): info: Generated Viper text for getX:
field class_IntHolder$member_x: Int

method global$fun_getX$fun_take$T_Any$return$NT_Int(local$a: dom$Any)
  returns (ret$0: dom$Nullable[Int])
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ensures ret$0 != (dom$Nullable$null(): dom$Nullable[Int]) ==>
    !dom$Type$isSubtype((dom$TypeOf$typeOf(local$a): dom$Type), dom$Type$global$class_IntHolder())
{
  var anonymous$0: dom$Nullable[Ref]
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$a): dom$Type), dom$Type$Any())
  if ((dom$Casting$cast(local$a, dom$Type$special$Nullable(dom$Type$Any())): dom$Nullable[dom$Any]) !=
  (dom$Nullable$null(): dom$Nullable[dom$Any])) {
    anonymous$0 := (dom$Casting$cast(local$a, dom$Type$special$Nullable(dom$Type$global$class_IntHolder())): dom$Nullable[Ref])
  } else {
    anonymous$0 := (dom$Nullable$null(): dom$Nullable[Ref])}
  inhale anonymous$0 != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(anonymous$0, dom$Type$global$class_IntHolder()): Ref).class_IntHolder$member_x, wildcard)
  if (anonymous$0 != (dom$Nullable$null(): dom$Nullable[Ref])) {
    ret$0 := (dom$Casting$cast((dom$Casting$cast(anonymous$0, dom$Type$global$class_IntHolder()): Ref).class_IntHolder$member_x,
      dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int])
  } else {
    ret$0 := (dom$Nullable$null(): dom$Nullable[Int])}
  goto label$ret$0
  label label$ret$0
}

/as_type_contract.kt:(194,236): warning: Viper verification error: Postcondition of global$fun_getX$fun_take$T_Any$return$NT_Int might not hold. Assertion ret$0 != (dom$Nullable$null(): dom$Nullable[Int]) ==> !dom$Type$isSubtype((dom$TypeOf$typeOf(local$a): dom$Type), dom$Type$global$class_IntHolder()) might not hold.
