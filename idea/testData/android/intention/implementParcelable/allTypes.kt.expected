// INTENTION_CLASS: org.jetbrains.kotlin.android.intention.ImplementParcelableAction

import android.os.Parcel
import android.os.Parcelable

open class BaseParcelable(parcel: Parcel) : Parcelable {
    override fun writeToParcel(parcel: Parcel, flags: Int) {

    }

    override fun describeContents(): Int {
        return 0
    }

    companion object CREATOR : Parcelable.Creator<BaseParcelable> {
        override fun createFromParcel(parcel: Parcel): BaseParcelable {
            return BaseParcelable(parcel)
        }

        override fun newArray(size: Int): Array<BaseParcelable?> {
            return arrayOfNulls(size)
        }
    }
}

class MyData() : Parcelable {

    val delegated by lazy { 0 }
    val readonlyField = true

    var field1: Int = 0
    var field2: String = ""
    var field3: Long = 0
    var field4: Byte = 0
    var field5: Char = '\u0000'
    var field6: Short = 0
    var field7: Float = 0.0f
    var field8: Double = 0.0
    var field9: Boolean = false
    var field10: CharSequence = ""

    var arrayfield1: IntArray
    var arrayfield2: Array<String>
    var arrayfield3: LongArray
    var arrayfield4: ByteArray
    var arrayfield5: CharArray
    var arrayfield6: ShortArray // No method for Short
    var arrayfield7: FloatArray
    var arrayfield8: DoubleArray
    var arrayfield9: BooleanArray
    var arrayfield10: Array<CharSequence> // No method for CharSequence

    var goodArray: Array<BaseParcelable> = emptyArray()
    var badArray: Array<Parcelable> = emptyArray()

    var goodList: List<BaseParcelable> = emptyList()
    var badList: List<Parcelable> = emptyList()

    var parcelableProperty: BaseParcelable
    val uninitializedVal: Int

    val fieldWIthGetter: Int
        get() {
            return 0
        }

    var fieldWithCustomGetterAndSetter: Int = 0
        get() {
            return field
        }
        set(value: Int) {
            field = value
        }

    constructor(parcel: Parcel) : this() {
        field1 = parcel.readInt()
        field2 = parcel.readString()
        field3 = parcel.readLong()
        field4 = parcel.readByte()
        field5 = parcel.readInt().toChar()
        field6 = parcel.readInt().toShort()
        field7 = parcel.readFloat()
        field8 = parcel.readDouble()
        field9 = parcel.readByte() != 0.toByte()
        field10 = parcel.readString()
        arrayfield1 = parcel.createIntArray()
        arrayfield2 = parcel.createStringArray()
        arrayfield3 = parcel.createLongArray()
        arrayfield4 = parcel.createByteArray()
        arrayfield5 = parcel.createCharArray()
        arrayfield7 = parcel.createFloatArray()
        arrayfield8 = parcel.createDoubleArray()
        arrayfield9 = parcel.createBooleanArray()
        goodArray = parcel.createTypedArray(BaseParcelable)
        goodList = parcel.createTypedArrayList(BaseParcelable)
        parcelableProperty = parcel.readParcelable(BaseParcelable::class.java.classLoader)
    }

    override fun writeToParcel(parcel: Parcel, flags: Int) {
        parcel.writeInt(field1)
        parcel.writeString(field2)
        parcel.writeLong(field3)
        parcel.writeByte(field4)
        parcel.writeInt(field5.toInt())
        parcel.writeInt(field6.toInt())
        parcel.writeFloat(field7)
        parcel.writeDouble(field8)
        parcel.writeByte(if (field9) 1 else 0)
        parcel.writeString(field10.toString())
        parcel.writeIntArray(arrayfield1)
        parcel.writeStringArray(arrayfield2)
        parcel.writeLongArray(arrayfield3)
        parcel.writeByteArray(arrayfield4)
        parcel.writeCharArray(arrayfield5)
        parcel.writeFloatArray(arrayfield7)
        parcel.writeDoubleArray(arrayfield8)
        parcel.writeBooleanArray(arrayfield9)
        parcel.writeTypedArray(goodArray, flags)
        parcel.writeTypedList(goodList)
        parcel.writeParcelable(parcelableProperty, flags)
    }

    override fun describeContents(): Int {
        return 0
    }

    companion object CREATOR : Parcelable.Creator<MyData> {
        override fun createFromParcel(parcel: Parcel): MyData {
            return MyData(parcel)
        }

        override fun newArray(size: Int): Array<MyData?> {
            return arrayOfNulls(size)
        }
    }
}