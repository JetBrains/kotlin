class ParameterizedInlineFunExtensionTest {
  private var tail$volatile: Any?
    field = "aaa"
    private get(): Any? {
      return <this>.#tail$volatile
    }
    private set(value: Any?) {
      return <this>.#tail$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun <S : Any?> bar$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, res1: S, res2: S): S {
    return res2
  }

  private inline fun <S : Any?> bar$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, res1: S, res2: S): S {
    return res2
  }

  private inline fun <S : Any?> foo$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, res1: S, res2: S, foo: Function1<S, S>): S {
    val res: S = <this>.bar$atomicfu$ATOMIC_ARRAY$Any<S>(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, res1 = res1, res2 = res2)
    return res
  }

  private inline fun <S : Any?> foo$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, res1: S, res2: S, foo: Function1<S, S>): S {
    val res: S = <this>.bar$atomicfu$NATIVE_PROPERTY_REF$Any<S>(handler$atomicfu = handler$atomicfu, res1 = res1, res2 = res2)
    return res
  }

  fun testClose() {
    val res: String = <this>.foo$atomicfu$NATIVE_PROPERTY_REF$Any<String>(handler$atomicfu = local inline fun <tail$volatile-getter>(): Any? {
      return ParameterizedInlineFunExtensionTest<this>::tail$volatile
    }
, res1 = "bbb", res2 = "ccc", foo = local fun <anonymous>(s: String): String {
      return s
    }
)
    assertEquals<String>(expected = "ccc", actual = res)
  }

}

fun box(): String {
  val testClass: ParameterizedInlineFunExtensionTest = ParameterizedInlineFunExtensionTest()
  testClass.testClose()
  return "OK"
}
