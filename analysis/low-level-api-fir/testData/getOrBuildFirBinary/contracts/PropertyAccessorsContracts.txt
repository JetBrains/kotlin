KT element: KtClass
KT element text:
public final class OuterClass public constructor() {
    public final class MyClass public constructor() {
        public final var myInt: kotlin.Int /* compiled code */ /* hasBackingField: true */
            public final get() { /* compiled code */ }
            public final set(value: kotlin.Int) { /* compiled code */ }
    }

    public final class AnotherClass public constructor(multiplier: kotlin.Int) {
        public final val multiplier: kotlin.Int /* compiled code */ /* hasBackingField: true */

        public final var anotherInt: kotlin.Int /* compiled code */ /* hasBackingField: true */
            public final get() { /* compiled code */ }
            public final set(value: kotlin.Int) { /* compiled code */ }
    }

    public final class SomeClass public constructor(multiplier: kotlin.Int?) {
        public final var someInt: kotlin.Int /* compiled code */ /* hasBackingField: true */
            public final get() { /* compiled code */ }
            public final set(value: kotlin.Int) { /* compiled code */ }
    }
}
FIR element: FirRegularClassImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
public final [ResolvedTo(BODY_RESOLVE)] class OuterClass : R|kotlin/Any| {
    public final [ResolvedTo(BODY_RESOLVE)] class AnotherClass : R|kotlin/Any| {
        public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var anotherInt: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherClass] get(): R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherClass] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Int|): R|kotlin/Unit|

        public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] val multiplier: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherClass] get(): R|kotlin/Int|

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherClass] constructor([ResolvedTo(BODY_RESOLVE)] multiplier: R|kotlin/Int|): R|OuterClass.AnotherClass|

    }

    public final [ResolvedTo(BODY_RESOLVE)] class MyClass : R|kotlin/Any| {
        public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var myInt: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] get(): R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Int|): R|kotlin/Unit|

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] constructor(): R|OuterClass.MyClass|

    }

    public final [ResolvedTo(BODY_RESOLVE)] class SomeClass : R|kotlin/Any| {
        public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var someInt: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SomeClass] get(): R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SomeClass] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Int|): R|kotlin/Unit|

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SomeClass] constructor([ResolvedTo(BODY_RESOLVE)] multiplier: R|kotlin/Int?|): R|OuterClass.SomeClass|

    }

    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass|

}
