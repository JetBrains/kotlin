
RAW_FIR:
FILE: classMembers.kt
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] val x: Int = LAZY_EXPRESSION
            public? [RAW_FIR] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [RAW_FIR] fun receive([RAW_FIR] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

IMPORTS:
FILE: classMembers.kt
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] val x: Int = LAZY_EXPRESSION
            public? [RAW_FIR] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [RAW_FIR] fun receive([RAW_FIR] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: classMembers.kt
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] val x: Int = LAZY_EXPRESSION
            public? [RAW_FIR] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [RAW_FIR] fun receive([RAW_FIR] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

COMPANION_GENERATION:
FILE: classMembers.kt
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public? final? [COMPANION_GENERATION] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] val x: Int = LAZY_EXPRESSION
            public? [RAW_FIR] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [RAW_FIR] fun receive([RAW_FIR] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

SUPER_TYPES:
FILE: classMembers.kt
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public? final? [SUPER_TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] val x: Int = LAZY_EXPRESSION
            public? [RAW_FIR] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [RAW_FIR] fun receive([RAW_FIR] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [RAW_FIR] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

TYPES:
FILE: classMembers.kt
    public? final? [SUPER_TYPES] class A : R|kotlin/Any| {
        public? [SUPER_TYPES] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public? final? [TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [SUPER_TYPES] val x: Int = LAZY_EXPRESSION
            public? [SUPER_TYPES] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [SUPER_TYPES] fun receive([SUPER_TYPES] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [SUPER_TYPES] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

STATUS:
FILE: classMembers.kt
    public final [SUPER_TYPES] class A : R|kotlin/Any| {
        public? [SUPER_TYPES] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [STATUS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [SUPER_TYPES] val x: Int = LAZY_EXPRESSION
            public? [SUPER_TYPES] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [SUPER_TYPES] fun receive([SUPER_TYPES] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [SUPER_TYPES] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: classMembers.kt
    public final [SUPER_TYPES] class A : R|kotlin/Any| {
        public? [SUPER_TYPES] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ARGUMENTS_OF_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [SUPER_TYPES] val x: Int = LAZY_EXPRESSION
            public? [SUPER_TYPES] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [SUPER_TYPES] fun receive([SUPER_TYPES] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [SUPER_TYPES] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

CONTRACTS:
FILE: classMembers.kt
    public final [SUPER_TYPES] class A : R|kotlin/Any| {
        public? [SUPER_TYPES] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
            receive#(functionWithLazyBody#())
        }

        public? final? [SUPER_TYPES] val x: Int = LAZY_EXPRESSION
            public? [SUPER_TYPES] [ContainingClassKey=A] get(): Int { LAZY_BLOCK }

        public? final? [SUPER_TYPES] fun receive([SUPER_TYPES] value: String): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [SUPER_TYPES] fun functionWithLazyBody(): String { LAZY_BLOCK }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: classMembers.kt
    public final [STATUS] class A : R|kotlin/Any| {
        public [STATUS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [IMPLICIT_TYPES_BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
            receive#(functionWithLazyBody#())
        }

        public final [STATUS] val x: R|kotlin/Int| = LAZY_EXPRESSION
            public [STATUS] [ContainingClassKey=A] get(): R|kotlin/Int| { LAZY_BLOCK }

        public final [STATUS] fun receive([STATUS] value: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

        public final [STATUS] fun functionWithLazyBody(): R|kotlin/String| { LAZY_BLOCK }

    }

EXPECT_ACTUAL_MATCHING:
FILE: classMembers.kt
    public final [STATUS] class A : R|kotlin/Any| {
        public [STATUS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [EXPECT_ACTUAL_MATCHING] fun resolveMe(): R|kotlin/Unit| {
            receive#(functionWithLazyBody#())
        }

        public final [STATUS] val x: R|kotlin/Int| = LAZY_EXPRESSION
            public [STATUS] [ContainingClassKey=A] get(): R|kotlin/Int| { LAZY_BLOCK }

        public final [STATUS] fun receive([STATUS] value: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }

        public final [STATUS] fun functionWithLazyBody(): R|kotlin/String| { LAZY_BLOCK }

    }

BODY_RESOLVE:
FILE: classMembers.kt
    public final [STATUS] class A : R|kotlin/Any| {
        public [STATUS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
            this@R|/A|.R|/A.receive|(this@R|/A|.R|/A.functionWithLazyBody|())
        }

        public final [STATUS] val x: R|kotlin/Int| = LAZY_EXPRESSION
            public [STATUS] [ContainingClassKey=A] get(): R|kotlin/Int| { LAZY_BLOCK }

        public final [CONTRACTS] fun receive([CONTRACTS] value: R|kotlin/String|): R|kotlin/Unit| {
        }

        public final [CONTRACTS] fun functionWithLazyBody(): R|kotlin/String| {
            ^functionWithLazyBody String(42)
        }

    }

FILE RAW TO BODY:
FILE: classMembers.kt
    public final [BODY_RESOLVE] class A : R|kotlin/Any| {
        public [BODY_RESOLVE] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
            this@R|/A|.R|/A.receive|(this@R|/A|.R|/A.functionWithLazyBody|())
        }

        public final [BODY_RESOLVE] [IsReferredViaField=true] val x: R|kotlin/Int| = Int(10)
            public [BODY_RESOLVE] [ContainingClassKey=A] get(): R|kotlin/Int| {
                ^ this@R|/A|.F|/A.x|
            }

        public final [BODY_RESOLVE] fun receive([BODY_RESOLVE] value: R|kotlin/String|): R|kotlin/Unit| {
        }

        public final [BODY_RESOLVE] fun functionWithLazyBody(): R|kotlin/String| {
            ^functionWithLazyBody String(42)
        }

    }
