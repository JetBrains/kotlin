class B : LinkedList<Int> {
  constructor() /* primary */ {
    super/*LinkedList*/<@FlexibleNullability Int?>()
    /* <init>() */

  }

}

class C : LinkedList<Int> {
  constructor() /* primary */ {
    super/*LinkedList*/<@FlexibleNullability Int?>()
    /* <init>() */

  }

  override fun remove(): Int {
    return 1
  }

  override fun removeAt(index: Int): Int {
    return 1
  }

  override val size: Int
    override get(): Int {
      return super<LinkedList>.<get-size>()
    }

}

class D : LinkedList<Int> {
  constructor() /* primary */ {
    super/*LinkedList*/<@FlexibleNullability Int?>()
    /* <init>() */

  }

  override fun remove(element: Int): Boolean {
    return true
  }

}

fun test(b: B, c: C, d: D) {
  b.get(index = 1) /*~> Unit */
  b.<get-size>() /*~> Unit */
  b.add(element = 1) /*~> Unit */
  b.remove() /*~> Unit */
  b.remove(element = 1) /*~> Unit */
  b.removeAt(p0 = 1) /*~> Unit */
  c.get(index = 1) /*~> Unit */
  c.<get-size>() /*~> Unit */
  c.add(element = 1) /*~> Unit */
  c.remove() /*~> Unit */
  c.remove(element = 1) /*~> Unit */
  c.removeAt(index = 1) /*~> Unit */
  d.remove(element = 1) /*~> Unit */
}
