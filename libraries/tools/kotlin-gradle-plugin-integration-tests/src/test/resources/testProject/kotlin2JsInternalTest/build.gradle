buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin2js'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    implementation "org.mozilla:rhino:1.7.7.1"
}

def classesDir = "${buildDir}/classes/kotlin"

def isIrBackend = project.findProperty("kotlin.js.useIrBackend")?.toBoolean() ?: false
if (isIrBackend) {
    compileKotlin2Js.kotlinOptions.freeCompilerArgs += ["-Xir-produce-klib-dir", "-Xir-only"]
    compileTestKotlin2Js.kotlinOptions.freeCompilerArgs += ["-Xir-produce-js"]
}

task runRhino(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    workingDir = classesDir
    main = 'org.mozilla.javascript.tools.shell.Main'
    if (isIrBackend) {
        // IR backend produces a single JS file
        args = ["-opt", "-1", "test/kotlin2JsInternalTest_test.js", "-f", "check.js"]
    } else {
        args = ["-opt", "-1", "-f", "kotlin.js", "-f", "main/kotlin2JsInternalTest.js", "-f", "test/kotlin2JsInternalTest_test.js", "-f", "check.js"]
    }
}

build.doLast {
    configurations.compileClasspath.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into classesDir
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }
    copy {
        from "."
        include "check.js"
        into classesDir
    }
}

runRhino.dependsOn build