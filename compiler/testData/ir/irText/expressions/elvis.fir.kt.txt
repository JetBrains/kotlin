val p: Any?
  field = null
  get

fun foo(): Any? {
  return null
}

fun test1(a: Any?, b: Any): Any {
  return { // BLOCK
    val <elvis>: Any? = a
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> b
      else -> <elvis>
    }
  }
}

fun test2(a: String?, b: Any): Any {
  return { // BLOCK
    val <elvis>: String? = a
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> b
      else -> <elvis>
    }
  }
}

fun test3(a: Any?, b: Any?): String {
  when {
    b !is String -> return ""
  }
  when {
    a !is String? -> return ""
  }
  return { // BLOCK
    val <elvis>: String? = a /*as String? */
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> b /*as String */
      else -> <elvis>
    }
  }
}

fun test4(x: Any): Any {
  return { // BLOCK
    val <elvis>: Any? = <get-p>()
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> x
      else -> <elvis>
    }
  }
}

fun test5(x: Any): Any {
  return { // BLOCK
    val <elvis>: Any? = foo()
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> x
      else -> <elvis>
    }
  }
}
