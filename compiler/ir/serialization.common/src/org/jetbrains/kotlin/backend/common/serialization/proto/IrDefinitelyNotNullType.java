// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType}
 */
public  final class IrDefinitelyNotNullType extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrDefinitelyNotNullType, IrDefinitelyNotNullType.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType)
    IrDefinitelyNotNullTypeOrBuilder {
  private IrDefinitelyNotNullType() {
    types_ = emptyIntList();
  }
  public static final int TYPES_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.protobuf.Internal.IntList types_;
  /**
   * <pre>
   * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
   * </pre>
   *
   * <code>repeated int32 types = 1;</code>
   * @return A list containing the types.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getTypesList() {
    return types_;
  }
  /**
   * <pre>
   * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
   * </pre>
   *
   * <code>repeated int32 types = 1;</code>
   * @return The count of types.
   */
  @java.lang.Override
  public int getTypesCount() {
    return types_.size();
  }
  /**
   * <pre>
   * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
   * </pre>
   *
   * <code>repeated int32 types = 1;</code>
   * @param index The index of the element to return.
   * @return The types at the given index.
   */
  @java.lang.Override
  public int getTypes(int index) {
    return types_.getInt(index);
  }
  private int typesMemoizedSerializedSize = -1;
  private void ensureTypesIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = types_;
    if (!tmp.isModifiable()) {
      types_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
   * </pre>
   *
   * <code>repeated int32 types = 1;</code>
   * @param index The index to set the value at.
   * @param value The types to set.
   */
  private void setTypes(
      int index, int value) {
    ensureTypesIsMutable();
    types_.setInt(index, value);
  }
  /**
   * <pre>
   * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
   * </pre>
   *
   * <code>repeated int32 types = 1;</code>
   * @param value The types to add.
   */
  private void addTypes(int value) {
    ensureTypesIsMutable();
    types_.addInt(value);
  }
  /**
   * <pre>
   * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
   * </pre>
   *
   * <code>repeated int32 types = 1;</code>
   * @param values The types to add.
   */
  private void addAllTypes(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureTypesIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, types_);
  }
  /**
   * <pre>
   * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
   * </pre>
   *
   * <code>repeated int32 types = 1;</code>
   */
  private void clearTypes() {
    types_ = emptyIntList();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullTypeOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     *
     * <code>repeated int32 types = 1;</code>
     * @return A list containing the types.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getTypesList() {
      return java.util.Collections.unmodifiableList(
          instance.getTypesList());
    }
    /**
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     *
     * <code>repeated int32 types = 1;</code>
     * @return The count of types.
     */
    @java.lang.Override
    public int getTypesCount() {
      return instance.getTypesCount();
    }
    /**
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     *
     * <code>repeated int32 types = 1;</code>
     * @param index The index of the element to return.
     * @return The types at the given index.
     */
    @java.lang.Override
    public int getTypes(int index) {
      return instance.getTypes(index);
    }
    /**
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     *
     * <code>repeated int32 types = 1;</code>
     * @param value The types to set.
     * @return This builder for chaining.
     */
    public Builder setTypes(
        int index, int value) {
      copyOnWrite();
      instance.setTypes(index, value);
      return this;
    }
    /**
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     *
     * <code>repeated int32 types = 1;</code>
     * @param value The types to add.
     * @return This builder for chaining.
     */
    public Builder addTypes(int value) {
      copyOnWrite();
      instance.addTypes(value);
      return this;
    }
    /**
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     *
     * <code>repeated int32 types = 1;</code>
     * @param values The types to add.
     * @return This builder for chaining.
     */
    public Builder addAllTypes(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllTypes(values);
      return this;
    }
    /**
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     *
     * <code>repeated int32 types = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTypes() {
      copyOnWrite();
      instance.clearTypes();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "types_",
          };
          java.lang.String info =
              "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\'";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType DEFAULT_INSTANCE;
  static {
    IrDefinitelyNotNullType defaultInstance = new IrDefinitelyNotNullType();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrDefinitelyNotNullType.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrDefinitelyNotNullType> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrDefinitelyNotNullType> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
