//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable

@Composable
fun Test(condition: Boolean) {
    Text("Some text")
    Identity {
        if (condition) return@Test
    }
    Text("Some more text")
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(condition: Boolean, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)<Text("...>,<Text("...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(condition)) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    Text("Some text", %composer, 0b0110)
    Identity {
      if (condition) {
        if (isTraceInProgress()) {
          traceEventEnd()
        }
        %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
          Test(condition, %composer, updateChangedFlags(%changed or 0b0001))
        }
        return
      }
    }
    Text("Some more text", %composer, 0b0110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(condition, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
