package

public fun test_1(/*0*/ a: kotlin.Array<kotlin.String>, /*1*/ b: kotlin.Boolean): kotlin.Unit
public fun test_2(/*0*/ a: kotlin.Array<kotlin.String>, /*1*/ b: kotlin.Boolean): kotlin.Unit
public inline fun </*0*/ T, /*1*/ R> kotlin.Array<out T>.myFlatMap(/*0*/ transform: (T) -> kotlin.collections.Iterable<R>): kotlin.collections.List<R>
@kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(name = "seqFlatMap") public inline fun </*0*/ T, /*1*/ R> kotlin.Array<out T>.myFlatMap(/*0*/ transform: (T) -> kotlin.sequences.Sequence<R>): kotlin.collections.List<R>
public fun </*0*/ T, /*1*/ R> kotlin.Array<out T>.noInlineFlatMap(/*0*/ transform: (T) -> kotlin.collections.Iterable<R>): kotlin.collections.List<R>
@kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName(name = "noInlineSeqFlatMap") public fun </*0*/ T, /*1*/ R> kotlin.Array<out T>.noInlineFlatMap(/*0*/ transform: (T) -> kotlin.sequences.Sequence<R>): kotlin.collections.List<R>
public fun kotlin.String.toList(): kotlin.collections.List<kotlin.String>

package kotlin {

    public final annotation class OverloadResolutionByLambdaReturnType : kotlin.Annotation {
        public constructor OverloadResolutionByLambdaReturnType()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
