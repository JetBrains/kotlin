/returns_null.kt:(121,140): info: Generated Viper text for simple_returns_null:
method pkg_$global$simple_returns_null(local$x: dom$Nullable[Int])
  returns (ret: dom$Nullable[Int])
  requires dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ensures ret == (dom$Nullable$null(): dom$Nullable[Int])
  ensures ret != (dom$Nullable$null(): dom$Nullable[Int]) ==> false
{
  ret := (dom$Casting$cast((dom$Nullable$null(): dom$Nullable[dom$Unit]), dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int])
}

/returns_null.kt:(300,320): info: Generated Viper text for returns_null_implies:
method pkg_$global$returns_null_implies(local$x: dom$Nullable[Bool])
  returns (ret: dom$Nullable[Bool])
  requires dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Boolean()))
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$special$Nullable(dom$Type$Boolean()))
  ensures ret == (dom$Nullable$null(): dom$Nullable[Bool]) ==>
    local$x == (dom$Nullable$null(): dom$Nullable[Bool])
  ensures ret != (dom$Nullable$null(): dom$Nullable[Bool]) ==>
    local$x != (dom$Nullable$null(): dom$Nullable[Bool])
{
  ret := local$x
}

/returns_null.kt:(511,531): info: Generated Viper text for returns_null_with_if:
method pkg_$global$returns_null_with_if(local$x: dom$Nullable[Int], local$y: dom$Nullable[Int],
  local$z: dom$Nullable[Int])
  returns (ret: dom$Nullable[Int])
  requires dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  requires dom$Type$isSubtype((dom$TypeOf$typeOf(local$y): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  requires dom$Type$isSubtype((dom$TypeOf$typeOf(local$z): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ensures ret == (dom$Nullable$null(): dom$Nullable[Int]) ==>
    local$x == (dom$Nullable$null(): dom$Nullable[Int]) &&
    local$y == (dom$Nullable$null(): dom$Nullable[Int]) ||
    local$z == (dom$Nullable$null(): dom$Nullable[Int])
  ensures ret != (dom$Nullable$null(): dom$Nullable[Int]) ==>
    local$x != (dom$Nullable$null(): dom$Nullable[Int]) ||
    local$y != (dom$Nullable$null(): dom$Nullable[Int])
{
  if (local$x == (dom$Nullable$null(): dom$Nullable[Int]) &&
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) ==
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) ||
  local$x != (dom$Nullable$null(): dom$Nullable[Int]) &&
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) !=
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) &&
  (dom$Casting$cast(local$x, dom$Type$Int()): Int) ==
  (dom$Casting$cast((dom$Nullable$null(): dom$Nullable[dom$Unit]), dom$Type$Int()): Int)) {
    ret := local$y
  } else {
    ret := local$z}
}

/returns_null.kt:(833,862): info: Generated Viper text for non_nullable_returns_not_null:
method pkg_$global$non_nullable_returns_not_null(local$x: Int)
  returns (ret: Int)
  ensures true
{
  ret := local$x
}

/returns_null.kt:(981,1010): info: Generated Viper text for non_nullable_compared_to_null:
method pkg_$global$non_nullable_compared_to_null(local$x: Int, local$y: Int)
  returns (ret: Int)
  ensures true ==> false || true
{
  ret := local$x
}

/returns_null.kt:(1076,1085): warning: Condition is always 'false'.

/returns_null.kt:(1089,1098): warning: Condition is always 'true'.
