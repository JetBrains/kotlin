Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Implicit receiver:
            FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                Type: foo.MyClass.Companion
    Element 7
        Scope: FirNestedClassifierScopeImpl
            Classifiers:
                FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                FirRegularClassSymbol public final annotation class NestedAnnotation : R|kotlin/Annotation|
    Element 8
        Implicit receiver:
            FirRegularClassSymbol public final class MyClass : R|kotlin/Any|
                Type: foo.MyClass

FILE: [ResolvedTo(IMPORTS)] classLevel.kt
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val CONSTANT: R|kotlin/Int| = Int(5)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] constructor([ResolvedTo(STATUS)] s: R|kotlin/String|): R|foo/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(STATUS)] get(): R|kotlin/String|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] constructor(): R|foo/MyClass| {
            super<R|kotlin/Any|>()
        }

        public final companion [ResolvedTo(ANNOTATION_ARGUMENTS)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] constructor(): R|foo/MyClass.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(BODY_RESOLVE)] val NESTED_CONSTANT: R|kotlin/Int| = Int(0)
                public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] annotation class NestedAnnotation : R|kotlin/Annotation| {
            public [ResolvedTo(BODY_RESOLVE)] constructor([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|foo/MyClass.NestedAnnotation| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] val i: R|kotlin/Int| = R|<local>/i|
                public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        }

        [ResolvedTo(BODY_RESOLVE)] @R|foo/Anno|[Types](s = String(str).R|kotlin/String.plus|(R|foo/CONSTANT|)) @R|foo/MyClass.NestedAnnotation|[Types](i = this@R|foo/MyClass.Companion|.R|foo/MyClass.Companion.NESTED_CONSTANT|) <DANGLING MODIFIER: Top level declaration expected>
    }