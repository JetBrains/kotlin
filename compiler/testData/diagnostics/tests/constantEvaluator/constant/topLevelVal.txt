package

package test {
    public val a: kotlin.Int = 1
    public val prop1: kotlin.Int = 1
    public val prop2: kotlin.Int = 2
    public fun foo(): kotlin.Unit

    public final class A {
        public constructor A()
        public final val b: () -> kotlin.Unit
        public final val c: test.Foo
        public final val prop3: kotlin.Int = 1
        public final val prop4: kotlin.Int = 2
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface Foo {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public abstract fun f(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
