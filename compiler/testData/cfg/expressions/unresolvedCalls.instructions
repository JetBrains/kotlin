== foo ==
fun foo(i: Int) {}
---------------------
L0:
  1 <START>
    v(i: Int)
    magic[FAKE_INITIALIZER](i: Int) -> <v0>
    w(i|<v0>)
  2 mark({})
    read (Unit)
L1:
  1 <END>                                      NEXT:[<SINK>]
error:
-   <ERROR>                                    PREV:[]
sink:
    <SINK>                                     PREV:[<END>]
=====================
== foo ==
fun foo(a: IntArray) {}
---------------------
L0:
  1 <START>
    v(a: IntArray)
    magic[FAKE_INITIALIZER](a: IntArray) -> <v0>
    w(a|<v0>)
  2 mark({})
    read (Unit)
L1:
  1 <END>                                           NEXT:[<SINK>]
error:
-   <ERROR>                                         PREV:[]
sink:
    <SINK>                                          PREV:[<END>]
=====================
== foo ==
fun foo(a: String, b: Int) {}
---------------------
L0:
  1 <START>
    v(a: String)
    magic[FAKE_INITIALIZER](a: String) -> <v0>
    w(a|<v0>)
    v(b: Int)
    magic[FAKE_INITIALIZER](b: Int) -> <v1>
    w(b|<v1>)
  2 mark({})
    read (Unit)
L1:
  1 <END>                                         NEXT:[<SINK>]
error:
-   <ERROR>                                       PREV:[]
sink:
    <SINK>                                        PREV:[<END>]
=====================
== foo ==
fun foo() {}
---------------------
L0:
  1 <START>
  2 mark({})
    read (Unit)
L1:
  1 <END>          NEXT:[<SINK>]
error:
-   <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<END>]
=====================
== test ==
fun test() {
    foo(bar())
}
---------------------
L0:
  1 <START>
  2 mark({ foo(bar()) })
    mark(bar())
    magic[UNRESOLVED_CALL](bar()|!<v0>) -> <v1>
    mark(foo(bar()))
    magic[UNRESOLVED_CALL](foo(bar())|<v1>, !<v2>) -> <v3>
L1:
  1 <END>                                                     NEXT:[<SINK>]
error:
-   <ERROR>                                                   PREV:[]
sink:
    <SINK>                                                    PREV:[<END>]
=====================
