/binary_search.kt:(90,108): info: Generated Viper text for safe_binary_search:
field special$size: Int

method global$fun_safe_binary_search$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Boolean(local$arr: Ref,
  local$target: Int)
  returns (ret$0: Bool)
  requires acc(local$arr.special$size, write)
  requires local$arr.special$size >= 0
  ensures acc(local$arr.special$size, write)
  ensures local$arr.special$size >= 0
{
  var local0$size: Int
  var local0$mid: Int
  var anonymous$0: Bool
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$arr): dom$Type), dom$Type$pkg$kotlin$collections$global$class_List())
  local0$size := local$arr.special$size
  inhale 2 != 0
  local0$mid := local$arr.special$size / 2
  anonymous$0 := pkg$kotlin$collections$class_List$fun_isEmpty$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Boolean(local$arr)
  if (anonymous$0) {
    ret$0 := false
  } else {
    var anonymous$1: Int
    anonymous$1 := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$arr,
      local0$mid)
    if (anonymous$1 == local$target) {
      ret$0 := true
    } else {
      var anonymous$2: Int
      anonymous$2 := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$arr,
        local0$mid)
      if (anonymous$2 < local$target) {
        var anonymous$3: Ref
        anonymous$3 := pkg$kotlin$collections$class_List$fun_subList$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$return$T_class_pkg$kotlin$collections$global$class_List(local$arr,
          local0$mid + 1, local0$size)
        ret$0 := global$fun_safe_binary_search$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Boolean(anonymous$3,
          local$target)
      } else {
        var anonymous$4: Ref
        anonymous$4 := pkg$kotlin$collections$class_List$fun_subList$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$return$T_class_pkg$kotlin$collections$global$class_List(local$arr,
          0, local0$mid)
        ret$0 := global$fun_safe_binary_search$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Boolean(anonymous$4,
          local$target)
      }
    }
  }
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Int)
  returns (ret: Int)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  requires local$index >= 0
  requires this.special$size > local$index
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures this.special$size == old(this.special$size)


method pkg$kotlin$collections$class_List$fun_isEmpty$fun_take$T_class_pkg$kotlin$collections$global$class_List$return$T_Boolean(this: Ref)
  returns (ret: Bool)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures this.special$size == old(this.special$size)
  ensures ret ==> this.special$size == 0
  ensures !ret ==> this.special$size > 0


method pkg$kotlin$collections$class_List$fun_subList$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$return$T_class_pkg$kotlin$collections$global$class_List(this: Ref,
  local$fromIndex: Int, local$toIndex: Int)
  returns (ret: Ref)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  requires local$fromIndex <= local$toIndex
  requires local$fromIndex >= 0
  requires local$toIndex <= this.special$size
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$pkg$kotlin$collections$global$class_List())
  ensures acc(ret.special$size, write)
  ensures ret.special$size >= 0
  ensures this.special$size == old(this.special$size)
  ensures ret.special$size == local$toIndex - local$fromIndex


/binary_search.kt:(537,563): info: Generated Viper text for unsafe_binary_search_fixed:
field special$size: Int

method global$fun_unsafe_binary_search_fixed$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$T_Int$return$T_Boolean(local$arr: Ref,
  local$target: Int, local$left: Int, local$right: Int)
  returns (ret$0: Bool)
  requires acc(local$arr.special$size, write)
  requires local$arr.special$size >= 0
  ensures acc(local$arr.special$size, write)
  ensures local$arr.special$size >= 0
{
  var anonymous$0: Bool
  var anonymous$1: Bool
  var local0$mid: Int
  var anonymous$2: Int
  var anonymous$3: Int
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$arr): dom$Type), dom$Type$pkg$kotlin$collections$global$class_List())
  if (local$left > local$right) {
    anonymous$1 := true
  } else {
    anonymous$1 := local$left < 0}
  if (anonymous$1) {
    anonymous$0 := true
  } else {
    anonymous$0 := local$right >= local$arr.special$size}
  if (anonymous$0) {
    ret$0 := false
    goto label$ret$0
  }
  inhale 2 != 0
  anonymous$2 := (local$right - local$left) / 2
  local0$mid := local$left + anonymous$2
  anonymous$3 := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$arr,
    local0$mid)
  if (anonymous$3 == local$target) {
    ret$0 := true
  } else {
    var anonymous$4: Int
    anonymous$4 := pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(local$arr,
      local0$mid)
    if (anonymous$4 < local$target) {
      ret$0 := global$fun_unsafe_binary_search_fixed$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$T_Int$return$T_Boolean(local$arr,
        local$target, local0$mid + 1, local$right)
    } else {
      ret$0 := global$fun_unsafe_binary_search_fixed$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$T_Int$T_Int$return$T_Boolean(local$arr,
        local$target, local$left, local0$mid - 1)}
  }
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$collections$class_List$fun_get$fun_take$T_class_pkg$kotlin$collections$global$class_List$T_Int$return$T_Int(this: Ref,
  local$index: Int)
  returns (ret: Int)
  requires acc(this.special$size, write)
  requires this.special$size >= 0
  requires local$index >= 0
  requires this.special$size > local$index
  ensures acc(this.special$size, write)
  ensures this.special$size >= 0
  ensures this.special$size == old(this.special$size)

