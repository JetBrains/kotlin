package

public fun </*0*/ T, /*1*/ R, /*2*/ S> bar(/*0*/ f: T.(R) -> S): Tripple<T, R, S>
public fun </*0*/ T, /*1*/ R, /*2*/ S> baz(/*0*/ x: T, /*1*/ y: R, /*2*/ z: S, /*3*/ f: T.(R) -> S): Tripple<T, R, S>
public fun test1(): kotlin.Unit
public fun </*0*/ T> test2(): kotlin.Unit
public fun </*0*/ R, /*1*/ S> Wrapper.foo(/*0*/ x: R): S
public fun Wrapper.fooIntString(/*0*/ x: kotlin.Int): kotlin.String
public fun </*0*/ T> Wrapper.fooReturnString(/*0*/ x: T): kotlin.String
public fun </*0*/ T> Wrapper.fooTakeInt(/*0*/ x: kotlin.Int): T

public final class Tripple</*0*/ A, /*1*/ B, /*2*/ C> {
    public constructor Tripple</*0*/ A, /*1*/ B, /*2*/ C>(/*0*/ a: A, /*1*/ b: B, /*2*/ c: C)
    public final val a: A
    public final val b: B
    public final val c: C
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Wrapper {
    public constructor Wrapper()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
