package events

open external class internal {
  open class EventEmitterP : internal {
    constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  open class EventEmitterS : internal {
    constructor(a: Any) {
      super/*internal*/()
      /* <init>() */

    }

  }

  enum class NestedExternalEnum : Enum<NestedExternalEnum> {
    A = NestedExternalEnum()

    B = NestedExternalEnum()

    private constructor() /* primary */ {
      super/*Enum*/<NestedExternalEnum>()
      /* <init>() */

    }

    fun valueOf(value: String): NestedExternalEnum /* Synthetic body for ENUM_VALUEOF */

    fun values(): Array<NestedExternalEnum> /* Synthetic body for ENUM_VALUES */

    val entries: EnumEntries<NestedExternalEnum>
      get(): EnumEntries<NestedExternalEnum> /* Synthetic body for ENUM_ENTRIES */

  }

  interface NestedExternalInterface {
  }

  object NestedExternalObject : internal {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

