RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] parameterOfNonLocalSetter.kt
    public final? [ResolvedTo(RAW_FIR)] class X : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] var x: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] get(): Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] set([ResolvedTo(RAW_FIR)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final? [ResolvedTo(RAW_FIR)] class X : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] var x: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] get(): Int
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] set([ResolvedTo(RAW_FIR)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final? [ResolvedTo(RAW_FIR)] class X : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] var x: Int = LAZY_EXPRESSION
            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=X] get(): Int
            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=X] set([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final? [ResolvedTo(RAW_FIR)] class X : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(COMPANION_GENERATION)] var x: Int = LAZY_EXPRESSION
            public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=X] get(): Int
            public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=X] set([ResolvedTo(COMPANION_GENERATION)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final? [ResolvedTo(SUPER_TYPES)] class X : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(SUPER_TYPES)] var x: Int = LAZY_EXPRESSION
            public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=X] get(): Int
            public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=X] set([ResolvedTo(SUPER_TYPES)] resolveMe: Int): R|kotlin/Unit| { LAZY_BLOCK }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final? [ResolvedTo(TYPES)] class X : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(TYPES)] var x: R|kotlin/Int| = LAZY_EXPRESSION
            public? [ResolvedTo(TYPES)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public? [ResolvedTo(TYPES)] [ContainingClassKey=X] set([ResolvedTo(TYPES)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final [ResolvedTo(STATUS)] class X : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] var x: R|kotlin/Int| = LAZY_EXPRESSION
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public [ResolvedTo(STATUS)] [ContainingClassKey=X] set([ResolvedTo(STATUS)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final [ResolvedTo(STATUS)] class X : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] var x: R|kotlin/Int| = LAZY_EXPRESSION
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=X] set([ResolvedTo(EXPECT_ACTUAL_MATCHING)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| { LAZY_BLOCK }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final [ResolvedTo(STATUS)] class X : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(CONTRACTS)] var x: R|kotlin/Int| = IntegerLiteral(2)
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=X] set([ResolvedTo(CONTRACTS)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| {
                ^ Unit#
            }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final [ResolvedTo(STATUS)] class X : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] var x: R|kotlin/Int| = IntegerLiteral(2)
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=X] set([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| {
                ^ Unit#
            }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final [ResolvedTo(STATUS)] class X : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] var x: R|kotlin/Int| = IntegerLiteral(2)
            public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=X] set([ResolvedTo(CONSTANT_EVALUATION)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| {
                ^ Unit#
            }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final [ResolvedTo(STATUS)] class X : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] var x: R|kotlin/Int| = IntegerLiteral(2)
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=X] set([ResolvedTo(ANNOTATION_ARGUMENTS)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| {
                ^ Unit#
            }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] parameterOfNonLocalSetter.kt
    public final [ResolvedTo(STATUS)] class X : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor(): R|X| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(BODY_RESOLVE)] var x: R|kotlin/Int| = Int(2)
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] set([ResolvedTo(BODY_RESOLVE)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| {
                ^ Q|kotlin/Unit|
            }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] parameterOfNonLocalSetter.kt
    public final [ResolvedTo(BODY_RESOLVE)] class X : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] constructor(): R|X| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] var x: R|kotlin/Int| = Int(2)
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] get(): R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] set([ResolvedTo(BODY_RESOLVE)] resolveMe: R|kotlin/Int|): R|kotlin/Unit| {
                ^ Q|kotlin/Unit|
            }

    }
