// MODULE: separate
// FILE: KotlinInternal.kt

open class KotlinInternal {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  internal open fun foo() {
  }

  internal open val a: Int
    internal open get(): Int {
      return 1
    }

}

// MODULE: main
// FILE: test.kt

class A : Java1 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class B : Java2 {
  constructor() /* primary */ {
    super/*Java2*/()
    /* <init>() */

  }

}

class C : Java2 {
  val a: Int
    field = 10
    get

  constructor() /* primary */ {
    super/*Java2*/()
    /* <init>() */

  }

  override fun foo() {
  }

}

class D : Java3 {
  constructor() /* primary */ {
    super/*Java3*/()
    /* <init>() */

  }

}

class E : Java3 {
  val a: Int
    field = 10
    get

  constructor() /* primary */ {
    super/*Java3*/()
    /* <init>() */

  }

  override fun foo() {
  }

}

class F : Java4 {
  constructor() /* primary */ {
    super/*Java4*/()
    /* <init>() */

  }

}

class G : Java5 {
  constructor() /* primary */ {
    super/*Java5*/()
    /* <init>() */

  }

}

class H : Java5 {
  val a: Int
    field = 10
    get

  constructor() /* primary */ {
    super/*Java5*/()
    /* <init>() */

  }

  override fun foo() {
  }

}

abstract class I : KotlinInternal, JavaPublic {
  constructor() /* primary */ {
    super/*KotlinInternal*/()
    /* <init>() */

  }

}

class J : KotlinInternal, JavaPublic {
  val a: Int
    field = 10
    get

  constructor() /* primary */ {
    super/*KotlinInternal*/()
    /* <init>() */

  }

  override fun foo() {
  }

}

class K : KotlinInternal, JavaDefault {
  val a: Int
    field = 10
    get

  constructor() /* primary */ {
    super/*KotlinInternal*/()
    /* <init>() */

  }

  override fun foo() {
  }

}

fun test(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K) {
  b.foo()
  b.#a /*~> Unit */
  c.foo()
  c.<get-a>() /*~> Unit */
  d.foo()
  d.#a /*~> Unit */
  e.foo()
  e.<get-a>() /*~> Unit */
  g.foo()
  g.#a /*~> Unit */
  h.foo()
  h.<get-a>() /*~> Unit */
  i.foo()
  j.foo()
  j.<get-a>() /*~> Unit */
  k.foo()
  k.<get-a>() /*~> Unit */
}
