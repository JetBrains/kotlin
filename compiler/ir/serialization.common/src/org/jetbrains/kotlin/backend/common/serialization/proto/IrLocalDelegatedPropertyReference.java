// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference}
 */
public final class IrLocalDelegatedPropertyReference extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference)
    IrLocalDelegatedPropertyReferenceOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      IrLocalDelegatedPropertyReference.class.getName());
  }
  // Use IrLocalDelegatedPropertyReference.newBuilder() to construct.
  private IrLocalDelegatedPropertyReference(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IrLocalDelegatedPropertyReference() {
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrLocalDelegatedPropertyReference_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrLocalDelegatedPropertyReference_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference.Builder.class);
  }

  private int bitField0_;
  public static final int DELEGATE_FIELD_NUMBER = 1;
  private long delegate_ = 0L;
  /**
   * <code>int64 delegate = 1 [features = { ... }</code>
   * @return Whether the delegate field is set.
   */
  @java.lang.Override
  public boolean hasDelegate() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>int64 delegate = 1 [features = { ... }</code>
   * @return The delegate.
   */
  @java.lang.Override
  public long getDelegate() {
    return delegate_;
  }

  public static final int GETTER_FIELD_NUMBER = 2;
  private long getter_ = 0L;
  /**
   * <code>int64 getter = 2;</code>
   * @return Whether the getter field is set.
   */
  @java.lang.Override
  public boolean hasGetter() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int64 getter = 2;</code>
   * @return The getter.
   */
  @java.lang.Override
  public long getGetter() {
    return getter_;
  }

  public static final int SETTER_FIELD_NUMBER = 3;
  private long setter_ = 0L;
  /**
   * <code>int64 setter = 3;</code>
   * @return Whether the setter field is set.
   */
  @java.lang.Override
  public boolean hasSetter() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>int64 setter = 3;</code>
   * @return The setter.
   */
  @java.lang.Override
  public long getSetter() {
    return setter_;
  }

  public static final int SYMBOL_FIELD_NUMBER = 4;
  private long symbol_ = 0L;
  /**
   * <code>int64 symbol = 4 [features = { ... }</code>
   * @return Whether the symbol field is set.
   */
  @java.lang.Override
  public boolean hasSymbol() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>int64 symbol = 4 [features = { ... }</code>
   * @return The symbol.
   */
  @java.lang.Override
  public long getSymbol() {
    return symbol_;
  }

  public static final int ORIGIN_NAME_FIELD_NUMBER = 5;
  private int originName_ = 0;
  /**
   * <code>int32 origin_name = 5;</code>
   * @return Whether the originName field is set.
   */
  @java.lang.Override
  public boolean hasOriginName() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <code>int32 origin_name = 5;</code>
   * @return The originName.
   */
  @java.lang.Override
  public int getOriginName() {
    return originName_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasDelegate()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasSymbol()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt64(1, delegate_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeInt64(2, getter_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt64(3, setter_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeInt64(4, symbol_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeInt32(5, originName_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(1, delegate_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(2, getter_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(3, setter_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(4, symbol_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(5, originName_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference other = (org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference) obj;

    if (hasDelegate() != other.hasDelegate()) return false;
    if (hasDelegate()) {
      if (getDelegate()
          != other.getDelegate()) return false;
    }
    if (hasGetter() != other.hasGetter()) return false;
    if (hasGetter()) {
      if (getGetter()
          != other.getGetter()) return false;
    }
    if (hasSetter() != other.hasSetter()) return false;
    if (hasSetter()) {
      if (getSetter()
          != other.getSetter()) return false;
    }
    if (hasSymbol() != other.hasSymbol()) return false;
    if (hasSymbol()) {
      if (getSymbol()
          != other.getSymbol()) return false;
    }
    if (hasOriginName() != other.hasOriginName()) return false;
    if (hasOriginName()) {
      if (getOriginName()
          != other.getOriginName()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasDelegate()) {
      hash = (37 * hash) + DELEGATE_FIELD_NUMBER;
      hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
          getDelegate());
    }
    if (hasGetter()) {
      hash = (37 * hash) + GETTER_FIELD_NUMBER;
      hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
          getGetter());
    }
    if (hasSetter()) {
      hash = (37 * hash) + SETTER_FIELD_NUMBER;
      hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
          getSetter());
    }
    if (hasSymbol()) {
      hash = (37 * hash) + SYMBOL_FIELD_NUMBER;
      hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
          getSymbol());
    }
    if (hasOriginName()) {
      hash = (37 * hash) + ORIGIN_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getOriginName();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReferenceOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrLocalDelegatedPropertyReference_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrLocalDelegatedPropertyReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference.newBuilder()
    private Builder() {

    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      delegate_ = 0L;
      getter_ = 0L;
      setter_ = 0L;
      symbol_ = 0L;
      originName_ = 0;
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrLocalDelegatedPropertyReference_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.delegate_ = delegate_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.getter_ = getter_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.setter_ = setter_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.symbol_ = symbol_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.originName_ = originName_;
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference.getDefaultInstance()) return this;
      if (other.hasDelegate()) {
        setDelegate(other.getDelegate());
      }
      if (other.hasGetter()) {
        setGetter(other.getGetter());
      }
      if (other.hasSetter()) {
        setSetter(other.getSetter());
      }
      if (other.hasSymbol()) {
        setSymbol(other.getSymbol());
      }
      if (other.hasOriginName()) {
        setOriginName(other.getOriginName());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasDelegate()) {
        return false;
      }
      if (!hasSymbol()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              delegate_ = input.readInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              getter_ = input.readInt64();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              setter_ = input.readInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              symbol_ = input.readInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              originName_ = input.readInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private long delegate_ ;
    /**
     * <code>int64 delegate = 1 [features = { ... }</code>
     * @return Whether the delegate field is set.
     */
    @java.lang.Override
    public boolean hasDelegate() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int64 delegate = 1 [features = { ... }</code>
     * @return The delegate.
     */
    @java.lang.Override
    public long getDelegate() {
      return delegate_;
    }
    /**
     * <code>int64 delegate = 1 [features = { ... }</code>
     * @param value The delegate to set.
     * @return This builder for chaining.
     */
    public Builder setDelegate(long value) {

      delegate_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>int64 delegate = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearDelegate() {
      bitField0_ = (bitField0_ & ~0x00000001);
      delegate_ = 0L;
      onChanged();
      return this;
    }

    private long getter_ ;
    /**
     * <code>int64 getter = 2;</code>
     * @return Whether the getter field is set.
     */
    @java.lang.Override
    public boolean hasGetter() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int64 getter = 2;</code>
     * @return The getter.
     */
    @java.lang.Override
    public long getGetter() {
      return getter_;
    }
    /**
     * <code>int64 getter = 2;</code>
     * @param value The getter to set.
     * @return This builder for chaining.
     */
    public Builder setGetter(long value) {

      getter_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int64 getter = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearGetter() {
      bitField0_ = (bitField0_ & ~0x00000002);
      getter_ = 0L;
      onChanged();
      return this;
    }

    private long setter_ ;
    /**
     * <code>int64 setter = 3;</code>
     * @return Whether the setter field is set.
     */
    @java.lang.Override
    public boolean hasSetter() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int64 setter = 3;</code>
     * @return The setter.
     */
    @java.lang.Override
    public long getSetter() {
      return setter_;
    }
    /**
     * <code>int64 setter = 3;</code>
     * @param value The setter to set.
     * @return This builder for chaining.
     */
    public Builder setSetter(long value) {

      setter_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int64 setter = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSetter() {
      bitField0_ = (bitField0_ & ~0x00000004);
      setter_ = 0L;
      onChanged();
      return this;
    }

    private long symbol_ ;
    /**
     * <code>int64 symbol = 4 [features = { ... }</code>
     * @return Whether the symbol field is set.
     */
    @java.lang.Override
    public boolean hasSymbol() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int64 symbol = 4 [features = { ... }</code>
     * @return The symbol.
     */
    @java.lang.Override
    public long getSymbol() {
      return symbol_;
    }
    /**
     * <code>int64 symbol = 4 [features = { ... }</code>
     * @param value The symbol to set.
     * @return This builder for chaining.
     */
    public Builder setSymbol(long value) {

      symbol_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>int64 symbol = 4 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearSymbol() {
      bitField0_ = (bitField0_ & ~0x00000008);
      symbol_ = 0L;
      onChanged();
      return this;
    }

    private int originName_ ;
    /**
     * <code>int32 origin_name = 5;</code>
     * @return Whether the originName field is set.
     */
    @java.lang.Override
    public boolean hasOriginName() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 origin_name = 5;</code>
     * @return The originName.
     */
    @java.lang.Override
    public int getOriginName() {
      return originName_;
    }
    /**
     * <code>int32 origin_name = 5;</code>
     * @param value The originName to set.
     * @return This builder for chaining.
     */
    public Builder setOriginName(int value) {

      originName_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>int32 origin_name = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearOriginName() {
      bitField0_ = (bitField0_ & ~0x00000010);
      originName_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<IrLocalDelegatedPropertyReference>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IrLocalDelegatedPropertyReference>() {
    @java.lang.Override
    public IrLocalDelegatedPropertyReference parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<IrLocalDelegatedPropertyReference> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrLocalDelegatedPropertyReference> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrLocalDelegatedPropertyReference getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
