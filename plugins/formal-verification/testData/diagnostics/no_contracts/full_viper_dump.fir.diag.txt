/full_viper_dump.kt:(172,173): info: Generated Viper text for f:
domain dom$RuntimeType  {

  unique function dom$RuntimeType$intType(): dom$RuntimeType

  unique function dom$RuntimeType$boolType(): dom$RuntimeType

  unique function dom$RuntimeType$unitType(): dom$RuntimeType

  unique function dom$RuntimeType$nothingType(): dom$RuntimeType

  unique function dom$RuntimeType$anyType(): dom$RuntimeType

  unique function dom$RuntimeType$functionType(): dom$RuntimeType

  unique function dom$RuntimeType$T_class_global$class_Foo(): dom$RuntimeType

  function dom$RuntimeType$nullValue(): Ref

  function dom$RuntimeType$unitValue(): Ref

  function dom$RuntimeType$isSubtype(t1: dom$RuntimeType, t2: dom$RuntimeType): Bool

  function dom$RuntimeType$typeOf(r: Ref): dom$RuntimeType

  function dom$RuntimeType$nullable(t: dom$RuntimeType): dom$RuntimeType

  function dom$RuntimeType$intToRef(v: Int): Ref

  function dom$RuntimeType$intFromRef(r: Ref): Int

  function dom$RuntimeType$boolToRef(v: Bool): Ref

  function dom$RuntimeType$boolFromRef(r: Ref): Bool

  axiom dom$RuntimeType$subtype_reflexive {
    (forall t: dom$RuntimeType ::dom$RuntimeType$isSubtype(t, t))
  }

  axiom dom$RuntimeType$subtype_transitive {
    (forall t1: dom$RuntimeType, t2: dom$RuntimeType, t3: dom$RuntimeType ::
      { dom$RuntimeType$isSubtype(t1, t2), dom$RuntimeType$isSubtype(t2, t3) }
      { dom$RuntimeType$isSubtype(t1, t2), dom$RuntimeType$isSubtype(t1, t3) }
      { dom$RuntimeType$isSubtype(t2, t3), dom$RuntimeType$isSubtype(t1, t3) }
      dom$RuntimeType$isSubtype(t1, t2) &&
      dom$RuntimeType$isSubtype(t2, t3) ==>
      dom$RuntimeType$isSubtype(t1, t3))
  }

  axiom dom$RuntimeType$subtype_antisymmetric {
    (forall t1: dom$RuntimeType, t2: dom$RuntimeType ::
      { dom$RuntimeType$isSubtype(t1, t2), dom$RuntimeType$isSubtype(t2, t1) }
      dom$RuntimeType$isSubtype(t1, t2) &&
      dom$RuntimeType$isSubtype(t2, t1) ==>
      t1 == t2)
  }

  axiom dom$RuntimeType$nullable_idempotent {
    (forall t: dom$RuntimeType ::
      { dom$RuntimeType$nullable(dom$RuntimeType$nullable(t)) }
      dom$RuntimeType$nullable(dom$RuntimeType$nullable(t)) ==
      dom$RuntimeType$nullable(t))
  }

  axiom dom$RuntimeType$nullable_supertype {
    (forall t: dom$RuntimeType ::
      { dom$RuntimeType$nullable(t) }
      dom$RuntimeType$isSubtype(t, dom$RuntimeType$nullable(t)))
  }

  axiom dom$RuntimeType$nullable_preserves_subtype {
    (forall t1: dom$RuntimeType, t2: dom$RuntimeType ::
      { dom$RuntimeType$isSubtype(dom$RuntimeType$nullable(t1), dom$RuntimeType$nullable(t2)) }
      dom$RuntimeType$isSubtype(t1, t2) ==>
      dom$RuntimeType$isSubtype(dom$RuntimeType$nullable(t1), dom$RuntimeType$nullable(t2)))
  }

  axiom dom$RuntimeType$nullable_any_supertype {
    (forall t: dom$RuntimeType ::dom$RuntimeType$isSubtype(t, dom$RuntimeType$nullable(dom$RuntimeType$anyType())))
  }

  axiom {
    dom$RuntimeType$isSubtype(dom$RuntimeType$intType(), dom$RuntimeType$anyType())
  }

  axiom {
    dom$RuntimeType$isSubtype(dom$RuntimeType$boolType(), dom$RuntimeType$anyType())
  }

  axiom {
    dom$RuntimeType$isSubtype(dom$RuntimeType$unitType(), dom$RuntimeType$anyType())
  }

  axiom {
    dom$RuntimeType$isSubtype(dom$RuntimeType$nothingType(), dom$RuntimeType$anyType())
  }

  axiom {
    dom$RuntimeType$isSubtype(dom$RuntimeType$anyType(), dom$RuntimeType$anyType())
  }

  axiom {
    dom$RuntimeType$isSubtype(dom$RuntimeType$functionType(), dom$RuntimeType$anyType())
  }

  axiom {
    dom$RuntimeType$isSubtype(dom$RuntimeType$T_class_global$class_Foo(), dom$RuntimeType$anyType())
  }

  axiom dom$RuntimeType$supertype_of_nothing {
    (forall t: dom$RuntimeType ::dom$RuntimeType$isSubtype(dom$RuntimeType$nothingType(),
      t))
  }

  axiom dom$RuntimeType$any_not_nullable {
    (forall t: dom$RuntimeType ::!dom$RuntimeType$isSubtype(dom$RuntimeType$nullable(t),
      dom$RuntimeType$anyType()))
  }

  axiom dom$RuntimeType$null_smartcast_value_level {
    (forall r: Ref, t: dom$RuntimeType ::
      { dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(r), dom$RuntimeType$nullable(t)) }
      dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(r), dom$RuntimeType$nullable(t)) ==>
      r == dom$RuntimeType$nullValue() ||
      dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(r), t))
  }

  axiom dom$RuntimeType$nothing_empty {
    (forall r: Ref ::!dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(r), dom$RuntimeType$nothingType()))
  }

  axiom dom$RuntimeType$null_smartcast_type_level {
    (forall t1: dom$RuntimeType, t2: dom$RuntimeType ::
      { dom$RuntimeType$isSubtype(t1, dom$RuntimeType$anyType()), dom$RuntimeType$isSubtype(t1,
      dom$RuntimeType$nullable(t2)) }
      dom$RuntimeType$isSubtype(t1, dom$RuntimeType$anyType()) &&
      dom$RuntimeType$isSubtype(t1, dom$RuntimeType$nullable(t2)) ==>
      dom$RuntimeType$isSubtype(t1, t2))
  }

  axiom dom$RuntimeType$type_of_null {
    dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(dom$RuntimeType$nullValue()),
    dom$RuntimeType$nullable(dom$RuntimeType$nothingType()))
  }

  axiom dom$RuntimeType$type_of_unit {
    dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(dom$RuntimeType$unitValue()),
    dom$RuntimeType$unitType())
  }

  axiom dom$RuntimeType$uniqueness_of_unit {
    (forall r: Ref ::
      { dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(r), dom$RuntimeType$unitType()) }
      dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(r), dom$RuntimeType$unitType()) ==>
      r == dom$RuntimeType$unitValue())
  }

  axiom {
    (forall v: Int ::
      { dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(dom$RuntimeType$intToRef(v)),
      dom$RuntimeType$intType()) }
      dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(dom$RuntimeType$intToRef(v)),
      dom$RuntimeType$intType()))
  }

  axiom {
    (forall v: Int ::
      { dom$RuntimeType$intFromRef(dom$RuntimeType$intToRef(v)) }
      dom$RuntimeType$intFromRef(dom$RuntimeType$intToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { dom$RuntimeType$intToRef(dom$RuntimeType$intFromRef(r)) }
      dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(r), dom$RuntimeType$intType()) ==>
      dom$RuntimeType$intToRef(dom$RuntimeType$intFromRef(r)) == r)
  }

  axiom {
    (forall v: Bool ::
      { dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(dom$RuntimeType$boolToRef(v)),
      dom$RuntimeType$boolType()) }
      dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(dom$RuntimeType$boolToRef(v)),
      dom$RuntimeType$boolType()))
  }

  axiom {
    (forall v: Bool ::
      { dom$RuntimeType$boolFromRef(dom$RuntimeType$boolToRef(v)) }
      dom$RuntimeType$boolFromRef(dom$RuntimeType$boolToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { dom$RuntimeType$boolToRef(dom$RuntimeType$boolFromRef(r)) }
      dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(r), dom$RuntimeType$boolType()) ==>
      dom$RuntimeType$boolToRef(dom$RuntimeType$boolFromRef(r)) == r)
  }
}

field class_Foo$member_x: Ref

field special$function_object_call_counter: Int

function special$andBools(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(result) ==
    (dom$RuntimeType$boolFromRef(arg1) && dom$RuntimeType$boolFromRef(arg2))


function special$divInts(arg1: Ref, arg2: Ref): Ref
  requires dom$RuntimeType$intFromRef(arg2) != 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) / dom$RuntimeType$intFromRef(arg2)


function special$duplicable(arg1: Ref): Bool


function special$geInts(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) >= dom$RuntimeType$intFromRef(arg2)


function special$gtInts(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) > dom$RuntimeType$intFromRef(arg2)


function special$impliesBools(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(result) ==
    (dom$RuntimeType$boolFromRef(arg1) ==>
    dom$RuntimeType$boolFromRef(arg2))


function special$leInts(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) <= dom$RuntimeType$intFromRef(arg2)


function special$ltInts(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) < dom$RuntimeType$intFromRef(arg2)


function special$minusInts(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) - dom$RuntimeType$intFromRef(arg2)


function special$notBool(arg1: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(result) ==
    !dom$RuntimeType$boolFromRef(arg1)


function special$orBools(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(result) ==
    (dom$RuntimeType$boolFromRef(arg1) || dom$RuntimeType$boolFromRef(arg2))


function special$plusInts(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) + dom$RuntimeType$intFromRef(arg2)


function special$remInts(arg1: Ref, arg2: Ref): Ref
  requires dom$RuntimeType$intFromRef(arg2) != 0
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) % dom$RuntimeType$intFromRef(arg2)


function special$timesInts(arg1: Ref, arg2: Ref): Ref
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(result), dom$RuntimeType$intType())
  ensures dom$RuntimeType$intFromRef(result) ==
    dom$RuntimeType$intFromRef(arg1) * dom$RuntimeType$intFromRef(arg2)


predicate T_class_global$class_Foo(special$class$predicate$subject: Ref) {
  acc(special$class$predicate$subject.class_Foo$member_x, wildcard) &&
  dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(special$class$predicate$subject.class_Foo$member_x),
  dom$RuntimeType$intType())
}

method class_Foo$constructor$fun_take$T_Int$return$T_class_global$class_Foo(local$x: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_Foo())
  ensures acc(T_class_global$class_Foo(ret), wildcard)
  ensures (unfolding acc(T_class_global$class_Foo(ret), wildcard) in
      ret.class_Foo$member_x == local$x)


method global$fun_f$fun_take$$return$T_Unit() returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$foo: Ref
  ret$0 := dom$RuntimeType$unitValue()
  local0$foo := class_Foo$constructor$fun_take$T_Int$return$T_class_global$class_Foo(dom$RuntimeType$intToRef(0))
  label label$ret$0
}

method special$invoke_function_object(anonymous$0: Ref)
  requires acc(anonymous$0.special$function_object_call_counter, write)
  ensures acc(anonymous$0.special$function_object_call_counter, write)
  ensures old(anonymous$0.special$function_object_call_counter) + 1 ==
    anonymous$0.special$function_object_call_counter


/full_viper_dump.kt:(172,173): info: Generated ExpEmbedding for global$fun_f$fun_take$$return$T_Unit:
Function(
    name = global$fun_f$fun_take$$return$T_Unit,
    {
        Var(ret$0) := Unit;
        Declare(
            Var(local0$foo),
            T_class_global$class_Foo,
            MethodCall(callee = class_Foo$constructor$fun_take$T_Int$return$T_class_global$class_Foo, Int(0)),
        );
    },
    return = label$ret$0,
)
