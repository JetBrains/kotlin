KT element: KtClass
KT element text:
public final class Foo public constructor() {
    public final fun myRequire(b: kotlin.Boolean): kotlin.Unit { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun myRequireAnd(b1: kotlin.Boolean, b2: kotlin.Boolean): kotlin.Unit { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun myRequireOr(b1: kotlin.Boolean, b2: kotlin.Boolean): kotlin.Unit { contract { /* compiled contract */ }; /* compiled code */ }

    public final fun myRequireNot(b: kotlin.Boolean): kotlin.Unit { contract { /* compiled contract */ }; /* compiled code */ }
}
FIR element: FirRegularClassImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
public final [ResolvedTo(BODY_RESOLVE)] class Foo : R|kotlin/Any| {
    public final [ResolvedTo(BODY_RESOLVE)] fun myRequire([ResolvedTo(BODY_RESOLVE)] b: R|kotlin/Boolean|): R|kotlin/Unit|
        [R|Contract description]
         <
            Returns(WILDCARD) -> b
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun myRequireAnd([ResolvedTo(BODY_RESOLVE)] b1: R|kotlin/Boolean|, [ResolvedTo(BODY_RESOLVE)] b2: R|kotlin/Boolean|): R|kotlin/Unit|
        [R|Contract description]
         <
            Returns(WILDCARD) -> b1 && b2
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun myRequireNot([ResolvedTo(BODY_RESOLVE)] b: R|kotlin/Boolean|): R|kotlin/Unit|
        [R|Contract description]
         <
            Returns(WILDCARD) -> !b
        >


    public final [ResolvedTo(BODY_RESOLVE)] fun myRequireOr([ResolvedTo(BODY_RESOLVE)] b1: R|kotlin/Boolean|, [ResolvedTo(BODY_RESOLVE)] b2: R|kotlin/Boolean|): R|kotlin/Unit|
        [R|Contract description]
         <
            Returns(WILDCARD) -> b1 || b2
        >


    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] constructor(): R|Foo|

}
