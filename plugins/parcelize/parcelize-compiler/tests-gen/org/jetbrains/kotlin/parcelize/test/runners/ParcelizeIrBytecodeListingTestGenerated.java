/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.parcelize.test.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/parcelize/parcelize-compiler/testData/codegen")
@TestDataPath("$PROJECT_ROOT")
public class ParcelizeIrBytecodeListingTestGenerated extends AbstractParcelizeIrBytecodeListingTest {
  @Test
  public void testAllFilesPresentInCodegen() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/parcelize/parcelize-compiler/testData/codegen"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Test
  @TestMetadata("classLoaderValues.kt")
  public void testClassLoaderValues() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/classLoaderValues.kt");
  }

  @Test
  @TestMetadata("customDescribeContents.kt")
  public void testCustomDescribeContents() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/customDescribeContents.kt");
  }

  @Test
  @TestMetadata("customParcelablesDifferentModule.kt")
  public void testCustomParcelablesDifferentModule() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/customParcelablesDifferentModule.kt");
  }

  @Test
  @TestMetadata("customParcelablesSameModule.kt")
  public void testCustomParcelablesSameModule() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/customParcelablesSameModule.kt");
  }

  @Test
  @TestMetadata("customSimple.kt")
  public void testCustomSimple() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/customSimple.kt");
  }

  @Test
  @TestMetadata("customSimpleWithNewArray.kt")
  public void testCustomSimpleWithNewArray() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/customSimpleWithNewArray.kt");
  }

  @Test
  @TestMetadata("describeContentsFromSuperType.kt")
  public void testDescribeContentsFromSuperType() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/describeContentsFromSuperType.kt");
  }

  @Test
  @TestMetadata("duplicatingClinit.kt")
  public void testDuplicatingClinit() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/duplicatingClinit.kt");
  }

  @Test
  @TestMetadata("efficientParcelable.kt")
  public void testEfficientParcelable() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/efficientParcelable.kt");
  }

  @Test
  @TestMetadata("generics.kt")
  public void testGenerics() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/generics.kt");
  }

  @Test
  @TestMetadata("IBinderIInterface.kt")
  public void testIBinderIInterface() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/IBinderIInterface.kt");
  }

  @Test
  @TestMetadata("kt25839.kt")
  public void testKt25839() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/kt25839.kt");
  }

  @Test
  @TestMetadata("listInsideList.kt")
  public void testListInsideList() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/listInsideList.kt");
  }

  @Test
  @TestMetadata("nullableNotNullSize.kt")
  public void testNullableNotNullSize() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/nullableNotNullSize.kt");
  }

  @Test
  @TestMetadata("parcelable.kt")
  public void testParcelable() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/parcelable.kt");
  }

  @Test
  @TestMetadata("parcelableCreator.kt")
  public void testParcelableCreator() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/parcelableCreator.kt");
  }

  @Test
  @TestMetadata("primitiveArrays.kt")
  public void testPrimitiveArrays() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/primitiveArrays.kt");
  }

  @Test
  @TestMetadata("serializable.kt")
  public void testSerializable() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/serializable.kt");
  }

  @Test
  @TestMetadata("serializeValue.kt")
  public void testSerializeValue() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/serializeValue.kt");
  }

  @Test
  @TestMetadata("simple.kt")
  public void testSimple() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/simple.kt");
  }

  @Test
  @TestMetadata("simpleList.kt")
  public void testSimpleList() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/simpleList.kt");
  }

  @Test
  @TestMetadata("simplePersistentList.kt")
  public void testSimplePersistentList() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/simplePersistentList.kt");
  }

  @Test
  @TestMetadata("size.kt")
  public void testSize() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/size.kt");
  }

  @Test
  @TestMetadata("unsignedPrimitiveArrays.kt")
  public void testUnsignedPrimitiveArrays() {
    runTest("plugins/parcelize/parcelize-compiler/testData/codegen/unsignedPrimitiveArrays.kt");
  }
}
