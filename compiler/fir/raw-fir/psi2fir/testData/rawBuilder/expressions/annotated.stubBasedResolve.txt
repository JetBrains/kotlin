FILE: [ResolvedTo(BODY_RESOLVE)] annotated.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.LOCAL_VARIABLE|)) @R|kotlin/annotation/Retention|[Types](value = Q|kotlin/annotation/AnnotationRetention|.R|kotlin/annotation/AnnotationRetention.SOURCE|) public final [ResolvedTo(BODY_RESOLVE)] annotation class Ann : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Ann] constructor(): R|Ann| {
            super<R|kotlin/Any|>()
        }

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo([ResolvedTo(ANNOTATION_ARGUMENTS)] arg: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }
    public final data [ResolvedTo(BODY_RESOLVE)] class Two : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Two] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Two.x] x: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Two.y] y: R|kotlin/Int|): R|Two| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Two.component1, IsFromPrimaryConstructor=true] val x: R|kotlin/Int| = R|<local>/x|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Two] get(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Two.component2, IsFromPrimaryConstructor=true] val y: R|kotlin/Int| = R|<local>/y|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Two] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component1(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component2(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] fun copy([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Int| = this@R|/Two|.R|/Two.x|, [ResolvedTo(BODY_RESOLVE)] y: R|kotlin/Int| = this@R|/Two|.R|/Two.y|): R|Two|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun bar([ResolvedTo(ANNOTATION_ARGUMENTS)] two: R|Two|): R|kotlin/Unit| { LAZY_BLOCK }