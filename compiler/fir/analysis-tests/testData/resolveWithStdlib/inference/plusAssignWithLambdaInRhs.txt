FILE: plusAssignWithLambdaInRhs.kt
    public final fun test(): R|kotlin/Unit| {
        lval list: R|kotlin/collections/MutableList<kotlin/Function1<kotlin/String, kotlin/String>>| = Null(null)!!
        R|<local>/list|.R|kotlin/collections/plusAssign|<R|(kotlin/String) -> kotlin/String|>(fun <anonymous>(it: R|kotlin/String|): R|kotlin/String| <kind=UNKNOWN>  {
            ^ R|<local>/it|
        }
        )
    }
    public final class A<T> : R|kotlin/Any| {
        public constructor<T>(executor: R|(kotlin/Function1<T, kotlin/Unit>) -> kotlin/Unit|): R|A<T>| {
            super<R|kotlin/Any|>()
        }

        private final val executor: R|(kotlin/Function1<T, kotlin/Unit>) -> kotlin/Unit| = R|<local>/executor|
            private get(): R|(kotlin/Function1<T, kotlin/Unit>) -> kotlin/Unit|

    }
    public final fun <T> postpone(computation: R|() -> T|): R|A<T>| {
        lval queue: R|kotlin/collections/MutableList<kotlin/Function0<kotlin/Unit>>| = R|kotlin/collections/mutableListOf|<R|() -> kotlin/Unit|>()
        ^postpone R|/A.A|<R|T|>(<L> = A@fun <anonymous>(resolve: R|(T) -> kotlin/Unit|): R|kotlin/Unit| {
            R|<local>/queue|.R|kotlin/collections/plusAssign|<R|() -> kotlin/Unit|>(A@fun <anonymous>(): R|kotlin/Unit| <kind=UNKNOWN>  {
                R|<local>/resolve|.R|SubstitutionOverride<kotlin/Function1.invoke: R|kotlin/Unit|>|(R|<local>/computation|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
            }
            )
        }
        )
    }
