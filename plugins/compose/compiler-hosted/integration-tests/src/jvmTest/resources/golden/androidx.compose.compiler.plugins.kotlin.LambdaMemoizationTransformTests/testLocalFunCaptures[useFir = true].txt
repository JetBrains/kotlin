//
// Source
// ------------------------------------------

import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.runtime.Composable

@NonRestartableComposable
@Composable
fun Err() {
    // `x` is not a capture of handler, but is treated as such.
    fun handler() {
        { x: Int -> x }
    }
    // Lambda calling handler. To find captures, we need captures of `handler`.
    {
      handler()
    }
}

//
// Transformed IR
// ------------------------------------------

@NonRestartableComposable
@Composable
@FunctionKeyMeta(key = 893370351, startOffset = 200, endOffset = 543)
fun Err(%composer: Composer?, %changed: Int) {
  sourceInformationMarkerStart(%composer, <>, "C(Err)<{>:Test.kt")
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  fun handler() {
    { x: Int ->
      x
    }
  }
  sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
  val tmp0_group = %composer.cache(false) {
    {
      handler()
    }
  }
  sourceInformationMarkerEnd(%composer)
  tmp0_group
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  sourceInformationMarkerEnd(%composer)
}
