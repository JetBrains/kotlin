RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(COMPANION_GENERATION)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(SUPER_TYPES)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

TYPES:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? [ResolvedTo(TYPES)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

STATUS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public final [ResolvedTo(STATUS)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public final [ResolvedTo(CONTRACTS)] fun implicitType1(): <implicit> { LAZY_BLOCK }
    public final? [ResolvedTo(RAW_FIR)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType2(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

        private final? const [ResolvedTo(RAW_FIR)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun expectedType(): @Anno[Unresolved](LAZY_EXPRESSION) Int { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [PostponedSymbolsForAnnotationResolutionKey=[FirNamedFunctionSymbol usage/TopLevelObject.expectedType]] fun implicitType1(): R|@R|usage/Anno|(privateConstVal#)  kotlin/Int| {
        ^implicitType1 Q|usage/TopLevelObject|.R|usage/TopLevelObject.expectedType|()
    }
    public final [ResolvedTo(STATUS)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] fun expectedType2(): R|@R|usage/Anno|(privateConstVal#)  kotlin/Int| { LAZY_BLOCK }

        private final const [ResolvedTo(STATUS)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public final [ResolvedTo(CONTRACTS)] fun expectedType(): R|@R|usage/Anno|(privateConstVal#)  kotlin/Int| {
            ^expectedType IntegerLiteral(4)
        }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=usage/Anno.s] s: String): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public final [ResolvedTo(CONSTANT_EVALUATION)] [PostponedSymbolsForAnnotationResolutionKey=[FirNamedFunctionSymbol usage/TopLevelObject.expectedType]] fun implicitType1(): R|@R|usage/Anno|(privateConstVal#)  kotlin/Int| {
        ^implicitType1 Q|usage/TopLevelObject|.R|usage/TopLevelObject.expectedType|()
    }
    public final [ResolvedTo(STATUS)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] fun expectedType2(): R|@R|usage/Anno|(privateConstVal#)  kotlin/Int| { LAZY_BLOCK }

        private final const [ResolvedTo(STATUS)] val privateConstVal: <implicit> = LAZY_EXPRESSION
            private [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelObject] get(): <implicit>

        public final [ResolvedTo(CONTRACTS)] fun expectedType(): R|@R|usage/Anno|(privateConstVal#)  kotlin/Int| {
            ^expectedType IntegerLiteral(4)
        }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=usage/Anno.s] s: R|kotlin/String|): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun implicitType1(): R|@R|usage/Anno|(s = this@R|usage/TopLevelObject|.R|usage/TopLevelObject.privateConstVal|)  kotlin/Int| {
        ^implicitType1 Q|usage/TopLevelObject|.R|usage/TopLevelObject.expectedType|()
    }
    public final [ResolvedTo(STATUS)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] fun expectedType2(): R|@R|usage/Anno|(privateConstVal#)  kotlin/Int| { LAZY_BLOCK }

        private final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val privateConstVal: R|kotlin/String| = String(privateConstVal)
            private [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=TopLevelObject] get(): R|kotlin/String|

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun expectedType(): R|@R|usage/Anno|(s = this@R|usage/TopLevelObject|.R|usage/TopLevelObject.privateConstVal|)  kotlin/Int| {
            ^expectedType IntegerLiteral(4)
        }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] implicitTypeWithInaccessibleAnnotation.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=usage/Anno.s] s: R|kotlin/String|): R|usage/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun implicitType1(): R|@R|usage/Anno|(s = this@R|usage/TopLevelObject|.R|usage/TopLevelObject.privateConstVal|)  kotlin/Int| {
        ^implicitType1 Q|usage/TopLevelObject|.R|usage/TopLevelObject.expectedType|()
    }
    public final [ResolvedTo(STATUS)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] fun expectedType2(): R|@R|usage/Anno|(privateConstVal#)  kotlin/Int| { LAZY_BLOCK }

        private final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val privateConstVal: R|kotlin/String| = String(privateConstVal)
            private [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=TopLevelObject] get(): R|kotlin/String|

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun expectedType(): R|@R|usage/Anno|(s = this@R|usage/TopLevelObject|.R|usage/TopLevelObject.privateConstVal|)  kotlin/Int| {
            ^expectedType IntegerLiteral(4)
        }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun implicitType2(): <implicit> { LAZY_BLOCK }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] implicitTypeWithInaccessibleAnnotation.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=usage/Anno.s] s: R|kotlin/String|): R|usage/Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun implicitType1(): R|@R|usage/Anno|(s = this@R|usage/TopLevelObject|.R|usage/TopLevelObject.privateConstVal|)  kotlin/Int| {
        ^implicitType1 Q|usage/TopLevelObject|.R|usage/TopLevelObject.expectedType|()
    }
    public final [ResolvedTo(BODY_RESOLVE)] object TopLevelObject : R|kotlin/Any| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=TopLevelObject] constructor(): R|usage/TopLevelObject| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun expectedType2(): R|@R|usage/Anno|(s = this@R|usage/TopLevelObject|.R|usage/TopLevelObject.privateConstVal|)  kotlin/Int| {
            ^expectedType2 Int(4)
        }

        private final const [ResolvedTo(BODY_RESOLVE)] [EvaluatedValue=String(privateConstVal)] val privateConstVal: R|kotlin/String| = String(privateConstVal)
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=TopLevelObject] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] fun expectedType(): R|@R|usage/Anno|(s = this@R|usage/TopLevelObject|.R|usage/TopLevelObject.privateConstVal|)  kotlin/Int| {
            ^expectedType Int(4)
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun implicitType2(): R|@R|usage/Anno|(s = this@R|usage/TopLevelObject|.R|usage/TopLevelObject.privateConstVal|)  kotlin/Int| {
        ^implicitType2 Q|usage/TopLevelObject|.R|usage/TopLevelObject.expectedType2|()
    }
