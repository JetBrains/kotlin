//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun ArrayConstructorTest(n: Int) {
    Array(n) { remember { it } }
    ByteArray(n) { remember { it.toByte() } }
    CharArray(n) { remember { it.toChar() } }
    ShortArray(n) { remember { it.toShort() } }
    IntArray(n) { remember { it } }
    LongArray(n) { remember { it.toLong() } }
    FloatArray(n) { remember { it.toFloat() } }
    DoubleArray(n) { remember { it.toDouble() } }
    BooleanArray(n) { remember { false } }
}

//
// Transformed IR
// ------------------------------------------

@Composable
@FunctionKeyMeta(key = 1146237048, startOffset = 84, endOffset = 636)
fun ArrayConstructorTest(n: Int, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(ArrayConstructorTest)*<rememb...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(n)) 0b0100 else 0b0010
  }
  if (%composer.shouldExecute(%dirty and 0b0011 != 0b0010, %dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "*<rememb...>")
    val tmp0_group = Array(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          it
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    %composer.endReplaceGroup()
    tmp0_group
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "*<rememb...>")
    val tmp1_group = ByteArray(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          it.toByte()
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    %composer.endReplaceGroup()
    tmp1_group
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "*<rememb...>")
    val tmp2_group = CharArray(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          it.toChar()
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    %composer.endReplaceGroup()
    tmp2_group
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "*<rememb...>")
    val tmp3_group = ShortArray(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          it.toShort()
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    %composer.endReplaceGroup()
    tmp3_group
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "*<rememb...>")
    val tmp4_group = IntArray(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          it
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    %composer.endReplaceGroup()
    tmp4_group
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "*<rememb...>")
    val tmp5_group = LongArray(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          it.toLong()
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    %composer.endReplaceGroup()
    tmp5_group
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "*<rememb...>")
    val tmp6_group = FloatArray(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          it.toFloat()
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    %composer.endReplaceGroup()
    tmp6_group
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "*<rememb...>")
    val tmp7_group = DoubleArray(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          it.toDouble()
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    %composer.endReplaceGroup()
    tmp7_group
    val tmp8_group = BooleanArray(n) { it: Int ->
      val tmp1_return = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          false
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      tmp1_return
    }
    tmp8_group
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    ArrayConstructorTest(n, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
