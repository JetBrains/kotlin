package

@kotlin.OptIn(markerClass = {kotlin.experimental.ExperimentalTypeInference::class}) public inline fun </*0*/ T> builder(/*0*/ @kotlin.BuilderInference block: Builder<T>.() -> kotlin.Unit): Buildee<T>
private fun </*0*/ T> Builder<T>.consumer(/*0*/ builder: Builder<T>): kotlin.Unit
public fun </*0*/ T> Builder<T>.foo(): Buildee<T>

public final class Buildee</*0*/ T> {
    public constructor Buildee</*0*/ T>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Builder</*0*/ T> {
    public constructor Builder</*0*/ T>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
