plugins {
    id("org.jetbrains.kotlin.multiplatform")
    id("maven-publish")
    //id("org.jetbrains.kotlin.plugin.allopen")
    //id("org.jetbrains.kotlin.plugin.noarg")
    //id("com.gradleup.shadow")
    //id("application")
    //id("org.jetbrains.kotlin.kapt")
}

group = "com.example"
version = "1.0"

def shouldBeJs = true

kotlin {
    jvm("jvm6") {}
    jvm("jvm6") { println targetName } // access existing target

    if (shouldBeJs) {
        js("nodeJs") {
            nodejs()
        }
        wasmJs()
    }

    targets {
        linuxX64('linux64')
        mingwX64('mingw64')
        macosX64('macos64')
        macosArm64('macosArm64')

        // Check the DSL constructs in the Groovy DSL:
        jvm('jvm6') {
            println "Configuring $targetName"
            compilations.main {
                kotlinOptions {
                    println "jvmTarget = " + jvmTarget
                }
                defaultSourceSet {
                    println "Kotlin srcDirs: " + kotlin.srcDirs
                }
            }
        }

        all {
            mavenPublication {
                pom.withXml {
                    asNode().appendNode("name", "Sample MPP library")
                }
            }
        }
    }

    sourceSets {
        commonTest {
            dependencies {
                implementation(kotlin("test"))
            }
        }
        jvm6Main {
            dependencies {
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.4")
            }
        }
        jvm6Test {
            dependencies {
                implementation(kotlin("test-junit"))
            }
        }

        nativeMain { dependsOn commonMain }
        linux64Main { dependsOn nativeMain }
        macos64Main { dependsOn nativeMain }
        macosArm64Main { dependsOn nativeMain }
    }
}

kotlin.sourceSets.each { println(it.kotlin.srcDirs) }

// Check that a compilation may be created after project evaluation, KT-28896:
afterEvaluate {
    kotlin {
        jvm("jvm6").compilations.create("benchmark") {
            tasks.named("assemble") { dependsOn(compileKotlinTask) }
        }
    }
}

publishing {
    repositories {
        maven {
            name = "LocalRepo"
            url = uri("<localRepo>")
        }
    }
}
