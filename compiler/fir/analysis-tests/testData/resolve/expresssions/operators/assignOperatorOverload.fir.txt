FILE: assignOperatorOverload.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    public final class B : R|kotlin/Any| {
        public constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

    }
    public final operator fun R|B|.assign(a: R|kotlin/String|): R|kotlin/Unit| {
    }
    public final class C : R|kotlin/Any| {
        public constructor(): R|C| {
            super<R|kotlin/Any|>()
        }

        public final fun assign(a: R|A|): R|kotlin/Unit| {
        }

    }
    public final operator fun R|C|.assign(a: R|kotlin/String|): R|kotlin/Unit| {
    }
    public final operator fun R|C|.assign(a: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final operator fun R|kotlin/Int|.assign(a: R|kotlin/String|): R|kotlin/Unit| {
    }
    public final class ByDelegate : R|kotlin/Any| {
        public constructor(): R|ByDelegate| {
            super<R|kotlin/Any|>()
        }

        public final val v: R|kotlin/Int|by R|/Delegate.Delegate|()
            public get(): R|kotlin/Int| {
                ^ this@R|/ByDelegate|.D|/ByDelegate.v|.R|/Delegate.getValue|(this@R|/ByDelegate|, ::R|/ByDelegate.v|)
            }

    }
    public final class Delegate : R|kotlin/Any| {
        public constructor(): R|Delegate| {
            super<R|kotlin/Any|>()
        }

        public final operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(5)
        }

        public final operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }
    public final data class NullCheck : R|kotlin/Any| {
        public constructor(x: R|NullCheckContainer|): R|NullCheck| {
            super<R|kotlin/Any|>()
        }

        public final val x: R|NullCheckContainer| = R|<local>/x|
            public get(): R|NullCheckContainer|

        public final operator fun component1(): R|NullCheckContainer|

        public final fun copy(x: R|NullCheckContainer| = this@R|/NullCheck|.R|/NullCheck.x|): R|NullCheck|

    }
    public final data class NullCheckContainer : R|kotlin/Any| {
        public constructor(value: R|kotlin/String|): R|NullCheckContainer| {
            super<R|kotlin/Any|>()
        }

        public final var value: R|kotlin/String| = R|<local>/value|
            public get(): R|kotlin/String|
            public set(value: R|kotlin/String|): R|kotlin/Unit|

        public final operator fun component1(): R|kotlin/String|

        public final fun copy(value: R|kotlin/String| = this@R|/NullCheckContainer|.R|/NullCheckContainer.value|): R|NullCheckContainer|

    }
    public final operator fun R|NullCheckContainer|.assign(value: R|kotlin/String|): R|kotlin/Unit| {
    }
    public final operator fun R|NullCheckContainer|.plusAssign(value: R|kotlin/String|): R|kotlin/Unit| {
    }
    public final operator fun R|kotlin/String|.assign(a: R|kotlin/String|): R|kotlin/String| {
        ^assign String()
    }
    public final operator fun R|kotlin/String|.plusAssign(a: R|kotlin/String|): R|kotlin/String| {
        ^plusAssign String()
    }
    public final fun test(): R|kotlin/Unit| {
        lval a: R|A| = R|/A.A|()
        R|<local>/a| = String(5)
        lval b: R|B| = R|/B.B|()
        R|<local>/b| = <CS errors: /A.A>#()
        lval c: R|C| = R|/C.C|()
        R|<local>/c| = <CS errors: /A.A>#()
        R|<local>/c| = Long(1)
        lval delegate: R|ByDelegate| = R|/ByDelegate.ByDelegate|()
        R|<local>/delegate|.R|/ByDelegate.v| = String(OK)
        lval x: R|kotlin/String| = String()
        R|<local>/x|.R|/assign|(String())
        lval nullCheck: R|NullCheck?| = Null(null)
        R|<local>/nullCheck|.<Inapplicable(UNSAFE_CALL): /NullCheck.x># = String(Fail)
        R|<local>/nullCheck|?.{ $subj$.R|/NullCheck.x|.R|/assign|(String(Fail)) }
    }
