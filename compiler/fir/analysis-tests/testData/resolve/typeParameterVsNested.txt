FILE: typeParameterVsNested.kt
    public abstract interface Some : R|kotlin/Any| {
    }
    public abstract class My<T : R|test/Some|> : R|kotlin/Any| {
        public constructor<T : R|test/Some|>(): R|test/My<T>| {
            super<R|kotlin/Any|>()
        }

        public final inner class T<T : R|test/Some|> : R|kotlin/Any| {
            public constructor(): R|test/My.T<T>| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract val x: R|test/My.T<T>|
            public get(): R|test/My.T<T>|

        public abstract fun foo(arg: R|test/My.T<T>|): R|kotlin/Unit|

        public abstract val y: <ERROR TYPE REF: Type argument not defined>
            public get(): <ERROR TYPE REF: Type argument not defined>

        public abstract val z: <ERROR TYPE REF: Type argument not defined>
            public get(): <ERROR TYPE REF: Type argument not defined>

        public final class Some : <ERROR TYPE REF: Type parameter cannot be a super-type: T> {
            public constructor(): R|test/My.Some| {
                super<R|test/My.T<T>|>()
            }

        }

    }
    public abstract class Your<T : R|test/Some|> : <ERROR TYPE REF: Type parameter cannot be a super-type: T> {
        public constructor<T : R|test/Some|>(): R|test/Your<T>| {
            super<R|kotlin/Any|>()
        }

    }
