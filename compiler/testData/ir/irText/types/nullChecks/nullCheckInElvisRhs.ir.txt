Module: lib
Module: main
FILE fqName:<root> fileName:/nullCheckInElvisRhs.kt
  FUN name:baz visibility:public modality:FINAL <> () returnType:kotlin.String?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun baz (): kotlin.String? declared in <root>'
        CONST Null type=kotlin.Nothing? value=null
  FUN name:test visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test (): kotlin.String declared in <root>'
        BLOCK type=kotlin.String origin=ELVIS
          VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.String? [val]
            CALL 'public final fun baz (): kotlin.String? declared in <root>' type=kotlin.String? origin=null
          WHEN type=kotlin.String origin=null
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val tmp_0: kotlin.String? [val] declared in <root>.test' type=kotlin.String? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: TYPE_OP type=kotlin.String origin=IMPLICIT_NOTNULL typeOperand=kotlin.String
                CALL 'public/*package*/ open fun foo (): @[FlexibleNullability] kotlin.String? declared in <root>.RightElvisOperand' type=@[FlexibleNullability] kotlin.String? origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: GET_VAR 'val tmp_0: kotlin.String? [val] declared in <root>.test' type=kotlin.String? origin=null
