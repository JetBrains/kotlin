FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] lambda.kt
    public final data [ResolvedTo(BODY_RESOLVE)] class Tuple : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Tuple] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Tuple.x] x: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Tuple.y] y: R|kotlin/Int|): R|Tuple| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Tuple.component1, IsFromPrimaryConstructor=true] val x: R|kotlin/Int| = R|<local>/x|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Tuple] get(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Tuple.component2, IsFromPrimaryConstructor=true] val y: R|kotlin/Int| = R|<local>/y|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Tuple] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component1(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component2(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] fun copy([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Int| = this@R|/Tuple|.R|/Tuple.x|, [ResolvedTo(BODY_RESOLVE)] y: R|kotlin/Int| = this@R|/Tuple|.R|/Tuple.y|): R|Tuple|

    }
    public final inline [ResolvedTo(CONTRACTS)] fun use([ResolvedTo(CONTRACTS)] f: R|(Tuple) -> kotlin/Int|): <implicit> { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo(): R|kotlin/Int| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun bar(): R|kotlin/Int| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun test([ResolvedTo(ANNOTATION_ARGUMENTS)] list: R|kotlin/collections/List<kotlin/Int>|): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvedTo(CONTRACTS)] val simple: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val simpleWithArrow: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(CONTRACTS)] val another: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>