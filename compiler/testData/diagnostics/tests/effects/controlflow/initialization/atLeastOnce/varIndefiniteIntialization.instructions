== runTwice ==
fun <T> runTwice(@CalledInPlace(InvocationCount.AT_LEAST_ONCE) block: () -> T): T {
    block()
    return block();
}
---------------------
L0:
  1 <START>                                                                                          INIT: in: {} out: {}
    v(@CalledInPlace(InvocationCount.AT_LEAST_ONCE) block: () -> T)                                  INIT: in: {} out: {block=D}
    magic[FAKE_INITIALIZER](@CalledInPlace(InvocationCount.AT_LEAST_ONCE) block: () -> T) -> <v0>    INIT: in: {block=D} out: {block=D}
    w(block|<v0>)                                                                                    INIT: in: {block=D} out: {block=ID}
  2 mark({ block() return block(); })                                                                INIT: in: {block=ID} out: {block=ID}
    r(block) -> <v1>
    mark(block())
    call(block(), invoke|<v1>) -> <v2>                                                                                                       USE: in: {block=READ} out: {block=READ}
    r(block) -> <v3>                                                                                                                         USE: in: {} out: {block=READ}
    mark(block())
    call(block(), invoke|<v3>) -> <v4>
    ret(*|<v4>) L1
L1:
  1 <END>
error:
    <ERROR>                                                                                          INIT: in: {} out: {}
sink:
    <SINK>                                                                                           INIT: in: {block=I?} out: {block=I?}    USE: in: {} out: {}
=====================
== funWithUnknownInvocations ==
fun <T> funWithUnknownInvocations(block: () -> T) = block()
---------------------
L0:
  1 <START>                                            INIT: in: {} out: {}
    v(block: () -> T)                                  INIT: in: {} out: {block=D}
    magic[FAKE_INITIALIZER](block: () -> T) -> <v0>    INIT: in: {block=D} out: {block=D}
    w(block|<v0>)                                      INIT: in: {block=D} out: {block=ID}     USE: in: {block=READ} out: {block=READ}
    r(block) -> <v1>                                   INIT: in: {block=ID} out: {block=ID}    USE: in: {} out: {block=READ}
    mark(block())
    call(block(), invoke|<v1>) -> <v2>
    ret(*|<v2>) L1
L1:
    <END>
error:
    <ERROR>                                            INIT: in: {} out: {}
sink:
    <SINK>                                             INIT: in: {block=I?} out: {block=I?}    USE: in: {} out: {}
=====================
== indefiniteFlow ==
fun indefiniteFlow() {
    var x: Int

    funWithUnknownInvocations { runTwice { x = 42 } }

    <!UNINITIALIZED_VARIABLE!>x<!>.inc()
}
---------------------
L0:
  1 <START>                                                                                                        INIT: in: {} out: {}          USE: in: {} out: {}
  2 mark({ var x: Int funWithUnknownInvocations { runTwice { x = 42 } } <!UNINITIALIZED_VARIABLE!>x<!>.inc() })
    v(var x: Int)                                                                                                  INIT: in: {} out: {x=D}
    mark({ runTwice { x = 42 } })                                                                                  INIT: in: {x=D} out: {x=D}
    jmp?(L2)
    d({ runTwice { x = 42 } })                                                                                     INIT: in: {x=I} out: {x=I}    USE: in: {x=ONLY_WRITTEN_NEVER_READ} out: {x=ONLY_WRITTEN_NEVER_READ}
L2 [after local declaration]:
    r({ runTwice { x = 42 } }) -> <v0>                                                                             INIT: in: {x=D} out: {x=D}
    mark(funWithUnknownInvocations { runTwice { x = 42 } })
    call(funWithUnknownInvocations { runTwice { x = 42 } }, funWithUnknownInvocations|<v0>) -> <v1>
    magic[UNRESOLVED_CALL](UNINITIALIZED_VARIABLE) -> <v2>
    mark(!UNINITIALIZED_VARIABLE)
    call(!UNINITIALIZED_VARIABLE, <ERROR FUNCTION>|<v2>) -> <v3>
L1:
  1 <END>                                                                                                          INIT: in: {} out: {}
error:
    <ERROR>
sink:
    <SINK>                                                                                                                                       USE: in: {} out: {}
=====================
== anonymous_0 ==
{ runTwice { x = 42 } }
---------------------
L3:
  3 <START>                                              INIT: in: {x=D} out: {x=D}
  4 mark(runTwice { x = 42 })
    mark({ x = 42 })
    mark(runTwice { x = 42 })
    call(runTwice { x = 42 }, runTwice|!<v0>) -> <v1>
L5 [before inlined lambda]:
    inlined({ x = 42 })                                  INIT: in: {x=I} out: {x=I}
    jmp?(L5)                                                                           USE: in: {x=ONLY_WRITTEN_NEVER_READ} out: {x=ONLY_WRITTEN_NEVER_READ}
L6 [after inlined lambda]:
    r({ x = 42 }) -> <v2>
L4:
  3 <END>
error:
    <ERROR>                                              INIT: in: {} out: {}
sink:
    <SINK>                                               INIT: in: {x=I} out: {x=I}    USE: in: {} out: {}
=====================
== anonymous_1 ==
{ x = 42 }
---------------------
L7:
  5 <START>          INIT: in: {x=I?} out: {x=I?}
  6 mark(x = 42)
    r(42) -> <v0>
    w(x|<v0>)        INIT: in: {x=I?} out: {x=I}
L8:
  5 <END>            INIT: in: {x=I} out: {x=I}
error:
    <ERROR>          INIT: in: {} out: {}
sink:
    <SINK>           INIT: in: {x=I} out: {x=I}      USE: in: {x=ONLY_WRITTEN_NEVER_READ} out: {x=ONLY_WRITTEN_NEVER_READ}
=====================
== shadowing ==
fun shadowing() {
    var x: Int
    runTwice { val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc() }
    <!UNINITIALIZED_VARIABLE!>x<!>.inc()
}
---------------------
L0:
  1 <START>                                                                                                                    INIT: in: {} out: {}          USE: in: {} out: {}
  2 mark({ var x: Int runTwice { val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc() } <!UNINITIALIZED_VARIABLE!>x<!>.inc() })
    v(var x: Int)                                                                                                              INIT: in: {} out: {x=D}
    mark({ val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc() })                                                                 INIT: in: {x=D} out: {x=D}
    mark(runTwice { val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc() })
    call(runTwice { val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc() }, runTwice|!<v0>) -> <v1>
L2 [before inlined lambda]:
    inlined({ val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc() })                                                              INIT: in: {x=I} out: {x=I}
    jmp?(L2)                                                                                                                                                 USE: in: {x=WRITTEN_AFTER_READ} out: {x=WRITTEN_AFTER_READ}
L3 [after inlined lambda]:
    r({ val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc() }) -> <v2>
    magic[UNRESOLVED_CALL](UNINITIALIZED_VARIABLE) -> <v3>
    mark(!UNINITIALIZED_VARIABLE)
    call(!UNINITIALIZED_VARIABLE, <ERROR FUNCTION>|<v3>) -> <v4>
L1:
  1 <END>                                                                                                                      INIT: in: {} out: {}
error:
    <ERROR>
sink:
    <SINK>                                                                                                                                                   USE: in: {} out: {}
=====================
== anonymous_2 ==
{ val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc() }
---------------------
L4:
  3 <START>                                                   INIT: in: {x=I?} out: {x=I?}
  4 mark(val <!NAME_SHADOWING!>x<!>: Int; x = 42; x.inc())
    v(val <!NAME_SHADOWING)                                   INIT: in: {x=I?} out: {NAME_SHADOWING=D, x=I?}
    r(42) -> <v0>                                             INIT: in: {NAME_SHADOWING=D, x=I?} out: {NAME_SHADOWING=D, x=I?}    USE: in: {x=WRITTEN_AFTER_READ} out: {x=WRITTEN_AFTER_READ}
    w(x|<v0>)                                                 INIT: in: {NAME_SHADOWING=D, x=I?} out: {NAME_SHADOWING=D, x=I}     USE: in: {x=READ} out: {x=WRITTEN_AFTER_READ}
    mark(x.inc())                                             INIT: in: {NAME_SHADOWING=D, x=I} out: {NAME_SHADOWING=D, x=I}      USE: in: {x=READ} out: {x=READ}
    r(x) -> <v1>                                                                                                                  USE: in: {x=WRITTEN_AFTER_READ} out: {x=READ}
    mark(inc())
    call(inc(), inc|<v1>) -> <v2>
  3 ret(*|<v2>) L5                                            INIT: in: {x=I} out: {x=I}
L5:
    <END>
error:
    <ERROR>                                                   INIT: in: {} out: {}
sink:
    <SINK>                                                    INIT: in: {x=I} out: {x=I}                                          USE: in: {x=WRITTEN_AFTER_READ} out: {x=WRITTEN_AFTER_READ}
=====================
