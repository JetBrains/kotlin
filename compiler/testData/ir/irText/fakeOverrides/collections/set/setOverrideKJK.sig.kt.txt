// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
abstract class A : Java1 {
  // CHECK:
  //   Mangled name: A#<init>(){}
  //   Public signature: /A.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: A#add(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /A.add|8629542948597441975[0]
  //   Public signature debug description: add(kotlin.Any?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#addAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  //   Public signature: /A.addAll|1853624435708785695[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  /* fake */ override fun addAll(elements: Collection<Any?>): Boolean

  // CHECK:
  //   Mangled name: A#clear(){}
  //   Public signature: /A.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: A#contains(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /A.contains|4314304964322748880[0]
  //   Public signature debug description: contains(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun contains(element: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#containsAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  //   Public signature: /A.containsAll|7057326425365175105[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<Any?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /A.equals|722809408929142791[0]
  //   Public signature debug description: equals(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK:
  //   Mangled name: A#forEach(java.util.function.Consumer<in|kotlin.Any?>?){}
  //   Public signature: /A.forEach|2396791366322203147[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Any?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Any?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: A#hashCode(){}kotlin.Int
  //   Public signature: /A.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: A#isEmpty(){}kotlin.Boolean
  //   Public signature: /A.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#iterator(){}kotlin.collections.MutableIterator<kotlin.Any?>
  //   Public signature: /A.iterator|5172039261324384933[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Any?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Any?>

  // CHECK JVM_IR:
  //   Mangled name: A#parallelStream(){}java.util.stream.Stream<kotlin.Any?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /A.parallelStream|-1413621844920680303[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Any?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Any?>

  // CHECK JVM_IR:
  //   Mangled name: A#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /A.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  /* fake */ override fun remove(element: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#removeAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  //   Public signature: /A.removeAll|2083414713666946876[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<Any?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#removeIf(java.util.function.Predicate<in|kotlin.Any?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /A.removeIf|-7801901543191325013[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Any?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Any?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#retainAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  //   Public signature: /A.retainAll|-4369081002402657372[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<Any?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#spliterator(){}java.util.Spliterator<kotlin.Any?>{EnhancedNullability}
  //   Public signature: /A.spliterator|-839758233608771347[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Any?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Any?>

  // CHECK JVM_IR:
  //   Mangled name: A#stream(){}java.util.stream.Stream<kotlin.Any?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /A.stream|-7611616968057929317[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Any?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Any?>

  // CHECK JVM_IR:
  //   Mangled name: A#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /A.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: A#toArray(kotlin.Array<out|0:0?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /A.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: A#toString(){}kotlin.String
  //   Public signature: /A.toString|6958853723545266802[0]
  //   Public signature debug description: toString(){}kotlin.String
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: A{}size
  //   Public signature: /A.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: A#<get-size>(){}kotlin.Int
    //   Public signature: /A.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: B
//   Public signature: /B|null[0]
class B : Java1 {
  // CHECK:
  //   Mangled name: B{}size
  //   Public signature: /B.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: B#<get-size>(){}kotlin.Int
    //   Public signature: /B.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: B#<init>(kotlin.Int){}
  //   Public signature: /B.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(size: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: B#addAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  //   Public signature: /B.addAll|1853624435708785695[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  /* fake */ override fun addAll(elements: Collection<Any?>): Boolean

  // CHECK:
  //   Mangled name: B#clear(){}
  //   Public signature: /B.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: B#contains(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /B.contains|4314304964322748880[0]
  //   Public signature debug description: contains(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun contains(element: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#containsAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  //   Public signature: /B.containsAll|7057326425365175105[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<Any?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /B.equals|722809408929142791[0]
  //   Public signature debug description: equals(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK:
  //   Mangled name: B#forEach(java.util.function.Consumer<in|kotlin.Any?>?){}
  //   Public signature: /B.forEach|2396791366322203147[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Any?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Any?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: B#hashCode(){}kotlin.Int
  //   Public signature: /B.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: B#isEmpty(){}kotlin.Boolean
  //   Public signature: /B.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#parallelStream(){}java.util.stream.Stream<kotlin.Any?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /B.parallelStream|-1413621844920680303[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Any?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Any?>

  // CHECK JVM_IR:
  //   Mangled name: B#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /B.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  /* fake */ override fun remove(element: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#removeAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  //   Public signature: /B.removeAll|2083414713666946876[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<Any?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#removeIf(java.util.function.Predicate<in|kotlin.Any?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /B.removeIf|-7801901543191325013[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Any?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Any?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#retainAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  //   Public signature: /B.retainAll|-4369081002402657372[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Any?>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<Any?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#spliterator(){}java.util.Spliterator<kotlin.Any?>{EnhancedNullability}
  //   Public signature: /B.spliterator|-839758233608771347[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Any?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Any?>

  // CHECK JVM_IR:
  //   Mangled name: B#stream(){}java.util.stream.Stream<kotlin.Any?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /B.stream|-7611616968057929317[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Any?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Any?>

  // CHECK JVM_IR:
  //   Mangled name: B#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /B.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: B#toArray(kotlin.Array<out|0:0?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /B.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: B#toString(){}kotlin.String
  //   Public signature: /B.toString|6958853723545266802[0]
  //   Public signature debug description: toString(){}kotlin.String
  /* fake */ override fun toString(): String

  // CHECK JVM_IR:
  //   Mangled name: B#add(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /B.add|8629542948597441975[0]
  //   Public signature debug description: add(kotlin.Any?){}kotlin.Boolean
  override fun add(element: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#iterator(){}kotlin.collections.MutableIterator<kotlin.Any>
  //   Public signature: /B.iterator|-6120167154245536024[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Any>
  override operator fun iterator(): MutableIterator<Any>

}

// CHECK:
//   Mangled name: #test(A;B){}
//   Public signature: /test|-2533013708701322011[0]
//   Public signature debug description: test(A;B){}
fun test(a: A, b: B): Unit
