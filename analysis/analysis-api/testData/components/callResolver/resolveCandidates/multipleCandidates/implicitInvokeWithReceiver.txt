KtErrorCallInfo:
  candidateCalls = [
    KtSimpleFunctionCall:
      isImplicitInvoke = false
      partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
        dispatchReceiver = KtExplicitReceiverValue:
          expression = a
          isSafeNavigation = false
        extensionReceiver = null
        signature = KtFunctionLikeSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /A.x(<dispatch receiver>: A, b: kotlin.Boolean): kotlin.Unit
          valueParameters = [
            KtVariableLikeSignature:
              name = b
              receiverType = null
              returnType = kotlin.Boolean
              symbol = b: kotlin.Boolean
          ]
      argumentMapping = {
        1 -> (KtVariableLikeSignature:
          name = b
          receiverType = null
          returnType = kotlin.Boolean
          symbol = b: kotlin.Boolean)
      }
  ]
  diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is kotlin/Int but kotlin/Boolean was expected>

KtSuccessCallInfo:
  call = KtSimpleFunctionCall:
    isImplicitInvoke = true
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = x
        isSafeNavigation = false
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.Int
        returnType = kotlin.Unit
        symbol = /invoke(<extension receiver>: kotlin.Int, i: kotlin.Int): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = i
            receiverType = null
            returnType = kotlin.Int
            symbol = i: kotlin.Int
        ]
    argumentMapping = {
      1 -> (KtVariableLikeSignature:
        name = i
        receiverType = null
        returnType = kotlin.Int
        symbol = i: kotlin.Int)
    }
