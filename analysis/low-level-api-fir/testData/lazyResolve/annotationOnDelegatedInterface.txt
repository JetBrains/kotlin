RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] annotationOnDelegatedInterface.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final? [ResolvedTo(RAW_FIR)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Derived] constructor([ResolvedTo(RAW_FIR)] b: Base): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(RAW_FIR)] field $$delegate_0: Base = LAZY_EXPRESSION

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final? [ResolvedTo(RAW_FIR)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Derived] constructor([ResolvedTo(RAW_FIR)] b: Base): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(RAW_FIR)] field $$delegate_0: Base = LAZY_EXPRESSION

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Derived] constructor([ResolvedTo(RAW_FIR)] b: Base): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] field $$delegate_0: Base = LAZY_EXPRESSION

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final? [ResolvedTo(COMPANION_GENERATION)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Derived] constructor([ResolvedTo(RAW_FIR)] b: Base): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(COMPANION_GENERATION)] field $$delegate_0: Base = LAZY_EXPRESSION

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Derived] constructor([ResolvedTo(RAW_FIR)] b: Base): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(SUPER_TYPES)] field $$delegate_0: Base = LAZY_EXPRESSION

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final? [ResolvedTo(TYPES)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Derived] constructor([ResolvedTo(RAW_FIR)] b: Base): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(TYPES)] field $$delegate_0: R|Base| = LAZY_EXPRESSION

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor([ResolvedTo(STATUS)] b: R|Base|): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|Base| = LAZY_EXPRESSION

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor([ResolvedTo(STATUS)] b: R|Base|): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] field $$delegate_0: R|Base| = LAZY_EXPRESSION

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final [ResolvedTo(CONTRACTS)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor([ResolvedTo(STATUS)] b: R|Base|): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(CONTRACTS)] field $$delegate_0: R|Base| = LAZY_EXPRESSION

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor([ResolvedTo(STATUS)] b: R|Base|): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] field $$delegate_0: R|Base| = LAZY_EXPRESSION

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final [ResolvedTo(CONSTANT_EVALUATION)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor([ResolvedTo(STATUS)] b: R|Base|): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(CONSTANT_EVALUATION)] field $$delegate_0: R|Base| = LAZY_EXPRESSION

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Some : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Some.s] s: String): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Some] get(): String

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor([ResolvedTo(STATUS)] b: R|Base|): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(ANNOTATION_ARGUMENTS)] field $$delegate_0: R|Base| = LAZY_EXPRESSION

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun print(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class BaseImpl : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/BaseImpl.x] x: Int): R|BaseImpl| {
            LAZY_super<<implicit>>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=BaseImpl] get(): Int

        public? open? override [ResolvedTo(RAW_FIR)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) public final [ResolvedTo(STATUS)] annotation class Some : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Some] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Some.s] s: R|kotlin/String|): R|Some| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Some] get(): R|kotlin/String|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor([ResolvedTo(STATUS)] b: R|Base|): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(BODY_RESOLVE)] field $$delegate_0: R|Base| = @R|Some|[Types](s = String(Anything)) R|<local>/b|

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun print(): R|kotlin/Unit|

    }
    public final [ResolvedTo(BODY_RESOLVE)] class BaseImpl : R|Base| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/BaseImpl.x] x: R|kotlin/Int|): R|BaseImpl| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val x: R|kotlin/Int| = R|<local>/x|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=BaseImpl] get(): R|kotlin/Int|

        public open override [ResolvedTo(BODY_RESOLVE)] fun print(): R|kotlin/Unit| {
        }

    }
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class Some : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Some.s] s: R|kotlin/String|): R|Some| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] get(): R|kotlin/String|

    }
    public final [ResolvedTo(BODY_RESOLVE)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Derived] constructor([ResolvedTo(BODY_RESOLVE)] b: R|Base|): R|Derived| {
            super<R|kotlin/Any|>()
        }

        private final [ResolvedTo(BODY_RESOLVE)] field $$delegate_0: R|Base| = @R|Some|[Types](s = String(Anything)) R|<local>/b|

    }
