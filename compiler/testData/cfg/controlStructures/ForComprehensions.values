== map ==
fun IntRange.map<T>(f: (Int) -> T): List<T> = throw AssertionError("")
---------------------
                     <v0>: {<: (Int) -> T}   NEW: magic[FAKE_INITIALIZER](f: (Int) -> T) -> <v0>
""                   <v1>: {<: Any!}         NEW: r("") -> <v1>                                 
AssertionError("")   <v2>: {<: Throwable}    NEW: call(AssertionError(""), <init>|<v1>) -> <v2> 
=====================
== main ==
fun main() {
    foo(for (i in 1..3) yield i*i)

    val list = for (i in 1..3) yield {
        foo(i)
        i*i
    }

    val matrix = for (i in 1..3) yield for (j in 1..i) yield i*j
}
---------------------
1                                                 <v0>: Int                     NEW: r(1) -> <v0>                                                                    
3                                                 <v1>: Int                     NEW: r(3) -> <v1>                                                                    
1..3                                              <v2>: IntRange                NEW: call(1..3, rangeTo|<v0>, <v1>) -> <v2>                                          
for (i in 1..3) yield i*i                         <v4>: {<: List<Int>}          NEW: call(for (i in 1..3) yield i*i, map|<v2>, <v3>) -> <v4>                         
foo(for (i in 1..3) yield i*i)                    <v5>: *                       NEW: call(foo(for (i in 1..3) yield i*i), foo|<v4>) -> <v5>                          
1                                                 <v6>: Int                     NEW: r(1) -> <v6>                                                                    
3                                                 <v7>: Int                     NEW: r(3) -> <v7>                                                                    
1..3                                              <v8>: IntRange                NEW: call(1..3, rangeTo|<v6>, <v7>) -> <v8>                                          
for (i in 1..3) yield { foo(i) i*i }              <v10>: {<: List<Int>}         NEW: call(for (i in 1..3) yield { foo(i) i*i }, map|<v8>, <v9>) -> <v10>             
1                                                 <v11>: Int                    NEW: r(1) -> <v11>                                                                   
3                                                 <v12>: Int                    NEW: r(3) -> <v12>                                                                   
1..3                                              <v13>: IntRange               NEW: call(1..3, rangeTo|<v11>, <v12>) -> <v13>                                       
for (i in 1..3) yield for (j in 1..i) yield i*j   <v15>: {<: List<List<Int>>}   NEW: call(for (i in 1..3) yield for (j in 1..i) yield i*j, map|<v13>, <v14>) -> <v15>
=====================
== anonymous_0 ==
{ (i) -> i*i }
---------------------
      <v0>: Int   NEW: magic[FAKE_INITIALIZER](i) -> <v0> 
i     <v1>: Int   NEW: r(i) -> <v1>                       
i     <v2>: Int   NEW: r(i) -> <v2>                       
i*i   <v3>: Int   NEW: call(i*i, times|<v1>, <v2>) -> <v3>
i*i   <v3>: Int   COPY                                    
=====================
== anonymous_1 ==
{ (i) -> foo(i)
i*i }
---------------------
             <v0>: Int   NEW: magic[FAKE_INITIALIZER](i) -> <v0> 
i            <v1>: Int   NEW: r(i) -> <v1>                       
foo(i)       <v2>: *     NEW: call(foo(i), foo|<v1>) -> <v2>     
i            <v3>: Int   NEW: r(i) -> <v3>                       
i            <v4>: Int   NEW: r(i) -> <v4>                       
i*i          <v5>: Int   NEW: call(i*i, times|<v3>, <v4>) -> <v5>
foo(i) i*i   <v5>: Int   COPY                                    
=====================
== anonymous_2 ==
{ (i) -> for (j in 1..i) yield i*j }
---------------------
                            <v0>: Int              NEW: magic[FAKE_INITIALIZER](i) -> <v0>                     
1                           <v1>: Int              NEW: r(1) -> <v1>                                           
i                           <v2>: Int              NEW: r(i) -> <v2>                                           
1..i                        <v3>: IntRange         NEW: call(1..i, rangeTo|<v1>, <v2>) -> <v3>                 
for (j in 1..i) yield i*j   <v5>: {<: List<Int>}   NEW: call(for (j in 1..i) yield i*j, map|<v3>, <v4>) -> <v5>
for (j in 1..i) yield i*j   <v5>: {<: List<Int>}   COPY                                                        
=====================
== anonymous_3 ==
{ (j) -> i*j }
---------------------
      <v0>: Int   NEW: magic[FAKE_INITIALIZER](j) -> <v0> 
i     <v1>: Int   NEW: r(i) -> <v1>                       
j     <v2>: Int   NEW: r(j) -> <v2>                       
i*j   <v3>: Int   NEW: call(i*j, times|<v1>, <v2>) -> <v3>
i*j   <v3>: Int   COPY                                    
=====================
== foo ==
fun foo(n: Int) {

}
---------------------
    <v0>: Int   NEW: magic[FAKE_INITIALIZER](n: Int) -> <v0>
=====================
== foo ==
fun foo(list: List<Int>) {

}
---------------------
    <v0>: {<: List<Int>}   NEW: magic[FAKE_INITIALIZER](list: List<Int>) -> <v0>
=====================
