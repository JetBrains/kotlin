/multiple_interfaces.kt:(826,831): info: Generated Viper text for take1:
method f$take1$TF$T$c$InterfaceWithImplementation1(p$obj: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$obj), df$rt$T$c$InterfaceWithImplementation1())
  inhale acc(p$c$InterfaceWithImplementation1$shared(p$obj), wildcard)
  ret$0 := df$rt$unitValue()
  anon$1 := pg$public$field(p$obj)
  anon$0 := anon$1
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  label lbl$ret$0
}

method pg$public$field(this: Ref) returns (ret: Ref)


/multiple_interfaces.kt:(890,895): info: Generated Viper text for take2:
method f$take2$TF$T$c$InterfaceWithoutImplementation2(p$obj: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$obj), df$rt$T$c$InterfaceWithoutImplementation2())
  inhale acc(p$c$InterfaceWithoutImplementation2$shared(p$obj), wildcard)
  ret$0 := df$rt$unitValue()
  anon$1 := pg$public$field(p$obj)
  anon$0 := anon$1
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  label lbl$ret$0
}

method pg$public$field(this: Ref) returns (ret: Ref)


/multiple_interfaces.kt:(957,962): info: Generated Viper text for take3:
field bf$field: Ref

method f$take3$TF$T$c$AbstractWithFinalImplementation3(p$obj: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$obj), df$rt$T$c$AbstractWithFinalImplementation3())
  inhale acc(p$c$AbstractWithFinalImplementation3$shared(p$obj), wildcard)
  ret$0 := df$rt$unitValue()
  label lbl$ret$0
}

/multiple_interfaces.kt:(1025,1030): info: Generated Viper text for take4:
method f$take4$TF$T$c$AbstractWithOpenImplementation4(p$obj: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$obj), df$rt$T$c$AbstractWithOpenImplementation4())
  inhale acc(p$c$AbstractWithOpenImplementation4$shared(p$obj), wildcard)
  ret$0 := df$rt$unitValue()
  anon$1 := pg$public$field(p$obj)
  anon$0 := anon$1
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  label lbl$ret$0
}

method pg$public$field(this: Ref) returns (ret: Ref)


/multiple_interfaces.kt:(1728,1739): info: Generated Viper text for createImpls:
field bf$field: Ref

method con$c$Impl12$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$Impl12())
  ensures acc(p$c$Impl12$shared(ret), wildcard)
  ensures acc(p$c$Impl12$unique(ret), write)


method con$c$Impl14$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$Impl14())
  ensures acc(p$c$Impl14$shared(ret), wildcard)
  ensures acc(p$c$Impl14$unique(ret), write)


method con$c$Impl23$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$Impl23())
  ensures acc(p$c$Impl23$shared(ret), wildcard)
  ensures acc(p$c$Impl23$unique(ret), write)


method con$c$Impl24$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$Impl24())
  ensures acc(p$c$Impl24$shared(ret), wildcard)
  ensures acc(p$c$Impl24$unique(ret), write)


method con$c$Impl3$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$Impl3())
  ensures acc(p$c$Impl3$shared(ret), wildcard)
  ensures acc(p$c$Impl3$unique(ret), write)


method f$create6$TF$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$InheritingInterfaceWithoutImplementation6())
  ensures acc(p$c$InheritingInterfaceWithoutImplementation6$shared(ret), wildcard)


method f$createImpls$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == false ==> false
{
  var l0$impl12: Ref
  var l0$start12: Ref
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var l0$impl23: Ref
  var l0$start23: Ref
  var anon$3: Ref
  var anon$4: Ref
  var anon$5: Ref
  var l0$impl3: Ref
  var l0$start3: Ref
  var anon$6: Ref
  var anon$7: Ref
  var l0$impl24: Ref
  var l0$start24: Ref
  var anon$8: Ref
  var anon$9: Ref
  var anon$10: Ref
  var anon$11: Ref
  var l0$impl14: Ref
  var l0$start14: Ref
  var anon$12: Ref
  var anon$13: Ref
  var anon$14: Ref
  var l0$impl6: Ref
  var l0$start6: Ref
  var anon$15: Ref
  var anon$16: Ref
  var anon$17: Ref
  l0$impl12 := con$c$Impl12$()
  unfold acc(p$c$Impl12$shared(l0$impl12), wildcard)
  anon$0 := l0$impl12.bf$field
  l0$start12 := sp$minusInts(sp$plusInts(anon$0, df$rt$intToRef(1)), df$rt$intToRef(1))
  anon$1 := f$take1$TF$T$c$InterfaceWithImplementation1(l0$impl12)
  anon$2 := f$take2$TF$T$c$InterfaceWithoutImplementation2(l0$impl12)
  l0$impl23 := con$c$Impl23$()
  unfold acc(p$c$Impl23$shared(l0$impl23), wildcard)
  unfold acc(p$c$AbstractWithFinalImplementation3$shared(l0$impl23), wildcard)
  anon$3 := l0$impl23.bf$field
  l0$start23 := sp$minusInts(sp$plusInts(anon$3, df$rt$intToRef(1)), df$rt$intToRef(1))
  anon$4 := f$take2$TF$T$c$InterfaceWithoutImplementation2(l0$impl23)
  anon$5 := f$take3$TF$T$c$AbstractWithFinalImplementation3(l0$impl23)
  l0$impl3 := con$c$Impl3$()
  unfold acc(p$c$Impl3$shared(l0$impl3), wildcard)
  unfold acc(p$c$AbstractWithFinalImplementation3$shared(l0$impl3), wildcard)
  anon$6 := l0$impl3.bf$field
  l0$start3 := sp$minusInts(sp$plusInts(anon$6, df$rt$intToRef(1)), df$rt$intToRef(1))
  anon$7 := f$take3$TF$T$c$AbstractWithFinalImplementation3(l0$impl3)
  l0$impl24 := con$c$Impl24$()
  anon$9 := pg$public$field(l0$impl24)
  anon$8 := anon$9
  inhale df$rt$isSubtype(df$rt$typeOf(anon$8), df$rt$intType())
  l0$start24 := sp$minusInts(sp$plusInts(anon$8, df$rt$intToRef(1)), df$rt$intToRef(1))
  anon$10 := f$take2$TF$T$c$InterfaceWithoutImplementation2(l0$impl24)
  anon$11 := f$take4$TF$T$c$AbstractWithOpenImplementation4(l0$impl24)
  l0$impl14 := con$c$Impl14$()
  unfold acc(p$c$Impl14$shared(l0$impl14), wildcard)
  anon$12 := l0$impl14.bf$field
  l0$start14 := sp$minusInts(sp$plusInts(anon$12, df$rt$intToRef(1)), df$rt$intToRef(1))
  anon$13 := f$take1$TF$T$c$InterfaceWithImplementation1(l0$impl14)
  anon$14 := f$take4$TF$T$c$AbstractWithOpenImplementation4(l0$impl14)
  l0$impl6 := f$create6$TF$()
  anon$16 := pg$public$field(l0$impl6)
  anon$15 := anon$16
  inhale df$rt$isSubtype(df$rt$typeOf(anon$15), df$rt$intType())
  l0$start6 := sp$minusInts(sp$plusInts(anon$15, df$rt$intToRef(1)), df$rt$intToRef(1))
  if (true) {
    var anon$18: Ref
    unfold acc(p$c$Impl14$shared(l0$impl14), wildcard)
    anon$18 := l0$impl14.bf$field
    anon$17 := df$rt$boolToRef(df$rt$intFromRef(l0$start14) ==
      df$rt$intFromRef(anon$18))
  } else {
    anon$17 := df$rt$boolToRef(false)}
  if (df$rt$boolFromRef(anon$17)) {
    ret$0 := df$rt$boolToRef(true)
  } else {
    ret$0 := df$rt$boolToRef(false)}
  goto lbl$ret$0
  label lbl$ret$0
}

method f$take1$TF$T$c$InterfaceWithImplementation1(p$obj: Ref)
  returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$take2$TF$T$c$InterfaceWithoutImplementation2(p$obj: Ref)
  returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$take3$TF$T$c$AbstractWithFinalImplementation3(p$obj: Ref)
  returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$take4$TF$T$c$AbstractWithOpenImplementation4(p$obj: Ref)
  returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method pg$public$field(this: Ref) returns (ret: Ref)
