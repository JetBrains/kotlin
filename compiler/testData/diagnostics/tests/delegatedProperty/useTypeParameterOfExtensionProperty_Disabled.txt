package

public val </*0*/ T : kotlin.Any> kotlin.collections.List<T>.bar: T
public var </*0*/ T : kotlin.Any> kotlin.collections.List<T>.foo: T
public fun main(/*0*/ listInt: kotlin.collections.List<kotlin.Int>, /*1*/ listStr: kotlin.collections.List<kotlin.String>): kotlin.Unit
public fun useString(/*0*/ s: kotlin.String): kotlin.Unit
public operator fun </*0*/ T> Wrapper<T>.getValue(/*0*/ thisRef: kotlin.Any?, /*1*/ kp: kotlin.Any?): T

public final class Delegate</*0*/ T : kotlin.Any> {
    public constructor Delegate</*0*/ T : kotlin.Any>()
    private final var v: T?
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun getValue(/*0*/ thisRef: kotlin.Any?, /*1*/ kp: kotlin.Any?): T
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun setValue(/*0*/ thisRef: kotlin.Any?, /*1*/ kp: kotlin.Any?, /*2*/ newValue: T): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Wrapper</*0*/ T> {
    public constructor Wrapper</*0*/ T>(/*0*/ v: T? = ...)
    public final val v: T?
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

