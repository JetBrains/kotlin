package modifiers;

/**
 * internal final class modifiers/InternalClass : kotlin/Any {
 *
 *   // signature: <init>()V
 *   public constructor()
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public final class InternalClass {

    public InternalClass() {
        super();
    }
}


////////////////////

package modifiers;

/**
 * internal abstract interface modifiers/InternalInterface : kotlin/Any {
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public abstract interface InternalInterface {
}


////////////////////

package modifiers;

/**
 * public final class modifiers/Modifiers : kotlin/Any {
 *
 *   // signature: <init>()V
 *   public constructor()
 *
 *   // signature: overloads(Ljava/lang/String;I)Ljava/lang/String;
 *   public final fun overloads(a: kotlin/String (* = ... *), n: kotlin/Int (* = ... *)): kotlin/String
 *
 *   // signature: strictFp()V
 *   public final fun strictFp(): kotlin/Unit
 *
 *   // field: transientField:Ljava/lang/String;
 *   // getter: getTransientField()Ljava/lang/String;
 *   public final val transientField: kotlin/String (* = ... *)
 *     public final get
 *
 *   // field: volatileField:Ljava/lang/String;
 *   // getter: getVolatileField()Ljava/lang/String;
 *   // setter: setVolatileField(Ljava/lang/String;)V
 *   public final var volatileField: kotlin/String
 *     public final get
 *     public final set
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public final class Modifiers {
    @kotlin.jvm.Transient()
    @org.jetbrains.annotations.NotNull()
    private final transient java.lang.String transientField = "";

    @kotlin.jvm.Volatile()
    @org.jetbrains.annotations.NotNull()
    private volatile java.lang.String volatileField = "";

    public Modifiers() {
        super();
    }

    @org.jetbrains.annotations.NotNull()
    public final java.lang.String getTransientField() {
        return null;
    }

    @org.jetbrains.annotations.NotNull()
    public final java.lang.String getVolatileField() {
        return null;
    }

    public final void setVolatileField(@org.jetbrains.annotations.NotNull() java.lang.String p0) {
    }

    @kotlin.jvm.Strictfp()
    public final strictfp void strictFp() {
    }

    @kotlin.jvm.JvmOverloads()
    @org.jetbrains.annotations.NotNull()
    public final java.lang.String overloads() {
        return null;
    }

    @kotlin.jvm.JvmOverloads()
    @org.jetbrains.annotations.NotNull()
    public final java.lang.String overloads(@org.jetbrains.annotations.NotNull() java.lang.String a) {
        return null;
    }

    @kotlin.jvm.JvmOverloads()
    @org.jetbrains.annotations.NotNull()
    public final java.lang.String overloads(@org.jetbrains.annotations.NotNull() java.lang.String a, int n) {
        return null;
    }
}


////////////////////

package modifiers;

/**
 * private final class modifiers/PrivateClass : kotlin/Any {
 *
 *   // signature: <init>()V
 *   public constructor()
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
final class PrivateClass {

    public PrivateClass() {
        super();
    }
}


////////////////////

package modifiers;

/**
 * private abstract interface modifiers/PrivateInterface : kotlin/Any {
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
abstract interface PrivateInterface {
}


////////////////////

package modifiers;

/**
 * public final class modifiers/PublicClass : kotlin/Any {
 *
 *   // signature: <init>()V
 *   public constructor()
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public final class PublicClass {

    public PublicClass() {
        super();
    }
}


////////////////////

package modifiers;

/**
 * public abstract class modifiers/PublicClassPrivateConstructor : kotlin/Any {
 *
 *   // signature: <init>()V
 *   private constructor()
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public abstract class PublicClassPrivateConstructor {

    private PublicClassPrivateConstructor() {
        super();
    }
}


////////////////////

package modifiers;

/**
 * public open class modifiers/PublicClassProtectedConstructor : kotlin/Any {
 *
 *   // signature: <init>()V
 *   protected constructor()
 *
 *   // nested class: ProtectedInterface
 *
 *   // nested class: PrivateInterface
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public class PublicClassProtectedConstructor {

    protected PublicClassProtectedConstructor() {
        super();
    }

    /**
     * protected abstract interface modifiers/PublicClassProtectedConstructor.ProtectedInterface : kotlin/Any {
     *
     *   // module name: main
     * }
     */
    @kotlin.Metadata()
    protected static abstract interface ProtectedInterface {
    }
    /**
     * private abstract interface modifiers/PublicClassProtectedConstructor.PrivateInterface : kotlin/Any {
     *
     *   // module name: main
     * }
     */
    @kotlin.Metadata()
    private static abstract interface PrivateInterface {
    }
}


////////////////////

package modifiers;

/**
 * public abstract interface modifiers/PublicInterface : kotlin/Any {
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public abstract interface PublicInterface {
}


////////////////////

package modifiers;

/**
 * public sealed class modifiers/SealedClass : kotlin/Any {
 *
 *   // signature: <init>()V
 *   protected constructor()
 *
 *   // nested class: One
 *
 *   // nested class: Two
 *
 *   // nested class: Three
 *
 *   // nested class: Four
 *
 *   // sealed subclass: modifiers/SealedClass.One
 *
 *   // sealed subclass: modifiers/SealedClass.Two
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public abstract class SealedClass {

    protected SealedClass() {
        super();
    }

    /**
     * public final class modifiers/SealedClass.One : modifiers/SealedClass {
     *
     *   // signature: <init>()V
     *   public constructor()
     *
     *   // module name: main
     * }
     */
    @kotlin.Metadata()
    public static final class One extends modifiers.SealedClass {

        public One() {
            super();
        }
    }
    /**
     * public open class modifiers/SealedClass.Two : modifiers/SealedClass {
     *
     *   // signature: <init>()V
     *   public constructor()
     *
     *   // module name: main
     * }
     */
    @kotlin.Metadata()
    public static class Two extends modifiers.SealedClass {

        public Two() {
            super();
        }
    }
    /**
     * public abstract class modifiers/SealedClass.Three : modifiers/SealedClass.Two {
     *
     *   // signature: <init>()V
     *   public constructor()
     *
     *   // module name: main
     * }
     */
    @kotlin.Metadata()
    public static abstract class Three extends modifiers.SealedClass.Two {

        public Three() {
            super();
        }
    }
    /**
     * public final class modifiers/SealedClass.Four : modifiers/SealedClass.Three {
     *
     *   // signature: <init>()V
     *   public constructor()
     *
     *   // module name: main
     * }
     */
    @kotlin.Metadata()
    public static final class Four extends modifiers.SealedClass.Three {

        public Four() {
            super();
        }
    }
}
