//
// Source
// ------------------------------------------

import androidx.compose.runtime.*


interface Test {
    @Composable fun Int.foo(param: Int = remember { 0 })
    @Composable fun Int.bar(param: Int = remember { 0 }): Int = param
}

class TestImpl : Test {
    @Composable override fun Int.foo(param: Int) {}
    @Composable override fun Int.bar(param: Int): Int = 0
}

@Composable fun CallWithDefaults(test: Test) {
    with(test) {
        42.foo()
        42.foo(0)
        42.bar()
        42.bar(0)
    }
}

//
// Transformed IR
// ------------------------------------------

interface Test {
  @Composable
  abstract fun Int.foo(param: Int, %composer: Composer?, %changed: Int)
  @Composable
  open fun Int.bar(param: Int, %composer: Composer?, %changed: Int): Int {
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "C(bar):Test.kt")
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    val tmp0 = param
    if (isTraceInProgress()) {
      traceEventEnd()
    }
    %composer.endReplaceGroup()
    return tmp0
  }
  class ComposeDefaultImpls {
    @Composable
    @ComposableInferredTarget(scheme = "[0[0]]")
    fun foo%default(param: Int, %this%: Test, %this%: Int, %composer: Composer?, %changed: Int, %default: Int) {
      %composer = %composer.startRestartGroup(<>)
      sourceInformation(%composer, "C(foo%default)<rememb...>:Test.kt")
      val %dirty = %changed
      if (%default and 0b0001 != 0) {
        %dirty = %dirty or 0b0110
      } else if (%changed and 0b0110 == 0) {
        %dirty = %dirty or if (%composer.changed(param)) 0b0100 else 0b0010
      }
      if (%default and 0b0010 != 0) {
        %dirty = %dirty or 0b00110000
      } else if (%changed and 0b00110000 == 0) {
        %dirty = %dirty or if (if (%changed and 0b01000000 == 0) {
          %composer.changed(%this%)
        } else {
          %composer.changedInstance(%this%)
        }
        ) 0b00100000 else 0b00010000
      }
      if (%default and 0b0100 != 0) {
        %dirty = %dirty or 0b000110000000
      } else if (%changed and 0b000110000000 == 0) {
        %dirty = %dirty or if (%composer.changed(%this%)) 0b000100000000 else 0b10000000
      }
      if (%dirty and 0b10010011 != 0b10010010 || !%composer.skipping) {
        if (%default and 0b0001 != 0) {
          param = <block>{
            sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
            val tmp0_group = %composer.cache(false) {
              0
            }
            sourceInformationMarkerEnd(%composer)
            tmp0_group
          }
        }
        if (isTraceInProgress()) {
          traceEventStart(<>, %dirty, -1, <>)
        }
        %this%.foo(param, %composer, 0b1110 and %dirty shr 0b0110 or 0b01110000 and %dirty shl 0b0011 or 0b001110000000 and %dirty shl 0b0011)
        if (isTraceInProgress()) {
          traceEventEnd()
        }
      } else {
        %composer.skipToGroupEnd()
      }
      %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
        foo%default(param, %this%, %this%, %composer, updateChangedFlags(%changed or 0b0001), %default)
      }
    }
    @Composable
    @ComposableInferredTarget(scheme = "[0[0]]")
    fun bar%default(param: Int, %this%: Test, %this%: Int, %composer: Composer?, %changed: Int, %default: Int): Int {
      sourceInformationMarkerStart(%composer, <>, "C(bar%default)<rememb...>:Test.kt")
      if (%default and 0b0001 != 0) {
        param = <block>{
          sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
          val tmp0_group = %composer.cache(false) {
            0
          }
          sourceInformationMarkerEnd(%composer)
          tmp0_group
        }
      }
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      %this%.bar(param, %composer, 0b1110 and %changed shr 0b0110 or 0b01110000 and %changed shl 0b0011 or 0b001110000000 and %changed shl 0b0011)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
      sourceInformationMarkerEnd(%composer)
    }
  }
}
@StabilityInferred(parameters = 1)
class TestImpl : Test {
  @Composable
  override fun Int.foo(param: Int, %composer: Composer?, %changed: Int) {
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "C(foo):Test.kt")
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
    %composer.endReplaceGroup()
  }
  @Composable
  override fun Int.bar(param: Int, %composer: Composer?, %changed: Int): Int {
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "C(bar):Test.kt")
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    val tmp0 = 0
    if (isTraceInProgress()) {
      traceEventEnd()
    }
    %composer.endReplaceGroup()
    return tmp0
  }
  static val %stable: Int = 0
}
@Composable
@ComposableInferredTarget(scheme = "[0[0]]")
fun CallWithDefaults(test: Test, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(CallWithDefaults)*<foo()>,<foo(0)>,<bar()>,<bar(0)>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (if (%changed and 0b1000 == 0) {
      %composer.changed(test)
    } else {
      %composer.changedInstance(test)
    }
    ) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    val tmp0_group = with(test) {
      foo%default(0, %this%with, 42, %composer, 0b000110000000, 0b0001)
      foo%default(0, %this%with, 42, %composer, 0b000110000110, 0)
      bar%default(0, %this%with, 42, %composer, 0b000110000000, 0b0001)
      val tmp0_return = bar%default(0, %this%with, 42, %composer, 0b000110000110, 0)
      tmp0_return
    }
    tmp0_group
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    CallWithDefaults(test, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
