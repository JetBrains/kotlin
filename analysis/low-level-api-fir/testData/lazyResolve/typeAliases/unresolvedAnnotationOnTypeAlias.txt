RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] unresolvedAnnotationOnTypeAlias.kt
    public? final? [ResolvedTo(RAW_FIR)] val myAlias: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public? final? [ResolvedTo(RAW_FIR)] val myAlias: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val myAlias: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] get(): <implicit>

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public? final? [ResolvedTo(COMPANION_GENERATION)] val myAlias: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(COMPANION_GENERATION)] get(): <implicit>

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public? final? [ResolvedTo(SUPER_TYPES)] val myAlias: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(SUPER_TYPES)] get(): <implicit>

TYPES:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public? final? [ResolvedTo(TYPES)] val myAlias: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(TYPES)] get(): <implicit>

STATUS:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public final [ResolvedTo(STATUS)] val myAlias: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(STATUS)] get(): <implicit>

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val myAlias: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] get(): <implicit>

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public final [ResolvedTo(CONTRACTS)] val myAlias: <implicit> = @Anno[Unresolved](Foo#) Foo#
        public [ResolvedTo(CONTRACTS)] get(): <implicit>

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val myAlias: <ERROR TYPE REF: Unresolved name: Foo> = @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <Unresolved name: Foo>#
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: Foo>

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public final [ResolvedTo(CONSTANT_EVALUATION)] val myAlias: <ERROR TYPE REF: Unresolved name: Foo> = @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <Unresolved name: Foo>#
        public [ResolvedTo(CONSTANT_EVALUATION)] get(): <ERROR TYPE REF: Unresolved name: Foo>

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] val myAlias: <ERROR TYPE REF: Unresolved name: Foo> = @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <Unresolved name: Foo>#
        public [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): <ERROR TYPE REF: Unresolved name: Foo>

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] unresolvedAnnotationOnTypeAlias.kt
    public final [ResolvedTo(BODY_RESOLVE)] val myAlias: <ERROR TYPE REF: Unresolved name: Foo> = @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <Unresolved name: Foo>#
        public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: Foo>

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] unresolvedAnnotationOnTypeAlias.kt
    public final [ResolvedTo(BODY_RESOLVE)] val myAlias: <ERROR TYPE REF: Unresolved name: Foo> = @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <Unresolved name: Foo>#
        public [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Unresolved name: Foo>
