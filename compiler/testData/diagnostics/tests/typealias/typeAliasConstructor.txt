package

public typealias TC = C
public typealias TI = Interface
public typealias TO = AnObject
public val test1: C
public val test2: TC [= C]
public val test3: C
public val test4: TC [= C]
public val test5: [ERROR : Type for TC("", "")]
public val test6: [ERROR : Type for TI()]
public val test6a: [ERROR : Type for Interface()]
public val test7: [ERROR : Type for TO()]
public val test7a: [ERROR : Type for AnObject()]

public object AnObject {
    private constructor AnObject()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class C {
    public constructor C()
    public constructor C(/*0*/ x: kotlin.String)
    public final val x: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface Interface {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
