/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("js/js.translator/testData/reservedWords/cases")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class ReservedWordTestGenerated extends AbstractReservedWordTest {
    public void testAllFilesPresentInCases() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("js/js.translator/testData/reservedWords/cases"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("dataClassValTypeof.kt")
    public void testDataClassValTypeof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassValTypeof.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassValVar.kt")
    public void testDataClassValVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassValVar.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassValWith.kt")
    public void testDataClassValWith() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassValWith.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassValYield.kt")
    public void testDataClassValYield() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassValYield.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassVarBreak.kt")
    public void testDataClassVarBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassVarBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassVarInfinity.kt")
    public void testDataClassVarInfinity() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassVarInfinity.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassVarKotlin.kt")
    public void testDataClassVarKotlin() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassVarKotlin.kt");
        doTest(fileName);
    }

    @TestMetadata("dataClassVarWhile.kt")
    public void testDataClassVarWhile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/dataClassVarWhile.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunDebugger.kt")
    public void testDelegatedFunDebugger() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunDebugger.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunDefault.kt")
    public void testDelegatedFunDefault() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunDefault.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunIf.kt")
    public void testDelegatedFunIf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunIf.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunIn.kt")
    public void testDelegatedFunIn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunIn.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunParamDelete.kt")
    public void testDelegatedFunParamDelete() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunParamDelete.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunParamEnum.kt")
    public void testDelegatedFunParamEnum() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunParamEnum.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunParamInterface.kt")
    public void testDelegatedFunParamInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunParamInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedFunParamNull.kt")
    public void testDelegatedFunParamNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedFunParamNull.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedLabelEval.kt")
    public void testDelegatedLabelEval() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedLabelEval.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedLabelExport.kt")
    public void testDelegatedLabelExport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedLabelExport.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedLabelPackage.kt")
    public void testDelegatedLabelPackage() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedLabelPackage.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedLabelReturn.kt")
    public void testDelegatedLabelReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedLabelReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedValAwait.kt")
    public void testDelegatedValAwait() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedValAwait.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedValCase.kt")
    public void testDelegatedValCase() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedValCase.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedValDo.kt")
    public void testDelegatedValDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedValDo.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedValElse.kt")
    public void testDelegatedValElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedValElse.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedVarCatch.kt")
    public void testDelegatedVarCatch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedVarCatch.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedVarConst.kt")
    public void testDelegatedVarConst() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedVarConst.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedVarFalse.kt")
    public void testDelegatedVarFalse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedVarFalse.kt");
        doTest(fileName);
    }

    @TestMetadata("delegatedVarFor.kt")
    public void testDelegatedVarFor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/delegatedVarFor.kt");
        doTest(fileName);
    }

    @TestMetadata("enumEntryContinue.kt")
    public void testEnumEntryContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumEntryContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("enumEntryDo.kt")
    public void testEnumEntryDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumEntryDo.kt");
        doTest(fileName);
    }

    @TestMetadata("enumEntryPublic.kt")
    public void testEnumEntryPublic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumEntryPublic.kt");
        doTest(fileName);
    }

    @TestMetadata("enumEntryStatic.kt")
    public void testEnumEntryStatic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumEntryStatic.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunImport.kt")
    public void testEnumFunImport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunImport.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunInstanceof.kt")
    public void testEnumFunInstanceof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunInstanceof.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunParamLet.kt")
    public void testEnumFunParamLet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunParamLet.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunParamNew.kt")
    public void testEnumFunParamNew() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunParamNew.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunParamVar.kt")
    public void testEnumFunParamVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunParamVar.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunParamWhile.kt")
    public void testEnumFunParamWhile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunParamWhile.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunTry.kt")
    public void testEnumFunTry() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunTry.kt");
        doTest(fileName);
    }

    @TestMetadata("enumFunTypeof.kt")
    public void testEnumFunTypeof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumFunTypeof.kt");
        doTest(fileName);
    }

    @TestMetadata("enumLabelBreak.kt")
    public void testEnumLabelBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumLabelBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("enumLabelClass.kt")
    public void testEnumLabelClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumLabelClass.kt");
        doTest(fileName);
    }

    @TestMetadata("enumLabelPrivate.kt")
    public void testEnumLabelPrivate() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumLabelPrivate.kt");
        doTest(fileName);
    }

    @TestMetadata("enumLabelProtected.kt")
    public void testEnumLabelProtected() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumLabelProtected.kt");
        doTest(fileName);
    }

    @TestMetadata("enumValExtends.kt")
    public void testEnumValExtends() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumValExtends.kt");
        doTest(fileName);
    }

    @TestMetadata("enumValFinally.kt")
    public void testEnumValFinally() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumValFinally.kt");
        doTest(fileName);
    }

    @TestMetadata("enumValSuper.kt")
    public void testEnumValSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumValSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("enumValThis.kt")
    public void testEnumValThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumValThis.kt");
        doTest(fileName);
    }

    @TestMetadata("enumVarFunction.kt")
    public void testEnumVarFunction() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumVarFunction.kt");
        doTest(fileName);
    }

    @TestMetadata("enumVarImplements.kt")
    public void testEnumVarImplements() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumVarImplements.kt");
        doTest(fileName);
    }

    @TestMetadata("enumVarThrow.kt")
    public void testEnumVarThrow() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumVarThrow.kt");
        doTest(fileName);
    }

    @TestMetadata("enumVarTrue.kt")
    public void testEnumVarTrue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/enumVarTrue.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunArguments.kt")
    public void testInsideClassFunArguments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunArguments.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunAwait.kt")
    public void testInsideClassFunAwait() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunAwait.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunParamCase.kt")
    public void testInsideClassFunParamCase() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunParamCase.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunParamCatch.kt")
    public void testInsideClassFunParamCatch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunParamCatch.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunParamThrow.kt")
    public void testInsideClassFunParamThrow() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunParamThrow.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunParamTrue.kt")
    public void testInsideClassFunParamTrue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunParamTrue.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunSuper.kt")
    public void testInsideClassFunSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassFunThis.kt")
    public void testInsideClassFunThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassFunThis.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassLabelConst.kt")
    public void testInsideClassLabelConst() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassLabelConst.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassLabelDebugger.kt")
    public void testInsideClassLabelDebugger() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassLabelDebugger.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassLabelTry.kt")
    public void testInsideClassLabelTry() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassLabelTry.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassLabelTypeof.kt")
    public void testInsideClassLabelTypeof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassLabelTypeof.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunContinue.kt")
    public void testInsideClassObjectFunContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunDo.kt")
    public void testInsideClassObjectFunDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunDo.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunExport.kt")
    public void testInsideClassObjectFunExport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunExport.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunExtends.kt")
    public void testInsideClassObjectFunExtends() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunExtends.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunParamElse.kt")
    public void testInsideClassObjectFunParamElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunParamElse.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunParamFalse.kt")
    public void testInsideClassObjectFunParamFalse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunParamFalse.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunParamFinally.kt")
    public void testInsideClassObjectFunParamFinally() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunParamFinally.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectFunParamFunction.kt")
    public void testInsideClassObjectFunParamFunction() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectFunParamFunction.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectLabelFor.kt")
    public void testInsideClassObjectLabelFor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectLabelFor.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectLabelIf.kt")
    public void testInsideClassObjectLabelIf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectLabelIf.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectLabelImplements.kt")
    public void testInsideClassObjectLabelImplements() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectLabelImplements.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectLabelImport.kt")
    public void testInsideClassObjectLabelImport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectLabelImport.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectValDefault.kt")
    public void testInsideClassObjectValDefault() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectValDefault.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectValDelete.kt")
    public void testInsideClassObjectValDelete() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectValDelete.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectValVar.kt")
    public void testInsideClassObjectValVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectValVar.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectValWhile.kt")
    public void testInsideClassObjectValWhile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectValWhile.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectVarBreak.kt")
    public void testInsideClassObjectVarBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectVarBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectVarClass.kt")
    public void testInsideClassObjectVarClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectVarClass.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectVarEnum.kt")
    public void testInsideClassObjectVarEnum() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectVarEnum.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassObjectVarEval.kt")
    public void testInsideClassObjectVarEval() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassObjectVarEval.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassValInfinity.kt")
    public void testInsideClassValInfinity() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassValInfinity.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassValInterface.kt")
    public void testInsideClassValInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassValInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassValNull.kt")
    public void testInsideClassValNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassValNull.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassValYield.kt")
    public void testInsideClassValYield() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassValYield.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassVarKotlin.kt")
    public void testInsideClassVarKotlin() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassVarKotlin.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassVarNaN.kt")
    public void testInsideClassVarNaN() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassVarNaN.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassVarPackage.kt")
    public void testInsideClassVarPackage() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassVarPackage.kt");
        doTest(fileName);
    }

    @TestMetadata("insideClassVarReturn.kt")
    public void testInsideClassVarReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideClassVarReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunParamStatic.kt")
    public void testInsideObjectFunParamStatic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunParamStatic.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunParamSwitch.kt")
    public void testInsideObjectFunParamSwitch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunParamSwitch.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunParamThis.kt")
    public void testInsideObjectFunParamThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunParamThis.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunParamThrow.kt")
    public void testInsideObjectFunParamThrow() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunParamThrow.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunProtected.kt")
    public void testInsideObjectFunProtected() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunProtected.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunPublic.kt")
    public void testInsideObjectFunPublic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunPublic.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunReturn.kt")
    public void testInsideObjectFunReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectFunSuper.kt")
    public void testInsideObjectFunSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectFunSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectLabelTrue.kt")
    public void testInsideObjectLabelTrue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectLabelTrue.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectLabelTry.kt")
    public void testInsideObjectLabelTry() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectLabelTry.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectLabelUndefined.kt")
    public void testInsideObjectLabelUndefined() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectLabelUndefined.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectLabelVoid.kt")
    public void testInsideObjectLabelVoid() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectLabelVoid.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectValIn.kt")
    public void testInsideObjectValIn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectValIn.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectValInstanceof.kt")
    public void testInsideObjectValInstanceof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectValInstanceof.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectValInterface.kt")
    public void testInsideObjectValInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectValInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectValLet.kt")
    public void testInsideObjectValLet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectValLet.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectVarNew.kt")
    public void testInsideObjectVarNew() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectVarNew.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectVarNull.kt")
    public void testInsideObjectVarNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectVarNull.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectVarPackage.kt")
    public void testInsideObjectVarPackage() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectVarPackage.kt");
        doTest(fileName);
    }

    @TestMetadata("insideObjectVarPrivate.kt")
    public void testInsideObjectVarPrivate() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/insideObjectVarPrivate.kt");
        doTest(fileName);
    }

    @TestMetadata("localCatchIf.kt")
    public void testLocalCatchIf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localCatchIf.kt");
        doTest(fileName);
    }

    @TestMetadata("localCatchIn.kt")
    public void testLocalCatchIn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localCatchIn.kt");
        doTest(fileName);
    }

    @TestMetadata("localCatchVoid.kt")
    public void testLocalCatchVoid() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localCatchVoid.kt");
        doTest(fileName);
    }

    @TestMetadata("localCatchWith.kt")
    public void testLocalCatchWith() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localCatchWith.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunClass.kt")
    public void testLocalFunClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunClass.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunContinue.kt")
    public void testLocalFunContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunParamDo.kt")
    public void testLocalFunParamDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunParamDo.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunParamElse.kt")
    public void testLocalFunParamElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunParamElse.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunParamPublic.kt")
    public void testLocalFunParamPublic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunParamPublic.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunParamStatic.kt")
    public void testLocalFunParamStatic() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunParamStatic.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunPrivate.kt")
    public void testLocalFunPrivate() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunPrivate.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunProtected.kt")
    public void testLocalFunProtected() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localFunProtected.kt");
        doTest(fileName);
    }

    @TestMetadata("localLabelFalse.kt")
    public void testLocalLabelFalse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localLabelFalse.kt");
        doTest(fileName);
    }

    @TestMetadata("localLabelFor.kt")
    public void testLocalLabelFor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localLabelFor.kt");
        doTest(fileName);
    }

    @TestMetadata("localLabelSwitch.kt")
    public void testLocalLabelSwitch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localLabelSwitch.kt");
        doTest(fileName);
    }

    @TestMetadata("localLabelUndefined.kt")
    public void testLocalLabelUndefined() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localLabelUndefined.kt");
        doTest(fileName);
    }

    @TestMetadata("localValImport.kt")
    public void testLocalValImport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localValImport.kt");
        doTest(fileName);
    }

    @TestMetadata("localValInstanceof.kt")
    public void testLocalValInstanceof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localValInstanceof.kt");
        doTest(fileName);
    }

    @TestMetadata("localValTypeof.kt")
    public void testLocalValTypeof() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localValTypeof.kt");
        doTest(fileName);
    }

    @TestMetadata("localValVar.kt")
    public void testLocalValVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localValVar.kt");
        doTest(fileName);
    }

    @TestMetadata("localVarBreak.kt")
    public void testLocalVarBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localVarBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("localVarLet.kt")
    public void testLocalVarLet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localVarLet.kt");
        doTest(fileName);
    }

    @TestMetadata("localVarNew.kt")
    public void testLocalVarNew() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localVarNew.kt");
        doTest(fileName);
    }

    @TestMetadata("localVarWhile.kt")
    public void testLocalVarWhile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/localVarWhile.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelClassDelete.kt")
    public void testToplevelClassDelete() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelClassDelete.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelClassEnum.kt")
    public void testToplevelClassEnum() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelClassEnum.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelClassNull.kt")
    public void testToplevelClassNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelClassNull.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelClassPackage.kt")
    public void testToplevelClassPackage() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelClassPackage.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelEnumExtends.kt")
    public void testToplevelEnumExtends() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelEnumExtends.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelEnumFinally.kt")
    public void testToplevelEnumFinally() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelEnumFinally.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelEnumThis.kt")
    public void testToplevelEnumThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelEnumThis.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelEnumThrow.kt")
    public void testToplevelEnumThrow() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelEnumThrow.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunAwait.kt")
    public void testToplevelFunAwait() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunAwait.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunCase.kt")
    public void testToplevelFunCase() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunCase.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunElse.kt")
    public void testToplevelFunElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunElse.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunFalse.kt")
    public void testToplevelFunFalse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunFalse.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunParamCatch.kt")
    public void testToplevelFunParamCatch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunParamCatch.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunParamConst.kt")
    public void testToplevelFunParamConst() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunParamConst.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunParamFor.kt")
    public void testToplevelFunParamFor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunParamFor.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelFunParamIf.kt")
    public void testToplevelFunParamIf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelFunParamIf.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelInterfaceEval.kt")
    public void testToplevelInterfaceEval() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelInterfaceEval.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelInterfaceExport.kt")
    public void testToplevelInterfaceExport() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelInterfaceExport.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelInterfaceReturn.kt")
    public void testToplevelInterfaceReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelInterfaceReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelInterfaceSuper.kt")
    public void testToplevelInterfaceSuper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelInterfaceSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelLabelDebugger.kt")
    public void testToplevelLabelDebugger() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelLabelDebugger.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelLabelDefault.kt")
    public void testToplevelLabelDefault() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelLabelDefault.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelLabelIn.kt")
    public void testToplevelLabelIn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelLabelIn.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelLabelInterface.kt")
    public void testToplevelLabelInterface() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelLabelInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelObjectFunction.kt")
    public void testToplevelObjectFunction() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelObjectFunction.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelObjectImplements.kt")
    public void testToplevelObjectImplements() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelObjectImplements.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelObjectTrue.kt")
    public void testToplevelObjectTrue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelObjectTrue.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelObjectTry.kt")
    public void testToplevelObjectTry() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelObjectTry.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelValBreak.kt")
    public void testToplevelValBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelValBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelValClass.kt")
    public void testToplevelValClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelValClass.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelValInfinity.kt")
    public void testToplevelValInfinity() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelValInfinity.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelValKotlin.kt")
    public void testToplevelValKotlin() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelValKotlin.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelVarArguments.kt")
    public void testToplevelVarArguments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelVarArguments.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelVarContinue.kt")
    public void testToplevelVarContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelVarContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelVarDo.kt")
    public void testToplevelVarDo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelVarDo.kt");
        doTest(fileName);
    }

    @TestMetadata("toplevelVarNaN.kt")
    public void testToplevelVarNaN() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("js/js.translator/testData/reservedWords/cases/toplevelVarNaN.kt");
        doTest(fileName);
    }
}
