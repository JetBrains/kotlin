// FILE: /digitCount.kt
// FUN: digitCountInNumber
BB 0
CONTENT
      1 FUN public fun digitCountInNumber(n: kotlin.Int, m: kotlin.Int): kotlin.Int
      2 CONST Int type=kotlin.Int value='0'
      3 VAR var count: kotlin.Int
      4 GET_VAR 'value-parameter n: Int' type=kotlin.Int origin=null
      5 VAR var number: kotlin.Int
      6 DO_WHILE label=null origin=DO_WHILE_LOOP
OUTGOING -> BB 1
    Do..while entry: DO_WHILE label=null origin=DO_WHILE_LOOP
BB 1
INCOMING <- BB 0, 4
    Do..while entry: DO_WHILE label=null origin=DO_WHILE_LOOP
CONTENT
      1 WHEN type=kotlin.Unit origin=null
      2 GET_VAR 'value-parameter m: Int' type=kotlin.Int origin=null
      3 GET_VAR 'number: Int' type=kotlin.Int origin=null
      4 CONST Int type=kotlin.Int value='10'
      5 CALL 'rem(Int): Int' type=kotlin.Int origin=PERC
OUTGOING -> BB 2
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
BB 2
INCOMING <- BB 1
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 GET_VAR 'count: Int' type=kotlin.Int origin=POSTFIX_INCR
      2 VAR IR_TEMPORARY_VARIABLE val tmp0: kotlin.Int
      3 SET_VAR 'count: Int' type=kotlin.Unit origin=POSTFIX_INCR
      4 GET_VAR 'tmp0: Int' type=kotlin.Int origin=null
      5 TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
OUTGOING -> BB 3
    When exit: WHEN type=kotlin.Unit origin=null
BB 3
INCOMING <- BB 2
    When exit: WHEN type=kotlin.Unit origin=null
CONTENT
      1 SET_VAR 'number: Int' type=kotlin.Unit origin=DIVEQ
      2 GET_VAR 'number: Int' type=kotlin.Int origin=null
      3 CONST Int type=kotlin.Int value='0'
      4 CALL 'compareTo(Int): Int' type=kotlin.Int origin=GT
OUTGOING -> BB 4, 5
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
BB 4
INCOMING <- BB 3
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
CONTENT
OUTGOING -> BB 1
    Do..while entry: DO_WHILE label=null origin=DO_WHILE_LOOP
BB 5
INCOMING <- BB 3
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
CONTENT
OUTGOING -> BB 6
    Do..while exit: DO_WHILE label=null origin=DO_WHILE_LOOP
BB 6
INCOMING <- BB 5
    Do..while exit: DO_WHILE label=null origin=DO_WHILE_LOOP
CONTENT
      1 GET_VAR 'count: Int' type=kotlin.Int origin=null
      2 RETURN type=kotlin.Nothing from='digitCountInNumber(Int, Int): Int'
OUTGOING -> NONE
    Function exit: FUN public fun digitCountInNumber(n: kotlin.Int, m: kotlin.Int): kotlin.Int

// END FUN: digitCountInNumber

// END FILE: /digitCount.kt

