package

public fun </*0*/ T, /*1*/ S> createSample(/*0*/ i: T, /*1*/ a: (T) -> S): Sample<T, S>
public fun </*0*/ T> myLazyDelegate(/*0*/ i: () -> T): LazyDelegate<T>
public fun takeSample(/*0*/ g: Sample<kotlin.Int, kotlin.String>): kotlin.Unit
public fun test(/*0*/ i: kotlin.Int): kotlin.Unit

public final class LazyDelegate</*0*/ T> {
    public constructor LazyDelegate</*0*/ T>(/*0*/ v: T)
    public final val v: T
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun getValue(/*0*/ thisRef: kotlin.Any?, /*1*/ property: kotlin.reflect.KProperty<*>): T
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Sample</*0*/ K, /*1*/ V> {
    public constructor Sample</*0*/ K, /*1*/ V>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
