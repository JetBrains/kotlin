package

public val a: Foo
public val prop: kotlin.String = "OK"
public inline fun default1(/*0*/ s: () -> kotlin.String = ...): kotlin.Unit
public inline fun default10(/*0*/ s: () -> kotlin.String = ...): kotlin.Unit
public inline fun default11(/*0*/ s: () -> Derived = ...): kotlin.Unit
public inline fun default2(/*0*/ s: () -> kotlin.String = ...): kotlin.Unit
public inline fun default3(/*0*/ s: () -> kotlin.String = ...): kotlin.Unit
public inline fun default4(/*0*/ s: () -> kotlin.String = ...): kotlin.Unit
public inline fun default5(/*0*/ s: () -> kotlin.String = ...): kotlin.Unit
public inline fun default6(/*0*/ s: (a: Foo) -> kotlin.String = ...): kotlin.Unit
public inline fun default7(/*0*/ s: (a: Foo) -> kotlin.String = ...): kotlin.Unit
public inline fun default8(/*0*/ s: () -> kotlin.String = ...): kotlin.Unit
public inline fun default9(/*0*/ s: () -> kotlin.String = ...): kotlin.Unit
public fun test(): kotlin.String

public abstract class Base {
    public constructor Base()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun foo(/*0*/ f: () -> kotlin.Unit = ...): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Derived : Base {
    public constructor Derived()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ inline fun foo(/*0*/ f: () -> kotlin.Unit = ...): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Foo {
    public constructor Foo()
    public final val prop: kotlin.String = "OK"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object FooObject {
    private constructor FooObject()
    public final val prop: kotlin.String = "OK"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
