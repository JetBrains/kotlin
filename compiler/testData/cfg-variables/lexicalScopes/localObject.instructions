== foo ==
fun foo() {
    "before"
    object A {
        init {
            val a = 1
        }
        fun foo() {
            val b = 2
        }
    }
    "after"
}
---------------------
L0:
  1 <START>                                                                               INIT: in: {} out: {}
  2 mark({ "before" object A { init { val a = 1 } fun foo() { val b = 2 } } "after" })
    mark("before")
    r("before") -> <v0>
    jmp?(L2)
  3 mark({ val a = 1 })
    v(val a = 1)                                                                          INIT: in: {} out: {}
    r(1) -> <v1>                                                                          INIT: in: {} out: {}
    w(a|<v1>)                                                                             INIT: in: {} out: {}
  2 jmp?(L3)                                                                              INIT: in: {} out: {}
    d(fun foo() { val b = 2 })                                                            INIT: in: {} out: {}
L2 [after local class]:
L3 [after local declaration]:
    mark("after")
    r("after") -> <v2>
L1:
  1 <END>
error:
    <ERROR>
sink:
    <SINK>                                                                                                        USE: in: {} out: {}
=====================
== foo ==
fun foo() {
            val b = 2
        }
---------------------
L4:
  3 <START>                INIT: in: {} out: {}
  4 mark({ val b = 2 })
    v(val b = 2)           INIT: in: {} out: {}
    r(2) -> <v0>           INIT: in: {} out: {}
    w(b|<v0>)              INIT: in: {} out: {}
L5:
  3 <END>                  INIT: in: {} out: {}
error:
    <ERROR>
sink:
    <SINK>                                         USE: in: {} out: {}
=====================
