/list.kt:(77,88): info: Generated Viper text for declaration:
field sp$size: Ref

method f$declaration$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$l1: Ref
  var l0$l2: Ref
  var l0$l3: Ref
  ret$0 := df$rt$unitValue()
  label lbl$ret$0
}

/list.kt:(187,201): info: Generated Viper text for initialization:
field sp$size: Ref

method f$initialization$TF$T$c$pkg$kotlin_collections$List(p$l: Ref)
  returns (ret$0: Ref)
  requires acc(p$l.sp$size, write)
  requires df$rt$intFromRef(p$l.sp$size) >= 0
  ensures acc(p$l.sp$size, write)
  ensures df$rt$intFromRef(p$l.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$myList: Ref
  var l0$myEmptyList: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$l), df$rt$T$c$pkg$kotlin_collections$List())
  inhale acc(p$pkg$kotlin_collections$c$List$shared(p$l), wildcard)
  ret$0 := df$rt$unitValue()
  l0$myList := p$l
  l0$myEmptyList := f$pkg$kotlin_collections$emptyList$TF$()
  label lbl$ret$0
}

method f$pkg$kotlin_collections$emptyList$TF$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$pkg$kotlin_collections$List())
  ensures acc(ret.sp$size, write)
  ensures df$rt$intFromRef(ret.sp$size) >= 0
  ensures acc(p$pkg$kotlin_collections$c$List$shared(ret), wildcard)
  ensures df$rt$intFromRef(ret.sp$size) == 0


/list.kt:(297,304): info: Generated Viper text for add_get:
field sp$size: Ref

method f$add_get$TF$T$c$pkg$kotlin_collections$MutableList(p$l: Ref)
  returns (ret$0: Ref)
  requires acc(p$l.sp$size, write)
  requires df$rt$intFromRef(p$l.sp$size) >= 0
  ensures acc(p$l.sp$size, write)
  ensures df$rt$intFromRef(p$l.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var l0$n: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$l), df$rt$T$c$pkg$kotlin_collections$MutableList())
  inhale acc(p$pkg$kotlin_collections$c$MutableList$shared(p$l), wildcard)
  ret$0 := df$rt$unitValue()
  anon$0 := f$pkg$kotlin_collections$c$MutableList$add$TF$T$c$pkg$kotlin_collections$MutableList$T$Int(p$l,
    df$rt$intToRef(1))
  l0$n := f$pkg$kotlin_collections$c$MutableList$get$TF$T$c$pkg$kotlin_collections$MutableList$T$Int(p$l,
    df$rt$intToRef(0))
  label lbl$ret$0
}

method f$pkg$kotlin_collections$c$MutableList$add$TF$T$c$pkg$kotlin_collections$MutableList$T$Int(this: Ref,
  p$element: Ref)
  returns (ret: Ref)
  requires acc(this.sp$size, write)
  requires df$rt$intFromRef(this.sp$size) >= 0
  ensures acc(this.sp$size, write)
  ensures df$rt$intFromRef(this.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$boolType())
  ensures df$rt$intFromRef(this.sp$size) ==
    old(df$rt$intFromRef(this.sp$size)) + 1


method f$pkg$kotlin_collections$c$MutableList$get$TF$T$c$pkg$kotlin_collections$MutableList$T$Int(this: Ref,
  p$index: Ref)
  returns (ret: Ref)
  requires acc(this.sp$size, write)
  requires df$rt$intFromRef(this.sp$size) >= 0
  requires df$rt$intFromRef(p$index) >= 0
  requires df$rt$intFromRef(this.sp$size) > df$rt$intFromRef(p$index)
  ensures acc(this.sp$size, write)
  ensures df$rt$intFromRef(this.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())
  ensures df$rt$intFromRef(this.sp$size) ==
    old(df$rt$intFromRef(this.sp$size))


/list.kt:(379,391): info: Generated Viper text for last_or_null:
field sp$size: Ref

method f$last_or_null$TF$T$c$pkg$kotlin_collections$List(p$l: Ref)
  returns (ret$0: Ref)
  requires acc(p$l.sp$size, write)
  requires df$rt$intFromRef(p$l.sp$size) >= 0
  ensures acc(p$l.sp$size, write)
  ensures df$rt$intFromRef(p$l.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$intType()))
{
  var l0$size: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$l), df$rt$T$c$pkg$kotlin_collections$List())
  inhale acc(p$pkg$kotlin_collections$c$List$shared(p$l), wildcard)
  l0$size := p$l.sp$size
  inhale df$rt$isSubtype(df$rt$typeOf(l0$size), df$rt$intType())
  if (!(df$rt$intFromRef(l0$size) == 0)) {
    var anon$0: Ref
    anon$0 := f$pkg$kotlin_collections$c$List$get$TF$T$c$pkg$kotlin_collections$List$T$Int(p$l,
      sp$minusInts(l0$size, df$rt$intToRef(1)))
    ret$0 := anon$0
    goto lbl$ret$0
  } else {
    ret$0 := df$rt$nullValue()
    goto lbl$ret$0
  }
  label lbl$ret$0
}

method f$pkg$kotlin_collections$c$List$get$TF$T$c$pkg$kotlin_collections$List$T$Int(this: Ref,
  p$index: Ref)
  returns (ret: Ref)
  requires acc(this.sp$size, write)
  requires df$rt$intFromRef(this.sp$size) >= 0
  requires df$rt$intFromRef(p$index) >= 0
  requires df$rt$intFromRef(this.sp$size) > df$rt$intFromRef(p$index)
  ensures acc(this.sp$size, write)
  ensures df$rt$intFromRef(this.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())
  ensures df$rt$intFromRef(this.sp$size) ==
    old(df$rt$intFromRef(this.sp$size))


/list.kt:(545,553): info: Generated Viper text for is_empty:
field sp$size: Ref

method f$is_empty$TF$T$c$pkg$kotlin_collections$List(p$l: Ref)
  returns (ret$0: Ref)
  requires acc(p$l.sp$size, write)
  requires df$rt$intFromRef(p$l.sp$size) >= 0
  ensures acc(p$l.sp$size, write)
  ensures df$rt$intFromRef(p$l.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$intType())
{
  var anon$0: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$l), df$rt$T$c$pkg$kotlin_collections$List())
  inhale acc(p$pkg$kotlin_collections$c$List$shared(p$l), wildcard)
  anon$0 := f$pkg$kotlin_collections$c$List$isEmpty$TF$T$c$pkg$kotlin_collections$List(p$l)
  if (!df$rt$boolFromRef(anon$0)) {
    ret$0 := f$pkg$kotlin_collections$c$List$get$TF$T$c$pkg$kotlin_collections$List$T$Int(p$l,
      df$rt$intToRef(0))
  } else {
    ret$0 := df$rt$intToRef(1)}
  goto lbl$ret$0
  label lbl$ret$0
}

method f$pkg$kotlin_collections$c$List$get$TF$T$c$pkg$kotlin_collections$List$T$Int(this: Ref,
  p$index: Ref)
  returns (ret: Ref)
  requires acc(this.sp$size, write)
  requires df$rt$intFromRef(this.sp$size) >= 0
  requires df$rt$intFromRef(p$index) >= 0
  requires df$rt$intFromRef(this.sp$size) > df$rt$intFromRef(p$index)
  ensures acc(this.sp$size, write)
  ensures df$rt$intFromRef(this.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())
  ensures df$rt$intFromRef(this.sp$size) ==
    old(df$rt$intFromRef(this.sp$size))


method f$pkg$kotlin_collections$c$List$isEmpty$TF$T$c$pkg$kotlin_collections$List(this: Ref)
  returns (ret: Ref)
  requires acc(this.sp$size, write)
  requires df$rt$intFromRef(this.sp$size) >= 0
  ensures acc(this.sp$size, write)
  ensures df$rt$intFromRef(this.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$boolType())
  ensures df$rt$intFromRef(this.sp$size) ==
    old(df$rt$intFromRef(this.sp$size))
  ensures df$rt$boolFromRef(ret) ==> df$rt$intFromRef(this.sp$size) == 0
  ensures !df$rt$boolFromRef(ret) ==> df$rt$intFromRef(this.sp$size) > 0


/list.kt:(670,683): info: Generated Viper text for nullable_list:
field sp$size: Ref

method f$nullable_list$TF$c$pkg$kotlin_collections$List(p$l: Ref)
  returns (ret$0: Ref)
  requires p$l != df$rt$nullValue() ==> acc(p$l.sp$size, write)
  requires p$l != df$rt$nullValue() ==> df$rt$intFromRef(p$l.sp$size) >= 0
  ensures p$l != df$rt$nullValue() ==> acc(p$l.sp$size, write)
  ensures p$l != df$rt$nullValue() ==> df$rt$intFromRef(p$l.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$l), df$rt$nullable(df$rt$T$c$pkg$kotlin_collections$List()))
  inhale p$l != df$rt$nullValue() ==>
    acc(p$pkg$kotlin_collections$c$List$shared(p$l), wildcard)
  ret$0 := df$rt$unitValue()
  if (!(p$l == df$rt$nullValue())) {
    var anon$1: Ref
    anon$1 := f$pkg$kotlin_collections$c$List$isEmpty$TF$T$c$pkg$kotlin_collections$List(p$l)
    anon$0 := sp$notBool(anon$1)
  } else {
    anon$0 := df$rt$boolToRef(false)}
  if (df$rt$boolFromRef(anon$0)) {
    var l2$x: Ref
    var anon$2: Ref
    anon$2 := p$l.sp$size
    inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$intType())
    l2$x := f$pkg$kotlin_collections$c$List$get$TF$T$c$pkg$kotlin_collections$List$T$Int(p$l,
      sp$minusInts(anon$2, df$rt$intToRef(1)))
  }
  label lbl$ret$0
}

method f$pkg$kotlin_collections$c$List$get$TF$T$c$pkg$kotlin_collections$List$T$Int(this: Ref,
  p$index: Ref)
  returns (ret: Ref)
  requires acc(this.sp$size, write)
  requires df$rt$intFromRef(this.sp$size) >= 0
  requires df$rt$intFromRef(p$index) >= 0
  requires df$rt$intFromRef(this.sp$size) > df$rt$intFromRef(p$index)
  ensures acc(this.sp$size, write)
  ensures df$rt$intFromRef(this.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())
  ensures df$rt$intFromRef(this.sp$size) ==
    old(df$rt$intFromRef(this.sp$size))


method f$pkg$kotlin_collections$c$List$isEmpty$TF$T$c$pkg$kotlin_collections$List(this: Ref)
  returns (ret: Ref)
  requires acc(this.sp$size, write)
  requires df$rt$intFromRef(this.sp$size) >= 0
  ensures acc(this.sp$size, write)
  ensures df$rt$intFromRef(this.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$boolType())
  ensures df$rt$intFromRef(this.sp$size) ==
    old(df$rt$intFromRef(this.sp$size))
  ensures df$rt$boolFromRef(ret) ==> df$rt$intFromRef(this.sp$size) == 0
  ensures !df$rt$boolFromRef(ret) ==> df$rt$intFromRef(this.sp$size) > 0
