//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun Test(vararg strings: String) {
    val show = remember { mutableStateOf(false) }
    if (show.value) {
        Text("Showing")
    }
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(strings: Array<out String>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)<rememb...>,<Text("...>:Test.kt")
  val %dirty = %changed
  %composer.startMovableGroup(<>, strings.size)
  val <iterator> = strings.iterator()
  while (<iterator>.hasNext()) {
    val value = <iterator>.next()
    %dirty = %dirty or if (%composer.changed(value)) 0b0100 else 0
  }
  %composer.endMovableGroup()
  if (%dirty and 0b1110 == 0) {
    %dirty = %dirty or 0b0010
  }
  if (%dirty and 0b0001 != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    val show = <block>{
      sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
      val tmp0_group = %composer.cache(false) {
        mutableStateOf(
          value = false
        )
      }
      sourceInformationMarkerEnd(%composer)
      tmp0_group
    }
    if (show.value) {
      Text("Showing", %composer, 0b0110)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(*strings, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
