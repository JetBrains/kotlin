// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
abstract class A : Java1, SortedSet<Int>, MutableSet<Int> {
  // CHECK:
  //   Mangled name: A#<init>(){}
  //   Public signature: /A.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: A#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /A.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /A.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: A#clear(){}
  //   Public signature: /A.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: A#comparator(){}java.util.Comparator<in|kotlin.Int?>?
  //   Public signature: /A.comparator|1995639798623620652[0]
  //   Public signature debug description: comparator(){}java.util.Comparator<in|kotlin.Int?>?
  abstract /* fake */ override fun comparator(): Comparator<in Int?>?

  // CHECK JVM_IR:
  //   Mangled name: A#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /A.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /A.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#first(){}kotlin.Int?
  //   Public signature: /A.first|2217315793179538772[0]
  //   Public signature debug description: first(){}kotlin.Int?
  abstract /* fake */ override fun first(): Int?

  // CHECK:
  //   Mangled name: A#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /A.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: A#headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /A.headSet|-6503727393463747396[0]
  //   Public signature debug description: headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun headSet(p0: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: A#isEmpty(){}kotlin.Boolean
  //   Public signature: /A.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /A.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: A#last(){}kotlin.Int?
  //   Public signature: /A.last|8461941190204264333[0]
  //   Public signature debug description: last(){}kotlin.Int?
  abstract /* fake */ override fun last(): Int?

  // CHECK JVM_IR:
  //   Mangled name: A#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /A.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: A#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /A.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  abstract /* fake */ override fun remove(o: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /A.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /A.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /A.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /A.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /A.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: A#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /A.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: A#subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /A.subSet|6352807048107259190[0]
  //   Public signature debug description: subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun subSet(p0: Int?, p1: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: A#tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /A.tailSet|6125985204554568995[0]
  //   Public signature debug description: tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun tailSet(p0: Int?): SortedSet<Int?>?

  // CHECK:
  //   Mangled name: A{}size
  //   Public signature: /A.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: A#<get-size>(){}kotlin.Int
    //   Public signature: /A.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: B
//   Public signature: /B|null[0]
abstract class B : Java1, SortedSet<Int>, MutableSet<Int> {
  // CHECK:
  //   Mangled name: B{}size
  //   Public signature: /B.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: B#<get-size>(){}kotlin.Int
    //   Public signature: /B.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: B#<init>(kotlin.Int){}
  //   Public signature: /B.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(size: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: B#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /B.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: B#clear(){}
  //   Public signature: /B.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: B#comparator(){}java.util.Comparator<in|kotlin.Int?>?
  //   Public signature: /B.comparator|1995639798623620652[0]
  //   Public signature debug description: comparator(){}java.util.Comparator<in|kotlin.Int?>?
  abstract /* fake */ override fun comparator(): Comparator<in Int?>?

  // CHECK JVM_IR:
  //   Mangled name: B#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /B.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /B.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#first(){}kotlin.Int?
  //   Public signature: /B.first|2217315793179538772[0]
  //   Public signature debug description: first(){}kotlin.Int?
  abstract /* fake */ override fun first(): Int?

  // CHECK:
  //   Mangled name: B#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /B.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: B#headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /B.headSet|-6503727393463747396[0]
  //   Public signature debug description: headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun headSet(p0: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: B#isEmpty(){}kotlin.Boolean
  //   Public signature: /B.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /B.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: B#last(){}kotlin.Int?
  //   Public signature: /B.last|8461941190204264333[0]
  //   Public signature debug description: last(){}kotlin.Int?
  abstract /* fake */ override fun last(): Int?

  // CHECK JVM_IR:
  //   Mangled name: B#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /B.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: B#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /B.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  abstract /* fake */ override fun remove(o: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /B.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /B.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /B.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /B.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: B#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /B.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: B#subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /B.subSet|6352807048107259190[0]
  //   Public signature debug description: subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun subSet(p0: Int?, p1: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: B#tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /B.tailSet|6125985204554568995[0]
  //   Public signature debug description: tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun tailSet(p0: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: B#add(kotlin.Int){}kotlin.Boolean
  //   Public signature: /B.add|-1806173376318726841[0]
  //   Public signature debug description: add(kotlin.Int){}kotlin.Boolean
  override fun add(element: Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#remove(kotlin.Int){}kotlin.Boolean
  //   Public signature: /B.remove|-2631909738569200722[0]
  //   Public signature debug description: remove(kotlin.Int){}kotlin.Boolean
  override fun remove(element: Int): Boolean

}

// CHECK:
//   Mangled name: C
//   Public signature: /C|null[0]
abstract class C : HashSet<Int>, Java1, MutableSet<Int> {
  // CHECK:
  //   Mangled name: C#<init>(){}
  //   Public signature: /C.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: C#add(kotlin.Int){}kotlin.Boolean
  //   Public signature: /C.add|-1806173376318726841[0]
  //   Public signature debug description: add(kotlin.Int){}kotlin.Boolean
  /* fake */ override fun add(element: Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#addAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  //   Public signature: /C.addAll|-6051524025259448486[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  /* fake */ override fun addAll(elements: Collection<Int>): Boolean

  // CHECK:
  //   Mangled name: C#clear(){}
  //   Public signature: /C.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: C#clone(){}kotlin.Any{EnhancedNullability}
  //   Public signature: /C.clone|178802004086941196[0]
  //   Public signature debug description: clone(){}kotlin.Any{EnhancedNullability}
  /* fake */ override fun clone(): @EnhancedNullability Any

  // CHECK JVM_IR:
  //   Mangled name: C#contains(kotlin.Int){}kotlin.Boolean
  //   Public signature: /C.contains|5978686608528191145[0]
  //   Public signature debug description: contains(kotlin.Int){}kotlin.Boolean
  /* fake */ override operator fun contains(element: Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#containsAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  //   Public signature: /C.containsAll|5891935227751154106[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /C.equals|722809408929142791[0]
  //   Public signature debug description: equals(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK:
  //   Mangled name: C#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /C.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: C#hashCode(){}kotlin.Int
  //   Public signature: /C.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: C#isEmpty(){}kotlin.Boolean
  //   Public signature: /C.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#iterator(){}kotlin.collections.MutableIterator<kotlin.Int>
  //   Public signature: /C.iterator|5550173533307317441[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int>
  /* fake */ override operator fun iterator(): MutableIterator<Int>

  // CHECK JVM_IR:
  //   Mangled name: C#parallelStream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /C.parallelStream|7878330035109535908[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: C#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /C.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  abstract /* fake */ override fun remove(o: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#remove(kotlin.Int){}kotlin.Boolean
  //   Public signature: /C.remove|-2631909738569200722[0]
  //   Public signature debug description: remove(kotlin.Int){}kotlin.Boolean
  /* fake */ override fun remove(element: Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#removeAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  //   Public signature: /C.removeAll|-3862070029132854703[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#removeIf(java.util.function.Predicate<in|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /C.removeIf|-1099538878717265414[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#retainAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  //   Public signature: /C.retainAll|1291083757121901219[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /C.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: C#stream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /C.stream|5410141522529844650[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: C#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /C.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: C#toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /C.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: C#toString(){}kotlin.String
  //   Public signature: /C.toString|6958853723545266802[0]
  //   Public signature debug description: toString(){}kotlin.String
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: C{}size
  //   Public signature: /C.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: C#<get-size>(){}kotlin.Int
    //   Public signature: /C.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: D
//   Public signature: /D|null[0]
class D : HashSet<Int>, Java1, MutableSet<Int> {
  // CHECK:
  //   Mangled name: D#<init>(){}
  //   Public signature: /D.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: D#add(kotlin.Int){}kotlin.Boolean
  //   Public signature: /D.add|-1806173376318726841[0]
  //   Public signature debug description: add(kotlin.Int){}kotlin.Boolean
  /* fake */ override fun add(element: Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#addAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  //   Public signature: /D.addAll|-6051524025259448486[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  /* fake */ override fun addAll(elements: Collection<Int>): Boolean

  // CHECK:
  //   Mangled name: D#clear(){}
  //   Public signature: /D.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: D#clone(){}kotlin.Any{EnhancedNullability}
  //   Public signature: /D.clone|178802004086941196[0]
  //   Public signature debug description: clone(){}kotlin.Any{EnhancedNullability}
  /* fake */ override fun clone(): @EnhancedNullability Any

  // CHECK JVM_IR:
  //   Mangled name: D#contains(kotlin.Int){}kotlin.Boolean
  //   Public signature: /D.contains|5978686608528191145[0]
  //   Public signature debug description: contains(kotlin.Int){}kotlin.Boolean
  /* fake */ override operator fun contains(element: Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#containsAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  //   Public signature: /D.containsAll|5891935227751154106[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /D.equals|722809408929142791[0]
  //   Public signature debug description: equals(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK:
  //   Mangled name: D#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /D.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: D#hashCode(){}kotlin.Int
  //   Public signature: /D.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: D#isEmpty(){}kotlin.Boolean
  //   Public signature: /D.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#iterator(){}kotlin.collections.MutableIterator<kotlin.Int>
  //   Public signature: /D.iterator|5550173533307317441[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int>
  /* fake */ override operator fun iterator(): MutableIterator<Int>

  // CHECK JVM_IR:
  //   Mangled name: D#parallelStream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /D.parallelStream|7878330035109535908[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: D#remove(kotlin.Int){}kotlin.Boolean
  //   Public signature: /D.remove|-2631909738569200722[0]
  //   Public signature debug description: remove(kotlin.Int){}kotlin.Boolean
  /* fake */ override fun remove(element: Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#removeAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  //   Public signature: /D.removeAll|-3862070029132854703[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#removeIf(java.util.function.Predicate<in|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /D.removeIf|-1099538878717265414[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#retainAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  //   Public signature: /D.retainAll|1291083757121901219[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /D.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: D#stream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /D.stream|5410141522529844650[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: D#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /D.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: D#toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /D.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: D#toString(){}kotlin.String
  //   Public signature: /D.toString|6958853723545266802[0]
  //   Public signature debug description: toString(){}kotlin.String
  /* fake */ override fun toString(): String

  // CHECK JVM_IR:
  //   Mangled name: D#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /D.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  override fun remove(o: Any?): Boolean

  // CHECK:
  //   Mangled name: D{}size
  //   Public signature: /D.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: D#<get-size>(){}kotlin.Int
    //   Public signature: /D.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: E
//   Public signature: /E|null[0]
abstract class E : LinkedHashSet<Int>, Java1, SortedSet<Int> {
  // CHECK:
  //   Mangled name: E#<init>(){}
  //   Public signature: /E.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: E#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /E.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /E.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: E#clear(){}
  //   Public signature: /E.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: E#clone(){}kotlin.Any{EnhancedNullability}
  //   Public signature: /E.clone|178802004086941196[0]
  //   Public signature debug description: clone(){}kotlin.Any{EnhancedNullability}
  /* fake */ override fun clone(): @EnhancedNullability Any

  // CHECK JVM_IR:
  //   Mangled name: E#comparator(){}java.util.Comparator<in|kotlin.Int?>?
  //   Public signature: /E.comparator|1995639798623620652[0]
  //   Public signature debug description: comparator(){}java.util.Comparator<in|kotlin.Int?>?
  abstract /* fake */ override fun comparator(): Comparator<in Int?>?

  // CHECK JVM_IR:
  //   Mangled name: E#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /E.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /E.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /E.equals|722809408929142791[0]
  //   Public signature debug description: equals(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#first(){}kotlin.Int?
  //   Public signature: /E.first|2217315793179538772[0]
  //   Public signature debug description: first(){}kotlin.Int?
  abstract /* fake */ override fun first(): Int?

  // CHECK:
  //   Mangled name: E#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /E.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: E#hashCode(){}kotlin.Int
  //   Public signature: /E.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: E#headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /E.headSet|-6503727393463747396[0]
  //   Public signature debug description: headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun headSet(p0: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: E#isEmpty(){}kotlin.Boolean
  //   Public signature: /E.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /E.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: E#last(){}kotlin.Int?
  //   Public signature: /E.last|8461941190204264333[0]
  //   Public signature debug description: last(){}kotlin.Int?
  abstract /* fake */ override fun last(): Int?

  // CHECK JVM_IR:
  //   Mangled name: E#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /E.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: E#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /E.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /E.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /E.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /E.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /E.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: E#subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /E.subSet|6352807048107259190[0]
  //   Public signature debug description: subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun subSet(p0: Int?, p1: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: E#tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /E.tailSet|6125985204554568995[0]
  //   Public signature debug description: tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun tailSet(p0: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: E#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /E.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: E#toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /E.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: E#toString(){}kotlin.String
  //   Public signature: /E.toString|6958853723545266802[0]
  //   Public signature debug description: toString(){}kotlin.String
  /* fake */ override fun toString(): String

  // CHECK JVM_IR:
  //   Mangled name: E#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /E.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  override fun remove(o: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#spliterator(){}java.util.Spliterator<kotlin.Int>
  //   Public signature: /E.spliterator|5735513268042072608[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int>
  override fun spliterator(): Spliterator<Int>

  // CHECK:
  //   Mangled name: E{}size
  //   Public signature: /E.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: E#<get-size>(){}kotlin.Int
    //   Public signature: /E.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: F
//   Public signature: /F|null[0]
abstract class F : Java2, Java1 {
  // CHECK:
  //   Mangled name: F#<init>(){}
  //   Public signature: /F.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: F#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /F.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /F.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: F#clear(){}
  //   Public signature: /F.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: F#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /F.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /F.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /F.equals|722809408929142791[0]
  //   Public signature debug description: equals(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK:
  //   Mangled name: F#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /F.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: F#hashCode(){}kotlin.Int
  //   Public signature: /F.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: F#isEmpty(){}kotlin.Boolean
  //   Public signature: /F.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /F.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: F#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /F.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: F#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /F.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  abstract /* fake */ override fun remove(o: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /F.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /F.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /F.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /F.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /F.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: F#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /F.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: F#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /F.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: F#toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /F.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: F#toString(){}kotlin.String
  //   Public signature: /F.toString|6958853723545266802[0]
  //   Public signature debug description: toString(){}kotlin.String
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: F{}size
  //   Public signature: /F.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: F#<get-size>(){}kotlin.Int
    //   Public signature: /F.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: G
//   Public signature: /G|null[0]
abstract class G : Java2, Java1 {
  // CHECK:
  //   Mangled name: G{}size
  //   Public signature: /G.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: G#<get-size>(){}kotlin.Int
    //   Public signature: /G.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: G#<init>(kotlin.Int){}
  //   Public signature: /G.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(size: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: G#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /G.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: G#clear(){}
  //   Public signature: /G.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: G#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /G.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /G.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /G.equals|722809408929142791[0]
  //   Public signature debug description: equals(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK:
  //   Mangled name: G#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /G.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: G#hashCode(){}kotlin.Int
  //   Public signature: /G.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: G#isEmpty(){}kotlin.Boolean
  //   Public signature: /G.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /G.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: G#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /G.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: G#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /G.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /G.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /G.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /G.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /G.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: G#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /G.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: G#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /G.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: G#toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /G.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: G#toString(){}kotlin.String
  //   Public signature: /G.toString|6958853723545266802[0]
  //   Public signature debug description: toString(){}kotlin.String
  /* fake */ override fun toString(): String

  // CHECK JVM_IR:
  //   Mangled name: G#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /G.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /G.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  override fun remove(o: Any?): Boolean

}

// CHECK:
//   Mangled name: H
//   Public signature: /H|null[0]
abstract class H : KotlinClass, Java1 {
  // CHECK:
  //   Mangled name: H#<init>(){}
  //   Public signature: /H.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: H#add(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /H.add|7559962077055454748[0]
  //   Public signature debug description: add(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun add(element: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#addAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /H.addAll|-8818439124580844723[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun addAll(elements: @EnhancedNullability Collection<@EnhancedNullability Int>): Boolean

  // CHECK:
  //   Mangled name: H#clear(){}
  //   Public signature: /H.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: H#clone(){}kotlin.Any{EnhancedNullability}
  //   Public signature: /H.clone|178802004086941196[0]
  //   Public signature debug description: clone(){}kotlin.Any{EnhancedNullability}
  /* fake */ override fun clone(): @EnhancedNullability Any

  // CHECK JVM_IR:
  //   Mangled name: H#contains(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /H.contains|3736388240191289860[0]
  //   Public signature debug description: contains(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun contains(element: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#containsAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /H.containsAll|-6765067201579764726[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /H.equals|722809408929142791[0]
  //   Public signature debug description: equals(kotlin.Any?){}kotlin.Boolean
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK:
  //   Mangled name: H#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /H.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: H#hashCode(){}kotlin.Int
  //   Public signature: /H.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: H#isEmpty(){}kotlin.Boolean
  //   Public signature: /H.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#iterator(){}kotlin.collections.MutableIterator<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /H.iterator|115627760567581658[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override operator fun iterator(): @EnhancedNullability MutableIterator<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: H#parallelStream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /H.parallelStream|7878330035109535908[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: H#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /H.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  abstract /* fake */ override fun remove(o: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#removeAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /H.removeAll|-5493620261823900507[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#removeIf(java.util.function.Predicate<in|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /H.removeIf|-1099538878717265414[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#retainAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /H.retainAll|-3550913358824719637[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /H.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: H#stream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /H.stream|5410141522529844650[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: H#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /H.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: H#toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /H.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: H#toString(){}kotlin.String
  //   Public signature: /H.toString|6958853723545266802[0]
  //   Public signature debug description: toString(){}kotlin.String
  /* fake */ override fun toString(): String

  // CHECK JVM_IR:
  //   Mangled name: H#remove(kotlin.Int){}kotlin.Boolean
  //   Public signature: /H.remove|-2631909738569200722[0]
  //   Public signature debug description: remove(kotlin.Int){}kotlin.Boolean
  override fun remove(element: Int): Boolean

  // CHECK:
  //   Mangled name: H{}size
  //   Public signature: /H.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: H#<get-size>(){}kotlin.Int
    //   Public signature: /H.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: I
//   Public signature: /I|null[0]
abstract class I : Java1, KotlinInterface {
  // CHECK:
  //   Mangled name: I#<init>(){}
  //   Public signature: /I.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: I#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /I.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /I.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: I#clear(){}
  //   Public signature: /I.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: I#comparator(){}java.util.Comparator<in|kotlin.Int?>?
  //   Public signature: /I.comparator|1995639798623620652[0]
  //   Public signature debug description: comparator(){}java.util.Comparator<in|kotlin.Int?>?
  abstract /* fake */ override fun comparator(): Comparator<in Int?>?

  // CHECK JVM_IR:
  //   Mangled name: I#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /I.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /I.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#first(){}kotlin.Int?
  //   Public signature: /I.first|2217315793179538772[0]
  //   Public signature debug description: first(){}kotlin.Int?
  abstract /* fake */ override fun first(): Int?

  // CHECK:
  //   Mangled name: I#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /I.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: I#headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /I.headSet|-6503727393463747396[0]
  //   Public signature debug description: headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun headSet(p0: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: I#isEmpty(){}kotlin.Boolean
  //   Public signature: /I.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /I.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: I#last(){}kotlin.Int?
  //   Public signature: /I.last|8461941190204264333[0]
  //   Public signature debug description: last(){}kotlin.Int?
  abstract /* fake */ override fun last(): Int?

  // CHECK JVM_IR:
  //   Mangled name: I#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /I.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: I#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /I.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  abstract /* fake */ override fun remove(o: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /I.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /I.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /I.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /I.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /I.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: I#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /I.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: I#subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /I.subSet|6352807048107259190[0]
  //   Public signature debug description: subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun subSet(p0: Int?, p1: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: I#tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /I.tailSet|6125985204554568995[0]
  //   Public signature debug description: tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun tailSet(p0: Int?): SortedSet<Int?>?

  // CHECK:
  //   Mangled name: I{}size
  //   Public signature: /I.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: I#<get-size>(){}kotlin.Int
    //   Public signature: /I.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: J
//   Public signature: /J|null[0]
abstract class J : Java3, Java1 {
  // CHECK:
  //   Mangled name: J#<init>(){}
  //   Public signature: /J.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: J#add(kotlin.Int?{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /J.add|-4045406483148196312[0]
  //   Public signature debug description: add(kotlin.Int?{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun add(element: @EnhancedNullability Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#addAll(kotlin.collections.Collection<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /J.addAll|1453794159367942631[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun addAll(elements: @EnhancedNullability Collection<@EnhancedNullability Int?>): Boolean

  // CHECK:
  //   Mangled name: J#clear(){}
  //   Public signature: /J.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: J#clone(){}kotlin.Any{EnhancedNullability}
  //   Public signature: /J.clone|178802004086941196[0]
  //   Public signature debug description: clone(){}kotlin.Any{EnhancedNullability}
  /* fake */ override fun clone(): @EnhancedNullability Any

  // CHECK JVM_IR:
  //   Mangled name: J#contains(kotlin.Int?{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /J.contains|-2468276587626376870[0]
  //   Public signature debug description: contains(kotlin.Int?{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun contains(element: @EnhancedNullability Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#containsAll(kotlin.collections.Collection<kotlin.Int?{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /J.containsAll|794764971603705561[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<@EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#equals(kotlin.Any?{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /J.equals|4126616015386471185[0]
  //   Public signature debug description: equals(kotlin.Any?{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun equals(other: @EnhancedNullability Any?): Boolean

  // CHECK:
  //   Mangled name: J#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /J.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: J#hashCode(){}kotlin.Int
  //   Public signature: /J.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: J#isEmpty(){}kotlin.Boolean
  //   Public signature: /J.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /J.iterator|-9071170978442329531[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override operator fun iterator(): @EnhancedNullability MutableIterator<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: J#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /J.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: J#remove(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /J.remove|-4847290102784382063[0]
  //   Public signature debug description: remove(kotlin.Any?){}kotlin.Boolean
  abstract /* fake */ override fun remove(o: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#remove(kotlin.Int?{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /J.remove|-1124624034571978045[0]
  //   Public signature debug description: remove(kotlin.Int?{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun remove(element: @EnhancedNullability Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#removeAll(kotlin.collections.Collection<kotlin.Int?{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /J.removeAll|4920074937927144900[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<@EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /J.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#retainAll(kotlin.collections.Collection<kotlin.Int?{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /J.retainAll|9019132369114162808[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<@EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /J.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: J#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /J.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: J#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /J.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: J#toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /J.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: J#toString(){}kotlin.String{EnhancedNullability}
  //   Public signature: /J.toString|7581629773206850948[0]
  //   Public signature debug description: toString(){}kotlin.String{EnhancedNullability}
  /* fake */ override fun toString(): @EnhancedNullability String

  // CHECK:
  //   Mangled name: J{}size
  //   Public signature: /J.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: J#<get-size>(){}kotlin.Int
    //   Public signature: /J.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: KotlinClass
//   Public signature: /KotlinClass|null[0]
open class KotlinClass : HashSet<Int> {
  // CHECK:
  //   Mangled name: KotlinClass#<init>(){}
  //   Public signature: /KotlinClass.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#add(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /KotlinClass.add|7559962077055454748[0]
  //   Public signature debug description: add(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun add(element: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#addAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /KotlinClass.addAll|-8818439124580844723[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun addAll(elements: @EnhancedNullability Collection<@EnhancedNullability Int>): Boolean

  // CHECK:
  //   Mangled name: KotlinClass#clear(){}
  //   Public signature: /KotlinClass.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#clone(){}kotlin.Any{EnhancedNullability}
  //   Public signature: /KotlinClass.clone|178802004086941196[0]
  //   Public signature debug description: clone(){}kotlin.Any{EnhancedNullability}
  /* fake */ override fun clone(): @EnhancedNullability Any

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#contains(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /KotlinClass.contains|3736388240191289860[0]
  //   Public signature debug description: contains(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun contains(element: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#containsAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /KotlinClass.containsAll|-6765067201579764726[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun containsAll(elements: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#equals(kotlin.Any?{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /KotlinClass.equals|4126616015386471185[0]
  //   Public signature debug description: equals(kotlin.Any?{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun equals(other: @EnhancedNullability Any?): Boolean

  // CHECK:
  //   Mangled name: KotlinClass#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /KotlinClass.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#hashCode(){}kotlin.Int
  //   Public signature: /KotlinClass.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#isEmpty(){}kotlin.Boolean
  //   Public signature: /KotlinClass.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#iterator(){}kotlin.collections.MutableIterator<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /KotlinClass.iterator|115627760567581658[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override operator fun iterator(): @EnhancedNullability MutableIterator<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#parallelStream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /KotlinClass.parallelStream|7878330035109535908[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#removeAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /KotlinClass.removeAll|-5493620261823900507[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun removeAll(elements: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#removeIf(java.util.function.Predicate<in|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /KotlinClass.removeIf|-1099538878717265414[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#retainAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /KotlinClass.retainAll|-3550913358824719637[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun retainAll(elements: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /KotlinClass.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#stream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /KotlinClass.stream|5410141522529844650[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /KotlinClass.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /KotlinClass.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0§<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#toString(){}kotlin.String{EnhancedNullability}
  //   Public signature: /KotlinClass.toString|7581629773206850948[0]
  //   Public signature debug description: toString(){}kotlin.String{EnhancedNullability}
  /* fake */ override fun toString(): @EnhancedNullability String

  // CHECK JVM_IR:
  //   Mangled name: KotlinClass#remove(kotlin.Int){}kotlin.Boolean
  //   Public signature: /KotlinClass.remove|-2631909738569200722[0]
  //   Public signature debug description: remove(kotlin.Int){}kotlin.Boolean
  override fun remove(element: Int): Boolean

  // CHECK:
  //   Mangled name: KotlinClass{}size
  //   Public signature: /KotlinClass.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: KotlinClass#<get-size>(){}kotlin.Int
    //   Public signature: /KotlinClass.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: KotlinInterface
//   Public signature: /KotlinInterface|null[0]
interface KotlinInterface : SortedSet<Int> {
  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /KotlinInterface.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /KotlinInterface.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: KotlinInterface#clear(){}
  //   Public signature: /KotlinInterface.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#comparator(){}java.util.Comparator<in|kotlin.Int?>?
  //   Public signature: /KotlinInterface.comparator|1995639798623620652[0]
  //   Public signature debug description: comparator(){}java.util.Comparator<in|kotlin.Int?>?
  abstract /* fake */ override fun comparator(): Comparator<in Int?>?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /KotlinInterface.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /KotlinInterface.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#first(){}kotlin.Int?
  //   Public signature: /KotlinInterface.first|2217315793179538772[0]
  //   Public signature debug description: first(){}kotlin.Int?
  abstract /* fake */ override fun first(): Int?

  // CHECK:
  //   Mangled name: KotlinInterface#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /KotlinInterface.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /KotlinInterface.headSet|-6503727393463747396[0]
  //   Public signature debug description: headSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun headSet(p0: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#isEmpty(){}kotlin.Boolean
  //   Public signature: /KotlinInterface.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /KotlinInterface.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#last(){}kotlin.Int?
  //   Public signature: /KotlinInterface.last|8461941190204264333[0]
  //   Public signature debug description: last(){}kotlin.Int?
  abstract /* fake */ override fun last(): Int?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /KotlinInterface.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /KotlinInterface.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /KotlinInterface.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /KotlinInterface.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /KotlinInterface.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /KotlinInterface.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /KotlinInterface.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /KotlinInterface.subSet|6352807048107259190[0]
  //   Public signature debug description: subSet(kotlin.Int?;kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun subSet(p0: Int?, p1: Int?): SortedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  //   Public signature: /KotlinInterface.tailSet|6125985204554568995[0]
  //   Public signature debug description: tailSet(kotlin.Int?){}java.util.SortedSet<kotlin.Int?>?
  abstract /* fake */ override fun tailSet(p0: Int?): SortedSet<Int?>?

  // CHECK:
  //   Mangled name: KotlinInterface{}size
  //   Public signature: /KotlinInterface.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: KotlinInterface#<get-size>(){}kotlin.Int
    //   Public signature: /KotlinInterface.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: #test(A;B;C;D;E;F;G;H;I;J){}
//   Public signature: /test|-6013363711736718138[0]
//   Public signature debug description: test(A;B;C;D;E;F;G;H;I;J){}
fun test(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J): Unit
