RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public? final? [ResolvedTo(RAW_FIR)] fun resolveMe([ResolvedTo(RAW_FIR)] param: I): <implicit> { LAZY_BLOCK }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public? final? [ResolvedTo(RAW_FIR)] fun resolveMe([ResolvedTo(RAW_FIR)] param: I): <implicit> { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun resolveMe([ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] param: I): <implicit> { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public? final? [ResolvedTo(COMPANION_GENERATION)] fun resolveMe([ResolvedTo(COMPANION_GENERATION)] param: I): <implicit> { LAZY_BLOCK }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public? final? [ResolvedTo(SUPER_TYPES)] fun resolveMe([ResolvedTo(SUPER_TYPES)] param: I): <implicit> { LAZY_BLOCK }

TYPES:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public? final? [ResolvedTo(TYPES)] fun resolveMe([ResolvedTo(TYPES)] param: R|I|): <implicit> { LAZY_BLOCK }

STATUS:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public final [ResolvedTo(STATUS)] fun resolveMe([ResolvedTo(STATUS)] param: R|I|): <implicit> { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun resolveMe([ResolvedTo(EXPECT_ACTUAL_MATCHING)] param: R|I|): <implicit> { LAZY_BLOCK }

ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public final [ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] fun resolveMe([ResolvedTo(ARGUMENTS_OF_ANNOTATIONS)] param: R|I|): <implicit> { LAZY_BLOCK }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public final [ResolvedTo(CONTRACTS)] fun resolveMe([ResolvedTo(CONTRACTS)] param: R|I|): <implicit> {
        ^resolveMe Unit#
    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun resolveMe([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] param: R|I|): R|kotlin/Unit| {
        ^resolveMe Q|kotlin/Unit|
    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public final [ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] fun resolveMe([ResolvedTo(ANNOTATIONS_ARGUMENTS_MAPPING)] param: R|I|): R|kotlin/Unit| {
        ^resolveMe Q|kotlin/Unit|
    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(RAW_FIR)] annotations container
    public? final? [ResolvedTo(RAW_FIR)] interface I : R|kotlin/Any| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun resolveMe([ResolvedTo(BODY_RESOLVE)] param: R|I|): R|kotlin/Unit| {
        ^resolveMe Q|kotlin/Unit|
    }

FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] functionWithParameter.kt
    [ResolvedTo(BODY_RESOLVE)] annotations container
    public abstract [ResolvedTo(BODY_RESOLVE)] interface I : R|kotlin/Any| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun resolveMe([ResolvedTo(BODY_RESOLVE)] param: R|I|): R|kotlin/Unit| {
        ^resolveMe Q|kotlin/Unit|
    }
