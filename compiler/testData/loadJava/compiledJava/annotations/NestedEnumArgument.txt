package test

public open class NestedEnumArgument {
    public constructor NestedEnumArgument()
    test.NestedEnumArgument.Anno(value = E.FIRST) public/*package*/ open fun foo(): kotlin.Unit

    public final class Anno : kotlin.Annotation {
        public constructor Anno(/*0*/ value: test.NestedEnumArgument.E)
        public final val value: test.NestedEnumArgument.E
        public abstract fun value(): test.NestedEnumArgument.E
    }

    public final enum class E : kotlin.Enum<test.NestedEnumArgument.E!> {
        public enum entry FIRST : test.NestedEnumArgument.E {
            private constructor FIRST()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.NestedEnumArgument.E!): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        }

        private constructor E()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.NestedEnumArgument.E!): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.NestedEnumArgument.E
        public final /*synthesized*/ fun values(): kotlin.Array<test.NestedEnumArgument.E>
    }
}
