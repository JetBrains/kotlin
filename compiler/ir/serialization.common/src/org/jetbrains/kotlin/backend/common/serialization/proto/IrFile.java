// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFile}
 */
public final class IrFile extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
    IrFileOrBuilder {
  // Use IrFile.newBuilder() to construct.
  private IrFile(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrFile(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrFile defaultInstance;
  public static IrFile getDefaultInstance() {
    return defaultInstance;
  }

  public IrFile getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrFile(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              declarationId_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.UniqId>();
              mutable_bitField0_ |= 0x00000001;
            }
            declarationId_.add(input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.PARSER, extensionRegistry));
            break;
          }
          case 18: {
            org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              subBuilder = fileEntry_.toBuilder();
            }
            fileEntry_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fileEntry_);
              fileEntry_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 26: {
            org.jetbrains.kotlin.backend.common.serialization.proto.String.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              subBuilder = fqName_.toBuilder();
            }
            fqName_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.String.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fqName_);
              fqName_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 34: {
            org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.Builder subBuilder = null;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              subBuilder = annotations_.toBuilder();
            }
            annotations_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(annotations_);
              annotations_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000004;
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              explicitlyExportedToCompiler_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol>();
              mutable_bitField0_ |= 0x00000010;
            }
            explicitlyExportedToCompiler_.add(input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol.PARSER, extensionRegistry));
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        declarationId_ = java.util.Collections.unmodifiableList(declarationId_);
      }
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        explicitlyExportedToCompiler_ = java.util.Collections.unmodifiableList(explicitlyExportedToCompiler_);
      }
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrFile> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrFile>() {
    public IrFile parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrFile(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrFile> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int DECLARATION_ID_FIELD_NUMBER = 1;
  private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.UniqId> declarationId_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
   */
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.UniqId> getDeclarationIdList() {
    return declarationId_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.UniqIdOrBuilder> 
      getDeclarationIdOrBuilderList() {
    return declarationId_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
   */
  public int getDeclarationIdCount() {
    return declarationId_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.UniqId getDeclarationId(int index) {
    return declarationId_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.UniqIdOrBuilder getDeclarationIdOrBuilder(
      int index) {
    return declarationId_.get(index);
  }

  public static final int FILE_ENTRY_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry fileEntry_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  public boolean hasFileEntry() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry() {
    return fileEntry_;
  }

  public static final int FQ_NAME_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.backend.common.serialization.proto.String fqName_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String fq_name = 3;</code>
   */
  public boolean hasFqName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String fq_name = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.String getFqName() {
    return fqName_;
  }

  public static final int ANNOTATIONS_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 4;</code>
   */
  public boolean hasAnnotations() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 4;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.Annotations getAnnotations() {
    return annotations_;
  }

  public static final int EXPLICITLY_EXPORTED_TO_COMPILER_FIELD_NUMBER = 5;
  private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol> explicitlyExportedToCompiler_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
   */
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol> getExplicitlyExportedToCompilerList() {
    return explicitlyExportedToCompiler_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolOrBuilder> 
      getExplicitlyExportedToCompilerOrBuilderList() {
    return explicitlyExportedToCompiler_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
   */
  public int getExplicitlyExportedToCompilerCount() {
    return explicitlyExportedToCompiler_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol getExplicitlyExportedToCompiler(int index) {
    return explicitlyExportedToCompiler_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolOrBuilder getExplicitlyExportedToCompilerOrBuilder(
      int index) {
    return explicitlyExportedToCompiler_.get(index);
  }

  private void initFields() {
    declarationId_ = java.util.Collections.emptyList();
    fileEntry_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance();
    fqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
    annotations_ = org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance();
    explicitlyExportedToCompiler_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasFileEntry()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasFqName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasAnnotations()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getDeclarationIdCount(); i++) {
      if (!getDeclarationId(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (!getFileEntry().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getFqName().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getAnnotations().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getExplicitlyExportedToCompilerCount(); i++) {
      if (!getExplicitlyExportedToCompiler(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < declarationId_.size(); i++) {
      output.writeMessage(1, declarationId_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(2, fileEntry_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(3, fqName_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(4, annotations_);
    }
    for (int i = 0; i < explicitlyExportedToCompiler_.size(); i++) {
      output.writeMessage(5, explicitlyExportedToCompiler_.get(i));
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < declarationId_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, declarationId_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, fileEntry_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, fqName_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, annotations_);
    }
    for (int i = 0; i < explicitlyExportedToCompiler_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(5, explicitlyExportedToCompiler_.get(i));
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrFile prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFile}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFile, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrFileOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrFile.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      declarationId_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      fileEntry_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000002);
      fqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000004);
      annotations_ = org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000008);
      explicitlyExportedToCompiler_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFile getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrFile.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFile build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrFile result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFile buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrFile result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrFile(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        declarationId_ = java.util.Collections.unmodifiableList(declarationId_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.declarationId_ = declarationId_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000001;
      }
      result.fileEntry_ = fileEntry_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000002;
      }
      result.fqName_ = fqName_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000004;
      }
      result.annotations_ = annotations_;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        explicitlyExportedToCompiler_ = java.util.Collections.unmodifiableList(explicitlyExportedToCompiler_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.explicitlyExportedToCompiler_ = explicitlyExportedToCompiler_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrFile other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrFile.getDefaultInstance()) return this;
      if (!other.declarationId_.isEmpty()) {
        if (declarationId_.isEmpty()) {
          declarationId_ = other.declarationId_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureDeclarationIdIsMutable();
          declarationId_.addAll(other.declarationId_);
        }
        
      }
      if (other.hasFileEntry()) {
        mergeFileEntry(other.getFileEntry());
      }
      if (other.hasFqName()) {
        mergeFqName(other.getFqName());
      }
      if (other.hasAnnotations()) {
        mergeAnnotations(other.getAnnotations());
      }
      if (!other.explicitlyExportedToCompiler_.isEmpty()) {
        if (explicitlyExportedToCompiler_.isEmpty()) {
          explicitlyExportedToCompiler_ = other.explicitlyExportedToCompiler_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureExplicitlyExportedToCompilerIsMutable();
          explicitlyExportedToCompiler_.addAll(other.explicitlyExportedToCompiler_);
        }
        
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (!hasFileEntry()) {
        
        return false;
      }
      if (!hasFqName()) {
        
        return false;
      }
      if (!hasAnnotations()) {
        
        return false;
      }
      for (int i = 0; i < getDeclarationIdCount(); i++) {
        if (!getDeclarationId(i).isInitialized()) {
          
          return false;
        }
      }
      if (!getFileEntry().isInitialized()) {
        
        return false;
      }
      if (!getFqName().isInitialized()) {
        
        return false;
      }
      if (!getAnnotations().isInitialized()) {
        
        return false;
      }
      for (int i = 0; i < getExplicitlyExportedToCompilerCount(); i++) {
        if (!getExplicitlyExportedToCompiler(i).isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrFile parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrFile) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.UniqId> declarationId_ =
      java.util.Collections.emptyList();
    private void ensureDeclarationIdIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        declarationId_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.UniqId>(declarationId_);
        bitField0_ |= 0x00000001;
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.UniqId> getDeclarationIdList() {
      return java.util.Collections.unmodifiableList(declarationId_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public int getDeclarationIdCount() {
      return declarationId_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.UniqId getDeclarationId(int index) {
      return declarationId_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder setDeclarationId(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.UniqId value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDeclarationIdIsMutable();
      declarationId_.set(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder setDeclarationId(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.Builder builderForValue) {
      ensureDeclarationIdIsMutable();
      declarationId_.set(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder addDeclarationId(org.jetbrains.kotlin.backend.common.serialization.proto.UniqId value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDeclarationIdIsMutable();
      declarationId_.add(value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder addDeclarationId(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.UniqId value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDeclarationIdIsMutable();
      declarationId_.add(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder addDeclarationId(
        org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.Builder builderForValue) {
      ensureDeclarationIdIsMutable();
      declarationId_.add(builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder addDeclarationId(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.UniqId.Builder builderForValue) {
      ensureDeclarationIdIsMutable();
      declarationId_.add(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder addAllDeclarationId(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.UniqId> values) {
      ensureDeclarationIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, declarationId_);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder clearDeclarationId() {
      declarationId_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.UniqId declaration_id = 1;</code>
     */
    public Builder removeDeclarationId(int index) {
      ensureDeclarationIdIsMutable();
      declarationId_.remove(index);

      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry fileEntry_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public boolean hasFileEntry() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry() {
      return fileEntry_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder setFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
      if (value == null) {
        throw new NullPointerException();
      }
      fileEntry_ = value;

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder setFileEntry(
        org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder builderForValue) {
      fileEntry_ = builderForValue.build();

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder mergeFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
      if (((bitField0_ & 0x00000002) == 0x00000002) &&
          fileEntry_ != org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance()) {
        fileEntry_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.newBuilder(fileEntry_).mergeFrom(value).buildPartial();
      } else {
        fileEntry_ = value;
      }

      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder clearFileEntry() {
      fileEntry_ = org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.String fqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String fq_name = 3;</code>
     */
    public boolean hasFqName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String fq_name = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.String getFqName() {
      return fqName_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String fq_name = 3;</code>
     */
    public Builder setFqName(org.jetbrains.kotlin.backend.common.serialization.proto.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      fqName_ = value;

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String fq_name = 3;</code>
     */
    public Builder setFqName(
        org.jetbrains.kotlin.backend.common.serialization.proto.String.Builder builderForValue) {
      fqName_ = builderForValue.build();

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String fq_name = 3;</code>
     */
    public Builder mergeFqName(org.jetbrains.kotlin.backend.common.serialization.proto.String value) {
      if (((bitField0_ & 0x00000004) == 0x00000004) &&
          fqName_ != org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance()) {
        fqName_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.String.newBuilder(fqName_).mergeFrom(value).buildPartial();
      } else {
        fqName_ = value;
      }

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.String fq_name = 3;</code>
     */
    public Builder clearFqName() {
      fqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.String.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations_ = org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 4;</code>
     */
    public boolean hasAnnotations() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 4;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.Annotations getAnnotations() {
      return annotations_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 4;</code>
     */
    public Builder setAnnotations(org.jetbrains.kotlin.backend.common.serialization.proto.Annotations value) {
      if (value == null) {
        throw new NullPointerException();
      }
      annotations_ = value;

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 4;</code>
     */
    public Builder setAnnotations(
        org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.Builder builderForValue) {
      annotations_ = builderForValue.build();

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 4;</code>
     */
    public Builder mergeAnnotations(org.jetbrains.kotlin.backend.common.serialization.proto.Annotations value) {
      if (((bitField0_ & 0x00000008) == 0x00000008) &&
          annotations_ != org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance()) {
        annotations_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.newBuilder(annotations_).mergeFrom(value).buildPartial();
      } else {
        annotations_ = value;
      }

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 4;</code>
     */
    public Builder clearAnnotations() {
      annotations_ = org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol> explicitlyExportedToCompiler_ =
      java.util.Collections.emptyList();
    private void ensureExplicitlyExportedToCompilerIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        explicitlyExportedToCompiler_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol>(explicitlyExportedToCompiler_);
        bitField0_ |= 0x00000010;
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol> getExplicitlyExportedToCompilerList() {
      return java.util.Collections.unmodifiableList(explicitlyExportedToCompiler_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public int getExplicitlyExportedToCompilerCount() {
      return explicitlyExportedToCompiler_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol getExplicitlyExportedToCompiler(int index) {
      return explicitlyExportedToCompiler_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder setExplicitlyExportedToCompiler(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.set(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder setExplicitlyExportedToCompiler(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol.Builder builderForValue) {
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.set(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder addExplicitlyExportedToCompiler(org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.add(value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder addExplicitlyExportedToCompiler(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.add(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder addExplicitlyExportedToCompiler(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol.Builder builderForValue) {
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.add(builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder addExplicitlyExportedToCompiler(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol.Builder builderForValue) {
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.add(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder addAllExplicitlyExportedToCompiler(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol> values) {
      ensureExplicitlyExportedToCompilerIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, explicitlyExportedToCompiler_);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder clearExplicitlyExportedToCompiler() {
      explicitlyExportedToCompiler_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbol explicitly_exported_to_compiler = 5;</code>
     */
    public Builder removeExplicitlyExportedToCompiler(int index) {
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.remove(index);

      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
  }

  static {
    defaultInstance = new IrFile(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
}
