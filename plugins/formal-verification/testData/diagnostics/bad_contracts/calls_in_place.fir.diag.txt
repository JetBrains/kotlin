/calls_in_place.kt:(450,472): info: Generated Viper text for incorrect_at_most_once:
method global$fun_incorrect_at_most_once$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$f: Ref)
  returns (ret$0: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  ensures local$f.special$function_object_call_counter <=
    old(local$f.special$function_object_call_counter) + 1
{
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  anonymous$0 := global$fun_unknown$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$f)
  special$invoke_function_object(local$f)
  anonymous$2 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
  ret$0 := anonymous$2
  goto label$ret$0
  label label$ret$0
}

method global$fun_unknown$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$f: Ref)
  returns (ret: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures true


/calls_in_place.kt:(521,550): warning: Could not verify that function 'f: (Int) -> Int' is called at most once.

/calls_in_place.kt:(661,683): info: Generated Viper text for incorrect_exactly_once:
method global$fun_incorrect_exactly_once$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$f: Ref)
  returns (ret$0: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  ensures local$f.special$function_object_call_counter ==
    old(local$f.special$function_object_call_counter) + 1
{
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  var anonymous$3: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  special$invoke_function_object(local$f)
  anonymous$1 := anonymous$0
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$1), dom$RuntimeType$intType())
  special$invoke_function_object(local$f)
  anonymous$3 := anonymous$2
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$3), dom$RuntimeType$intType())
  ret$0 := anonymous$3
  goto label$ret$0
  label label$ret$0
}

/calls_in_place.kt:(732,761): warning: Could not verify that function 'f: (Int) -> Int' is called exactly once.

/calls_in_place.kt:(866,889): info: Generated Viper text for incorrect_at_least_once:
method global$fun_incorrect_at_least_once$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$f: Ref)
  returns (ret$0: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  ensures local$f.special$function_object_call_counter >
    old(local$f.special$function_object_call_counter)
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  ret$0 := global$fun_unknown$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$f)
  goto label$ret$0
  label label$ret$0
}

method global$fun_unknown$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$f: Ref)
  returns (ret: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
  ensures true


/calls_in_place.kt:(938,968): warning: Could not verify that function 'f: (Int) -> Int' is called at least once.

/calls_in_place.kt:(1150,1183): info: Generated Viper text for incorrect_exactly_once_with_catch:
field pkg$kotlin$class_String$member_length: Ref

field pkg$kotlin$class_Throwable$member_cause: Ref

field pkg$kotlin$class_Throwable$member_message: Ref

method global$fun_incorrect_exactly_once_with_catch$fun_take$fun_take$$return$T_Unit$return$T_Unit(local$f: Ref)
  returns (ret$0: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
  ensures local$f.special$function_object_call_counter ==
    old(local$f.special$function_object_call_counter) + 1
{
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  var anonymous$3: Ref
  var local2$e: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  ret$0 := dom$RuntimeType$unitValue()
  if (dom$RuntimeType$boolFromRef(anonymous$0)) {
    goto label$catch$0
  }
  special$invoke_function_object(local$f)
  anonymous$2 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$unitType())
  if (dom$RuntimeType$boolFromRef(anonymous$3)) {
    goto label$catch$0
  }
  goto label$try_exit$0
  label label$catch$0
  goto label$try_exit$0
  label label$try_exit$0
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


/calls_in_place.kt:(1232,1261): warning: Could not verify that function 'f: () -> Unit' is called exactly once.

/calls_in_place.kt:(1478,1519): info: Generated Viper text for incorrect_exactly_once_with_call_in_catch:
field pkg$kotlin$class_String$member_length: Ref

field pkg$kotlin$class_Throwable$member_cause: Ref

field pkg$kotlin$class_Throwable$member_message: Ref

method global$fun_incorrect_exactly_once_with_call_in_catch$fun_take$fun_take$$return$T_Unit$return$T_Unit(local$f: Ref)
  returns (ret$0: Ref)
  requires acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
  ensures local$f.special$function_object_call_counter ==
    old(local$f.special$function_object_call_counter) + 1
{
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  var anonymous$3: Ref
  var local2$e: Ref
  var anonymous$4: Ref
  var anonymous$5: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$f), dom$RuntimeType$functionType())
  ret$0 := dom$RuntimeType$unitValue()
  if (dom$RuntimeType$boolFromRef(anonymous$0)) {
    goto label$catch$0
  }
  special$invoke_function_object(local$f)
  anonymous$2 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$unitType())
  if (dom$RuntimeType$boolFromRef(anonymous$3)) {
    goto label$catch$0
  }
  goto label$try_exit$0
  label label$catch$0
  special$invoke_function_object(local$f)
  anonymous$5 := anonymous$4
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$5), dom$RuntimeType$unitType())
  goto label$try_exit$0
  label label$try_exit$0
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


/calls_in_place.kt:(1568,1597): warning: Could not verify that function 'f: () -> Unit' is called exactly once.
