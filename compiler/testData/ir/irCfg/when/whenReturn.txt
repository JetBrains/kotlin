// FILE: /whenReturn.kt
// FUN: toString
BB 0
CONTENT
      1 FUN public fun toString(grade: kotlin.String): kotlin.String
      2 GET_VAR 'value-parameter grade: String' type=kotlin.String origin=null
      3 VAR IR_TEMPORARY_VARIABLE val tmp0_subject: kotlin.String
      4 WHEN type=kotlin.Nothing origin=WHEN
      5 GET_VAR 'tmp0_subject: String' type=kotlin.String origin=null
      6 CONST String type=kotlin.String value='A'
OUTGOING -> BB 1, 5
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
BB 1
INCOMING <- BB 0
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 GET_VAR 'tmp0_subject: String' type=kotlin.String origin=null
      2 CONST String type=kotlin.String value='B'
OUTGOING -> BB 2, 6
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
BB 2
INCOMING <- BB 1
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 GET_VAR 'tmp0_subject: String' type=kotlin.String origin=null
      2 CONST String type=kotlin.String value='C'
OUTGOING -> BB 3, 7
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
BB 3
INCOMING <- BB 2
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 GET_VAR 'tmp0_subject: String' type=kotlin.String origin=null
      2 CONST String type=kotlin.String value='D'
OUTGOING -> BB 4, 8
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
BB 4
INCOMING <- BB 3
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
OUTGOING -> BB 9, 10
    CONST Boolean type=kotlin.Boolean value='true'
BB 5
INCOMING <- BB 0
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 CONST String type=kotlin.String value='Excellent'
      2 RETURN type=kotlin.Nothing from='toString(String): String'
OUTGOING -> NONE
    Function exit: FUN public fun toString(grade: kotlin.String): kotlin.String
BB 6
INCOMING <- BB 1
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 CONST String type=kotlin.String value='Good'
      2 RETURN type=kotlin.Nothing from='toString(String): String'
OUTGOING -> NONE
    Function exit: FUN public fun toString(grade: kotlin.String): kotlin.String
BB 7
INCOMING <- BB 2
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 CONST String type=kotlin.String value='Mediocre'
      2 RETURN type=kotlin.Nothing from='toString(String): String'
OUTGOING -> NONE
    Function exit: FUN public fun toString(grade: kotlin.String): kotlin.String
BB 8
INCOMING <- BB 3
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 CONST String type=kotlin.String value='Fair'
      2 RETURN type=kotlin.Nothing from='toString(String): String'
OUTGOING -> NONE
    Function exit: FUN public fun toString(grade: kotlin.String): kotlin.String
BB 9
INCOMING <- BB 4
    CONST Boolean type=kotlin.Boolean value='true'
CONTENT
      1 CONST String type=kotlin.String value='Failure'
      2 RETURN type=kotlin.Nothing from='toString(String): String'
OUTGOING -> NONE
    Function exit: FUN public fun toString(grade: kotlin.String): kotlin.String
BB 10
INCOMING <- BB 4
    CONST Boolean type=kotlin.Boolean value='true'
CONTENT
      1 CONST String type=kotlin.String value='???'
      2 RETURN type=kotlin.Nothing from='toString(String): String'
OUTGOING -> NONE
    Function exit: FUN public fun toString(grade: kotlin.String): kotlin.String

// END FUN: toString

// END FILE: /whenReturn.kt

