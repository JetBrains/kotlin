RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] initWithAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? [ResolvedTo(RAW_FIR)] class MyClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? [ResolvedTo(RAW_FIR)] class MyClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(RAW_FIR)] @Anno[Unresolved](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? [ResolvedTo(RAW_FIR)] class MyClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] @Anno[Unresolved](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? [ResolvedTo(RAW_FIR)] class MyClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(COMPANION_GENERATION)] @Anno[Unresolved](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @Target[Unresolved](LAZY_EXPRESSION) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? [ResolvedTo(SUPER_TYPES)] class MyClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(SUPER_TYPES)] @Anno[Unresolved](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

TYPES:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? [ResolvedTo(TYPES)] class MyClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(TYPES)] @R|low/Anno|[Types](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

STATUS:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(STATUS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(STATUS)] @R|low/Anno|[Types](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(STATUS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(EXPECT_ACTUAL_MATCHING)] @R|low/Anno|[Types](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(STATUS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(CONTRACTS)] @R|low/Anno|[Types](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(STATUS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] @R|low/Anno|[Types](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) @Retention[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=low/Anno.position] position: String): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(STATUS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(CONSTANT_EVALUATION)] @R|low/Anno|[Types](LAZY_EXPRESSION) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) @R|kotlin/annotation/Retention|[Types](LAZY_EXPRESSION) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=low/Anno.position] position: R|kotlin/String|): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val constant: R|kotlin/Int| = Int(0)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final [ResolvedTo(STATUS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(ANNOTATION_ARGUMENTS)] @R|low/Anno|[Types](position = <strcat>(String(init annotation: ), R|low/constant|)) init { LAZY_BLOCK }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun anotherFun(): String { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun funInsideInit(): <implicit> { LAZY_BLOCK }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|) @R|kotlin/annotation/Retention|[Types](LAZY_EXPRESSION) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=low/Anno.position] position: R|kotlin/String|): R|low/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val constant: R|kotlin/Int| = Int(0)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final [ResolvedTo(STATUS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            LAZY_super<R|kotlin/Any|>
        }

        [ResolvedTo(BODY_RESOLVE)] @R|low/Anno|[Types](position = <strcat>(String(init annotation: ), R|low/constant|)) init {
            @R|low/Anno|[Types](position = String(annotation inside)) R|low/funInsideInit|()
        }

    }
    public final [ResolvedTo(CONTRACTS)] fun anotherFun(): R|kotlin/String| {
        ^anotherFun String(str)
    }
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun funInsideInit(): R|kotlin/String| {
        ^funInsideInit R|low/anotherFun|()
    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] initWithAnnotation.kt
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|)) @R|kotlin/annotation/Retention|[Types](value = Q|kotlin/annotation/AnnotationRetention|.R|kotlin/annotation/AnnotationRetention.SOURCE|) public final [ResolvedTo(BODY_RESOLVE)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=low/Anno.position] position: R|kotlin/String|): R|low/Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(BODY_RESOLVE)] [EvaluatedValue=Int(0)] val constant: R|kotlin/Int| = Int(0)
        public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|
    public final [ResolvedTo(BODY_RESOLVE)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] constructor(): R|low/MyClass| {
            super<R|kotlin/Any|>()
        }

        [ResolvedTo(BODY_RESOLVE)] @R|low/Anno|[Types](position = <strcat>(String(init annotation: ), R|low/constant|)) init {
            @R|low/Anno|[Types](position = String(annotation inside)) R|low/funInsideInit|()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun anotherFun(): R|kotlin/String| {
        ^anotherFun String(str)
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun funInsideInit(): R|kotlin/String| {
        ^funInsideInit R|low/anotherFun|()
    }
