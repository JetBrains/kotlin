class A : Java1, Java3 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class B : Java1, Java3 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun bar(): MutableList<Any?>? {
    return mutableListOf<Any?>()
  }

  override fun foo(a: MutableList<Any?>?) {
  }

}

abstract class C : Java1, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class D : Java1, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun bar(): List<Any?> {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override fun foo(a: List<Any?>) {
  }

  override var a: List<Any?>
    override get(): List<Any?> {
      return emptyList<Any?>()
    }
    override set(value: List<Any?>) {
    }

}

abstract class E : Java1, Java2, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class F : Java1, Java2, KotlinInterface {
  override var a: List<Any?>
    field = a
    override get
    override set

  constructor(a: List<Any?>) /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun bar(): MutableList<Any?> {
    return mutableListOf<Any?>(elements = [1])
  }

}

abstract class G : Java1, KotlinInterface, KotlinInterface2 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class H : Java1, KotlinInterface, KotlinInterface2 {
  override var a: List<Any?>
    field = a
    override get
    override set

  constructor(a: List<Any?>) /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun foo(a: List<Any?>) {
  }

}

class I : Java1, Java2, Java3 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class J : Java1, Java2, Java3 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun bar(): MutableList<Any?> {
    return mutableListOf<Any?>(elements = [""])
  }

  override fun foo(a: MutableList<Any?>) {
  }

}

interface KotlinInterface {
  abstract fun bar(): List<Any?>

  abstract fun foo(a: List<Any?>)

  abstract var a: List<Any?>
    abstract get
    abstract set

}

interface KotlinInterface2 {
  abstract fun bar(): List<*>

  abstract fun foo(a: List<*>)

  abstract var a: List<*>
    abstract get
    abstract set

}

fun test(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J) {
  a.foo(a = null)
  a.foo(a = mutableListOf<Nothing?>(elements = [null]))
  val k: List<Any?> = a.bar() /*!! @FlexibleMutability @RawType MutableList<Any?> */
  b.foo(a = mutableListOf<Any?>(elements = [null]))
  b.foo(a = null)
  val k2: List<Any?>? = b.bar()
  c.foo(a = listOf<Nothing?>(element = null))
  c.foo(a = null)
  val k3: List<Any?> = c.bar()
  d.foo(a = listOf<Nothing?>(element = null))
  val k4: List<Any?> = d.bar()
  e.foo(a = listOf<Nothing?>(element = null))
  val k5: List<Any?> = e.bar()
  f.foo(a = listOf<Nothing?>(element = null))
  val k6: List<Any?> = f.bar()
  g.foo(a = listOf<Nothing?>(element = null))
  val k7: List<Any?> = g.bar()
  h.foo(a = listOf<Nothing?>(element = null))
  val k8: List<Any?> = h.bar()
  i.foo(a = listOf<Nothing?>(element = null))
  val k9: List<Any?> = i.bar() /*!! @FlexibleMutability @RawType MutableList<Any?> */
  j.foo(a = mutableListOf<Any?>(elements = [null]))
  val k10: List<Any?> = j.bar()
}
