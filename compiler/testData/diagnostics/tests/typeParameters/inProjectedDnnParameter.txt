package

public final class A</*0*/ T> {
    public constructor A</*0*/ T>()
    public final fun checkJavaIn(/*0*/ element: T, /*1*/ action: JavaAction<in T>): kotlin.Unit
    public final fun checkJavaInv(/*0*/ element: T, /*1*/ action: JavaAction<T>): kotlin.Unit
    public final fun checkKotlinIn(/*0*/ element: T, /*1*/ action: KotlinAction<in T>): kotlin.Unit
    public final fun checkKotlinInv(/*0*/ element: T, /*1*/ action: KotlinAction<T>): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface JavaAction</*0*/ T : kotlin.Any!> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun execute(/*0*/ @org.jetbrains.annotations.NotNull t: T & Any): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface KotlinAction</*0*/ T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun execute(/*0*/ t: T & Any): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
