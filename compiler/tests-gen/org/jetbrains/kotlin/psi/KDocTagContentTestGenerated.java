/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.psi;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestGeneratorForCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/psi/kdoc")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class KDocTagContentTestGenerated extends AbstractKDocTagContentTest {
  private void runTest(String testDataFilePath) {
    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
  }

  public void testAllFilesPresentInKdoc() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/psi/kdoc"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @TestMetadata("AtTags.kt")
  public void testAtTags() {
    runTest("compiler/testData/psi/kdoc/AtTags.kt");
  }

  @TestMetadata("CodeBlocks.kt")
  public void testCodeBlocks() {
    runTest("compiler/testData/psi/kdoc/CodeBlocks.kt");
  }

  @TestMetadata("DocCommentAtBeginningOfFile1.kt")
  public void testDocCommentAtBeginningOfFile1() {
    runTest("compiler/testData/psi/kdoc/DocCommentAtBeginningOfFile1.kt");
  }

  @TestMetadata("DocCommentAtBeginningOfFile2.kt")
  public void testDocCommentAtBeginningOfFile2() {
    runTest("compiler/testData/psi/kdoc/DocCommentAtBeginningOfFile2.kt");
  }

  @TestMetadata("DocCommentAtBeginningOfFile3.kt")
  public void testDocCommentAtBeginningOfFile3() {
    runTest("compiler/testData/psi/kdoc/DocCommentAtBeginningOfFile3.kt");
  }

  @TestMetadata("DocCommentAtBeginningOfFile4.kt")
  public void testDocCommentAtBeginningOfFile4() {
    runTest("compiler/testData/psi/kdoc/DocCommentAtBeginningOfFile4.kt");
  }

  @TestMetadata("EndOnLeadingAsterisks.kt")
  public void testEndOnLeadingAsterisks() {
    runTest("compiler/testData/psi/kdoc/EndOnLeadingAsterisks.kt");
  }

  @TestMetadata("EndRightAfterText.kt")
  public void testEndRightAfterText() {
    runTest("compiler/testData/psi/kdoc/EndRightAfterText.kt");
  }

  @TestMetadata("HttpLink.kt")
  public void testHttpLink() {
    runTest("compiler/testData/psi/kdoc/HttpLink.kt");
  }

  @TestMetadata("IdentifiersWithBackticks.kt")
  public void testIdentifiersWithBackticks() {
    runTest("compiler/testData/psi/kdoc/IdentifiersWithBackticks.kt");
  }

  @TestMetadata("Incomplete.kt")
  public void testIncomplete() {
    runTest("compiler/testData/psi/kdoc/Incomplete.kt");
  }

  @TestMetadata("IncompleteCodeBlock.kt")
  public void testIncompleteCodeBlock() {
    runTest("compiler/testData/psi/kdoc/IncompleteCodeBlock.kt");
  }

  @TestMetadata("IncompleteCodeBlockWithoutCode.kt")
  public void testIncompleteCodeBlockWithoutCode() {
    runTest("compiler/testData/psi/kdoc/IncompleteCodeBlockWithoutCode.kt");
  }

  @TestMetadata("IncompleteIndentedCodeBlock.kt")
  public void testIncompleteIndentedCodeBlock() {
    runTest("compiler/testData/psi/kdoc/IncompleteIndentedCodeBlock.kt");
  }

  @TestMetadata("IncompleteIndentedList.kt")
  public void testIncompleteIndentedList() {
    runTest("compiler/testData/psi/kdoc/IncompleteIndentedList.kt");
  }

  @TestMetadata("Markdown.kt")
  public void testMarkdown() {
    runTest("compiler/testData/psi/kdoc/Markdown.kt");
  }

  @TestMetadata("MarkdownLinkWithError.kt")
  public void testMarkdownLinkWithError() {
    runTest("compiler/testData/psi/kdoc/MarkdownLinkWithError.kt");
  }

  @TestMetadata("MarkdownLinkWithLabel.kt")
  public void testMarkdownLinkWithLabel() {
    runTest("compiler/testData/psi/kdoc/MarkdownLinkWithLabel.kt");
  }

  @TestMetadata("MarkdownQualifiedName.kt")
  public void testMarkdownQualifiedName() {
    runTest("compiler/testData/psi/kdoc/MarkdownQualifiedName.kt");
  }

  @TestMetadata("MultipleAsterisksOnTheSameLine.kt")
  public void testMultipleAsterisksOnTheSameLine() {
    runTest("compiler/testData/psi/kdoc/MultipleAsterisksOnTheSameLine.kt");
  }

  @TestMetadata("NestedLists.kt")
  public void testNestedLists() {
    runTest("compiler/testData/psi/kdoc/NestedLists.kt");
  }

  @TestMetadata("ParamTag.kt")
  public void testParamTag() {
    runTest("compiler/testData/psi/kdoc/ParamTag.kt");
  }

  @TestMetadata("ParamTagAtStart.kt")
  public void testParamTagAtStart() {
    runTest("compiler/testData/psi/kdoc/ParamTagAtStart.kt");
  }

  @TestMetadata("ReturnWithBrackets.kt")
  public void testReturnWithBrackets() {
    runTest("compiler/testData/psi/kdoc/ReturnWithBrackets.kt");
  }

  @TestMetadata("Sections.kt")
  public void testSections() {
    runTest("compiler/testData/psi/kdoc/Sections.kt");
  }

  @TestMetadata("SeeEmpty.kt")
  public void testSeeEmpty() {
    runTest("compiler/testData/psi/kdoc/SeeEmpty.kt");
  }

  @TestMetadata("SeeLink.kt")
  public void testSeeLink() {
    runTest("compiler/testData/psi/kdoc/SeeLink.kt");
  }

  @TestMetadata("Simple.kt")
  public void testSimple() {
    runTest("compiler/testData/psi/kdoc/Simple.kt");
  }

  @TestMetadata("StartCodeBlockAfterTwoOrMoreLineBreaks.kt")
  public void testStartCodeBlockAfterTwoOrMoreLineBreaks() {
    runTest("compiler/testData/psi/kdoc/StartCodeBlockAfterTwoOrMoreLineBreaks.kt");
  }

  @TestMetadata("TextLinkWithNewLine.kt")
  public void testTextLinkWithNewLine() {
    runTest("compiler/testData/psi/kdoc/TextLinkWithNewLine.kt");
  }

  @TestMetadata("TextRightAfterLeadAsterisks.kt")
  public void testTextRightAfterLeadAsterisks() {
    runTest("compiler/testData/psi/kdoc/TextRightAfterLeadAsterisks.kt");
  }

  @TestMetadata("TwoTags.kt")
  public void testTwoTags() {
    runTest("compiler/testData/psi/kdoc/TwoTags.kt");
  }
}
