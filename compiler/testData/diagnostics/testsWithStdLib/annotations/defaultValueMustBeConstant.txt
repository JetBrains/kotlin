package

public const val CONST: kotlin.Int = 1
public val nonConst: kotlin.Int
public val nonConstKClass: kotlin.reflect.KClass<kotlin.String>
public fun foo(): kotlin.Int

public final annotation class InvalidAnn : kotlin.Annotation {
    public constructor InvalidAnn(/*0*/ p1: kotlin.Int = ..., /*1*/ p2: kotlin.Int = ..., /*2*/ p3: kotlin.reflect.KClass<*> = ...)
    public final val p1: kotlin.Int
    public final val p2: kotlin.Int
    public final val p3: kotlin.reflect.KClass<*>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final annotation class ValidAnn : kotlin.Annotation {
    public constructor ValidAnn(/*0*/ p1: kotlin.Int = ..., /*1*/ p2: kotlin.String = ..., /*2*/ p3: kotlin.reflect.KClass<*> = ..., /*3*/ p4: kotlin.IntArray = ..., /*4*/ p5: kotlin.Array<kotlin.String> = ..., /*5*/ p6: kotlin.Array<kotlin.reflect.KClass<*>> = ...)
    public final val p1: kotlin.Int
    public final val p2: kotlin.String
    public final val p3: kotlin.reflect.KClass<*>
    public final val p4: kotlin.IntArray
    public final val p5: kotlin.Array<kotlin.String>
    public final val p6: kotlin.Array<kotlin.reflect.KClass<*>>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
