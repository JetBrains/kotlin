// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile}
 */
public  final class IrWhile extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrWhile, IrWhile.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)
    IrWhileOrBuilder {
  private IrWhile() {
  }
  private int bitField0_;
  public static final int LOOP_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public boolean hasLoop() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.Loop getLoop() {
    return loop_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.Loop.getDefaultInstance() : loop_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setLoop(org.jetbrains.kotlin.backend.common.serialization.proto.Loop value) {
    value.getClass();  // minimal bytecode null check
    loop_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeLoop(org.jetbrains.kotlin.backend.common.serialization.proto.Loop value) {
    value.getClass();  // minimal bytecode null check
    if (loop_ != null &&
        loop_ != org.jetbrains.kotlin.backend.common.serialization.proto.Loop.getDefaultInstance()) {
      loop_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.Loop.newBuilder(loop_).mergeFrom(value).buildPartial();
    } else {
      loop_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
   */
  private void clearLoop() {  loop_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrWhileOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasLoop() {
      return instance.hasLoop();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.Loop getLoop() {
      return instance.getLoop();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public Builder setLoop(org.jetbrains.kotlin.backend.common.serialization.proto.Loop value) {
      copyOnWrite();
      instance.setLoop(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public Builder setLoop(
        org.jetbrains.kotlin.backend.common.serialization.proto.Loop.Builder builderForValue) {
      copyOnWrite();
      instance.setLoop(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public Builder mergeLoop(org.jetbrains.kotlin.backend.common.serialization.proto.Loop value) {
      copyOnWrite();
      instance.mergeLoop(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public Builder clearLoop() {  copyOnWrite();
      instance.clearLoop();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "loop_",
          };
          java.lang.String info =
              "\u0004\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0001\u0001\u1509\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile DEFAULT_INSTANCE;
  static {
    IrWhile defaultInstance = new IrWhile();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrWhile.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrWhile> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrWhile> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
