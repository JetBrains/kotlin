// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.jvm/src/JvmIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.jvm.serialization.proto;

public final class JvmIr {
  private JvmIr() {}
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      JvmIr.class.getName());
  }
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (org.jetbrains.kotlin.protobuf.ExtensionRegistryLite) registry);
  }
  public interface XStatementOrExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     * @return Whether the statement field is set.
     */
    boolean hasStatement();
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     * @return The statement.
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement();
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder getStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression();
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getExpressionOrBuilder();

    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.KindCase getKindCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
   */
  public static final class XStatementOrExpression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
      XStatementOrExpressionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        XStatementOrExpression.class.getName());
    }
    // Use XStatementOrExpression.newBuilder() to construct.
    private XStatementOrExpression(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private XStatementOrExpression() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.class, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder.class);
    }

    private int kindCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object kind_;
    public enum KindCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
            org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
      STATEMENT(1),
      EXPRESSION(2),
      KIND_NOT_SET(0);
      private final int value;
      private KindCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static KindCase valueOf(int value) {
        return forNumber(value);
      }

      public static KindCase forNumber(int value) {
        switch (value) {
          case 1: return STATEMENT;
          case 2: return EXPRESSION;
          case 0: return KIND_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public KindCase
    getKindCase() {
      return KindCase.forNumber(
          kindCase_);
    }

    public static final int STATEMENT_FIELD_NUMBER = 1;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     * @return Whether the statement field is set.
     */
    @java.lang.Override
    public boolean hasStatement() {
      return kindCase_ == 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     * @return The statement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder getStatementOrBuilder() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return kindCase_ == 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getExpressionOrBuilder() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasStatement()) {
        if (!getStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (kindCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_);
      }
      if (kindCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (kindCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_);
      }
      if (kindCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression other = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression) obj;

      if (!getKindCase().equals(other.getKindCase())) return false;
      switch (kindCase_) {
        case 1:
          if (!getStatement()
              .equals(other.getStatement())) return false;
          break;
        case 2:
          if (!getExpression()
              .equals(other.getExpression())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (kindCase_) {
        case 1:
          hash = (37 * hash) + STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getStatement().hashCode();
          break;
        case 2:
          hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
          hash = (53 * hash) + getExpression().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.class, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (statementBuilder_ != null) {
          statementBuilder_.clear();
        }
        if (expressionBuilder_ != null) {
          expressionBuilder_.clear();
        }
        kindCase_ = 0;
        kind_ = null;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression result) {
        result.kindCase_ = kindCase_;
        result.kind_ = this.kind_;
        if (kindCase_ == 1 &&
            statementBuilder_ != null) {
          result.kind_ = statementBuilder_.build();
        }
        if (kindCase_ == 2 &&
            expressionBuilder_ != null) {
          result.kind_ = expressionBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression) {
          return mergeFrom((org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.getDefaultInstance()) return this;
        switch (other.getKindCase()) {
          case STATEMENT: {
            mergeStatement(other.getStatement());
            break;
          }
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case KIND_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasStatement()) {
          if (!getStatement().isInitialized()) {
            return false;
          }
        }
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                kindCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                kindCase_ = 2;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int kindCase_ = 0;
      private java.lang.Object kind_;
      public KindCase
          getKindCase() {
        return KindCase.forNumber(
            kindCase_);
      }

      public Builder clearKind() {
        kindCase_ = 0;
        kind_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder> statementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       * @return Whether the statement field is set.
       */
      @java.lang.Override
      public boolean hasStatement() {
        return kindCase_ == 1;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       * @return The statement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement() {
        if (statementBuilder_ == null) {
          if (kindCase_ == 1) {
            return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
          }
          return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
        } else {
          if (kindCase_ == 1) {
            return statementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder setStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kind_ = value;
          onChanged();
        } else {
          statementBuilder_.setMessage(value);
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder setStatement(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          kind_ = builderForValue.build();
          onChanged();
        } else {
          statementBuilder_.setMessage(builderForValue.build());
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder mergeStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
        if (statementBuilder_ == null) {
          if (kindCase_ == 1 &&
              kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance()) {
            kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_)
                .mergeFrom(value).buildPartial();
          } else {
            kind_ = value;
          }
          onChanged();
        } else {
          if (kindCase_ == 1) {
            statementBuilder_.mergeFrom(value);
          } else {
            statementBuilder_.setMessage(value);
          }
        }
        kindCase_ = 1;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder clearStatement() {
        if (statementBuilder_ == null) {
          if (kindCase_ == 1) {
            kindCase_ = 0;
            kind_ = null;
            onChanged();
          }
        } else {
          if (kindCase_ == 1) {
            kindCase_ = 0;
            kind_ = null;
          }
          statementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder getStatementBuilder() {
        return getStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder getStatementOrBuilder() {
        if ((kindCase_ == 1) && (statementBuilder_ != null)) {
          return statementBuilder_.getMessageOrBuilder();
        } else {
          if (kindCase_ == 1) {
            return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
          }
          return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder> 
          getStatementFieldBuilder() {
        if (statementBuilder_ == null) {
          if (!(kindCase_ == 1)) {
            kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
          }
          statementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrStatementOrBuilder>(
                  (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_,
                  getParentForChildren(),
                  isClean());
          kind_ = null;
        }
        kindCase_ = 1;
        onChanged();
        return statementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       * @return Whether the expression field is set.
       */
      @java.lang.Override
      public boolean hasExpression() {
        return kindCase_ == 2;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       * @return The expression.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
        if (expressionBuilder_ == null) {
          if (kindCase_ == 2) {
            return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
          }
          return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
        } else {
          if (kindCase_ == 2) {
            return expressionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kind_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          kind_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
        if (expressionBuilder_ == null) {
          if (kindCase_ == 2 &&
              kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
            kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_)
                .mergeFrom(value).buildPartial();
          } else {
            kind_ = value;
          }
          onChanged();
        } else {
          if (kindCase_ == 2) {
            expressionBuilder_.mergeFrom(value);
          } else {
            expressionBuilder_.setMessage(value);
          }
        }
        kindCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          if (kindCase_ == 2) {
            kindCase_ = 0;
            kind_ = null;
            onChanged();
          }
        } else {
          if (kindCase_ == 2) {
            kindCase_ = 0;
            kind_ = null;
          }
          expressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder getExpressionBuilder() {
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getExpressionOrBuilder() {
        if ((kindCase_ == 2) && (expressionBuilder_ != null)) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          if (kindCase_ == 2) {
            return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
          }
          return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          if (!(kindCase_ == 2)) {
            kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
          }
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder>(
                  (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_,
                  getParentForChildren(),
                  isClean());
          kind_ = null;
        }
        kindCase_ = 2;
        onChanged();
        return expressionBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
    private static final org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<XStatementOrExpression>() {
      @java.lang.Override
      public XStatementOrExpression parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClassOrFileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> 
        getDeclarationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    int getDeclarationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> 
        getDeclarationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder getDeclarationOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> 
        getTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrType getType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    int getTypeCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder> 
        getTypeOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder getTypeOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> 
        getSignatureList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getSignature(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    int getSignatureCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder> 
        getSignatureOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder getSignatureOrBuilder(
        int index);

    /**
     * <code>repeated string string = 4;</code>
     * @return A list containing the string.
     */
    java.util.List<java.lang.String>
        getStringList();
    /**
     * <code>repeated string string = 4;</code>
     * @return The count of string.
     */
    int getStringCount();
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    java.lang.String getString(int index);
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the string at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> 
        getBodyList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getBody(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    int getBodyCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder> 
        getBodyOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder getBodyOrBuilder(
        int index);

    /**
     * <code>repeated string debug_info = 6;</code>
     * @return A list containing the debugInfo.
     */
    java.util.List<java.lang.String>
        getDebugInfoList();
    /**
     * <code>repeated string debug_info = 6;</code>
     * @return The count of debugInfo.
     */
    int getDebugInfoCount();
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index of the element to return.
     * @return The debugInfo at the given index.
     */
    java.lang.String getDebugInfo(int index);
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the debugInfo at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getDebugInfoBytes(int index);

    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return Whether the fileFacadeFqName field is set.
     */
    boolean hasFileFacadeFqName();
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return The fileFacadeFqName.
     */
    java.lang.String getFileFacadeFqName();
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return The bytes for fileFacadeFqName.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getFileFacadeFqNameBytes();

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> 
        getFileEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    int getFileEntryCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder> 
        getFileEntryOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder getFileEntryOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile}
   */
  public static final class ClassOrFile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
      ClassOrFileOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ClassOrFile.class.getName());
    }
    // Use ClassOrFile.newBuilder() to construct.
    private ClassOrFile(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ClassOrFile() {
      declaration_ = java.util.Collections.emptyList();
      type_ = java.util.Collections.emptyList();
      signature_ = java.util.Collections.emptyList();
      string_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
      body_ = java.util.Collections.emptyList();
      debugInfo_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
      fileFacadeFqName_ = "";
      fileEntry_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.class, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.Builder.class);
    }

    private int bitField0_;
    public static final int DECLARATION_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> declaration_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> getDeclarationList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> 
        getDeclarationOrBuilderList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public int getDeclarationCount() {
      return declaration_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index) {
      return declaration_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder getDeclarationOrBuilder(
        int index) {
      return declaration_.get(index);
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> type_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> getTypeList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder> 
        getTypeOrBuilderList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.Override
    public int getTypeCount() {
      return type_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrType getType(int index) {
      return type_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder getTypeOrBuilder(
        int index) {
      return type_.get(index);
    }

    public static final int SIGNATURE_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> signature_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> getSignatureList() {
      return signature_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder> 
        getSignatureOrBuilderList() {
      return signature_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.Override
    public int getSignatureCount() {
      return signature_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getSignature(int index) {
      return signature_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder getSignatureOrBuilder(
        int index) {
      return signature_.get(index);
    }

    public static final int STRING_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.LazyStringArrayList string_ =
        org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string string = 4;</code>
     * @return A list containing the string.
     */
    public org.jetbrains.kotlin.protobuf.ProtocolStringList
        getStringList() {
      return string_;
    }
    /**
     * <code>repeated string string = 4;</code>
     * @return The count of string.
     */
    public int getStringCount() {
      return string_.size();
    }
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    public java.lang.String getString(int index) {
      return string_.get(index);
    }
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the string at the given index.
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index) {
      return string_.getByteString(index);
    }

    public static final int BODY_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> body_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> getBodyList() {
      return body_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder> 
        getBodyOrBuilderList() {
      return body_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.Override
    public int getBodyCount() {
      return body_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getBody(int index) {
      return body_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder getBodyOrBuilder(
        int index) {
      return body_.get(index);
    }

    public static final int DEBUG_INFO_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.LazyStringArrayList debugInfo_ =
        org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string debug_info = 6;</code>
     * @return A list containing the debugInfo.
     */
    public org.jetbrains.kotlin.protobuf.ProtocolStringList
        getDebugInfoList() {
      return debugInfo_;
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @return The count of debugInfo.
     */
    public int getDebugInfoCount() {
      return debugInfo_.size();
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index of the element to return.
     * @return The debugInfo at the given index.
     */
    public java.lang.String getDebugInfo(int index) {
      return debugInfo_.get(index);
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the debugInfo at the given index.
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getDebugInfoBytes(int index) {
      return debugInfo_.getByteString(index);
    }

    public static final int FILE_FACADE_FQ_NAME_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private volatile java.lang.Object fileFacadeFqName_ = "";
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return Whether the fileFacadeFqName field is set.
     */
    @java.lang.Override
    public boolean hasFileFacadeFqName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return The fileFacadeFqName.
     */
    @java.lang.Override
    public java.lang.String getFileFacadeFqName() {
      java.lang.Object ref = fileFacadeFqName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fileFacadeFqName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return The bytes for fileFacadeFqName.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getFileFacadeFqNameBytes() {
      java.lang.Object ref = fileFacadeFqName_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fileFacadeFqName_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int FILE_ENTRY_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> fileEntry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> getFileEntryList() {
      return fileEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder> 
        getFileEntryOrBuilderList() {
      return fileEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.Override
    public int getFileEntryCount() {
      return fileEntry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry(int index) {
      return fileEntry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder getFileEntryOrBuilder(
        int index) {
      return fileEntry_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFileFacadeFqName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDeclarationCount(); i++) {
        if (!getDeclaration(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTypeCount(); i++) {
        if (!getType(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSignatureCount(); i++) {
        if (!getSignature(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBodyCount(); i++) {
        if (!getBody(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getFileEntryCount(); i++) {
        if (!getFileEntry(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < declaration_.size(); i++) {
        output.writeMessage(1, declaration_.get(i));
      }
      for (int i = 0; i < type_.size(); i++) {
        output.writeMessage(2, type_.get(i));
      }
      for (int i = 0; i < signature_.size(); i++) {
        output.writeMessage(3, signature_.get(i));
      }
      for (int i = 0; i < string_.size(); i++) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 4, string_.getRaw(i));
      }
      for (int i = 0; i < body_.size(); i++) {
        output.writeMessage(5, body_.get(i));
      }
      for (int i = 0; i < debugInfo_.size(); i++) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 6, debugInfo_.getRaw(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 7, fileFacadeFqName_);
      }
      for (int i = 0; i < fileEntry_.size(); i++) {
        output.writeMessage(8, fileEntry_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < declaration_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, declaration_.get(i));
      }
      for (int i = 0; i < type_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, type_.get(i));
      }
      for (int i = 0; i < signature_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, signature_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < string_.size(); i++) {
          dataSize += computeStringSizeNoTag(string_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getStringList().size();
      }
      for (int i = 0; i < body_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, body_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < debugInfo_.size(); i++) {
          dataSize += computeStringSizeNoTag(debugInfo_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDebugInfoList().size();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.GeneratedMessage.computeStringSize(7, fileFacadeFqName_);
      }
      for (int i = 0; i < fileEntry_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, fileEntry_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile other = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile) obj;

      if (!getDeclarationList()
          .equals(other.getDeclarationList())) return false;
      if (!getTypeList()
          .equals(other.getTypeList())) return false;
      if (!getSignatureList()
          .equals(other.getSignatureList())) return false;
      if (!getStringList()
          .equals(other.getStringList())) return false;
      if (!getBodyList()
          .equals(other.getBodyList())) return false;
      if (!getDebugInfoList()
          .equals(other.getDebugInfoList())) return false;
      if (hasFileFacadeFqName() != other.hasFileFacadeFqName()) return false;
      if (hasFileFacadeFqName()) {
        if (!getFileFacadeFqName()
            .equals(other.getFileFacadeFqName())) return false;
      }
      if (!getFileEntryList()
          .equals(other.getFileEntryList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDeclarationCount() > 0) {
        hash = (37 * hash) + DECLARATION_FIELD_NUMBER;
        hash = (53 * hash) + getDeclarationList().hashCode();
      }
      if (getTypeCount() > 0) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getTypeList().hashCode();
      }
      if (getSignatureCount() > 0) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignatureList().hashCode();
      }
      if (getStringCount() > 0) {
        hash = (37 * hash) + STRING_FIELD_NUMBER;
        hash = (53 * hash) + getStringList().hashCode();
      }
      if (getBodyCount() > 0) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBodyList().hashCode();
      }
      if (getDebugInfoCount() > 0) {
        hash = (37 * hash) + DEBUG_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getDebugInfoList().hashCode();
      }
      if (hasFileFacadeFqName()) {
        hash = (37 * hash) + FILE_FACADE_FQ_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getFileFacadeFqName().hashCode();
      }
      if (getFileEntryCount() > 0) {
        hash = (37 * hash) + FILE_ENTRY_FIELD_NUMBER;
        hash = (53 * hash) + getFileEntryList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFileOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.class, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (declarationBuilder_ == null) {
          declaration_ = java.util.Collections.emptyList();
        } else {
          declaration_ = null;
          declarationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (typeBuilder_ == null) {
          type_ = java.util.Collections.emptyList();
        } else {
          type_ = null;
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (signatureBuilder_ == null) {
          signature_ = java.util.Collections.emptyList();
        } else {
          signature_ = null;
          signatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        string_ =
            org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        if (bodyBuilder_ == null) {
          body_ = java.util.Collections.emptyList();
        } else {
          body_ = null;
          bodyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        debugInfo_ =
            org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        fileFacadeFqName_ = "";
        if (fileEntryBuilder_ == null) {
          fileEntry_ = java.util.Collections.emptyList();
        } else {
          fileEntry_ = null;
          fileEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile result) {
        if (declarationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            declaration_ = java.util.Collections.unmodifiableList(declaration_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.declaration_ = declaration_;
        } else {
          result.declaration_ = declarationBuilder_.build();
        }
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            type_ = java.util.Collections.unmodifiableList(type_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        if (signatureBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            signature_ = java.util.Collections.unmodifiableList(signature_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.signature_ = signature_;
        } else {
          result.signature_ = signatureBuilder_.build();
        }
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            body_ = java.util.Collections.unmodifiableList(body_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        if (fileEntryBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            fileEntry_ = java.util.Collections.unmodifiableList(fileEntry_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.fileEntry_ = fileEntry_;
        } else {
          result.fileEntry_ = fileEntryBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          string_.makeImmutable();
          result.string_ = string_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          debugInfo_.makeImmutable();
          result.debugInfo_ = debugInfo_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.fileFacadeFqName_ = fileFacadeFqName_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile) {
          return mergeFrom((org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.getDefaultInstance()) return this;
        if (declarationBuilder_ == null) {
          if (!other.declaration_.isEmpty()) {
            if (declaration_.isEmpty()) {
              declaration_ = other.declaration_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDeclarationIsMutable();
              declaration_.addAll(other.declaration_);
            }
            onChanged();
          }
        } else {
          if (!other.declaration_.isEmpty()) {
            if (declarationBuilder_.isEmpty()) {
              declarationBuilder_.dispose();
              declarationBuilder_ = null;
              declaration_ = other.declaration_;
              bitField0_ = (bitField0_ & ~0x00000001);
              declarationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDeclarationFieldBuilder() : null;
            } else {
              declarationBuilder_.addAllMessages(other.declaration_);
            }
          }
        }
        if (typeBuilder_ == null) {
          if (!other.type_.isEmpty()) {
            if (type_.isEmpty()) {
              type_ = other.type_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTypeIsMutable();
              type_.addAll(other.type_);
            }
            onChanged();
          }
        } else {
          if (!other.type_.isEmpty()) {
            if (typeBuilder_.isEmpty()) {
              typeBuilder_.dispose();
              typeBuilder_ = null;
              type_ = other.type_;
              bitField0_ = (bitField0_ & ~0x00000002);
              typeBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTypeFieldBuilder() : null;
            } else {
              typeBuilder_.addAllMessages(other.type_);
            }
          }
        }
        if (signatureBuilder_ == null) {
          if (!other.signature_.isEmpty()) {
            if (signature_.isEmpty()) {
              signature_ = other.signature_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSignatureIsMutable();
              signature_.addAll(other.signature_);
            }
            onChanged();
          }
        } else {
          if (!other.signature_.isEmpty()) {
            if (signatureBuilder_.isEmpty()) {
              signatureBuilder_.dispose();
              signatureBuilder_ = null;
              signature_ = other.signature_;
              bitField0_ = (bitField0_ & ~0x00000004);
              signatureBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSignatureFieldBuilder() : null;
            } else {
              signatureBuilder_.addAllMessages(other.signature_);
            }
          }
        }
        if (!other.string_.isEmpty()) {
          if (string_.isEmpty()) {
            string_ = other.string_;
            bitField0_ |= 0x00000008;
          } else {
            ensureStringIsMutable();
            string_.addAll(other.string_);
          }
          onChanged();
        }
        if (bodyBuilder_ == null) {
          if (!other.body_.isEmpty()) {
            if (body_.isEmpty()) {
              body_ = other.body_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureBodyIsMutable();
              body_.addAll(other.body_);
            }
            onChanged();
          }
        } else {
          if (!other.body_.isEmpty()) {
            if (bodyBuilder_.isEmpty()) {
              bodyBuilder_.dispose();
              bodyBuilder_ = null;
              body_ = other.body_;
              bitField0_ = (bitField0_ & ~0x00000010);
              bodyBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBodyFieldBuilder() : null;
            } else {
              bodyBuilder_.addAllMessages(other.body_);
            }
          }
        }
        if (!other.debugInfo_.isEmpty()) {
          if (debugInfo_.isEmpty()) {
            debugInfo_ = other.debugInfo_;
            bitField0_ |= 0x00000020;
          } else {
            ensureDebugInfoIsMutable();
            debugInfo_.addAll(other.debugInfo_);
          }
          onChanged();
        }
        if (other.hasFileFacadeFqName()) {
          fileFacadeFqName_ = other.fileFacadeFqName_;
          bitField0_ |= 0x00000040;
          onChanged();
        }
        if (fileEntryBuilder_ == null) {
          if (!other.fileEntry_.isEmpty()) {
            if (fileEntry_.isEmpty()) {
              fileEntry_ = other.fileEntry_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureFileEntryIsMutable();
              fileEntry_.addAll(other.fileEntry_);
            }
            onChanged();
          }
        } else {
          if (!other.fileEntry_.isEmpty()) {
            if (fileEntryBuilder_.isEmpty()) {
              fileEntryBuilder_.dispose();
              fileEntryBuilder_ = null;
              fileEntry_ = other.fileEntry_;
              bitField0_ = (bitField0_ & ~0x00000080);
              fileEntryBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFileEntryFieldBuilder() : null;
            } else {
              fileEntryBuilder_.addAllMessages(other.fileEntry_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasFileFacadeFqName()) {
          return false;
        }
        for (int i = 0; i < getDeclarationCount(); i++) {
          if (!getDeclaration(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTypeCount(); i++) {
          if (!getType(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getSignatureCount(); i++) {
          if (!getSignature(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getBodyCount(); i++) {
          if (!getBody(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getFileEntryCount(); i++) {
          if (!getFileEntry(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration m =
                    input.readMessage(
                        org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.parser(),
                        extensionRegistry);
                if (declarationBuilder_ == null) {
                  ensureDeclarationIsMutable();
                  declaration_.add(m);
                } else {
                  declarationBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                org.jetbrains.kotlin.backend.common.serialization.proto.IrType m =
                    input.readMessage(
                        org.jetbrains.kotlin.backend.common.serialization.proto.IrType.parser(),
                        extensionRegistry);
                if (typeBuilder_ == null) {
                  ensureTypeIsMutable();
                  type_.add(m);
                } else {
                  typeBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature m =
                    input.readMessage(
                        org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.parser(),
                        extensionRegistry);
                if (signatureBuilder_ == null) {
                  ensureSignatureIsMutable();
                  signature_.add(m);
                } else {
                  signatureBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
                ensureStringIsMutable();
                string_.add(bs);
                break;
              } // case 34
              case 42: {
                org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression m =
                    input.readMessage(
                        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.parser(),
                        extensionRegistry);
                if (bodyBuilder_ == null) {
                  ensureBodyIsMutable();
                  body_.add(m);
                } else {
                  bodyBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
                ensureDebugInfoIsMutable();
                debugInfo_.add(bs);
                break;
              } // case 50
              case 58: {
                fileFacadeFqName_ = input.readBytes();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry m =
                    input.readMessage(
                        org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.parser(),
                        extensionRegistry);
                if (fileEntryBuilder_ == null) {
                  ensureFileEntryIsMutable();
                  fileEntry_.add(m);
                } else {
                  fileEntryBuilder_.addMessage(m);
                }
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> declaration_ =
        java.util.Collections.emptyList();
      private void ensureDeclarationIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          declaration_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration>(declaration_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> declarationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> getDeclarationList() {
        if (declarationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(declaration_);
        } else {
          return declarationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public int getDeclarationCount() {
        if (declarationBuilder_ == null) {
          return declaration_.size();
        } else {
          return declarationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index) {
        if (declarationBuilder_ == null) {
          return declaration_.get(index);
        } else {
          return declarationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.set(index, value);
          onChanged();
        } else {
          declarationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.set(index, builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.add(value);
          onChanged();
        } else {
          declarationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.add(index, value);
          onChanged();
        } else {
          declarationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.add(builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.add(index, builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addAllDeclaration(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> values) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, declaration_);
          onChanged();
        } else {
          declarationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder clearDeclaration() {
        if (declarationBuilder_ == null) {
          declaration_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          declarationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder removeDeclaration(int index) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.remove(index);
          onChanged();
        } else {
          declarationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder getDeclarationBuilder(
          int index) {
        return getDeclarationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder getDeclarationOrBuilder(
          int index) {
        if (declarationBuilder_ == null) {
          return declaration_.get(index);  } else {
          return declarationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> 
           getDeclarationOrBuilderList() {
        if (declarationBuilder_ != null) {
          return declarationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(declaration_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder addDeclarationBuilder() {
        return getDeclarationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder addDeclarationBuilder(
          int index) {
        return getDeclarationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder> 
           getDeclarationBuilderList() {
        return getDeclarationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> 
          getDeclarationFieldBuilder() {
        if (declarationBuilder_ == null) {
          declarationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder>(
                  declaration_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          declaration_ = null;
        }
        return declarationBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> type_ =
        java.util.Collections.emptyList();
      private void ensureTypeIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          type_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrType>(type_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IrType, org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder> typeBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> getTypeList() {
        if (typeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(type_);
        } else {
          return typeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public int getTypeCount() {
        if (typeBuilder_ == null) {
          return type_.size();
        } else {
          return typeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrType getType(int index) {
        if (typeBuilder_ == null) {
          return type_.get(index);
        } else {
          return typeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.set(index, value);
          onChanged();
        } else {
          typeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addType(org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.add(value);
          onChanged();
        } else {
          typeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeIsMutable();
          type_.add(index, value);
          onChanged();
        } else {
          typeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addType(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.add(builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder builderForValue) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addAllType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrType> values) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, type_);
          onChanged();
        } else {
          typeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder removeType(int index) {
        if (typeBuilder_ == null) {
          ensureTypeIsMutable();
          type_.remove(index);
          onChanged();
        } else {
          typeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder getTypeBuilder(
          int index) {
        return getTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder getTypeOrBuilder(
          int index) {
        if (typeBuilder_ == null) {
          return type_.get(index);  } else {
          return typeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder> 
           getTypeOrBuilderList() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(type_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder addTypeBuilder() {
        return getTypeFieldBuilder().addBuilder(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrType.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder addTypeBuilder(
          int index) {
        return getTypeFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder> 
           getTypeBuilderList() {
        return getTypeFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IrType, org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.backend.common.serialization.proto.IrType, org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder>(
                  type_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> signature_ =
        java.util.Collections.emptyList();
      private void ensureSignatureIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          signature_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature>(signature_);
          bitField0_ |= 0x00000004;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder> signatureBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> getSignatureList() {
        if (signatureBuilder_ == null) {
          return java.util.Collections.unmodifiableList(signature_);
        } else {
          return signatureBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public int getSignatureCount() {
        if (signatureBuilder_ == null) {
          return signature_.size();
        } else {
          return signatureBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getSignature(int index) {
        if (signatureBuilder_ == null) {
          return signature_.get(index);
        } else {
          return signatureBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder setSignature(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
        if (signatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSignatureIsMutable();
          signature_.set(index, value);
          onChanged();
        } else {
          signatureBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder setSignature(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder builderForValue) {
        if (signatureBuilder_ == null) {
          ensureSignatureIsMutable();
          signature_.set(index, builderForValue.build());
          onChanged();
        } else {
          signatureBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addSignature(org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
        if (signatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSignatureIsMutable();
          signature_.add(value);
          onChanged();
        } else {
          signatureBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addSignature(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
        if (signatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSignatureIsMutable();
          signature_.add(index, value);
          onChanged();
        } else {
          signatureBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addSignature(
          org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder builderForValue) {
        if (signatureBuilder_ == null) {
          ensureSignatureIsMutable();
          signature_.add(builderForValue.build());
          onChanged();
        } else {
          signatureBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addSignature(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder builderForValue) {
        if (signatureBuilder_ == null) {
          ensureSignatureIsMutable();
          signature_.add(index, builderForValue.build());
          onChanged();
        } else {
          signatureBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addAllSignature(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> values) {
        if (signatureBuilder_ == null) {
          ensureSignatureIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, signature_);
          onChanged();
        } else {
          signatureBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder clearSignature() {
        if (signatureBuilder_ == null) {
          signature_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          signatureBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder removeSignature(int index) {
        if (signatureBuilder_ == null) {
          ensureSignatureIsMutable();
          signature_.remove(index);
          onChanged();
        } else {
          signatureBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder getSignatureBuilder(
          int index) {
        return getSignatureFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder getSignatureOrBuilder(
          int index) {
        if (signatureBuilder_ == null) {
          return signature_.get(index);  } else {
          return signatureBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder> 
           getSignatureOrBuilderList() {
        if (signatureBuilder_ != null) {
          return signatureBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(signature_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder addSignatureBuilder() {
        return getSignatureFieldBuilder().addBuilder(
            org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder addSignatureBuilder(
          int index) {
        return getSignatureFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder> 
           getSignatureBuilderList() {
        return getSignatureFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder> 
          getSignatureFieldBuilder() {
        if (signatureBuilder_ == null) {
          signatureBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder>(
                  signature_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          signature_ = null;
        }
        return signatureBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.LazyStringArrayList string_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
      private void ensureStringIsMutable() {
        if (!string_.isModifiable()) {
          string_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(string_);
        }
        bitField0_ |= 0x00000008;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @return A list containing the string.
       */
      public org.jetbrains.kotlin.protobuf.ProtocolStringList
          getStringList() {
        string_.makeImmutable();
        return string_;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @return The count of string.
       */
      public int getStringCount() {
        return string_.size();
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param index The index of the element to return.
       * @return The string at the given index.
       */
      public java.lang.String getString(int index) {
        return string_.get(index);
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the string at the given index.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes(int index) {
        return string_.getByteString(index);
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param index The index to set the value at.
       * @param value The string to set.
       * @return This builder for chaining.
       */
      public Builder setString(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringIsMutable();
        string_.set(index, value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param value The string to add.
       * @return This builder for chaining.
       */
      public Builder addString(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringIsMutable();
        string_.add(value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param values The string to add.
       * @return This builder for chaining.
       */
      public Builder addAllString(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, string_);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearString() {
        string_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param value The bytes of the string to add.
       * @return This builder for chaining.
       */
      public Builder addStringBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringIsMutable();
        string_.add(value);
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> body_ =
        java.util.Collections.emptyList();
      private void ensureBodyIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          body_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression>(body_);
          bitField0_ |= 0x00000010;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder> bodyBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> getBodyList() {
        if (bodyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(body_);
        } else {
          return bodyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public int getBodyCount() {
        if (bodyBuilder_ == null) {
          return body_.size();
        } else {
          return bodyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getBody(int index) {
        if (bodyBuilder_ == null) {
          return body_.get(index);
        } else {
          return bodyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder setBody(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBodyIsMutable();
          body_.set(index, value);
          onChanged();
        } else {
          bodyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder setBody(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          ensureBodyIsMutable();
          body_.set(index, builderForValue.build());
          onChanged();
        } else {
          bodyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addBody(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBodyIsMutable();
          body_.add(value);
          onChanged();
        } else {
          bodyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addBody(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBodyIsMutable();
          body_.add(index, value);
          onChanged();
        } else {
          bodyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addBody(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          ensureBodyIsMutable();
          body_.add(builderForValue.build());
          onChanged();
        } else {
          bodyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addBody(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          ensureBodyIsMutable();
          body_.add(index, builderForValue.build());
          onChanged();
        } else {
          bodyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addAllBody(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> values) {
        if (bodyBuilder_ == null) {
          ensureBodyIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, body_);
          onChanged();
        } else {
          bodyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          bodyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder removeBody(int index) {
        if (bodyBuilder_ == null) {
          ensureBodyIsMutable();
          body_.remove(index);
          onChanged();
        } else {
          bodyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder getBodyBuilder(
          int index) {
        return getBodyFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder getBodyOrBuilder(
          int index) {
        if (bodyBuilder_ == null) {
          return body_.get(index);  } else {
          return bodyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder> 
           getBodyOrBuilderList() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(body_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder addBodyBuilder() {
        return getBodyFieldBuilder().addBuilder(
            org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder addBodyBuilder(
          int index) {
        return getBodyFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder> 
           getBodyBuilderList() {
        return getBodyFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder>(
                  body_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.LazyStringArrayList debugInfo_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
      private void ensureDebugInfoIsMutable() {
        if (!debugInfo_.isModifiable()) {
          debugInfo_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(debugInfo_);
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @return A list containing the debugInfo.
       */
      public org.jetbrains.kotlin.protobuf.ProtocolStringList
          getDebugInfoList() {
        debugInfo_.makeImmutable();
        return debugInfo_;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @return The count of debugInfo.
       */
      public int getDebugInfoCount() {
        return debugInfo_.size();
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param index The index of the element to return.
       * @return The debugInfo at the given index.
       */
      public java.lang.String getDebugInfo(int index) {
        return debugInfo_.get(index);
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param index The index of the value to return.
       * @return The bytes of the debugInfo at the given index.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getDebugInfoBytes(int index) {
        return debugInfo_.getByteString(index);
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param index The index to set the value at.
       * @param value The debugInfo to set.
       * @return This builder for chaining.
       */
      public Builder setDebugInfo(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureDebugInfoIsMutable();
        debugInfo_.set(index, value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param value The debugInfo to add.
       * @return This builder for chaining.
       */
      public Builder addDebugInfo(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureDebugInfoIsMutable();
        debugInfo_.add(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param values The debugInfo to add.
       * @return This builder for chaining.
       */
      public Builder addAllDebugInfo(
          java.lang.Iterable<java.lang.String> values) {
        ensureDebugInfoIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, debugInfo_);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDebugInfo() {
        debugInfo_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param value The bytes of the debugInfo to add.
       * @return This builder for chaining.
       */
      public Builder addDebugInfoBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureDebugInfoIsMutable();
        debugInfo_.add(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      private java.lang.Object fileFacadeFqName_ = "";
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @return Whether the fileFacadeFqName field is set.
       */
      public boolean hasFileFacadeFqName() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @return The fileFacadeFqName.
       */
      public java.lang.String getFileFacadeFqName() {
        java.lang.Object ref = fileFacadeFqName_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fileFacadeFqName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @return The bytes for fileFacadeFqName.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getFileFacadeFqNameBytes() {
        java.lang.Object ref = fileFacadeFqName_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fileFacadeFqName_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @param value The fileFacadeFqName to set.
       * @return This builder for chaining.
       */
      public Builder setFileFacadeFqName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        fileFacadeFqName_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFileFacadeFqName() {
        fileFacadeFqName_ = getDefaultInstance().getFileFacadeFqName();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @param value The bytes for fileFacadeFqName to set.
       * @return This builder for chaining.
       */
      public Builder setFileFacadeFqNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        fileFacadeFqName_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> fileEntry_ =
        java.util.Collections.emptyList();
      private void ensureFileEntryIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          fileEntry_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry>(fileEntry_);
          bitField0_ |= 0x00000080;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder> fileEntryBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> getFileEntryList() {
        if (fileEntryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fileEntry_);
        } else {
          return fileEntryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public int getFileEntryCount() {
        if (fileEntryBuilder_ == null) {
          return fileEntry_.size();
        } else {
          return fileEntryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry(int index) {
        if (fileEntryBuilder_ == null) {
          return fileEntry_.get(index);
        } else {
          return fileEntryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder setFileEntry(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
        if (fileEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileEntryIsMutable();
          fileEntry_.set(index, value);
          onChanged();
        } else {
          fileEntryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder setFileEntry(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder builderForValue) {
        if (fileEntryBuilder_ == null) {
          ensureFileEntryIsMutable();
          fileEntry_.set(index, builderForValue.build());
          onChanged();
        } else {
          fileEntryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
        if (fileEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileEntryIsMutable();
          fileEntry_.add(value);
          onChanged();
        } else {
          fileEntryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addFileEntry(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
        if (fileEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileEntryIsMutable();
          fileEntry_.add(index, value);
          onChanged();
        } else {
          fileEntryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addFileEntry(
          org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder builderForValue) {
        if (fileEntryBuilder_ == null) {
          ensureFileEntryIsMutable();
          fileEntry_.add(builderForValue.build());
          onChanged();
        } else {
          fileEntryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addFileEntry(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder builderForValue) {
        if (fileEntryBuilder_ == null) {
          ensureFileEntryIsMutable();
          fileEntry_.add(index, builderForValue.build());
          onChanged();
        } else {
          fileEntryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addAllFileEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> values) {
        if (fileEntryBuilder_ == null) {
          ensureFileEntryIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, fileEntry_);
          onChanged();
        } else {
          fileEntryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder clearFileEntry() {
        if (fileEntryBuilder_ == null) {
          fileEntry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          fileEntryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder removeFileEntry(int index) {
        if (fileEntryBuilder_ == null) {
          ensureFileEntryIsMutable();
          fileEntry_.remove(index);
          onChanged();
        } else {
          fileEntryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder getFileEntryBuilder(
          int index) {
        return getFileEntryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder getFileEntryOrBuilder(
          int index) {
        if (fileEntryBuilder_ == null) {
          return fileEntry_.get(index);  } else {
          return fileEntryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder> 
           getFileEntryOrBuilderList() {
        if (fileEntryBuilder_ != null) {
          return fileEntryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fileEntry_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder addFileEntryBuilder() {
        return getFileEntryFieldBuilder().addBuilder(
            org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder addFileEntryBuilder(
          int index) {
        return getFileEntryFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder> 
           getFileEntryBuilderList() {
        return getFileEntryFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder> 
          getFileEntryFieldBuilder() {
        if (fileEntryBuilder_ == null) {
          fileEntryBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder>(
                  fileEntry_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          fileEntry_ = null;
        }
        return fileEntryBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
    private static final org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ClassOrFile>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ClassOrFile>() {
      @java.lang.Override
      public ClassOrFile parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ClassOrFile> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ClassOrFile> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n-compiler/ir/serialization.jvm/src/JvmI" +
      "r.proto\0224org.jetbrains.kotlin.backend.jv" +
      "m.serialization.proto\0323compiler/ir/seria" +
      "lization.common/src/KotlinIr.proto\"\330\001\n\026X" +
      "StatementOrExpression\022Y\n\tstatement\030\001 \001(\013" +
      "2D.org.jetbrains.kotlin.backend.common.s" +
      "erialization.proto.IrStatementH\000\022[\n\nexpr" +
      "ession\030\002 \001(\0132E.org.jetbrains.kotlin.back" +
      "end.common.serialization.proto.IrExpress" +
      "ionH\000B\006\n\004kind\"\216\004\n\013ClassOrFile\022[\n\013declara" +
      "tion\030\001 \003(\0132F.org.jetbrains.kotlin.backen" +
      "d.common.serialization.proto.IrDeclarati" +
      "on\022M\n\004type\030\002 \003(\0132?.org.jetbrains.kotlin." +
      "backend.common.serialization.proto.IrTyp" +
      "e\022W\n\tsignature\030\003 \003(\0132D.org.jetbrains.kot" +
      "lin.backend.common.serialization.proto.I" +
      "dSignature\022\016\n\006string\030\004 \003(\t\022Z\n\004body\030\005 \003(\013" +
      "2L.org.jetbrains.kotlin.backend.jvm.seri" +
      "alization.proto.XStatementOrExpression\022\022" +
      "\n\ndebug_info\030\006 \003(\t\022\"\n\023file_facade_fq_nam" +
      "e\030\007 \001(\tB\005\252\001\002\010\003\022V\n\nfile_entry\030\010 \003(\0132B.org" +
      ".jetbrains.kotlin.backend.common.seriali" +
      "zation.proto.FileEntryB\014B\005JvmIr\222\003\002 \003b\010ed" +
      "itionsp\350\007"
    };
    descriptor = org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
          org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.getDescriptor(),
        });
    internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_XStatementOrExpression_descriptor,
        new java.lang.String[] { "Statement", "Expression", "Kind", });
    internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_backend_jvm_serialization_proto_ClassOrFile_descriptor,
        new java.lang.String[] { "Declaration", "Type", "Signature", "String", "Body", "DebugInfo", "FileFacadeFqName", "FileEntry", });
    descriptor.resolveAllFeaturesImmutable();
    org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}