/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.lang.resolve.java;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.lang.resolve.java.AbstractJavaTypeSubstitutorTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/typeSubstitution")
public class JavaTypeSubstitutorTestGenerated extends AbstractJavaTypeSubstitutorTest {
    public void testAllFilesPresentInTypeSubstitution() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/typeSubstitution"), Pattern.compile("^(.+)\\.java$"), true);
    }
    
    @TestMetadata("arrayType.java")
    public void testArrayType() throws Exception {
        doTest("idea/testData/typeSubstitution/arrayType.java");
    }
    
    @TestMetadata("classType.java")
    public void testClassType() throws Exception {
        doTest("idea/testData/typeSubstitution/classType.java");
    }
    
    @TestMetadata("classWithWildcard.java")
    public void testClassWithWildcard() throws Exception {
        doTest("idea/testData/typeSubstitution/classWithWildcard.java");
    }
    
    @TestMetadata("genericArray.java")
    public void testGenericArray() throws Exception {
        doTest("idea/testData/typeSubstitution/genericArray.java");
    }
    
    @TestMetadata("innerParameter.java")
    public void testInnerParameter() throws Exception {
        doTest("idea/testData/typeSubstitution/innerParameter.java");
    }
    
    @TestMetadata("intersectionType.java")
    public void testIntersectionType() throws Exception {
        doTest("idea/testData/typeSubstitution/intersectionType.java");
    }
    
    @TestMetadata("intersectionTypeAsTypeParameter.java")
    public void testIntersectionTypeAsTypeParameter() throws Exception {
        doTest("idea/testData/typeSubstitution/intersectionTypeAsTypeParameter.java");
    }
    
    @TestMetadata("intersectionTypeInEnum.java")
    public void testIntersectionTypeInEnum() throws Exception {
        doTest("idea/testData/typeSubstitution/intersectionTypeInEnum.java");
    }
    
    @TestMetadata("intersectionTypeInInterfaceDeclaration.java")
    public void testIntersectionTypeInInterfaceDeclaration() throws Exception {
        doTest("idea/testData/typeSubstitution/intersectionTypeInInterfaceDeclaration.java");
    }
    
    @TestMetadata("intersectionTypeInTypeVariableClass.java")
    public void testIntersectionTypeInTypeVariableClass() throws Exception {
        doTest("idea/testData/typeSubstitution/intersectionTypeInTypeVariableClass.java");
    }
    
    @TestMetadata("mapEntry.java")
    public void testMapEntry() throws Exception {
        doTest("idea/testData/typeSubstitution/mapEntry.java");
    }
    
    @TestMetadata("primitiveType.java")
    public void testPrimitiveType() throws Exception {
        doTest("idea/testData/typeSubstitution/primitiveType.java");
    }
    
    @TestMetadata("rawArrayType.java")
    public void testRawArrayType() throws Exception {
        doTest("idea/testData/typeSubstitution/rawArrayType.java");
    }
    
    @TestMetadata("rawArrayTypeParameterWithBound.java")
    public void testRawArrayTypeParameterWithBound() throws Exception {
        doTest("idea/testData/typeSubstitution/rawArrayTypeParameterWithBound.java");
    }
    
    @TestMetadata("rawEnum.java")
    public void testRawEnum() throws Exception {
        doTest("idea/testData/typeSubstitution/rawEnum.java");
    }
    
    @TestMetadata("rawExtendsWildcard.java")
    public void testRawExtendsWildcard() throws Exception {
        doTest("idea/testData/typeSubstitution/rawExtendsWildcard.java");
    }
    
    @TestMetadata("rawIntersectionType.java")
    public void testRawIntersectionType() throws Exception {
        doTest("idea/testData/typeSubstitution/rawIntersectionType.java");
    }
    
    @TestMetadata("rawSuperWildcard.java")
    public void testRawSuperWildcard() throws Exception {
        doTest("idea/testData/typeSubstitution/rawSuperWildcard.java");
    }
    
    @TestMetadata("rawType.java")
    public void testRawType() throws Exception {
        doTest("idea/testData/typeSubstitution/rawType.java");
    }
    
    @TestMetadata("rawTypeInDeclaration.java")
    public void testRawTypeInDeclaration() throws Exception {
        doTest("idea/testData/typeSubstitution/rawTypeInDeclaration.java");
    }
    
    @TestMetadata("rawTypeWithBound.java")
    public void testRawTypeWithBound() throws Exception {
        doTest("idea/testData/typeSubstitution/rawTypeWithBound.java");
    }
    
    @TestMetadata("rawTypeWithSelfReferenceBound.java")
    public void testRawTypeWithSelfReferenceBound() throws Exception {
        doTest("idea/testData/typeSubstitution/rawTypeWithSelfReferenceBound.java");
    }
    
    @TestMetadata("rawWildcardInTypeVariableClass.java")
    public void testRawWildcardInTypeVariableClass() throws Exception {
        doTest("idea/testData/typeSubstitution/rawWildcardInTypeVariableClass.java");
    }
    
    @TestMetadata("rawWildcardWithBound.java")
    public void testRawWildcardWithBound() throws Exception {
        doTest("idea/testData/typeSubstitution/rawWildcardWithBound.java");
    }
    
    @TestMetadata("selfReference.java")
    public void testSelfReference() throws Exception {
        doTest("idea/testData/typeSubstitution/selfReference.java");
    }
    
    @TestMetadata("twoParameters.java")
    public void testTwoParameters() throws Exception {
        doTest("idea/testData/typeSubstitution/twoParameters.java");
    }
    
    @TestMetadata("twoParametersInSubClass.java")
    public void testTwoParametersInSubClass() throws Exception {
        doTest("idea/testData/typeSubstitution/twoParametersInSubClass.java");
    }
    
    @TestMetadata("typeVariableClass.java")
    public void testTypeVariableClass() throws Exception {
        doTest("idea/testData/typeSubstitution/typeVariableClass.java");
    }
    
    @TestMetadata("typeVariableRaw.java")
    public void testTypeVariableRaw() throws Exception {
        doTest("idea/testData/typeSubstitution/typeVariableRaw.java");
    }
    
    @TestMetadata("unboundedWildcard.java")
    public void testUnboundedWildcard() throws Exception {
        doTest("idea/testData/typeSubstitution/unboundedWildcard.java");
    }
    
    @TestMetadata("unboundedWildcardToTypeParameter.java")
    public void testUnboundedWildcardToTypeParameter() throws Exception {
        doTest("idea/testData/typeSubstitution/unboundedWildcardToTypeParameter.java");
    }
    
    @TestMetadata("varargArray.java")
    public void testVarargArray() throws Exception {
        doTest("idea/testData/typeSubstitution/varargArray.java");
    }
    
    @TestMetadata("varargArrayTypeParameter.java")
    public void testVarargArrayTypeParameter() throws Exception {
        doTest("idea/testData/typeSubstitution/varargArrayTypeParameter.java");
    }
    
    @TestMetadata("varargClass.java")
    public void testVarargClass() throws Exception {
        doTest("idea/testData/typeSubstitution/varargClass.java");
    }
    
    @TestMetadata("varargClassWithWildcard.java")
    public void testVarargClassWithWildcard() throws Exception {
        doTest("idea/testData/typeSubstitution/varargClassWithWildcard.java");
    }
    
    @TestMetadata("varargRawType.java")
    public void testVarargRawType() throws Exception {
        doTest("idea/testData/typeSubstitution/varargRawType.java");
    }
    
    @TestMetadata("varargRawTypeWithBound.java")
    public void testVarargRawTypeWithBound() throws Exception {
        doTest("idea/testData/typeSubstitution/varargRawTypeWithBound.java");
    }
    
    @TestMetadata("varargToClass.java")
    public void testVarargToClass() throws Exception {
        doTest("idea/testData/typeSubstitution/varargToClass.java");
    }
    
    @TestMetadata("varargToClassWithWildcard.java")
    public void testVarargToClassWithWildcard() throws Exception {
        doTest("idea/testData/typeSubstitution/varargToClassWithWildcard.java");
    }
    
    @TestMetadata("wildcardExtends.java")
    public void testWildcardExtends() throws Exception {
        doTest("idea/testData/typeSubstitution/wildcardExtends.java");
    }
    
    @TestMetadata("wildcardExtendsObject.java")
    public void testWildcardExtendsObject() throws Exception {
        doTest("idea/testData/typeSubstitution/wildcardExtendsObject.java");
    }
    
    @TestMetadata("wildcardExtendsTypeParameter.java")
    public void testWildcardExtendsTypeParameter() throws Exception {
        doTest("idea/testData/typeSubstitution/wildcardExtendsTypeParameter.java");
    }
    
    @TestMetadata("wildcardSuper.java")
    public void testWildcardSuper() throws Exception {
        doTest("idea/testData/typeSubstitution/wildcardSuper.java");
    }
    
    @TestMetadata("wildcardToWildcard.java")
    public void testWildcardToWildcard() throws Exception {
        doTest("idea/testData/typeSubstitution/wildcardToWildcard.java");
    }
    
}
