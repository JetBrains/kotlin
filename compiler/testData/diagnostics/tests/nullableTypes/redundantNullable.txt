package

public fun m(/*0*/ m: IFoo<AA /* = kotlin.String? */>): kotlin.Unit
public fun redundantNullable(/*0*/ i: kotlin.Int?, /*1*/ three: kotlin.Int?, /*2*/ gOut: Generic<kotlin.Int>?, /*3*/ gIn: Generic<kotlin.Int?>): kotlin.Unit

public final class Generic</*0*/ T> {
    public constructor Generic</*0*/ T>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface IFoo</*0*/ T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract fun onProcessed(/*0*/ f: (T?) -> kotlin.Unit): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
private typealias AA = kotlin.String?

