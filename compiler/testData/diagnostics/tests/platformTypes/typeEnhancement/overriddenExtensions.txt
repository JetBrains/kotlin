package

internal open class A {
    public constructor A()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    internal open fun kotlin.String?.bar(/*0*/ y: kotlin.String): kotlin.Int
    internal open fun kotlin.String.foo(/*0*/ y: kotlin.String?): kotlin.Int
}

public/*package*/ open class B : A {
    public/*package*/ constructor B()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    java.lang.Override() public/*package*/ open override /*1*/ fun kotlin.String?.bar(/*0*/ y: kotlin.String): kotlin.Int
    java.lang.Override() public/*package*/ open override /*1*/ fun kotlin.String.foo(/*0*/ y: kotlin.String?): kotlin.Int
}

public/*package*/ open class B1 : A {
    public/*package*/ constructor B1()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    java.lang.Override() public/*package*/ open override /*1*/ fun kotlin.String?.bar(/*0*/ y: kotlin.String): kotlin.Int
    java.lang.Override() public/*package*/ open override /*1*/ fun kotlin.String.foo(/*0*/ y: kotlin.String?): kotlin.Int
}

public/*package*/ open class C : A {
    public/*package*/ constructor C()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    java.lang.Override() public/*package*/ open override /*1*/ fun kotlin.String!.bar(/*0*/ org.jetbrains.annotations.Nullable() y: kotlin.String!): kotlin.Int
    java.lang.Override() public/*package*/ open override /*1*/ fun kotlin.String!.foo(/*0*/ org.jetbrains.annotations.NotNull() y: kotlin.String!): kotlin.Int
}

public/*package*/ open class D : B {
    public/*package*/ constructor D()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    java.lang.Override() public/*package*/ open override /*1*/ fun kotlin.String!.bar(/*0*/ org.jetbrains.annotations.NotNull() y: kotlin.String): kotlin.Int
    java.lang.Override() public/*package*/ open override /*1*/ fun kotlin.String!.foo(/*0*/ org.jetbrains.annotations.Nullable() y: kotlin.String?): kotlin.Int
}

internal final class E : B1 {
    public constructor E()
    internal final fun baz(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    internal open override /*1*/ fun kotlin.String?.bar(/*0*/ y: kotlin.String): kotlin.Int
    internal open override /*1*/ fun kotlin.String.foo(/*0*/ y: kotlin.String?): kotlin.Int
}
