package

package test {
    public val a0: java.lang.Class<test.A.Companion>
    public val a1: java.lang.Class<test.A.Companion>
    public val a2: java.lang.Class<test.A.Companion>
    public val a3: java.lang.Class<test.A>
    public val a4: java.lang.Class<test.A>
    public val a5: java.lang.Class<test.A.Companion>
    public val e0: [ERROR : Type for E.javaClass]
    public val e1: java.lang.Class<test.E>
    public val e2: java.lang.Class<test.E>
    public val int0: java.lang.Class<kotlin.Int.Companion>
    public val int1: java.lang.Class<kotlin.Int>
    public val o0: java.lang.Class<test.O>
    public val o1: java.lang.Class<test.O>
    public val string0: java.lang.Class<kotlin.String.Companion>
    public val string1: java.lang.Class<kotlin.String>

    public final class A {
        public constructor A()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public companion object Companion {
            private constructor Companion()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    public final enum class E : kotlin.Enum<test.E> {
        enum entry ENTRY

        private constructor E()
        public final override /*1*/ /*fake_override*/ val name: kotlin.String
        public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.E): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.E!>!
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.E
        public final /*synthesized*/ fun values(): kotlin.Array<test.E>
    }

    public object O {
        private constructor O()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
