private object DelegatedProvider {
  internal var _a$volatile: Int
    field = 42
    internal get(): Int {
      return <this>.#_a$volatile
    }
    internal set(value: Int) {
      return <this>.#_a$volatile = value
    }

  @Volatile
  private var vInt$volatile: Int = 77
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  var a: Int /* by */
    get(): Int {
      return <this>.#_a$volatile
    }
    set(<set-?>: Int) {
      return <this>.#_a$volatile = <set-?>
    }

  var vInt: Int /* by */
    get(): Int {
      return <this>.#vInt$volatile
    }
    set(<set-?>: Int) {
      return <this>.#vInt$volatile = <set-?>
    }

}

private object Provider {
  private var port$volatile: Int
    field = Default.nextInt(from = 20, until = 90).times(other = 100)
    private get(): Int {
      return <this>.#port$volatile
    }
    private set(value: Int) {
      return <this>.#port$volatile = value
    }

  private var _l$volatile: Long
    field = 2424920024888888848L
    private get(): Long {
      return <this>.#_l$volatile
    }
    private set(value: Long) {
      return <this>.#_l$volatile = value
    }

  var _ref$volatile: Any?
    field = null
    get(): Any? {
      return <this>.#_ref$volatile
    }
    set(value: Any?) {
      return <this>.#_ref$volatile = value
    }

  var _x$volatile: Boolean
    field = false
    get(): Boolean {
      return <this>.#_x$volatile
    }
    set(value: Boolean) {
      return <this>.#_x$volatile = value
    }

  val intArr: AtomicIntArray
    field = AtomicIntArray(size = 10)
    get(): AtomicIntArray {
      return <this>.#intArr
    }

  val longArr: AtomicLongArray
    field = AtomicLongArray(size = 10)
    get(): AtomicLongArray {
      return <this>.#longArr
    }

  val refArr: AtomicArray<T>
    field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 5))
    get(): AtomicArray<T> {
      return <this>.#refArr
    }

  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun getL(): Long {
    return getAndAddField(/* <this> = Provider<this>::_l$volatile, */ delta = 1L /*as Long */).plus(other = 1L)
  }

  fun next(): Int {
    return getAndAddField(/* <this> = Provider<this>::port$volatile, */ delta = 1).plus(other = 1)
  }

}

fun box(): String {
  testFieldInObject()
  testDelegatedPropertiesInObject()
  return "OK"
}

private fun testDelegatedPropertiesInObject() {
  assertEquals<Int>(expected = 42, actual = DelegatedProvider.<get-a>())
  compareAndSetField<Int>(/* <this> = DelegatedProviderDelegatedProvider::_a$volatile, */ expectedValue = 42, newValue = 56) /*~> Unit */
  assertEquals<Int>(expected = 56, actual = DelegatedProvider.<get-a>())
  DelegatedProvider.<set-a>(<set-?> = 77)
  compareAndSetField<Int>(/* <this> = DelegatedProviderDelegatedProvider::_a$volatile, */ expectedValue = 77, newValue = 66) /*~> Unit */
  assertEquals<Int>(expected = 66, actual = atomicGetField<Int>(/* <this> = DelegatedProviderDelegatedProvider::_a$volatile */) as Int)
  assertEquals<Int>(expected = 66, actual = DelegatedProvider.<get-a>())
  assertEquals<Int>(expected = 77, actual = DelegatedProvider.<get-vInt>())
  DelegatedProvider.<set-vInt>(<set-?> = 55)
  assertEquals<Int>(expected = 110, actual = DelegatedProvider.<get-vInt>().times(other = 2))
}

private fun testFieldInObject() {
  val port: Int = Provider.next()
  assertEquals<Int>(expected = port.plus(other = 1), actual = Provider.next())
  assertEquals<Long>(expected = 2424920024888888849L, actual = Provider.getL())
  compareAndSetField<Any?>(/* <this> = ProviderProvider::_ref$volatile, */ expectedValue = null, newValue = "abc") /*~> Unit */
  assertEquals<String?>(expected = "abc", actual = atomicGetField<Any?>(/* <this> = ProviderProvider::_ref$volatile */) as Any?)
  assertFalse(actual = atomicGetField<Boolean>(/* <this> = ProviderProvider::_x$volatile */) as Boolean)
  Provider.<get-intArr>().set(index = 8, newValue = 454)
  assertEquals<Int>(expected = 455, actual = Provider.<get-intArr>().incrementAndGet(index = 8))
  Provider.<get-longArr>().set(index = 8, newValue = 4544096409680468L)
  assertEquals<Long>(expected = 4544096409680470L, actual = Provider.<get-longArr>().addAndGet(index = 8, delta = 2L))
  Provider.<get-refArr>().set(index = 1, newValue = atomicGetField<Any?>(/* <this> = ProviderProvider::_ref$volatile */) as Any?)
  assertEquals<Any?>(expected = "abc", actual = Provider.<get-refArr>().get(index = 1) as Any?)
}
