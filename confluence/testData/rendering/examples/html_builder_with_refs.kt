import <ref="html_ns":>html.*

fun result(args : Array<String>) =
  <ref="html":>html {
    <ref="head":>head {
      <ref="title":>title {<ref="plus":>+"XML encoding with Kotlin"}
    }
    <ref="body":>body {
      <ref="h1":>h1 {<ref="plus":>+"XML encoding with Kotlin"}
      <ref="p":>p {<ref="plus":>+"this format can be used as an alternative markup to XML"}

      // an element with attributes and text content
      <ref="a":>a(href = "http://jetbrains.com/kotlin") {<ref="plus":>+"Kotlin"}

      // mixed content
      <ref="p":>p {
        <ref="plus":>+"This is some"
        <ref="b":>b {<ref="plus":>+"mixed"}
        <ref="plus":>+"text. For more see the"
        <ref="a":>a(href = "http://jetbrains.com/kotlin") {<ref="plus":>+"Kotlin"}
        <ref="plus":>+"project"
      }
      <ref="p":>p {<ref="plus":>+"some text"}

      // content generated by
      <ref="p":>p {
        for (arg in args)
          <ref="plus":>+arg
      }
    }
  }

<label="html_ns":>namespace html {

  <label="Factory":>abstract class Factory<T> {
    fun create() : T
  }

  <label="Element":>abstract class Element

  <label="TextElement":>class TextElement(val text : String) : Element

  <label="Tag":>abstract class Tag(val name : String) : Element {
    <label="children":>val children = ArrayList<Element>()
    <label="attributes":>val attributes = HashMap<String, String>()

    protected fun initTag<T : Element>(init : T.() -> Unit) : T
      where class object T : Factory<T> {
      val tag = T.create()
      tag.init()
      <ref="children":>children.add(tag)
      return tag
    }
  }

  <label="TagWithText":>abstract class TagWithText(name : String) : Tag(name) {
    <label="plus"/>fun String.plus() {
      children.add(TextElement(this))
    }
  }

  <label="HTML":>class HTML() : TagWithText("html") {
    class object : Factory<HTML> {
      override fun create() = HTML()
    }

    <label="head"/>fun head(init : Head.() -> Unit) = initTag(init)

    <label="body"/>fun body(init : Body.() -> Unit) = initTag(init)
  }

  <label="Head":>class Head() : TagWithText("head") {
    class object : Factory<Head> {
      override fun create() = Head()
    }

    <label="title"/>fun title(init : Title.() -> Unit) = initTag(init)
  }

  <label="Title":>class Title() : TagWithText("title")

  <label="BodyTag":>abstract class BodyTag(name : String) : TagWithText(name) {
  }

  <label="Body":>class Body() : BodyTag("body") {
    class object : Factory<Body> {
      override fun create() = Body()
    }

    <label="b"/>fun b(init : B.() -> Unit) = initTag(init)
    <label="p"/>fun p(init : P.() -> Unit) = initTag(init)
    <label="h1"/>fun h1(init : H1.() -> Unit) = initTag(init)
    <label="a"/>fun a(href : String, init : A.() -> Unit) {
      val a = initTag(init)
      a.href = href
    }
  }

  class B() : BodyTag("b")
  class P() : BodyTag("p")
  class H1() : BodyTag("h1")
  class A() : BodyTag("a") {
    var href : String
      get() = <ref="attributes":>attributes["href"]
      set(value) { <ref="attributes":>attributes["href"] = value }
  }

  <label="html"/>fun html(init : HTML.() -> Unit) : HTML {
    val html = HTML()
    html.init()
    return html
  }

}