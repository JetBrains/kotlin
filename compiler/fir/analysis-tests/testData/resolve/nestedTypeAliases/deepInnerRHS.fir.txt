FILE: main.kt
    public final class Outer : R|kotlin/Any| {
        public constructor(): R|Outer| {
            super<R|kotlin/Any|>()
        }

        public final inner class Inner : R|kotlin/Any| {
            public Outer.constructor(): R|Outer.Inner| {
                super<R|kotlin/Any|>()
            }

            public final inner class InnerInner : R|kotlin/Any| {
                public Outer.Inner.constructor(): R|Outer.Inner.InnerInner| {
                    super<R|kotlin/Any|>()
                }

            }

            public final class InnerNested : R|kotlin/Any| {
                public constructor(): R|Outer.Inner.InnerNested| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        public final class Nested : R|kotlin/Any| {
            public constructor(): R|Outer.Nested| {
                super<R|kotlin/Any|>()
            }

            public final inner class NestedInner : R|kotlin/Any| {
                public Outer.Nested.constructor(): R|Outer.Nested.NestedInner| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        public final typealias TAtoInner = R|Outer.Inner|

        public final typealias TAtoInnerInner = R|Outer.Inner.InnerInner|

        public final typealias TAtoNested = R|Outer.Nested|

        public final typealias TAtoNestedInner = R|Outer.Nested.NestedInner|

        public final fun test(): R|kotlin/Unit| {
            this@R|/Outer|.R|/Outer.Inner.Inner|()
            this@R|/Outer|.R|/Outer.Inner.InnerInner.InnerInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>#|()
            R|/Outer.Nested.Nested|()
            this@R|/Outer|.R|/Outer.Nested.NestedInner.NestedInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]>#|()
        }

    }
FILE: import.kt
    public final val nestedTAtoInner: R|{Outer.TAtoInner=} Outer.Inner| = R|/Outer.Outer|().R|/Outer.Inner.Inner|()
        public get(): R|{Outer.TAtoInner=} Outer.Inner|
    public final val nestedTAtoInnerCallable: R|@ExtensionFunctionType kotlin/reflect/KFunction1<Outer, {Outer.TAtoInner=} Outer.Inner>| = Q|Outer|::R|/Outer.Inner.Inner|
        public get(): R|@ExtensionFunctionType kotlin/reflect/KFunction1<Outer, {Outer.TAtoInner=} Outer.Inner>|
    public final val nestedTAtoInnerInnerError: R|{Outer.TAtoInnerInner=} Outer.Inner.InnerInner| = R|/Outer.Outer|().R|/Outer.Inner.InnerInner.InnerInner<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>#|()
        public get(): R|{Outer.TAtoInnerInner=} Outer.Inner.InnerInner|
    public final val nestedTAtoInnerInnerCallableError: <ERROR TYPE REF: None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]> = Q|Outer|::<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>#
        public get(): <ERROR TYPE REF: None of the following candidates is applicable because of receiver type mismatch: [/Outer.Inner.InnerInner.InnerInner]>
    public final val nestedTAtoInnerInner: R|{Outer.TAtoInnerInner=} Outer.Inner.InnerInner| = R|/Outer.Outer|().R|/Outer.Inner.Inner|().R|/Outer.Inner.InnerInner.InnerInner|()
        public get(): R|{Outer.TAtoInnerInner=} Outer.Inner.InnerInner|
    public final val nestedTAtoInnerInnerCallable: R|@ExtensionFunctionType kotlin/reflect/KFunction1<Outer.Inner, {Outer.TAtoInnerInner=} Outer.Inner.InnerInner>| = Q|Outer.Inner|::R|/Outer.Inner.InnerInner.InnerInner|
        public get(): R|@ExtensionFunctionType kotlin/reflect/KFunction1<Outer.Inner, {Outer.TAtoInnerInner=} Outer.Inner.InnerInner>|
    public final val nestedTAtoNested: R|{Outer.TAtoNested=} Outer.Nested| = Q|Outer|.R|/Outer.Nested.Nested|()
        public get(): R|{Outer.TAtoNested=} Outer.Nested|
    public final val nestedTAtoNestedCallable: R|kotlin/reflect/KFunction0<{Outer.TAtoNested=} Outer.Nested>| = Q|Outer|::R|/Outer.Nested.Nested|
        public get(): R|kotlin/reflect/KFunction0<{Outer.TAtoNested=} Outer.Nested>|
    public final val nestedTAtoNestedInner: R|{Outer.TAtoNestedInner=} Outer.Nested.NestedInner| = Q|Outer|.R|/Outer.Nested.Nested|().R|/Outer.Nested.NestedInner.NestedInner|()
        public get(): R|{Outer.TAtoNestedInner=} Outer.Nested.NestedInner|
    public final val nestedTAtoNestedInnerCallable: R|@ExtensionFunctionType kotlin/reflect/KFunction1<Outer.Nested, {Outer.TAtoNestedInner=} Outer.Nested.NestedInner>| = Q|Outer.Nested|::R|/Outer.Nested.NestedInner.NestedInner|
        public get(): R|@ExtensionFunctionType kotlin/reflect/KFunction1<Outer.Nested, {Outer.TAtoNestedInner=} Outer.Nested.NestedInner>|
    public final val nestedTAtoNestedInnerError: <ERROR TYPE REF: Resolution to classifier> = Q|Outer|.<Resolution to classifier>#()
        public get(): <ERROR TYPE REF: Resolution to classifier>
    public final val nestedTAtoNestedInnerCallableError: <ERROR TYPE REF: None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]> = Q|Outer|::<None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]>#
        public get(): <ERROR TYPE REF: None of the following candidates is applicable because of receiver type mismatch: [/Outer.Nested.NestedInner.NestedInner]>
