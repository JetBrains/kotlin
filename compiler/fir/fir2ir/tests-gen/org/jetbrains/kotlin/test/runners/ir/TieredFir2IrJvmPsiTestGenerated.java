/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners.ir;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
public class TieredFir2IrJvmPsiTestGenerated extends AbstractTieredFir2IrJvmPsiTest {
  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests")
  @TestDataPath("$PROJECT_ROOT")
  public class Tests {
    @Test
    @TestMetadata("UnusedVariables.kt")
    public void testUnusedVariables() {
      runTest("compiler/testData/diagnostics/tests/UnusedVariables.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/repeatable")
      @TestDataPath("$PROJECT_ROOT")
      public class Repeatable {
        @Test
        @TestMetadata("nestedClassContainer_1_5.kt")
        public void testNestedClassContainer_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/nestedClassContainer_1_5.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/backingField")
    @TestDataPath("$PROJECT_ROOT")
    public class BackingField {
      @Test
      @TestMetadata("FieldReassignment_before.kt")
      public void testFieldReassignment_before() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldReassignment_before.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy")
    @TestDataPath("$PROJECT_ROOT")
    public class CyclicHierarchy {
      @Test
      @TestMetadata("javaJavaCycle.kt")
      public void testJavaJavaCycle() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/javaJavaCycle.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataClassNonPublicConstructor")
    @TestDataPath("$PROJECT_ROOT")
    public class DataClassNonPublicConstructor {
      @Test
      @TestMetadata("deprecationPhase1_warning.kt")
      public void testDeprecationPhase1_warning() {
        runTest("compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase1_warning.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks")
    @TestDataPath("$PROJECT_ROOT")
    public class DeclarationChecks {
      @Test
      @TestMetadata("nameWithDangerousCharacters.kt")
      public void testNameWithDangerousCharacters() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/nameWithDangerousCharacters.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/extensions")
    @TestDataPath("$PROJECT_ROOT")
    public class Extensions {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/extensions/contextReceivers")
      @TestDataPath("$PROJECT_ROOT")
      public class ContextReceivers {
        @Test
        @TestMetadata("deprecated.kt")
        public void testDeprecated() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/deprecated.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/coercionToUnit")
      @TestDataPath("$PROJECT_ROOT")
      public class CoercionToUnit {
        @Test
        @TestMetadata("coercionToUnitWithNothingType.kt")
        public void testCoercionToUnitWithNothingType() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionToUnitWithNothingType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/j+k")
    @TestDataPath("$PROJECT_ROOT")
    public class J_k {
      @Test
      @TestMetadata("privatePropertyAndSetterMultiModule.kt")
      public void testPrivatePropertyAndSetterMultiModule() {
        runTest("compiler/testData/diagnostics/tests/j+k/privatePropertyAndSetterMultiModule.kt");
      }

      @Test
      @TestMetadata("recursiveRawUpperBound2.kt")
      public void testRecursiveRawUpperBound2() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound2.kt");
      }

      @Test
      @TestMetadata("recursiveRawUpperBound3.kt")
      public void testRecursiveRawUpperBound3() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound3.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multimodule")
    @TestDataPath("$PROJECT_ROOT")
    public class Multimodule {
      @Test
      @TestMetadata("dependsOnModule.kt")
      public void testDependsOnModule() {
        runTest("compiler/testData/diagnostics/tests/multimodule/dependsOnModule.kt");
      }

      @Test
      @TestMetadata("kt14249.kt")
      public void testKt14249() {
        runTest("compiler/testData/diagnostics/tests/multimodule/kt14249.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform")
    @TestDataPath("$PROJECT_ROOT")
    public class Multiplatform {
      @Test
      @TestMetadata("actualTypealiasCycle.kt")
      public void testActualTypealiasCycle() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealiasCycle.kt");
      }

      @Test
      @TestMetadata("ambiguousActualsJavaPrimitiveIntTypeVsIntegerObject.kt")
      public void testAmbiguousActualsJavaPrimitiveIntTypeVsIntegerObject() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/ambiguousActualsJavaPrimitiveIntTypeVsIntegerObject.kt");
      }

      @Test
      @TestMetadata("annotationArgArrayVsVararg.kt")
      public void testAnnotationArgArrayVsVararg() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/annotationArgArrayVsVararg.kt");
      }

      @Test
      @TestMetadata("checkNoActualForExpectInLastModule.kt")
      public void testCheckNoActualForExpectInLastModule() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/checkNoActualForExpectInLastModule.kt");
      }

      @Test
      @TestMetadata("delegationWithIntersectionAndTypeParameters.kt")
      public void testDelegationWithIntersectionAndTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/delegationWithIntersectionAndTypeParameters.kt");
      }

      @Test
      @TestMetadata("delegationWithTypeParametersAndInheritance.kt")
      public void testDelegationWithTypeParametersAndInheritance() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/delegationWithTypeParametersAndInheritance.kt");
      }

      @Test
      @TestMetadata("delegationWithTypeParametersAndJavaActualization.kt")
      public void testDelegationWithTypeParametersAndJavaActualization() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/delegationWithTypeParametersAndJavaActualization.kt");
      }

      @Test
      @TestMetadata("duplicateSupertype.kt")
      public void testDuplicateSupertype() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/duplicateSupertype.kt");
      }

      @Test
      @TestMetadata("expectActualInTheSameModule.kt")
      public void testExpectActualInTheSameModule() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualInTheSameModule.kt");
      }

      @Test
      @TestMetadata("expectActualInTheSameModuleDifferentFiles.kt")
      public void testExpectActualInTheSameModuleDifferentFiles() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualInTheSameModuleDifferentFiles.kt");
      }

      @Test
      @TestMetadata("expectInterfaceApplicability.kt")
      public void testExpectInterfaceApplicability() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectInterfaceApplicability.kt");
      }

      @Test
      @TestMetadata("expectOptInAnnotation.kt")
      public void testExpectOptInAnnotation() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectOptInAnnotation.kt");
      }

      @Test
      @TestMetadata("incompatibles.kt")
      public void testIncompatibles() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/incompatibles.kt");
      }

      @Test
      @TestMetadata("kt54827.kt")
      public void testKt54827() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt54827.kt");
      }

      @Test
      @TestMetadata("missingActual.kt")
      public void testMissingActual() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/missingActual.kt");
      }

      @Test
      @TestMetadata("missingActualOnlySubclassIsNotActualized.kt")
      public void testMissingActualOnlySubclassIsNotActualized() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/missingActualOnlySubclassIsNotActualized.kt");
      }

      @Test
      @TestMetadata("missingActualWithFunctionCallInPlatformModule.kt")
      public void testMissingActualWithFunctionCallInPlatformModule() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/missingActualWithFunctionCallInPlatformModule.kt");
      }

      @Test
      @TestMetadata("nestedClassViaActualTypealiasIncompatibilities.kt")
      public void testNestedClassViaActualTypealiasIncompatibilities() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasIncompatibilities.kt");
      }

      @Test
      @TestMetadata("nestedClassViaActualTypealiasWithTypeParam.kt")
      public void testNestedClassViaActualTypealiasWithTypeParam() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasWithTypeParam.kt");
      }

      @Test
      @TestMetadata("noOverrideClashWithSignatureInMppCommon.kt")
      public void testNoOverrideClashWithSignatureInMppCommon() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/noOverrideClashWithSignatureInMppCommon.kt");
      }

      @Test
      @TestMetadata("optionalExpectationDiagnostics.kt")
      public void testOptionalExpectationDiagnostics() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/optionalExpectationDiagnostics.kt");
      }

      @Test
      @TestMetadata("platformRedeclarationOfExpect.kt")
      public void testPlatformRedeclarationOfExpect() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/platformRedeclarationOfExpect.kt");
      }

      @Test
      @TestMetadata("returnTypeVsGenericsUpperBoundIncompatibility.kt")
      public void testReturnTypeVsGenericsUpperBoundIncompatibility() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/returnTypeVsGenericsUpperBoundIncompatibility.kt");
      }

      @Test
      @TestMetadata("varSetterVisibility.kt")
      public void testVarSetterVisibility() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/varSetterVisibility.kt");
      }

      @Test
      @TestMetadata("widerVisibility_expectIsEffectivelyFinal_oldLanguageVersion.kt")
      public void testWiderVisibility_expectIsEffectivelyFinal_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal_oldLanguageVersion.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect")
      @TestDataPath("$PROJECT_ROOT")
      public class ActualAnnotationsNotMatchExpect {
        @Test
        @TestMetadata("actualInnerClassMissingMember.kt")
        public void testActualInnerClassMissingMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualInnerClassMissingMember.kt");
        }

        @Test
        @TestMetadata("actualizePropertyByJavaField_unsupportedCase.kt")
        public void testActualizePropertyByJavaField_unsupportedCase() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualizePropertyByJavaField_unsupportedCase.kt");
        }

        @Test
        @TestMetadata("classScopeViaTypealiasIncompatible.kt")
        public void testClassScopeViaTypealiasIncompatible() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/classScopeViaTypealiasIncompatible.kt");
        }

        @Test
        @TestMetadata("enumEntries.kt")
        public void testEnumEntries() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/enumEntries.kt");
        }

        @Test
        @TestMetadata("typeParameters.kt")
        public void testTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeParameters.kt");
        }

        @Test
        @TestMetadata("typeUsage.kt")
        public void testTypeUsage() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsage.kt");
        }

        @Test
        @TestMetadata("typeUsageWithUnresolvedReference.kt")
        public void testTypeUsageWithUnresolvedReference() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageWithUnresolvedReference.kt");
        }

        @Test
        @TestMetadata("valueParameters.kt")
        public void testValueParameters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/valueParameters.kt");
        }

        @Test
        @TestMetadata("withOtherIncomatibilities.kt")
        public void testWithOtherIncomatibilities() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/withOtherIncomatibilities.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/complexMatchings")
      @TestDataPath("$PROJECT_ROOT")
      public class ComplexMatchings {
        @Test
        @TestMetadata("expectCtorlessFinalToActualObject.kt")
        public void testExpectCtorlessFinalToActualObject() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/complexMatchings/expectCtorlessFinalToActualObject.kt");
        }

        @Test
        @TestMetadata("expectCtorlessFinalToActualObjectViaTypealias.kt")
        public void testExpectCtorlessFinalToActualObjectViaTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/complexMatchings/expectCtorlessFinalToActualObjectViaTypealias.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments")
      @TestDataPath("$PROJECT_ROOT")
      public class DefaultArguments {
        @Test
        @TestMetadata("annotations.kt")
        public void testAnnotations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotations.kt");
        }

        @Test
        @TestMetadata("annotationsViaActualTypeAlias.kt")
        public void testAnnotationsViaActualTypeAlias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias.kt");
        }

        @Test
        @TestMetadata("annotationsViaActualTypeAliasExpectEnumArg.kt")
        public void testAnnotationsViaActualTypeAliasExpectEnumArg() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAliasExpectEnumArg.kt");
        }

        @Test
        @TestMetadata("methodDefaultArgsViaActualTypealias.kt")
        public void testMethodDefaultArgsViaActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualTypealias.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride")
        @TestDataPath("$PROJECT_ROOT")
        public class MethodDefaultArgsViaActualFakeOverride {
          @Test
          @TestMetadata("delegation.kt")
          public void testDelegation() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/delegation.kt");
          }

          @Test
          @TestMetadata("delegation2.kt")
          public void testDelegation2() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/delegation2.kt");
          }

          @Test
          @TestMetadata("intersectionOverride.kt")
          public void testIntersectionOverride() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/intersectionOverride.kt");
          }

          @Test
          @TestMetadata("nestedClass.kt")
          public void testNestedClass() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/nestedClass.kt");
          }

          @Test
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/simple.kt");
          }

          @Test
          @TestMetadata("simpleIncompatible.kt")
          public void testSimpleIncompatible() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/simpleIncompatible.kt");
          }

          @Test
          @TestMetadata("substitutionOverride.kt")
          public void testSubstitutionOverride() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/substitutionOverride.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization")
      @TestDataPath("$PROJECT_ROOT")
      public class DirectJavaActualization {
        @Test
        @TestMetadata("directJavaActualization_actualClassWithoutExpect_sharedActual.kt")
        public void testDirectJavaActualization_actualClassWithoutExpect_sharedActual() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_actualClassWithoutExpect_sharedActual.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_actualMemberWithoutExpect_sharedActual.kt")
        public void testDirectJavaActualization_actualMemberWithoutExpect_sharedActual() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_actualMemberWithoutExpect_sharedActual.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_actualWithoutExpect.kt")
        public void testDirectJavaActualization_actualWithoutExpect() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_actualWithoutExpect.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_annotationPropertyMissingKotlinActualAnnotation.kt")
        public void testDirectJavaActualization_annotationPropertyMissingKotlinActualAnnotation() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_annotationPropertyMissingKotlinActualAnnotation.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_annotationPropertyTypeMismatch.kt")
        public void testDirectJavaActualization_annotationPropertyTypeMismatch() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_annotationPropertyTypeMismatch.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_classifierIncompatibilities.kt")
        public void testDirectJavaActualization_classifierIncompatibilities() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_classifierIncompatibilities.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_companionObject.kt")
        public void testDirectJavaActualization_companionObject() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_companionObject.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_defaultParamsInActualFakeOverride.kt")
        public void testDirectJavaActualization_defaultParamsInActualFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_defaultParamsInActualFakeOverride.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_defaultParamsInActualFakeOverrideAddedDuringActualization.kt")
        public void testDirectJavaActualization_defaultParamsInActualFakeOverrideAddedDuringActualization() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_defaultParamsInActualFakeOverrideAddedDuringActualization.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_defaultParamsInExpect.kt")
        public void testDirectJavaActualization_defaultParamsInExpect() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_defaultParamsInExpect.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_defaultParamsInExpectFakeOverride.kt")
        public void testDirectJavaActualization_defaultParamsInExpectFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_defaultParamsInExpectFakeOverride.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_enumStatics.kt")
        public void testDirectJavaActualization_enumStatics() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_enumStatics.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_excessiveKotlinActualAnnotationOnJavaStatic.kt")
        public void testDirectJavaActualization_excessiveKotlinActualAnnotationOnJavaStatic() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_excessiveKotlinActualAnnotationOnJavaStatic.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_funInterface_fakeOverrideInJava.kt")
        public void testDirectJavaActualization_funInterface_fakeOverrideInJava() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_funInterface_fakeOverrideInJava.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_functionModifiers.kt")
        public void testDirectJavaActualization_functionModifiers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_functionModifiers.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_javaInDifferentModule.kt")
        public void testDirectJavaActualization_javaInDifferentModule() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_javaInDifferentModule.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_javaStatics.kt")
        public void testDirectJavaActualization_javaStatics() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_javaStatics.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_missingAnnotationOnJava.kt")
        public void testDirectJavaActualization_missingAnnotationOnJava() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_missingAnnotationOnJava.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_overloadedMethods.kt")
        public void testDirectJavaActualization_overloadedMethods() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_overloadedMethods.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_propertyInActual.kt")
        public void testDirectJavaActualization_propertyInActual() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_propertyInActual.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_requiresOptIn.kt")
        public void testDirectJavaActualization_requiresOptIn() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_requiresOptIn.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_visibilityModifiers.kt")
        public void testDirectJavaActualization_visibilityModifiers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_visibilityModifiers.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_withTypeParameter.kt")
        public void testDirectJavaActualization_withTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_withTypeParameter.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/enum")
      @TestDataPath("$PROJECT_ROOT")
      public class Enum {
        @Test
        @TestMetadata("constructorInHeaderEnum.kt")
        public void testConstructorInHeaderEnum() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/constructorInHeaderEnum.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/generic")
      @TestDataPath("$PROJECT_ROOT")
      public class Generic {
        @Test
        @TestMetadata("typeParameterBoundsDifferentOrderActualMissing.kt")
        public void testTypeParameterBoundsDifferentOrderActualMissing() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/generic/typeParameterBoundsDifferentOrderActualMissing.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/headerClass")
      @TestDataPath("$PROJECT_ROOT")
      public class HeaderClass {
        @Test
        @TestMetadata("actualClassWithDefaultValuesInAnnotationViaTypealias.kt")
        public void testActualClassWithDefaultValuesInAnnotationViaTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDefaultValuesInAnnotationViaTypealias.kt");
        }

        @Test
        @TestMetadata("actualClassWithDifferentConstructors.kt")
        public void testActualClassWithDifferentConstructors() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDifferentConstructors.kt");
        }

        @Test
        @TestMetadata("expectClassWithExplicitAbstractMember.kt")
        public void testExpectClassWithExplicitAbstractMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithExplicitAbstractMember.kt");
        }

        @Test
        @TestMetadata("expectDeclarationWithStrongIncompatibilities.kt")
        public void testExpectDeclarationWithStrongIncompatibilities() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithStrongIncompatibilities.kt");
        }

        @Test
        @TestMetadata("expectDeclarationWithWeakIncompatibilities.kt")
        public void testExpectDeclarationWithWeakIncompatibilities() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithWeakIncompatibilities.kt");
        }

        @Test
        @TestMetadata("expectFunInterface.kt")
        public void testExpectFunInterface() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFunInterface.kt");
        }

        @Test
        @TestMetadata("explicitConstructorDelegation.kt")
        public void testExplicitConstructorDelegation() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/explicitConstructorDelegation.kt");
        }

        @Test
        @TestMetadata("extendExpectedClassWithAbstractMember.kt")
        public void testExtendExpectedClassWithAbstractMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithAbstractMember.kt");
        }

        @Test
        @TestMetadata("genericClassImplTypeAlias.kt")
        public void testGenericClassImplTypeAlias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/genericClassImplTypeAlias.kt");
        }

        @Test
        @TestMetadata("headerClassWithFunctionBody.kt")
        public void testHeaderClassWithFunctionBody() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassWithFunctionBody.kt");
        }

        @Test
        @TestMetadata("inheritanceByDelegationInExpectClass.kt")
        public void testInheritanceByDelegationInExpectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/inheritanceByDelegationInExpectClass.kt");
        }

        @Test
        @TestMetadata("memberPropertyKinds.kt")
        public void testMemberPropertyKinds() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/memberPropertyKinds.kt");
        }

        @Test
        @TestMetadata("morePermissiveVisibilityOnActual.kt")
        public void testMorePermissiveVisibilityOnActual() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActual.kt");
        }

        @Test
        @TestMetadata("morePermissiveVisibilityOnActualViaTypeAlias_openMember.kt")
        public void testMorePermissiveVisibilityOnActualViaTypeAlias_openMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActualViaTypeAlias_openMember.kt");
        }

        @Test
        @TestMetadata("nestedClassesWithErrors.kt")
        public void testNestedClassesWithErrors() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClassesWithErrors.kt");
        }

        @Test
        @TestMetadata("noImplKeywordOnMember.kt")
        public void testNoImplKeywordOnMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/noImplKeywordOnMember.kt");
        }

        @Test
        @TestMetadata("smartCastOnExpectClass.kt")
        public void testSmartCastOnExpectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/smartCastOnExpectClass.kt");
        }

        @Test
        @TestMetadata("superClass.kt")
        public void testSuperClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/superClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp")
      @TestDataPath("$PROJECT_ROOT")
      public class Hmpp {
        @Test
        @TestMetadata("ambiguousActuals.kt")
        public void testAmbiguousActuals() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/ambiguousActuals.kt");
        }

        @Test
        @TestMetadata("hmppModalityClash.kt")
        public void testHmppModalityClash() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppModalityClash.kt");
        }

        @Test
        @TestMetadata("kt57320.kt")
        public void testKt57320() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/kt57320.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class MultiplatformCompositeAnalysis {
          @Test
          @TestMetadata("expectAndActualInTheSameModule.kt")
          public void testExpectAndActualInTheSameModule() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/expectAndActualInTheSameModule.kt");
          }

          @Test
          @TestMetadata("expectAndActualInTheSameModuleIncompatibilities.kt")
          public void testExpectAndActualInTheSameModuleIncompatibilities() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/expectAndActualInTheSameModuleIncompatibilities.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/java")
      @TestDataPath("$PROJECT_ROOT")
      public class Java {
        @Test
        @TestMetadata("actualJavaSealedClass.kt")
        public void testActualJavaSealedClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/actualJavaSealedClass.kt");
        }

        @Test
        @TestMetadata("implicitJavaActualizationAllowed.kt")
        public void testImplicitJavaActualizationAllowed() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualizationAllowed.kt");
        }

        @Test
        @TestMetadata("implicitJavaActualizationDisallowed.kt")
        public void testImplicitJavaActualizationDisallowed() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualizationDisallowed.kt");
        }

        @Test
        @TestMetadata("implicitJavaActualization_multipleActuals.kt")
        public void testImplicitJavaActualization_multipleActuals() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualization_multipleActuals.kt");
        }

        @Test
        @TestMetadata("implicitJavaActualization_oldLanguageVersion.kt")
        public void testImplicitJavaActualization_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualization_oldLanguageVersion.kt");
        }

        @Test
        @TestMetadata("varPropertyAgainstJavaField.kt")
        public void testVarPropertyAgainstJavaField() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/varPropertyAgainstJavaField.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/scopes")
      @TestDataPath("$PROJECT_ROOT")
      public class Scopes {
        @Test
        @TestMetadata("expectFunInterface.kt")
        public void testExpectFunInterface() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/expectFunInterface.kt");
        }

        @Test
        @TestMetadata("expectFunInterfaceIsHeirOfExpect.kt")
        public void testExpectFunInterfaceIsHeirOfExpect() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/expectFunInterfaceIsHeirOfExpect.kt");
        }

        @Test
        @TestMetadata("methodsConflictingOverloads.kt")
        public void testMethodsConflictingOverloads() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/methodsConflictingOverloads.kt");
        }

        @Test
        @TestMetadata("nestedClassesRedeclaration.kt")
        public void testNestedClassesRedeclaration() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/nestedClassesRedeclaration.kt");
        }

        @Test
        @TestMetadata("propertyRedeclaration.kt")
        public void testPropertyRedeclaration() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/propertyRedeclaration.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelFun")
      @TestDataPath("$PROJECT_ROOT")
      public class TopLevelFun {
        @Test
        @TestMetadata("conflictingHeaderDeclarations.kt")
        public void testConflictingHeaderDeclarations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingHeaderDeclarations.kt");
        }

        @Test
        @TestMetadata("conflictingImplDeclarations.kt")
        public void testConflictingImplDeclarations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingImplDeclarations.kt");
        }

        @Test
        @TestMetadata("expectActualExtension.kt")
        public void testExpectActualExtension() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/expectActualExtension.kt");
        }

        @Test
        @TestMetadata("headerAndImplInDIfferentPackages.kt")
        public void testHeaderAndImplInDIfferentPackages() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerAndImplInDIfferentPackages.kt");
        }

        @Test
        @TestMetadata("headerDeclarationWithBody.kt")
        public void testHeaderDeclarationWithBody() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerDeclarationWithBody.kt");
        }

        @Test
        @TestMetadata("headerWithoutImpl.kt")
        public void testHeaderWithoutImpl() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerWithoutImpl.kt");
        }

        @Test
        @TestMetadata("inlineFun.kt")
        public void testInlineFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/inlineFun.kt");
        }

        @Test
        @TestMetadata("valueParameterModifiers.kt")
        public void testValueParameterModifiers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/valueParameterModifiers.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty")
      @TestDataPath("$PROJECT_ROOT")
      public class TopLevelProperty {
        @Test
        @TestMetadata("differentKindsOfProperties.kt")
        public void testDifferentKindsOfProperties() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/differentKindsOfProperties.kt");
        }

        @Test
        @TestMetadata("expectActualExtensionProperty.kt")
        public void testExpectActualExtensionProperty() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/expectActualExtensionProperty.kt");
        }

        @Test
        @TestMetadata("redeclarationBasicCases.kt")
        public void testRedeclarationBasicCases() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/redeclarationBasicCases.kt");
        }

        @Test
        @TestMetadata("redeclarationBasicCasesHMPP.kt")
        public void testRedeclarationBasicCasesHMPP() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/redeclarationBasicCasesHMPP.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/nullableTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class NullableTypes {
      @Test
      @TestMetadata("nullAssertOnTypeWithNullableUpperBound.kt")
      public void testNullAssertOnTypeWithNullableUpperBound() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/nullAssertOnTypeWithNullableUpperBound.kt");
      }

      @Test
      @TestMetadata("safeCallOnTypeWithNullableUpperBound.kt")
      public void testSafeCallOnTypeWithNullableUpperBound() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/safeCallOnTypeWithNullableUpperBound.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/overload")
    @TestDataPath("$PROJECT_ROOT")
    public class Overload {
      @Test
      @TestMetadata("kt22004.kt")
      public void testKt22004() {
        runTest("compiler/testData/diagnostics/tests/overload/kt22004.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden")
      @TestDataPath("$PROJECT_ROOT")
      public class NoConflictingOverloadsWithDeprecatedHidden {
        @Test
        @TestMetadata("ConflictingOverloadsIdenticalValsInClass.kt")
        public void testConflictingOverloadsIdenticalValsInClass() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConflictingOverloadsIdenticalValsInClass.kt");
        }

        @Test
        @TestMetadata("ConstructorsInMemberScope.kt")
        public void testConstructorsInMemberScope() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConstructorsInMemberScope.kt");
        }

        @Test
        @TestMetadata("ConstructorsInPackage.kt")
        public void testConstructorsInPackage() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConstructorsInPackage.kt");
        }

        @Test
        @TestMetadata("ConstructorsOnTopLevel.kt")
        public void testConstructorsOnTopLevel() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConstructorsOnTopLevel.kt");
        }

        @Test
        @TestMetadata("FunctionsInMemberScope.kt")
        public void testFunctionsInMemberScope() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsInMemberScope.kt");
        }

        @Test
        @TestMetadata("FunctionsInPackage.kt")
        public void testFunctionsInPackage() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsInPackage.kt");
        }

        @Test
        @TestMetadata("FunctionsOnTopLevel.kt")
        public void testFunctionsOnTopLevel() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsOnTopLevel.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/override")
    @TestDataPath("$PROJECT_ROOT")
    public class Override {
      @Test
      @TestMetadata("NoInapplicableOperatorModifierOnAnyEquals.kt")
      public void testNoInapplicableOperatorModifierOnAnyEquals() {
        runTest("compiler/testData/diagnostics/tests/override/NoInapplicableOperatorModifierOnAnyEquals.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/derivedClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class DerivedClasses {
        @Test
        @TestMetadata("StaticFieldFromJava.kt")
        public void testStaticFieldFromJava() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/StaticFieldFromJava.kt");
        }

        @Test
        @TestMetadata("StaticMethodFromJava.kt")
        public void testStaticMethodFromJava() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/StaticMethodFromJava.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/parameterNames")
      @TestDataPath("$PROJECT_ROOT")
      public class ParameterNames {
        @Test
        @TestMetadata("noWarningOnJavaKotlinInheritance.kt")
        public void testNoWarningOnJavaKotlinInheritance() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/noWarningOnJavaKotlinInheritance.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/script")
    @TestDataPath("$PROJECT_ROOT")
    public class Script {
      @Test
      @TestMetadata("implicitResolveWithJump.kts")
      public void testImplicitResolveWithJump() {
        runTest("compiler/testData/diagnostics/tests/script/implicitResolveWithJump.kts");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/smartCasts")
    @TestDataPath("$PROJECT_ROOT")
    public class SmartCasts {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/loops")
      @TestDataPath("$PROJECT_ROOT")
      public class Loops {
        @Test
        @TestMetadata("elvisInsideDoWhile.kt")
        public void testElvisInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/elvisInsideDoWhile.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When {
      @Test
      @TestMetadata("nullableSubjectWithIsCheck.kt")
      public void testNullableSubjectWithIsCheck() {
        runTest("compiler/testData/diagnostics/tests/when/nullableSubjectWithIsCheck.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/testsWithStdLib")
  @TestDataPath("$PROJECT_ROOT")
  public class TestsWithStdLib {
    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tieredFailures")
    @TestDataPath("$PROJECT_ROOT")
    public class TieredFailures {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tieredFailures/fail")
      @TestDataPath("$PROJECT_ROOT")
      public class Fail {
        @Test
        @TestMetadata("isBackendButFir2IrRunner.kt")
        public void testIsBackendButFir2IrRunner() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/tieredFailures/fail/isBackendButFir2IrRunner.kt");
        }

        @Test
        @TestMetadata("isFir2IrButFir2IrPasses.kt")
        public void testIsFir2IrButFir2IrPasses() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/tieredFailures/fail/isFir2IrButFir2IrPasses.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tieredFailures/good")
      @TestDataPath("$PROJECT_ROOT")
      public class Good {
        @Test
        @TestMetadata("isFir2IrButBackendFails.kt")
        public void testIsFir2IrButBackendFails() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/tieredFailures/good/isFir2IrButBackendFails.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/fir/analysis-tests/testData/resolve")
  @TestDataPath("$PROJECT_ROOT")
  public class Resolve {
    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/scopes")
    @TestDataPath("$PROJECT_ROOT")
    public class Scopes {
      @Test
      @TestMetadata("kotlinAccessorsLikeFunctionsThrowJavaClass.kt")
      public void testKotlinAccessorsLikeFunctionsThrowJavaClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/kotlinAccessorsLikeFunctionsThrowJavaClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/scripts")
    @TestDataPath("$PROJECT_ROOT")
    public class Scripts {
      @Test
      @TestMetadata("scriptDeclsShouldBeVisibleFromOtherSources.kts")
      public void testScriptDeclsShouldBeVisibleFromOtherSources() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scripts/scriptDeclsShouldBeVisibleFromOtherSources.kts");
      }
    }
  }
}
