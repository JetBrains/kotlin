FILE: functionVariableWithUpperBoundDict.kt
    public abstract interface A : R|kotlin/Any| {
    }
    public open class B : R|A| {
        public constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        public final companion object Companion : R|kotlin/Any| {
            private constructor(): R|B.Companion| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public final fun <K, V> R|B.Companion|.buildDict(size: R|kotlin/Int|, init: R|kotlin/collections/DictCollectionLiteralBuilder<B, K, V>.() -> kotlin/Unit| = fun R|kotlin/collections/DictCollectionLiteralBuilder<B, K, V>|.<anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
        ^ Unit
    }
    ): R|B| {
        R|kotlin/TODO|()
    }
    public open class C : R|A| {
        public constructor(): R|C| {
            super<R|kotlin/Any|>()
        }

        public final companion object Companion : R|kotlin/Any| {
            private constructor(): R|C.Companion| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public final fun <K, V> R|C.Companion|.buildDict(size: R|kotlin/Int|, init: R|kotlin/collections/DictCollectionLiteralBuilder<C, K, V>.() -> kotlin/Unit| = fun R|kotlin/collections/DictCollectionLiteralBuilder<C, K, V>|.<anonymous>(): R|kotlin/Unit| <inline=Unknown>  {
        ^ Unit
    }
    ): R|C| {
        R|kotlin/TODO|()
    }
    public final fun <T : R|C|> fVariableWithUpperBound(a: R|T|): R|kotlin/Unit| {
    }
    public final fun main(): R|kotlin/Unit| {
        R|/fVariableWithUpperBound|<R|C|>(Q|C|.R|/buildDict|<R|kotlin/String|, R|kotlin/Int|>(Int(3), <L> = buildDict@fun R|kotlin/collections/DictCollectionLiteralBuilder<C, kotlin/String, kotlin/Int>|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|SubstitutionOverride<kotlin/collections/DictCollectionLiteralBuilder.add: R|kotlin/Unit|>|(String(1), Int(1))
            this@R|special/anonymous|.R|SubstitutionOverride<kotlin/collections/DictCollectionLiteralBuilder.add: R|kotlin/Unit|>|(String(2), Int(2))
            this@R|special/anonymous|.R|SubstitutionOverride<kotlin/collections/DictCollectionLiteralBuilder.add: R|kotlin/Unit|>|(String(3), Int(3))
        }
        ))
    }
