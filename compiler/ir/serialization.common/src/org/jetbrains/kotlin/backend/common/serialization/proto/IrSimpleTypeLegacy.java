// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy}
 */
public  final class IrSimpleTypeLegacy extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrSimpleTypeLegacy, IrSimpleTypeLegacy.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy)
    IrSimpleTypeLegacyOrBuilder {
  private IrSimpleTypeLegacy() {
    annotation_ = emptyProtobufList();
    argument_ = emptyLongList();
  }
  private int bitField0_;
  public static final int ANNOTATION_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> annotation_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  @java.lang.Override
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> getAnnotationList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder> 
      getAnnotationOrBuilderList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  @java.lang.Override
  public int getAnnotationCount() {
    return annotation_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index) {
    return annotation_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder getAnnotationOrBuilder(
      int index) {
    return annotation_.get(index);
  }
  private void ensureAnnotationIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> tmp = annotation_;
    if (!tmp.isModifiable()) {
      annotation_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setAnnotation(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.set(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addAnnotation(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.add(value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addAnnotation(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
    value.getClass();  // minimal bytecode null check
    ensureAnnotationIsMutable();
    annotation_.add(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  private void addAllAnnotation(
      java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> values) {
    ensureAnnotationIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, annotation_);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  private void clearAnnotation() {
    annotation_ = emptyProtobufList();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  private void removeAnnotation(int index) {
    ensureAnnotationIsMutable();
    annotation_.remove(index);
  }

  public static final int CLASSIFIER_FIELD_NUMBER = 2;
  private long classifier_;
  /**
   * <code>int64 classifier = 2 [features = { ... }</code>
   * @return Whether the classifier field is set.
   */
  @java.lang.Override
  public boolean hasClassifier() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>int64 classifier = 2 [features = { ... }</code>
   * @return The classifier.
   */
  @java.lang.Override
  public long getClassifier() {
    return classifier_;
  }
  /**
   * <code>int64 classifier = 2 [features = { ... }</code>
   * @param value The classifier to set.
   */
  private void setClassifier(long value) {
    bitField0_ |= 0x00000001;
    classifier_ = value;
  }
  /**
   * <code>int64 classifier = 2 [features = { ... }</code>
   */
  private void clearClassifier() {
    bitField0_ = (bitField0_ & ~0x00000001);
    classifier_ = 0L;
  }

  public static final int HAS_QUESTION_MARK_FIELD_NUMBER = 3;
  private boolean hasQuestionMark_;
  /**
   * <code>bool has_question_mark = 3 [features = { ... }</code>
   * @return Whether the hasQuestionMark field is set.
   */
  @java.lang.Override
  public boolean hasHasQuestionMark() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>bool has_question_mark = 3 [features = { ... }</code>
   * @return The hasQuestionMark.
   */
  @java.lang.Override
  public boolean getHasQuestionMark() {
    return hasQuestionMark_;
  }
  /**
   * <code>bool has_question_mark = 3 [features = { ... }</code>
   * @param value The hasQuestionMark to set.
   */
  private void setHasQuestionMark(boolean value) {
    bitField0_ |= 0x00000002;
    hasQuestionMark_ = value;
  }
  /**
   * <code>bool has_question_mark = 3 [features = { ... }</code>
   */
  private void clearHasQuestionMark() {
    bitField0_ = (bitField0_ & ~0x00000002);
    hasQuestionMark_ = false;
  }

  public static final int ARGUMENT_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.protobuf.Internal.LongList argument_;
  /**
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   *
   * <code>repeated int64 argument = 4;</code>
   * @return A list containing the argument.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getArgumentList() {
    return argument_;
  }
  /**
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   *
   * <code>repeated int64 argument = 4;</code>
   * @return The count of argument.
   */
  @java.lang.Override
  public int getArgumentCount() {
    return argument_.size();
  }
  /**
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   *
   * <code>repeated int64 argument = 4;</code>
   * @param index The index of the element to return.
   * @return The argument at the given index.
   */
  @java.lang.Override
  public long getArgument(int index) {
    return argument_.getLong(index);
  }
  private int argumentMemoizedSerializedSize = -1;
  private void ensureArgumentIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.LongList tmp = argument_;
    if (!tmp.isModifiable()) {
      argument_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   *
   * <code>repeated int64 argument = 4;</code>
   * @param index The index to set the value at.
   * @param value The argument to set.
   */
  private void setArgument(
      int index, long value) {
    ensureArgumentIsMutable();
    argument_.setLong(index, value);
  }
  /**
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   *
   * <code>repeated int64 argument = 4;</code>
   * @param value The argument to add.
   */
  private void addArgument(long value) {
    ensureArgumentIsMutable();
    argument_.addLong(value);
  }
  /**
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   *
   * <code>repeated int64 argument = 4;</code>
   * @param values The argument to add.
   */
  private void addAllArgument(
      java.lang.Iterable<? extends java.lang.Long> values) {
    ensureArgumentIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, argument_);
  }
  /**
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   *
   * <code>repeated int64 argument = 4;</code>
   */
  private void clearArgument() {
    argument_ = emptyLongList();
  }

  public static final int ABBREVIATION_FIELD_NUMBER = 5;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
   */
  @java.lang.Override
  public boolean hasAbbreviation() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation getAbbreviation() {
    return abbreviation_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation.getDefaultInstance() : abbreviation_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setAbbreviation(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation value) {
    value.getClass();  // minimal bytecode null check
    abbreviation_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeAbbreviation(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation value) {
    value.getClass();  // minimal bytecode null check
    if (abbreviation_ != null &&
        abbreviation_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation.getDefaultInstance()) {
      abbreviation_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation.newBuilder(abbreviation_).mergeFrom(value).buildPartial();
    } else {
      abbreviation_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
   */
  private void clearAbbreviation() {  abbreviation_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacyOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> getAnnotationList() {
      return java.util.Collections.unmodifiableList(
          instance.getAnnotationList());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return instance.getAnnotationCount();
    }/**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index) {
      return instance.getAnnotation(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder setAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.setAnnotation(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder setAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.setAnnotation(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAnnotation(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.addAnnotation(value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
      copyOnWrite();
      instance.addAnnotation(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAnnotation(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.addAnnotation(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAnnotation(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
      copyOnWrite();
      instance.addAnnotation(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> values) {
      copyOnWrite();
      instance.addAllAnnotation(values);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder clearAnnotation() {
      copyOnWrite();
      instance.clearAnnotation();
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder removeAnnotation(int index) {
      copyOnWrite();
      instance.removeAnnotation(index);
      return this;
    }

    /**
     * <code>int64 classifier = 2 [features = { ... }</code>
     * @return Whether the classifier field is set.
     */
    @java.lang.Override
    public boolean hasClassifier() {
      return instance.hasClassifier();
    }
    /**
     * <code>int64 classifier = 2 [features = { ... }</code>
     * @return The classifier.
     */
    @java.lang.Override
    public long getClassifier() {
      return instance.getClassifier();
    }
    /**
     * <code>int64 classifier = 2 [features = { ... }</code>
     * @param value The classifier to set.
     * @return This builder for chaining.
     */
    public Builder setClassifier(long value) {
      copyOnWrite();
      instance.setClassifier(value);
      return this;
    }
    /**
     * <code>int64 classifier = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearClassifier() {
      copyOnWrite();
      instance.clearClassifier();
      return this;
    }

    /**
     * <code>bool has_question_mark = 3 [features = { ... }</code>
     * @return Whether the hasQuestionMark field is set.
     */
    @java.lang.Override
    public boolean hasHasQuestionMark() {
      return instance.hasHasQuestionMark();
    }
    /**
     * <code>bool has_question_mark = 3 [features = { ... }</code>
     * @return The hasQuestionMark.
     */
    @java.lang.Override
    public boolean getHasQuestionMark() {
      return instance.getHasQuestionMark();
    }
    /**
     * <code>bool has_question_mark = 3 [features = { ... }</code>
     * @param value The hasQuestionMark to set.
     * @return This builder for chaining.
     */
    public Builder setHasQuestionMark(boolean value) {
      copyOnWrite();
      instance.setHasQuestionMark(value);
      return this;
    }
    /**
     * <code>bool has_question_mark = 3 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearHasQuestionMark() {
      copyOnWrite();
      instance.clearHasQuestionMark();
      return this;
    }

    /**
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     *
     * <code>repeated int64 argument = 4;</code>
     * @return A list containing the argument.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getArgumentList() {
      return java.util.Collections.unmodifiableList(
          instance.getArgumentList());
    }
    /**
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     *
     * <code>repeated int64 argument = 4;</code>
     * @return The count of argument.
     */
    @java.lang.Override
    public int getArgumentCount() {
      return instance.getArgumentCount();
    }
    /**
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     *
     * <code>repeated int64 argument = 4;</code>
     * @param index The index of the element to return.
     * @return The argument at the given index.
     */
    @java.lang.Override
    public long getArgument(int index) {
      return instance.getArgument(index);
    }
    /**
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     *
     * <code>repeated int64 argument = 4;</code>
     * @param value The argument to set.
     * @return This builder for chaining.
     */
    public Builder setArgument(
        int index, long value) {
      copyOnWrite();
      instance.setArgument(index, value);
      return this;
    }
    /**
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     *
     * <code>repeated int64 argument = 4;</code>
     * @param value The argument to add.
     * @return This builder for chaining.
     */
    public Builder addArgument(long value) {
      copyOnWrite();
      instance.addArgument(value);
      return this;
    }
    /**
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     *
     * <code>repeated int64 argument = 4;</code>
     * @param values The argument to add.
     * @return This builder for chaining.
     */
    public Builder addAllArgument(
        java.lang.Iterable<? extends java.lang.Long> values) {
      copyOnWrite();
      instance.addAllArgument(values);
      return this;
    }
    /**
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     *
     * <code>repeated int64 argument = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearArgument() {
      copyOnWrite();
      instance.clearArgument();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    @java.lang.Override
    public boolean hasAbbreviation() {
      return instance.hasAbbreviation();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation getAbbreviation() {
      return instance.getAbbreviation();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public Builder setAbbreviation(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation value) {
      copyOnWrite();
      instance.setAbbreviation(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public Builder setAbbreviation(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation.Builder builderForValue) {
      copyOnWrite();
      instance.setAbbreviation(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public Builder mergeAbbreviation(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation value) {
      copyOnWrite();
      instance.mergeAbbreviation(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public Builder clearAbbreviation() {  copyOnWrite();
      instance.clearAbbreviation();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "annotation_",
            org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.class,
            "classifier_",
            "hasQuestionMark_",
            "argument_",
            "abbreviation_",
          };
          java.lang.String info =
              "\u0004\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0002\u0004\u0001\u041b\u0002\u1502" +
              "\u0000\u0003\u1507\u0001\u0004%\u0005\u1409\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy DEFAULT_INSTANCE;
  static {
    IrSimpleTypeLegacy defaultInstance = new IrSimpleTypeLegacy();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrSimpleTypeLegacy.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrSimpleTypeLegacy> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrSimpleTypeLegacy> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
