package

public var global: Box
@kotlin.native.concurrent.SharedImmutable public var property: Box
@kotlin.native.concurrent.SharedImmutable public val valWithSharedImmutable: Box
@kotlin.native.concurrent.SharedImmutable public var varDelegated: kotlin.Int
@kotlin.native.concurrent.SharedImmutable public var varWithSharedImmutable: Box

public final data class Box {
    public constructor Box(/*0*/ value: kotlin.Int = ...)
    public final val value: kotlin.Int
    public final operator /*synthesized*/ fun component1(): kotlin.Int
    public final /*synthesized*/ fun copy(/*0*/ value: kotlin.Int = ...): Box
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}

public final class Delegate {
    public constructor Delegate()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun getValue(/*0*/ thisRef: kotlin.Any?, /*1*/ property: kotlin.reflect.KProperty<*>): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun setValue(/*0*/ thisRef: kotlin.Any?, /*1*/ property: kotlin.reflect.KProperty<*>, /*2*/ value: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class NotGlobalSharedImmutable {
    public constructor NotGlobalSharedImmutable()
    @kotlin.native.concurrent.SharedImmutable public final val field: kotlin.Int = 0
    @kotlin.native.concurrent.SharedImmutable public final var mutableField: kotlin.Int
    @kotlin.native.concurrent.SharedImmutable public final val property1: Box
    @kotlin.native.concurrent.SharedImmutable public final var property2: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final data class NotGlobalSharedImmutable2 {
    public constructor NotGlobalSharedImmutable2(/*0*/ mutableField: kotlin.Int, /*1*/ field: kotlin.Int)
    @kotlin.native.concurrent.SharedImmutable public final val field: kotlin.Int
    @kotlin.native.concurrent.SharedImmutable public final var mutableField: kotlin.Int
    public final operator /*synthesized*/ fun component1(): kotlin.Int
    public final operator /*synthesized*/ fun component2(): kotlin.Int
    public final /*synthesized*/ fun copy(/*0*/ mutableField: kotlin.Int = ..., /*1*/ field: kotlin.Int = ...): NotGlobalSharedImmutable2
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}

public final class NotGlobalSharedImmutable3 {
    public constructor NotGlobalSharedImmutable3()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        private constructor Companion()
        @kotlin.native.concurrent.SharedImmutable public final val field: kotlin.Int = 0
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

package kotlin {

    package kotlin.native {

        package kotlin.native.concurrent {

            @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.PROPERTY}) public final annotation class SharedImmutable : kotlin.Annotation {
                public constructor SharedImmutable()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
    }
}
