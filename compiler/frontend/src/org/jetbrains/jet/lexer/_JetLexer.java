/* The following code was generated by JFlex 1.4.3 on 3/6/14 2:29 PM */

package org.jetbrains.jet.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;

import org.jetbrains.jet.lexer.JetTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/6/14 2:29 PM from the specification file
 * <tt>/Users/abreslav/work/kotlin/compiler/frontend/src/org/jetbrains/jet/lexer/Jet.flex</tt>
 */
class _JetLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int BLOCK_COMMENT = 8;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 12;
  public static final int DOC_COMMENT = 10;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\7\1\0\1\3\23\0\1\3\1\14\1\31\1\13"+
    "\1\10\1\72\1\70\1\26\1\76\1\77\1\40\1\65\1\101\1\24"+
    "\1\21\1\12\1\15\11\1\1\73\1\100\1\66\1\63\1\67\1\64"+
    "\1\11\1\2\1\17\2\2\1\23\1\22\5\4\1\20\3\4\1\25"+
    "\3\4\1\60\3\4\1\16\2\4\1\74\1\27\1\75\1\0\1\4"+
    "\1\6\1\46\1\52\1\41\1\62\1\44\1\56\1\50\1\34\1\35"+
    "\1\53\1\47\1\55\1\4\1\43\1\42\1\45\1\4\1\51\1\36"+
    "\1\33\1\30\1\61\1\54\1\16\1\57\1\4\1\32\1\71\1\37"+
    "\54\0\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4"+
    "\1\0\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4\11\0\1\4"+
    "\213\0\1\4\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4"+
    "\1\0\54\4\1\0\46\4\1\0\5\4\4\0\202\4\10\0\105\4"+
    "\1\0\46\4\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4"+
    "\7\0\47\4\110\0\33\4\5\0\3\4\56\0\32\4\5\0\13\4"+
    "\25\0\12\5\4\0\2\4\1\0\143\4\1\0\1\4\17\0\2\4"+
    "\7\0\2\4\12\5\3\4\2\0\1\4\20\0\1\4\1\0\36\4"+
    "\35\0\3\4\60\0\46\4\13\0\1\4\u0152\0\66\4\3\0\1\4"+
    "\22\0\1\4\7\0\12\4\4\0\12\5\25\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4"+
    "\36\0\2\4\1\0\3\4\4\0\12\5\2\4\23\0\6\4\4\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0"+
    "\2\4\37\0\4\4\1\0\1\4\7\0\12\5\2\0\3\4\20\0"+
    "\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\5\4\3\0\1\4\22\0\1\4\17\0\2\4\4\0\12\5\25\0"+
    "\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\5\4\3\0\1\4\36\0\2\4\1\0\3\4\4\0\12\5\1\0"+
    "\1\4\21\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0"+
    "\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0"+
    "\10\4\1\0\3\4\55\0\11\5\25\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\46\0\2\4\4\0\12\5\25\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0"+
    "\1\4\40\0\1\4\1\0\2\4\4\0\12\5\25\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\20\4\46\0\2\4\4\0\12\5\25\0"+
    "\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\72\0"+
    "\60\4\1\0\2\4\14\0\7\4\11\0\12\5\47\0\2\4\1\0"+
    "\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0"+
    "\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0\1\4\11\0"+
    "\12\5\2\0\2\4\42\0\1\4\37\0\12\5\26\0\10\4\1\0"+
    "\42\4\35\0\4\4\164\0\42\4\1\0\5\4\1\0\2\4\25\0"+
    "\12\5\6\0\6\4\112\0\46\4\12\0\51\4\7\0\132\4\5\0"+
    "\104\4\5\0\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0"+
    "\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0"+
    "\1\4\1\0\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0"+
    "\27\4\1\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\47\4\1\0\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0"+
    "\10\4\12\0\32\4\5\0\113\4\25\0\15\4\1\0\4\4\16\0"+
    "\22\4\16\0\22\4\16\0\15\4\1\0\3\4\17\0\64\4\43\0"+
    "\1\4\4\0\1\4\3\0\12\5\46\0\12\5\6\0\130\4\10\0"+
    "\51\4\127\0\35\4\51\0\12\5\36\4\2\0\5\4\u038b\0\154\4"+
    "\224\0\234\4\4\0\132\4\6\0\26\4\2\0\6\4\2\0\46\4"+
    "\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4"+
    "\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4"+
    "\1\0\7\4\164\0\1\4\15\0\1\4\202\0\1\4\4\0\1\4"+
    "\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4"+
    "\5\0\5\4\u0ebb\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4"+
    "\6\0\3\4\1\0\132\4\1\0\4\4\5\0\50\4\4\0\136\4"+
    "\21\0\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4"+
    "\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4"+
    "\5\0\1\4\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4"+
    "\2\0\66\4\50\0\14\4\164\0\5\4\1\0\207\4\23\0\12\5"+
    "\7\0\32\4\6\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4"+
    "\2\0\6\4\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\3\3\1\16\1\17\15\3\1\20\1\21\1\22\1\23"+
    "\1\24\2\1\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\35\1\0\1\37\2\35"+
    "\1\40\1\0\1\40\3\41\1\42\1\43\1\2\1\0"+
    "\2\44\1\0\1\45\1\0\1\46\1\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\0\1\54\1\44\2\2\1\44"+
    "\1\55\1\56\1\57\1\60\2\13\1\0\3\3\1\61"+
    "\1\62\1\63\1\3\1\64\6\3\1\65\10\3\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\0\1\102\2\103\2\0\1\40"+
    "\1\104\1\105\1\0\1\106\1\44\1\3\2\0\1\107"+
    "\1\110\1\111\1\112\1\0\1\2\2\0\1\113\4\3"+
    "\1\114\10\3\1\115\4\3\1\116\1\117\2\3\1\120"+
    "\1\121\1\122\2\0\1\123\2\40\1\45\1\46\1\124"+
    "\1\125\2\44\1\0\1\126\1\3\1\127\1\3\1\130"+
    "\4\3\1\131\1\132\4\3\1\133\1\3\1\134\1\101"+
    "\1\0\1\135\1\136\1\137\1\140\1\3\1\141\3\3"+
    "\1\142\1\143\1\144\1\0\1\3\1\145\1\3\1\146"+
    "\1\3\1\147\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u018c\0\u056a\0\u05ac"+
    "\0\u05ee\0\u018c\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u018c\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c\0\u0bdc"+
    "\0\u018c\0\u0c1e\0\u0c60\0\u018c\0\u018c\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u018c\0\u0daa\0\u0dec\0\u018c\0\u018c\0\u0e2e\0\u0e70"+
    "\0\u018c\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u018c"+
    "\0\u103e\0\u1080\0\u018c\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u0210\0\u0210\0\u0210\0\u13da"+
    "\0\u018c\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u0210\0\u17fa\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c"+
    "\0\u018c\0\u018c\0\u018c\0\u183c\0\u187e\0\u018c\0\u018c\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u018c\0\u018c\0\u19c8\0\u018c\0\u1a0a"+
    "\0\u018c\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b12\0\u018c\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u018c\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u0210\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0"+
    "\0\u1f32\0\u018c\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u0210\0\u0210"+
    "\0\u207c\0\u20be\0\u0210\0\u0210\0\u018c\0\u2100\0\u2142\0\u1902"+
    "\0\u018c\0\u2184\0\u018c\0\u018c\0\u018c\0\u018c\0\u21c6\0\u2208"+
    "\0\u2208\0\u0210\0\u224a\0\u0210\0\u228c\0\u0210\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u0210\0\u0210\0\u23d6\0\u2418\0\u245a\0\u249c"+
    "\0\u0210\0\u24de\0\u0210\0\u018c\0\u2520\0\u0ce4\0\u0210\0\u0210"+
    "\0\u0210\0\u2562\0\u0210\0\u25a4\0\u25e6\0\u2628\0\u0210\0\u0210"+
    "\0\u0210\0\u266a\0\u26ac\0\u0210\0\u26ee\0\u0210\0\u2730\0\u0210"+
    "\0\u0210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\11\1\7\1\13\1\12"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\3\11\1\22"+
    "\2\11\1\23\1\11\1\24\1\7\1\11\1\25\1\26"+
    "\1\27\1\11\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\11\1\42\1\43\1\11"+
    "\1\44\1\11\1\45\1\11\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\7\70\1\71"+
    "\1\72\16\70\1\73\1\70\1\74\57\70\1\75\1\72"+
    "\16\70\1\75\1\70\1\76\50\70\2\0\1\77\1\0"+
    "\1\77\1\0\1\100\7\0\3\77\1\0\2\77\1\0"+
    "\1\77\2\0\1\77\2\0\1\101\3\77\2\0\22\77"+
    "\17\0\12\102\1\103\25\102\1\104\41\102\1\7\1\10"+
    "\1\11\1\12\1\11\1\7\1\13\1\12\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\3\11\1\22\2\11\1\23"+
    "\1\11\1\24\1\7\1\11\1\25\1\105\1\27\1\11"+
    "\1\30\1\31\1\106\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\11\1\42\1\43\1\11\1\44\1\11"+
    "\1\45\1\11\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\103\0\1\10\13\0\1\10"+
    "\2\0\1\107\1\110\1\111\1\112\20\0\1\112\10\0"+
    "\1\107\1\111\24\0\2\11\1\0\2\11\7\0\4\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\2\0\4\11"+
    "\2\0\22\11\22\0\1\12\3\0\1\12\72\0\6\113"+
    "\2\0\72\113\2\0\1\114\1\0\1\114\1\0\1\115"+
    "\7\0\3\114\1\0\2\114\1\0\1\114\2\0\1\114"+
    "\2\0\4\114\2\0\22\114\21\0\1\116\1\0\1\116"+
    "\1\0\1\117\2\0\1\120\4\0\3\116\1\0\2\116"+
    "\1\0\1\116\2\0\1\116\2\0\4\116\2\0\22\116"+
    "\31\0\1\121\25\0\1\122\22\0\1\123\32\0\1\124"+
    "\122\0\1\125\25\0\1\126\17\0\1\127\13\0\1\127"+
    "\1\130\1\131\1\107\1\110\1\111\1\112\20\0\1\112"+
    "\5\0\1\131\2\0\1\107\1\111\24\0\1\132\13\0"+
    "\1\132\3\0\1\133\104\0\1\134\36\0\1\135\3\0"+
    "\1\136\12\0\7\24\1\0\16\24\1\137\1\140\52\24"+
    "\31\0\1\141\51\0\2\11\1\0\2\11\7\0\4\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\142\2\11\2\0\10\11\1\143\5\11\1\144\3\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\3\11\1\145\2\0"+
    "\2\11\1\146\12\11\1\147\4\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\150\2\0\4\11\2\0\22\11\102\0\1\151\17\0"+
    "\2\11\1\0\2\11\7\0\4\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\4\11\2\0\1\11\1\152"+
    "\12\11\1\153\5\11\20\0\2\11\1\0\2\11\7\0"+
    "\4\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\4\11\2\0\11\11\1\154\10\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\155\2\0\4\11\2\0\22\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\4\11\2\0\14\11\1\156\5\11\20\0"+
    "\2\11\1\0\2\11\7\0\4\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\4\11\2\0\5\11\1\157"+
    "\14\11\20\0\2\11\1\0\2\11\7\0\4\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\3\11\1\160"+
    "\2\0\22\11\20\0\2\11\1\0\2\11\7\0\4\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\2\0\4\11"+
    "\2\0\3\11\1\161\16\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\4\11\2\0\10\11\1\162\11\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\163\2\11\2\0\22\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\164\2\0\4\11\2\0\1\11"+
    "\1\165\3\11\1\166\14\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\167\2\11\2\0\22\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\4\11\2\0\5\11\1\170\14\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\4\11\2\0\1\11"+
    "\1\171\20\11\102\0\1\172\3\0\1\173\75\0\1\174"+
    "\1\0\1\175\77\0\1\176\101\0\1\177\106\0\1\200"+
    "\102\0\1\201\73\0\1\202\111\0\1\203\6\0\7\70"+
    "\2\0\16\70\1\0\1\70\1\0\50\70\2\0\1\204"+
    "\1\0\1\204\1\0\1\205\7\0\3\204\1\0\2\204"+
    "\1\0\1\204\2\0\1\204\1\0\1\206\4\204\2\0"+
    "\22\204\17\0\7\207\1\0\20\207\1\210\51\207\31\0"+
    "\1\211\51\0\2\77\1\0\2\77\7\0\4\77\1\0"+
    "\2\77\1\0\1\77\2\0\1\77\2\0\4\77\2\0"+
    "\22\77\17\0\6\212\2\0\72\212\1\0\2\77\1\0"+
    "\2\77\7\0\4\77\1\0\2\77\1\0\1\77\2\0"+
    "\1\77\2\0\1\77\1\213\2\77\2\0\22\77\57\0"+
    "\1\214\53\0\1\215\110\0\1\216\61\0\1\132\13\0"+
    "\1\132\3\0\1\217\61\0\1\220\13\0\1\220\4\0"+
    "\1\111\1\0\1\220\31\0\1\111\6\0\1\220\14\0"+
    "\6\113\1\221\1\0\72\113\1\0\2\114\1\0\2\114"+
    "\7\0\4\114\1\0\2\114\1\0\1\114\2\0\1\114"+
    "\2\0\4\114\2\0\22\114\17\0\6\222\2\0\72\222"+
    "\1\0\2\116\1\0\2\116\7\0\4\116\1\0\2\116"+
    "\1\0\1\116\2\0\1\116\2\0\4\116\2\0\22\116"+
    "\17\0\6\223\2\0\72\223\7\121\1\0\72\121\40\0"+
    "\1\224\41\0\7\124\1\0\72\124\36\0\1\225\4\0"+
    "\1\226\121\0\1\227\17\0\1\127\13\0\1\127\3\0"+
    "\1\230\1\111\1\112\20\0\1\112\11\0\1\111\24\0"+
    "\2\130\12\0\1\130\1\0\1\130\1\231\1\232\2\130"+
    "\1\0\1\233\13\0\1\130\2\0\1\130\1\233\1\130"+
    "\3\0\1\130\2\0\1\231\1\130\3\0\1\130\20\0"+
    "\1\131\13\0\1\131\2\0\1\107\1\216\33\0\1\107"+
    "\25\0\1\132\13\0\1\132\4\0\1\111\1\112\20\0"+
    "\1\112\11\0\1\111\23\0\7\24\1\0\72\24\31\0"+
    "\1\234\51\0\2\11\1\0\2\11\7\0\4\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\2\11\1\235"+
    "\1\11\2\0\10\11\1\236\11\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\237\2\0\4\11\2\0\5\11\1\240\10\11\1\241"+
    "\3\11\20\0\2\11\1\0\2\11\7\0\4\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\4\11\2\0"+
    "\4\11\1\242\15\11\20\0\2\11\1\0\2\11\7\0"+
    "\4\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\4\11\2\0\4\11\1\243\15\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\4\11\2\0\2\11\1\244\17\11\20\0"+
    "\2\11\1\0\2\11\7\0\4\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\4\11\2\0\5\11\1\245"+
    "\14\11\20\0\2\11\1\0\2\11\7\0\4\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\4\11\2\0"+
    "\12\11\1\246\7\11\20\0\2\11\1\0\2\11\7\0"+
    "\4\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\4\11\2\0\14\11\1\247\5\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\3\11\1\250\2\0\22\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\4\11\2\0\1\251\21\11\20\0"+
    "\2\11\1\0\2\11\7\0\4\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\4\11\2\0\22\11\1\0"+
    "\1\252\16\0\2\11\1\0\2\11\7\0\4\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\253\3\11"+
    "\2\0\22\11\20\0\2\11\1\0\2\11\7\0\4\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\2\0\4\11"+
    "\2\0\3\11\1\254\16\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\2\11\1\255\1\11\2\0\3\11\1\256\16\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\4\11\2\0\2\11"+
    "\1\257\17\11\20\0\2\11\1\0\2\11\7\0\4\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\2\0\4\11"+
    "\2\0\10\11\1\260\11\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\4\11\2\0\14\11\1\261\5\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\2\11\1\262\1\11\2\0\22\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\4\11\2\0\10\11"+
    "\1\263\3\11\1\264\5\11\102\0\1\265\17\0\2\204"+
    "\1\0\2\204\7\0\4\204\1\0\2\204\1\0\1\204"+
    "\2\0\1\204\2\0\4\204\2\0\22\204\17\0\6\266"+
    "\2\0\72\266\1\0\2\267\12\0\1\267\1\0\1\267"+
    "\2\0\2\267\15\0\1\267\2\0\1\267\1\0\1\267"+
    "\3\0\1\267\3\0\1\267\3\0\1\267\50\0\1\270"+
    "\50\0\6\212\1\271\1\0\72\212\1\0\2\77\1\0"+
    "\2\77\7\0\4\77\1\0\2\77\1\0\1\77\2\0"+
    "\1\77\2\0\2\77\1\272\1\77\2\0\22\77\40\0"+
    "\1\217\61\0\1\220\13\0\1\220\4\0\1\111\33\0"+
    "\1\111\23\0\6\222\1\273\1\0\72\222\6\223\1\274"+
    "\1\0\72\223\12\0\1\275\70\0\2\276\1\0\2\276"+
    "\7\0\4\276\1\0\2\276\1\0\1\276\2\0\1\276"+
    "\2\0\4\276\2\0\22\276\20\0\1\132\13\0\1\132"+
    "\105\0\1\216\3\0\1\233\17\0\1\233\35\0\2\277"+
    "\12\0\1\277\1\0\1\277\1\0\1\217\2\277\15\0"+
    "\1\277\2\0\1\277\1\0\1\277\3\0\1\277\3\0"+
    "\1\277\3\0\1\277\20\0\1\300\13\0\1\300\6\0"+
    "\1\301\40\0\1\301\15\0\2\11\1\0\2\11\7\0"+
    "\4\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\3\11\1\302\2\0\22\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\4\11\2\0\1\11\1\303\20\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\4\11\2\0\3\11\1\304\16\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\2\11\1\305\1\11"+
    "\2\0\22\11\20\0\2\11\1\0\2\11\7\0\4\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\2\0\4\11"+
    "\2\0\3\11\1\306\16\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\4\11\2\0\3\11\1\307\16\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\310\3\11\2\0\22\11\20\0"+
    "\2\11\1\0\2\11\7\0\4\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\3\11\1\311\2\0\22\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\4\11\2\0\3\11"+
    "\1\312\16\11\20\0\2\11\1\0\2\11\7\0\4\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\2\0\4\11"+
    "\2\0\14\11\1\313\5\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\4\11\2\0\3\11\1\314\16\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\4\11\2\0\6\11\1\315\13\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\316\2\0\4\11\2\0\22\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\4\11\2\0\5\11"+
    "\1\317\14\11\20\0\2\11\1\0\2\11\7\0\4\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\2\0\4\11"+
    "\2\0\14\11\1\320\5\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\4\11\2\0\2\11\1\321\17\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\3\11\1\322\2\0\22\11\20\0"+
    "\2\11\1\0\2\11\7\0\4\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\3\11\1\323\2\0\22\11"+
    "\17\0\6\266\1\324\1\0\72\266\1\0\2\325\12\0"+
    "\1\325\1\0\1\325\2\0\2\325\15\0\1\325\2\0"+
    "\1\325\1\0\1\325\3\0\1\325\3\0\1\325\3\0"+
    "\1\325\20\0\2\77\1\0\2\77\7\0\4\77\1\0"+
    "\2\77\1\0\1\77\2\0\1\77\2\0\3\77\1\326"+
    "\2\0\22\77\20\0\2\277\12\0\1\277\1\0\1\277"+
    "\2\0\2\277\1\0\1\233\13\0\1\277\2\0\1\277"+
    "\1\233\1\277\3\0\1\277\3\0\1\277\3\0\1\277"+
    "\20\0\1\300\13\0\1\300\65\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\4\11\2\0\13\11\1\327\6\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\330\3\11\2\0\22\11\20\0"+
    "\2\11\1\0\2\11\7\0\4\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\4\11\2\0\10\11\1\331"+
    "\11\11\20\0\2\11\1\0\2\11\7\0\4\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\2\11\1\332"+
    "\1\11\2\0\22\11\20\0\2\11\1\0\2\11\7\0"+
    "\4\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\3\11\1\333\2\0\22\11\20\0\2\11\1\0\2\11"+
    "\7\0\4\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\4\11\2\0\1\334\21\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\4\11\2\0\5\11\1\335\14\11\20\0"+
    "\2\11\1\0\2\11\7\0\4\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\4\11\2\0\10\11\1\336"+
    "\11\11\20\0\2\11\1\0\2\11\7\0\4\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\4\11\2\0"+
    "\6\11\1\337\13\11\20\0\2\11\1\0\2\11\7\0"+
    "\4\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\4\11\2\0\3\11\1\340\16\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\4\11\2\0\3\11\1\341\16\11\20\0"+
    "\2\342\12\0\1\342\1\0\1\342\2\0\2\342\15\0"+
    "\1\342\2\0\1\342\1\0\1\342\3\0\1\342\3\0"+
    "\1\342\3\0\1\342\20\0\2\11\1\0\2\11\7\0"+
    "\4\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\4\11\2\0\2\11\1\343\17\11\20\0\2\11\1\0"+
    "\2\11\7\0\4\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\344\3\11\2\0\22\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\4\11\2\0\7\11\1\345\12\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\4\11\2\0\2\11"+
    "\1\346\17\11\20\0\2\207\12\0\1\207\1\0\1\207"+
    "\2\0\2\207\15\0\1\207\2\0\1\207\1\0\1\207"+
    "\3\0\1\207\3\0\1\207\3\0\1\207\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\347\2\0\4\11\2\0\22\11\20\0\2\11"+
    "\1\0\2\11\7\0\4\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\4\11\2\0\3\11\1\350\16\11"+
    "\20\0\2\11\1\0\2\11\7\0\4\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\4\11\2\0\3\11"+
    "\1\351\16\11\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10098];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\16\1\1\11\3\1\1\11\17\1\1\11"+
    "\7\1\6\11\1\1\1\11\1\1\1\0\2\11\2\1"+
    "\1\0\1\1\1\11\2\1\2\11\1\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\11\2\1"+
    "\1\11\1\1\1\0\5\1\5\11\1\1\1\0\7\1"+
    "\1\11\21\1\11\11\1\1\1\0\2\11\1\1\2\0"+
    "\1\1\2\11\1\0\1\11\1\1\1\11\2\0\3\1"+
    "\1\11\1\0\1\1\2\0\1\11\15\1\1\11\12\1"+
    "\1\11\2\0\1\1\1\11\1\1\4\11\2\1\1\0"+
    "\22\1\1\11\1\0\14\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;
    
    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    private IElementType commentStateToTokenType(int state) {
        switch (state) {
            case BLOCK_COMMENT:
                return JetTokens.BLOCK_COMMENT;
            case DOC_COMMENT:
                return JetTokens.DOC_COMMENT;
            default:
                throw new IllegalArgumentException("Unexpected state: " + state);
        }
    }


  _JetLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JetLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1330) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return JetTokens.IDENTIFIER;
          }
        case 105: break;
        case 12: 
          { pushState(STRING); return JetTokens.OPEN_QUOTE;
          }
        case 106: break;
        case 79: 
          { return JetTokens.FOR_KEYWORD ;
          }
        case 107: break;
        case 102: 
          { return JetTokens.RETURN_KEYWORD ;
          }
        case 108: break;
        case 89: 
          { return JetTokens.NULL_KEYWORD ;
          }
        case 109: break;
        case 35: 
          { if (lBraceCount == 0) {
                                             popState();
                                             return JetTokens.LONG_TEMPLATE_ENTRY_END;
                                           }
                                           lBraceCount--;
                                           return JetTokens.RBRACE;
          }
        case 110: break;
        case 19: 
          { return JetTokens.LT        ;
          }
        case 111: break;
        case 54: 
          { return JetTokens.DO_KEYWORD ;
          }
        case 112: break;
        case 18: 
          { return JetTokens.PLUS      ;
          }
        case 113: break;
        case 57: 
          { return JetTokens.PLUSEQ    ;
          }
        case 114: break;
        case 93: 
          { popState(); return JetTokens.THIS_KEYWORD;
          }
        case 115: break;
        case 28: 
          { return JetTokens.COMMA     ;
          }
        case 116: break;
        case 20: 
          { return JetTokens.GT        ;
          }
        case 117: break;
        case 4: 
          { return JetTokens.WHITE_SPACE;
          }
        case 118: break;
        case 26: 
          { return JetTokens.RPAR      ;
          }
        case 119: break;
        case 56: 
          { return JetTokens.DOUBLE_ARROW;
          }
        case 120: break;
        case 87: 
          { return JetTokens.TRUE_KEYWORD ;
          }
        case 121: break;
        case 37: 
          { return JetTokens.FIELD_IDENTIFIER;
          }
        case 122: break;
        case 61: 
          { return JetTokens.ANDAND    ;
          }
        case 123: break;
        case 66: 
          { pushState(LONG_TEMPLATE_ENTRY); return JetTokens.LONG_TEMPLATE_ENTRY_START;
          }
        case 124: break;
        case 36: 
          { return JetTokens.FLOAT_LITERAL;
          }
        case 125: break;
        case 40: 
          { return JetTokens.EOL_COMMENT;
          }
        case 126: break;
        case 91: 
          { return JetTokens.WHEN_KEYWORD ;
          }
        case 127: break;
        case 75: 
          { pushState(RAW_STRING); return JetTokens.OPEN_QUOTE;
          }
        case 128: break;
        case 22: 
          { return JetTokens.COLON     ;
          }
        case 129: break;
        case 59: 
          { return JetTokens.LTEQ      ;
          }
        case 130: break;
        case 48: 
          { return JetTokens.ARROW     ;
          }
        case 131: break;
        case 32: 
          { popState(); return JetTokens.IDENTIFIER;
          }
        case 132: break;
        case 23: 
          { return JetTokens.LBRACKET  ;
          }
        case 133: break;
        case 70: 
          { yypushback(2); return JetTokens.INTEGER_LITERAL;
          }
        case 134: break;
        case 11: 
          { return JetTokens.CHARACTER_LITERAL;
          }
        case 135: break;
        case 80: 
          { return JetTokens.VAR_KEYWORD ;
          }
        case 136: break;
        case 60: 
          { return JetTokens.GTEQ      ;
          }
        case 137: break;
        case 2: 
          { return JetTokens.INTEGER_LITERAL;
          }
        case 138: break;
        case 14: 
          { return JetTokens.RBRACE    ;
          }
        case 139: break;
        case 97: 
          { return JetTokens.CLASS_KEYWORD ;
          }
        case 140: break;
        case 76: 
          { return JetTokens.TRY_KEYWORD ;
          }
        case 141: break;
        case 8: 
          { return JetTokens.EXCL      ;
          }
        case 142: break;
        case 44: 
          { return JetTokens.EXCLEQ    ;
          }
        case 143: break;
        case 47: 
          { return JetTokens.MINUSEQ   ;
          }
        case 144: break;
        case 103: 
          { return JetTokens.PACKAGE_KEYWORD ;
          }
        case 145: break;
        case 94: 
          { return JetTokens.THROW_KEYWORD ;
          }
        case 146: break;
        case 96: 
          { return JetTokens.SUPER_KEYWORD ;
          }
        case 147: break;
        case 69: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return commentStateToTokenType(state);
        }
          }
        case 148: break;
        case 99: 
          { return JetTokens.WHILE_KEYWORD ;
          }
        case 149: break;
        case 46: 
          { return JetTokens.MINUSMINUS;
          }
        case 150: break;
        case 104: 
          { return JetTokens.CONTINUE_KEYWORD ;
          }
        case 151: break;
        case 73: 
          { return JetTokens.NOT_IN;
          }
        case 152: break;
        case 39: 
          { return JetTokens.ATAT      ;
          }
        case 153: break;
        case 6: 
          { return JetTokens.DIV       ;
          }
        case 154: break;
        case 83: 
          { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return JetTokens.CLOSING_QUOTE;
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return JetTokens.REGULAR_STRING_PART;
                                    }
          }
        case 155: break;
        case 38: 
          { return JetTokens.LABEL_IDENTIFIER;
          }
        case 156: break;
        case 29: 
          { return JetTokens.REGULAR_STRING_PART;
          }
        case 157: break;
        case 17: 
          { return JetTokens.QUEST     ;
          }
        case 158: break;
        case 71: 
          { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 159: break;
        case 62: 
          { return JetTokens.OROR      ;
          }
        case 160: break;
        case 21: 
          { return JetTokens.PERC      ;
          }
        case 161: break;
        case 74: 
          { return JetTokens.EXCLEQEQEQ;
          }
        case 162: break;
        case 63: 
          { return JetTokens.PERCEQ    ;
          }
        case 163: break;
        case 45: 
          { return JetTokens.RANGE     ;
          }
        case 164: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 165: break;
        case 65: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return JetTokens.SHORT_TEMPLATE_ENTRY_START;
          }
        case 166: break;
        case 72: 
          { return JetTokens.NOT_IS;
          }
        case 167: break;
        case 15: 
          { return JetTokens.MUL       ;
          }
        case 168: break;
        case 24: 
          { return JetTokens.RBRACKET  ;
          }
        case 169: break;
        case 58: 
          { return JetTokens.PLUSPLUS  ;
          }
        case 170: break;
        case 41: 
          { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 171: break;
        case 86: 
          { return JetTokens.THIS_KEYWORD ;
          }
        case 172: break;
        case 9: 
          { return JetTokens.DOT       ;
          }
        case 173: break;
        case 27: 
          { return JetTokens.SEMICOLON ;
          }
        case 174: break;
        case 51: 
          { return JetTokens.IF_KEYWORD ;
          }
        case 175: break;
        case 67: 
          { return JetTokens.ESCAPE_SEQUENCE;
          }
        case 176: break;
        case 31: 
          { popState(); return JetTokens.CLOSING_QUOTE;
          }
        case 177: break;
        case 16: 
          { return JetTokens.EQ        ;
          }
        case 178: break;
        case 5: 
          { return JetTokens.AT        ;
          }
        case 179: break;
        case 77: 
          { return JetTokens.AS_SAFE;
          }
        case 180: break;
        case 25: 
          { return JetTokens.LPAR      ;
          }
        case 181: break;
        case 10: 
          { return JetTokens.MINUS     ;
          }
        case 182: break;
        case 100: 
          { return JetTokens.FALSE_KEYWORD ;
          }
        case 183: break;
        case 88: 
          { return JetTokens.TYPE_KEYWORD ;
          }
        case 184: break;
        case 68: 
          { commentDepth++;
          }
        case 185: break;
        case 78: 
          { return JetTokens.FUN_KEYWORD ;
          }
        case 186: break;
        case 49: 
          { return JetTokens.IS_KEYWORD ;
          }
        case 187: break;
        case 30: 
          { popState(); yypushback(1); return JetTokens.DANGLING_NEWLINE;
          }
        case 188: break;
        case 34: 
          { lBraceCount++; return JetTokens.LBRACE;
          }
        case 189: break;
        case 85: 
          { yypushback(3); return JetTokens.EXCL;
          }
        case 190: break;
        case 42: 
          { return JetTokens.DIVEQ     ;
          }
        case 191: break;
        case 90: 
          { return JetTokens.ELSE_KEYWORD ;
          }
        case 192: break;
        case 53: 
          { return JetTokens.AS_KEYWORD ;
          }
        case 193: break;
        case 50: 
          { return JetTokens.IN_KEYWORD ;
          }
        case 194: break;
        case 55: 
          { return JetTokens.EQEQ      ;
          }
        case 195: break;
        case 82: 
          { return JetTokens.EQEQEQ    ;
          }
        case 196: break;
        case 81: 
          { return JetTokens.VAL_KEYWORD ;
          }
        case 197: break;
        case 92: 
          { return JetTokens.CAPITALIZED_THIS_KEYWORD ;
          }
        case 198: break;
        case 52: 
          { return JetTokens.MULTEQ    ;
          }
        case 199: break;
        case 43: 
          { if (zzCurrentPos == 0) {
                return JetTokens.SHEBANG_COMMENT;
            }
            else {
                yypushback(yylength() - 1);
                return JetTokens.HASH;
            }
          }
        case 200: break;
        case 13: 
          { return JetTokens.LBRACE    ;
          }
        case 201: break;
        case 101: 
          { return JetTokens.OBJECT_KEYWORD ;
          }
        case 202: break;
        case 98: 
          { return JetTokens.BREAK_KEYWORD ;
          }
        case 203: break;
        case 84: 
          { return JetTokens.BLOCK_COMMENT;
          }
        case 204: break;
        case 95: 
          { return JetTokens.TRAIT_KEYWORD ;
          }
        case 205: break;
        case 64: 
          { return JetTokens.COLONCOLON;
          }
        case 206: break;
        case 33: 
          { 
          }
        case 207: break;
        case 7: 
          { return JetTokens.HASH      ;
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }
            case 234: break;
            case DOC_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }
            case 235: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
