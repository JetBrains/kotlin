/nullable.kt:(61,79): info: Generated Viper text for use_nullable_twice:
method global$fun_use_nullable_twice$fun_take$NT_Int$return$NT_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
{
  var local0$a: Ref
  var local0$b: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  local0$a := local$x
  local0$b := local$x
  ret$0 := local0$a
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(145,168): info: Generated Viper text for pass_nullable_parameter:
method global$fun_pass_nullable_parameter$fun_take$NT_Int$return$NT_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
{
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  anonymous$0 := global$fun_use_nullable_twice$fun_take$NT_Int$return$NT_Int(local$x)
  ret$0 := local$x
  goto label$ret$0
  label label$ret$0
}

method global$fun_use_nullable_twice$fun_take$NT_Int$return$NT_Int(local$x: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$nullable(dom$RuntimeType$intType()))


/nullable.kt:(232,260): info: Generated Viper text for nullable_nullable_comparison:
method global$fun_nullable_nullable_comparison$fun_take$NT_Int$NT_Int$return$T_Boolean(local$x: Ref,
  local$y: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$y), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  ret$0 := dom$RuntimeType$boolToRef(local$x == local$y)
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(315,347): info: Generated Viper text for nullable_non_nullable_comparison:
method global$fun_nullable_non_nullable_comparison$fun_take$NT_Int$NT_Int$return$T_Boolean(local$x: Ref,
  local$y: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$y), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  ret$0 := special$notBool(dom$RuntimeType$boolToRef(local$x ==
    dom$RuntimeType$intToRef(3)))
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(402,417): info: Generated Viper text for null_comparison:
method global$fun_null_comparison$fun_take$NT_Int$return$T_Boolean(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  ret$0 := dom$RuntimeType$boolToRef(local$x == dom$RuntimeType$nullValue())
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(466,480): info: Generated Viper text for elvis_operator:
method global$fun_elvis_operator$fun_take$NT_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  if (local$x != dom$RuntimeType$nullValue()) {
    ret$0 := local$x
  } else {
    ret$0 := dom$RuntimeType$intToRef(3)}
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(522,544): info: Generated Viper text for elvis_operator_complex:
method global$fun_elvis_operator$fun_take$NT_Int$return$T_Int(local$x: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


method global$fun_elvis_operator_complex$fun_take$NT_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  anonymous$0 := global$fun_pass_nullable_parameter$fun_take$NT_Int$return$NT_Int(local$x)
  if (anonymous$0 != dom$RuntimeType$nullValue()) {
    ret$0 := anonymous$0
  } else {
    ret$0 := global$fun_elvis_operator$fun_take$NT_Int$return$T_Int(dom$RuntimeType$intToRef(2))}
  goto label$ret$0
  label label$ret$0
}

method global$fun_pass_nullable_parameter$fun_take$NT_Int$return$NT_Int(local$x: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$nullable(dom$RuntimeType$intType()))


/nullable.kt:(627,648): info: Generated Viper text for elvis_operator_return:
method global$fun_elvis_operator_return$fun_take$NT_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var local0$y: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  if (local$x != dom$RuntimeType$nullValue()) {
    local0$y := local$x
  } else {
    var anonymous$0: Ref
    ret$0 := dom$RuntimeType$intToRef(0)
    goto label$ret$0
    local0$y := anonymous$0
  }
  ret$0 := local0$y
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(711,720): info: Generated Viper text for safe_call:
field pkg$kotlin$class_String$member_length: Ref

method global$fun_safe_call$fun_take$NT_class_pkg$kotlin$global$class_String$return$T_Unit(local$s: Ref)
  returns (ret$0: Ref)
  requires local$s != dom$RuntimeType$nullValue() ==>
    acc(local$s.pkg$kotlin$class_String$member_length, wildcard)
  ensures local$s != dom$RuntimeType$nullValue() ==>
    acc(local$s.pkg$kotlin$class_String$member_length, wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$s), dom$RuntimeType$nullable(dom$RuntimeType$T_class_pkg$kotlin$global$class_String()))
  ret$0 := dom$RuntimeType$unitValue()
  if (local$s != dom$RuntimeType$nullValue()) {
    var anonymous$0: Ref
    anonymous$0 := pkg$kotlin$class_Any$fun_hashCode$fun_take$T_Any$return$T_Int(local$s)
  }
  label label$ret$0
}

method pkg$kotlin$class_Any$fun_hashCode$fun_take$T_Any$return$T_Int(this: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


/nullable.kt:(760,778): info: Generated Viper text for safe_call_property:
field pkg$kotlin$class_String$member_length: Ref

method global$fun_safe_call_property$fun_take$NT_class_pkg$kotlin$global$class_String$return$T_Unit(local$s: Ref)
  returns (ret$0: Ref)
  requires local$s != dom$RuntimeType$nullValue() ==>
    acc(local$s.pkg$kotlin$class_String$member_length, wildcard)
  ensures local$s != dom$RuntimeType$nullValue() ==>
    acc(local$s.pkg$kotlin$class_String$member_length, wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$l: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$s), dom$RuntimeType$nullable(dom$RuntimeType$T_class_pkg$kotlin$global$class_String()))
  ret$0 := dom$RuntimeType$unitValue()
  if (local$s != dom$RuntimeType$nullValue()) {
    var anonymous$0: Ref
    anonymous$0 := local$s.pkg$kotlin$class_String$member_length
    inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$intType())
    local0$l := anonymous$0
  } else {
    local0$l := dom$RuntimeType$nullValue()}
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


/nullable.kt:(899,914): info: Generated Viper text for safe_call_chain:
field class_Foo$member_v: Ref

method class_Foo$fun_nullable$fun_take$T_class_global$class_Foo$return$NT_class_global$class_Foo(this: Ref)
  returns (ret: Ref)
  requires acc(this.class_Foo$member_v, wildcard)
  ensures acc(this.class_Foo$member_v, wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$nullable(dom$RuntimeType$T_class_global$class_Foo()))
  ensures ret != dom$RuntimeType$nullValue() ==>
    acc(ret.class_Foo$member_v, wildcard)


method global$fun_safe_call_chain$fun_take$NT_class_global$class_Foo$return$NT_Int(local$foo: Ref)
  returns (ret$0: Ref)
  requires local$foo != dom$RuntimeType$nullValue() ==>
    acc(local$foo.class_Foo$member_v, wildcard)
  ensures local$foo != dom$RuntimeType$nullValue() ==>
    acc(local$foo.class_Foo$member_v, wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
{
  var anonymous$0: Ref
  var anonymous$1: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$foo), dom$RuntimeType$nullable(dom$RuntimeType$T_class_global$class_Foo()))
  if (local$foo != dom$RuntimeType$nullValue()) {
    anonymous$1 := class_Foo$fun_nullable$fun_take$T_class_global$class_Foo$return$NT_class_global$class_Foo(local$foo)
  } else {
    anonymous$1 := dom$RuntimeType$nullValue()}
  if (anonymous$1 != dom$RuntimeType$nullValue()) {
    anonymous$0 := class_Foo$fun_nullable$fun_take$T_class_global$class_Foo$return$NT_class_global$class_Foo(anonymous$1)
  } else {
    anonymous$0 := dom$RuntimeType$nullValue()}
  if (anonymous$0 != dom$RuntimeType$nullValue()) {
    var anonymous$2: Ref
    anonymous$2 := anonymous$0.class_Foo$member_v
    inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
    ret$0 := anonymous$2
  } else {
    ret$0 := dom$RuntimeType$nullValue()}
  goto label$ret$0
  label label$ret$0
}
