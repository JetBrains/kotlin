// TODO: muted automatically, investigate should it be ran for JS_IR or not
// IGNORE_BACKEND: JS_IR

// TODO: muted automatically, investigate should it be ran for JVM_IR or not
// IGNORE_BACKEND: JVM_IR

// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_RUNTIME



fun box(): String {
    val list1 = ArrayList<Int>()
    for (i in 1 until 5) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<Int>(1, 2, 3, 4)) {
        return "Wrong elements for 1 until 5: $list1"
    }

    val list2 = ArrayList<Int>()
    for (i in 1.toByte() until 5.toByte()) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<Int>(1, 2, 3, 4)) {
        return "Wrong elements for 1.toByte() until 5.toByte(): $list2"
    }

    val list3 = ArrayList<Int>()
    for (i in 1.toShort() until 5.toShort()) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<Int>(1, 2, 3, 4)) {
        return "Wrong elements for 1.toShort() until 5.toShort(): $list3"
    }

    val list4 = ArrayList<Long>()
    for (i in 1L until 5L) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<Long>(1, 2, 3, 4)) {
        return "Wrong elements for 1L until 5L: $list4"
    }

    val list5 = ArrayList<Char>()
    for (i in 'a' until 'd') {
        list5.add(i)
        if (list5.size > 23) break
    }
    if (list5 != listOf<Char>('a', 'b', 'c')) {
        return "Wrong elements for 'a' until 'd': $list5"
    }

    val list6 = ArrayList<UInt>()
    for (i in 1u until 5u) {
        list6.add(i)
        if (list6.size > 23) break
    }
    if (list6 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list6"
    }

    val list7 = ArrayList<UInt>()
    for (i in 1u.toUByte() until 5u.toUByte()) {
        list7.add(i)
        if (list7.size > 23) break
    }
    if (list7 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list7"
    }

    val list8 = ArrayList<UInt>()
    for (i in 1u.toUShort() until 5u.toUShort()) {
        list8.add(i)
        if (list8.size > 23) break
    }
    if (list8 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list8"
    }

    val list9 = ArrayList<ULong>()
    for (i in 1uL until 5uL) {
        list9.add(i)
        if (list9.size > 23) break
    }
    if (list9 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list9"
    }

    return "OK"
}
