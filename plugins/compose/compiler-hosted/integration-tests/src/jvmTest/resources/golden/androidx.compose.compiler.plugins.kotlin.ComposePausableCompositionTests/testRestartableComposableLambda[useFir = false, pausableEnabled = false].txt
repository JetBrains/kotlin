//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun Test(a: Int, b: String, c: Float) {
    Wrap {
        use(a)
        use(b)
        use(c)
    }
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(a: Int, b: String, c: Float, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(a)) 0b0100 else 0b0010
  }
  if (%changed and 0b00110000 == 0) {
    %dirty = %dirty or if (%composer.changed(b)) 0b00100000 else 0b00010000
  }
  if (%changed and 0b000110000000 == 0) {
    %dirty = %dirty or if (%composer.changed(c)) 0b000100000000 else 0b10000000
  }
  if (%dirty and 0b10010011 != 0b10010010 || !%composer.skipping) {
    Wrap(rememberComposableLambda(<>, true, { %composer: Composer?, %changed: Int ->
      if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
        use(a)
        use(b)
        use(c)
      } else {
        %composer.skipToGroupEnd()
      }
    }, %composer, 0b00110110), %composer, 0b0110)
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(a, b, c, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
