namespace <root>

// <namespace name="html">
namespace html

internal final class html.A : html.BodyTag {
    public final /*constructor*/ fun <init>(): html.A
    internal final override /*1*/ fun a(/*0*/ href: jet.String, /*1*/ init: jet.ExtensionFunction0<html.A, jet.Tuple0>): jet.Tuple0
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ fun b(/*0*/ init: jet.ExtensionFunction0<html.B, jet.Tuple0>): html.B
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final override /*1*/ fun h1(/*0*/ init: jet.ExtensionFunction0<html.H1, jet.Tuple0>): html.H1
    public final var href: jet.String?
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal final override /*1*/ fun p(/*0*/ init: jet.ExtensionFunction0<html.P, jet.Tuple0>): html.P
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
    internal final override /*1*/ fun ul(/*0*/ init: jet.ExtensionFunction0<html.UL, jet.Tuple0>): html.UL
}
internal final class html.B : html.BodyTag {
    public final /*constructor*/ fun <init>(): html.B
    internal final override /*1*/ fun a(/*0*/ href: jet.String, /*1*/ init: jet.ExtensionFunction0<html.A, jet.Tuple0>): jet.Tuple0
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ fun b(/*0*/ init: jet.ExtensionFunction0<html.B, jet.Tuple0>): html.B
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final override /*1*/ fun h1(/*0*/ init: jet.ExtensionFunction0<html.H1, jet.Tuple0>): html.H1
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal final override /*1*/ fun p(/*0*/ init: jet.ExtensionFunction0<html.P, jet.Tuple0>): html.P
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
    internal final override /*1*/ fun ul(/*0*/ init: jet.ExtensionFunction0<html.UL, jet.Tuple0>): html.UL
}
internal final class html.Body : html.BodyTag {
    public final /*constructor*/ fun <init>(): html.Body
    internal final override /*1*/ fun a(/*0*/ href: jet.String, /*1*/ init: jet.ExtensionFunction0<html.A, jet.Tuple0>): jet.Tuple0
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ fun b(/*0*/ init: jet.ExtensionFunction0<html.B, jet.Tuple0>): html.B
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final override /*1*/ fun h1(/*0*/ init: jet.ExtensionFunction0<html.H1, jet.Tuple0>): html.H1
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal final override /*1*/ fun p(/*0*/ init: jet.ExtensionFunction0<html.P, jet.Tuple0>): html.P
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
    internal final override /*1*/ fun ul(/*0*/ init: jet.ExtensionFunction0<html.UL, jet.Tuple0>): html.UL
}
internal abstract class html.BodyTag : html.TagWithText {
    public final /*constructor*/ fun <init>(/*0*/ name: jet.String): html.BodyTag
    internal final fun a(/*0*/ href: jet.String, /*1*/ init: jet.ExtensionFunction0<html.A, jet.Tuple0>): jet.Tuple0
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final fun b(/*0*/ init: jet.ExtensionFunction0<html.B, jet.Tuple0>): html.B
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final fun h1(/*0*/ init: jet.ExtensionFunction0<html.H1, jet.Tuple0>): html.H1
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal final fun p(/*0*/ init: jet.ExtensionFunction0<html.P, jet.Tuple0>): html.P
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
    internal final fun ul(/*0*/ init: jet.ExtensionFunction0<html.UL, jet.Tuple0>): html.UL
}
internal abstract trait html.Element : jet.Any {
    internal abstract fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    internal open fun toString(): jet.String?
}
internal final class html.H1 : html.BodyTag {
    public final /*constructor*/ fun <init>(): html.H1
    internal final override /*1*/ fun a(/*0*/ href: jet.String, /*1*/ init: jet.ExtensionFunction0<html.A, jet.Tuple0>): jet.Tuple0
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ fun b(/*0*/ init: jet.ExtensionFunction0<html.B, jet.Tuple0>): html.B
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final override /*1*/ fun h1(/*0*/ init: jet.ExtensionFunction0<html.H1, jet.Tuple0>): html.H1
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal final override /*1*/ fun p(/*0*/ init: jet.ExtensionFunction0<html.P, jet.Tuple0>): html.P
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
    internal final override /*1*/ fun ul(/*0*/ init: jet.ExtensionFunction0<html.UL, jet.Tuple0>): html.UL
}
internal final class html.HTML : html.TagWithText {
    public final /*constructor*/ fun <init>(): html.HTML
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final fun body(/*0*/ init: jet.ExtensionFunction0<html.Body, jet.Tuple0>): html.Body
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final fun head(/*0*/ init: jet.ExtensionFunction0<html.Head, jet.Tuple0>): html.Head
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
}
internal final class html.Head : html.TagWithText {
    public final /*constructor*/ fun <init>(): html.Head
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal final fun title(/*0*/ init: jet.ExtensionFunction0<html.Title, jet.Tuple0>): html.Title
    internal open override /*1*/ fun toString(): jet.String?
}
internal final class html.LI : html.BodyTag {
    public final /*constructor*/ fun <init>(): html.LI
    internal final override /*1*/ fun a(/*0*/ href: jet.String, /*1*/ init: jet.ExtensionFunction0<html.A, jet.Tuple0>): jet.Tuple0
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ fun b(/*0*/ init: jet.ExtensionFunction0<html.B, jet.Tuple0>): html.B
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final override /*1*/ fun h1(/*0*/ init: jet.ExtensionFunction0<html.H1, jet.Tuple0>): html.H1
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal final override /*1*/ fun p(/*0*/ init: jet.ExtensionFunction0<html.P, jet.Tuple0>): html.P
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
    internal final override /*1*/ fun ul(/*0*/ init: jet.ExtensionFunction0<html.UL, jet.Tuple0>): html.UL
}
internal final class html.P : html.BodyTag {
    public final /*constructor*/ fun <init>(): html.P
    internal final override /*1*/ fun a(/*0*/ href: jet.String, /*1*/ init: jet.ExtensionFunction0<html.A, jet.Tuple0>): jet.Tuple0
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ fun b(/*0*/ init: jet.ExtensionFunction0<html.B, jet.Tuple0>): html.B
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final override /*1*/ fun h1(/*0*/ init: jet.ExtensionFunction0<html.H1, jet.Tuple0>): html.H1
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal final override /*1*/ fun p(/*0*/ init: jet.ExtensionFunction0<html.P, jet.Tuple0>): html.P
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
    internal final override /*1*/ fun ul(/*0*/ init: jet.ExtensionFunction0<html.UL, jet.Tuple0>): html.UL
}
internal abstract class html.Tag : html.Element {
    public final /*constructor*/ fun <init>(/*0*/ name: jet.String): html.Tag
    internal final val attributes: java.util.HashMap<jet.String, jet.String>
    internal final val children: java.util.ArrayList<html.Element>
    protected final fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final val name: jet.String
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    private final fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
}
internal abstract class html.TagWithText : html.Tag {
    public final /*constructor*/ fun <init>(/*0*/ name: jet.String): html.TagWithText
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
}
internal final class html.TextElement : html.Element {
    public final /*constructor*/ fun <init>(/*0*/ text: jet.String): html.TextElement
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    internal final val text: jet.String
    internal open override /*1*/ fun toString(): jet.String?
}
internal final class html.Title : html.TagWithText {
    public final /*constructor*/ fun <init>(): html.Title
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final override /*1*/ val name: jet.String
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
}
internal final class html.UL : html.BodyTag {
    public final /*constructor*/ fun <init>(): html.UL
    internal final override /*1*/ fun a(/*0*/ href: jet.String, /*1*/ init: jet.ExtensionFunction0<html.A, jet.Tuple0>): jet.Tuple0
    internal final override /*1*/ val attributes: java.util.HashMap<jet.String, jet.String>
    internal final override /*1*/ fun b(/*0*/ init: jet.ExtensionFunction0<html.B, jet.Tuple0>): html.B
    internal final override /*1*/ val children: java.util.ArrayList<html.Element>
    internal final override /*1*/ fun h1(/*0*/ init: jet.ExtensionFunction0<html.H1, jet.Tuple0>): html.H1
    protected final override /*1*/ fun </*0*/ T : html.Element>initTag(/*0*/ tag: T, /*1*/ init: jet.ExtensionFunction0<T, jet.Tuple0>): T
    internal final override /*1*/ fun jet.String.plus(): jet.Tuple0
    internal final fun li(/*0*/ init: jet.ExtensionFunction0<html.LI, jet.Tuple0>): html.LI
    internal final override /*1*/ val name: jet.String
    internal final override /*1*/ fun p(/*0*/ init: jet.ExtensionFunction0<html.P, jet.Tuple0>): html.P
    internal open override /*1*/ fun render(/*0*/ builder: java.lang.StringBuilder, /*1*/ indent: jet.String): jet.Tuple0
    invisible_fake abstract override /*1*/ fun renderAttributes(): jet.String?
    internal open override /*1*/ fun toString(): jet.String?
    internal final override /*1*/ fun ul(/*0*/ init: jet.ExtensionFunction0<html.UL, jet.Tuple0>): html.UL
}
internal final fun html(/*0*/ init: jet.ExtensionFunction0<html.HTML, jet.Tuple0>): html.HTML
internal final fun main(/*0*/ args: jet.Array<jet.String>): jet.Tuple0
internal final fun print(/*0*/ message: jet.Any?): jet.Tuple0
internal final fun println(/*0*/ message: jet.Any?): jet.Tuple0
internal final fun </*0*/ K : jet.Any?, /*1*/ V : jet.Any?>java.util.Map<K, V>.set(/*0*/ key: K, /*1*/ value: V): V?
// </namespace name="html">
