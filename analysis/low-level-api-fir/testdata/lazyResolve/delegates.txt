
RAW_FIR:
FILE: delegates.kt
    public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

IMPORTS:
FILE: delegates.kt
    public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: delegates.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

COMPANION_GENERATION:
FILE: delegates.kt
    public? final? [COMPANION_GENERATION] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

SUPER_TYPES:
FILE: delegates.kt
    public? final? [SUPER_TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

TYPES:
FILE: delegates.kt
    public? final? [TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

STATUS:
FILE: delegates.kt
    public final [STATUS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

ARGUMENTS_OF_ANNOTATIONS:
FILE: delegates.kt
    public final [ARGUMENTS_OF_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

CONTRACTS:
FILE: delegates.kt
    public final [CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: delegates.kt
    public final [IMPLICIT_TYPES_BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

EXPECT_ACTUAL_MATCHING:
FILE: delegates.kt
    public final [EXPECT_ACTUAL_MATCHING] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? [RAW_FIR] fun receive([RAW_FIR] value: Int): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? [RAW_FIR] val delegate: <implicit> = LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit>
    public? final? [RAW_FIR] val valueWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? [RAW_FIR] val valueWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? [RAW_FIR] var variableWithExplicitType: Intby LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? [RAW_FIR] var variableWithImplicitType: <implicit>by LAZY_EXPRESSION
        public? [RAW_FIR] get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? [RAW_FIR] set([RAW_FIR] <set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

BODY_RESOLVE:
FILE: delegates.kt
    public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/valueWithExplicitType|)
        R|/receive|(R|/valueWithImplicitType|)
        R|/variableWithExplicitType| = Int(10)
        R|/variableWithImplicitType| = Int(10)
    }
    public final [CONTRACTS] fun receive([CONTRACTS] value: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final [CONTRACTS] val delegate: R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| = object : R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| {
        private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public final override operator [RAW_FIR] fun getValue([RAW_FIR] thisRef: R|kotlin/Any?|, [RAW_FIR] property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(1)
        }

        public final override operator [RAW_FIR] fun setValue([RAW_FIR] thisRef: R|kotlin/Any?|, [RAW_FIR] property: R|kotlin/reflect/KProperty<*>|, [RAW_FIR] value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }

        public [CONTRACTS] get(): R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>|
    public final [CONTRACTS] val valueWithExplicitType: R|kotlin/Int|by delegate#
        public [CONTRACTS] get(): R|kotlin/Int| {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public final [IMPLICIT_TYPES_BODY_RESOLVE] val valueWithImplicitType: R|kotlin/Int|by R|/delegate|
        public [IMPLICIT_TYPES_BODY_RESOLVE] get(): R|kotlin/Int| {
            ^ D|/valueWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithImplicitType|)
        }
    public final [CONTRACTS] var variableWithExplicitType: R|kotlin/Int|by delegate#
        public [CONTRACTS] get(): R|kotlin/Int| {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public [CONTRACTS] set([CONTRACTS] <set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public final [IMPLICIT_TYPES_BODY_RESOLVE] var variableWithImplicitType: R|kotlin/Int|by R|/delegate|
        public [IMPLICIT_TYPES_BODY_RESOLVE] get(): R|kotlin/Int| {
            ^ D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithImplicitType|)
        }
        public [IMPLICIT_TYPES_BODY_RESOLVE] set([IMPLICIT_TYPES_BODY_RESOLVE] <set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

FILE RAW TO BODY:
FILE: delegates.kt
    public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/valueWithExplicitType|)
        R|/receive|(R|/valueWithImplicitType|)
        R|/variableWithExplicitType| = Int(10)
        R|/variableWithImplicitType| = Int(10)
    }
    public final [BODY_RESOLVE] fun receive([BODY_RESOLVE] value: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final [BODY_RESOLVE] val delegate: R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| = object : R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| {
        private [BODY_RESOLVE] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public final override operator [BODY_RESOLVE] fun getValue([BODY_RESOLVE] thisRef: R|kotlin/Any?|, [BODY_RESOLVE] property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(1)
        }

        public final override operator [BODY_RESOLVE] fun setValue([BODY_RESOLVE] thisRef: R|kotlin/Any?|, [BODY_RESOLVE] property: R|kotlin/reflect/KProperty<*>|, [BODY_RESOLVE] value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }

        public [BODY_RESOLVE] get(): R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>|
    public final [BODY_RESOLVE] val valueWithExplicitType: R|kotlin/Int|by R|/delegate|
        public [BODY_RESOLVE] get(): R|kotlin/Int| {
            ^ D|/valueWithExplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithExplicitType|)
        }
    public final [BODY_RESOLVE] val valueWithImplicitType: R|kotlin/Int|by R|/delegate|
        public [BODY_RESOLVE] get(): R|kotlin/Int| {
            ^ D|/valueWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithImplicitType|)
        }
    public final [BODY_RESOLVE] var variableWithExplicitType: R|kotlin/Int|by R|/delegate|
        public [BODY_RESOLVE] get(): R|kotlin/Int| {
            ^ D|/variableWithExplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithExplicitType|)
        }
        public [BODY_RESOLVE] set([BODY_RESOLVE] <set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithExplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public final [BODY_RESOLVE] var variableWithImplicitType: R|kotlin/Int|by R|/delegate|
        public [BODY_RESOLVE] get(): R|kotlin/Int| {
            ^ D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithImplicitType|)
        }
        public [BODY_RESOLVE] set([BODY_RESOLVE] <set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }
