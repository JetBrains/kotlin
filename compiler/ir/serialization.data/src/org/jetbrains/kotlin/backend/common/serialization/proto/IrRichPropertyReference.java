// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference}
 */
public final class IrRichPropertyReference extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference)
    IrRichPropertyReferenceOrBuilder {
  // Use IrRichPropertyReference.newBuilder() to construct.
  private IrRichPropertyReference(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrRichPropertyReference(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrRichPropertyReference defaultInstance;
  public static IrRichPropertyReference getDefaultInstance() {
    return defaultInstance;
  }

  public IrRichPropertyReference getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrRichPropertyReference(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              boundValues_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression>();
              mutable_bitField0_ |= 0x00000001;
            }
            boundValues_.add(input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.PARSER, extensionRegistry));
            break;
          }
          case 16: {
            bitField0_ |= 0x00000001;
            reflectionTargetSymbol_ = input.readInt64();
            break;
          }
          case 26: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              subBuilder = getterFunction_.toBuilder();
            }
            getterFunction_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(getterFunction_);
              getterFunction_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 34: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.Builder subBuilder = null;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              subBuilder = setterFunction_.toBuilder();
            }
            setterFunction_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(setterFunction_);
              setterFunction_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000004;
            break;
          }
          case 40: {
            bitField0_ |= 0x00000008;
            originName_ = input.readInt32();
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        boundValues_ = java.util.Collections.unmodifiableList(boundValues_);
      }
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrRichPropertyReference> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrRichPropertyReference>() {
    public IrRichPropertyReference parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrRichPropertyReference(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrRichPropertyReference> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int BOUND_VALUES_FIELD_NUMBER = 1;
  private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> boundValues_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
   */
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> getBoundValuesList() {
    return boundValues_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
      getBoundValuesOrBuilderList() {
    return boundValues_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
   */
  public int getBoundValuesCount() {
    return boundValues_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getBoundValues(int index) {
    return boundValues_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getBoundValuesOrBuilder(
      int index) {
    return boundValues_.get(index);
  }

  public static final int REFLECTION_TARGET_SYMBOL_FIELD_NUMBER = 2;
  private long reflectionTargetSymbol_;
  /**
   * <code>optional int64 reflection_target_symbol = 2;</code>
   */
  public boolean hasReflectionTargetSymbol() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional int64 reflection_target_symbol = 2;</code>
   */
  public long getReflectionTargetSymbol() {
    return reflectionTargetSymbol_;
  }

  public static final int GETTER_FUNCTION_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getterFunction_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_function = 3;</code>
   */
  public boolean hasGetterFunction() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_function = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getGetterFunction() {
    return getterFunction_;
  }

  public static final int SETTER_FUNCTION_FIELD_NUMBER = 4;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setterFunction_;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_function = 4;</code>
   */
  public boolean hasSetterFunction() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_function = 4;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getSetterFunction() {
    return setterFunction_;
  }

  public static final int ORIGIN_NAME_FIELD_NUMBER = 5;
  private int originName_;
  /**
   * <code>optional int32 origin_name = 5;</code>
   */
  public boolean hasOriginName() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional int32 origin_name = 5;</code>
   */
  public int getOriginName() {
    return originName_;
  }

  private void initFields() {
    boundValues_ = java.util.Collections.emptyList();
    reflectionTargetSymbol_ = 0L;
    getterFunction_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();
    setterFunction_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();
    originName_ = 0;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasGetterFunction()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getBoundValuesCount(); i++) {
      if (!getBoundValues(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (!getGetterFunction().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasSetterFunction()) {
      if (!getSetterFunction().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < boundValues_.size(); i++) {
      output.writeMessage(1, boundValues_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt64(2, reflectionTargetSymbol_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(3, getterFunction_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(4, setterFunction_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(5, originName_);
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < boundValues_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, boundValues_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(2, reflectionTargetSymbol_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, getterFunction_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, setterFunction_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(5, originName_);
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReferenceOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      boundValues_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      reflectionTargetSymbol_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000002);
      getterFunction_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000004);
      setterFunction_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000008);
      originName_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        boundValues_ = java.util.Collections.unmodifiableList(boundValues_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.boundValues_ = boundValues_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000001;
      }
      result.reflectionTargetSymbol_ = reflectionTargetSymbol_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000002;
      }
      result.getterFunction_ = getterFunction_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000004;
      }
      result.setterFunction_ = setterFunction_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000008;
      }
      result.originName_ = originName_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference.getDefaultInstance()) return this;
      if (!other.boundValues_.isEmpty()) {
        if (boundValues_.isEmpty()) {
          boundValues_ = other.boundValues_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureBoundValuesIsMutable();
          boundValues_.addAll(other.boundValues_);
        }
        
      }
      if (other.hasReflectionTargetSymbol()) {
        setReflectionTargetSymbol(other.getReflectionTargetSymbol());
      }
      if (other.hasGetterFunction()) {
        mergeGetterFunction(other.getGetterFunction());
      }
      if (other.hasSetterFunction()) {
        mergeSetterFunction(other.getSetterFunction());
      }
      if (other.hasOriginName()) {
        setOriginName(other.getOriginName());
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (!hasGetterFunction()) {
        
        return false;
      }
      for (int i = 0; i < getBoundValuesCount(); i++) {
        if (!getBoundValues(i).isInitialized()) {
          
          return false;
        }
      }
      if (!getGetterFunction().isInitialized()) {
        
        return false;
      }
      if (hasSetterFunction()) {
        if (!getSetterFunction().isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> boundValues_ =
      java.util.Collections.emptyList();
    private void ensureBoundValuesIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        boundValues_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression>(boundValues_);
        bitField0_ |= 0x00000001;
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> getBoundValuesList() {
      return java.util.Collections.unmodifiableList(boundValues_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public int getBoundValuesCount() {
      return boundValues_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getBoundValues(int index) {
      return boundValues_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder setBoundValues(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBoundValuesIsMutable();
      boundValues_.set(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder setBoundValues(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      ensureBoundValuesIsMutable();
      boundValues_.set(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder addBoundValues(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBoundValuesIsMutable();
      boundValues_.add(value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder addBoundValues(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBoundValuesIsMutable();
      boundValues_.add(index, value);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder addBoundValues(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      ensureBoundValuesIsMutable();
      boundValues_.add(builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder addBoundValues(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      ensureBoundValuesIsMutable();
      boundValues_.add(index, builderForValue.build());

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder addAllBoundValues(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> values) {
      ensureBoundValuesIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, boundValues_);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder clearBoundValues() {
      boundValues_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);

      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression bound_values = 1;</code>
     */
    public Builder removeBoundValues(int index) {
      ensureBoundValuesIsMutable();
      boundValues_.remove(index);

      return this;
    }

    private long reflectionTargetSymbol_ ;
    /**
     * <code>optional int64 reflection_target_symbol = 2;</code>
     */
    public boolean hasReflectionTargetSymbol() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 reflection_target_symbol = 2;</code>
     */
    public long getReflectionTargetSymbol() {
      return reflectionTargetSymbol_;
    }
    /**
     * <code>optional int64 reflection_target_symbol = 2;</code>
     */
    public Builder setReflectionTargetSymbol(long value) {
      bitField0_ |= 0x00000002;
      reflectionTargetSymbol_ = value;
      
      return this;
    }
    /**
     * <code>optional int64 reflection_target_symbol = 2;</code>
     */
    public Builder clearReflectionTargetSymbol() {
      bitField0_ = (bitField0_ & ~0x00000002);
      reflectionTargetSymbol_ = 0L;
      
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getterFunction_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_function = 3;</code>
     */
    public boolean hasGetterFunction() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_function = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getGetterFunction() {
      return getterFunction_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_function = 3;</code>
     */
    public Builder setGetterFunction(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      getterFunction_ = value;

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_function = 3;</code>
     */
    public Builder setGetterFunction(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.Builder builderForValue) {
      getterFunction_ = builderForValue.build();

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_function = 3;</code>
     */
    public Builder mergeGetterFunction(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      if (((bitField0_ & 0x00000004) == 0x00000004) &&
          getterFunction_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance()) {
        getterFunction_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.newBuilder(getterFunction_).mergeFrom(value).buildPartial();
      } else {
        getterFunction_ = value;
      }

      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getter_function = 3;</code>
     */
    public Builder clearGetterFunction() {
      getterFunction_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setterFunction_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_function = 4;</code>
     */
    public boolean hasSetterFunction() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_function = 4;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getSetterFunction() {
      return setterFunction_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_function = 4;</code>
     */
    public Builder setSetterFunction(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      setterFunction_ = value;

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_function = 4;</code>
     */
    public Builder setSetterFunction(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.Builder builderForValue) {
      setterFunction_ = builderForValue.build();

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_function = 4;</code>
     */
    public Builder mergeSetterFunction(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction value) {
      if (((bitField0_ & 0x00000008) == 0x00000008) &&
          setterFunction_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance()) {
        setterFunction_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.newBuilder(setterFunction_).mergeFrom(value).buildPartial();
      } else {
        setterFunction_ = value;
      }

      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction setter_function = 4;</code>
     */
    public Builder clearSetterFunction() {
      setterFunction_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    private int originName_ ;
    /**
     * <code>optional int32 origin_name = 5;</code>
     */
    public boolean hasOriginName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 origin_name = 5;</code>
     */
    public int getOriginName() {
      return originName_;
    }
    /**
     * <code>optional int32 origin_name = 5;</code>
     */
    public Builder setOriginName(int value) {
      bitField0_ |= 0x00000010;
      originName_ = value;
      
      return this;
    }
    /**
     * <code>optional int32 origin_name = 5;</code>
     */
    public Builder clearOriginName() {
      bitField0_ = (bitField0_ & ~0x00000010);
      originName_ = 0;
      
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference)
  }

  static {
    defaultInstance = new IrRichPropertyReference(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrRichPropertyReference)
}
