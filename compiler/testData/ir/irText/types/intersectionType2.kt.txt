open class B : A<B>, Foo {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

open class C : A<C>, Foo {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

interface A<out T : Any?> {
}

interface Foo {
}

fun foo(): Any {
  return run<Any>(fn = local fun <anonymous>(): Any {
    val mm: B = B()
    val nn: C = C()
    val c: Any = when {
      true -> mm
      else -> nn
    }
    return c
  }
)
}

fun <T : Any?> run(fn: Function0<T>): T {
  return fn.invoke()
}

