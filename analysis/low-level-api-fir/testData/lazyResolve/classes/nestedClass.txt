RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] nestedClass.kt
    public open [ResolvedTo(RAW_FIR)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class AnotherTopLevelClass : TopLevelClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<TopLevelClass>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class OuterClass : AnotherTopLevelClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<AnotherTopLevelClass>
        }

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(RAW_FIR)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class AnotherTopLevelClass : TopLevelClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<TopLevelClass>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class OuterClass : AnotherTopLevelClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<AnotherTopLevelClass>
        }

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(RAW_FIR)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class AnotherTopLevelClass : TopLevelClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<TopLevelClass>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class OuterClass : AnotherTopLevelClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<AnotherTopLevelClass>
        }

        public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(RAW_FIR)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class AnotherTopLevelClass : TopLevelClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<TopLevelClass>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class OuterClass : AnotherTopLevelClass {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<AnotherTopLevelClass>
        }

        public final? [ResolvedTo(COMPANION_GENERATION)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(SUPER_TYPES)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(SUPER_TYPES)] class AnotherTopLevelClass : R|TopLevelClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<TopLevelClass>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class OuterClass : R|AnotherTopLevelClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<AnotherTopLevelClass>
        }

        public final? [ResolvedTo(SUPER_TYPES)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(SUPER_TYPES)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(SUPER_TYPES)] class AnotherTopLevelClass : R|TopLevelClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<TopLevelClass>
        }

    }
    public final? [ResolvedTo(TYPES)] class OuterClass : R|AnotherTopLevelClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<AnotherTopLevelClass>
        }

        public final? [ResolvedTo(TYPES)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(SUPER_TYPES)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(SUPER_TYPES)] class AnotherTopLevelClass : R|TopLevelClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<TopLevelClass>
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<AnotherTopLevelClass>
        }

        public final [ResolvedTo(STATUS)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(SUPER_TYPES)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(SUPER_TYPES)] class AnotherTopLevelClass : R|TopLevelClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<TopLevelClass>
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<AnotherTopLevelClass>
        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<R|TopLevelClass|>
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<R|AnotherTopLevelClass|>
        }

        public final [ResolvedTo(CONTRACTS)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<R|TopLevelClass|>
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<R|AnotherTopLevelClass|>
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<R|TopLevelClass|>
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<R|AnotherTopLevelClass|>
        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<R|TopLevelClass|>
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<R|AnotherTopLevelClass|>
        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedClass.kt
    public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            LAZY_super<R|TopLevelClass|>
        }

    }
    public final [ResolvedTo(STATUS)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            LAZY_super<R|AnotherTopLevelClass|>
        }

        public final [ResolvedTo(BODY_RESOLVE)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] nestedClass.kt
    public open [ResolvedTo(BODY_RESOLVE)] class TopLevelClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(BODY_RESOLVE)] class AnotherTopLevelClass : R|TopLevelClass| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
            super<R|TopLevelClass|>()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class OuterClass : R|AnotherTopLevelClass| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OuterClass] constructor(): R|OuterClass| {
            super<R|AnotherTopLevelClass|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=NestedClass] constructor(): R|OuterClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
