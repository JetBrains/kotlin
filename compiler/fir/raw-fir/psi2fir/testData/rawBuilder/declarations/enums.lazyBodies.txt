FILE: enums.kt
    public final? enum class Order : R|kotlin/Enum<Order>| {
        private constructor(): R|Order| {
            LAZY_super<R|kotlin/Enum<Order>|>
        }

        public final static enum entry FIRST: R|Order|
        public final static enum entry SECOND: R|Order|
        public final static enum entry THIRD: R|Order|
        public final static fun values(): R|kotlin/Array<Order>| {
        }

        public final static fun valueOf(value: R|kotlin/String|): R|Order| {
        }

        public final static val entries: R|kotlin/enums/EnumEntries<Order>|
            public get(): R|kotlin/enums/EnumEntries<Order>|

    }
    public final? enum class Planet : R|kotlin/Enum<Planet>| {
        private constructor(m: Double, r: Double): R|Planet| {
            LAZY_super<R|kotlin/Enum<Planet>|>
        }

        public? final? val m: Double = R|<local>/m|
            public? get(): Double

        internal final? val r: Double = R|<local>/r|
            internal get(): Double

        public final static enum entry MERCURY: R|Planet| = LAZY_EXPRESSION
        public final static enum entry VENERA: R|Planet| = LAZY_EXPRESSION
        public final static enum entry EARTH: R|Planet| = LAZY_EXPRESSION
        public? final? val g: Double = LAZY_EXPRESSION
            public? get(): Double

        public? abstract fun sayHello(): R|kotlin/Unit|

        public final? companion object Companion : R|kotlin/Any| {
            private constructor(): R|Planet.Companion| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? const val G: <implicit> = LAZY_EXPRESSION
                public? get(): <implicit>

        }

        public final static fun values(): R|kotlin/Array<Planet>| {
        }

        public final static fun valueOf(value: R|kotlin/String|): R|Planet| {
        }

        public final static val entries: R|kotlin/enums/EnumEntries<Planet>|
            public get(): R|kotlin/enums/EnumEntries<Planet>|

    }
    public final? enum class PseudoInsn : R|kotlin/Enum<PseudoInsn>| {
        private constructor(signature: String = LAZY_EXPRESSION): R|PseudoInsn| {
            LAZY_super<R|kotlin/Enum<PseudoInsn>|>
        }

        public? final? val signature: String = R|<local>/signature|
            public? get(): String

        public final static enum entry FIX_STACK_BEFORE_JUMP: R|PseudoInsn| = LAZY_EXPRESSION
        public final static enum entry FAKE_ALWAYS_TRUE_IFEQ: R|PseudoInsn| = LAZY_EXPRESSION
        public final static enum entry FAKE_ALWAYS_FALSE_IFEQ: R|PseudoInsn| = LAZY_EXPRESSION
        public final static enum entry SAVE_STACK_BEFORE_TRY: R|PseudoInsn| = LAZY_EXPRESSION
        public final static enum entry RESTORE_STACK_IN_TRY_CATCH: R|PseudoInsn| = LAZY_EXPRESSION
        public final static enum entry STORE_NOT_NULL: R|PseudoInsn| = LAZY_EXPRESSION
        public final static enum entry AS_NOT_NULL: R|PseudoInsn| = LAZY_EXPRESSION
        public? final? fun emit(): R|kotlin/Unit| { LAZY_BLOCK }

        public final static fun values(): R|kotlin/Array<PseudoInsn>| {
        }

        public final static fun valueOf(value: R|kotlin/String|): R|PseudoInsn| {
        }

        public final static val entries: R|kotlin/enums/EnumEntries<PseudoInsn>|
            public get(): R|kotlin/enums/EnumEntries<PseudoInsn>|

    }
