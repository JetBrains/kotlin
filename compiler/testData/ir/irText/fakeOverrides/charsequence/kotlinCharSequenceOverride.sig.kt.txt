// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
abstract class A : CharSequence {
  // CHECK:
  //   Mangled name: A#<init>(){}
  //   Public signature: /A.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: A#chars(){}java.util.stream.IntStream?
  //   Public signature: /A.chars|3567322254123962192[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream?
  /* fake */ override fun chars(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: A#codePoints(){}java.util.stream.IntStream?
  //   Public signature: /A.codePoints|4245234750821486131[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream?
  /* fake */ override fun codePoints(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: A#get(kotlin.Int){}kotlin.Char
  //   Public signature: /A.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  abstract /* fake */ override operator fun get(index: Int): Char

  // CHECK JVM_IR:
  //   Mangled name: A#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence
  //   Public signature: /A.subSequence|7954975239934934955[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence
  abstract /* fake */ override fun subSequence(startIndex: Int, endIndex: Int): CharSequence

  // CHECK:
  //   Mangled name: A{}length
  //   Public signature: /A.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  abstract /* fake */ override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: A#<get-length>(){}kotlin.Int
    //   Public signature: /A.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: B
//   Public signature: /B|null[0]
abstract class B : Java1 {
  // CHECK:
  //   Mangled name: B#<init>(){}
  //   Public signature: /B.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: B#chars(){}java.util.stream.IntStream?
  //   Public signature: /B.chars|3567322254123962192[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream?
  /* fake */ override fun chars(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: B#codePoints(){}java.util.stream.IntStream?
  //   Public signature: /B.codePoints|4245234750821486131[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream?
  /* fake */ override fun codePoints(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: B#get(kotlin.Int){}kotlin.Char
  //   Public signature: /B.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  abstract /* fake */ override operator fun get(index: Int): Char

  // CHECK JVM_IR:
  //   Mangled name: B#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  //   Public signature: /B.subSequence|5195057419205148885[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  @Override
  /* fake */ override fun subSequence(startIndex: Int, endIndex: Int): @EnhancedNullability CharSequence

  // CHECK:
  //   Mangled name: B{}length
  //   Public signature: /B.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  abstract /* fake */ override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: B#<get-length>(){}kotlin.Int
    //   Public signature: /B.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: C
//   Public signature: /C|null[0]
class C : B {
  // CHECK:
  //   Mangled name: C{}length
  //   Public signature: /C.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: C#<get-length>(){}kotlin.Int
    //   Public signature: /C.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: C#<init>(kotlin.Int){}
  //   Public signature: /C.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(length: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: C#chars(){}java.util.stream.IntStream?
  //   Public signature: /C.chars|3567322254123962192[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream?
  /* fake */ override fun chars(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: C#codePoints(){}java.util.stream.IntStream?
  //   Public signature: /C.codePoints|4245234750821486131[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream?
  /* fake */ override fun codePoints(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: C#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  //   Public signature: /C.subSequence|5195057419205148885[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  @Override
  /* fake */ override fun subSequence(startIndex: Int, endIndex: Int): @EnhancedNullability CharSequence

  // CHECK JVM_IR:
  //   Mangled name: C#get(kotlin.Int){}kotlin.Char
  //   Public signature: /C.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  override operator fun get(index: Int): Char

}

// CHECK:
//   Mangled name: D
//   Public signature: /D|null[0]
abstract class D : Java1, Java2 {
  // CHECK:
  //   Mangled name: D#<init>(){}
  //   Public signature: /D.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: D#chars(){}java.util.stream.IntStream?
  //   Public signature: /D.chars|3567322254123962192[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream?
  /* fake */ override fun chars(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: D#codePoints(){}java.util.stream.IntStream?
  //   Public signature: /D.codePoints|4245234750821486131[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream?
  /* fake */ override fun codePoints(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: D#get(kotlin.Int){}kotlin.Char
  //   Public signature: /D.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  abstract /* fake */ override operator fun get(index: Int): Char

  // CHECK JVM_IR:
  //   Mangled name: D#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  //   Public signature: /D.subSequence|5195057419205148885[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  @Override
  /* fake */ override fun subSequence(startIndex: Int, endIndex: Int): @EnhancedNullability CharSequence

  // CHECK:
  //   Mangled name: D{}length
  //   Public signature: /D.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  abstract /* fake */ override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: D#<get-length>(){}kotlin.Int
    //   Public signature: /D.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: E
//   Public signature: /E|null[0]
class E : Java1, Java2 {
  // CHECK:
  //   Mangled name: E#<init>(){}
  //   Public signature: /E.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: E#chars(){}java.util.stream.IntStream?
  //   Public signature: /E.chars|3567322254123962192[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream?
  /* fake */ override fun chars(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: E#codePoints(){}java.util.stream.IntStream?
  //   Public signature: /E.codePoints|4245234750821486131[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream?
  /* fake */ override fun codePoints(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: E#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  //   Public signature: /E.subSequence|5195057419205148885[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  @Override
  /* fake */ override fun subSequence(startIndex: Int, endIndex: Int): @EnhancedNullability CharSequence

  // CHECK JVM_IR:
  //   Mangled name: E#get(kotlin.Int){}kotlin.Char
  //   Public signature: /E.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  override operator fun get(index: Int): Char

  // CHECK:
  //   Mangled name: E{}length
  //   Public signature: /E.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: E#<get-length>(){}kotlin.Int
    //   Public signature: /E.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    override get(): Int

}

// CHECK:
//   Mangled name: F
//   Public signature: /F|null[0]
abstract class F : KotlinInterface, CharSequence, CharSequence {
  // CHECK:
  //   Mangled name: F{}length
  //   Public signature: /F.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: F#<get-length>(){}kotlin.Int
    //   Public signature: /F.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: F#<init>(kotlin.Int){}
  //   Public signature: /F.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(length: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: F#charAt(kotlin.Int){}kotlin.Char
  //   Public signature: /F.charAt|7510361910485130692[0]
  //   Public signature debug description: charAt(kotlin.Int){}kotlin.Char
  abstract /* fake */ override fun charAt(p0: Int): Char

  // CHECK JVM_IR:
  //   Mangled name: F#get(kotlin.Any){}kotlin.Char
  //   Public signature: /F.get|3170591532530308767[0]
  //   Public signature debug description: get(kotlin.Any){}kotlin.Char
  abstract /* fake */ override fun get(index: Any): Char

  // CHECK JVM_IR:
  //   Mangled name: F#length(){}kotlin.Int
  //   Public signature: /F.length|2334822652264595979[0]
  //   Public signature debug description: length(){}kotlin.Int
  abstract /* fake */ override fun length(): Int

  // CHECK JVM_IR:
  //   Mangled name: F#chars(){}java.util.stream.IntStream
  //   Public signature: /F.chars|1246952257971230815[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream
  override fun chars(): IntStream

  // CHECK JVM_IR:
  //   Mangled name: F#codePoints(){}java.util.stream.IntStream
  //   Public signature: /F.codePoints|-6284654057150065431[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream
  override fun codePoints(): IntStream

  // CHECK JVM_IR:
  //   Mangled name: F#get(kotlin.Int){}kotlin.Char
  //   Public signature: /F.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  override operator fun get(index: Int): Char

  // CHECK JVM_IR:
  //   Mangled name: F#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence
  //   Public signature: /F.subSequence|7954975239934934955[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence
  override fun subSequence(startIndex: Int, endIndex: Int): CharSequence

}

// CHECK:
//   Mangled name: G
//   Public signature: /G|null[0]
abstract class G : Java1, KotlinInterface {
  // CHECK:
  //   Mangled name: G#<init>(){}
  //   Public signature: /G.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: G#chars(){}java.util.stream.IntStream?
  //   Public signature: /G.chars|3567322254123962192[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream?
  /* fake */ override fun chars(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: G#codePoints(){}java.util.stream.IntStream?
  //   Public signature: /G.codePoints|4245234750821486131[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream?
  /* fake */ override fun codePoints(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: G#get(kotlin.Any){}kotlin.Char
  //   Public signature: /G.get|3170591532530308767[0]
  //   Public signature debug description: get(kotlin.Any){}kotlin.Char
  abstract /* fake */ override fun get(index: Any): Char

  // CHECK JVM_IR:
  //   Mangled name: G#get(kotlin.Int){}kotlin.Char
  //   Public signature: /G.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  abstract /* fake */ override operator fun get(index: Int): Char

  // CHECK JVM_IR:
  //   Mangled name: G#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  //   Public signature: /G.subSequence|5195057419205148885[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  @Override
  /* fake */ override fun subSequence(startIndex: Int, endIndex: Int): @EnhancedNullability CharSequence

  // CHECK:
  //   Mangled name: G{}length
  //   Public signature: /G.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  abstract /* fake */ override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: G#<get-length>(){}kotlin.Int
    //   Public signature: /G.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: H
//   Public signature: /H|null[0]
class H : Java1, KotlinInterface {
  // CHECK:
  //   Mangled name: H#<init>(){}
  //   Public signature: /H.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: H#chars(){}java.util.stream.IntStream?
  //   Public signature: /H.chars|3567322254123962192[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream?
  /* fake */ override fun chars(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: H#codePoints(){}java.util.stream.IntStream?
  //   Public signature: /H.codePoints|4245234750821486131[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream?
  /* fake */ override fun codePoints(): IntStream?

  // CHECK JVM_IR:
  //   Mangled name: H#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  //   Public signature: /H.subSequence|5195057419205148885[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence{EnhancedNullability}
  @Override
  /* fake */ override fun subSequence(startIndex: Int, endIndex: Int): @EnhancedNullability CharSequence

  // CHECK JVM_IR:
  //   Mangled name: H#get(kotlin.Any){}kotlin.Char
  //   Public signature: /H.get|3170591532530308767[0]
  //   Public signature debug description: get(kotlin.Any){}kotlin.Char
  override operator fun get(index: Any): Char

  // CHECK JVM_IR:
  //   Mangled name: H#get(kotlin.Int){}kotlin.Char
  //   Public signature: /H.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  override operator fun get(index: Int): Char

  // CHECK:
  //   Mangled name: H{}length
  //   Public signature: /H.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: H#<get-length>(){}kotlin.Int
    //   Public signature: /H.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    override get(): Int

}

// CHECK:
//   Mangled name: I
//   Public signature: /I|null[0]
abstract class I : CharSequence, CharSequence {
  // CHECK:
  //   Mangled name: I{}length
  //   Public signature: /I.length|8693345930578737573[0]
  //   Public signature debug description: {}length
  override val length: Int
    // CHECK JVM_IR:
    //   Mangled name: I#<get-length>(){}kotlin.Int
    //   Public signature: /I.length.<get-length>|2176130084070422186[0]
    //   Public signature debug description: <get-length>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: I#<init>(kotlin.Int){}
  //   Public signature: /I.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(length: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: I#charAt(kotlin.Int){}kotlin.Char
  //   Public signature: /I.charAt|7510361910485130692[0]
  //   Public signature debug description: charAt(kotlin.Int){}kotlin.Char
  abstract /* fake */ override fun charAt(p0: Int): Char

  // CHECK JVM_IR:
  //   Mangled name: I#length(){}kotlin.Int
  //   Public signature: /I.length|2334822652264595979[0]
  //   Public signature debug description: length(){}kotlin.Int
  abstract /* fake */ override fun length(): Int

  // CHECK JVM_IR:
  //   Mangled name: I#chars(){}java.util.stream.IntStream
  //   Public signature: /I.chars|1246952257971230815[0]
  //   Public signature debug description: chars(){}java.util.stream.IntStream
  override fun chars(): IntStream

  // CHECK JVM_IR:
  //   Mangled name: I#codePoints(){}java.util.stream.IntStream
  //   Public signature: /I.codePoints|-6284654057150065431[0]
  //   Public signature debug description: codePoints(){}java.util.stream.IntStream
  override fun codePoints(): IntStream

  // CHECK JVM_IR:
  //   Mangled name: I#get(kotlin.Int){}kotlin.Char
  //   Public signature: /I.get|6519934306502810002[0]
  //   Public signature debug description: get(kotlin.Int){}kotlin.Char
  override operator fun get(index: Int): Char

  // CHECK JVM_IR:
  //   Mangled name: I#subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence
  //   Public signature: /I.subSequence|7954975239934934955[0]
  //   Public signature debug description: subSequence(kotlin.Int;kotlin.Int){}kotlin.CharSequence
  override fun subSequence(startIndex: Int, endIndex: Int): CharSequence

}

// CHECK:
//   Mangled name: KotlinInterface
//   Public signature: /KotlinInterface|null[0]
interface KotlinInterface {
  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#get(kotlin.Any){}kotlin.Char
  //   Public signature: /KotlinInterface.get|3170591532530308767[0]
  //   Public signature debug description: get(kotlin.Any){}kotlin.Char
  abstract fun get(index: Any): Char

}

// CHECK:
//   Mangled name: #test(B;C;D;E;F;G;H;I){}
//   Public signature: /test|2768829396992774586[0]
//   Public signature debug description: test(B;C;D;E;F;G;H;I){}
fun test(b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I): Unit
