@kotlin.internal.IntrinsicConstEvaluation
operator fun compareTo(other: kotlin.Byte): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun compareTo(other: kotlin.Short): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
open operator fun compareTo(other: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun compareTo(other: kotlin.Long): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun compareTo(other: kotlin.Float): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun compareTo(other: kotlin.Double): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun plus(other: kotlin.Byte): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun plus(other: kotlin.Short): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun plus(other: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun plus(other: kotlin.Long): kotlin.Long

@kotlin.internal.IntrinsicConstEvaluation
operator fun plus(other: kotlin.Float): kotlin.Float

@kotlin.internal.IntrinsicConstEvaluation
operator fun plus(other: kotlin.Double): kotlin.Double

@kotlin.internal.IntrinsicConstEvaluation
operator fun minus(other: kotlin.Byte): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun minus(other: kotlin.Short): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun minus(other: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun minus(other: kotlin.Long): kotlin.Long

@kotlin.internal.IntrinsicConstEvaluation
operator fun minus(other: kotlin.Float): kotlin.Float

@kotlin.internal.IntrinsicConstEvaluation
operator fun minus(other: kotlin.Double): kotlin.Double

@kotlin.internal.IntrinsicConstEvaluation
operator fun times(other: kotlin.Byte): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun times(other: kotlin.Short): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun times(other: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun times(other: kotlin.Long): kotlin.Long

@kotlin.internal.IntrinsicConstEvaluation
operator fun times(other: kotlin.Float): kotlin.Float

@kotlin.internal.IntrinsicConstEvaluation
operator fun times(other: kotlin.Double): kotlin.Double

@kotlin.internal.IntrinsicConstEvaluation
operator fun div(other: kotlin.Byte): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun div(other: kotlin.Short): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun div(other: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun div(other: kotlin.Long): kotlin.Long

@kotlin.internal.IntrinsicConstEvaluation
operator fun div(other: kotlin.Float): kotlin.Float

@kotlin.internal.IntrinsicConstEvaluation
operator fun div(other: kotlin.Double): kotlin.Double

@kotlin.SinceKotlin(version = "1.1")
@kotlin.internal.IntrinsicConstEvaluation
operator fun rem(other: kotlin.Byte): kotlin.Int

@kotlin.SinceKotlin(version = "1.1")
@kotlin.internal.IntrinsicConstEvaluation
operator fun rem(other: kotlin.Short): kotlin.Int

@kotlin.SinceKotlin(version = "1.1")
@kotlin.internal.IntrinsicConstEvaluation
operator fun rem(other: kotlin.Int): kotlin.Int

@kotlin.SinceKotlin(version = "1.1")
@kotlin.internal.IntrinsicConstEvaluation
operator fun rem(other: kotlin.Long): kotlin.Long

@kotlin.SinceKotlin(version = "1.1")
@kotlin.internal.IntrinsicConstEvaluation
operator fun rem(other: kotlin.Float): kotlin.Float

@kotlin.SinceKotlin(version = "1.1")
@kotlin.internal.IntrinsicConstEvaluation
operator fun rem(other: kotlin.Double): kotlin.Double

operator fun inc(): kotlin.Int

operator fun dec(): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun unaryPlus(): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
operator fun unaryMinus(): kotlin.Int

operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange

operator fun rangeTo(other: kotlin.Short): kotlin.ranges.IntRange

operator fun rangeTo(other: kotlin.Int): kotlin.ranges.IntRange

operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange

@kotlin.SinceKotlin(version = "1.9")
@kotlin.WasExperimental(markerClass = [kotlin.ExperimentalStdlibApi::class])
operator fun rangeUntil(other: kotlin.Byte): kotlin.ranges.IntRange

@kotlin.SinceKotlin(version = "1.9")
@kotlin.WasExperimental(markerClass = [kotlin.ExperimentalStdlibApi::class])
operator fun rangeUntil(other: kotlin.Short): kotlin.ranges.IntRange

@kotlin.SinceKotlin(version = "1.9")
@kotlin.WasExperimental(markerClass = [kotlin.ExperimentalStdlibApi::class])
operator fun rangeUntil(other: kotlin.Int): kotlin.ranges.IntRange

@kotlin.SinceKotlin(version = "1.9")
@kotlin.WasExperimental(markerClass = [kotlin.ExperimentalStdlibApi::class])
operator fun rangeUntil(other: kotlin.Long): kotlin.ranges.LongRange

@kotlin.internal.IntrinsicConstEvaluation
infix fun shl(bitCount: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
infix fun shr(bitCount: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
infix fun ushr(bitCount: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
infix fun and(other: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
infix fun or(other: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
infix fun xor(other: kotlin.Int): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
fun inv(): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
open fun toByte(): kotlin.Byte

@kotlin.internal.IntrinsicConstEvaluation
open fun toChar(): kotlin.Char

@kotlin.internal.IntrinsicConstEvaluation
open fun toShort(): kotlin.Short

@kotlin.internal.IntrinsicConstEvaluation
open fun toInt(): kotlin.Int

@kotlin.internal.IntrinsicConstEvaluation
open fun toLong(): kotlin.Long

@kotlin.internal.IntrinsicConstEvaluation
open fun toFloat(): kotlin.Float

@kotlin.internal.IntrinsicConstEvaluation
open fun toDouble(): kotlin.Double

@kotlin.internal.IntrinsicConstEvaluation
open fun toString(): kotlin.String

@kotlin.internal.IntrinsicConstEvaluation
open operator fun equals(other: kotlin.Any?): kotlin.Boolean

open fun hashCode(): kotlin.Int

companion object

private constructor()