FILE: annotationsOnNullableParenthesizedTypes.kt
    public final? interface AnnotationsOnNullableParenthesizedTypes : R|kotlin/Any| {
        public? final? fun B<@A() C?>.receiverArgument(): R|kotlin/Unit| {
        }

        public? final? fun parameter(a: @A() C?): R|kotlin/Unit| {
        }

        public? final? fun parameterArgument(a: B<@A() C?>): R|kotlin/Unit| {
        }

        public? final? fun returnValue(): @A() C?

        public? final? fun <T> returnTypeParameterValue(): @A() T?

        public? final? fun returnArgument(): B<@A() C?>

        public? final? val lambdaType: @A() ( () -> C )?
            public? [ContainingClassKey=AnnotationsOnNullableParenthesizedTypes] get(): @A() ( () -> C )?

        public? final? val lambdaParameter: ( (@A() C?) -> C )
            public? [ContainingClassKey=AnnotationsOnNullableParenthesizedTypes] get(): ( (@A() C?) -> C )

        public? final? val lambdaReturnValue: ( () -> @A() C? )
            public? [ContainingClassKey=AnnotationsOnNullableParenthesizedTypes] get(): ( () -> @A() C? )

        public? final? val lambdaReceiver: ( @A() C?.() -> C )
            public? [ContainingClassKey=AnnotationsOnNullableParenthesizedTypes] get(): ( @A() C?.() -> C )

    }
    @Target(AnnotationTarget#.TYPE#, AnnotationTarget#.TYPE_PARAMETER#) public final? annotation class A : R|kotlin/Annotation| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    public final? interface B<T> : R|kotlin/Any| {
    }
    public final? interface C : R|kotlin/Any| {
    }
