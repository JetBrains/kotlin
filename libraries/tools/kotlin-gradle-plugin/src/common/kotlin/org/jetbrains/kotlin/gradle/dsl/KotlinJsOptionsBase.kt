// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
package org.jetbrains.kotlin.gradle.dsl

@Suppress("DEPRECATION")
internal abstract class KotlinJsOptionsBase : org.jetbrains.kotlin.gradle.dsl.KotlinJsOptions {

    private var allWarningsAsErrorsField: kotlin.Boolean? = null
    override var allWarningsAsErrors: kotlin.Boolean
        get() = allWarningsAsErrorsField ?: false
        set(value) {
            allWarningsAsErrorsField = value
        }

    private var suppressWarningsField: kotlin.Boolean? = null
    override var suppressWarnings: kotlin.Boolean
        get() = suppressWarningsField ?: false
        set(value) {
            suppressWarningsField = value
        }

    private var verboseField: kotlin.Boolean? = null
    override var verbose: kotlin.Boolean
        get() = verboseField ?: false
        set(value) {
            verboseField = value
        }

    override var apiVersion: kotlin.String? = null

    override var languageVersion: kotlin.String? = null

    private var useFirField: kotlin.Boolean? = null
    override var useFir: kotlin.Boolean
        get() = useFirField ?: false
        set(value) {
            useFirField = value
        }

    private var friendModulesDisabledField: kotlin.Boolean? = null
    override var friendModulesDisabled: kotlin.Boolean
        get() = friendModulesDisabledField ?: false
        set(value) {
            friendModulesDisabledField = value
        }

    private var mainField: kotlin.String? = null
    override var main: kotlin.String
        get() = mainField ?: "call"
        set(value) {
            mainField = value
        }

    private var metaInfoField: kotlin.Boolean? = null
    override var metaInfo: kotlin.Boolean
        get() = metaInfoField ?: true
        set(value) {
            metaInfoField = value
        }

    private var moduleKindField: kotlin.String? = null
    override var moduleKind: kotlin.String
        get() = moduleKindField ?: "plain"
        set(value) {
            moduleKindField = value
        }

    private var noStdlibField: kotlin.Boolean? = null
    override var noStdlib: kotlin.Boolean
        get() = noStdlibField ?: true
        set(value) {
            noStdlibField = value
        }

    override var outputFile: kotlin.String? = null

    private var sourceMapField: kotlin.Boolean? = null
    override var sourceMap: kotlin.Boolean
        get() = sourceMapField ?: false
        set(value) {
            sourceMapField = value
        }

    override var sourceMapEmbedSources: kotlin.String? = null

    override var sourceMapPrefix: kotlin.String? = null

    private var targetField: kotlin.String? = null
    override var target: kotlin.String
        get() = targetField ?: "v5"
        set(value) {
            targetField = value
        }

    private var typedArraysField: kotlin.Boolean? = null
    override var typedArrays: kotlin.Boolean
        get() = typedArraysField ?: true
        set(value) {
            typedArraysField = value
        }

    internal open fun updateArguments(args: org.jetbrains.kotlin.cli.common.arguments.K2JSCompilerArguments) {
        allWarningsAsErrorsField?.let { args.allWarningsAsErrors = it }
        suppressWarningsField?.let { args.suppressWarnings = it }
        verboseField?.let { args.verbose = it }
        apiVersion?.let { args.apiVersion = it }
        languageVersion?.let { args.languageVersion = it }
        useFirField?.let { args.useFir = it }
        friendModulesDisabledField?.let { args.friendModulesDisabled = it }
        mainField?.let { args.main = it }
        metaInfoField?.let { args.metaInfo = it }
        moduleKindField?.let { args.moduleKind = it }
        noStdlibField?.let { args.noStdlib = it }
        outputFile?.let { args.outputFile = it }
        sourceMapField?.let { args.sourceMap = it }
        sourceMapEmbedSources?.let { args.sourceMapEmbedSources = it }
        sourceMapPrefix?.let { args.sourceMapPrefix = it }
        targetField?.let { args.target = it }
        typedArraysField?.let { args.typedArrays = it }
    }
}

internal fun org.jetbrains.kotlin.cli.common.arguments.K2JSCompilerArguments.fillDefaultValues() {
    allWarningsAsErrors = false
    suppressWarnings = false
    verbose = false
    apiVersion = null
    languageVersion = null
    useFir = false
    friendModulesDisabled = false
    main = "call"
    metaInfo = true
    moduleKind = "plain"
    noStdlib = true
    outputFile = null
    sourceMap = false
    sourceMapEmbedSources = null
    sourceMapPrefix = null
    target = "v5"
    typedArrays = true
}
