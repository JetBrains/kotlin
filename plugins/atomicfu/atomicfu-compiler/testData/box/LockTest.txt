@kotlin.Metadata
public final class LockTest {
    // source: 'LockTest.kt'
    private final static @org.jetbrains.annotations.NotNull field inProgressLock$FU: java.util.concurrent.atomic.AtomicIntegerFieldUpdater
    private volatile @kotlin.jvm.Volatile field inProgressLock: int
    static method <clinit>(): void
    public method <init>(): void
    public final method testLock(): void
}

@kotlin.Metadata
public final class LockTestKt {
    // source: 'LockTest.kt'
    public final static @org.jetbrains.annotations.NotNull method box(): java.lang.String
    public final static @org.jetbrains.annotations.NotNull method reflectionTest(@org.jetbrains.annotations.NotNull p0: java.lang.String, @org.jetbrains.annotations.NotNull p1: java.util.Map): java.util.List
    private final static method tryAcquire$atomicfu$array(p0: java.lang.Object, p1: java.util.concurrent.atomic.AtomicIntegerArray, p2: int): boolean
    private final static method tryAcquire$atomicfu(p0: java.lang.Object, p1: java.util.concurrent.atomic.AtomicIntegerFieldUpdater): boolean
}
