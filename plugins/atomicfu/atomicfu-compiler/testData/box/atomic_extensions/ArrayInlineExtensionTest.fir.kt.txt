class AtomicBooleanArrayInlineExtensionTest {
  private val booleanArr: AtomicIntArray
    field = AtomicIntArray(size = 10)
    private get(): AtomicIntArray {
      return <this>.#booleanArr
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Boolean): Boolean {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = when {
          cur -> 1
          else -> 0
        }, newValue = when {
          to -> 1
          else -> 0
        }) -> return EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean
      }
    }
)
  }

  private inline fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, to: Boolean): Boolean {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      when {
        compareAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> return atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean
      }
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Boolean): Boolean {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      handler$atomicfu.set(index = index$atomicfu, newValue = when {
        false -> 1
        else -> 0
      })
      return when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = when {
          cur -> 1
          else -> 0
        }, newValue = when {
          to -> 1
          else -> 0
        }) -> EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean
        else -> EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean.not()
      }
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, to: Boolean): Boolean {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      atomicSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ newValue = false)
      return when {
        compareAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean
        else -> atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean.not()
      }
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, first: Boolean, second: Boolean, index: Int): Boolean {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = when {
        cur -> 1
        else -> 0
      }, newValue = when {
        first -> 1
        else -> 0
      }) /*~> Unit */
      <this>.<get-booleanArr>().compareAndSet(index = index, expectedValue = when {
        first -> 1
        else -> 0
      }, newValue = when {
        second -> 1
        else -> 0
      }) /*~> Unit */
      return EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1) as Boolean
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, first: Boolean, second: Boolean, index: Int): Boolean {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      compareAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = first) /*~> Unit */
      <this>.<get-booleanArr>().compareAndSet(index = index, expectedValue = when {
        first -> 1
        else -> 0
      }, newValue = when {
        second -> 1
        else -> 0
      }) /*~> Unit */
      return atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */) as Boolean
    }
)
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Boolean, Unit>) {
    while (true) { // BLOCK
      val tmp_0: Boolean = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1)
      action$atomicfu.invoke(p1 = tmp_0)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, action$atomicfu: Function1<Boolean, Unit>) {
    while (true) { // BLOCK
      val tmp_1: T = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_1)
    }
  }

  private inline fun casLoop(to: Boolean): Boolean {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-booleanArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      when {
        <this>.<get-booleanArr>().compareAndSet(index = 0, expectedValue = when {
          cur -> 1
          else -> 0
        }, newValue = when {
          to -> 1
          else -> 0
        }) -> return EQEQ(arg0 = <this>.<get-booleanArr>().get(index = 0), arg1 = 1) as Boolean
      }
    }
)
  }

  private inline fun casLoopExpression(to: Boolean): Boolean {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-booleanArr>(), index$atomicfu = 3, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      when {
        <this>.<get-booleanArr>().compareAndSet(index = 3, expectedValue = when {
          cur -> 1
          else -> 0
        }, newValue = when {
          to -> 1
          else -> 0
        }) -> return EQEQ(arg0 = <this>.<get-booleanArr>().get(index = 3), arg1 = 1) as Boolean
      }
    }
)
  }

  fun test() {
    assertEquals<Boolean>(expected = true, actual = <this>.casLoop(to = true))
    assertEquals<Boolean>(expected = true, actual = <this>.casLoopExpression(to = true))
    assertEquals<Boolean>(expected = true, actual = <this>.extensionLoop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-booleanArr>(), index$atomicfu = 1, to = true))
    assertEquals<Boolean>(expected = true, actual = <this>.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-booleanArr>(), index$atomicfu = 1, to = true))
    assertEquals<Boolean>(expected = false, actual = <this>.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-booleanArr>(), index$atomicfu = 7, first = true, second = false, index = 7))
  }

}

class AtomicIntArrayInlineExtensionTest {
  private val intArr: AtomicIntArray
    field = AtomicIntArray(size = 10)
    private get(): AtomicIntArray {
      return <this>.#intArr
    }

  private var a$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun bar$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, delta: Int): Int {
    return <this>.foo$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, to = handler$atomicfu.get(index = index$atomicfu) as Int.plus(other = delta))
  }

  private inline fun bar$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, delta: Int): Int {
    return <this>.foo$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, to = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int.plus(other = delta))
  }

  private inline fun extensionLoop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> return handler$atomicfu.get(index = index$atomicfu) as Int
      }
      return 777
    }
)
  }

  private inline fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
      }
      return 777
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      handler$atomicfu.set(index = index$atomicfu, newValue = cur.plus(other = 10))
      return when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> handler$atomicfu.get(index = index$atomicfu) as Int
        else -> handler$atomicfu.incrementAndGet(index = index$atomicfu)
      }
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      atomicSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ newValue = cur.plus(other = 10))
      return when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
        else -> getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 1).plus(other = 1)
      }
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, first: Int, second: Int, index: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = first) /*~> Unit */
      <this>.<get-intArr>().compareAndSet(index = index, expectedValue = first, newValue = second) /*~> Unit */
      return handler$atomicfu.get(index = index$atomicfu) as Int
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, first: Int, second: Int, index: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = first) /*~> Unit */
      <this>.<get-intArr>().compareAndSet(index = index, expectedValue = first, newValue = second) /*~> Unit */
      return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
    }
)
  }

  private inline fun extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) /*~> Unit */
      <this>.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
        return AtomicIntArrayInlineExtensionTest<this>::a$volatile
      }
, to = 5) /*~> Unit */
      return handler$atomicfu.get(index = index$atomicfu) as Int
    }
)
  }

  private inline fun extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) /*~> Unit */
      <this>.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
        return AtomicIntArrayInlineExtensionTest<this>::a$volatile
      }
, to = 5) /*~> Unit */
      return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
    }
)
  }

  private inline fun foo$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, to: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> return 777
        else -> return handler$atomicfu.get(index = index$atomicfu) as Int
      }
    }
)
  }

  private inline fun foo$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, to: Int): Int {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> return 777
        else -> return atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */) as Int
      }
    }
)
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_2: Int = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_2)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_3: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_3)
    }
  }

  private inline fun casLoop(to: Int): Int {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        <this>.<get-intArr>().compareAndSet(index = 0, expectedValue = cur, newValue = to) -> return <this>.<get-intArr>().get(index = 0) as Int
      }
      return 777
    }
)
  }

  private inline fun casLoopExpression(to: Int): Int {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 3, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        <this>.<get-intArr>().compareAndSet(index = 3, expectedValue = cur, newValue = to) -> return <this>.<get-intArr>().get(index = 3) as Int
      }
      return 777
    }
)
  }

  fun test() {
    assertEquals<Int>(expected = 5, actual = <this>.casLoop(to = 5))
    assertEquals<Int>(expected = 6, actual = <this>.casLoopExpression(to = 6))
    assertEquals<Int>(expected = 66, actual = <this>.extensionLoop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 1, to = 66))
    assertEquals<Int>(expected = 66, actual = <this>.extensionLoop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 2, to = 66))
    assertEquals<Int>(expected = 77, actual = <this>.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 1, to = 777))
    assertEquals<Int>(expected = 99, actual = <this>.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 1, first = 88, second = 99, index = 1))
    assertEquals<Int>(expected = 100, actual = <this>.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 1, to = 100))
    assertEquals<Int>(expected = 777, actual = <this>.bar$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 1, delta = 100))
  }

}

class AtomicLongArrayInlineExtensionTest {
  private val longArr: AtomicLongArray
    field = AtomicLongArray(size = 10)
    private get(): AtomicLongArray {
      return <this>.#longArr
    }

  private var a$volatile: Long
    field = 0L
    private get(): Long {
      return <this>.#a$volatile
    }
    private set(value: Long) {
      return <this>.#a$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun bar$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, delta: Long): Long {
    return <this>.foo$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, to = handler$atomicfu.get(index = index$atomicfu) as Long.plus(other = delta))
  }

  private inline fun bar$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, delta: Long): Long {
    return <this>.foo$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = handler$atomicfu, to = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long.plus(other = delta))
  }

  private inline fun extensionLoop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, to: Long): Long {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> return handler$atomicfu.get(index = index$atomicfu) as Long
      }
      return 777L
    }
)
  }

  private inline fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, to: Long): Long {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      when {
        compareAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> return atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long
      }
      return 777L
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, to: Long): Long {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      handler$atomicfu.set(index = index$atomicfu, newValue = cur.plus(other = 10L))
      return when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> handler$atomicfu.get(index = index$atomicfu) as Long
        else -> handler$atomicfu.incrementAndGet(index = index$atomicfu)
      }
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, to: Long): Long {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      atomicSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ newValue = cur.plus(other = 10L))
      return when {
        compareAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long
        else -> getAndAddField(/* <this> = handler$atomicfu.invoke(), */ delta = 1L /*as Long */).plus(other = 1L)
      }
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, first: Long, second: Long, index: Int): Long {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = first) /*~> Unit */
      <this>.<get-longArr>().compareAndSet(index = index, expectedValue = first, newValue = second) /*~> Unit */
      return handler$atomicfu.get(index = index$atomicfu) as Long
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, first: Long, second: Long, index: Int): Long {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      compareAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = first) /*~> Unit */
      <this>.<get-longArr>().compareAndSet(index = index, expectedValue = first, newValue = second) /*~> Unit */
      return atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long
    }
)
  }

  private inline fun extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, to: Long): Long {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) /*~> Unit */
      <this>.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Long> {
        return AtomicLongArrayInlineExtensionTest<this>::a$volatile
      }
, to = 5L) /*~> Unit */
      return handler$atomicfu.get(index = index$atomicfu) as Long
    }
)
  }

  private inline fun extensionLoopRecursive$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, to: Long): Long {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      compareAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) /*~> Unit */
      <this>.extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Long> {
        return AtomicLongArrayInlineExtensionTest<this>::a$volatile
      }
, to = 5L) /*~> Unit */
      return atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long
    }
)
  }

  private inline fun foo$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, to: Long): Long {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> return 777L
        else -> return handler$atomicfu.get(index = index$atomicfu) as Long
      }
    }
)
  }

  private inline fun foo$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, to: Long): Long {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: Long) {
      when {
        compareAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> return 777L
        else -> return atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */) as Long
      }
    }
)
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, action$atomicfu: Function1<Long, Unit>) {
    while (true) { // BLOCK
      val tmp_4: Long = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_4)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, action$atomicfu: Function1<Long, Unit>) {
    while (true) { // BLOCK
      val tmp_5: T = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_5)
    }
  }

  private inline fun casLoop(to: Long): Long {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(cur: Long) {
      when {
        <this>.<get-longArr>().compareAndSet(index = 0, expectedValue = cur, newValue = to) -> return <this>.<get-longArr>().get(index = 0) as Long
      }
      return 777L
    }
)
  }

  private inline fun casLoopExpression(to: Long): Long {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 3, action$atomicfu = local fun <anonymous>(cur: Long) {
      when {
        <this>.<get-longArr>().compareAndSet(index = 3, expectedValue = cur, newValue = to) -> return <this>.<get-longArr>().get(index = 3) as Long
      }
      return 777L
    }
)
  }

  fun test() {
    assertEquals<Long>(expected = 5L, actual = <this>.casLoop(to = 5L))
    assertEquals<Long>(expected = 6L, actual = <this>.casLoopExpression(to = 6L))
    assertEquals<Long>(expected = 66L, actual = <this>.extensionLoop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 1, to = 66L))
    assertEquals<Long>(expected = 66L, actual = <this>.extensionLoop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 2, to = 66L))
    assertEquals<Long>(expected = 77L, actual = <this>.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 1, to = 777L))
    assertEquals<Long>(expected = 99L, actual = <this>.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 1, first = 88L, second = 99L, index = 1))
    assertEquals<Long>(expected = 100L, actual = <this>.extensionLoopRecursive$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 1, to = 100L))
    assertEquals<Long>(expected = 777L, actual = <this>.bar$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 1, delta = 100L))
  }

}

class AtomicRefArrayInlineExtensionTest {
  private val refArr: AtomicArray<T>
    field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 10))
    private get(): AtomicArray<T> {
      return <this>.#refArr
    }

  private var a$volatile: Long
    field = 0L
    private get(): Long {
      return <this>.#a$volatile
    }
    private set(value: Long) {
      return <this>.#a$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun extensionLoop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, to: String): String? {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: String?) {
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> return handler$atomicfu.get(index = index$atomicfu) as Any?
        else -> "incorrect"
      } /*~> Unit */
    }
)
  }

  private inline fun extensionLoop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, to: String): String? {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: String?) {
      when {
        compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> return atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any?
        else -> "incorrect"
      } /*~> Unit */
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, to: String): String? {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: String?) {
      handler$atomicfu.set(index = index$atomicfu, newValue = "aaa")
      return when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = to) -> handler$atomicfu.get(index = index$atomicfu) as Any?
        else -> "CAS_failed"
      }
    }
)
  }

  private inline fun extensionLoopExpression$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, to: String): String? {
    return <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: String?) {
      atomicSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ newValue = "aaa")
      return when {
        compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = to) -> atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any?
        else -> "CAS_failed"
      }
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, first: String, second: String, index: Int): String? {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = handler$atomicfu, index$atomicfu = index$atomicfu, action$atomicfu = local fun <anonymous>(cur: String?) {
      handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = cur, newValue = first) /*~> Unit */
      <this>.<get-refArr>().compareAndSet(index = index, expectedValue = first, newValue = second) /*~> Unit */
      return handler$atomicfu.get(index = index$atomicfu) as Any?
    }
)
  }

  private inline fun extensionLoopMixedReceivers$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, first: String, second: String, index: Int): String? {
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = handler$atomicfu, action$atomicfu = local fun <anonymous>(cur: String?) {
      compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = cur, newValue = first) /*~> Unit */
      <this>.<get-refArr>().compareAndSet(index = index, expectedValue = first, newValue = second) /*~> Unit */
      return atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any?
    }
)
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_6: T = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_6)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_7: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_7)
    }
  }

  private inline fun casLoop(to: String): String? {
    <this>.loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(cur: String?) {
      when {
        <this>.<get-refArr>().compareAndSet(index = 0, expectedValue = cur, newValue = to) -> return <this>.<get-refArr>().get(index = 0) as Any?
      }
    }
)
  }

  private inline fun casLoopExpression(to: String): String? {
    return <this>.loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 3, action$atomicfu = local fun <anonymous>(cur: String?) {
      when {
        <this>.<get-refArr>().compareAndSet(index = 3, expectedValue = cur, newValue = to) -> return <this>.<get-refArr>().get(index = 3) as Any?
      }
    }
)
  }

  fun test() {
    assertEquals<String?>(expected = "aaa", actual = <this>.casLoop(to = "aaa"))
    assertEquals<String?>(expected = "bbb", actual = <this>.casLoopExpression(to = "bbb"))
    assertEquals<String?>(expected = "ccc", actual = <this>.extensionLoop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 1, to = "ccc"))
    assertEquals<String?>(expected = "CAS_failed", actual = <this>.extensionLoopExpression$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 1, to = "ccc"))
    assertEquals<String?>(expected = "bbb", actual = <this>.extensionLoopMixedReceivers$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 7, first = "aaa", second = "bbb", index = 7))
  }

}

fun box(): String {
  AtomicIntArrayInlineExtensionTest().test()
  AtomicLongArrayInlineExtensionTest().test()
  AtomicBooleanArrayInlineExtensionTest().test()
  AtomicRefArrayInlineExtensionTest().test()
  return "OK"
}
