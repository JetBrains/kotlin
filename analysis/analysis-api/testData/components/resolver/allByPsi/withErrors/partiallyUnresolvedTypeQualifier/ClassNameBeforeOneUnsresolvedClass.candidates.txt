KtFile: 'ClassNameBeforeOneUnsresolvedClass.kt'
  NO_CANDIDATES

KtPackageDirective(0,0): ''
  NO_CANDIDATES

KtImportList(0,0): ''
  NO_CANDIDATES

KtClass(1,10): 'class Foo'
  NO_CANDIDATES

KtClass(12,45): 'class C {'
  NO_CANDIDATES

KtClassBody(20,45): '{'
  NO_CANDIDATES

KtProperty(26,43): 'val prop: Foo.Bar'
  NO_CANDIDATES

KtTypeReference(36,43): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(36,43): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(36,39): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(36,39): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(40,43): 'Bar'
  NO_CANDIDATES

KtNamedFunction(47,91): 'fun testFun() {'
  NO_CANDIDATES

KtParameterList(58,60): '()'
  NO_CANDIDATES

KtBlockExpression(61,91): '{'
  NO_CANDIDATES

KtProperty(67,89): 'val localProp: Foo.Bar'
  NO_CANDIDATES

KtTypeReference(82,89): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(82,89): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(82,85): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(82,85): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(86,89): 'Bar'
  NO_CANDIDATES

KtNamedFunction(93,129): 'fun <T> take(action: (T) -> Unit) {}'
  NO_CANDIDATES

KtTypeParameterList(97,100): '<T>'
  NO_CANDIDATES

KtTypeParameter(98,99): 'T'
  NO_CANDIDATES

KtParameterList(105,126): '(action: (T) -> Unit)'
  NO_CANDIDATES

KtParameter(106,125): 'action: (T) -> Unit'
  NO_CANDIDATES

KtTypeReference(114,125): '(T) -> Unit'
  NO_CANDIDATES

KtFunctionType(114,125): '(T) -> Unit'
  NO_CANDIDATES

KtParameterList(114,117): '(T)'
  NO_CANDIDATES

KtParameter(115,116): 'T'
  NO_CANDIDATES

KtTypeReference(115,116): 'T'
  NO_CANDIDATES

KtUserType(115,116): 'T'
  NO_CANDIDATES

KtNameReferenceExpression(115,116): 'T'
  NO_CANDIDATES

KtTypeReference(121,125): 'Unit'
  NO_CANDIDATES

KtUserType(121,125): 'Unit'
  NO_CANDIDATES

KtNameReferenceExpression(121,125): 'Unit'
  NO_CANDIDATES

KtBlockExpression(127,129): '{}'
  NO_CANDIDATES

KtProperty(131,178): 'val prop = take {'
  NO_CANDIDATES

KtCallExpression(142,178): 'take {'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
          symbol = action: (T) -> kotlin.Unit
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: (T) -> kotlin.Unit): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
              symbol = action: (T) -> kotlin.Unit
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is '(??? (Unresolved qualified name: Foo.Bar)) -> Unit', but '(uninferred T (of fun <T> take)) -> Unit' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(142,146): 'take'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
          symbol = action: (T) -> kotlin.Unit
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: (T) -> kotlin.Unit): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = (ERROR CLASS: Cannot infer argument for type parameter T) -> kotlin.Unit
              symbol = action: (T) -> kotlin.Unit
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is '(??? (Unresolved qualified name: Foo.Bar)) -> Unit', but '(uninferred T (of fun <T> take)) -> Unit' was expected.>
    isInBestCandidates = true

KtLambdaArgument(147,178): '{'
  NO_CANDIDATES

KtLambdaExpression(147,178): '{'
  NO_CANDIDATES

KtFunctionLiteral(147,178): '{'
  NO_CANDIDATES

KtParameterList(153,173): 'lambdaParam: Foo.Bar'
  NO_CANDIDATES

KtParameter(153,173): 'lambdaParam: Foo.Bar'
  NO_CANDIDATES

KtTypeReference(166,173): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(166,173): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(166,169): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(166,169): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(170,173): 'Bar'
  NO_CANDIDATES

KtBlockExpression(177,177): ''
  NO_CANDIDATES