== doSomething ==
fun Any?.doSomething() {}
---------------------
L0:
  1 <START>
  2 mark({})
    read (Unit)
L1:
  1 <END>          NEXT:[<SINK>]
error:
    <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<ERROR>, <END>]
=====================
== bar ==
fun bar(): Nothing = throw Exception()
---------------------
L0:
  1 <START>
    mark(throw Exception())
    mark(Exception())
    call(Exception(), <init>) -> <v0>
    throw (throw Exception()|<v0>)       NEXT:[<ERROR>]
L1:
    <END>                                NEXT:[<SINK>]                               PREV:[]
error:
    <ERROR>                              PREV:[throw (throw Exception()|<v0>)]
sink:
    <SINK>                               PREV:[<ERROR>, <END>]
=====================
== foo ==
fun foo() {
    null!!.doSomething()
    bar().doSomething()
}
---------------------
L0:
  1 <START>
  2 mark({ null!!.doSomething() bar().doSomething() })
    mark(null!!.doSomething())
    r(null) -> <v0>
    magic[NOT_NULL_ASSERTION](null!!|<v0>) -> <v1>
    jmp(error)                                            NEXT:[<ERROR>]
-   mark(doSomething())                                   PREV:[]
-   call(doSomething(), doSomething|<v1>) -> <v2>         PREV:[]
-   mark(bar().doSomething())                             PREV:[]
-   mark(bar())                                           PREV:[]
-   call(bar(), bar) -> <v3>                              PREV:[]
-   jmp(error)                                            NEXT:[<ERROR>]                                               PREV:[]
-   mark(doSomething())                                   PREV:[]
-   call(doSomething(), doSomething|<v3>) -> <v4>         PREV:[]
L1:
  1 <END>                                                 NEXT:[<SINK>]                                                PREV:[]
error:
    <ERROR>                                               PREV:[jmp(error)]
sink:
    <SINK>                                                PREV:[<ERROR>, <END>]
=====================
