//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

fun test() {
    val f = @Composable {
        try {
            repeat (3) {
                if (true) foo(block = {})
            }
        } finally {}
    }
}

//
// Transformed IR
// ------------------------------------------

fun test() {
  val f = ComposableSingletons%TestKt.lambda%-867510614
}
internal object ComposableSingletons%TestKt {
  val lambda%-867510614: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C:Test.kt")
    if (%composer.shouldExecute(%changed and 0b0011 != 0b0010, %changed and 0b0001)) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      try {
        repeat(3) { it: Int ->
          if (true) {
            foo {
            }
          }
        }
      } finally {
      }
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
}
