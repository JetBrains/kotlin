abstract class AbstractSymbol<E> where E : Recursive<E>, E : Something {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun foo(list: List<Any>) {
    val result: List<AbstractSymbol<*>> = map<Recursive<*>, AbstractSymbol<*>>(/* <this> = filterIsInstance<Recursive<*>>(/* <this> = list */), */ transform = Recursive::symbol)
  }

}

interface Recursive<R> where R : Recursive<R>, R : Something {
  abstract val symbol: AbstractSymbol<R>
    abstract get

}

interface Something {
}

