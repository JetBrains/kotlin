Class/object property type 7 var nextServer: Server? = new Server()
Companion object 42 fun Client.bar(s: Server = Server.NAME) {
Companion object 6 class Client(name: String = Server.NAME): Srv() {
Companion object 8 val name = Server.NAME
Function return types 18 fun getNextServer(): Server? {
Function return types 50 fun Any.asServer(): Server? {
Local variable declaration 14 val server: Server = s
Parameter type 13 fun foo(s: Srv) {
Parameter type 42 fun Client.bar(s: Server = Server.NAME) {
Super type qualifier 23 super<Server>.work()
Supertype 27 companion object: Server() {
Supertype 32 object ClientObject: Server() {
Supertype 6 class Client(name: String = Server.NAME): Srv() {
Target type of 'is' operation 52 is Server -> println("Server!")
Target type of 'is' operation 54 return if (this is Server) this as Server else this as? Server
Type parameter 36 class Servers: Iterator<Server> {
Type parameter 40 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 40 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Type parameter 40 fun Iterator<Server>.f(p: Iterator<Server>): Iterator<Server> = this
Usage in cast target type 54 return if (this is Server) this as Server else this as? Server
Usage in cast target type 54 return if (this is Server) this as Server else this as? Server
Usage in comments 11 * [Srv] parameter
Usage in import 3 import server.Server as Srv
Usage in import 4 import server.Server