/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.wasm.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.utils.TransformersFunctions;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateWasmTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box")
@TestDataPath("$PROJECT_ROOT")
public class K1WasmCodegenBoxTestGenerated extends AbstractK1WasmCodegenBoxTest {
  @Test
  public void testAllFilesPresentInBox() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true, "compileKotlinAgainstKotlin", "multiplatform/k2");
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/annotations")
  @TestDataPath("$PROJECT_ROOT")
  public class Annotations {
    @Test
    public void testAllFilesPresentInAnnotations() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("annotationWithDefaultArgInDifferentModule.kt")
    public void testAnnotationWithDefaultArgInDifferentModule() {
      runTest("compiler/testData/codegen/box/annotations/annotationWithDefaultArgInDifferentModule.kt");
    }

    @Test
    @TestMetadata("genericAnnotations.kt")
    public void testGenericAnnotations() {
      runTest("compiler/testData/codegen/box/annotations/genericAnnotations.kt");
    }

    @Test
    @TestMetadata("nestedAnnotation.kt")
    public void testNestedAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/nestedAnnotation.kt");
    }

    @Test
    @TestMetadata("nestedClassesInAnnotations.kt")
    public void testNestedClassesInAnnotations() {
      runTest("compiler/testData/codegen/box/annotations/nestedClassesInAnnotations.kt");
    }

    @Test
    @TestMetadata("platformDependent.kt")
    public void testPlatformDependent() {
      runTest("compiler/testData/codegen/box/annotations/platformDependent.kt");
    }

    @Test
    @TestMetadata("resolveWithLowPriorityAnnotation.kt")
    public void testResolveWithLowPriorityAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/resolveWithLowPriorityAnnotation.kt");
    }

    @Test
    @TestMetadata("selfReferentialAnnotation.kt")
    public void testSelfReferentialAnnotation() {
      runTest("compiler/testData/codegen/box/annotations/selfReferentialAnnotation.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/annotations/annotatedLambda")
    @TestDataPath("$PROJECT_ROOT")
    public class AnnotatedLambda {
      @Test
      public void testAllFilesPresentInAnnotatedLambda() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/annotatedLambda"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/annotations/instances")
    @TestDataPath("$PROJECT_ROOT")
    public class Instances {
      @Test
      public void testAllFilesPresentInInstances() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/instances"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("annotationEqHc.kt")
      public void testAnnotationEqHc() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationEqHc.kt");
      }

      @Test
      @TestMetadata("annotationFromStdlib.kt")
      public void testAnnotationFromStdlib() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationFromStdlib.kt");
      }

      @Test
      @TestMetadata("annotationInstances.kt")
      public void testAnnotationInstances() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationInstances.kt");
      }

      @Test
      @TestMetadata("annotationInstancesEmptyDefault.kt")
      public void testAnnotationInstancesEmptyDefault() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationInstancesEmptyDefault.kt");
      }

      @Test
      @TestMetadata("annotationInstancesEmptyDefaultLowered.kt")
      public void testAnnotationInstancesEmptyDefaultLowered() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationInstancesEmptyDefaultLowered.kt");
      }

      @Test
      @TestMetadata("annotationToString.kt")
      public void testAnnotationToString() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationToString.kt");
      }

      @Test
      @TestMetadata("annotationWithTypeParameters.kt")
      public void testAnnotationWithTypeParameters() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationWithTypeParameters.kt");
      }

      @Test
      @TestMetadata("annotationsUnsignedTypes.kt")
      public void testAnnotationsUnsignedTypes() {
        runTest("compiler/testData/codegen/box/annotations/instances/annotationsUnsignedTypes.kt");
      }

      @Test
      @TestMetadata("inInlineFunction.kt")
      public void testInInlineFunction() {
        runTest("compiler/testData/codegen/box/annotations/instances/inInlineFunction.kt");
      }

      @Test
      @TestMetadata("multifileEqHc.kt")
      public void testMultifileEqHc() {
        runTest("compiler/testData/codegen/box/annotations/instances/multifileEqHc.kt");
      }

      @Test
      @TestMetadata("multimoduleTypeParams.kt")
      public void testMultimoduleTypeParams() {
        runTest("compiler/testData/codegen/box/annotations/instances/multimoduleTypeParams.kt");
      }

      @Test
      @TestMetadata("multiplatformInstantiation.kt")
      public void testMultiplatformInstantiation() {
        runTest("compiler/testData/codegen/box/annotations/instances/multiplatformInstantiation.kt");
      }

      @Test
      @TestMetadata("nestedAnnotationInstances.kt")
      public void testNestedAnnotationInstances() {
        runTest("compiler/testData/codegen/box/annotations/instances/nestedAnnotationInstances.kt");
      }

      @Test
      @TestMetadata("varargInAnnotationParameterInstantiation.kt")
      public void testVarargInAnnotationParameterInstantiation() {
        runTest("compiler/testData/codegen/box/annotations/instances/varargInAnnotationParameterInstantiation.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/annotations/kClassMapping")
    @TestDataPath("$PROJECT_ROOT")
    public class KClassMapping {
      @Test
      public void testAllFilesPresentInKClassMapping() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/kClassMapping"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/annotations/repeatable")
    @TestDataPath("$PROJECT_ROOT")
    public class Repeatable {
      @Test
      public void testAllFilesPresentInRepeatable() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/repeatable"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/annotations/typeAnnotations")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeAnnotations {
      @Test
      public void testAllFilesPresentInTypeAnnotations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/typeAnnotations"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("checkingNotincorporatedInputTypes.kt")
      public void testCheckingNotincorporatedInputTypes() {
        runTest("compiler/testData/codegen/box/annotations/typeAnnotations/checkingNotincorporatedInputTypes.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/argumentOrder")
  @TestDataPath("$PROJECT_ROOT")
  public class ArgumentOrder {
    @Test
    public void testAllFilesPresentInArgumentOrder() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/argumentOrder"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("argumentOrderInObjectSuperCall.kt")
    public void testArgumentOrderInObjectSuperCall() {
      runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInObjectSuperCall.kt");
    }

    @Test
    @TestMetadata("argumentOrderInSuperCall.kt")
    public void testArgumentOrderInSuperCall() {
      runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInSuperCall.kt");
    }

    @Test
    @TestMetadata("arguments.kt")
    public void testArguments() {
      runTest("compiler/testData/codegen/box/argumentOrder/arguments.kt");
    }

    @Test
    @TestMetadata("captured.kt")
    public void testCaptured() {
      runTest("compiler/testData/codegen/box/argumentOrder/captured.kt");
    }

    @Test
    @TestMetadata("capturedInExtension.kt")
    public void testCapturedInExtension() {
      runTest("compiler/testData/codegen/box/argumentOrder/capturedInExtension.kt");
    }

    @Test
    @TestMetadata("defaults.kt")
    public void testDefaults() {
      runTest("compiler/testData/codegen/box/argumentOrder/defaults.kt");
    }

    @Test
    @TestMetadata("extension.kt")
    public void testExtension() {
      runTest("compiler/testData/codegen/box/argumentOrder/extension.kt");
    }

    @Test
    @TestMetadata("extensionInClass.kt")
    public void testExtensionInClass() {
      runTest("compiler/testData/codegen/box/argumentOrder/extensionInClass.kt");
    }

    @Test
    @TestMetadata("kt17691WithEnabledFeature.kt")
    public void testKt17691WithEnabledFeature() {
      runTest("compiler/testData/codegen/box/argumentOrder/kt17691WithEnabledFeature.kt");
    }

    @Test
    @TestMetadata("kt9277.kt")
    public void testKt9277() {
      runTest("compiler/testData/codegen/box/argumentOrder/kt9277.kt");
    }

    @Test
    @TestMetadata("lambdaMigration.kt")
    public void testLambdaMigration() {
      runTest("compiler/testData/codegen/box/argumentOrder/lambdaMigration.kt");
    }

    @Test
    @TestMetadata("lambdaMigrationInClass.kt")
    public void testLambdaMigrationInClass() {
      runTest("compiler/testData/codegen/box/argumentOrder/lambdaMigrationInClass.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/argumentOrder/simple.kt");
    }

    @Test
    @TestMetadata("simpleInClass.kt")
    public void testSimpleInClass() {
      runTest("compiler/testData/codegen/box/argumentOrder/simpleInClass.kt");
    }

    @Test
    @TestMetadata("singleSideEffect.kt")
    public void testSingleSideEffect() {
      runTest("compiler/testData/codegen/box/argumentOrder/singleSideEffect.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/arrays")
  @TestDataPath("$PROJECT_ROOT")
  public class Arrays {
    @Test
    public void testAllFilesPresentInArrays() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("arrayConstructorWithNonInlineLambda.kt")
    public void testArrayConstructorWithNonInlineLambda() {
      runTest("compiler/testData/codegen/box/arrays/arrayConstructorWithNonInlineLambda.kt");
    }

    @Test
    @TestMetadata("arrayConstructorsSimple.kt")
    public void testArrayConstructorsSimple() {
      runTest("compiler/testData/codegen/box/arrays/arrayConstructorsSimple.kt");
    }

    @Test
    @TestMetadata("arrayGetAssignMultiIndex.kt")
    public void testArrayGetAssignMultiIndex() {
      runTest("compiler/testData/codegen/box/arrays/arrayGetAssignMultiIndex.kt");
    }

    @Test
    @TestMetadata("arrayGetMultiIndex.kt")
    public void testArrayGetMultiIndex() {
      runTest("compiler/testData/codegen/box/arrays/arrayGetMultiIndex.kt");
    }

    @Test
    @TestMetadata("arrayInstanceOf.kt")
    public void testArrayInstanceOf() {
      runTest("compiler/testData/codegen/box/arrays/arrayInstanceOf.kt");
    }

    @Test
    @TestMetadata("arrayPlusAssign.kt")
    public void testArrayPlusAssign() {
      runTest("compiler/testData/codegen/box/arrays/arrayPlusAssign.kt");
    }

    @Test
    @TestMetadata("collectionAssignGetMultiIndex.kt")
    public void testCollectionAssignGetMultiIndex() {
      runTest("compiler/testData/codegen/box/arrays/collectionAssignGetMultiIndex.kt");
    }

    @Test
    @TestMetadata("collectionGetMultiIndex.kt")
    public void testCollectionGetMultiIndex() {
      runTest("compiler/testData/codegen/box/arrays/collectionGetMultiIndex.kt");
    }

    @Test
    @TestMetadata("constantArrayOfAny.kt")
    public void testConstantArrayOfAny() {
      runTest("compiler/testData/codegen/box/arrays/constantArrayOfAny.kt");
    }

    @Test
    @TestMetadata("forEachBooleanArray.kt")
    public void testForEachBooleanArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachBooleanArray.kt");
    }

    @Test
    @TestMetadata("forEachByteArray.kt")
    public void testForEachByteArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachByteArray.kt");
    }

    @Test
    @TestMetadata("forEachCharArray.kt")
    public void testForEachCharArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachCharArray.kt");
    }

    @Test
    @TestMetadata("forEachDoubleArray.kt")
    public void testForEachDoubleArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachDoubleArray.kt");
    }

    @Test
    @TestMetadata("forEachFloatArray.kt")
    public void testForEachFloatArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachFloatArray.kt");
    }

    @Test
    @TestMetadata("forEachIntArray.kt")
    public void testForEachIntArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachIntArray.kt");
    }

    @Test
    @TestMetadata("forEachLongArray.kt")
    public void testForEachLongArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachLongArray.kt");
    }

    @Test
    @TestMetadata("forEachShortArray.kt")
    public void testForEachShortArray() {
      runTest("compiler/testData/codegen/box/arrays/forEachShortArray.kt");
    }

    @Test
    @TestMetadata("genericArrayInObjectLiteralConstructor.kt")
    public void testGenericArrayInObjectLiteralConstructor() {
      runTest("compiler/testData/codegen/box/arrays/genericArrayInObjectLiteralConstructor.kt");
    }

    @Test
    @TestMetadata("hashMap.kt")
    public void testHashMap() {
      runTest("compiler/testData/codegen/box/arrays/hashMap.kt");
    }

    @Test
    @TestMetadata("inProjectionAsParameter.kt")
    public void testInProjectionAsParameter() {
      runTest("compiler/testData/codegen/box/arrays/inProjectionAsParameter.kt");
    }

    @Test
    @TestMetadata("inProjectionOfArray.kt")
    public void testInProjectionOfArray() {
      runTest("compiler/testData/codegen/box/arrays/inProjectionOfArray.kt");
    }

    @Test
    @TestMetadata("inProjectionOfList.kt")
    public void testInProjectionOfList() {
      runTest("compiler/testData/codegen/box/arrays/inProjectionOfList.kt");
    }

    @Test
    @TestMetadata("indices.kt")
    public void testIndices() {
      runTest("compiler/testData/codegen/box/arrays/indices.kt");
    }

    @Test
    @TestMetadata("indicesChar.kt")
    public void testIndicesChar() {
      runTest("compiler/testData/codegen/box/arrays/indicesChar.kt");
    }

    @Test
    @TestMetadata("inlineInitializer.kt")
    public void testInlineInitializer() {
      runTest("compiler/testData/codegen/box/arrays/inlineInitializer.kt");
    }

    @Test
    @TestMetadata("iterator.kt")
    public void testIterator() {
      runTest("compiler/testData/codegen/box/arrays/iterator.kt");
    }

    @Test
    @TestMetadata("iteratorBooleanArray.kt")
    public void testIteratorBooleanArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorBooleanArray.kt");
    }

    @Test
    @TestMetadata("iteratorByteArray.kt")
    public void testIteratorByteArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorByteArray.kt");
    }

    @Test
    @TestMetadata("iteratorByteArrayNextByte.kt")
    public void testIteratorByteArrayNextByte() {
      runTest("compiler/testData/codegen/box/arrays/iteratorByteArrayNextByte.kt");
    }

    @Test
    @TestMetadata("iteratorCharArray.kt")
    public void testIteratorCharArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorCharArray.kt");
    }

    @Test
    @TestMetadata("iteratorDoubleArray.kt")
    public void testIteratorDoubleArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorDoubleArray.kt");
    }

    @Test
    @TestMetadata("iteratorFloatArray.kt")
    public void testIteratorFloatArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorFloatArray.kt");
    }

    @Test
    @TestMetadata("iteratorIntArray.kt")
    public void testIteratorIntArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorIntArray.kt");
    }

    @Test
    @TestMetadata("iteratorLongArray.kt")
    public void testIteratorLongArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorLongArray.kt");
    }

    @Test
    @TestMetadata("iteratorLongArrayNextLong.kt")
    public void testIteratorLongArrayNextLong() {
      runTest("compiler/testData/codegen/box/arrays/iteratorLongArrayNextLong.kt");
    }

    @Test
    @TestMetadata("iteratorShortArray.kt")
    public void testIteratorShortArray() {
      runTest("compiler/testData/codegen/box/arrays/iteratorShortArray.kt");
    }

    @Test
    @TestMetadata("kt1291.kt")
    public void testKt1291() {
      runTest("compiler/testData/codegen/box/arrays/kt1291.kt");
    }

    @Test
    @TestMetadata("kt238.kt")
    public void testKt238() {
      runTest("compiler/testData/codegen/box/arrays/kt238.kt");
    }

    @Test
    @TestMetadata("kt2997.kt")
    public void testKt2997() {
      runTest("compiler/testData/codegen/box/arrays/kt2997.kt");
    }

    @Test
    @TestMetadata("kt33.kt")
    public void testKt33() {
      runTest("compiler/testData/codegen/box/arrays/kt33.kt");
    }

    @Test
    @TestMetadata("kt34291_16dimensions.kt")
    public void testKt34291_16dimensions() {
      runTest("compiler/testData/codegen/box/arrays/kt34291_16dimensions.kt");
    }

    @Test
    @TestMetadata("kt3771.kt")
    public void testKt3771() {
      runTest("compiler/testData/codegen/box/arrays/kt3771.kt");
    }

    @Test
    @TestMetadata("kt4118.kt")
    public void testKt4118() {
      runTest("compiler/testData/codegen/box/arrays/kt4118.kt");
    }

    @Test
    @TestMetadata("kt42932.kt")
    public void testKt42932() {
      runTest("compiler/testData/codegen/box/arrays/kt42932.kt");
    }

    @Test
    @TestMetadata("kt4348.kt")
    public void testKt4348() {
      runTest("compiler/testData/codegen/box/arrays/kt4348.kt");
    }

    @Test
    @TestMetadata("kt4357.kt")
    public void testKt4357() {
      runTest("compiler/testData/codegen/box/arrays/kt4357.kt");
    }

    @Test
    @TestMetadata("kt47483.kt")
    public void testKt47483() {
      runTest("compiler/testData/codegen/box/arrays/kt47483.kt");
    }

    @Test
    @TestMetadata("kt503.kt")
    public void testKt503() {
      runTest("compiler/testData/codegen/box/arrays/kt503.kt");
    }

    @Test
    @TestMetadata("kt55984.kt")
    public void testKt55984() {
      runTest("compiler/testData/codegen/box/arrays/kt55984.kt");
    }

    @Test
    @TestMetadata("kt594.kt")
    public void testKt594() {
      runTest("compiler/testData/codegen/box/arrays/kt594.kt");
    }

    @Test
    @TestMetadata("kt7009.kt")
    public void testKt7009() {
      runTest("compiler/testData/codegen/box/arrays/kt7009.kt");
    }

    @Test
    @TestMetadata("kt7288.kt")
    public void testKt7288() {
      runTest("compiler/testData/codegen/box/arrays/kt7288.kt");
    }

    @Test
    @TestMetadata("kt779.kt")
    public void testKt779() {
      runTest("compiler/testData/codegen/box/arrays/kt779.kt");
    }

    @Test
    @TestMetadata("kt945.kt")
    public void testKt945() {
      runTest("compiler/testData/codegen/box/arrays/kt945.kt");
    }

    @Test
    @TestMetadata("kt950.kt")
    public void testKt950() {
      runTest("compiler/testData/codegen/box/arrays/kt950.kt");
    }

    @Test
    @TestMetadata("longAsIndex.kt")
    public void testLongAsIndex() {
      runTest("compiler/testData/codegen/box/arrays/longAsIndex.kt");
    }

    @Test
    @TestMetadata("multiArrayConstructors.kt")
    public void testMultiArrayConstructors() {
      runTest("compiler/testData/codegen/box/arrays/multiArrayConstructors.kt");
    }

    @Test
    @TestMetadata("nonLocalReturnArrayConstructor.kt")
    public void testNonLocalReturnArrayConstructor() {
      runTest("compiler/testData/codegen/box/arrays/nonLocalReturnArrayConstructor.kt");
    }

    @Test
    @TestMetadata("nonNullArray.kt")
    public void testNonNullArray() {
      runTest("compiler/testData/codegen/box/arrays/nonNullArray.kt");
    }

    @Test
    @TestMetadata("primitiveArrays.kt")
    public void testPrimitiveArrays() {
      runTest("compiler/testData/codegen/box/arrays/primitiveArrays.kt");
    }

    @Test
    @TestMetadata("stdlib.kt")
    public void testStdlib() {
      runTest("compiler/testData/codegen/box/arrays/stdlib.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/arrays/arraysOfInlineClass")
    @TestDataPath("$PROJECT_ROOT")
    public class ArraysOfInlineClass {
      @Test
      @TestMetadata("accessArrayOfInlineClass.kt")
      public void testAccessArrayOfInlineClass() {
        runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/accessArrayOfInlineClass.kt");
      }

      @Test
      @TestMetadata("accessArrayOfUnsigned.kt")
      public void testAccessArrayOfUnsigned() {
        runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/accessArrayOfUnsigned.kt");
      }

      @Test
      public void testAllFilesPresentInArraysOfInlineClass() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/arraysOfInlineClass"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("arrayOfInlineClassOfArrayOfInlineClass.kt")
      public void testArrayOfInlineClassOfArrayOfInlineClass() {
        runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/arrayOfInlineClassOfArrayOfInlineClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/arrays/forInReversed")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInReversed {
      @Test
      public void testAllFilesPresentInForInReversed() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/forInReversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("reversedArrayOriginalUpdatedInLoopBody.kt")
      public void testReversedArrayOriginalUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedArrayOriginalUpdatedInLoopBody.kt");
      }

      @Test
      @TestMetadata("reversedArrayReversedArrayOriginalUpdatedInLoopBody.kt")
      public void testReversedArrayReversedArrayOriginalUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedArrayReversedArrayOriginalUpdatedInLoopBody.kt");
      }

      @Test
      @TestMetadata("reversedOriginalUpdatedInLoopBody.kt")
      public void testReversedOriginalUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedOriginalUpdatedInLoopBody.kt");
      }

      @Test
      @TestMetadata("reversedReversedOriginalUpdatedInLoopBody.kt")
      public void testReversedReversedOriginalUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedReversedOriginalUpdatedInLoopBody.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/arrays/forInUnsignedArray")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInUnsignedArray {
      @Test
      public void testAllFilesPresentInForInUnsignedArray() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/forInUnsignedArray"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInUnsignedArray.kt")
      public void testForInUnsignedArray() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArray.kt");
      }

      @Test
      @TestMetadata("forInUnsignedArrayIndices.kt")
      public void testForInUnsignedArrayIndices() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayIndices.kt");
      }

      @Test
      @TestMetadata("forInUnsignedArrayIndicesReversed.kt")
      public void testForInUnsignedArrayIndicesReversed() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayIndicesReversed.kt");
      }

      @Test
      @TestMetadata("forInUnsignedArrayReversed.kt")
      public void testForInUnsignedArrayReversed() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayReversed.kt");
      }

      @Test
      @TestMetadata("forInUnsignedArrayWithIndex.kt")
      public void testForInUnsignedArrayWithIndex() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInUnsignedArrayWithIndexNoElementVar.kt")
      public void testForInUnsignedArrayWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayWithIndexNoElementVar.kt");
      }

      @Test
      @TestMetadata("forInUnsignedArrayWithIndexNoIndexVar.kt")
      public void testForInUnsignedArrayWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayWithIndexNoIndexVar.kt");
      }

      @Test
      @TestMetadata("forInUnsignedArrayWithIndexReversed.kt")
      public void testForInUnsignedArrayWithIndexReversed() {
        runTest("compiler/testData/codegen/box/arrays/forInUnsignedArray/forInUnsignedArrayWithIndexReversed.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl")
    @TestDataPath("$PROJECT_ROOT")
    public class MultiDecl {
      @Test
      public void testAllFilesPresentInMultiDecl() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt15560.kt")
      public void testKt15560() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15560.kt");
      }

      @Test
      @TestMetadata("kt15568.kt")
      public void testKt15568() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15568.kt");
      }

      @Test
      @TestMetadata("kt15575.kt")
      public void testKt15575() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15575.kt");
      }

      @Test
      @TestMetadata("MultiDeclFor.kt")
      public void testMultiDeclFor() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclFor.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentExtensions.kt")
      public void testMultiDeclForComponentExtensions() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentExtensions.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
      public void testMultiDeclForComponentMemberExtensions() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentMemberExtensions.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
      public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
      }

      @Test
      @TestMetadata("MultiDeclForValCaptured.kt")
      public void testMultiDeclForValCaptured() {
        runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForValCaptured.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl/int")
      @TestDataPath("$PROJECT_ROOT")
      public class Int {
        @Test
        public void testAllFilesPresentInInt() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl/int"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentMemberExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl/long")
      @TestDataPath("$PROJECT_ROOT")
      public class Long {
        @Test
        public void testAllFilesPresentInLong() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl/long"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentMemberExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/assert")
  @TestDataPath("$PROJECT_ROOT")
  public class Assert {
    @Test
    public void testAllFilesPresentInAssert() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/assert"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("alwaysDisable.kt")
    public void testAlwaysDisable() {
      runTest("compiler/testData/codegen/box/assert/alwaysDisable.kt");
    }

    @Test
    @TestMetadata("alwaysEnable.kt")
    public void testAlwaysEnable() {
      runTest("compiler/testData/codegen/box/assert/alwaysEnable.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/assert/jvm")
    @TestDataPath("$PROJECT_ROOT")
    public class Jvm {
      @Test
      public void testAllFilesPresentInJvm() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/assert/jvm"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/binaryOp")
  @TestDataPath("$PROJECT_ROOT")
  public class BinaryOp {
    @Test
    public void testAllFilesPresentInBinaryOp() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/binaryOp"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("bitwiseOp.kt")
    public void testBitwiseOp() {
      runTest("compiler/testData/codegen/box/binaryOp/bitwiseOp.kt");
    }

    @Test
    @TestMetadata("bitwiseOpAny.kt")
    public void testBitwiseOpAny() {
      runTest("compiler/testData/codegen/box/binaryOp/bitwiseOpAny.kt");
    }

    @Test
    @TestMetadata("bitwiseOpNullable.kt")
    public void testBitwiseOpNullable() {
      runTest("compiler/testData/codegen/box/binaryOp/bitwiseOpNullable.kt");
    }

    @Test
    @TestMetadata("call.kt")
    public void testCall() {
      runTest("compiler/testData/codegen/box/binaryOp/call.kt");
    }

    @Test
    @TestMetadata("callAny.kt")
    public void testCallAny() {
      runTest("compiler/testData/codegen/box/binaryOp/callAny.kt");
    }

    @Test
    @TestMetadata("callNullable.kt")
    public void testCallNullable() {
      runTest("compiler/testData/codegen/box/binaryOp/callNullable.kt");
    }

    @Test
    @TestMetadata("compareBoxedChars.kt")
    public void testCompareBoxedChars() {
      runTest("compiler/testData/codegen/box/binaryOp/compareBoxedChars.kt");
    }

    @Test
    @TestMetadata("divisionByZero.kt")
    public void testDivisionByZero() {
      runTest("compiler/testData/codegen/box/binaryOp/divisionByZero.kt");
    }

    @Test
    @TestMetadata("eqNullableDoubles.kt")
    public void testEqNullableDoubles() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoubles.kt");
    }

    @Test
    @TestMetadata("eqNullableDoublesToInt.kt")
    public void testEqNullableDoublesToInt() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesToInt.kt");
    }

    @Test
    @TestMetadata("eqNullableDoublesToIntWithTP.kt")
    public void testEqNullableDoublesToIntWithTP() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesToIntWithTP.kt");
    }

    @Test
    @TestMetadata("eqNullableDoublesWithTP.kt")
    public void testEqNullableDoublesWithTP() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesWithTP.kt");
    }

    @Test
    @TestMetadata("eqNullableShortToShort.kt")
    public void testEqNullableShortToShort() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableShortToShort.kt");
    }

    @Test
    @TestMetadata("eqNullableToPrimitiveWithSideEffects.kt")
    public void testEqNullableToPrimitiveWithSideEffects() {
      runTest("compiler/testData/codegen/box/binaryOp/eqNullableToPrimitiveWithSideEffects.kt");
    }

    @Test
    @TestMetadata("intrinsic.kt")
    public void testIntrinsic() {
      runTest("compiler/testData/codegen/box/binaryOp/intrinsic.kt");
    }

    @Test
    @TestMetadata("intrinsicAny.kt")
    public void testIntrinsicAny() {
      runTest("compiler/testData/codegen/box/binaryOp/intrinsicAny.kt");
    }

    @Test
    @TestMetadata("intrinsicNullable.kt")
    public void testIntrinsicNullable() {
      runTest("compiler/testData/codegen/box/binaryOp/intrinsicNullable.kt");
    }

    @Test
    @TestMetadata("kt11163.kt")
    public void testKt11163() {
      runTest("compiler/testData/codegen/box/binaryOp/kt11163.kt");
    }

    @Test
    @TestMetadata("kt11163_properIeee754comparisons.kt")
    public void testKt11163_properIeee754comparisons() {
      runTest("compiler/testData/codegen/box/binaryOp/kt11163_properIeee754comparisons.kt");
    }

    @Test
    @TestMetadata("kt23030_properIeee754comparisons.kt")
    public void testKt23030_properIeee754comparisons() {
      runTest("compiler/testData/codegen/box/binaryOp/kt23030_properIeee754comparisons.kt");
    }

    @Test
    @TestMetadata("kt44402.kt")
    public void testKt44402() {
      runTest("compiler/testData/codegen/box/binaryOp/kt44402.kt");
    }

    @Test
    @TestMetadata("kt6747_identityEquals.kt")
    public void testKt6747_identityEquals() {
      runTest("compiler/testData/codegen/box/binaryOp/kt6747_identityEquals.kt");
    }

    @Test
    @TestMetadata("overflowChar.kt")
    public void testOverflowChar() {
      runTest("compiler/testData/codegen/box/binaryOp/overflowChar.kt");
    }

    @Test
    @TestMetadata("overflowInt.kt")
    public void testOverflowInt() {
      runTest("compiler/testData/codegen/box/binaryOp/overflowInt.kt");
    }

    @Test
    @TestMetadata("overflowLong.kt")
    public void testOverflowLong() {
      runTest("compiler/testData/codegen/box/binaryOp/overflowLong.kt");
    }

    @Test
    @TestMetadata("primitiveEqualsSafeCall.kt")
    public void testPrimitiveEqualsSafeCall() {
      runTest("compiler/testData/codegen/box/binaryOp/primitiveEqualsSafeCall.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/boxingOptimization")
  @TestDataPath("$PROJECT_ROOT")
  public class BoxingOptimization {
    @Test
    public void testAllFilesPresentInBoxingOptimization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/boxingOptimization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("boxedIntegersCmp.kt")
    public void testBoxedIntegersCmp() {
      runTest("compiler/testData/codegen/box/boxingOptimization/boxedIntegersCmp.kt");
    }

    @Test
    @TestMetadata("boxedPrimitivesAreEqual.kt")
    public void testBoxedPrimitivesAreEqual() {
      runTest("compiler/testData/codegen/box/boxingOptimization/boxedPrimitivesAreEqual.kt");
    }

    @Test
    @TestMetadata("boxedRealsCmp.kt")
    public void testBoxedRealsCmp() {
      runTest("compiler/testData/codegen/box/boxingOptimization/boxedRealsCmp.kt");
    }

    @Test
    @TestMetadata("casts.kt")
    public void testCasts() {
      runTest("compiler/testData/codegen/box/boxingOptimization/casts.kt");
    }

    @Test
    @TestMetadata("checkcastAndInstanceOf2.kt")
    public void testCheckcastAndInstanceOf2() {
      runTest("compiler/testData/codegen/box/boxingOptimization/checkcastAndInstanceOf2.kt");
    }

    @Test
    @TestMetadata("explicitEqualsOnDouble.kt")
    public void testExplicitEqualsOnDouble() {
      runTest("compiler/testData/codegen/box/boxingOptimization/explicitEqualsOnDouble.kt");
    }

    @Test
    @TestMetadata("fold.kt")
    public void testFold() {
      runTest("compiler/testData/codegen/box/boxingOptimization/fold.kt");
    }

    @Test
    @TestMetadata("foldRange.kt")
    public void testFoldRange() {
      runTest("compiler/testData/codegen/box/boxingOptimization/foldRange.kt");
    }

    @Test
    @TestMetadata("intCompareTo.kt")
    public void testIntCompareTo() {
      runTest("compiler/testData/codegen/box/boxingOptimization/intCompareTo.kt");
    }

    @Test
    @TestMetadata("kt15871.kt")
    public void testKt15871() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt15871.kt");
    }

    @Test
    @TestMetadata("kt19767.kt")
    public void testKt19767() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt19767.kt");
    }

    @Test
    @TestMetadata("kt19767_2.kt")
    public void testKt19767_2() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_2.kt");
    }

    @Test
    @TestMetadata("kt19767_chain.kt")
    public void testKt19767_chain() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_chain.kt");
    }

    @Test
    @TestMetadata("kt46859.kt")
    public void testKt46859() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt46859.kt");
    }

    @Test
    @TestMetadata("kt48394.kt")
    public void testKt48394() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt48394.kt");
    }

    @Test
    @TestMetadata("kt49092a.kt")
    public void testKt49092a() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092a.kt");
    }

    @Test
    @TestMetadata("kt49092b.kt")
    public void testKt49092b() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092b.kt");
    }

    @Test
    @TestMetadata("kt49092c.kt")
    public void testKt49092c() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092c.kt");
    }

    @Test
    @TestMetadata("kt49092d.kt")
    public void testKt49092d() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092d.kt");
    }

    @Test
    @TestMetadata("kt49092e.kt")
    public void testKt49092e() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092e.kt");
    }

    @Test
    @TestMetadata("kt49092f.kt")
    public void testKt49092f() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49092f.kt");
    }

    @Test
    @TestMetadata("kt49548.kt")
    public void testKt49548() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49548.kt");
    }

    @Test
    @TestMetadata("kt49548a.kt")
    public void testKt49548a() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt49548a.kt");
    }

    @Test
    @TestMetadata("kt5493.kt")
    public void testKt5493() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt5493.kt");
    }

    @Test
    @TestMetadata("kt5588.kt")
    public void testKt5588() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt5588.kt");
    }

    @Test
    @TestMetadata("kt5844.kt")
    public void testKt5844() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt5844.kt");
    }

    @Test
    @TestMetadata("kt6842.kt")
    public void testKt6842() {
      runTest("compiler/testData/codegen/box/boxingOptimization/kt6842.kt");
    }

    @Test
    @TestMetadata("maxMinByOrNull.kt")
    public void testMaxMinByOrNull() {
      runTest("compiler/testData/codegen/box/boxingOptimization/maxMinByOrNull.kt");
    }

    @Test
    @TestMetadata("nullCheck.kt")
    public void testNullCheck() {
      runTest("compiler/testData/codegen/box/boxingOptimization/nullCheck.kt");
    }

    @Test
    @TestMetadata("progressions.kt")
    public void testProgressions() {
      runTest("compiler/testData/codegen/box/boxingOptimization/progressions.kt");
    }

    @Test
    @TestMetadata("safeCallWithElvis.kt")
    public void testSafeCallWithElvis() {
      runTest("compiler/testData/codegen/box/boxingOptimization/safeCallWithElvis.kt");
    }

    @Test
    @TestMetadata("safeCallWithElvisMultipleFiles.kt")
    public void testSafeCallWithElvisMultipleFiles() {
      runTest("compiler/testData/codegen/box/boxingOptimization/safeCallWithElvisMultipleFiles.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/boxingOptimization/simple.kt");
    }

    @Test
    @TestMetadata("simpleUninitializedMerge.kt")
    public void testSimpleUninitializedMerge() {
      runTest("compiler/testData/codegen/box/boxingOptimization/simpleUninitializedMerge.kt");
    }

    @Test
    @TestMetadata("taintedValues.kt")
    public void testTaintedValues() {
      runTest("compiler/testData/codegen/box/boxingOptimization/taintedValues.kt");
    }

    @Test
    @TestMetadata("taintedValuesBox.kt")
    public void testTaintedValuesBox() {
      runTest("compiler/testData/codegen/box/boxingOptimization/taintedValuesBox.kt");
    }

    @Test
    @TestMetadata("unsafeRemoving.kt")
    public void testUnsafeRemoving() {
      runTest("compiler/testData/codegen/box/boxingOptimization/unsafeRemoving.kt");
    }

    @Test
    @TestMetadata("unsignedArrayForEach.kt")
    public void testUnsignedArrayForEach() {
      runTest("compiler/testData/codegen/box/boxingOptimization/unsignedArrayForEach.kt");
    }

    @Test
    @TestMetadata("variables.kt")
    public void testVariables() {
      runTest("compiler/testData/codegen/box/boxingOptimization/variables.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/bridges")
  @TestDataPath("$PROJECT_ROOT")
  public class Bridges {
    @Test
    @TestMetadata("abstractOverrideBridge.kt")
    public void testAbstractOverrideBridge() {
      runTest("compiler/testData/codegen/box/bridges/abstractOverrideBridge.kt");
    }

    @Test
    public void testAllFilesPresentInBridges() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/bridges"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("complexMultiInheritance.kt")
    public void testComplexMultiInheritance() {
      runTest("compiler/testData/codegen/box/bridges/complexMultiInheritance.kt");
    }

    @Test
    @TestMetadata("complexTraitImpl.kt")
    public void testComplexTraitImpl() {
      runTest("compiler/testData/codegen/box/bridges/complexTraitImpl.kt");
    }

    @Test
    @TestMetadata("covariantGenericDiamond.kt")
    public void testCovariantGenericDiamond() {
      runTest("compiler/testData/codegen/box/bridges/covariantGenericDiamond.kt");
    }

    @Test
    @TestMetadata("delegation.kt")
    public void testDelegation() {
      runTest("compiler/testData/codegen/box/bridges/delegation.kt");
    }

    @Test
    @TestMetadata("delegationComplex.kt")
    public void testDelegationComplex() {
      runTest("compiler/testData/codegen/box/bridges/delegationComplex.kt");
    }

    @Test
    @TestMetadata("delegationComplexWithList.kt")
    public void testDelegationComplexWithList() {
      runTest("compiler/testData/codegen/box/bridges/delegationComplexWithList.kt");
    }

    @Test
    @TestMetadata("delegationProperty.kt")
    public void testDelegationProperty() {
      runTest("compiler/testData/codegen/box/bridges/delegationProperty.kt");
    }

    @Test
    @TestMetadata("diamond.kt")
    public void testDiamond() {
      runTest("compiler/testData/codegen/box/bridges/diamond.kt");
    }

    @Test
    @TestMetadata("fakeCovariantOverride.kt")
    public void testFakeCovariantOverride() {
      runTest("compiler/testData/codegen/box/bridges/fakeCovariantOverride.kt");
    }

    @Test
    @TestMetadata("fakeGenericCovariantOverride.kt")
    public void testFakeGenericCovariantOverride() {
      runTest("compiler/testData/codegen/box/bridges/fakeGenericCovariantOverride.kt");
    }

    @Test
    @TestMetadata("fakeGenericCovariantOverrideWithDelegation.kt")
    public void testFakeGenericCovariantOverrideWithDelegation() {
      runTest("compiler/testData/codegen/box/bridges/fakeGenericCovariantOverrideWithDelegation.kt");
    }

    @Test
    @TestMetadata("fakeOverrideFromInterfaceThroughIntermediateClass.kt")
    public void testFakeOverrideFromInterfaceThroughIntermediateClass() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideFromInterfaceThroughIntermediateClass.kt");
    }

    @Test
    @TestMetadata("fakeOverrideMultiFile.kt")
    public void testFakeOverrideMultiFile() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideMultiFile.kt");
    }

    @Test
    @TestMetadata("fakeOverrideOfTraitImpl.kt")
    public void testFakeOverrideOfTraitImpl() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideOfTraitImpl.kt");
    }

    @Test
    @TestMetadata("fakeOverrideThroughGenericSuperclass.kt")
    public void testFakeOverrideThroughGenericSuperclass() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideThroughGenericSuperclass.kt");
    }

    @Test
    @TestMetadata("fakeOverrideWithSeveralSuperDeclarations.kt")
    public void testFakeOverrideWithSeveralSuperDeclarations() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideWithSeveralSuperDeclarations.kt");
    }

    @Test
    @TestMetadata("fakeOverrideWithSynthesizedImplementation.kt")
    public void testFakeOverrideWithSynthesizedImplementation() {
      runTest("compiler/testData/codegen/box/bridges/fakeOverrideWithSynthesizedImplementation.kt");
    }

    @Test
    @TestMetadata("genericProperty.kt")
    public void testGenericProperty() {
      runTest("compiler/testData/codegen/box/bridges/genericProperty.kt");
    }

    @Test
    @TestMetadata("innerClassTypeParameters.kt")
    public void testInnerClassTypeParameters() {
      runTest("compiler/testData/codegen/box/bridges/innerClassTypeParameters.kt");
    }

    @Test
    @TestMetadata("internalMethodOverrideInFriendModule.kt")
    public void testInternalMethodOverrideInFriendModule() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodOverrideInFriendModule.kt");
    }

    @Test
    @TestMetadata("internalMethodOverrideInOtherModule.kt")
    public void testInternalMethodOverrideInOtherModule() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodOverrideInOtherModule.kt");
    }

    @Test
    @TestMetadata("internalMethodOverrideMultipleInheritance.kt")
    public void testInternalMethodOverrideMultipleInheritance() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodOverrideMultipleInheritance.kt");
    }

    @Test
    @TestMetadata("internalMethodOverridePublishedApi.kt")
    public void testInternalMethodOverridePublishedApi() {
      runTest("compiler/testData/codegen/box/bridges/internalMethodOverridePublishedApi.kt");
    }

    @Test
    @TestMetadata("kt12416.kt")
    public void testKt12416() {
      runTest("compiler/testData/codegen/box/bridges/kt12416.kt");
    }

    @Test
    @TestMetadata("kt1939.kt")
    public void testKt1939() {
      runTest("compiler/testData/codegen/box/bridges/kt1939.kt");
    }

    @Test
    @TestMetadata("kt1959.kt")
    public void testKt1959() {
      runTest("compiler/testData/codegen/box/bridges/kt1959.kt");
    }

    @Test
    @TestMetadata("kt2498.kt")
    public void testKt2498() {
      runTest("compiler/testData/codegen/box/bridges/kt2498.kt");
    }

    @Test
    @TestMetadata("kt2702.kt")
    public void testKt2702() {
      runTest("compiler/testData/codegen/box/bridges/kt2702.kt");
    }

    @Test
    @TestMetadata("kt2833.kt")
    public void testKt2833() {
      runTest("compiler/testData/codegen/box/bridges/kt2833.kt");
    }

    @Test
    @TestMetadata("kt2920.kt")
    public void testKt2920() {
      runTest("compiler/testData/codegen/box/bridges/kt2920.kt");
    }

    @Test
    @TestMetadata("kt318.kt")
    public void testKt318() {
      runTest("compiler/testData/codegen/box/bridges/kt318.kt");
    }

    @Test
    @TestMetadata("kt42137.kt")
    public void testKt42137() {
      runTest("compiler/testData/codegen/box/bridges/kt42137.kt");
    }

    @Test
    @TestMetadata("kt46389.kt")
    public void testKt46389() {
      runTest("compiler/testData/codegen/box/bridges/kt46389.kt");
    }

    @Test
    @TestMetadata("kt46389_jvmDefault.kt")
    public void testKt46389_jvmDefault() {
      runTest("compiler/testData/codegen/box/bridges/kt46389_jvmDefault.kt");
    }

    @Test
    @TestMetadata("longChainOneBridge.kt")
    public void testLongChainOneBridge() {
      runTest("compiler/testData/codegen/box/bridges/longChainOneBridge.kt");
    }

    @Test
    @TestMetadata("manyTypeArgumentsSubstitutedSuccessively.kt")
    public void testManyTypeArgumentsSubstitutedSuccessively() {
      runTest("compiler/testData/codegen/box/bridges/manyTypeArgumentsSubstitutedSuccessively.kt");
    }

    @Test
    @TestMetadata("methodFromTrait.kt")
    public void testMethodFromTrait() {
      runTest("compiler/testData/codegen/box/bridges/methodFromTrait.kt");
    }

    @Test
    @TestMetadata("methodWithDefaultParameter.kt")
    public void testMethodWithDefaultParameter() {
      runTest("compiler/testData/codegen/box/bridges/methodWithDefaultParameter.kt");
    }

    @Test
    @TestMetadata("nestedClassTypeParameters.kt")
    public void testNestedClassTypeParameters() {
      runTest("compiler/testData/codegen/box/bridges/nestedClassTypeParameters.kt");
    }

    @Test
    @TestMetadata("noBridgeOnMutableCollectionInheritance.kt")
    public void testNoBridgeOnMutableCollectionInheritance() {
      runTest("compiler/testData/codegen/box/bridges/noBridgeOnMutableCollectionInheritance.kt");
    }

    @Test
    @TestMetadata("overrideAbstractProperty.kt")
    public void testOverrideAbstractProperty() {
      runTest("compiler/testData/codegen/box/bridges/overrideAbstractProperty.kt");
    }

    @Test
    @TestMetadata("overrideReturnType.kt")
    public void testOverrideReturnType() {
      runTest("compiler/testData/codegen/box/bridges/overrideReturnType.kt");
    }

    @Test
    @TestMetadata("overrideWithValueClassReturn.kt")
    public void testOverrideWithValueClassReturn() {
      runTest("compiler/testData/codegen/box/bridges/overrideWithValueClassReturn.kt");
    }

    @Test
    @TestMetadata("propertyAccessorsWithoutBody.kt")
    public void testPropertyAccessorsWithoutBody() {
      runTest("compiler/testData/codegen/box/bridges/propertyAccessorsWithoutBody.kt");
    }

    @Test
    @TestMetadata("propertyDiamond.kt")
    public void testPropertyDiamond() {
      runTest("compiler/testData/codegen/box/bridges/propertyDiamond.kt");
    }

    @Test
    @TestMetadata("propertyDiamondFakeOverride.kt")
    public void testPropertyDiamondFakeOverride() {
      runTest("compiler/testData/codegen/box/bridges/propertyDiamondFakeOverride.kt");
    }

    @Test
    @TestMetadata("propertyInConstructor.kt")
    public void testPropertyInConstructor() {
      runTest("compiler/testData/codegen/box/bridges/propertyInConstructor.kt");
    }

    @Test
    @TestMetadata("propertySetter.kt")
    public void testPropertySetter() {
      runTest("compiler/testData/codegen/box/bridges/propertySetter.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/bridges/simple.kt");
    }

    @Test
    @TestMetadata("simpleEnum.kt")
    public void testSimpleEnum() {
      runTest("compiler/testData/codegen/box/bridges/simpleEnum.kt");
    }

    @Test
    @TestMetadata("simpleGenericMethod.kt")
    public void testSimpleGenericMethod() {
      runTest("compiler/testData/codegen/box/bridges/simpleGenericMethod.kt");
    }

    @Test
    @TestMetadata("simpleObject.kt")
    public void testSimpleObject() {
      runTest("compiler/testData/codegen/box/bridges/simpleObject.kt");
    }

    @Test
    @TestMetadata("simpleReturnType.kt")
    public void testSimpleReturnType() {
      runTest("compiler/testData/codegen/box/bridges/simpleReturnType.kt");
    }

    @Test
    @TestMetadata("simpleTraitImpl.kt")
    public void testSimpleTraitImpl() {
      runTest("compiler/testData/codegen/box/bridges/simpleTraitImpl.kt");
    }

    @Test
    @TestMetadata("simpleUpperBound.kt")
    public void testSimpleUpperBound() {
      runTest("compiler/testData/codegen/box/bridges/simpleUpperBound.kt");
    }

    @Test
    @TestMetadata("strListContains.kt")
    public void testStrListContains() {
      runTest("compiler/testData/codegen/box/bridges/strListContains.kt");
    }

    @Test
    @TestMetadata("traitImplInheritsTraitImpl.kt")
    public void testTraitImplInheritsTraitImpl() {
      runTest("compiler/testData/codegen/box/bridges/traitImplInheritsTraitImpl.kt");
    }

    @Test
    @TestMetadata("twoParentsWithDifferentMethodsTwoBridges.kt")
    public void testTwoParentsWithDifferentMethodsTwoBridges() {
      runTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges.kt");
    }

    @Test
    @TestMetadata("twoParentsWithDifferentMethodsTwoBridges2.kt")
    public void testTwoParentsWithDifferentMethodsTwoBridges2() {
      runTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges2.kt");
    }

    @Test
    @TestMetadata("twoParentsWithTheSameMethodOneBridge.kt")
    public void testTwoParentsWithTheSameMethodOneBridge() {
      runTest("compiler/testData/codegen/box/bridges/twoParentsWithTheSameMethodOneBridge.kt");
    }

    @Test
    @TestMetadata("typeParameterInExtensionReceiver.kt")
    public void testTypeParameterInExtensionReceiver() {
      runTest("compiler/testData/codegen/box/bridges/typeParameterInExtensionReceiver.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/bridges/substitutionInSuperClass")
    @TestDataPath("$PROJECT_ROOT")
    public class SubstitutionInSuperClass {
      @Test
      @TestMetadata("abstractFun.kt")
      public void testAbstractFun() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/abstractFun.kt");
      }

      @Test
      public void testAllFilesPresentInSubstitutionInSuperClass() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/bridges/substitutionInSuperClass"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("boundedTypeArguments.kt")
      public void testBoundedTypeArguments() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/boundedTypeArguments.kt");
      }

      @Test
      @TestMetadata("delegation.kt")
      public void testDelegation() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/delegation.kt");
      }

      @Test
      @TestMetadata("differentErasureInSuperClass.kt")
      public void testDifferentErasureInSuperClass() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/differentErasureInSuperClass.kt");
      }

      @Test
      @TestMetadata("differentErasureInSuperClassComplex.kt")
      public void testDifferentErasureInSuperClassComplex() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/differentErasureInSuperClassComplex.kt");
      }

      @Test
      @TestMetadata("enum.kt")
      public void testEnum() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/enum.kt");
      }

      @Test
      @TestMetadata("genericMethod.kt")
      public void testGenericMethod() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/genericMethod.kt");
      }

      @Test
      @TestMetadata("object.kt")
      public void testObject() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/object.kt");
      }

      @Test
      @TestMetadata("property.kt")
      public void testProperty() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/property.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/simple.kt");
      }

      @Test
      @TestMetadata("upperBound.kt")
      public void testUpperBound() {
        runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/upperBound.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/builderInference")
  @TestDataPath("$PROJECT_ROOT")
  public class BuilderInference {
    @Test
    public void testAllFilesPresentInBuilderInference() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("lambdaParameterHasTVType.kt")
    public void testLambdaParameterHasTVType() {
      runTest("compiler/testData/codegen/box/builderInference/lambdaParameterHasTVType.kt");
    }

    @Test
    @TestMetadata("pcaRootIsDelegatedConstructorCall.kt")
    public void testPcaRootIsDelegatedConstructorCall() {
      runTest("compiler/testData/codegen/box/builderInference/pcaRootIsDelegatedConstructorCall.kt");
    }

    @Test
    @TestMetadata("pclaRootIsElvisSynthetic.kt")
    public void testPclaRootIsElvisSynthetic() {
      runTest("compiler/testData/codegen/box/builderInference/pclaRootIsElvisSynthetic.kt");
    }

    @Test
    @TestMetadata("pclaRootIsIfWhenSyntheticCall.kt")
    public void testPclaRootIsIfWhenSyntheticCall() {
      runTest("compiler/testData/codegen/box/builderInference/pclaRootIsIfWhenSyntheticCall.kt");
    }

    @Test
    @TestMetadata("pclaRootIsTrySyntheticCall.kt")
    public void testPclaRootIsTrySyntheticCall() {
      runTest("compiler/testData/codegen/box/builderInference/pclaRootIsTrySyntheticCall.kt");
    }

    @Test
    @TestMetadata("pclaRootIsTrySyntheticCallWithDelegate.kt")
    public void testPclaRootIsTrySyntheticCallWithDelegate() {
      runTest("compiler/testData/codegen/box/builderInference/pclaRootIsTrySyntheticCallWithDelegate.kt");
    }

    @Test
    @TestMetadata("posptonedPCLACallInsideStringInterpolation.kt")
    public void testPosptonedPCLACallInsideStringInterpolation() {
      runTest("compiler/testData/codegen/box/builderInference/posptonedPCLACallInsideStringInterpolation.kt");
    }

    @Test
    @TestMetadata("receiverUsesOuterTVButReturnTypeIsProper.kt")
    public void testReceiverUsesOuterTVButReturnTypeIsProper() {
      runTest("compiler/testData/codegen/box/builderInference/receiverUsesOuterTVButReturnTypeIsProper.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/builderInference/issues")
    @TestDataPath("$PROJECT_ROOT")
    public class Issues {
      @Test
      public void testAllFilesPresentInIssues() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference/issues"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt43710.kt")
      public void testKt43710() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt43710.kt");
      }

      @Test
      @TestMetadata("kt47989a.kt")
      public void testKt47989a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt47989a.kt");
      }

      @Test
      @TestMetadata("kt47989b.kt")
      public void testKt47989b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt47989b.kt");
      }

      @Test
      @TestMetadata("kt49160a.kt")
      public void testKt49160a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt49160a.kt");
      }

      @Test
      @TestMetadata("kt49160b.kt")
      public void testKt49160b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt49160b.kt");
      }

      @Test
      @TestMetadata("kt49160c.kt")
      public void testKt49160c() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt49160c.kt");
      }

      @Test
      @TestMetadata("kt49160d.kt")
      public void testKt49160d() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt49160d.kt");
      }

      @Test
      @TestMetadata("kt49160e.kt")
      public void testKt49160e() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt49160e.kt");
      }

      @Test
      @TestMetadata("kt49263.kt")
      public void testKt49263() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt49263.kt");
      }

      @Test
      @TestMetadata("kt50453.kt")
      public void testKt50453() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt50453.kt");
      }

      @Test
      @TestMetadata("kt50827a.kt")
      public void testKt50827a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt50827a.kt");
      }

      @Test
      @TestMetadata("kt50827b.kt")
      public void testKt50827b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt50827b.kt");
      }

      @Test
      @TestMetadata("kt52757.kt")
      public void testKt52757() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt52757.kt");
      }

      @Test
      @TestMetadata("kt52838a.kt")
      public void testKt52838a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt52838a.kt");
      }

      @Test
      @TestMetadata("kt52838b.kt")
      public void testKt52838b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt52838b.kt");
      }

      @Test
      @TestMetadata("kt52838c.kt")
      public void testKt52838c() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt52838c.kt");
      }

      @Test
      @TestMetadata("kt53109.kt")
      public void testKt53109() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt53109.kt");
      }

      @Test
      @TestMetadata("kt53422a.kt")
      public void testKt53422a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt53422a.kt");
      }

      @Test
      @TestMetadata("kt53422b.kt")
      public void testKt53422b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt53422b.kt");
      }

      @Test
      @TestMetadata("kt53553.kt")
      public void testKt53553() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt53553.kt");
      }

      @Test
      @TestMetadata("kt53639.kt")
      public void testKt53639() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt53639.kt");
      }

      @Test
      @TestMetadata("kt53740a.kt")
      public void testKt53740a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt53740a.kt");
      }

      @Test
      @TestMetadata("kt53740b.kt")
      public void testKt53740b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt53740b.kt");
      }

      @Test
      @TestMetadata("kt54400a.kt")
      public void testKt54400a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt54400a.kt");
      }

      @Test
      @TestMetadata("kt54400b.kt")
      public void testKt54400b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt54400b.kt");
      }

      @Test
      @TestMetadata("kt54400c.kt")
      public void testKt54400c() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt54400c.kt");
      }

      @Test
      @TestMetadata("kt54664.kt")
      public void testKt54664() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt54664.kt");
      }

      @Test
      @TestMetadata("kt54767a.kt")
      public void testKt54767a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt54767a.kt");
      }

      @Test
      @TestMetadata("kt54767b.kt")
      public void testKt54767b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt54767b.kt");
      }

      @Test
      @TestMetadata("kt55056.kt")
      public void testKt55056() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt55056.kt");
      }

      @Test
      @TestMetadata("kt55252.kt")
      public void testKt55252() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt55252.kt");
      }

      @Test
      @TestMetadata("kt55281.kt")
      public void testKt55281() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt55281.kt");
      }

      @Test
      @TestMetadata("kt56949.kt")
      public void testKt56949() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt56949.kt");
      }

      @Test
      @TestMetadata("kt57707.kt")
      public void testKt57707() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt57707.kt");
      }

      @Test
      @TestMetadata("kt57834.kt")
      public void testKt57834() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt57834.kt");
      }

      @Test
      @TestMetadata("kt59426.kt")
      public void testKt59426() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt59426.kt");
      }

      @Test
      @TestMetadata("kt59798.kt")
      public void testKt59798() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt59798.kt");
      }

      @Test
      @TestMetadata("kt60291a.kt")
      public void testKt60291a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt60291a.kt");
      }

      @Test
      @TestMetadata("kt60291b.kt")
      public void testKt60291b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt60291b.kt");
      }

      @Test
      @TestMetadata("kt60291c.kt")
      public void testKt60291c() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt60291c.kt");
      }

      @Test
      @TestMetadata("kt60447a.kt")
      public void testKt60447a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt60447a.kt");
      }

      @Test
      @TestMetadata("kt60447b.kt")
      public void testKt60447b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt60447b.kt");
      }

      @Test
      @TestMetadata("kt61310.kt")
      public void testKt61310() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt61310.kt");
      }

      @Test
      @TestMetadata("kt63733.kt")
      public void testKt63733() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt63733.kt");
      }

      @Test
      @TestMetadata("kt63840a.kt")
      public void testKt63840a() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt63840a.kt");
      }

      @Test
      @TestMetadata("kt63840b.kt")
      public void testKt63840b() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt63840b.kt");
      }

      @Test
      @TestMetadata("kt63840c.kt")
      public void testKt63840c() {
        runTest("compiler/testData/codegen/box/builderInference/issues/kt63840c.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/builderInference/oneParameter")
    @TestDataPath("$PROJECT_ROOT")
    public class OneParameter {
      @Test
      public void testAllFilesPresentInOneParameter() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference/oneParameter"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable")
      @TestDataPath("$PROJECT_ROOT")
      public class OneTypeVariable {
        @Test
        public void testAllFilesPresentInOneTypeVariable() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin")
        @TestDataPath("$PROJECT_ROOT")
        public class OneTypeInfoOrigin {
          @Test
          public void testAllFilesPresentInOneTypeInfoOrigin() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("AnonymousFunctionArgumentAndBuildeeParameter.kt")
          public void testAnonymousFunctionArgumentAndBuildeeParameter() {
            runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/AnonymousFunctionArgumentAndBuildeeParameter.kt");
          }

          @Test
          @TestMetadata("AnonymousFunctionArgumentAndBuildeeReceiver.kt")
          public void testAnonymousFunctionArgumentAndBuildeeReceiver() {
            runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/AnonymousFunctionArgumentAndBuildeeReceiver.kt");
          }

          @Test
          @TestMetadata("LambdaArgumentAndBuildeeParameter.kt")
          public void testLambdaArgumentAndBuildeeParameter() {
            runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/LambdaArgumentAndBuildeeParameter.kt");
          }

          @Test
          @TestMetadata("LambdaArgumentAndBuildeeReceiver.kt")
          public void testLambdaArgumentAndBuildeeReceiver() {
            runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/LambdaArgumentAndBuildeeReceiver.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts")
          @TestDataPath("$PROJECT_ROOT")
          public class SourceSinkFeedContexts {
            @Test
            public void testAllFilesPresentInSourceSinkFeedContexts() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("ByAssignmentToALocalVariableMaterializeCase.kt")
            public void testByAssignmentToALocalVariableMaterializeCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ByAssignmentToALocalVariableMaterializeCase.kt");
            }

            @Test
            @TestMetadata("ByAssignmentToALocalVariableYieldCase.kt")
            public void testByAssignmentToALocalVariableYieldCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ByAssignmentToALocalVariableYieldCase.kt");
            }

            @Test
            @TestMetadata("InsideAnonymousObject.kt")
            public void testInsideAnonymousObject() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideAnonymousObject.kt");
            }

            @Test
            @TestMetadata("InsideLocalClass.kt")
            public void testInsideLocalClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideLocalClass.kt");
            }

            @Test
            @TestMetadata("InsideNestedLambda.kt")
            public void testInsideNestedLambda() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideNestedLambda.kt");
            }

            @Test
            @TestMetadata("ThroughDelegatedLocalVariableMaterializeCase.kt")
            public void testThroughDelegatedLocalVariableMaterializeCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughDelegatedLocalVariableMaterializeCase.kt");
            }

            @Test
            @TestMetadata("ThroughDelegatedLocalVariableYieldCase.kt")
            public void testThroughDelegatedLocalVariableYieldCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughDelegatedLocalVariableYieldCase.kt");
            }

            @Test
            @TestMetadata("ThroughGenericFunctionCall.kt")
            public void testThroughGenericFunctionCall() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughGenericFunctionCall.kt");
            }

            @Test
            @TestMetadata("ThroughLocalVariable.kt")
            public void testThroughLocalVariable() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughLocalVariable.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes")
          @TestDataPath("$PROJECT_ROOT")
          public class TargetTypes {
            @Test
            public void testAllFilesPresentInTargetTypes() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("AnonymousObject.kt")
            public void testAnonymousObject() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/AnonymousObject.kt");
            }

            @Test
            @TestMetadata("DefinitelyNonNullableTypeParameter.kt")
            public void testDefinitelyNonNullableTypeParameter() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/DefinitelyNonNullableTypeParameter.kt");
            }

            @Test
            @TestMetadata("EnclosingClass.kt")
            public void testEnclosingClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingClass.kt");
            }

            @Test
            @TestMetadata("EnclosingEnumerationEntryType.kt")
            public void testEnclosingEnumerationEntryType() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingEnumerationEntryType.kt");
            }

            @Test
            @TestMetadata("EnclosingEnumerationType.kt")
            public void testEnclosingEnumerationType() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingEnumerationType.kt");
            }

            @Test
            @TestMetadata("EnclosingExplicitlyGenericInnerClass.kt")
            public void testEnclosingExplicitlyGenericInnerClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingExplicitlyGenericInnerClass.kt");
            }

            @Test
            @TestMetadata("EnclosingGenericClass.kt")
            public void testEnclosingGenericClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingGenericClass.kt");
            }

            @Test
            @TestMetadata("EnclosingImplicitlyGenericInnerClass.kt")
            public void testEnclosingImplicitlyGenericInnerClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingImplicitlyGenericInnerClass.kt");
            }

            @Test
            @TestMetadata("EnclosingInnerClass.kt")
            public void testEnclosingInnerClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnclosingInnerClass.kt");
            }

            @Test
            @TestMetadata("EnumerationType.kt")
            public void testEnumerationType() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/EnumerationType.kt");
            }

            @Test
            @TestMetadata("ExplicitlyGenericInnerClass.kt")
            public void testExplicitlyGenericInnerClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/ExplicitlyGenericInnerClass.kt");
            }

            @Test
            @TestMetadata("FunctionWithParameterToUnit.kt")
            public void testFunctionWithParameterToUnit() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/FunctionWithParameterToUnit.kt");
            }

            @Test
            @TestMetadata("FunctionWithReceiverToUnit.kt")
            public void testFunctionWithReceiverToUnit() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/FunctionWithReceiverToUnit.kt");
            }

            @Test
            @TestMetadata("GenericLocalClass.kt")
            public void testGenericLocalClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericLocalClass.kt");
            }

            @Test
            @TestMetadata("GenericLocalClassWithLeakingTypeParameter.kt")
            public void testGenericLocalClassWithLeakingTypeParameter() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericLocalClassWithLeakingTypeParameter.kt");
            }

            @Test
            @TestMetadata("GenericWithContravariantTypeParameter.kt")
            public void testGenericWithContravariantTypeParameter() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithContravariantTypeParameter.kt");
            }

            @Test
            @TestMetadata("GenericWithCovariantTypeParameter.kt")
            public void testGenericWithCovariantTypeParameter() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithCovariantTypeParameter.kt");
            }

            @Test
            @TestMetadata("GenericWithInProjectedTypeArgument.kt")
            public void testGenericWithInProjectedTypeArgument() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithInProjectedTypeArgument.kt");
            }

            @Test
            @TestMetadata("GenericWithInvariantTypeParameter.kt")
            public void testGenericWithInvariantTypeParameter() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithInvariantTypeParameter.kt");
            }

            @Test
            @TestMetadata("GenericWithOutProjectedTypeArgument.kt")
            public void testGenericWithOutProjectedTypeArgument() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithOutProjectedTypeArgument.kt");
            }

            @Test
            @TestMetadata("GenericWithStarProjectedTypeArgument.kt")
            public void testGenericWithStarProjectedTypeArgument() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/GenericWithStarProjectedTypeArgument.kt");
            }

            @Test
            @TestMetadata("ImplicitlyGenericInnerClass.kt")
            public void testImplicitlyGenericInnerClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/ImplicitlyGenericInnerClass.kt");
            }

            @Test
            @TestMetadata("InnerClass.kt")
            public void testInnerClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/InnerClass.kt");
            }

            @Test
            @TestMetadata("Int.kt")
            public void testInt() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/Int.kt");
            }

            @Test
            @TestMetadata("IntersectionType.kt")
            public void testIntersectionType() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/IntersectionType.kt");
            }

            @Test
            @TestMetadata("LocalClass.kt")
            public void testLocalClass() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/LocalClass.kt");
            }

            @Test
            @TestMetadata("NothingYieldCase.kt")
            public void testNothingYieldCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NothingYieldCase.kt");
            }

            @Test
            @TestMetadata("NullableNothing.kt")
            public void testNullableNothing() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableNothing.kt");
            }

            @Test
            @TestMetadata("NullableNothingNullLiteralYieldCase.kt")
            public void testNullableNothingNullLiteralYieldCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableNothingNullLiteralYieldCase.kt");
            }

            @Test
            @TestMetadata("NullableType.kt")
            public void testNullableType() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableType.kt");
            }

            @Test
            @TestMetadata("NullableTypeParameter.kt")
            public void testNullableTypeParameter() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableTypeParameter.kt");
            }

            @Test
            @TestMetadata("NullaryFunctionToUnit.kt")
            public void testNullaryFunctionToUnit() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullaryFunctionToUnit.kt");
            }

            @Test
            @TestMetadata("NullaryFunctionWithReturnValue.kt")
            public void testNullaryFunctionWithReturnValue() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullaryFunctionWithReturnValue.kt");
            }

            @Test
            @TestMetadata("String.kt")
            public void testString() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/String.kt");
            }

            @Test
            @TestMetadata("SuspendingFunction.kt")
            public void testSuspendingFunction() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/SuspendingFunction.kt");
            }

            @Test
            @TestMetadata("TypeParameter.kt")
            public void testTypeParameter() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/TypeParameter.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks")
          @TestDataPath("$PROJECT_ROOT")
          public class TypeInfoSinks {
            @Test
            public void testAllFilesPresentInTypeInfoSinks() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("ExtensionFunctions.kt")
            public void testExtensionFunctions() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ExtensionFunctions.kt");
            }

            @Test
            @TestMetadata("ImmutableExtensionProperties.kt")
            public void testImmutableExtensionProperties() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ImmutableExtensionProperties.kt");
            }

            @Test
            @TestMetadata("ImmutableProperties.kt")
            public void testImmutableProperties() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ImmutableProperties.kt");
            }

            @Test
            @TestMetadata("MutableExtensionPropertiesMaterializeCase.kt")
            public void testMutableExtensionPropertiesMaterializeCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutableExtensionPropertiesMaterializeCase.kt");
            }

            @Test
            @TestMetadata("MutableExtensionPropertiesYieldCase.kt")
            public void testMutableExtensionPropertiesYieldCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutableExtensionPropertiesYieldCase.kt");
            }

            @Test
            @TestMetadata("MutablePropertiesMaterializeCase.kt")
            public void testMutablePropertiesMaterializeCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutablePropertiesMaterializeCase.kt");
            }

            @Test
            @TestMetadata("MutablePropertiesYieldCase.kt")
            public void testMutablePropertiesYieldCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutablePropertiesYieldCase.kt");
            }

            @Test
            @TestMetadata("ParametersOfBuilderArguments.kt")
            public void testParametersOfBuilderArguments() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ParametersOfBuilderArguments.kt");
            }

            @Test
            @TestMetadata("ReceiversOfBuilderArguments.kt")
            public void testReceiversOfBuilderArguments() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ReceiversOfBuilderArguments.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources")
          @TestDataPath("$PROJECT_ROOT")
          public class TypeInfoSources {
            @Test
            public void testAllFilesPresentInTypeInfoSources() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("ExtensionFunctions.kt")
            public void testExtensionFunctions() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ExtensionFunctions.kt");
            }

            @Test
            @TestMetadata("ExtensionProperties.kt")
            public void testExtensionProperties() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ExtensionProperties.kt");
            }

            @Test
            @TestMetadata("ParametersOfBuilderArguments.kt")
            public void testParametersOfBuilderArguments() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ParametersOfBuilderArguments.kt");
            }

            @Test
            @TestMetadata("ReceiversOfBuilderArguments.kt")
            public void testReceiversOfBuilderArguments() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ReceiversOfBuilderArguments.kt");
            }

            @Test
            @TestMetadata("ReturnTypesOfBuilderParameters.kt")
            public void testReturnTypesOfBuilderParameters() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ReturnTypesOfBuilderParameters.kt");
            }

            @Test
            @TestMetadata("UnitReturnTypeOfBuilderParametersExplicitReturnCase.kt")
            public void testUnitReturnTypeOfBuilderParametersExplicitReturnCase() {
              runTest("compiler/testData/codegen/box/builderInference/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/UnitReturnTypeOfBuilderParametersExplicitReturnCase.kt");
            }
          }
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/builtinStubMethods")
  @TestDataPath("$PROJECT_ROOT")
  public class BuiltinStubMethods {
    @Test
    public void testAllFilesPresentInBuiltinStubMethods() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("customReadOnlyIterator.kt")
    public void testCustomReadOnlyIterator() {
      runTest("compiler/testData/codegen/box/builtinStubMethods/customReadOnlyIterator.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs")
    @TestDataPath("$PROJECT_ROOT")
    public class BridgesForStubs {
      @Test
      public void testAllFilesPresentInBridgesForStubs() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/bridgesForStubs"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class ExtendJavaClasses {
      @Test
      @TestMetadata("abstractSet.kt")
      public void testAbstractSet() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/abstractSet.kt");
      }

      @Test
      public void testAllFilesPresentInExtendJavaClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("arrayList.kt")
      public void testArrayList() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/arrayList.kt");
      }

      @Test
      @TestMetadata("extendArrayListThroughKotlin.kt")
      public void testExtendArrayListThroughKotlin() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/extendArrayListThroughKotlin.kt");
      }

      @Test
      @TestMetadata("hashMap.kt")
      public void testHashMap() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/hashMap.kt");
      }

      @Test
      @TestMetadata("hashSet.kt")
      public void testHashSet() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/hashSet.kt");
      }

      @Test
      @TestMetadata("overrideAbstractSetMethod.kt")
      public void testOverrideAbstractSetMethod() {
        runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaClasses/overrideAbstractSetMethod.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault")
    @TestDataPath("$PROJECT_ROOT")
    public class MapGetOrDefault {
      @Test
      public void testAllFilesPresentInMapGetOrDefault() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/mapRemove")
    @TestDataPath("$PROJECT_ROOT")
    public class MapRemove {
      @Test
      public void testAllFilesPresentInMapRemove() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/mapRemove"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/callableReference")
  @TestDataPath("$PROJECT_ROOT")
  public class CallableReference {
    @Test
    public void testAllFilesPresentInCallableReference() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("arrayConstructor.kt")
    public void testArrayConstructor() {
      runTest("compiler/testData/codegen/box/callableReference/arrayConstructor.kt");
    }

    @Test
    @TestMetadata("arrayConstructorArgument.kt")
    public void testArrayConstructorArgument() {
      runTest("compiler/testData/codegen/box/callableReference/arrayConstructorArgument.kt");
    }

    @Test
    @TestMetadata("arrayOf.kt")
    public void testArrayOf() {
      runTest("compiler/testData/codegen/box/callableReference/arrayOf.kt");
    }

    @Test
    @TestMetadata("arrayOfNulls.kt")
    public void testArrayOfNulls() {
      runTest("compiler/testData/codegen/box/callableReference/arrayOfNulls.kt");
    }

    @Test
    @TestMetadata("callableReferenceOfCompanionConst.kt")
    public void testCallableReferenceOfCompanionConst() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfCompanionConst.kt");
    }

    @Test
    @TestMetadata("callableReferenceOfCompanionMethod.kt")
    public void testCallableReferenceOfCompanionMethod() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfCompanionMethod.kt");
    }

    @Test
    @TestMetadata("callableReferenceOfCompanionProperty.kt")
    public void testCallableReferenceOfCompanionProperty() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfCompanionProperty.kt");
    }

    @Test
    @TestMetadata("callableReferenceOfKotlinNestedClass.kt")
    public void testCallableReferenceOfKotlinNestedClass() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfKotlinNestedClass.kt");
    }

    @Test
    @TestMetadata("callableReferenceOfObjectMethod.kt")
    public void testCallableReferenceOfObjectMethod() {
      runTest("compiler/testData/codegen/box/callableReference/callableReferenceOfObjectMethod.kt");
    }

    @Test
    @TestMetadata("charArrayOf.kt")
    public void testCharArrayOf() {
      runTest("compiler/testData/codegen/box/callableReference/charArrayOf.kt");
    }

    @Test
    @TestMetadata("genericConstructorReference.kt")
    public void testGenericConstructorReference() {
      runTest("compiler/testData/codegen/box/callableReference/genericConstructorReference.kt");
    }

    @Test
    @TestMetadata("genericLocalClassConstructorReference.kt")
    public void testGenericLocalClassConstructorReference() {
      runTest("compiler/testData/codegen/box/callableReference/genericLocalClassConstructorReference.kt");
    }

    @Test
    @TestMetadata("inlineArrayConstructors.kt")
    public void testInlineArrayConstructors() {
      runTest("compiler/testData/codegen/box/callableReference/inlineArrayConstructors.kt");
    }

    @Test
    @TestMetadata("kt21014.kt")
    public void testKt21014() {
      runTest("compiler/testData/codegen/box/callableReference/kt21014.kt");
    }

    @Test
    @TestMetadata("kt21092a.kt")
    public void testKt21092a() {
      runTest("compiler/testData/codegen/box/callableReference/kt21092a.kt");
    }

    @Test
    @TestMetadata("kt37604.kt")
    public void testKt37604() {
      runTest("compiler/testData/codegen/box/callableReference/kt37604.kt");
    }

    @Test
    @TestMetadata("kt44483.kt")
    public void testKt44483() {
      runTest("compiler/testData/codegen/box/callableReference/kt44483.kt");
    }

    @Test
    @TestMetadata("kt46902.kt")
    public void testKt46902() {
      runTest("compiler/testData/codegen/box/callableReference/kt46902.kt");
    }

    @Test
    @TestMetadata("kt47988.kt")
    public void testKt47988() {
      runTest("compiler/testData/codegen/box/callableReference/kt47988.kt");
    }

    @Test
    @TestMetadata("kt49526.kt")
    public void testKt49526() {
      runTest("compiler/testData/codegen/box/callableReference/kt49526.kt");
    }

    @Test
    @TestMetadata("kt49526_sam.kt")
    public void testKt49526_sam() {
      runTest("compiler/testData/codegen/box/callableReference/kt49526_sam.kt");
    }

    @Test
    @TestMetadata("kt49526a.kt")
    public void testKt49526a() {
      runTest("compiler/testData/codegen/box/callableReference/kt49526a.kt");
    }

    @Test
    @TestMetadata("kt49526b.kt")
    public void testKt49526b() {
      runTest("compiler/testData/codegen/box/callableReference/kt49526b.kt");
    }

    @Test
    @TestMetadata("kt50172.kt")
    public void testKt50172() {
      runTest("compiler/testData/codegen/box/callableReference/kt50172.kt");
    }

    @Test
    @TestMetadata("kt51844.kt")
    public void testKt51844() {
      runTest("compiler/testData/codegen/box/callableReference/kt51844.kt");
    }

    @Test
    @TestMetadata("kt52270.kt")
    public void testKt52270() {
      runTest("compiler/testData/codegen/box/callableReference/kt52270.kt");
    }

    @Test
    @TestMetadata("nested.kt")
    public void testNested() {
      runTest("compiler/testData/codegen/box/callableReference/nested.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/callableReference/adaptedReferences")
    @TestDataPath("$PROJECT_ROOT")
    public class AdaptedReferences {
      @Test
      @TestMetadata("adaptedArrayOf.kt")
      public void testAdaptedArrayOf() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/adaptedArrayOf.kt");
      }

      @Test
      @TestMetadata("adaptedVarargFunImportedFromObject.kt")
      public void testAdaptedVarargFunImportedFromObject() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/adaptedVarargFunImportedFromObject.kt");
      }

      @Test
      public void testAllFilesPresentInAdaptedReferences() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/adaptedReferences"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("bothWithCoercionToUnit.kt")
      public void testBothWithCoercionToUnit() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/bothWithCoercionToUnit.kt");
      }

      @Test
      @TestMetadata("boundReferences.kt")
      public void testBoundReferences() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/boundReferences.kt");
      }

      @Test
      @TestMetadata("defaultAfterVararg.kt")
      public void testDefaultAfterVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/defaultAfterVararg.kt");
      }

      @Test
      @TestMetadata("defaultWithGenericExpectedType.kt")
      public void testDefaultWithGenericExpectedType() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/defaultWithGenericExpectedType.kt");
      }

      @Test
      @TestMetadata("emptyVarargAndDefault.kt")
      public void testEmptyVarargAndDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/emptyVarargAndDefault.kt");
      }

      @Test
      @TestMetadata("inlineBound.kt")
      public void testInlineBound() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineBound.kt");
      }

      @Test
      @TestMetadata("inlineDefault.kt")
      public void testInlineDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineDefault.kt");
      }

      @Test
      @TestMetadata("inlineVararg.kt")
      public void testInlineVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVararg.kt");
      }

      @Test
      @TestMetadata("inlineVarargAndDefault.kt")
      public void testInlineVarargAndDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVarargAndDefault.kt");
      }

      @Test
      @TestMetadata("inlineVarargInts.kt")
      public void testInlineVarargInts() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVarargInts.kt");
      }

      @Test
      @TestMetadata("innerConstructorWithVararg.kt")
      public void testInnerConstructorWithVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/innerConstructorWithVararg.kt");
      }

      @Test
      @TestMetadata("largeVararg.kt")
      public void testLargeVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/largeVararg.kt");
      }

      @Test
      @TestMetadata("localFunctionWithDefault.kt")
      public void testLocalFunctionWithDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/localFunctionWithDefault.kt");
      }

      @Test
      @TestMetadata("manyDefaultsAndVararg.kt")
      public void testManyDefaultsAndVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/manyDefaultsAndVararg.kt");
      }

      @Test
      @TestMetadata("nestedClassConstructorWithDefault.kt")
      public void testNestedClassConstructorWithDefault() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/nestedClassConstructorWithDefault.kt");
      }

      @Test
      @TestMetadata("noNameClashForReferencesToSameFunction.kt")
      public void testNoNameClashForReferencesToSameFunction() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/noNameClashForReferencesToSameFunction.kt");
      }

      @Test
      @TestMetadata("referenceToVarargWithDefaults.kt")
      public void testReferenceToVarargWithDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/referenceToVarargWithDefaults.kt");
      }

      @Test
      @TestMetadata("simpleDefaultArgument.kt")
      public void testSimpleDefaultArgument() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/simpleDefaultArgument.kt");
      }

      @Test
      @TestMetadata("simpleEmptyVararg.kt")
      public void testSimpleEmptyVararg() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/simpleEmptyVararg.kt");
      }

      @Test
      @TestMetadata("suspendUnitConversion.kt")
      public void testSuspendUnitConversion() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendUnitConversion.kt");
      }

      @Test
      @TestMetadata("unboundReferences.kt")
      public void testUnboundReferences() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/unboundReferences.kt");
      }

      @Test
      @TestMetadata("unitCoercionOverloads.kt")
      public void testUnitCoercionOverloads() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/unitCoercionOverloads.kt");
      }

      @Test
      @TestMetadata("varargFromBaseClass.kt")
      public void testVarargFromBaseClass() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargFromBaseClass.kt");
      }

      @Test
      @TestMetadata("varargOverloads.kt")
      public void testVarargOverloads() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargOverloads.kt");
      }

      @Test
      @TestMetadata("varargViewedAsArray.kt")
      public void testVarargViewedAsArray() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargViewedAsArray.kt");
      }

      @Test
      @TestMetadata("varargViewedAsPrimitiveArray.kt")
      public void testVarargViewedAsPrimitiveArray() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargViewedAsPrimitiveArray.kt");
      }

      @Test
      @TestMetadata("varargWithDefaultValue.kt")
      public void testVarargWithDefaultValue() {
        runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargWithDefaultValue.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion")
      @TestDataPath("$PROJECT_ROOT")
      public class SuspendConversion {
        @Test
        @TestMetadata("adaptedWithCoercionToUnit.kt")
        public void testAdaptedWithCoercionToUnit() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithCoercionToUnit.kt");
        }

        @Test
        @TestMetadata("adaptedWithDefaultArguments.kt")
        public void testAdaptedWithDefaultArguments() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithDefaultArguments.kt");
        }

        @Test
        @TestMetadata("adaptedWithVarargs.kt")
        public void testAdaptedWithVarargs() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithVarargs.kt");
        }

        @Test
        public void testAllFilesPresentInSuspendConversion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("bound.kt")
        public void testBound() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/bound.kt");
        }

        @Test
        @TestMetadata("boundExtension.kt")
        public void testBoundExtension() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/boundExtension.kt");
        }

        @Test
        @TestMetadata("crossInline.kt")
        public void testCrossInline() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/crossInline.kt");
        }

        @Test
        @TestMetadata("inlineAdaptedWithCoercionToUnit.kt")
        public void testInlineAdaptedWithCoercionToUnit() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithCoercionToUnit.kt");
        }

        @Test
        @TestMetadata("inlineAdaptedWithDefaultArguments.kt")
        public void testInlineAdaptedWithDefaultArguments() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithDefaultArguments.kt");
        }

        @Test
        @TestMetadata("inlineAdaptedWithVarargs.kt")
        public void testInlineAdaptedWithVarargs() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithVarargs.kt");
        }

        @Test
        @TestMetadata("inlineBound.kt")
        public void testInlineBound() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineBound.kt");
        }

        @Test
        @TestMetadata("inlineSimple.kt")
        public void testInlineSimple() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineSimple.kt");
        }

        @Test
        @TestMetadata("inlineWithParameters.kt")
        public void testInlineWithParameters() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineWithParameters.kt");
        }

        @Test
        @TestMetadata("isAs.kt")
        public void testIsAs() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/isAs.kt");
        }

        @Test
        @TestMetadata("nullableParameter.kt")
        public void testNullableParameter() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/nullableParameter.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/simple.kt");
        }

        @Test
        @TestMetadata("withParameters.kt")
        public void testWithParameters() {
          runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/withParameters.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/callableReference/bound")
    @TestDataPath("$PROJECT_ROOT")
    public class Bound {
      @Test
      @TestMetadata("adapted.kt")
      public void testAdapted() {
        runTest("compiler/testData/codegen/box/callableReference/bound/adapted.kt");
      }

      @Test
      public void testAllFilesPresentInBound() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("array.kt")
      public void testArray() {
        runTest("compiler/testData/codegen/box/callableReference/bound/array.kt");
      }

      @Test
      @TestMetadata("arrayConstructorArgument.kt")
      public void testArrayConstructorArgument() {
        runTest("compiler/testData/codegen/box/callableReference/bound/arrayConstructorArgument.kt");
      }

      @Test
      @TestMetadata("arrayGetIntrinsic.kt")
      public void testArrayGetIntrinsic() {
        runTest("compiler/testData/codegen/box/callableReference/bound/arrayGetIntrinsic.kt");
      }

      @Test
      @TestMetadata("boundReferenceToOverloadedFunction.kt")
      public void testBoundReferenceToOverloadedFunction() {
        runTest("compiler/testData/codegen/box/callableReference/bound/boundReferenceToOverloadedFunction.kt");
      }

      @Test
      @TestMetadata("captureVarInInitBlock.kt")
      public void testCaptureVarInInitBlock() {
        runTest("compiler/testData/codegen/box/callableReference/bound/captureVarInInitBlock.kt");
      }

      @Test
      @TestMetadata("captureVarInPropertyInit.kt")
      public void testCaptureVarInPropertyInit() {
        runTest("compiler/testData/codegen/box/callableReference/bound/captureVarInPropertyInit.kt");
      }

      @Test
      @TestMetadata("coercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("compiler/testData/codegen/box/callableReference/bound/coercionToUnit.kt");
      }

      @Test
      @TestMetadata("companionObjectReceiver.kt")
      public void testCompanionObjectReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/companionObjectReceiver.kt");
      }

      @Test
      @TestMetadata("companionObjectReceiverInheritsFromOuter.kt")
      public void testCompanionObjectReceiverInheritsFromOuter() {
        runTest("compiler/testData/codegen/box/callableReference/bound/companionObjectReceiverInheritsFromOuter.kt");
      }

      @Test
      @TestMetadata("dontShareReceiver.kt")
      public void testDontShareReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/dontShareReceiver.kt");
      }

      @Test
      @TestMetadata("emptyLHS.kt")
      public void testEmptyLHS() {
        runTest("compiler/testData/codegen/box/callableReference/bound/emptyLHS.kt");
      }

      @Test
      @TestMetadata("enumEntryMember.kt")
      public void testEnumEntryMember() {
        runTest("compiler/testData/codegen/box/callableReference/bound/enumEntryMember.kt");
      }

      @Test
      @TestMetadata("genericBoundPropertyAsCrossinline.kt")
      public void testGenericBoundPropertyAsCrossinline() {
        runTest("compiler/testData/codegen/box/callableReference/bound/genericBoundPropertyAsCrossinline.kt");
      }

      @Test
      @TestMetadata("genericValOnLHS.kt")
      public void testGenericValOnLHS() {
        runTest("compiler/testData/codegen/box/callableReference/bound/genericValOnLHS.kt");
      }

      @Test
      @TestMetadata("kCallableNameIntrinsic.kt")
      public void testKCallableNameIntrinsic() {
        runTest("compiler/testData/codegen/box/callableReference/bound/kCallableNameIntrinsic.kt");
      }

      @Test
      @TestMetadata("kt12738.kt")
      public void testKt12738() {
        runTest("compiler/testData/codegen/box/callableReference/bound/kt12738.kt");
      }

      @Test
      @TestMetadata("kt15446.kt")
      public void testKt15446() {
        runTest("compiler/testData/codegen/box/callableReference/bound/kt15446.kt");
      }

      @Test
      @TestMetadata("kt44636_localExtension.kt")
      public void testKt44636_localExtension() {
        runTest("compiler/testData/codegen/box/callableReference/bound/kt44636_localExtension.kt");
      }

      @Test
      @TestMetadata("multiCase.kt")
      public void testMultiCase() {
        runTest("compiler/testData/codegen/box/callableReference/bound/multiCase.kt");
      }

      @Test
      @TestMetadata("nullReceiver.kt")
      public void testNullReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/nullReceiver.kt");
      }

      @Test
      @TestMetadata("objectReceiver.kt")
      public void testObjectReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/objectReceiver.kt");
      }

      @Test
      @TestMetadata("primitiveReceiver.kt")
      public void testPrimitiveReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/primitiveReceiver.kt");
      }

      @Test
      @TestMetadata("receiverEvaluatedOnce.kt")
      public void testReceiverEvaluatedOnce() {
        runTest("compiler/testData/codegen/box/callableReference/bound/receiverEvaluatedOnce.kt");
      }

      @Test
      @TestMetadata("simpleFunction.kt")
      public void testSimpleFunction() {
        runTest("compiler/testData/codegen/box/callableReference/bound/simpleFunction.kt");
      }

      @Test
      @TestMetadata("simpleProperty.kt")
      public void testSimpleProperty() {
        runTest("compiler/testData/codegen/box/callableReference/bound/simpleProperty.kt");
      }

      @Test
      @TestMetadata("smartCastForExtensionReceiver.kt")
      public void testSmartCastForExtensionReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/bound/smartCastForExtensionReceiver.kt");
      }

      @Test
      @TestMetadata("typeAliasObjectBoundReference.kt")
      public void testTypeAliasObjectBoundReference() {
        runTest("compiler/testData/codegen/box/callableReference/bound/typeAliasObjectBoundReference.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/callableReference/bound/equals")
      @TestDataPath("$PROJECT_ROOT")
      public class Equals {
        @Test
        public void testAllFilesPresentInEquals() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound/equals"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("nullableReceiverInEquals.kt")
        public void testNullableReceiverInEquals() {
          runTest("compiler/testData/codegen/box/callableReference/bound/equals/nullableReceiverInEquals.kt");
        }

        @Test
        @TestMetadata("receiverInEquals.kt")
        public void testReceiverInEquals() {
          runTest("compiler/testData/codegen/box/callableReference/bound/equals/receiverInEquals.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/callableReference/equality")
    @TestDataPath("$PROJECT_ROOT")
    public class Equality {
      @Test
      public void testAllFilesPresentInEquality() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/equality"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("capturedDefaults.kt")
      public void testCapturedDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/equality/capturedDefaults.kt");
      }

      @Test
      @TestMetadata("capturedVararg.kt")
      public void testCapturedVararg() {
        runTest("compiler/testData/codegen/box/callableReference/equality/capturedVararg.kt");
      }

      @Test
      @TestMetadata("coercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnit.kt");
      }

      @Test
      @TestMetadata("coercionToUnitWithDefaults.kt")
      public void testCoercionToUnitWithDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnitWithDefaults.kt");
      }

      @Test
      @TestMetadata("coercionToUnitWithVararg.kt")
      public void testCoercionToUnitWithVararg() {
        runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnitWithVararg.kt");
      }

      @Test
      @TestMetadata("conversionCombinations.kt")
      public void testConversionCombinations() {
        runTest("compiler/testData/codegen/box/callableReference/equality/conversionCombinations.kt");
      }

      @Test
      @TestMetadata("extensionReceiverVsDefault.kt")
      public void testExtensionReceiverVsDefault() {
        runTest("compiler/testData/codegen/box/callableReference/equality/extensionReceiverVsDefault.kt");
      }

      @Test
      @TestMetadata("noCoercionToUnitIfFunctionAlreadyReturnsUnit.kt")
      public void testNoCoercionToUnitIfFunctionAlreadyReturnsUnit() {
        runTest("compiler/testData/codegen/box/callableReference/equality/noCoercionToUnitIfFunctionAlreadyReturnsUnit.kt");
      }

      @Test
      @TestMetadata("simpleEquality.kt")
      public void testSimpleEquality() {
        runTest("compiler/testData/codegen/box/callableReference/equality/simpleEquality.kt");
      }

      @Test
      @TestMetadata("suspendConversion.kt")
      public void testSuspendConversion() {
        runTest("compiler/testData/codegen/box/callableReference/equality/suspendConversion.kt");
      }

      @Test
      @TestMetadata("varargAsArrayMemberOrExtension.kt")
      public void testVarargAsArrayMemberOrExtension() {
        runTest("compiler/testData/codegen/box/callableReference/equality/varargAsArrayMemberOrExtension.kt");
      }

      @Test
      @TestMetadata("varargAsArrayWithDefaults.kt")
      public void testVarargAsArrayWithDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/equality/varargAsArrayWithDefaults.kt");
      }

      @Test
      @TestMetadata("varargWithDefaults.kt")
      public void testVarargWithDefaults() {
        runTest("compiler/testData/codegen/box/callableReference/equality/varargWithDefaults.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/callableReference/funInterfaceConstructor")
    @TestDataPath("$PROJECT_ROOT")
    public class FunInterfaceConstructor {
      @Test
      public void testAllFilesPresentInFunInterfaceConstructor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/funInterfaceConstructor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("funInterfaceConstructedObjectsEquality.kt")
      public void testFunInterfaceConstructedObjectsEquality() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructedObjectsEquality.kt");
      }

      @Test
      @TestMetadata("funInterfaceConstructor.kt")
      public void testFunInterfaceConstructor() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructor.kt");
      }

      @Test
      @TestMetadata("funInterfaceConstructorEquality.kt")
      public void testFunInterfaceConstructorEquality() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructorEquality.kt");
      }

      @Test
      @TestMetadata("funInterfaceConstructorIsKFunction.kt")
      public void testFunInterfaceConstructorIsKFunction() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructorIsKFunction.kt");
      }

      @Test
      @TestMetadata("funInterfaceConstructorOfImplicitKFunctionType.kt")
      public void testFunInterfaceConstructorOfImplicitKFunctionType() {
        runTest("compiler/testData/codegen/box/callableReference/funInterfaceConstructor/funInterfaceConstructorOfImplicitKFunctionType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/callableReference/function")
    @TestDataPath("$PROJECT_ROOT")
    public class Function {
      @Test
      @TestMetadata("abstractClassMember.kt")
      public void testAbstractClassMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/abstractClassMember.kt");
      }

      @Test
      public void testAllFilesPresentInFunction() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/function"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("argumentTypes.kt")
      public void testArgumentTypes() {
        runTest("compiler/testData/codegen/box/callableReference/function/argumentTypes.kt");
      }

      @Test
      @TestMetadata("argumentTypesNoinline.kt")
      public void testArgumentTypesNoinline() {
        runTest("compiler/testData/codegen/box/callableReference/function/argumentTypesNoinline.kt");
      }

      @Test
      @TestMetadata("booleanNotIntrinsic.kt")
      public void testBooleanNotIntrinsic() {
        runTest("compiler/testData/codegen/box/callableReference/function/booleanNotIntrinsic.kt");
      }

      @Test
      @TestMetadata("classMemberFromClass.kt")
      public void testClassMemberFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromClass.kt");
      }

      @Test
      @TestMetadata("classMemberFromCompanionObject.kt")
      public void testClassMemberFromCompanionObject() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromCompanionObject.kt");
      }

      @Test
      @TestMetadata("classMemberFromExtension.kt")
      public void testClassMemberFromExtension() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromExtension.kt");
      }

      @Test
      @TestMetadata("classMemberFromTopLevelStringNoArgs.kt")
      public void testClassMemberFromTopLevelStringNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelStringNoArgs.kt");
      }

      @Test
      @TestMetadata("classMemberFromTopLevelStringOneStringArg.kt")
      public void testClassMemberFromTopLevelStringOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelStringOneStringArg.kt");
      }

      @Test
      @TestMetadata("classMemberFromTopLevelUnitNoArgs.kt")
      public void testClassMemberFromTopLevelUnitNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelUnitNoArgs.kt");
      }

      @Test
      @TestMetadata("classMemberFromTopLevelUnitOneStringArg.kt")
      public void testClassMemberFromTopLevelUnitOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelUnitOneStringArg.kt");
      }

      @Test
      @TestMetadata("coercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("compiler/testData/codegen/box/callableReference/function/coercionToUnit.kt");
      }

      @Test
      @TestMetadata("constructorFromTopLevelNoArgs.kt")
      public void testConstructorFromTopLevelNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/constructorFromTopLevelNoArgs.kt");
      }

      @Test
      @TestMetadata("constructorFromTopLevelOneStringArg.kt")
      public void testConstructorFromTopLevelOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/constructorFromTopLevelOneStringArg.kt");
      }

      @Test
      @TestMetadata("enumValueOfMethod.kt")
      public void testEnumValueOfMethod() {
        runTest("compiler/testData/codegen/box/callableReference/function/enumValueOfMethod.kt");
      }

      @Test
      @TestMetadata("equalsIntrinsic.kt")
      public void testEqualsIntrinsic() {
        runTest("compiler/testData/codegen/box/callableReference/function/equalsIntrinsic.kt");
      }

      @Test
      @TestMetadata("extensionFromClass.kt")
      public void testExtensionFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromClass.kt");
      }

      @Test
      @TestMetadata("extensionFromExtension.kt")
      public void testExtensionFromExtension() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromExtension.kt");
      }

      @Test
      @TestMetadata("extensionFromTopLevelStringNoArgs.kt")
      public void testExtensionFromTopLevelStringNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelStringNoArgs.kt");
      }

      @Test
      @TestMetadata("extensionFromTopLevelStringOneStringArg.kt")
      public void testExtensionFromTopLevelStringOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelStringOneStringArg.kt");
      }

      @Test
      @TestMetadata("extensionFromTopLevelUnitNoArgs.kt")
      public void testExtensionFromTopLevelUnitNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelUnitNoArgs.kt");
      }

      @Test
      @TestMetadata("extensionFromTopLevelUnitOneStringArg.kt")
      public void testExtensionFromTopLevelUnitOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelUnitOneStringArg.kt");
      }

      @Test
      @TestMetadata("genericCallableReferenceArgumentsNonJVM.kt")
      public void testGenericCallableReferenceArgumentsNonJVM() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferenceArgumentsNonJVM.kt");
      }

      @Test
      @TestMetadata("genericCallableReferenceWithReifiedTypeParam.kt")
      public void testGenericCallableReferenceWithReifiedTypeParam() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferenceWithReifiedTypeParam.kt");
      }

      @Test
      @TestMetadata("genericCallableReferencesWithNullableTypes.kt")
      public void testGenericCallableReferencesWithNullableTypes() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferencesWithNullableTypes.kt");
      }

      @Test
      @TestMetadata("genericCallableReferencesWithOverload.kt")
      public void testGenericCallableReferencesWithOverload() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferencesWithOverload.kt");
      }

      @Test
      @TestMetadata("genericMember.kt")
      public void testGenericMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericMember.kt");
      }

      @Test
      @TestMetadata("genericWithDependentType.kt")
      public void testGenericWithDependentType() {
        runTest("compiler/testData/codegen/box/callableReference/function/genericWithDependentType.kt");
      }

      @Test
      @TestMetadata("innerClassConstructorWithTwoReceivers.kt")
      public void testInnerClassConstructorWithTwoReceivers() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerClassConstructorWithTwoReceivers.kt");
      }

      @Test
      @TestMetadata("innerConstructorFromClass.kt")
      public void testInnerConstructorFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromClass.kt");
      }

      @Test
      @TestMetadata("innerConstructorFromExtension.kt")
      public void testInnerConstructorFromExtension() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromExtension.kt");
      }

      @Test
      @TestMetadata("innerConstructorFromTopLevelNoArgs.kt")
      public void testInnerConstructorFromTopLevelNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromTopLevelNoArgs.kt");
      }

      @Test
      @TestMetadata("innerConstructorFromTopLevelOneStringArg.kt")
      public void testInnerConstructorFromTopLevelOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromTopLevelOneStringArg.kt");
      }

      @Test
      @TestMetadata("kt21787.kt")
      public void testKt21787() {
        runTest("compiler/testData/codegen/box/callableReference/function/kt21787.kt");
      }

      @Test
      @TestMetadata("kt32462.kt")
      public void testKt32462() {
        runTest("compiler/testData/codegen/box/callableReference/function/kt32462.kt");
      }

      @Test
      @TestMetadata("kt47741.kt")
      public void testKt47741() {
        runTest("compiler/testData/codegen/box/callableReference/function/kt47741.kt");
      }

      @Test
      @TestMetadata("nestedConstructorFromClass.kt")
      public void testNestedConstructorFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromClass.kt");
      }

      @Test
      @TestMetadata("nestedConstructorFromTopLevelNoArgs.kt")
      public void testNestedConstructorFromTopLevelNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromTopLevelNoArgs.kt");
      }

      @Test
      @TestMetadata("nestedConstructorFromTopLevelOneStringArg.kt")
      public void testNestedConstructorFromTopLevelOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromTopLevelOneStringArg.kt");
      }

      @Test
      @TestMetadata("newArray.kt")
      public void testNewArray() {
        runTest("compiler/testData/codegen/box/callableReference/function/newArray.kt");
      }

      @Test
      @TestMetadata("overloadedFun.kt")
      public void testOverloadedFun() {
        runTest("compiler/testData/codegen/box/callableReference/function/overloadedFun.kt");
      }

      @Test
      @TestMetadata("overloadedFunVsVal.kt")
      public void testOverloadedFunVsVal() {
        runTest("compiler/testData/codegen/box/callableReference/function/overloadedFunVsVal.kt");
      }

      @Test
      @TestMetadata("privateClassMember.kt")
      public void testPrivateClassMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/privateClassMember.kt");
      }

      @Test
      @TestMetadata("referenceToCompanionMember.kt")
      public void testReferenceToCompanionMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/referenceToCompanionMember.kt");
      }

      @Test
      @TestMetadata("sortListOfStrings.kt")
      public void testSortListOfStrings() {
        runTest("compiler/testData/codegen/box/callableReference/function/sortListOfStrings.kt");
      }

      @Test
      @TestMetadata("specialCalls.kt")
      public void testSpecialCalls() {
        runTest("compiler/testData/codegen/box/callableReference/function/specialCalls.kt");
      }

      @Test
      @TestMetadata("topLevelFromClass.kt")
      public void testTopLevelFromClass() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromClass.kt");
      }

      @Test
      @TestMetadata("topLevelFromExtension.kt")
      public void testTopLevelFromExtension() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromExtension.kt");
      }

      @Test
      @TestMetadata("topLevelFromTopLevelStringNoArgs.kt")
      public void testTopLevelFromTopLevelStringNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelStringNoArgs.kt");
      }

      @Test
      @TestMetadata("topLevelFromTopLevelStringOneStringArg.kt")
      public void testTopLevelFromTopLevelStringOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelStringOneStringArg.kt");
      }

      @Test
      @TestMetadata("topLevelFromTopLevelUnitManyArgs.kt")
      public void testTopLevelFromTopLevelUnitManyArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitManyArgs.kt");
      }

      @Test
      @TestMetadata("topLevelFromTopLevelUnitNoArgs.kt")
      public void testTopLevelFromTopLevelUnitNoArgs() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitNoArgs.kt");
      }

      @Test
      @TestMetadata("topLevelFromTopLevelUnitOneStringArg.kt")
      public void testTopLevelFromTopLevelUnitOneStringArg() {
        runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitOneStringArg.kt");
      }

      @Test
      @TestMetadata("traitImplMethodWithClassReceiver.kt")
      public void testTraitImplMethodWithClassReceiver() {
        runTest("compiler/testData/codegen/box/callableReference/function/traitImplMethodWithClassReceiver.kt");
      }

      @Test
      @TestMetadata("traitMember.kt")
      public void testTraitMember() {
        runTest("compiler/testData/codegen/box/callableReference/function/traitMember.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/callableReference/function/local")
      @TestDataPath("$PROJECT_ROOT")
      public class Local {
        @Test
        public void testAllFilesPresentInLocal() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/function/local"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("captureOuter.kt")
        public void testCaptureOuter() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/captureOuter.kt");
        }

        @Test
        @TestMetadata("classMember.kt")
        public void testClassMember() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/classMember.kt");
        }

        @Test
        @TestMetadata("closureWithSideEffect.kt")
        public void testClosureWithSideEffect() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/closureWithSideEffect.kt");
        }

        @Test
        @TestMetadata("constructor.kt")
        public void testConstructor() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/constructor.kt");
        }

        @Test
        @TestMetadata("constructorWithInitializer.kt")
        public void testConstructorWithInitializer() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/constructorWithInitializer.kt");
        }

        @Test
        @TestMetadata("enumExtendsTrait.kt")
        public void testEnumExtendsTrait() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/enumExtendsTrait.kt");
        }

        @Test
        @TestMetadata("equalsHashCode.kt")
        public void testEqualsHashCode() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/equalsHashCode.kt");
        }

        @Test
        @TestMetadata("extension.kt")
        public void testExtension() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/extension.kt");
        }

        @Test
        @TestMetadata("extensionToLocalClass.kt")
        public void testExtensionToLocalClass() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/extensionToLocalClass.kt");
        }

        @Test
        @TestMetadata("extensionToPrimitive.kt")
        public void testExtensionToPrimitive() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/extensionToPrimitive.kt");
        }

        @Test
        @TestMetadata("extensionWithClosure.kt")
        public void testExtensionWithClosure() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/extensionWithClosure.kt");
        }

        @Test
        @TestMetadata("genericMember.kt")
        public void testGenericMember() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/genericMember.kt");
        }

        @Test
        @TestMetadata("localClassMember.kt")
        public void testLocalClassMember() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/localClassMember.kt");
        }

        @Test
        @TestMetadata("localFunctionName.kt")
        public void testLocalFunctionName() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/localFunctionName.kt");
        }

        @Test
        @TestMetadata("localLocal.kt")
        public void testLocalLocal() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/localLocal.kt");
        }

        @Test
        @TestMetadata("recursiveClosure.kt")
        public void testRecursiveClosure() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/recursiveClosure.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/simple.kt");
        }

        @Test
        @TestMetadata("simpleClosure.kt")
        public void testSimpleClosure() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/simpleClosure.kt");
        }

        @Test
        @TestMetadata("simpleWithArg.kt")
        public void testSimpleWithArg() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/simpleWithArg.kt");
        }

        @Test
        @TestMetadata("unitWithSideEffect.kt")
        public void testUnitWithSideEffect() {
          runTest("compiler/testData/codegen/box/callableReference/function/local/unitWithSideEffect.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/callableReference/property")
    @TestDataPath("$PROJECT_ROOT")
    public class Property {
      @Test
      @TestMetadata("accessViaSubclass.kt")
      public void testAccessViaSubclass() {
        runTest("compiler/testData/codegen/box/callableReference/property/accessViaSubclass.kt");
      }

      @Test
      @TestMetadata("accessorForPropertyWithPrivateSetter.kt")
      public void testAccessorForPropertyWithPrivateSetter() {
        runTest("compiler/testData/codegen/box/callableReference/property/accessorForPropertyWithPrivateSetter.kt");
      }

      @Test
      public void testAllFilesPresentInProperty() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/property"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("delegated.kt")
      public void testDelegated() {
        runTest("compiler/testData/codegen/box/callableReference/property/delegated.kt");
      }

      @Test
      @TestMetadata("delegatedMutable.kt")
      public void testDelegatedMutable() {
        runTest("compiler/testData/codegen/box/callableReference/property/delegatedMutable.kt");
      }

      @Test
      @TestMetadata("enumNameOrdinal.kt")
      public void testEnumNameOrdinal() {
        runTest("compiler/testData/codegen/box/callableReference/property/enumNameOrdinal.kt");
      }

      @Test
      @TestMetadata("extensionToArray.kt")
      public void testExtensionToArray() {
        runTest("compiler/testData/codegen/box/callableReference/property/extensionToArray.kt");
      }

      @Test
      @TestMetadata("genericProperty.kt")
      public void testGenericProperty() {
        runTest("compiler/testData/codegen/box/callableReference/property/genericProperty.kt");
      }

      @Test
      @TestMetadata("inEnum.kt")
      public void testInEnum() {
        runTest("compiler/testData/codegen/box/callableReference/property/inEnum.kt");
      }

      @Test
      @TestMetadata("inReceiverOfAnother.kt")
      public void testInReceiverOfAnother() {
        runTest("compiler/testData/codegen/box/callableReference/property/inReceiverOfAnother.kt");
      }

      @Test
      @TestMetadata("invokePropertyReference.kt")
      public void testInvokePropertyReference() {
        runTest("compiler/testData/codegen/box/callableReference/property/invokePropertyReference.kt");
      }

      @Test
      @TestMetadata("javaBeanConvention.kt")
      public void testJavaBeanConvention() {
        runTest("compiler/testData/codegen/box/callableReference/property/javaBeanConvention.kt");
      }

      @Test
      @TestMetadata("kClassInstanceIsInitializedFirst.kt")
      public void testKClassInstanceIsInitializedFirst() {
        runTest("compiler/testData/codegen/box/callableReference/property/kClassInstanceIsInitializedFirst.kt");
      }

      @Test
      @TestMetadata("kt12044.kt")
      public void testKt12044() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt12044.kt");
      }

      @Test
      @TestMetadata("kt12982_protectedPropertyReference.kt")
      public void testKt12982_protectedPropertyReference() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt12982_protectedPropertyReference.kt");
      }

      @Test
      @TestMetadata("kt14330.kt")
      public void testKt14330() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt14330.kt");
      }

      @Test
      @TestMetadata("kt14330_2.kt")
      public void testKt14330_2() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt14330_2.kt");
      }

      @Test
      @TestMetadata("kt15447.kt")
      public void testKt15447() {
        runTest("compiler/testData/codegen/box/callableReference/property/kt15447.kt");
      }

      @Test
      @TestMetadata("listOfStringsMapLength.kt")
      public void testListOfStringsMapLength() {
        runTest("compiler/testData/codegen/box/callableReference/property/listOfStringsMapLength.kt");
      }

      @Test
      @TestMetadata("localClassVar.kt")
      public void testLocalClassVar() {
        runTest("compiler/testData/codegen/box/callableReference/property/localClassVar.kt");
      }

      @Test
      @TestMetadata("overriddenInSubclass.kt")
      public void testOverriddenInSubclass() {
        runTest("compiler/testData/codegen/box/callableReference/property/overriddenInSubclass.kt");
      }

      @Test
      @TestMetadata("privateSetOuterClass.kt")
      public void testPrivateSetOuterClass() {
        runTest("compiler/testData/codegen/box/callableReference/property/privateSetOuterClass.kt");
      }

      @Test
      @TestMetadata("privateSetterInsideClass.kt")
      public void testPrivateSetterInsideClass() {
        runTest("compiler/testData/codegen/box/callableReference/property/privateSetterInsideClass.kt");
      }

      @Test
      @TestMetadata("privateSetterOutsideClass.kt")
      public void testPrivateSetterOutsideClass() {
        runTest("compiler/testData/codegen/box/callableReference/property/privateSetterOutsideClass.kt");
      }

      @Test
      @TestMetadata("receiverEvaluatedOnce.kt")
      public void testReceiverEvaluatedOnce() {
        runTest("compiler/testData/codegen/box/callableReference/property/receiverEvaluatedOnce.kt");
      }

      @Test
      @TestMetadata("simpleExtension.kt")
      public void testSimpleExtension() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleExtension.kt");
      }

      @Test
      @TestMetadata("simpleMember.kt")
      public void testSimpleMember() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleMember.kt");
      }

      @Test
      @TestMetadata("simpleMutableExtension.kt")
      public void testSimpleMutableExtension() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableExtension.kt");
      }

      @Test
      @TestMetadata("simpleMutableMember.kt")
      public void testSimpleMutableMember() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableMember.kt");
      }

      @Test
      @TestMetadata("simpleMutableTopLevel.kt")
      public void testSimpleMutableTopLevel() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableTopLevel.kt");
      }

      @Test
      @TestMetadata("simpleTopLevel.kt")
      public void testSimpleTopLevel() {
        runTest("compiler/testData/codegen/box/callableReference/property/simpleTopLevel.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/callableReference/serializability")
    @TestDataPath("$PROJECT_ROOT")
    public class Serializability {
      @Test
      public void testAllFilesPresentInSerializability() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/serializability"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/casts")
  @TestDataPath("$PROJECT_ROOT")
  public class Casts {
    @Test
    public void testAllFilesPresentInCasts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("asForConstants.kt")
    public void testAsForConstants() {
      runTest("compiler/testData/codegen/box/casts/asForConstants.kt");
    }

    @Test
    @TestMetadata("asSafeFail.kt")
    public void testAsSafeFail() {
      runTest("compiler/testData/codegen/box/casts/asSafeFail.kt");
    }

    @Test
    @TestMetadata("asSafeForConstants.kt")
    public void testAsSafeForConstants() {
      runTest("compiler/testData/codegen/box/casts/asSafeForConstants.kt");
    }

    @Test
    @TestMetadata("asUnit.kt")
    public void testAsUnit() {
      runTest("compiler/testData/codegen/box/casts/asUnit.kt");
    }

    @Test
    @TestMetadata("asWithGeneric.kt")
    public void testAsWithGeneric() {
      runTest("compiler/testData/codegen/box/casts/asWithGeneric.kt");
    }

    @Test
    @TestMetadata("castGenericNull.kt")
    public void testCastGenericNull() {
      runTest("compiler/testData/codegen/box/casts/castGenericNull.kt");
    }

    @Test
    @TestMetadata("castToDefinitelyNotNullType.kt")
    public void testCastToDefinitelyNotNullType() {
      runTest("compiler/testData/codegen/box/casts/castToDefinitelyNotNullType.kt");
    }

    @Test
    @TestMetadata("dontCreateInconsistentTypeDuringStarProjectionSubstitution.kt")
    public void testDontCreateInconsistentTypeDuringStarProjectionSubstitution() {
      runTest("compiler/testData/codegen/box/casts/dontCreateInconsistentTypeDuringStarProjectionSubstitution.kt");
    }

    @Test
    @TestMetadata("genericReturnCast.kt")
    public void testGenericReturnCast() {
      runTest("compiler/testData/codegen/box/casts/genericReturnCast.kt");
    }

    @Test
    @TestMetadata("intersectionTypeMultipleBounds.kt")
    public void testIntersectionTypeMultipleBounds() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeMultipleBounds.kt");
    }

    @Test
    @TestMetadata("intersectionTypeMultipleBoundsImplicitReceiver.kt")
    public void testIntersectionTypeMultipleBoundsImplicitReceiver() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeMultipleBoundsImplicitReceiver.kt");
    }

    @Test
    @TestMetadata("intersectionTypeSmartcast.kt")
    public void testIntersectionTypeSmartcast() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeSmartcast.kt");
    }

    @Test
    @TestMetadata("intersectionTypeWithMultipleBoundsAsReceiver.kt")
    public void testIntersectionTypeWithMultipleBoundsAsReceiver() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeWithMultipleBoundsAsReceiver.kt");
    }

    @Test
    @TestMetadata("intersectionTypeWithoutGenericsAsReceiver.kt")
    public void testIntersectionTypeWithoutGenericsAsReceiver() {
      runTest("compiler/testData/codegen/box/casts/intersectionTypeWithoutGenericsAsReceiver.kt");
    }

    @Test
    @TestMetadata("isNullablePrimitive.kt")
    public void testIsNullablePrimitive() {
      runTest("compiler/testData/codegen/box/casts/isNullablePrimitive.kt");
    }

    @Test
    @TestMetadata("kt22714.kt")
    public void testKt22714() {
      runTest("compiler/testData/codegen/box/casts/kt22714.kt");
    }

    @Test
    @TestMetadata("kt48927_privateMethodOnDerivedCastToBase.kt")
    public void testKt48927_privateMethodOnDerivedCastToBase() {
      runTest("compiler/testData/codegen/box/casts/kt48927_privateMethodOnDerivedCastToBase.kt");
    }

    @Test
    @TestMetadata("kt50577.kt")
    public void testKt50577() {
      runTest("compiler/testData/codegen/box/casts/kt50577.kt");
    }

    @Test
    @TestMetadata("kt53677.kt")
    public void testKt53677() {
      runTest("compiler/testData/codegen/box/casts/kt53677.kt");
    }

    @Test
    @TestMetadata("kt54707.kt")
    public void testKt54707() {
      runTest("compiler/testData/codegen/box/casts/kt54707.kt");
    }

    @Test
    @TestMetadata("kt54802.kt")
    public void testKt54802() {
      runTest("compiler/testData/codegen/box/casts/kt54802.kt");
    }

    @Test
    @TestMetadata("kt58707.kt")
    public void testKt58707() {
      runTest("compiler/testData/codegen/box/casts/kt58707.kt");
    }

    @Test
    @TestMetadata("kt59022.kt")
    public void testKt59022() {
      runTest("compiler/testData/codegen/box/casts/kt59022.kt");
    }

    @Test
    @TestMetadata("kt65197.kt")
    public void testKt65197() {
      runTest("compiler/testData/codegen/box/casts/kt65197.kt");
    }

    @Test
    @TestMetadata("lambdaToUnitCast.kt")
    public void testLambdaToUnitCast() {
      runTest("compiler/testData/codegen/box/casts/lambdaToUnitCast.kt");
    }

    @Test
    @TestMetadata("nullableSafeCastToTypeParameterWithInterfaceUpperBound.kt")
    public void testNullableSafeCastToTypeParameterWithInterfaceUpperBound() {
      runTest("compiler/testData/codegen/box/casts/nullableSafeCastToTypeParameterWithInterfaceUpperBound.kt");
    }

    @Test
    @TestMetadata("objectToPrimitiveWithAssertion.kt")
    public void testObjectToPrimitiveWithAssertion() {
      runTest("compiler/testData/codegen/box/casts/objectToPrimitiveWithAssertion.kt");
    }

    @Test
    @TestMetadata("unitAsAny.kt")
    public void testUnitAsAny() {
      runTest("compiler/testData/codegen/box/casts/unitAsAny.kt");
    }

    @Test
    @TestMetadata("unitAsSafeAny.kt")
    public void testUnitAsSafeAny() {
      runTest("compiler/testData/codegen/box/casts/unitAsSafeAny.kt");
    }

    @Test
    @TestMetadata("unitNullableCast.kt")
    public void testUnitNullableCast() {
      runTest("compiler/testData/codegen/box/casts/unitNullableCast.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/casts/functions")
    @TestDataPath("$PROJECT_ROOT")
    public class Functions {
      @Test
      public void testAllFilesPresentInFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/functions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("asFunKBig.kt")
      public void testAsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/asFunKBig.kt");
      }

      @Test
      @TestMetadata("asFunKSmall.kt")
      public void testAsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/asFunKSmall.kt");
      }

      @Test
      @TestMetadata("isFunKBig.kt")
      public void testIsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/isFunKBig.kt");
      }

      @Test
      @TestMetadata("isFunKSmall.kt")
      public void testIsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/isFunKSmall.kt");
      }

      @Test
      @TestMetadata("isFunKSmallNonJS.kt")
      public void testIsFunKSmallNonJS() {
        runTest("compiler/testData/codegen/box/casts/functions/isFunKSmallNonJS.kt");
      }

      @Test
      @TestMetadata("reifiedAsFunKBig.kt")
      public void testReifiedAsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedAsFunKBig.kt");
      }

      @Test
      @TestMetadata("reifiedAsFunKSmall.kt")
      public void testReifiedAsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedAsFunKSmall.kt");
      }

      @Test
      @TestMetadata("reifiedIsFunKBig.kt")
      public void testReifiedIsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedIsFunKBig.kt");
      }

      @Test
      @TestMetadata("reifiedIsFunKSmall.kt")
      public void testReifiedIsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedIsFunKSmall.kt");
      }

      @Test
      @TestMetadata("reifiedSafeAsFunKBig.kt")
      public void testReifiedSafeAsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedSafeAsFunKBig.kt");
      }

      @Test
      @TestMetadata("reifiedSafeAsFunKSmall.kt")
      public void testReifiedSafeAsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/reifiedSafeAsFunKSmall.kt");
      }

      @Test
      @TestMetadata("safeAsFunKBig.kt")
      public void testSafeAsFunKBig() {
        runTest("compiler/testData/codegen/box/casts/functions/safeAsFunKBig.kt");
      }

      @Test
      @TestMetadata("safeAsFunKSmall.kt")
      public void testSafeAsFunKSmall() {
        runTest("compiler/testData/codegen/box/casts/functions/safeAsFunKSmall.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/casts/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    public class JavaInterop {
      @Test
      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/javaInterop"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument")
    @TestDataPath("$PROJECT_ROOT")
    public class LiteralExpressionAsGenericArgument {
      @Test
      public void testAllFilesPresentInLiteralExpressionAsGenericArgument() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("binaryExpressionCast.kt")
      public void testBinaryExpressionCast() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/binaryExpressionCast.kt");
      }

      @Test
      @TestMetadata("labeledExpressionCast.kt")
      public void testLabeledExpressionCast() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/labeledExpressionCast.kt");
      }

      @Test
      @TestMetadata("parenthesizedExpressionCast.kt")
      public void testParenthesizedExpressionCast() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/parenthesizedExpressionCast.kt");
      }

      @Test
      @TestMetadata("superConstructor.kt")
      public void testSuperConstructor() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/superConstructor.kt");
      }

      @Test
      @TestMetadata("unaryExpressionCast.kt")
      public void testUnaryExpressionCast() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/unaryExpressionCast.kt");
      }

      @Test
      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/vararg.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/casts/mutableCollections")
    @TestDataPath("$PROJECT_ROOT")
    public class MutableCollections {
      @Test
      public void testAllFilesPresentInMutableCollections() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/mutableCollections"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("asWithMutable.kt")
      public void testAsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/asWithMutable.kt");
      }

      @Test
      @TestMetadata("isWithMutable.kt")
      public void testIsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/isWithMutable.kt");
      }

      @Test
      @TestMetadata("reifiedAsWithMutable.kt")
      public void testReifiedAsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedAsWithMutable.kt");
      }

      @Test
      @TestMetadata("reifiedIsWithMutable.kt")
      public void testReifiedIsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedIsWithMutable.kt");
      }

      @Test
      @TestMetadata("reifiedSafeAsWithMutable.kt")
      public void testReifiedSafeAsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedSafeAsWithMutable.kt");
      }

      @Test
      @TestMetadata("safeAsWithMutable.kt")
      public void testSafeAsWithMutable() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/safeAsWithMutable.kt");
      }

      @Test
      @TestMetadata("weirdMutableCasts.kt")
      public void testWeirdMutableCasts() {
        runTest("compiler/testData/codegen/box/casts/mutableCollections/weirdMutableCasts.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/casts/nativeCCEMessage")
    @TestDataPath("$PROJECT_ROOT")
    public class NativeCCEMessage {
      @Test
      public void testAllFilesPresentInNativeCCEMessage() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/nativeCCEMessage"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/checkcastOptimization")
  @TestDataPath("$PROJECT_ROOT")
  public class CheckcastOptimization {
    @Test
    public void testAllFilesPresentInCheckcastOptimization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/checkcastOptimization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("kt19128.kt")
    public void testKt19128() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt19128.kt");
    }

    @Test
    @TestMetadata("kt19246.kt")
    public void testKt19246() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt19246.kt");
    }

    @Test
    @TestMetadata("kt47851.kt")
    public void testKt47851() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt47851.kt");
    }

    @Test
    @TestMetadata("kt50215.kt")
    public void testKt50215() {
      runTest("compiler/testData/codegen/box/checkcastOptimization/kt50215.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/classLiteral")
  @TestDataPath("$PROJECT_ROOT")
  public class ClassLiteral {
    @Test
    public void testAllFilesPresentInClassLiteral() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("bareArray.kt")
    public void testBareArray() {
      runTest("compiler/testData/codegen/box/classLiteral/bareArray.kt");
    }

    @Test
    @TestMetadata("classEquality.kt")
    public void testClassEquality() {
      runTest("compiler/testData/codegen/box/classLiteral/classEquality.kt");
    }

    @Test
    @TestMetadata("primitiveClassEquality.kt")
    public void testPrimitiveClassEquality() {
      runTest("compiler/testData/codegen/box/classLiteral/primitiveClassEquality.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/classLiteral/bound")
    @TestDataPath("$PROJECT_ROOT")
    public class Bound {
      @Test
      public void testAllFilesPresentInBound() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral/bound"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("primitives.kt")
      public void testPrimitives() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/primitives.kt");
      }

      @Test
      @TestMetadata("sideEffect.kt")
      public void testSideEffect() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/sideEffect.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/simple.kt");
      }

      @Test
      @TestMetadata("smartCast.kt")
      public void testSmartCast() {
        runTest("compiler/testData/codegen/box/classLiteral/bound/smartCast.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/classLiteral/java")
    @TestDataPath("$PROJECT_ROOT")
    public class Java {
      @Test
      public void testAllFilesPresentInJava() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral/java"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/classes")
  @TestDataPath("$PROJECT_ROOT")
  public class Classes {
    @Test
    public void testAllFilesPresentInClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("boxPrimitiveTypeInClinitOfClassObject.kt")
    public void testBoxPrimitiveTypeInClinitOfClassObject() {
      runTest("compiler/testData/codegen/box/classes/boxPrimitiveTypeInClinitOfClassObject.kt");
    }

    @Test
    @TestMetadata("classNamedAsOldPackageFacade.kt")
    public void testClassNamedAsOldPackageFacade() {
      runTest("compiler/testData/codegen/box/classes/classNamedAsOldPackageFacade.kt");
    }

    @Test
    @TestMetadata("classObject.kt")
    public void testClassObject() {
      runTest("compiler/testData/codegen/box/classes/classObject.kt");
    }

    @Test
    @TestMetadata("classObjectAsExtensionReceiver.kt")
    public void testClassObjectAsExtensionReceiver() {
      runTest("compiler/testData/codegen/box/classes/classObjectAsExtensionReceiver.kt");
    }

    @Test
    @TestMetadata("classObjectAsStaticInitializer.kt")
    public void testClassObjectAsStaticInitializer() {
      runTest("compiler/testData/codegen/box/classes/classObjectAsStaticInitializer.kt");
    }

    @Test
    @TestMetadata("classObjectField.kt")
    public void testClassObjectField() {
      runTest("compiler/testData/codegen/box/classes/classObjectField.kt");
    }

    @Test
    @TestMetadata("classObjectInTrait.kt")
    public void testClassObjectInTrait() {
      runTest("compiler/testData/codegen/box/classes/classObjectInTrait.kt");
    }

    @Test
    @TestMetadata("classObjectNotOfEnum.kt")
    public void testClassObjectNotOfEnum() {
      runTest("compiler/testData/codegen/box/classes/classObjectNotOfEnum.kt");
    }

    @Test
    @TestMetadata("classObjectWithPrivateGenericMember.kt")
    public void testClassObjectWithPrivateGenericMember() {
      runTest("compiler/testData/codegen/box/classes/classObjectWithPrivateGenericMember.kt");
    }

    @Test
    @TestMetadata("classObjectsWithParentClasses.kt")
    public void testClassObjectsWithParentClasses() {
      runTest("compiler/testData/codegen/box/classes/classObjectsWithParentClasses.kt");
    }

    @Test
    @TestMetadata("comanionObjectFieldVsClassField.kt")
    public void testComanionObjectFieldVsClassField() {
      runTest("compiler/testData/codegen/box/classes/comanionObjectFieldVsClassField.kt");
    }

    @Test
    @TestMetadata("defaultObjectSameNamesAsInOuter.kt")
    public void testDefaultObjectSameNamesAsInOuter() {
      runTest("compiler/testData/codegen/box/classes/defaultObjectSameNamesAsInOuter.kt");
    }

    @Test
    @TestMetadata("delegateConstructorCallWithKeywords.kt")
    public void testDelegateConstructorCallWithKeywords() {
      runTest("compiler/testData/codegen/box/classes/delegateConstructorCallWithKeywords.kt");
    }

    @Test
    @TestMetadata("delegation2.kt")
    public void testDelegation2() {
      runTest("compiler/testData/codegen/box/classes/delegation2.kt");
    }

    @Test
    @TestMetadata("delegation3.kt")
    public void testDelegation3() {
      runTest("compiler/testData/codegen/box/classes/delegation3.kt");
    }

    @Test
    @TestMetadata("delegation4.kt")
    public void testDelegation4() {
      runTest("compiler/testData/codegen/box/classes/delegation4.kt");
    }

    @Test
    @TestMetadata("delegationGenericArg.kt")
    public void testDelegationGenericArg() {
      runTest("compiler/testData/codegen/box/classes/delegationGenericArg.kt");
    }

    @Test
    @TestMetadata("delegationGenericArgUpperBound.kt")
    public void testDelegationGenericArgUpperBound() {
      runTest("compiler/testData/codegen/box/classes/delegationGenericArgUpperBound.kt");
    }

    @Test
    @TestMetadata("delegationGenericLongArg.kt")
    public void testDelegationGenericLongArg() {
      runTest("compiler/testData/codegen/box/classes/delegationGenericLongArg.kt");
    }

    @Test
    @TestMetadata("delegationMethodsWithArgs.kt")
    public void testDelegationMethodsWithArgs() {
      runTest("compiler/testData/codegen/box/classes/delegationMethodsWithArgs.kt");
    }

    @Test
    @TestMetadata("exceptionConstructor.kt")
    public void testExceptionConstructor() {
      runTest("compiler/testData/codegen/box/classes/exceptionConstructor.kt");
    }

    @Test
    @TestMetadata("extensionFunWithDefaultParam.kt")
    public void testExtensionFunWithDefaultParam() {
      runTest("compiler/testData/codegen/box/classes/extensionFunWithDefaultParam.kt");
    }

    @Test
    @TestMetadata("extensionOnNamedClassObject.kt")
    public void testExtensionOnNamedClassObject() {
      runTest("compiler/testData/codegen/box/classes/extensionOnNamedClassObject.kt");
    }

    @Test
    @TestMetadata("funDelegation.kt")
    public void testFunDelegation() {
      runTest("compiler/testData/codegen/box/classes/funDelegation.kt");
    }

    @Test
    @TestMetadata("implementComparableInSubclass.kt")
    public void testImplementComparableInSubclass() {
      runTest("compiler/testData/codegen/box/classes/implementComparableInSubclass.kt");
    }

    @Test
    @TestMetadata("inheritSetAndHashSet.kt")
    public void testInheritSetAndHashSet() {
      runTest("compiler/testData/codegen/box/classes/inheritSetAndHashSet.kt");
    }

    @Test
    @TestMetadata("inheritance.kt")
    public void testInheritance() {
      runTest("compiler/testData/codegen/box/classes/inheritance.kt");
    }

    @Test
    @TestMetadata("inheritedInnerClass.kt")
    public void testInheritedInnerClass() {
      runTest("compiler/testData/codegen/box/classes/inheritedInnerClass.kt");
    }

    @Test
    @TestMetadata("inheritedMethod.kt")
    public void testInheritedMethod() {
      runTest("compiler/testData/codegen/box/classes/inheritedMethod.kt");
    }

    @Test
    @TestMetadata("initializerBlock.kt")
    public void testInitializerBlock() {
      runTest("compiler/testData/codegen/box/classes/initializerBlock.kt");
    }

    @Test
    @TestMetadata("initializerBlockDImpl.kt")
    public void testInitializerBlockDImpl() {
      runTest("compiler/testData/codegen/box/classes/initializerBlockDImpl.kt");
    }

    @Test
    @TestMetadata("initializerBlockResetToDefault.kt")
    public void testInitializerBlockResetToDefault() {
      runTest("compiler/testData/codegen/box/classes/initializerBlockResetToDefault.kt");
    }

    @Test
    @TestMetadata("innerClass.kt")
    public void testInnerClass() {
      runTest("compiler/testData/codegen/box/classes/innerClass.kt");
    }

    @Test
    @TestMetadata("kt1018.kt")
    public void testKt1018() {
      runTest("compiler/testData/codegen/box/classes/kt1018.kt");
    }

    @Test
    @TestMetadata("kt1157.kt")
    public void testKt1157() {
      runTest("compiler/testData/codegen/box/classes/kt1157.kt");
    }

    @Test
    @TestMetadata("kt1247.kt")
    public void testKt1247() {
      runTest("compiler/testData/codegen/box/classes/kt1247.kt");
    }

    @Test
    @TestMetadata("kt1345.kt")
    public void testKt1345() {
      runTest("compiler/testData/codegen/box/classes/kt1345.kt");
    }

    @Test
    @TestMetadata("kt1439.kt")
    public void testKt1439() {
      runTest("compiler/testData/codegen/box/classes/kt1439.kt");
    }

    @Test
    @TestMetadata("kt1535.kt")
    public void testKt1535() {
      runTest("compiler/testData/codegen/box/classes/kt1535.kt");
    }

    @Test
    @TestMetadata("kt1538.kt")
    public void testKt1538() {
      runTest("compiler/testData/codegen/box/classes/kt1538.kt");
    }

    @Test
    @TestMetadata("kt1578.kt")
    public void testKt1578() {
      runTest("compiler/testData/codegen/box/classes/kt1578.kt");
    }

    @Test
    @TestMetadata("kt1611.kt")
    public void testKt1611() {
      runTest("compiler/testData/codegen/box/classes/kt1611.kt");
    }

    @Test
    @TestMetadata("kt1721.kt")
    public void testKt1721() {
      runTest("compiler/testData/codegen/box/classes/kt1721.kt");
    }

    @Test
    @TestMetadata("kt1726.kt")
    public void testKt1726() {
      runTest("compiler/testData/codegen/box/classes/kt1726.kt");
    }

    @Test
    @TestMetadata("kt1759.kt")
    public void testKt1759() {
      runTest("compiler/testData/codegen/box/classes/kt1759.kt");
    }

    @Test
    @TestMetadata("kt1891.kt")
    public void testKt1891() {
      runTest("compiler/testData/codegen/box/classes/kt1891.kt");
    }

    @Test
    @TestMetadata("kt1918.kt")
    public void testKt1918() {
      runTest("compiler/testData/codegen/box/classes/kt1918.kt");
    }

    @Test
    @TestMetadata("kt1976.kt")
    public void testKt1976() {
      runTest("compiler/testData/codegen/box/classes/kt1976.kt");
    }

    @Test
    @TestMetadata("kt1980.kt")
    public void testKt1980() {
      runTest("compiler/testData/codegen/box/classes/kt1980.kt");
    }

    @Test
    @TestMetadata("kt2224.kt")
    public void testKt2224() {
      runTest("compiler/testData/codegen/box/classes/kt2224.kt");
    }

    @Test
    @TestMetadata("kt2384.kt")
    public void testKt2384() {
      runTest("compiler/testData/codegen/box/classes/kt2384.kt");
    }

    @Test
    @TestMetadata("kt2390.kt")
    public void testKt2390() {
      runTest("compiler/testData/codegen/box/classes/kt2390.kt");
    }

    @Test
    @TestMetadata("kt2391.kt")
    public void testKt2391() {
      runTest("compiler/testData/codegen/box/classes/kt2391.kt");
    }

    @Test
    @TestMetadata("kt2417.kt")
    public void testKt2417() {
      runTest("compiler/testData/codegen/box/classes/kt2417.kt");
    }

    @Test
    @TestMetadata("kt2477.kt")
    public void testKt2477() {
      runTest("compiler/testData/codegen/box/classes/kt2477.kt");
    }

    @Test
    @TestMetadata("kt2480.kt")
    public void testKt2480() {
      runTest("compiler/testData/codegen/box/classes/kt2480.kt");
    }

    @Test
    @TestMetadata("kt2482.kt")
    public void testKt2482() {
      runTest("compiler/testData/codegen/box/classes/kt2482.kt");
    }

    @Test
    @TestMetadata("kt2485.kt")
    public void testKt2485() {
      runTest("compiler/testData/codegen/box/classes/kt2485.kt");
    }

    @Test
    @TestMetadata("kt249.kt")
    public void testKt249() {
      runTest("compiler/testData/codegen/box/classes/kt249.kt");
    }

    @Test
    @TestMetadata("kt2532.kt")
    public void testKt2532() {
      runTest("compiler/testData/codegen/box/classes/kt2532.kt");
    }

    @Test
    @TestMetadata("kt2566.kt")
    public void testKt2566() {
      runTest("compiler/testData/codegen/box/classes/kt2566.kt");
    }

    @Test
    @TestMetadata("kt2566_2.kt")
    public void testKt2566_2() {
      runTest("compiler/testData/codegen/box/classes/kt2566_2.kt");
    }

    @Test
    @TestMetadata("kt2607.kt")
    public void testKt2607() {
      runTest("compiler/testData/codegen/box/classes/kt2607.kt");
    }

    @Test
    @TestMetadata("kt2626.kt")
    public void testKt2626() {
      runTest("compiler/testData/codegen/box/classes/kt2626.kt");
    }

    @Test
    @TestMetadata("kt2711.kt")
    public void testKt2711() {
      runTest("compiler/testData/codegen/box/classes/kt2711.kt");
    }

    @Test
    @TestMetadata("kt2784.kt")
    public void testKt2784() {
      runTest("compiler/testData/codegen/box/classes/kt2784.kt");
    }

    @Test
    @TestMetadata("kt285.kt")
    public void testKt285() {
      runTest("compiler/testData/codegen/box/classes/kt285.kt");
    }

    @Test
    @TestMetadata("kt3001.kt")
    public void testKt3001() {
      runTest("compiler/testData/codegen/box/classes/kt3001.kt");
    }

    @Test
    @TestMetadata("kt3114.kt")
    public void testKt3114() {
      runTest("compiler/testData/codegen/box/classes/kt3114.kt");
    }

    @Test
    @TestMetadata("kt3414.kt")
    public void testKt3414() {
      runTest("compiler/testData/codegen/box/classes/kt3414.kt");
    }

    @Test
    @TestMetadata("kt343.kt")
    public void testKt343() {
      runTest("compiler/testData/codegen/box/classes/kt343.kt");
    }

    @Test
    @TestMetadata("kt3546.kt")
    public void testKt3546() {
      runTest("compiler/testData/codegen/box/classes/kt3546.kt");
    }

    @Test
    @TestMetadata("kt40332.kt")
    public void testKt40332() {
      runTest("compiler/testData/codegen/box/classes/kt40332.kt");
    }

    @Test
    @TestMetadata("kt454.kt")
    public void testKt454() {
      runTest("compiler/testData/codegen/box/classes/kt454.kt");
    }

    @Test
    @TestMetadata("kt471.kt")
    public void testKt471() {
      runTest("compiler/testData/codegen/box/classes/kt471.kt");
    }

    @Test
    @TestMetadata("kt48.kt")
    public void testKt48() {
      runTest("compiler/testData/codegen/box/classes/kt48.kt");
    }

    @Test
    @TestMetadata("kt496.kt")
    public void testKt496() {
      runTest("compiler/testData/codegen/box/classes/kt496.kt");
    }

    @Test
    @TestMetadata("kt500.kt")
    public void testKt500() {
      runTest("compiler/testData/codegen/box/classes/kt500.kt");
    }

    @Test
    @TestMetadata("kt501.kt")
    public void testKt501() {
      runTest("compiler/testData/codegen/box/classes/kt501.kt");
    }

    @Test
    @TestMetadata("kt504.kt")
    public void testKt504() {
      runTest("compiler/testData/codegen/box/classes/kt504.kt");
    }

    @Test
    @TestMetadata("kt508.kt")
    public void testKt508() {
      runTest("compiler/testData/codegen/box/classes/kt508.kt");
    }

    @Test
    @TestMetadata("kt5347.kt")
    public void testKt5347() {
      runTest("compiler/testData/codegen/box/classes/kt5347.kt");
    }

    @Test
    @TestMetadata("kt6136.kt")
    public void testKt6136() {
      runTest("compiler/testData/codegen/box/classes/kt6136.kt");
    }

    @Test
    @TestMetadata("kt633.kt")
    public void testKt633() {
      runTest("compiler/testData/codegen/box/classes/kt633.kt");
    }

    @Test
    @TestMetadata("kt6816.kt")
    public void testKt6816() {
      runTest("compiler/testData/codegen/box/classes/kt6816.kt");
    }

    @Test
    @TestMetadata("kt707.kt")
    public void testKt707() {
      runTest("compiler/testData/codegen/box/classes/kt707.kt");
    }

    @Test
    @TestMetadata("kt723.kt")
    public void testKt723() {
      runTest("compiler/testData/codegen/box/classes/kt723.kt");
    }

    @Test
    @TestMetadata("kt725.kt")
    public void testKt725() {
      runTest("compiler/testData/codegen/box/classes/kt725.kt");
    }

    @Test
    @TestMetadata("kt8011.kt")
    public void testKt8011() {
      runTest("compiler/testData/codegen/box/classes/kt8011.kt");
    }

    @Test
    @TestMetadata("kt8011a.kt")
    public void testKt8011a() {
      runTest("compiler/testData/codegen/box/classes/kt8011a.kt");
    }

    @Test
    @TestMetadata("kt940.kt")
    public void testKt940() {
      runTest("compiler/testData/codegen/box/classes/kt940.kt");
    }

    @Test
    @TestMetadata("kt9642.kt")
    public void testKt9642() {
      runTest("compiler/testData/codegen/box/classes/kt9642.kt");
    }

    @Test
    @TestMetadata("namedClassObject.kt")
    public void testNamedClassObject() {
      runTest("compiler/testData/codegen/box/classes/namedClassObject.kt");
    }

    @Test
    @TestMetadata("nestedInitBlocksWithLambda.kt")
    public void testNestedInitBlocksWithLambda() {
      runTest("compiler/testData/codegen/box/classes/nestedInitBlocksWithLambda.kt");
    }

    @Test
    @TestMetadata("outerThis.kt")
    public void testOuterThis() {
      runTest("compiler/testData/codegen/box/classes/outerThis.kt");
    }

    @Test
    @TestMetadata("overloadBinaryOperator.kt")
    public void testOverloadBinaryOperator() {
      runTest("compiler/testData/codegen/box/classes/overloadBinaryOperator.kt");
    }

    @Test
    @TestMetadata("overloadPlusAssign.kt")
    public void testOverloadPlusAssign() {
      runTest("compiler/testData/codegen/box/classes/overloadPlusAssign.kt");
    }

    @Test
    @TestMetadata("overloadPlusAssignReturn.kt")
    public void testOverloadPlusAssignReturn() {
      runTest("compiler/testData/codegen/box/classes/overloadPlusAssignReturn.kt");
    }

    @Test
    @TestMetadata("overloadPlusToPlusAssign.kt")
    public void testOverloadPlusToPlusAssign() {
      runTest("compiler/testData/codegen/box/classes/overloadPlusToPlusAssign.kt");
    }

    @Test
    @TestMetadata("overloadUnaryOperator.kt")
    public void testOverloadUnaryOperator() {
      runTest("compiler/testData/codegen/box/classes/overloadUnaryOperator.kt");
    }

    @Test
    @TestMetadata("privateOuterFunctions.kt")
    public void testPrivateOuterFunctions() {
      runTest("compiler/testData/codegen/box/classes/privateOuterFunctions.kt");
    }

    @Test
    @TestMetadata("privateOuterProperty.kt")
    public void testPrivateOuterProperty() {
      runTest("compiler/testData/codegen/box/classes/privateOuterProperty.kt");
    }

    @Test
    @TestMetadata("privateToThis.kt")
    public void testPrivateToThis() {
      runTest("compiler/testData/codegen/box/classes/privateToThis.kt");
    }

    @Test
    @TestMetadata("propertyDelegation.kt")
    public void testPropertyDelegation() {
      runTest("compiler/testData/codegen/box/classes/propertyDelegation.kt");
    }

    @Test
    @TestMetadata("propertyInInitializer.kt")
    public void testPropertyInInitializer() {
      runTest("compiler/testData/codegen/box/classes/propertyInInitializer.kt");
    }

    @Test
    @TestMetadata("quotedClassName.kt")
    public void testQuotedClassName() {
      runTest("compiler/testData/codegen/box/classes/quotedClassName.kt");
    }

    @Test
    @TestMetadata("rightHandOverride.kt")
    public void testRightHandOverride() {
      runTest("compiler/testData/codegen/box/classes/rightHandOverride.kt");
    }

    @Test
    @TestMetadata("selfcreate.kt")
    public void testSelfcreate() {
      runTest("compiler/testData/codegen/box/classes/selfcreate.kt");
    }

    @Test
    @TestMetadata("simpleBox.kt")
    public void testSimpleBox() {
      runTest("compiler/testData/codegen/box/classes/simpleBox.kt");
    }

    @Test
    @TestMetadata("superConstructorCallWithComplexArg.kt")
    public void testSuperConstructorCallWithComplexArg() {
      runTest("compiler/testData/codegen/box/classes/superConstructorCallWithComplexArg.kt");
    }

    @Test
    @TestMetadata("typedDelegation.kt")
    public void testTypedDelegation() {
      runTest("compiler/testData/codegen/box/classes/typedDelegation.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/classes/inner")
    @TestDataPath("$PROJECT_ROOT")
    public class Inner {
      @Test
      public void testAllFilesPresentInInner() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classes/inner"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("extensionWithOuter.kt")
      public void testExtensionWithOuter() {
        runTest("compiler/testData/codegen/box/classes/inner/extensionWithOuter.kt");
      }

      @Test
      @TestMetadata("instantiateInDerived.kt")
      public void testInstantiateInDerived() {
        runTest("compiler/testData/codegen/box/classes/inner/instantiateInDerived.kt");
      }

      @Test
      @TestMetadata("instantiateInDerivedLabeled.kt")
      public void testInstantiateInDerivedLabeled() {
        runTest("compiler/testData/codegen/box/classes/inner/instantiateInDerivedLabeled.kt");
      }

      @Test
      @TestMetadata("instantiateInSameClass.kt")
      public void testInstantiateInSameClass() {
        runTest("compiler/testData/codegen/box/classes/inner/instantiateInSameClass.kt");
      }

      @Test
      @TestMetadata("kt6708.kt")
      public void testKt6708() {
        runTest("compiler/testData/codegen/box/classes/inner/kt6708.kt");
      }

      @Test
      @TestMetadata("properOuter.kt")
      public void testProperOuter() {
        runTest("compiler/testData/codegen/box/classes/inner/properOuter.kt");
      }

      @Test
      @TestMetadata("properSuperLinking.kt")
      public void testProperSuperLinking() {
        runTest("compiler/testData/codegen/box/classes/inner/properSuperLinking.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/closures")
  @TestDataPath("$PROJECT_ROOT")
  public class Closures {
    @Test
    public void testAllFilesPresentInClosures() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("anonymousObjectAsLastExpressionInLambda.kt")
    public void testAnonymousObjectAsLastExpressionInLambda() {
      runTest("compiler/testData/codegen/box/closures/anonymousObjectAsLastExpressionInLambda.kt");
    }

    @Test
    @TestMetadata("captureExtensionReceiver.kt")
    public void testCaptureExtensionReceiver() {
      runTest("compiler/testData/codegen/box/closures/captureExtensionReceiver.kt");
    }

    @Test
    @TestMetadata("captureExtensionReceiverX2.kt")
    public void testCaptureExtensionReceiverX2() {
      runTest("compiler/testData/codegen/box/closures/captureExtensionReceiverX2.kt");
    }

    @Test
    @TestMetadata("capturedLocalGenericFun.kt")
    public void testCapturedLocalGenericFun() {
      runTest("compiler/testData/codegen/box/closures/capturedLocalGenericFun.kt");
    }

    @Test
    @TestMetadata("closureCapturingGenericParam.kt")
    public void testClosureCapturingGenericParam() {
      runTest("compiler/testData/codegen/box/closures/closureCapturingGenericParam.kt");
    }

    @Test
    @TestMetadata("closureInsideConstrucor.kt")
    public void testClosureInsideConstrucor() {
      runTest("compiler/testData/codegen/box/closures/closureInsideConstrucor.kt");
    }

    @Test
    @TestMetadata("closureOnTopLevel1.kt")
    public void testClosureOnTopLevel1() {
      runTest("compiler/testData/codegen/box/closures/closureOnTopLevel1.kt");
    }

    @Test
    @TestMetadata("closureOnTopLevel2.kt")
    public void testClosureOnTopLevel2() {
      runTest("compiler/testData/codegen/box/closures/closureOnTopLevel2.kt");
    }

    @Test
    @TestMetadata("closureWithParameter.kt")
    public void testClosureWithParameter() {
      runTest("compiler/testData/codegen/box/closures/closureWithParameter.kt");
    }

    @Test
    @TestMetadata("closureWithParameterAndBoxing.kt")
    public void testClosureWithParameterAndBoxing() {
      runTest("compiler/testData/codegen/box/closures/closureWithParameterAndBoxing.kt");
    }

    @Test
    @TestMetadata("closuresAsSingleton.kt")
    public void testClosuresAsSingleton() {
      runTest("compiler/testData/codegen/box/closures/closuresAsSingleton.kt");
    }

    @Test
    @TestMetadata("crossinlineLocalDeclaration.kt")
    public void testCrossinlineLocalDeclaration() {
      runTest("compiler/testData/codegen/box/closures/crossinlineLocalDeclaration.kt");
    }

    @Test
    @TestMetadata("doubleEnclosedLocalVariable.kt")
    public void testDoubleEnclosedLocalVariable() {
      runTest("compiler/testData/codegen/box/closures/doubleEnclosedLocalVariable.kt");
    }

    @Test
    @TestMetadata("enclosingLocalVariable.kt")
    public void testEnclosingLocalVariable() {
      runTest("compiler/testData/codegen/box/closures/enclosingLocalVariable.kt");
    }

    @Test
    @TestMetadata("enclosingThis.kt")
    public void testEnclosingThis() {
      runTest("compiler/testData/codegen/box/closures/enclosingThis.kt");
    }

    @Test
    @TestMetadata("extensionClosure.kt")
    public void testExtensionClosure() {
      runTest("compiler/testData/codegen/box/closures/extensionClosure.kt");
    }

    @Test
    @TestMetadata("kt10044.kt")
    public void testKt10044() {
      runTest("compiler/testData/codegen/box/closures/kt10044.kt");
    }

    @Test
    @TestMetadata("kt11634.kt")
    public void testKt11634() {
      runTest("compiler/testData/codegen/box/closures/kt11634.kt");
    }

    @Test
    @TestMetadata("kt11634_2.kt")
    public void testKt11634_2() {
      runTest("compiler/testData/codegen/box/closures/kt11634_2.kt");
    }

    @Test
    @TestMetadata("kt11634_3.kt")
    public void testKt11634_3() {
      runTest("compiler/testData/codegen/box/closures/kt11634_3.kt");
    }

    @Test
    @TestMetadata("kt11634_4.kt")
    public void testKt11634_4() {
      runTest("compiler/testData/codegen/box/closures/kt11634_4.kt");
    }

    @Test
    @TestMetadata("kt19389.kt")
    public void testKt19389() {
      runTest("compiler/testData/codegen/box/closures/kt19389.kt");
    }

    @Test
    @TestMetadata("kt19389_set.kt")
    public void testKt19389_set() {
      runTest("compiler/testData/codegen/box/closures/kt19389_set.kt");
    }

    @Test
    @TestMetadata("kt2151.kt")
    public void testKt2151() {
      runTest("compiler/testData/codegen/box/closures/kt2151.kt");
    }

    @Test
    @TestMetadata("kt3152.kt")
    public void testKt3152() {
      runTest("compiler/testData/codegen/box/closures/kt3152.kt");
    }

    @Test
    @TestMetadata("kt3523.kt")
    public void testKt3523() {
      runTest("compiler/testData/codegen/box/closures/kt3523.kt");
    }

    @Test
    @TestMetadata("kt3738.kt")
    public void testKt3738() {
      runTest("compiler/testData/codegen/box/closures/kt3738.kt");
    }

    @Test
    @TestMetadata("kt3905.kt")
    public void testKt3905() {
      runTest("compiler/testData/codegen/box/closures/kt3905.kt");
    }

    @Test
    @TestMetadata("kt4106.kt")
    public void testKt4106() {
      runTest("compiler/testData/codegen/box/closures/kt4106.kt");
    }

    @Test
    @TestMetadata("kt4137.kt")
    public void testKt4137() {
      runTest("compiler/testData/codegen/box/closures/kt4137.kt");
    }

    @Test
    @TestMetadata("kt47840.kt")
    public void testKt47840() {
      runTest("compiler/testData/codegen/box/closures/kt47840.kt");
    }

    @Test
    @TestMetadata("kt47894_inlineFunWithObjectWithNothing.kt")
    public void testKt47894_inlineFunWithObjectWithNothing() {
      runTest("compiler/testData/codegen/box/closures/kt47894_inlineFunWithObjectWithNothing.kt");
    }

    @Test
    @TestMetadata("kt5589.kt")
    public void testKt5589() {
      runTest("compiler/testData/codegen/box/closures/kt5589.kt");
    }

    @Test
    @TestMetadata("localClassFunClosure.kt")
    public void testLocalClassFunClosure() {
      runTest("compiler/testData/codegen/box/closures/localClassFunClosure.kt");
    }

    @Test
    @TestMetadata("localClassLambdaClosure.kt")
    public void testLocalClassLambdaClosure() {
      runTest("compiler/testData/codegen/box/closures/localClassLambdaClosure.kt");
    }

    @Test
    @TestMetadata("localFunInInit.kt")
    public void testLocalFunInInit() {
      runTest("compiler/testData/codegen/box/closures/localFunInInit.kt");
    }

    @Test
    @TestMetadata("localFunctionInFunction.kt")
    public void testLocalFunctionInFunction() {
      runTest("compiler/testData/codegen/box/closures/localFunctionInFunction.kt");
    }

    @Test
    @TestMetadata("localFunctionInInitBlock.kt")
    public void testLocalFunctionInInitBlock() {
      runTest("compiler/testData/codegen/box/closures/localFunctionInInitBlock.kt");
    }

    @Test
    @TestMetadata("localFunctionInInitializer.kt")
    public void testLocalFunctionInInitializer() {
      runTest("compiler/testData/codegen/box/closures/localFunctionInInitializer.kt");
    }

    @Test
    @TestMetadata("localGenericFun.kt")
    public void testLocalGenericFun() {
      runTest("compiler/testData/codegen/box/closures/localGenericFun.kt");
    }

    @Test
    @TestMetadata("localReturn.kt")
    public void testLocalReturn() {
      runTest("compiler/testData/codegen/box/closures/localReturn.kt");
    }

    @Test
    @TestMetadata("localReturnWithAutolabel.kt")
    public void testLocalReturnWithAutolabel() {
      runTest("compiler/testData/codegen/box/closures/localReturnWithAutolabel.kt");
    }

    @Test
    @TestMetadata("recursiveClosure.kt")
    public void testRecursiveClosure() {
      runTest("compiler/testData/codegen/box/closures/recursiveClosure.kt");
    }

    @Test
    @TestMetadata("simplestClosure.kt")
    public void testSimplestClosure() {
      runTest("compiler/testData/codegen/box/closures/simplestClosure.kt");
    }

    @Test
    @TestMetadata("simplestClosureAndBoxing.kt")
    public void testSimplestClosureAndBoxing() {
      runTest("compiler/testData/codegen/box/closures/simplestClosureAndBoxing.kt");
    }

    @Test
    @TestMetadata("subclosuresWithinInitializers.kt")
    public void testSubclosuresWithinInitializers() {
      runTest("compiler/testData/codegen/box/closures/subclosuresWithinInitializers.kt");
    }

    @Test
    @TestMetadata("underscoreParameters.kt")
    public void testUnderscoreParameters() {
      runTest("compiler/testData/codegen/box/closures/underscoreParameters.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/closures/captureInSuperConstructorCall")
    @TestDataPath("$PROJECT_ROOT")
    public class CaptureInSuperConstructorCall {
      @Test
      public void testAllFilesPresentInCaptureInSuperConstructorCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/captureInSuperConstructorCall"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("constructorParameterAndLocalCapturedInLambdaInLocalClass.kt")
      public void testConstructorParameterAndLocalCapturedInLambdaInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterAndLocalCapturedInLambdaInLocalClass.kt");
      }

      @Test
      @TestMetadata("constructorParameterCapturedInLambdaInLocalClass.kt")
      public void testConstructorParameterCapturedInLambdaInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterCapturedInLambdaInLocalClass.kt");
      }

      @Test
      @TestMetadata("constructorParameterCapturedInLambdaInLocalClass2.kt")
      public void testConstructorParameterCapturedInLambdaInLocalClass2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterCapturedInLambdaInLocalClass2.kt");
      }

      @Test
      @TestMetadata("kt13454.kt")
      public void testKt13454() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt13454.kt");
      }

      @Test
      @TestMetadata("kt14148.kt")
      public void testKt14148() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt14148.kt");
      }

      @Test
      @TestMetadata("kt4174.kt")
      public void testKt4174() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt4174.kt");
      }

      @Test
      @TestMetadata("kt4174a.kt")
      public void testKt4174a() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt4174a.kt");
      }

      @Test
      @TestMetadata("localCapturedInAnonymousObjectInLocalClass.kt")
      public void testLocalCapturedInAnonymousObjectInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInAnonymousObjectInLocalClass.kt");
      }

      @Test
      @TestMetadata("localCapturedInAnonymousObjectInLocalClass2.kt")
      public void testLocalCapturedInAnonymousObjectInLocalClass2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInAnonymousObjectInLocalClass2.kt");
      }

      @Test
      @TestMetadata("localCapturedInLambdaInInnerClassInLocalClass.kt")
      public void testLocalCapturedInLambdaInInnerClassInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInLambdaInInnerClassInLocalClass.kt");
      }

      @Test
      @TestMetadata("localCapturedInLambdaInLocalClass.kt")
      public void testLocalCapturedInLambdaInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInLambdaInLocalClass.kt");
      }

      @Test
      @TestMetadata("localFunctionCapturedInLambda.kt")
      public void testLocalFunctionCapturedInLambda() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localFunctionCapturedInLambda.kt");
      }

      @Test
      @TestMetadata("outerAndLocalCapturedInLocalClass.kt")
      public void testOuterAndLocalCapturedInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerAndLocalCapturedInLocalClass.kt");
      }

      @Test
      @TestMetadata("outerCapturedAsImplicitThisInBoundReference.kt")
      public void testOuterCapturedAsImplicitThisInBoundReference() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedAsImplicitThisInBoundReference.kt");
      }

      @Test
      @TestMetadata("outerCapturedInFunctionLiteral.kt")
      public void testOuterCapturedInFunctionLiteral() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInFunctionLiteral.kt");
      }

      @Test
      @TestMetadata("outerCapturedInInlineLambda.kt")
      public void testOuterCapturedInInlineLambda() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInInlineLambda.kt");
      }

      @Test
      @TestMetadata("outerCapturedInInlineLambda2.kt")
      public void testOuterCapturedInInlineLambda2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInInlineLambda2.kt");
      }

      @Test
      @TestMetadata("outerCapturedInLambda.kt")
      public void testOuterCapturedInLambda() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambda.kt");
      }

      @Test
      @TestMetadata("outerCapturedInLambda2.kt")
      public void testOuterCapturedInLambda2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambda2.kt");
      }

      @Test
      @TestMetadata("outerCapturedInLambdaInSecondaryConstructor.kt")
      public void testOuterCapturedInLambdaInSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambdaInSecondaryConstructor.kt");
      }

      @Test
      @TestMetadata("outerCapturedInLambdaInSubExpression.kt")
      public void testOuterCapturedInLambdaInSubExpression() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambdaInSubExpression.kt");
      }

      @Test
      @TestMetadata("outerCapturedInLocalClass.kt")
      public void testOuterCapturedInLocalClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLocalClass.kt");
      }

      @Test
      @TestMetadata("outerCapturedInNestedLambda.kt")
      public void testOuterCapturedInNestedLambda() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInNestedLambda.kt");
      }

      @Test
      @TestMetadata("outerCapturedInNestedObject.kt")
      public void testOuterCapturedInNestedObject() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInNestedObject.kt");
      }

      @Test
      @TestMetadata("outerCapturedInObject.kt")
      public void testOuterCapturedInObject() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInObject.kt");
      }

      @Test
      @TestMetadata("outerCapturedInObject2.kt")
      public void testOuterCapturedInObject2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInObject2.kt");
      }

      @Test
      @TestMetadata("outerCapturedInPrimaryConstructorDefaultParameter.kt")
      public void testOuterCapturedInPrimaryConstructorDefaultParameter() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInPrimaryConstructorDefaultParameter.kt");
      }

      @Test
      @TestMetadata("outerCapturedInSecondaryConstructorDefaultParameter.kt")
      public void testOuterCapturedInSecondaryConstructorDefaultParameter() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInSecondaryConstructorDefaultParameter.kt");
      }

      @Test
      @TestMetadata("outerEnumEntryCapturedInLambdaInInnerClass.kt")
      public void testOuterEnumEntryCapturedInLambdaInInnerClass() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerEnumEntryCapturedInLambdaInInnerClass.kt");
      }

      @Test
      @TestMetadata("properValueCapturedByClosure1.kt")
      public void testProperValueCapturedByClosure1() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/properValueCapturedByClosure1.kt");
      }

      @Test
      @TestMetadata("properValueCapturedByClosure2.kt")
      public void testProperValueCapturedByClosure2() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/properValueCapturedByClosure2.kt");
      }

      @Test
      @TestMetadata("referenceToCapturedVariablesInMultipleLambdas.kt")
      public void testReferenceToCapturedVariablesInMultipleLambdas() {
        runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/referenceToCapturedVariablesInMultipleLambdas.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/closures/captureOuterProperty")
    @TestDataPath("$PROJECT_ROOT")
    public class CaptureOuterProperty {
      @Test
      public void testAllFilesPresentInCaptureOuterProperty() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/captureOuterProperty"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("captureFunctionInProperty.kt")
      public void testCaptureFunctionInProperty() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/captureFunctionInProperty.kt");
      }

      @Test
      @TestMetadata("inFunction.kt")
      public void testInFunction() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inFunction.kt");
      }

      @Test
      @TestMetadata("inProperty.kt")
      public void testInProperty() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inProperty.kt");
      }

      @Test
      @TestMetadata("inPropertyDeepObjectChain.kt")
      public void testInPropertyDeepObjectChain() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyDeepObjectChain.kt");
      }

      @Test
      @TestMetadata("inPropertyFromSuperClass.kt")
      public void testInPropertyFromSuperClass() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperClass.kt");
      }

      @Test
      @TestMetadata("inPropertyFromSuperSuperClass.kt")
      public void testInPropertyFromSuperSuperClass() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperSuperClass.kt");
      }

      @Test
      @TestMetadata("kt4176.kt")
      public void testKt4176() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/kt4176.kt");
      }

      @Test
      @TestMetadata("kt4656.kt")
      public void testKt4656() {
        runTest("compiler/testData/codegen/box/closures/captureOuterProperty/kt4656.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/closures/capturedVarsOptimization")
    @TestDataPath("$PROJECT_ROOT")
    public class CapturedVarsOptimization {
      @Test
      public void testAllFilesPresentInCapturedVarsOptimization() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/capturedVarsOptimization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("capturedInCrossinline.kt")
      public void testCapturedInCrossinline() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInCrossinline.kt");
      }

      @Test
      @TestMetadata("capturedInInlineOnlyAssign.kt")
      public void testCapturedInInlineOnlyAssign() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyAssign.kt");
      }

      @Test
      @TestMetadata("capturedInInlineOnlyCAO.kt")
      public void testCapturedInInlineOnlyCAO() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyCAO.kt");
      }

      @Test
      @TestMetadata("capturedInInlineOnlyIncrDecr.kt")
      public void testCapturedInInlineOnlyIncrDecr() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyIncrDecr.kt");
      }

      @Test
      @TestMetadata("capturedInInlineOnlyIndexedCAO.kt")
      public void testCapturedInInlineOnlyIndexedCAO() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyIndexedCAO.kt");
      }

      @Test
      @TestMetadata("capturedVarsOfSize2.kt")
      public void testCapturedVarsOfSize2() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedVarsOfSize2.kt");
      }

      @Test
      @TestMetadata("kt17200.kt")
      public void testKt17200() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt17200.kt");
      }

      @Test
      @TestMetadata("kt17588.kt")
      public void testKt17588() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt17588.kt");
      }

      @Test
      @TestMetadata("kt44347.kt")
      public void testKt44347() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt44347.kt");
      }

      @Test
      @TestMetadata("kt45446.kt")
      public void testKt45446() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt45446.kt");
      }

      @Test
      @TestMetadata("sharedSlotsWithCapturedVars.kt")
      public void testSharedSlotsWithCapturedVars() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/sharedSlotsWithCapturedVars.kt");
      }

      @Test
      @TestMetadata("withCoroutines.kt")
      public void testWithCoroutines() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/withCoroutines.kt");
      }

      @Test
      @TestMetadata("withCoroutinesNoStdLib.kt")
      public void testWithCoroutinesNoStdLib() {
        runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/withCoroutinesNoStdLib.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/closures/closureInsideClosure")
    @TestDataPath("$PROJECT_ROOT")
    public class ClosureInsideClosure {
      @Test
      public void testAllFilesPresentInClosureInsideClosure() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/closureInsideClosure"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("localFunInsideLocalFun.kt")
      public void testLocalFunInsideLocalFun() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFun.kt");
      }

      @Test
      @TestMetadata("localFunInsideLocalFunDifferentSignatures.kt")
      public void testLocalFunInsideLocalFunDifferentSignatures() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFunDifferentSignatures.kt");
      }

      @Test
      @TestMetadata("propertyAndFunctionNameClash.kt")
      public void testPropertyAndFunctionNameClash() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/propertyAndFunctionNameClash.kt");
      }

      @Test
      @TestMetadata("threeLevels.kt")
      public void testThreeLevels() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevels.kt");
      }

      @Test
      @TestMetadata("threeLevelsDifferentSignatures.kt")
      public void testThreeLevelsDifferentSignatures() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevelsDifferentSignatures.kt");
      }

      @Test
      @TestMetadata("varAsFunInsideLocalFun.kt")
      public void testVarAsFunInsideLocalFun() {
        runTest("compiler/testData/codegen/box/closures/closureInsideClosure/varAsFunInsideLocalFun.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/collectionLiterals")
  @TestDataPath("$PROJECT_ROOT")
  public class CollectionLiterals {
    @Test
    public void testAllFilesPresentInCollectionLiterals() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/collectionLiterals"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/collections")
  @TestDataPath("$PROJECT_ROOT")
  public class Collections {
    @Test
    @TestMetadata("addCollectionStubWithCovariantOverride.kt")
    public void testAddCollectionStubWithCovariantOverride() {
      runTest("compiler/testData/codegen/box/collections/addCollectionStubWithCovariantOverride.kt");
    }

    @Test
    public void testAllFilesPresentInCollections() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/collections"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("inSetWithSmartCast.kt")
    public void testInSetWithSmartCast() {
      runTest("compiler/testData/codegen/box/collections/inSetWithSmartCast.kt");
    }

    @Test
    @TestMetadata("inheritFromAbstractMutableListInt.kt")
    public void testInheritFromAbstractMutableListInt() {
      runTest("compiler/testData/codegen/box/collections/inheritFromAbstractMutableListInt.kt");
    }

    @Test
    @TestMetadata("internalRemove.kt")
    public void testInternalRemove() {
      runTest("compiler/testData/codegen/box/collections/internalRemove.kt");
    }

    @Test
    @TestMetadata("kt41123.kt")
    public void testKt41123() {
      runTest("compiler/testData/codegen/box/collections/kt41123.kt");
    }

    @Test
    @TestMetadata("removeClash.kt")
    public void testRemoveClash() {
      runTest("compiler/testData/codegen/box/collections/removeClash.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/companion")
  @TestDataPath("$PROJECT_ROOT")
  public class Companion {
    @Test
    public void testAllFilesPresentInCompanion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/companion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("delegatedPropertyOnCompanion.kt")
    public void testDelegatedPropertyOnCompanion() {
      runTest("compiler/testData/codegen/box/companion/delegatedPropertyOnCompanion.kt");
    }

    @Test
    @TestMetadata("genericLambdaOnStringCompanion.kt")
    public void testGenericLambdaOnStringCompanion() {
      runTest("compiler/testData/codegen/box/companion/genericLambdaOnStringCompanion.kt");
    }

    @Test
    @TestMetadata("inlineFunctionCompanionPropertyAccess.kt")
    public void testInlineFunctionCompanionPropertyAccess() {
      runTest("compiler/testData/codegen/box/companion/inlineFunctionCompanionPropertyAccess.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/compatibility")
  @TestDataPath("$PROJECT_ROOT")
  public class Compatibility {
    @Test
    public void testAllFilesPresentInCompatibility() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/compatibility"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("privateCompanionObject.kt")
    public void testPrivateCompanionObject() {
      runTest("compiler/testData/codegen/box/compatibility/privateCompanionObject.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/constants")
  @TestDataPath("$PROJECT_ROOT")
  public class Constants {
    @Test
    public void testAllFilesPresentInConstants() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/constants"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("comparisonFalse.kt")
    public void testComparisonFalse() {
      runTest("compiler/testData/codegen/box/constants/comparisonFalse.kt");
    }

    @Test
    @TestMetadata("constValFromAnotherModuleInConsVal.kt")
    public void testConstValFromAnotherModuleInConsVal() {
      runTest("compiler/testData/codegen/box/constants/constValFromAnotherModuleInConsVal.kt");
    }

    @Test
    @TestMetadata("constantsInWhen.kt")
    public void testConstantsInWhen() {
      runTest("compiler/testData/codegen/box/constants/constantsInWhen.kt");
    }

    @Test
    @TestMetadata("divisionByZero.kt")
    public void testDivisionByZero() {
      runTest("compiler/testData/codegen/box/constants/divisionByZero.kt");
    }

    @Test
    @TestMetadata("doNotTriggerInit.kt")
    public void testDoNotTriggerInit() {
      runTest("compiler/testData/codegen/box/constants/doNotTriggerInit.kt");
    }

    @Test
    @TestMetadata("float.kt")
    public void testFloat() {
      runTest("compiler/testData/codegen/box/constants/float.kt");
    }

    @Test
    @TestMetadata("foldingBinaryOpsUnsigned.kt")
    public void testFoldingBinaryOpsUnsigned() {
      runTest("compiler/testData/codegen/box/constants/foldingBinaryOpsUnsigned.kt");
    }

    @Test
    @TestMetadata("foldingBinaryOpsUnsignedConst.kt")
    public void testFoldingBinaryOpsUnsignedConst() {
      runTest("compiler/testData/codegen/box/constants/foldingBinaryOpsUnsignedConst.kt");
    }

    @Test
    @TestMetadata("kt9532.kt")
    public void testKt9532() {
      runTest("compiler/testData/codegen/box/constants/kt9532.kt");
    }

    @Test
    @TestMetadata("literalToLongConversion.kt")
    public void testLiteralToLongConversion() {
      runTest("compiler/testData/codegen/box/constants/literalToLongConversion.kt");
    }

    @Test
    @TestMetadata("long.kt")
    public void testLong() {
      runTest("compiler/testData/codegen/box/constants/long.kt");
    }

    @Test
    @TestMetadata("privateConst.kt")
    public void testPrivateConst() {
      runTest("compiler/testData/codegen/box/constants/privateConst.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/constructor")
  @TestDataPath("$PROJECT_ROOT")
  public class Constructor {
    @Test
    public void testAllFilesPresentInConstructor() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/constructor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/constructorCall")
  @TestDataPath("$PROJECT_ROOT")
  public class ConstructorCall {
    @Test
    public void testAllFilesPresentInConstructorCall() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/constructorCall"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/contracts")
  @TestDataPath("$PROJECT_ROOT")
  public class Contracts {
    @Test
    public void testAllFilesPresentInContracts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/contracts"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("constructorArgument.kt")
    public void testConstructorArgument() {
      runTest("compiler/testData/codegen/box/contracts/constructorArgument.kt");
    }

    @Test
    @TestMetadata("destructuredVariable.kt")
    public void testDestructuredVariable() {
      runTest("compiler/testData/codegen/box/contracts/destructuredVariable.kt");
    }

    @Test
    @TestMetadata("exactlyOnceNotInline.kt")
    public void testExactlyOnceNotInline() {
      runTest("compiler/testData/codegen/box/contracts/exactlyOnceNotInline.kt");
    }

    @Test
    @TestMetadata("exception.kt")
    public void testException() {
      runTest("compiler/testData/codegen/box/contracts/exception.kt");
    }

    @Test
    @TestMetadata("fieldInConstructorParens.kt")
    public void testFieldInConstructorParens() {
      runTest("compiler/testData/codegen/box/contracts/fieldInConstructorParens.kt");
    }

    @Test
    @TestMetadata("fieldReadInConstructor.kt")
    public void testFieldReadInConstructor() {
      runTest("compiler/testData/codegen/box/contracts/fieldReadInConstructor.kt");
    }

    @Test
    @TestMetadata("forLoop.kt")
    public void testForLoop() {
      runTest("compiler/testData/codegen/box/contracts/forLoop.kt");
    }

    @Test
    @TestMetadata("functionParameter.kt")
    public void testFunctionParameter() {
      runTest("compiler/testData/codegen/box/contracts/functionParameter.kt");
    }

    @Test
    @TestMetadata("kt39374.kt")
    public void testKt39374() {
      runTest("compiler/testData/codegen/box/contracts/kt39374.kt");
    }

    @Test
    @TestMetadata("kt45236.kt")
    public void testKt45236() {
      runTest("compiler/testData/codegen/box/contracts/kt45236.kt");
    }

    @Test
    @TestMetadata("kt47168.kt")
    public void testKt47168() {
      runTest("compiler/testData/codegen/box/contracts/kt47168.kt");
    }

    @Test
    @TestMetadata("kt47300.kt")
    public void testKt47300() {
      runTest("compiler/testData/codegen/box/contracts/kt47300.kt");
    }

    @Test
    @TestMetadata("lambdaParameter.kt")
    public void testLambdaParameter() {
      runTest("compiler/testData/codegen/box/contracts/lambdaParameter.kt");
    }

    @Test
    @TestMetadata("listAppend.kt")
    public void testListAppend() {
      runTest("compiler/testData/codegen/box/contracts/listAppend.kt");
    }

    @Test
    @TestMetadata("nestedLambdaInNonInlineCallExactlyOnce.kt")
    public void testNestedLambdaInNonInlineCallExactlyOnce() {
      runTest("compiler/testData/codegen/box/contracts/nestedLambdaInNonInlineCallExactlyOnce.kt");
    }

    @Test
    @TestMetadata("valInWhen.kt")
    public void testValInWhen() {
      runTest("compiler/testData/codegen/box/contracts/valInWhen.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/controlStructures")
  @TestDataPath("$PROJECT_ROOT")
  public class ControlStructures {
    @Test
    public void testAllFilesPresentInControlStructures() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("bottles.kt")
    public void testBottles() {
      runTest("compiler/testData/codegen/box/controlStructures/bottles.kt");
    }

    @Test
    @TestMetadata("breakInFinally.kt")
    public void testBreakInFinally() {
      runTest("compiler/testData/codegen/box/controlStructures/breakInFinally.kt");
    }

    @Test
    @TestMetadata("breakInWhen.kt")
    public void testBreakInWhen() {
      runTest("compiler/testData/codegen/box/controlStructures/breakInWhen.kt");
    }

    @Test
    @TestMetadata("compareBoxedIntegerToZero.kt")
    public void testCompareBoxedIntegerToZero() {
      runTest("compiler/testData/codegen/box/controlStructures/compareBoxedIntegerToZero.kt");
    }

    @Test
    @TestMetadata("conditionOfEmptyIf.kt")
    public void testConditionOfEmptyIf() {
      runTest("compiler/testData/codegen/box/controlStructures/conditionOfEmptyIf.kt");
    }

    @Test
    @TestMetadata("continueInExpr.kt")
    public void testContinueInExpr() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInExpr.kt");
    }

    @Test
    @TestMetadata("continueInFor.kt")
    public void testContinueInFor() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInFor.kt");
    }

    @Test
    @TestMetadata("continueInForCondition.kt")
    public void testContinueInForCondition() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInForCondition.kt");
    }

    @Test
    @TestMetadata("continueInWhen.kt")
    public void testContinueInWhen() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInWhen.kt");
    }

    @Test
    @TestMetadata("continueInWhile.kt")
    public void testContinueInWhile() {
      runTest("compiler/testData/codegen/box/controlStructures/continueInWhile.kt");
    }

    @Test
    @TestMetadata("continueToLabelInFor.kt")
    public void testContinueToLabelInFor() {
      runTest("compiler/testData/codegen/box/controlStructures/continueToLabelInFor.kt");
    }

    @Test
    @TestMetadata("doWhile.kt")
    public void testDoWhile() {
      runTest("compiler/testData/codegen/box/controlStructures/doWhile.kt");
    }

    @Test
    @TestMetadata("doWhileFib.kt")
    public void testDoWhileFib() {
      runTest("compiler/testData/codegen/box/controlStructures/doWhileFib.kt");
    }

    @Test
    @TestMetadata("doWhileWithContinue.kt")
    public void testDoWhileWithContinue() {
      runTest("compiler/testData/codegen/box/controlStructures/doWhileWithContinue.kt");
    }

    @Test
    @TestMetadata("emptyDoWhile.kt")
    public void testEmptyDoWhile() {
      runTest("compiler/testData/codegen/box/controlStructures/emptyDoWhile.kt");
    }

    @Test
    @TestMetadata("emptyFor.kt")
    public void testEmptyFor() {
      runTest("compiler/testData/codegen/box/controlStructures/emptyFor.kt");
    }

    @Test
    @TestMetadata("emptyWhile.kt")
    public void testEmptyWhile() {
      runTest("compiler/testData/codegen/box/controlStructures/emptyWhile.kt");
    }

    @Test
    @TestMetadata("factorialTest.kt")
    public void testFactorialTest() {
      runTest("compiler/testData/codegen/box/controlStructures/factorialTest.kt");
    }

    @Test
    @TestMetadata("finallyOnEmptyReturn.kt")
    public void testFinallyOnEmptyReturn() {
      runTest("compiler/testData/codegen/box/controlStructures/finallyOnEmptyReturn.kt");
    }

    @Test
    @TestMetadata("forArrayList.kt")
    public void testForArrayList() {
      runTest("compiler/testData/codegen/box/controlStructures/forArrayList.kt");
    }

    @Test
    @TestMetadata("forArrayListMultiDecl.kt")
    public void testForArrayListMultiDecl() {
      runTest("compiler/testData/codegen/box/controlStructures/forArrayListMultiDecl.kt");
    }

    @Test
    @TestMetadata("forInCharSequence.kt")
    public void testForInCharSequence() {
      runTest("compiler/testData/codegen/box/controlStructures/forInCharSequence.kt");
    }

    @Test
    @TestMetadata("forInCharSequenceMut.kt")
    public void testForInCharSequenceMut() {
      runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceMut.kt");
    }

    @Test
    @TestMetadata("forInSmartCastToArray.kt")
    public void testForInSmartCastToArray() {
      runTest("compiler/testData/codegen/box/controlStructures/forInSmartCastToArray.kt");
    }

    @Test
    @TestMetadata("forLoopMemberExtensionAll.kt")
    public void testForLoopMemberExtensionAll() {
      runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionAll.kt");
    }

    @Test
    @TestMetadata("forLoopMemberExtensionHasNext.kt")
    public void testForLoopMemberExtensionHasNext() {
      runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionHasNext.kt");
    }

    @Test
    @TestMetadata("forLoopMemberExtensionNext.kt")
    public void testForLoopMemberExtensionNext() {
      runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionNext.kt");
    }

    @Test
    @TestMetadata("forNullableCharInString.kt")
    public void testForNullableCharInString() {
      runTest("compiler/testData/codegen/box/controlStructures/forNullableCharInString.kt");
    }

    @Test
    @TestMetadata("forUserType.kt")
    public void testForUserType() {
      runTest("compiler/testData/codegen/box/controlStructures/forUserType.kt");
    }

    @Test
    @TestMetadata("ifConst1.kt")
    public void testIfConst1() {
      runTest("compiler/testData/codegen/box/controlStructures/ifConst1.kt");
    }

    @Test
    @TestMetadata("ifConst2.kt")
    public void testIfConst2() {
      runTest("compiler/testData/codegen/box/controlStructures/ifConst2.kt");
    }

    @Test
    @TestMetadata("ifIncompatibleBranches.kt")
    public void testIfIncompatibleBranches() {
      runTest("compiler/testData/codegen/box/controlStructures/ifIncompatibleBranches.kt");
    }

    @Test
    @TestMetadata("inRangeConditionsInWhen.kt")
    public void testInRangeConditionsInWhen() {
      runTest("compiler/testData/codegen/box/controlStructures/inRangeConditionsInWhen.kt");
    }

    @Test
    @TestMetadata("kt12908.kt")
    public void testKt12908() {
      runTest("compiler/testData/codegen/box/controlStructures/kt12908.kt");
    }

    @Test
    @TestMetadata("kt12908_2.kt")
    public void testKt12908_2() {
      runTest("compiler/testData/codegen/box/controlStructures/kt12908_2.kt");
    }

    @Test
    @TestMetadata("kt1441.kt")
    public void testKt1441() {
      runTest("compiler/testData/codegen/box/controlStructures/kt1441.kt");
    }

    @Test
    @TestMetadata("kt14839.kt")
    public void testKt14839() {
      runTest("compiler/testData/codegen/box/controlStructures/kt14839.kt");
    }

    @Test
    @TestMetadata("kt15726.kt")
    public void testKt15726() {
      runTest("compiler/testData/codegen/box/controlStructures/kt15726.kt");
    }

    @Test
    @TestMetadata("kt1688.kt")
    public void testKt1688() {
      runTest("compiler/testData/codegen/box/controlStructures/kt1688.kt");
    }

    @Test
    @TestMetadata("kt17110.kt")
    public void testKt17110() {
      runTest("compiler/testData/codegen/box/controlStructures/kt17110.kt");
    }

    @Test
    @TestMetadata("kt1742.kt")
    public void testKt1742() {
      runTest("compiler/testData/codegen/box/controlStructures/kt1742.kt");
    }

    @Test
    @TestMetadata("kt17590.kt")
    public void testKt17590() {
      runTest("compiler/testData/codegen/box/controlStructures/kt17590.kt");
    }

    @Test
    @TestMetadata("kt17590_long.kt")
    public void testKt17590_long() {
      runTest("compiler/testData/codegen/box/controlStructures/kt17590_long.kt");
    }

    @Test
    @TestMetadata("kt1899.kt")
    public void testKt1899() {
      runTest("compiler/testData/codegen/box/controlStructures/kt1899.kt");
    }

    @Test
    @TestMetadata("kt2147.kt")
    public void testKt2147() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2147.kt");
    }

    @Test
    @TestMetadata("kt2259.kt")
    public void testKt2259() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2259.kt");
    }

    @Test
    @TestMetadata("kt2291.kt")
    public void testKt2291() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2291.kt");
    }

    @Test
    @TestMetadata("kt237.kt")
    public void testKt237() {
      runTest("compiler/testData/codegen/box/controlStructures/kt237.kt");
    }

    @Test
    @TestMetadata("kt2416.kt")
    public void testKt2416() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2416.kt");
    }

    @Test
    @TestMetadata("kt2577.kt")
    public void testKt2577() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2577.kt");
    }

    @Test
    @TestMetadata("kt2597.kt")
    public void testKt2597() {
      runTest("compiler/testData/codegen/box/controlStructures/kt2597.kt");
    }

    @Test
    @TestMetadata("kt299.kt")
    public void testKt299() {
      runTest("compiler/testData/codegen/box/controlStructures/kt299.kt");
    }

    @Test
    @TestMetadata("kt3087.kt")
    public void testKt3087() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3087.kt");
    }

    @Test
    @TestMetadata("kt3203_1.kt")
    public void testKt3203_1() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3203_1.kt");
    }

    @Test
    @TestMetadata("kt3203_2.kt")
    public void testKt3203_2() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3203_2.kt");
    }

    @Test
    @TestMetadata("kt3273.kt")
    public void testKt3273() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3273.kt");
    }

    @Test
    @TestMetadata("kt3280.kt")
    public void testKt3280() {
      runTest("compiler/testData/codegen/box/controlStructures/kt3280.kt");
    }

    @Test
    @TestMetadata("kt416.kt")
    public void testKt416() {
      runTest("compiler/testData/codegen/box/controlStructures/kt416.kt");
    }

    @Test
    @TestMetadata("kt42455.kt")
    public void testKt42455() {
      runTest("compiler/testData/codegen/box/controlStructures/kt42455.kt");
    }

    @Test
    @TestMetadata("kt47245.kt")
    public void testKt47245() {
      runTest("compiler/testData/codegen/box/controlStructures/kt47245.kt");
    }

    @Test
    @TestMetadata("kt513.kt")
    public void testKt513() {
      runTest("compiler/testData/codegen/box/controlStructures/kt513.kt");
    }

    @Test
    @TestMetadata("kt628.kt")
    public void testKt628() {
      runTest("compiler/testData/codegen/box/controlStructures/kt628.kt");
    }

    @Test
    @TestMetadata("kt769.kt")
    public void testKt769() {
      runTest("compiler/testData/codegen/box/controlStructures/kt769.kt");
    }

    @Test
    @TestMetadata("kt772.kt")
    public void testKt772() {
      runTest("compiler/testData/codegen/box/controlStructures/kt772.kt");
    }

    @Test
    @TestMetadata("kt773.kt")
    public void testKt773() {
      runTest("compiler/testData/codegen/box/controlStructures/kt773.kt");
    }

    @Test
    @TestMetadata("kt8148.kt")
    public void testKt8148() {
      runTest("compiler/testData/codegen/box/controlStructures/kt8148.kt");
    }

    @Test
    @TestMetadata("kt8148_break.kt")
    public void testKt8148_break() {
      runTest("compiler/testData/codegen/box/controlStructures/kt8148_break.kt");
    }

    @Test
    @TestMetadata("kt8148_continue.kt")
    public void testKt8148_continue() {
      runTest("compiler/testData/codegen/box/controlStructures/kt8148_continue.kt");
    }

    @Test
    @TestMetadata("kt870.kt")
    public void testKt870() {
      runTest("compiler/testData/codegen/box/controlStructures/kt870.kt");
    }

    @Test
    @TestMetadata("kt9022Return.kt")
    public void testKt9022Return() {
      runTest("compiler/testData/codegen/box/controlStructures/kt9022Return.kt");
    }

    @Test
    @TestMetadata("kt9022Throw.kt")
    public void testKt9022Throw() {
      runTest("compiler/testData/codegen/box/controlStructures/kt9022Throw.kt");
    }

    @Test
    @TestMetadata("kt910.kt")
    public void testKt910() {
      runTest("compiler/testData/codegen/box/controlStructures/kt910.kt");
    }

    @Test
    @TestMetadata("kt958.kt")
    public void testKt958() {
      runTest("compiler/testData/codegen/box/controlStructures/kt958.kt");
    }

    @Test
    @TestMetadata("longRange.kt")
    public void testLongRange() {
      runTest("compiler/testData/codegen/box/controlStructures/longRange.kt");
    }

    @Test
    @TestMetadata("parameterWithNameForFunctionType.kt")
    public void testParameterWithNameForFunctionType() {
      runTest("compiler/testData/codegen/box/controlStructures/parameterWithNameForFunctionType.kt");
    }

    @Test
    @TestMetadata("quicksort.kt")
    public void testQuicksort() {
      runTest("compiler/testData/codegen/box/controlStructures/quicksort.kt");
    }

    @Test
    @TestMetadata("tcbInEliminatedCondition.kt")
    public void testTcbInEliminatedCondition() {
      runTest("compiler/testData/codegen/box/controlStructures/tcbInEliminatedCondition.kt");
    }

    @Test
    @TestMetadata("tryCatchExpression.kt")
    public void testTryCatchExpression() {
      runTest("compiler/testData/codegen/box/controlStructures/tryCatchExpression.kt");
    }

    @Test
    @TestMetadata("tryCatchFinally.kt")
    public void testTryCatchFinally() {
      runTest("compiler/testData/codegen/box/controlStructures/tryCatchFinally.kt");
    }

    @Test
    @TestMetadata("tryCatchFinallyChain.kt")
    public void testTryCatchFinallyChain() {
      runTest("compiler/testData/codegen/box/controlStructures/tryCatchFinallyChain.kt");
    }

    @Test
    @TestMetadata("tryFinally.kt")
    public void testTryFinally() {
      runTest("compiler/testData/codegen/box/controlStructures/tryFinally.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions")
    @TestDataPath("$PROJECT_ROOT")
    public class BreakContinueInExpressions {
      @Test
      public void testAllFilesPresentInBreakContinueInExpressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("breakFromOuter.kt")
      public void testBreakFromOuter() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakFromOuter.kt");
      }

      @Test
      @TestMetadata("breakInDoWhile.kt")
      public void testBreakInDoWhile() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInDoWhile.kt");
      }

      @Test
      @TestMetadata("breakInExpr.kt")
      public void testBreakInExpr() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInExpr.kt");
      }

      @Test
      @TestMetadata("breakInLoopConditions.kt")
      public void testBreakInLoopConditions() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInLoopConditions.kt");
      }

      @Test
      @TestMetadata("continueInDoWhile.kt")
      public void testContinueInDoWhile() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/continueInDoWhile.kt");
      }

      @Test
      @TestMetadata("continueInExpr.kt")
      public void testContinueInExpr() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/continueInExpr.kt");
      }

      @Test
      @TestMetadata("inlineWithStack.kt")
      public void testInlineWithStack() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlineWithStack.kt");
      }

      @Test
      @TestMetadata("innerLoopWithStack.kt")
      public void testInnerLoopWithStack() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/innerLoopWithStack.kt");
      }

      @Test
      @TestMetadata("kt14581.kt")
      public void testKt14581() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt14581.kt");
      }

      @Test
      @TestMetadata("kt16713.kt")
      public void testKt16713() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt16713.kt");
      }

      @Test
      @TestMetadata("kt16713_2.kt")
      public void testKt16713_2() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt16713_2.kt");
      }

      @Test
      @TestMetadata("kt17384.kt")
      public void testKt17384() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt17384.kt");
      }

      @Test
      @TestMetadata("kt45704_elvisInInlineFun.kt")
      public void testKt45704_elvisInInlineFun() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt45704_elvisInInlineFun.kt");
      }

      @Test
      @TestMetadata("kt9022And.kt")
      public void testKt9022And() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt9022And.kt");
      }

      @Test
      @TestMetadata("kt9022Or.kt")
      public void testKt9022Or() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt9022Or.kt");
      }

      @Test
      @TestMetadata("pathologicalDoWhile.kt")
      public void testPathologicalDoWhile() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/pathologicalDoWhile.kt");
      }

      @Test
      @TestMetadata("popSizes.kt")
      public void testPopSizes() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/popSizes.kt");
      }

      @Test
      @TestMetadata("tryFinally1.kt")
      public void testTryFinally1() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/tryFinally1.kt");
      }

      @Test
      @TestMetadata("tryFinally2.kt")
      public void testTryFinally2() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/tryFinally2.kt");
      }

      @Test
      @TestMetadata("whileTrueBreak.kt")
      public void testWhileTrueBreak() {
        runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/whileTrueBreak.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue")
      @TestDataPath("$PROJECT_ROOT")
      public class InlinedBreakContinue {
        @Test
        public void testAllFilesPresentInInlinedBreakContinue() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("initializerBlock.kt")
        public void testInitializerBlock() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/initializerBlock.kt");
        }

        @Test
        @TestMetadata("inlineFunctionWithMultipleParameters.kt")
        public void testInlineFunctionWithMultipleParameters() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/inlineFunctionWithMultipleParameters.kt");
        }

        @Test
        @TestMetadata("lambdaPassedToInlineFunction.kt")
        public void testLambdaPassedToInlineFunction() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/lambdaPassedToInlineFunction.kt");
        }

        @Test
        @TestMetadata("loopWithinInlineFunction.kt")
        public void testLoopWithinInlineFunction() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/loopWithinInlineFunction.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/simple.kt");
        }

        @Test
        @TestMetadata("stdlibFunctions.kt")
        public void testStdlibFunctions() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/stdlibFunctions.kt");
        }

        @Test
        @TestMetadata("withReturnValue.kt")
        public void testWithReturnValue() {
          runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlinedBreakContinue/withReturnValue.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInArray")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInArray {
      @Test
      public void testAllFilesPresentInForInArray() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInArray"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInArraySpecializedToUntil.kt")
      public void testForInArraySpecializedToUntil() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArraySpecializedToUntil.kt");
      }

      @Test
      @TestMetadata("forInArrayWithArrayPropertyUpdatedInLoopBody.kt")
      public void testForInArrayWithArrayPropertyUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayPropertyUpdatedInLoopBody.kt");
      }

      @Test
      @TestMetadata("forInArrayWithArrayVarUpdatedInLoopBody13.kt")
      public void testForInArrayWithArrayVarUpdatedInLoopBody13() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayVarUpdatedInLoopBody13.kt");
      }

      @Test
      @TestMetadata("forInDelegatedPropertyUpdatedInLoopBody.kt")
      public void testForInDelegatedPropertyUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInDelegatedPropertyUpdatedInLoopBody.kt");
      }

      @Test
      @TestMetadata("forInDoubleArrayWithUpcast.kt")
      public void testForInDoubleArrayWithUpcast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInDoubleArrayWithUpcast.kt");
      }

      @Test
      @TestMetadata("forInFieldUpdatedInLoopBody.kt")
      public void testForInFieldUpdatedInLoopBody() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInFieldUpdatedInLoopBody.kt");
      }

      @Test
      @TestMetadata("forInInlineClassArrayWithUpcast.kt")
      public void testForInInlineClassArrayWithUpcast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInInlineClassArrayWithUpcast.kt");
      }

      @Test
      @TestMetadata("forIntArray.kt")
      public void testForIntArray() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forIntArray.kt");
      }

      @Test
      @TestMetadata("forNullableIntArray.kt")
      public void testForNullableIntArray() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forNullableIntArray.kt");
      }

      @Test
      @TestMetadata("forPrimitiveIntArray.kt")
      public void testForPrimitiveIntArray() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArray/forPrimitiveIntArray.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInArrayWithIndex {
      @Test
      public void testAllFilesPresentInForInArrayWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInArrayOfObjectArrayWithIndex.kt")
      public void testForInArrayOfObjectArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayOfObjectArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInArrayOfPrimArrayWithIndex.kt")
      public void testForInArrayOfPrimArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayOfPrimArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInArrayWithIndexBreakAndContinue.kt")
      public void testForInArrayWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexBreakAndContinue.kt");
      }

      @Test
      @TestMetadata("forInArrayWithIndexContinuesAsUnmodified.kt")
      public void testForInArrayWithIndexContinuesAsUnmodified() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexContinuesAsUnmodified.kt");
      }

      @Test
      @TestMetadata("forInArrayWithIndexNoElementVar.kt")
      public void testForInArrayWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoElementVar.kt");
      }

      @Test
      @TestMetadata("forInArrayWithIndexNoIndexOrElementVar.kt")
      public void testForInArrayWithIndexNoIndexOrElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoIndexOrElementVar.kt");
      }

      @Test
      @TestMetadata("forInArrayWithIndexNoIndexVar.kt")
      public void testForInArrayWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoIndexVar.kt");
      }

      @Test
      @TestMetadata("forInArrayWithIndexNotDestructured.kt")
      public void testForInArrayWithIndexNotDestructured() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNotDestructured.kt");
      }

      @Test
      @TestMetadata("forInArrayWithIndexWithExplicitlyTypedIndexVariable.kt")
      public void testForInArrayWithIndexWithExplicitlyTypedIndexVariable() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexWithExplicitlyTypedIndexVariable.kt");
      }

      @Test
      @TestMetadata("forInByteArrayWithIndex.kt")
      public void testForInByteArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInByteArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInByteArrayWithIndexWithSmartCast.kt")
      public void testForInByteArrayWithIndexWithSmartCast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInByteArrayWithIndexWithSmartCast.kt");
      }

      @Test
      @TestMetadata("forInEmptyArrayWithIndex.kt")
      public void testForInEmptyArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInEmptyArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInGenericArrayOfIntsWithIndex.kt")
      public void testForInGenericArrayOfIntsWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayOfIntsWithIndex.kt");
      }

      @Test
      @TestMetadata("forInGenericArrayOfIntsWithIndexWithSmartCast.kt")
      public void testForInGenericArrayOfIntsWithIndexWithSmartCast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayOfIntsWithIndexWithSmartCast.kt");
      }

      @Test
      @TestMetadata("forInGenericArrayWithIndex.kt")
      public void testForInGenericArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInIntArrayWithIndex.kt")
      public void testForInIntArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInIntArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInIntArrayWithIndexWithSmartCast.kt")
      public void testForInIntArrayWithIndexWithSmartCast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInIntArrayWithIndexWithSmartCast.kt");
      }

      @Test
      @TestMetadata("forInObjectArrayWithIndex.kt")
      public void testForInObjectArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInObjectArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInShortArrayWithIndex.kt")
      public void testForInShortArrayWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInShortArrayWithIndex.kt");
      }

      @Test
      @TestMetadata("forInShortArrayWithIndexWithSmartCast.kt")
      public void testForInShortArrayWithIndexWithSmartCast() {
        runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInShortArrayWithIndexWithSmartCast.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInCharSequenceWithIndex {
      @Test
      public void testAllFilesPresentInForInCharSequenceWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInCharSeqWithIndexStops.kt")
      public void testForInCharSeqWithIndexStops() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSeqWithIndexStops.kt");
      }

      @Test
      @TestMetadata("forInCharSequenceTypeParameterWithIndex.kt")
      public void testForInCharSequenceTypeParameterWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceTypeParameterWithIndex.kt");
      }

      @Test
      @TestMetadata("forInCharSequenceWithIndex.kt")
      public void testForInCharSequenceWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndex.kt");
      }

      @Test
      @TestMetadata("forInCharSequenceWithIndexBreakAndContinue.kt")
      public void testForInCharSequenceWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexBreakAndContinue.kt");
      }

      @Test
      @TestMetadata("forInCharSequenceWithIndexCheckSideEffects.kt")
      public void testForInCharSequenceWithIndexCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInCharSequenceWithIndexNoElementVarCheckSideEffects.kt")
      public void testForInCharSequenceWithIndexNoElementVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexNoElementVarCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInCharSequenceWithIndexNoIndexVarCheckSideEffects.kt")
      public void testForInCharSequenceWithIndexNoIndexVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexNoIndexVarCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInEmptyStringWithIndex.kt")
      public void testForInEmptyStringWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInEmptyStringWithIndex.kt");
      }

      @Test
      @TestMetadata("forInStringWithIndex.kt")
      public void testForInStringWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndex.kt");
      }

      @Test
      @TestMetadata("forInStringWithIndexNoElementVar.kt")
      public void testForInStringWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoElementVar.kt");
      }

      @Test
      @TestMetadata("forInStringWithIndexNoIndexOrElementVar.kt")
      public void testForInStringWithIndexNoIndexOrElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoIndexOrElementVar.kt");
      }

      @Test
      @TestMetadata("forInStringWithIndexNoIndexVar.kt")
      public void testForInStringWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoIndexVar.kt");
      }

      @Test
      @TestMetadata("forInStringWithIndexNotDestructured.kt")
      public void testForInStringWithIndexNotDestructured() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNotDestructured.kt");
      }

      @Test
      @TestMetadata("forInStringWithIndexWithExplicitlyTypedIndexVariable.kt")
      public void testForInStringWithIndexWithExplicitlyTypedIndexVariable() {
        runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexWithExplicitlyTypedIndexVariable.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInIterableWithIndex {
      @Test
      public void testAllFilesPresentInForInIterableWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInEmptyListWithIndex.kt")
      public void testForInEmptyListWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInEmptyListWithIndex.kt");
      }

      @Test
      @TestMetadata("forInIterableTypeParameterWithIndex.kt")
      public void testForInIterableTypeParameterWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableTypeParameterWithIndex.kt");
      }

      @Test
      @TestMetadata("forInIterableWithIndexCheckSideEffects.kt")
      public void testForInIterableWithIndexCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInIterableWithIndexNoElementVarCheckSideEffects.kt")
      public void testForInIterableWithIndexNoElementVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexNoElementVarCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInIterableWithIndexNoIndexVarCheckSideEffects.kt")
      public void testForInIterableWithIndexNoIndexVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexNoIndexVarCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInListWithIndex.kt")
      public void testForInListWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndex.kt");
      }

      @Test
      @TestMetadata("forInListWithIndexBreak.kt")
      public void testForInListWithIndexBreak() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexBreak.kt");
      }

      @Test
      @TestMetadata("forInListWithIndexBreakAndContinue.kt")
      public void testForInListWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexBreakAndContinue.kt");
      }

      @Test
      @TestMetadata("forInListWithIndexContinue.kt")
      public void testForInListWithIndexContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexContinue.kt");
      }

      @Test
      @TestMetadata("forInListWithIndexNoElementVar.kt")
      public void testForInListWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexNoElementVar.kt");
      }

      @Test
      @TestMetadata("forInListWithIndexNoIndexVar.kt")
      public void testForInListWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexNoIndexVar.kt");
      }

      @Test
      @TestMetadata("forInListWithIndexWithExplicitlyTypedIndexVariable.kt")
      public void testForInListWithIndexWithExplicitlyTypedIndexVariable() {
        runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexWithExplicitlyTypedIndexVariable.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInIterator")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInIterator {
      @Test
      public void testAllFilesPresentInForInIterator() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInIterator"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInSequenceWithIndex {
      @Test
      public void testAllFilesPresentInForInSequenceWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInEmptySequenceWithIndex.kt")
      public void testForInEmptySequenceWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInEmptySequenceWithIndex.kt");
      }

      @Test
      @TestMetadata("forInSequenceTypeParameterWithIndex.kt")
      public void testForInSequenceTypeParameterWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceTypeParameterWithIndex.kt");
      }

      @Test
      @TestMetadata("forInSequenceWithIndex.kt")
      public void testForInSequenceWithIndex() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndex.kt");
      }

      @Test
      @TestMetadata("forInSequenceWithIndexBreakAndContinue.kt")
      public void testForInSequenceWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexBreakAndContinue.kt");
      }

      @Test
      @TestMetadata("forInSequenceWithIndexCheckSideEffects.kt")
      public void testForInSequenceWithIndexCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInSequenceWithIndexNoElementVar.kt")
      public void testForInSequenceWithIndexNoElementVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoElementVar.kt");
      }

      @Test
      @TestMetadata("forInSequenceWithIndexNoElementVarCheckSideEffects.kt")
      public void testForInSequenceWithIndexNoElementVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoElementVarCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInSequenceWithIndexNoIndexVar.kt")
      public void testForInSequenceWithIndexNoIndexVar() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoIndexVar.kt");
      }

      @Test
      @TestMetadata("forInSequenceWithIndexNoIndexVarCheckSideEffects.kt")
      public void testForInSequenceWithIndexNoIndexVarCheckSideEffects() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoIndexVarCheckSideEffects.kt");
      }

      @Test
      @TestMetadata("forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt")
      public void testForInSequenceWithIndexWithExplicitlyTypedIndexVariable() {
        runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/returnsNothing")
    @TestDataPath("$PROJECT_ROOT")
    public class ReturnsNothing {
      @Test
      public void testAllFilesPresentInReturnsNothing() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/returnsNothing"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("ifElse.kt")
      public void testIfElse() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/ifElse.kt");
      }

      @Test
      @TestMetadata("inlineMethod.kt")
      public void testInlineMethod() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/inlineMethod.kt");
      }

      @Test
      @TestMetadata("propertyGetter.kt")
      public void testPropertyGetter() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/propertyGetter.kt");
      }

      @Test
      @TestMetadata("tryCatch.kt")
      public void testTryCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/tryCatch.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/when.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/slowDsl")
    @TestDataPath("$PROJECT_ROOT")
    public class SlowDsl {
      @Test
      public void testAllFilesPresentInSlowDsl() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/slowDsl"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions")
    @TestDataPath("$PROJECT_ROOT")
    public class TryCatchInExpressions {
      @Test
      public void testAllFilesPresentInTryCatchInExpressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("catch.kt")
      public void testCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/catch.kt");
      }

      @Test
      @TestMetadata("complexChain.kt")
      public void testComplexChain() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/complexChain.kt");
      }

      @Test
      @TestMetadata("deadTryCatch.kt")
      public void testDeadTryCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/deadTryCatch.kt");
      }

      @Test
      @TestMetadata("differentTypes.kt")
      public void testDifferentTypes() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/differentTypes.kt");
      }

      @Test
      @TestMetadata("expectException.kt")
      public void testExpectException() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/expectException.kt");
      }

      @Test
      @TestMetadata("finally.kt")
      public void testFinally() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/finally.kt");
      }

      @Test
      @TestMetadata("inlineTryCatch.kt")
      public void testInlineTryCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryCatch.kt");
      }

      @Test
      @TestMetadata("inlineTryExpr.kt")
      public void testInlineTryExpr() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryExpr.kt");
      }

      @Test
      @TestMetadata("inlineTryFinally.kt")
      public void testInlineTryFinally() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryFinally.kt");
      }

      @Test
      @TestMetadata("kt17572.kt")
      public void testKt17572() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572.kt");
      }

      @Test
      @TestMetadata("kt17572_2.kt")
      public void testKt17572_2() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_2.kt");
      }

      @Test
      @TestMetadata("kt17572_2_ext.kt")
      public void testKt17572_2_ext() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_2_ext.kt");
      }

      @Test
      @TestMetadata("kt17572_ext.kt")
      public void testKt17572_ext() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_ext.kt");
      }

      @Test
      @TestMetadata("kt17572_nested.kt")
      public void testKt17572_nested() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_nested.kt");
      }

      @Test
      @TestMetadata("kt17573.kt")
      public void testKt17573() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17573.kt");
      }

      @Test
      @TestMetadata("kt17573_nested.kt")
      public void testKt17573_nested() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17573_nested.kt");
      }

      @Test
      @TestMetadata("kt8608.kt")
      public void testKt8608() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt8608.kt");
      }

      @Test
      @TestMetadata("kt9644try.kt")
      public void testKt9644try() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt9644try.kt");
      }

      @Test
      @TestMetadata("multipleCatchBlocks.kt")
      public void testMultipleCatchBlocks() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/multipleCatchBlocks.kt");
      }

      @Test
      @TestMetadata("nonLocalReturnInTryFinally.kt")
      public void testNonLocalReturnInTryFinally() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/nonLocalReturnInTryFinally.kt");
      }

      @Test
      @TestMetadata("splitTry.kt")
      public void testSplitTry() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/splitTry.kt");
      }

      @Test
      @TestMetadata("try.kt")
      public void testTry() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/try.kt");
      }

      @Test
      @TestMetadata("tryAfterTry.kt")
      public void testTryAfterTry() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAfterTry.kt");
      }

      @Test
      @TestMetadata("tryAndBreak.kt")
      public void testTryAndBreak() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAndBreak.kt");
      }

      @Test
      @TestMetadata("tryAndContinue.kt")
      public void testTryAndContinue() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAndContinue.kt");
      }

      @Test
      @TestMetadata("tryCatchAfterWhileTrue.kt")
      public void testTryCatchAfterWhileTrue() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryCatchAfterWhileTrue.kt");
      }

      @Test
      @TestMetadata("tryFinallyOfTypeUnit.kt")
      public void testTryFinallyOfTypeUnit() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryFinallyOfTypeUnit.kt");
      }

      @Test
      @TestMetadata("tryInsideCatch.kt")
      public void testTryInsideCatch() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryInsideCatch.kt");
      }

      @Test
      @TestMetadata("tryInsideTry.kt")
      public void testTryInsideTry() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryInsideTry.kt");
      }

      @Test
      @TestMetadata("unmatchedInlineMarkers.kt")
      public void testUnmatchedInlineMarkers() {
        runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/unmatchedInlineMarkers.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines")
  @TestDataPath("$PROJECT_ROOT")
  public class Coroutines {
    @Test
    @TestMetadata("32defaultParametersInSuspend.kt")
    public void test32defaultParametersInSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/32defaultParametersInSuspend.kt");
    }

    @Test
    @TestMetadata("accessorForSuspend.kt")
    public void testAccessorForSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/accessorForSuspend.kt");
    }

    @Test
    public void testAllFilesPresentInCoroutines() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("asyncIteratorNullMerge_1_3.kt")
    public void testAsyncIteratorNullMerge_1_3() {
      runTest("compiler/testData/codegen/box/coroutines/asyncIteratorNullMerge_1_3.kt");
    }

    @Test
    @TestMetadata("asyncIteratorToList_1_3.kt")
    public void testAsyncIteratorToList_1_3() {
      runTest("compiler/testData/codegen/box/coroutines/asyncIteratorToList_1_3.kt");
    }

    @Test
    @TestMetadata("asyncIterator_1_3.kt")
    public void testAsyncIterator_1_3() {
      runTest("compiler/testData/codegen/box/coroutines/asyncIterator_1_3.kt");
    }

    @Test
    @TestMetadata("await.kt")
    public void testAwait() {
      runTest("compiler/testData/codegen/box/coroutines/await.kt");
    }

    @Test
    @TestMetadata("beginWithException.kt")
    public void testBeginWithException() {
      runTest("compiler/testData/codegen/box/coroutines/beginWithException.kt");
    }

    @Test
    @TestMetadata("beginWithExceptionNoHandleException.kt")
    public void testBeginWithExceptionNoHandleException() {
      runTest("compiler/testData/codegen/box/coroutines/beginWithExceptionNoHandleException.kt");
    }

    @Test
    @TestMetadata("builderInferenceAndGenericArrayAcessCall.kt")
    public void testBuilderInferenceAndGenericArrayAcessCall() {
      runTest("compiler/testData/codegen/box/coroutines/builderInferenceAndGenericArrayAcessCall.kt");
    }

    @Test
    @TestMetadata("captureInfixFun.kt")
    public void testCaptureInfixFun() {
      runTest("compiler/testData/codegen/box/coroutines/captureInfixFun.kt");
    }

    @Test
    @TestMetadata("captureMutableLocalVariableInsideCoroutineBlock.kt")
    public void testCaptureMutableLocalVariableInsideCoroutineBlock() {
      runTest("compiler/testData/codegen/box/coroutines/captureMutableLocalVariableInsideCoroutineBlock.kt");
    }

    @Test
    @TestMetadata("captureUnaryOperator.kt")
    public void testCaptureUnaryOperator() {
      runTest("compiler/testData/codegen/box/coroutines/captureUnaryOperator.kt");
    }

    @Test
    @TestMetadata("capturedVarInSuspendLambda.kt")
    public void testCapturedVarInSuspendLambda() {
      runTest("compiler/testData/codegen/box/coroutines/capturedVarInSuspendLambda.kt");
    }

    @Test
    @TestMetadata("castWithSuspend.kt")
    public void testCastWithSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/castWithSuspend.kt");
    }

    @Test
    @TestMetadata("catchWithInlineInsideSuspend.kt")
    public void testCatchWithInlineInsideSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/catchWithInlineInsideSuspend.kt");
    }

    @Test
    @TestMetadata("coercionToUnit.kt")
    public void testCoercionToUnit() {
      runTest("compiler/testData/codegen/box/coroutines/coercionToUnit.kt");
    }

    @Test
    @TestMetadata("controllerAccessFromInnerLambda.kt")
    public void testControllerAccessFromInnerLambda() {
      runTest("compiler/testData/codegen/box/coroutines/controllerAccessFromInnerLambda.kt");
    }

    @Test
    @TestMetadata("coroutineContextInInlinedLambda.kt")
    public void testCoroutineContextInInlinedLambda() {
      runTest("compiler/testData/codegen/box/coroutines/coroutineContextInInlinedLambda.kt");
    }

    @Test
    @TestMetadata("createCoroutineSafe.kt")
    public void testCreateCoroutineSafe() {
      runTest("compiler/testData/codegen/box/coroutines/createCoroutineSafe.kt");
    }

    @Test
    @TestMetadata("createCoroutinesOnManualInstances.kt")
    public void testCreateCoroutinesOnManualInstances() {
      runTest("compiler/testData/codegen/box/coroutines/createCoroutinesOnManualInstances.kt");
    }

    @Test
    @TestMetadata("crossInlineWithCapturedOuterReceiver.kt")
    public void testCrossInlineWithCapturedOuterReceiver() {
      runTest("compiler/testData/codegen/box/coroutines/crossInlineWithCapturedOuterReceiver.kt");
    }

    @Test
    @TestMetadata("defaultParameterLambdaInSuspend.kt")
    public void testDefaultParameterLambdaInSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/defaultParameterLambdaInSuspend.kt");
    }

    @Test
    @TestMetadata("defaultParametersInSuspend.kt")
    public void testDefaultParametersInSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/defaultParametersInSuspend.kt");
    }

    @Test
    @TestMetadata("delegatedSuspendMember.kt")
    public void testDelegatedSuspendMember() {
      runTest("compiler/testData/codegen/box/coroutines/delegatedSuspendMember.kt");
    }

    @Test
    @TestMetadata("deserializedSuspendFunctionProperty.kt")
    public void testDeserializedSuspendFunctionProperty() {
      runTest("compiler/testData/codegen/box/coroutines/deserializedSuspendFunctionProperty.kt");
    }

    @Test
    @TestMetadata("dispatchResume.kt")
    public void testDispatchResume() {
      runTest("compiler/testData/codegen/box/coroutines/dispatchResume.kt");
    }

    @Test
    @TestMetadata("doubleColonExpressionsGenerationInBuilderInference.kt")
    public void testDoubleColonExpressionsGenerationInBuilderInference() {
      runTest("compiler/testData/codegen/box/coroutines/doubleColonExpressionsGenerationInBuilderInference.kt");
    }

    @Test
    @TestMetadata("emptyClosure.kt")
    public void testEmptyClosure() {
      runTest("compiler/testData/codegen/box/coroutines/emptyClosure.kt");
    }

    @Test
    @TestMetadata("emptyCommonConstraintSystemForCoroutineInferenceCall.kt")
    public void testEmptyCommonConstraintSystemForCoroutineInferenceCall() {
      runTest("compiler/testData/codegen/box/coroutines/emptyCommonConstraintSystemForCoroutineInferenceCall.kt");
    }

    @Test
    @TestMetadata("epam.kt")
    public void testEpam() {
      runTest("compiler/testData/codegen/box/coroutines/epam.kt");
    }

    @Test
    @TestMetadata("falseUnitCoercion.kt")
    public void testFalseUnitCoercion() {
      runTest("compiler/testData/codegen/box/coroutines/falseUnitCoercion.kt");
    }

    @Test
    @TestMetadata("generate.kt")
    public void testGenerate() {
      runTest("compiler/testData/codegen/box/coroutines/generate.kt");
    }

    @Test
    @TestMetadata("handleException.kt")
    public void testHandleException() {
      runTest("compiler/testData/codegen/box/coroutines/handleException.kt");
    }

    @Test
    @TestMetadata("handleResultCallEmptyBody.kt")
    public void testHandleResultCallEmptyBody() {
      runTest("compiler/testData/codegen/box/coroutines/handleResultCallEmptyBody.kt");
    }

    @Test
    @TestMetadata("handleResultNonUnitExpression.kt")
    public void testHandleResultNonUnitExpression() {
      runTest("compiler/testData/codegen/box/coroutines/handleResultNonUnitExpression.kt");
    }

    @Test
    @TestMetadata("handleResultSuspended.kt")
    public void testHandleResultSuspended() {
      runTest("compiler/testData/codegen/box/coroutines/handleResultSuspended.kt");
    }

    @Test
    @TestMetadata("indirectInlineUsedAsNonInline.kt")
    public void testIndirectInlineUsedAsNonInline() {
      runTest("compiler/testData/codegen/box/coroutines/indirectInlineUsedAsNonInline.kt");
    }

    @Test
    @TestMetadata("infiniteLoopInNextMeaningful.kt")
    public void testInfiniteLoopInNextMeaningful() {
      runTest("compiler/testData/codegen/box/coroutines/infiniteLoopInNextMeaningful.kt");
    }

    @Test
    @TestMetadata("inlineCallWithReturns.kt")
    public void testInlineCallWithReturns() {
      runTest("compiler/testData/codegen/box/coroutines/inlineCallWithReturns.kt");
    }

    @Test
    @TestMetadata("inlineFunInGenericClass.kt")
    public void testInlineFunInGenericClass() {
      runTest("compiler/testData/codegen/box/coroutines/inlineFunInGenericClass.kt");
    }

    @Test
    @TestMetadata("inlineGenericFunCalledFromSubclass.kt")
    public void testInlineGenericFunCalledFromSubclass() {
      runTest("compiler/testData/codegen/box/coroutines/inlineGenericFunCalledFromSubclass.kt");
    }

    @Test
    @TestMetadata("inlineSuspendFunction.kt")
    public void testInlineSuspendFunction() {
      runTest("compiler/testData/codegen/box/coroutines/inlineSuspendFunction.kt");
    }

    @Test
    @TestMetadata("inlineSuspendLambdaNonLocalReturn.kt")
    public void testInlineSuspendLambdaNonLocalReturn() {
      runTest("compiler/testData/codegen/box/coroutines/inlineSuspendLambdaNonLocalReturn.kt");
    }

    @Test
    @TestMetadata("inlineSuspendTypealias.kt")
    public void testInlineSuspendTypealias() {
      runTest("compiler/testData/codegen/box/coroutines/inlineSuspendTypealias.kt");
    }

    @Test
    @TestMetadata("inlinedTryCatchFinally.kt")
    public void testInlinedTryCatchFinally() {
      runTest("compiler/testData/codegen/box/coroutines/inlinedTryCatchFinally.kt");
    }

    @Test
    @TestMetadata("innerSuspensionCalls.kt")
    public void testInnerSuspensionCalls() {
      runTest("compiler/testData/codegen/box/coroutines/innerSuspensionCalls.kt");
    }

    @Test
    @TestMetadata("instanceOfContinuation.kt")
    public void testInstanceOfContinuation() {
      runTest("compiler/testData/codegen/box/coroutines/instanceOfContinuation.kt");
    }

    @Test
    @TestMetadata("iterateOverArray.kt")
    public void testIterateOverArray() {
      runTest("compiler/testData/codegen/box/coroutines/iterateOverArray.kt");
    }

    @Test
    @TestMetadata("kt12958.kt")
    public void testKt12958() {
      runTest("compiler/testData/codegen/box/coroutines/kt12958.kt");
    }

    @Test
    @TestMetadata("kt15016.kt")
    public void testKt15016() {
      runTest("compiler/testData/codegen/box/coroutines/kt15016.kt");
    }

    @Test
    @TestMetadata("kt15017.kt")
    public void testKt15017() {
      runTest("compiler/testData/codegen/box/coroutines/kt15017.kt");
    }

    @Test
    @TestMetadata("kt15930.kt")
    public void testKt15930() {
      runTest("compiler/testData/codegen/box/coroutines/kt15930.kt");
    }

    @Test
    @TestMetadata("kt21080.kt")
    public void testKt21080() {
      runTest("compiler/testData/codegen/box/coroutines/kt21080.kt");
    }

    @Test
    @TestMetadata("kt21605.kt")
    public void testKt21605() {
      runTest("compiler/testData/codegen/box/coroutines/kt21605.kt");
    }

    @Test
    @TestMetadata("kt24135.kt")
    public void testKt24135() {
      runTest("compiler/testData/codegen/box/coroutines/kt24135.kt");
    }

    @Test
    @TestMetadata("kt25912.kt")
    public void testKt25912() {
      runTest("compiler/testData/codegen/box/coroutines/kt25912.kt");
    }

    @Test
    @TestMetadata("kt28844.kt")
    public void testKt28844() {
      runTest("compiler/testData/codegen/box/coroutines/kt28844.kt");
    }

    @Test
    @TestMetadata("kt30858.kt")
    public void testKt30858() {
      runTest("compiler/testData/codegen/box/coroutines/kt30858.kt");
    }

    @Test
    @TestMetadata("kt31784.kt")
    public void testKt31784() {
      runTest("compiler/testData/codegen/box/coroutines/kt31784.kt");
    }

    @Test
    @TestMetadata("kt35967.kt")
    public void testKt35967() {
      runTest("compiler/testData/codegen/box/coroutines/kt35967.kt");
    }

    @Test
    @TestMetadata("kt42028.kt")
    public void testKt42028() {
      runTest("compiler/testData/codegen/box/coroutines/kt42028.kt");
    }

    @Test
    @TestMetadata("kt42554.kt")
    public void testKt42554() {
      runTest("compiler/testData/codegen/box/coroutines/kt42554.kt");
    }

    @Test
    @TestMetadata("kt44221.kt")
    public void testKt44221() {
      runTest("compiler/testData/codegen/box/coroutines/kt44221.kt");
    }

    @Test
    @TestMetadata("kt44710.kt")
    public void testKt44710() {
      runTest("compiler/testData/codegen/box/coroutines/kt44710.kt");
    }

    @Test
    @TestMetadata("kt44781.kt")
    public void testKt44781() {
      runTest("compiler/testData/codegen/box/coroutines/kt44781.kt");
    }

    @Test
    @TestMetadata("kt45377.kt")
    public void testKt45377() {
      runTest("compiler/testData/codegen/box/coroutines/kt45377.kt");
    }

    @Test
    @TestMetadata("kt46813.kt")
    public void testKt46813() {
      runTest("compiler/testData/codegen/box/coroutines/kt46813.kt");
    }

    @Test
    @TestMetadata("kt49168.kt")
    public void testKt49168() {
      runTest("compiler/testData/codegen/box/coroutines/kt49168.kt");
    }

    @Test
    @TestMetadata("kt49317.kt")
    public void testKt49317() {
      runTest("compiler/testData/codegen/box/coroutines/kt49317.kt");
    }

    @Test
    @TestMetadata("kt51530.kt")
    public void testKt51530() {
      runTest("compiler/testData/codegen/box/coroutines/kt51530.kt");
    }

    @Test
    @TestMetadata("kt51718.kt")
    public void testKt51718() {
      runTest("compiler/testData/codegen/box/coroutines/kt51718.kt");
    }

    @Test
    @TestMetadata("kt52311_nullOnLeft.kt")
    public void testKt52311_nullOnLeft() {
      runTest("compiler/testData/codegen/box/coroutines/kt52311_nullOnLeft.kt");
    }

    @Test
    @TestMetadata("kt52311_nullOnRight.kt")
    public void testKt52311_nullOnRight() {
      runTest("compiler/testData/codegen/box/coroutines/kt52311_nullOnRight.kt");
    }

    @Test
    @TestMetadata("kt52561.kt")
    public void testKt52561() {
      runTest("compiler/testData/codegen/box/coroutines/kt52561.kt");
    }

    @Test
    @TestMetadata("kt55494.kt")
    public void testKt55494() {
      runTest("compiler/testData/codegen/box/coroutines/kt55494.kt");
    }

    @Test
    @TestMetadata("kt56407.kt")
    public void testKt56407() {
      runTest("compiler/testData/codegen/box/coroutines/kt56407.kt");
    }

    @Test
    @TestMetadata("lastExpressionIsLoop.kt")
    public void testLastExpressionIsLoop() {
      runTest("compiler/testData/codegen/box/coroutines/lastExpressionIsLoop.kt");
    }

    @Test
    @TestMetadata("lastStatementInc.kt")
    public void testLastStatementInc() {
      runTest("compiler/testData/codegen/box/coroutines/lastStatementInc.kt");
    }

    @Test
    @TestMetadata("lastStementAssignment.kt")
    public void testLastStementAssignment() {
      runTest("compiler/testData/codegen/box/coroutines/lastStementAssignment.kt");
    }

    @Test
    @TestMetadata("lastUnitExpression.kt")
    public void testLastUnitExpression() {
      runTest("compiler/testData/codegen/box/coroutines/lastUnitExpression.kt");
    }

    @Test
    @TestMetadata("localCallableRef.kt")
    public void testLocalCallableRef() {
      runTest("compiler/testData/codegen/box/coroutines/localCallableRef.kt");
    }

    @Test
    @TestMetadata("localDelegate.kt")
    public void testLocalDelegate() {
      runTest("compiler/testData/codegen/box/coroutines/localDelegate.kt");
    }

    @Test
    @TestMetadata("longRangeInSuspendCall.kt")
    public void testLongRangeInSuspendCall() {
      runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendCall.kt");
    }

    @Test
    @TestMetadata("longRangeInSuspendFun.kt")
    public void testLongRangeInSuspendFun() {
      runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendFun.kt");
    }

    @Test
    @TestMetadata("mergeNullAndString.kt")
    public void testMergeNullAndString() {
      runTest("compiler/testData/codegen/box/coroutines/mergeNullAndString.kt");
    }

    @Test
    @TestMetadata("multipleInvokeCalls.kt")
    public void testMultipleInvokeCalls() {
      runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCalls.kt");
    }

    @Test
    @TestMetadata("multipleInvokeCallsInsideInlineLambda1.kt")
    public void testMultipleInvokeCallsInsideInlineLambda1() {
      runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda1.kt");
    }

    @Test
    @TestMetadata("multipleInvokeCallsInsideInlineLambda2.kt")
    public void testMultipleInvokeCallsInsideInlineLambda2() {
      runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda2.kt");
    }

    @Test
    @TestMetadata("multipleInvokeCallsInsideInlineLambda3.kt")
    public void testMultipleInvokeCallsInsideInlineLambda3() {
      runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda3.kt");
    }

    @Test
    @TestMetadata("nestedTryCatch.kt")
    public void testNestedTryCatch() {
      runTest("compiler/testData/codegen/box/coroutines/nestedTryCatch.kt");
    }

    @Test
    @TestMetadata("noSuspensionPoints.kt")
    public void testNoSuspensionPoints() {
      runTest("compiler/testData/codegen/box/coroutines/noSuspensionPoints.kt");
    }

    @Test
    @TestMetadata("nonLocalReturn.kt")
    public void testNonLocalReturn() {
      runTest("compiler/testData/codegen/box/coroutines/nonLocalReturn.kt");
    }

    @Test
    @TestMetadata("nonLocalReturnFromInlineLambda.kt")
    public void testNonLocalReturnFromInlineLambda() {
      runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambda.kt");
    }

    @Test
    @TestMetadata("nonLocalReturnFromInlineLambdaDeep.kt")
    public void testNonLocalReturnFromInlineLambdaDeep() {
      runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambdaDeep.kt");
    }

    @Test
    @TestMetadata("nullableSuspendFunctionType.kt")
    public void testNullableSuspendFunctionType() {
      runTest("compiler/testData/codegen/box/coroutines/nullableSuspendFunctionType.kt");
    }

    @Test
    @TestMetadata("overrideDefaultArgument.kt")
    public void testOverrideDefaultArgument() {
      runTest("compiler/testData/codegen/box/coroutines/overrideDefaultArgument.kt");
    }

    @Test
    @TestMetadata("recursiveSuspend.kt")
    public void testRecursiveSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/recursiveSuspend.kt");
    }

    @Test
    @TestMetadata("returnByLabel.kt")
    public void testReturnByLabel() {
      runTest("compiler/testData/codegen/box/coroutines/returnByLabel.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/coroutines/simple.kt");
    }

    @Test
    @TestMetadata("simpleException.kt")
    public void testSimpleException() {
      runTest("compiler/testData/codegen/box/coroutines/simpleException.kt");
    }

    @Test
    @TestMetadata("simpleSuspendCallableReference.kt")
    public void testSimpleSuspendCallableReference() {
      runTest("compiler/testData/codegen/box/coroutines/simpleSuspendCallableReference.kt");
    }

    @Test
    @TestMetadata("simpleWithDefaultValue.kt")
    public void testSimpleWithDefaultValue() {
      runTest("compiler/testData/codegen/box/coroutines/simpleWithDefaultValue.kt");
    }

    @Test
    @TestMetadata("simpleWithHandleResult.kt")
    public void testSimpleWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/simpleWithHandleResult.kt");
    }

    @Test
    @TestMetadata("statementLikeLastExpression.kt")
    public void testStatementLikeLastExpression() {
      runTest("compiler/testData/codegen/box/coroutines/statementLikeLastExpression.kt");
    }

    @Test
    @TestMetadata("stopAfter.kt")
    public void testStopAfter() {
      runTest("compiler/testData/codegen/box/coroutines/stopAfter.kt");
    }

    @Test
    @TestMetadata("suspendCallsInArguments.kt")
    public void testSuspendCallsInArguments() {
      runTest("compiler/testData/codegen/box/coroutines/suspendCallsInArguments.kt");
    }

    @Test
    @TestMetadata("suspendCoroutineFromStateMachine.kt")
    public void testSuspendCoroutineFromStateMachine() {
      runTest("compiler/testData/codegen/box/coroutines/suspendCoroutineFromStateMachine.kt");
    }

    @Test
    @TestMetadata("suspendDefaultImpl.kt")
    public void testSuspendDefaultImpl() {
      runTest("compiler/testData/codegen/box/coroutines/suspendDefaultImpl.kt");
    }

    @Test
    @TestMetadata("suspendDelegation.kt")
    public void testSuspendDelegation() {
      runTest("compiler/testData/codegen/box/coroutines/suspendDelegation.kt");
    }

    @Test
    @TestMetadata("suspendFromInlineLambda.kt")
    public void testSuspendFromInlineLambda() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFromInlineLambda.kt");
    }

    @Test
    @TestMetadata("suspendFunImportedFromObject.kt")
    public void testSuspendFunImportedFromObject() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunImportedFromObject.kt");
    }

    @Test
    @TestMetadata("suspendFunctionAsSupertype.kt")
    public void testSuspendFunctionAsSupertype() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsSupertype.kt");
    }

    @Test
    @TestMetadata("suspendFunctionAsSupertypeCall.kt")
    public void testSuspendFunctionAsSupertypeCall() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsSupertypeCall.kt");
    }

    @Test
    @TestMetadata("suspendFunctionMethodReference.kt")
    public void testSuspendFunctionMethodReference() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionMethodReference.kt");
    }

    @Test
    @TestMetadata("suspendInCycle.kt")
    public void testSuspendInCycle() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInCycle.kt");
    }

    @Test
    @TestMetadata("suspendInTheMiddleOfObjectConstruction.kt")
    public void testSuspendInTheMiddleOfObjectConstruction() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstruction.kt");
    }

    @Test
    @TestMetadata("suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt")
    public void testSuspendInTheMiddleOfObjectConstructionEvaluationOrder() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt");
    }

    @Test
    @TestMetadata("suspendInTheMiddleOfObjectConstructionWithJumpOut.kt")
    public void testSuspendInTheMiddleOfObjectConstructionWithJumpOut() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionWithJumpOut.kt");
    }

    @Test
    @TestMetadata("suspendInlineReference.kt")
    public void testSuspendInlineReference() {
      runTest("compiler/testData/codegen/box/coroutines/suspendInlineReference.kt");
    }

    @Test
    @TestMetadata("suspendLambdaInInterface.kt")
    public void testSuspendLambdaInInterface() {
      runTest("compiler/testData/codegen/box/coroutines/suspendLambdaInInterface.kt");
    }

    @Test
    @TestMetadata("suspendLambdaWithArgumentRearrangement.kt")
    public void testSuspendLambdaWithArgumentRearrangement() {
      runTest("compiler/testData/codegen/box/coroutines/suspendLambdaWithArgumentRearrangement.kt");
    }

    @Test
    @TestMetadata("suspensionInsideSafeCall.kt")
    public void testSuspensionInsideSafeCall() {
      runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCall.kt");
    }

    @Test
    @TestMetadata("suspensionInsideSafeCallWithElvis.kt")
    public void testSuspensionInsideSafeCallWithElvis() {
      runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCallWithElvis.kt");
    }

    @Test
    @TestMetadata("tailCallToNothing.kt")
    public void testTailCallToNothing() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallToNothing.kt");
    }

    @Test
    @TestMetadata("tryCatchFinallyWithHandleResult.kt")
    public void testTryCatchFinallyWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/tryCatchFinallyWithHandleResult.kt");
    }

    @Test
    @TestMetadata("tryCatchWithHandleResult.kt")
    public void testTryCatchWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/tryCatchWithHandleResult.kt");
    }

    @Test
    @TestMetadata("tryFinallyInsideInlineLambda.kt")
    public void testTryFinallyInsideInlineLambda() {
      runTest("compiler/testData/codegen/box/coroutines/tryFinallyInsideInlineLambda.kt");
    }

    @Test
    @TestMetadata("tryFinallyWithHandleResult.kt")
    public void testTryFinallyWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/tryFinallyWithHandleResult.kt");
    }

    @Test
    @TestMetadata("varCaptuedInCoroutineIntrinsic.kt")
    public void testVarCaptuedInCoroutineIntrinsic() {
      runTest("compiler/testData/codegen/box/coroutines/varCaptuedInCoroutineIntrinsic.kt");
    }

    @Test
    @TestMetadata("varValueConflictsWithTable.kt")
    public void testVarValueConflictsWithTable() {
      runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTable.kt");
    }

    @Test
    @TestMetadata("varValueConflictsWithTableSameSort.kt")
    public void testVarValueConflictsWithTableSameSort() {
      runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTableSameSort.kt");
    }

    @Test
    @TestMetadata("varargCallFromSuspend.kt")
    public void testVarargCallFromSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/varargCallFromSuspend.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/bridges")
    @TestDataPath("$PROJECT_ROOT")
    public class Bridges {
      @Test
      public void testAllFilesPresentInBridges() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/bridges"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("interfaceGenericDefault.kt")
      public void testInterfaceGenericDefault() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/interfaceGenericDefault.kt");
      }

      @Test
      @TestMetadata("interfaceSpecialization.kt")
      public void testInterfaceSpecialization() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/interfaceSpecialization.kt");
      }

      @Test
      @TestMetadata("lambdaWithLongReceiver.kt")
      public void testLambdaWithLongReceiver() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/lambdaWithLongReceiver.kt");
      }

      @Test
      @TestMetadata("lambdaWithMultipleParameters.kt")
      public void testLambdaWithMultipleParameters() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/lambdaWithMultipleParameters.kt");
      }

      @Test
      @TestMetadata("mapSuspendAbstractClear.kt")
      public void testMapSuspendAbstractClear() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/mapSuspendAbstractClear.kt");
      }

      @Test
      @TestMetadata("mapSuspendClear.kt")
      public void testMapSuspendClear() {
        runTest("compiler/testData/codegen/box/coroutines/bridges/mapSuspendClear.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/controlFlow")
    @TestDataPath("$PROJECT_ROOT")
    public class ControlFlow {
      @Test
      public void testAllFilesPresentInControlFlow() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/controlFlow"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("breakFinally.kt")
      public void testBreakFinally() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakFinally.kt");
      }

      @Test
      @TestMetadata("breakStatement.kt")
      public void testBreakStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakStatement.kt");
      }

      @Test
      @TestMetadata("complexChainSuspend.kt")
      public void testComplexChainSuspend() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/complexChainSuspend.kt");
      }

      @Test
      @TestMetadata("doWhileStatement.kt")
      public void testDoWhileStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/doWhileStatement.kt");
      }

      @Test
      @TestMetadata("doWhileWithInline.kt")
      public void testDoWhileWithInline() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/doWhileWithInline.kt");
      }

      @Test
      @TestMetadata("doubleBreak.kt")
      public void testDoubleBreak() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/doubleBreak.kt");
      }

      @Test
      @TestMetadata("finallyCatch.kt")
      public void testFinallyCatch() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/finallyCatch.kt");
      }

      @Test
      @TestMetadata("forContinue.kt")
      public void testForContinue() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/forContinue.kt");
      }

      @Test
      @TestMetadata("forStatement.kt")
      public void testForStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/forStatement.kt");
      }

      @Test
      @TestMetadata("forWithStep.kt")
      public void testForWithStep() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/forWithStep.kt");
      }

      @Test
      @TestMetadata("ifStatement.kt")
      public void testIfStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/ifStatement.kt");
      }

      @Test
      @TestMetadata("kt22694_1_3.kt")
      public void testKt22694_1_3() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/kt22694_1_3.kt");
      }

      @Test
      @TestMetadata("labeledWhile.kt")
      public void testLabeledWhile() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/labeledWhile.kt");
      }

      @Test
      @TestMetadata("multipleCatchBlocksSuspend.kt")
      public void testMultipleCatchBlocksSuspend() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/multipleCatchBlocksSuspend.kt");
      }

      @Test
      @TestMetadata("returnFromFinally.kt")
      public void testReturnFromFinally() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnFromFinally.kt");
      }

      @Test
      @TestMetadata("returnWithFinally.kt")
      public void testReturnWithFinally() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnWithFinally.kt");
      }

      @Test
      @TestMetadata("suspendInStringTemplate.kt")
      public void testSuspendInStringTemplate() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/suspendInStringTemplate.kt");
      }

      @Test
      @TestMetadata("switchLikeWhen.kt")
      public void testSwitchLikeWhen() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/switchLikeWhen.kt");
      }

      @Test
      @TestMetadata("throwFromCatch.kt")
      public void testThrowFromCatch() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromCatch.kt");
      }

      @Test
      @TestMetadata("throwFromFinally.kt")
      public void testThrowFromFinally() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromFinally.kt");
      }

      @Test
      @TestMetadata("throwInTryWithHandleResult.kt")
      public void testThrowInTryWithHandleResult() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwInTryWithHandleResult.kt");
      }

      @Test
      @TestMetadata("whenWithSuspensions.kt")
      public void testWhenWithSuspensions() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/whenWithSuspensions.kt");
      }

      @Test
      @TestMetadata("whileStatement.kt")
      public void testWhileStatement() {
        runTest("compiler/testData/codegen/box/coroutines/controlFlow/whileStatement.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/debug")
    @TestDataPath("$PROJECT_ROOT")
    public class Debug {
      @Test
      public void testAllFilesPresentInDebug() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/debug"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection")
    @TestDataPath("$PROJECT_ROOT")
    public class FeatureIntersection {
      @Test
      public void testAllFilesPresentInFeatureIntersection() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("breakWithNonEmptyStack.kt")
      public void testBreakWithNonEmptyStack() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/breakWithNonEmptyStack.kt");
      }

      @Test
      @TestMetadata("defaultExpect.kt")
      public void testDefaultExpect() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/defaultExpect.kt");
      }

      @Test
      @TestMetadata("delegate.kt")
      public void testDelegate() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/delegate.kt");
      }

      @Test
      @TestMetadata("destructuringInLambdas.kt")
      public void testDestructuringInLambdas() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/destructuringInLambdas.kt");
      }

      @Test
      @TestMetadata("funInterface.kt")
      public void testFunInterface() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface.kt");
      }

      @Test
      @TestMetadata("inlineSuspendFinally.kt")
      public void testInlineSuspendFinally() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/inlineSuspendFinally.kt");
      }

      @Test
      @TestMetadata("interfaceMethodWithBody.kt")
      public void testInterfaceMethodWithBody() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/interfaceMethodWithBody.kt");
      }

      @Test
      @TestMetadata("interfaceMethodWithBodyGeneric.kt")
      public void testInterfaceMethodWithBodyGeneric() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/interfaceMethodWithBodyGeneric.kt");
      }

      @Test
      @TestMetadata("overrideInInlineClass.kt")
      public void testOverrideInInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/overrideInInlineClass.kt");
      }

      @Test
      @TestMetadata("overrideInInnerClass.kt")
      public void testOverrideInInnerClass() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/overrideInInnerClass.kt");
      }

      @Test
      @TestMetadata("safeCallOnTwoReceivers.kt")
      public void testSafeCallOnTwoReceivers() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceivers.kt");
      }

      @Test
      @TestMetadata("safeCallOnTwoReceiversLong.kt")
      public void testSafeCallOnTwoReceiversLong() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceiversLong.kt");
      }

      @Test
      @TestMetadata("suspendDestructuringInLambdas.kt")
      public void testSuspendDestructuringInLambdas() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendDestructuringInLambdas.kt");
      }

      @Test
      @TestMetadata("suspendFunctionAsSupertypeIsCheckWithArity.kt")
      public void testSuspendFunctionAsSupertypeIsCheckWithArity() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionAsSupertypeIsCheckWithArity.kt");
      }

      @Test
      @TestMetadata("suspendFunctionIsAs.kt")
      public void testSuspendFunctionIsAs() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionIsAs.kt");
      }

      @Test
      @TestMetadata("suspendInlineSuspendFinally.kt")
      public void testSuspendInlineSuspendFinally() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendInlineSuspendFinally.kt");
      }

      @Test
      @TestMetadata("suspendOperatorPlus.kt")
      public void testSuspendOperatorPlus() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlus.kt");
      }

      @Test
      @TestMetadata("suspendOperatorPlusAssign.kt")
      public void testSuspendOperatorPlusAssign() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusAssign.kt");
      }

      @Test
      @TestMetadata("suspendOperatorPlusCallFromLambda.kt")
      public void testSuspendOperatorPlusCallFromLambda() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusCallFromLambda.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReference {
        @Test
        public void testAllFilesPresentInCallableReference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("bigArity.kt")
        public void testBigArity() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bigArity.kt");
        }

        @Test
        @TestMetadata("lambdaParameterUsed.kt")
        public void testLambdaParameterUsed() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/lambdaParameterUsed.kt");
        }

        @Test
        @TestMetadata("longArgs.kt")
        public void testLongArgs() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/longArgs.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound")
        @TestDataPath("$PROJECT_ROOT")
        public class Bound {
          @Test
          public void testAllFilesPresentInBound() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyLHS.kt")
          public void testEmptyLHS() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound/emptyLHS.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function")
        @TestDataPath("$PROJECT_ROOT")
        public class Function {
          @Test
          @TestMetadata("adapted.kt")
          public void testAdapted() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/adapted.kt");
          }

          @Test
          public void testAllFilesPresentInFunction() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("genericCallableReferencesWithNullableTypes.kt")
          public void testGenericCallableReferencesWithNullableTypes() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/genericCallableReferencesWithNullableTypes.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local")
          @TestDataPath("$PROJECT_ROOT")
          public class Local {
            @Test
            public void testAllFilesPresentInLocal() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("equalsHashCode.kt")
            public void testEqualsHashCode() {
              runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local/equalsHashCode.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface")
      @TestDataPath("$PROJECT_ROOT")
      public class FunInterface {
        @Test
        public void testAllFilesPresentInFunInterface() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("kt47549.kt")
        public void testKt47549() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt47549.kt");
        }

        @Test
        @TestMetadata("kt47549_1.kt")
        public void testKt47549_1() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt47549_1.kt");
        }

        @Test
        @TestMetadata("kt49294.kt")
        public void testKt49294() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt49294.kt");
        }

        @Test
        @TestMetadata("kt50950.kt")
        public void testKt50950() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt50950.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmDefault {
        @Test
        public void testAllFilesPresentInJvmDefault() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007")
        @TestDataPath("$PROJECT_ROOT")
        public class Kt46007 {
          @Test
          public void testAllFilesPresentInKt46007() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec")
      @TestDataPath("$PROJECT_ROOT")
      public class Tailrec {
        @Test
        public void testAllFilesPresentInTailrec() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("controlFlowIf.kt")
        public void testControlFlowIf() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowIf.kt");
        }

        @Test
        @TestMetadata("controlFlowWhen.kt")
        public void testControlFlowWhen() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowWhen.kt");
        }

        @Test
        @TestMetadata("extention.kt")
        public void testExtention() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/extention.kt");
        }

        @Test
        @TestMetadata("infixCall.kt")
        public void testInfixCall() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixCall.kt");
        }

        @Test
        @TestMetadata("infixRecursiveCall.kt")
        public void testInfixRecursiveCall() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixRecursiveCall.kt");
        }

        @Test
        @TestMetadata("kt38920_localTailrec.kt")
        public void testKt38920_localTailrec() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/kt38920_localTailrec.kt");
        }

        @Test
        @TestMetadata("realIteratorFoldl.kt")
        public void testRealIteratorFoldl() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realIteratorFoldl.kt");
        }

        @Test
        @TestMetadata("realStringEscape.kt")
        public void testRealStringEscape() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringEscape.kt");
        }

        @Test
        @TestMetadata("realStringRepeat.kt")
        public void testRealStringRepeat() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringRepeat.kt");
        }

        @Test
        @TestMetadata("returnInParentheses.kt")
        public void testReturnInParentheses() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/returnInParentheses.kt");
        }

        @Test
        @TestMetadata("sum.kt")
        public void testSum() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/sum.kt");
        }

        @Test
        @TestMetadata("tailCallInBlockInParentheses.kt")
        public void testTailCallInBlockInParentheses() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInBlockInParentheses.kt");
        }

        @Test
        @TestMetadata("tailCallInParentheses.kt")
        public void testTailCallInParentheses() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInParentheses.kt");
        }

        @Test
        @TestMetadata("whenWithIs.kt")
        public void testWhenWithIs() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/whenWithIs.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
      @Test
      public void testAllFilesPresentInInlineClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("genericParameterResult.kt")
      public void testGenericParameterResult() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/genericParameterResult.kt");
      }

      @Test
      @TestMetadata("kt47129.kt")
      public void testKt47129() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/kt47129.kt");
      }

      @Test
      @TestMetadata("nonLocalReturn.kt")
      public void testNonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/nonLocalReturn.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/direct")
      @TestDataPath("$PROJECT_ROOT")
      public class Direct {
        @Test
        public void testAllFilesPresentInDirect() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/direct"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
        public void testBoxReturnValueOfSuspendFunctionReference() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxReturnValueOfSuspendFunctionReference.kt");
        }

        @Test
        @TestMetadata("boxReturnValueOfSuspendLambda.kt")
        public void testBoxReturnValueOfSuspendLambda() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxReturnValueOfSuspendLambda.kt");
        }

        @Test
        @TestMetadata("boxTypeParameterOfSuperType.kt")
        public void testBoxTypeParameterOfSuperType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxTypeParameterOfSuperType.kt");
        }

        @Test
        @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
        public void testBoxTypeParameterOfSuperTypeResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxTypeParameterOfSuperTypeResult.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine.kt")
        public void testBoxUnboxInsideCoroutine() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
        public void testBoxUnboxInsideCoroutine_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Any.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
        public void testBoxUnboxInsideCoroutine_InlineAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_InlineAny.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
        public void testBoxUnboxInsideCoroutine_InlineInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_InlineInt.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
        public void testBoxUnboxInsideCoroutine_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Int.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
        public void testBoxUnboxInsideCoroutine_Long() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Long.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
        public void testBoxUnboxInsideCoroutine_NAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_NAny.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
        public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_nonLocalReturn.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
        public void testBoxUnboxInsideCoroutine_suspendFunType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_suspendFunType.kt");
        }

        @Test
        @TestMetadata("bridgeGenerationCrossinline.kt")
        public void testBridgeGenerationCrossinline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/bridgeGenerationCrossinline.kt");
        }

        @Test
        @TestMetadata("bridgeGenerationNonInline.kt")
        public void testBridgeGenerationNonInline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/bridgeGenerationNonInline.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun.kt")
        public void testCovariantOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
        public void testCovariantOverrideSuspendFunSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunSameJvmType.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun_Any.kt")
        public void testCovariantOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun_Int.kt")
        public void testCovariantOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("createMangling.kt")
        public void testCreateMangling() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/createMangling.kt");
        }

        @Test
        @TestMetadata("createOverride.kt")
        public void testCreateOverride() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/createOverride.kt");
        }

        @Test
        @TestMetadata("defaultStub.kt")
        public void testDefaultStub() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/defaultStub.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun.kt")
        public void testGenericOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Any.kt")
        public void testGenericOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
        public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Int.kt")
        public void testGenericOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
        public void testGenericOverrideSuspendFun_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableAny.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableAny_null.kt")
        public void testGenericOverrideSuspendFun_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableAny_null.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
        public void testGenericOverrideSuspendFun_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableInt.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableInt_null.kt")
        public void testGenericOverrideSuspendFun_NullableInt_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableInt_null.kt");
        }

        @Test
        @TestMetadata("interfaceDelegateWithInlineClass.kt")
        public void testInterfaceDelegateWithInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/interfaceDelegateWithInlineClass.kt");
        }

        @Test
        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/invokeOperator.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun.kt")
        public void testOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any.kt")
        public void testOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any_itf.kt")
        public void testOverrideSuspendFun_Any_itf() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any_itf.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any_this.kt")
        public void testOverrideSuspendFun_Any_this() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any_this.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Int.kt")
        public void testOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("returnResult.kt")
        public void testReturnResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/returnResult.kt");
        }

        @Test
        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/syntheticAccessor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/resume")
      @TestDataPath("$PROJECT_ROOT")
      public class Resume {
        @Test
        public void testAllFilesPresentInResume() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/resume"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
        public void testBoxReturnValueOfSuspendFunctionReference() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxReturnValueOfSuspendFunctionReference.kt");
        }

        @Test
        @TestMetadata("boxReturnValueOfSuspendLambda.kt")
        public void testBoxReturnValueOfSuspendLambda() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxReturnValueOfSuspendLambda.kt");
        }

        @Test
        @TestMetadata("boxTypeParameterOfSuperType.kt")
        public void testBoxTypeParameterOfSuperType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxTypeParameterOfSuperType.kt");
        }

        @Test
        @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
        public void testBoxTypeParameterOfSuperTypeResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxTypeParameterOfSuperTypeResult.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine.kt")
        public void testBoxUnboxInsideCoroutine() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
        public void testBoxUnboxInsideCoroutine_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Any.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
        public void testBoxUnboxInsideCoroutine_InlineAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_InlineAny.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
        public void testBoxUnboxInsideCoroutine_InlineInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_InlineInt.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
        public void testBoxUnboxInsideCoroutine_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Int.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
        public void testBoxUnboxInsideCoroutine_Long() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Long.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
        public void testBoxUnboxInsideCoroutine_NAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_NAny.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
        public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_nonLocalReturn.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
        public void testBoxUnboxInsideCoroutine_suspendFunType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_suspendFunType.kt");
        }

        @Test
        @TestMetadata("bridgeGenerationCrossinline.kt")
        public void testBridgeGenerationCrossinline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/bridgeGenerationCrossinline.kt");
        }

        @Test
        @TestMetadata("bridgeGenerationNonInline.kt")
        public void testBridgeGenerationNonInline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/bridgeGenerationNonInline.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun.kt")
        public void testCovariantOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
        public void testCovariantOverrideSuspendFunSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunSameJvmType.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun_Any.kt")
        public void testCovariantOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun_Int.kt")
        public void testCovariantOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("createMangling.kt")
        public void testCreateMangling() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/createMangling.kt");
        }

        @Test
        @TestMetadata("createOverride.kt")
        public void testCreateOverride() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/createOverride.kt");
        }

        @Test
        @TestMetadata("defaultStub.kt")
        public void testDefaultStub() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/defaultStub.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun.kt")
        public void testGenericOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Any.kt")
        public void testGenericOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
        public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Int.kt")
        public void testGenericOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
        public void testGenericOverrideSuspendFun_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableAny.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableAny_null.kt")
        public void testGenericOverrideSuspendFun_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableAny_null.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
        public void testGenericOverrideSuspendFun_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableInt.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableInt_null.kt")
        public void testGenericOverrideSuspendFun_NullableInt_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableInt_null.kt");
        }

        @Test
        @TestMetadata("interfaceDelegateWithInlineClass.kt")
        public void testInterfaceDelegateWithInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/interfaceDelegateWithInlineClass.kt");
        }

        @Test
        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/invokeOperator.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun.kt")
        public void testOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any.kt")
        public void testOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any_itf.kt")
        public void testOverrideSuspendFun_Any_itf() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any_itf.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any_this.kt")
        public void testOverrideSuspendFun_Any_this() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any_this.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Int.kt")
        public void testOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("returnResult.kt")
        public void testReturnResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/returnResult.kt");
        }

        @Test
        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/syntheticAccessor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException")
      @TestDataPath("$PROJECT_ROOT")
      public class ResumeWithException {
        @Test
        public void testAllFilesPresentInResumeWithException() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
        public void testBoxReturnValueOfSuspendFunctionReference() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxReturnValueOfSuspendFunctionReference.kt");
        }

        @Test
        @TestMetadata("boxReturnValueOfSuspendLambda.kt")
        public void testBoxReturnValueOfSuspendLambda() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxReturnValueOfSuspendLambda.kt");
        }

        @Test
        @TestMetadata("boxTypeParameterOfSuperType.kt")
        public void testBoxTypeParameterOfSuperType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxTypeParameterOfSuperType.kt");
        }

        @Test
        @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
        public void testBoxTypeParameterOfSuperTypeResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxTypeParameterOfSuperTypeResult.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine.kt")
        public void testBoxUnboxInsideCoroutine() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
        public void testBoxUnboxInsideCoroutine_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Any.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
        public void testBoxUnboxInsideCoroutine_InlineAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_InlineAny.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
        public void testBoxUnboxInsideCoroutine_InlineInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_InlineInt.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
        public void testBoxUnboxInsideCoroutine_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Int.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
        public void testBoxUnboxInsideCoroutine_Long() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Long.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
        public void testBoxUnboxInsideCoroutine_NAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_NAny.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
        public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_nonLocalReturn.kt");
        }

        @Test
        @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
        public void testBoxUnboxInsideCoroutine_suspendFunType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_suspendFunType.kt");
        }

        @Test
        @TestMetadata("bridgeGenerationCrossinline.kt")
        public void testBridgeGenerationCrossinline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/bridgeGenerationCrossinline.kt");
        }

        @Test
        @TestMetadata("bridgeGenerationNonInline.kt")
        public void testBridgeGenerationNonInline() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/bridgeGenerationNonInline.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun.kt")
        public void testCovariantOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
        public void testCovariantOverrideSuspendFunSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunSameJvmType.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
        public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun_Any.kt")
        public void testCovariantOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("covariantOverrideSuspendFun_Int.kt")
        public void testCovariantOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("createMangling.kt")
        public void testCreateMangling() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/createMangling.kt");
        }

        @Test
        @TestMetadata("createOverride.kt")
        public void testCreateOverride() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/createOverride.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun.kt")
        public void testGenericOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Any.kt")
        public void testGenericOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
        public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_Int.kt")
        public void testGenericOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
        public void testGenericOverrideSuspendFun_NullableAny() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_NullableAny.kt");
        }

        @Test
        @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
        public void testGenericOverrideSuspendFun_NullableInt() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_NullableInt.kt");
        }

        @Test
        @TestMetadata("interfaceDelegateWithInlineClass.kt")
        public void testInterfaceDelegateWithInlineClass() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/interfaceDelegateWithInlineClass.kt");
        }

        @Test
        @TestMetadata("invokeOperator.kt")
        public void testInvokeOperator() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/invokeOperator.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun.kt")
        public void testOverrideSuspendFun() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any.kt")
        public void testOverrideSuspendFun_Any() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any_itf.kt")
        public void testOverrideSuspendFun_Any_itf() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any_itf.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Any_this.kt")
        public void testOverrideSuspendFun_Any_this() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any_this.kt");
        }

        @Test
        @TestMetadata("overrideSuspendFun_Int.kt")
        public void testOverrideSuspendFun_Int() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Int.kt");
        }

        @Test
        @TestMetadata("returnResult.kt")
        public void testReturnResult() {
          runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/returnResult.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/intLikeVarSpilling")
    @TestDataPath("$PROJECT_ROOT")
    public class IntLikeVarSpilling {
      @Test
      public void testAllFilesPresentInIntLikeVarSpilling() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intLikeVarSpilling"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("complicatedMerge.kt")
      public void testComplicatedMerge() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/complicatedMerge.kt");
      }

      @Test
      @TestMetadata("i2bResult.kt")
      public void testI2bResult() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/i2bResult.kt");
      }

      @Test
      @TestMetadata("listThrowablePairInOneSlot.kt")
      public void testListThrowablePairInOneSlot() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/listThrowablePairInOneSlot.kt");
      }

      @Test
      @TestMetadata("loadFromBooleanArray.kt")
      public void testLoadFromBooleanArray() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromBooleanArray.kt");
      }

      @Test
      @TestMetadata("loadFromByteArray.kt")
      public void testLoadFromByteArray() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromByteArray.kt");
      }

      @Test
      @TestMetadata("noVariableInTable.kt")
      public void testNoVariableInTable() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/noVariableInTable.kt");
      }

      @Test
      @TestMetadata("sameIconst1ManyVars.kt")
      public void testSameIconst1ManyVars() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/sameIconst1ManyVars.kt");
      }

      @Test
      @TestMetadata("unusedCatchVar.kt")
      public void testUnusedCatchVar() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/unusedCatchVar.kt");
      }

      @Test
      @TestMetadata("usedInMethodCall.kt")
      public void testUsedInMethodCall() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInMethodCall.kt");
      }

      @Test
      @TestMetadata("usedInVarStore.kt")
      public void testUsedInVarStore() {
        runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInVarStore.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/intrinsicSemantics")
    @TestDataPath("$PROJECT_ROOT")
    public class IntrinsicSemantics {
      @Test
      public void testAllFilesPresentInIntrinsicSemantics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intrinsicSemantics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("coroutineContext.kt")
      public void testCoroutineContext() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContext.kt");
      }

      @Test
      @TestMetadata("coroutineContextReceiver.kt")
      public void testCoroutineContextReceiver() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiver.kt");
      }

      @Test
      @TestMetadata("coroutineContextReceiverNotIntrinsic.kt")
      public void testCoroutineContextReceiverNotIntrinsic() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiverNotIntrinsic.kt");
      }

      @Test
      @TestMetadata("intercepted.kt")
      public void testIntercepted() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/intercepted.kt");
      }

      @Test
      @TestMetadata("releaseIntercepted.kt")
      public void testReleaseIntercepted() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/releaseIntercepted.kt");
      }

      @Test
      @TestMetadata("resultExceptionOrNullInLambda.kt")
      public void testResultExceptionOrNullInLambda() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/resultExceptionOrNullInLambda.kt");
      }

      @Test
      @TestMetadata("startCoroutine.kt")
      public void testStartCoroutine() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutine.kt");
      }

      @Test
      @TestMetadata("startCoroutineUninterceptedOrReturn.kt")
      public void testStartCoroutineUninterceptedOrReturn() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturn.kt");
      }

      @Test
      @TestMetadata("startCoroutineUninterceptedOrReturnInterception.kt")
      public void testStartCoroutineUninterceptedOrReturnInterception() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturnInterception.kt");
      }

      @Test
      @TestMetadata("suspendCoroutineUninterceptedOrReturn.kt")
      public void testSuspendCoroutineUninterceptedOrReturn() {
        runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/suspendCoroutineUninterceptedOrReturn.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    public class JavaInterop {
      @Test
      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/javaInterop"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions")
    @TestDataPath("$PROJECT_ROOT")
    public class LocalFunctions {
      @Test
      public void testAllFilesPresentInLocalFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions/named")
      @TestDataPath("$PROJECT_ROOT")
      public class Named {
        @Test
        public void testAllFilesPresentInNamed() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions/named"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("callTopLevelFromLocal.kt")
        public void testCallTopLevelFromLocal() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/callTopLevelFromLocal.kt");
        }

        @Test
        @TestMetadata("capturedParameters.kt")
        public void testCapturedParameters() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedParameters.kt");
        }

        @Test
        @TestMetadata("capturedVariables.kt")
        public void testCapturedVariables() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedVariables.kt");
        }

        @Test
        @TestMetadata("defaultArgument.kt")
        public void testDefaultArgument() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/defaultArgument.kt");
        }

        @Test
        @TestMetadata("extension.kt")
        public void testExtension() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/extension.kt");
        }

        @Test
        @TestMetadata("infix.kt")
        public void testInfix() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/infix.kt");
        }

        @Test
        @TestMetadata("insideLambda.kt")
        public void testInsideLambda() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/insideLambda.kt");
        }

        @Test
        @TestMetadata("nestedLocals.kt")
        public void testNestedLocals() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/nestedLocals.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simple.kt");
        }

        @Test
        @TestMetadata("simpleSuspensionPoint.kt")
        public void testSimpleSuspensionPoint() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simpleSuspensionPoint.kt");
        }

        @Test
        @TestMetadata("stateMachine.kt")
        public void testStateMachine() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/stateMachine.kt");
        }

        @Test
        @TestMetadata("withArguments.kt")
        public void testWithArguments() {
          runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/withArguments.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/multiModule")
    @TestDataPath("$PROJECT_ROOT")
    public class MultiModule {
      @Test
      public void testAllFilesPresentInMultiModule() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/multiModule"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("inheritFromAnotherModule.kt")
      public void testInheritFromAnotherModule() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inheritFromAnotherModule.kt");
      }

      @Test
      @TestMetadata("inlineCrossModule.kt")
      public void testInlineCrossModule() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineCrossModule.kt");
      }

      @Test
      @TestMetadata("inlineFunctionWithOptionalParam.kt")
      public void testInlineFunctionWithOptionalParam() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineFunctionWithOptionalParam.kt");
      }

      @Test
      @TestMetadata("inlineMultiModule.kt")
      public void testInlineMultiModule() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModule.kt");
      }

      @Test
      @TestMetadata("inlineMultiModuleOverride.kt")
      public void testInlineMultiModuleOverride() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleOverride.kt");
      }

      @Test
      @TestMetadata("inlineMultiModuleWithController.kt")
      public void testInlineMultiModuleWithController() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithController.kt");
      }

      @Test
      @TestMetadata("inlineMultiModuleWithInnerInlining.kt")
      public void testInlineMultiModuleWithInnerInlining() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithInnerInlining.kt");
      }

      @Test
      @TestMetadata("inlineTailCall.kt")
      public void testInlineTailCall() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineTailCall.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/multiModule/simple.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/redundantLocalsElimination")
    @TestDataPath("$PROJECT_ROOT")
    public class RedundantLocalsElimination {
      @Test
      public void testAllFilesPresentInRedundantLocalsElimination() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/redundantLocalsElimination"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("ktor_receivedMessage.kt")
      public void testKtor_receivedMessage() {
        runTest("compiler/testData/codegen/box/coroutines/redundantLocalsElimination/ktor_receivedMessage.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/reflect")
    @TestDataPath("$PROJECT_ROOT")
    public class Reflect {
      @Test
      public void testAllFilesPresentInReflect() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/reflect"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/stackUnwinding")
    @TestDataPath("$PROJECT_ROOT")
    public class StackUnwinding {
      @Test
      public void testAllFilesPresentInStackUnwinding() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/stackUnwinding"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("exception.kt")
      public void testException() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/exception.kt");
      }

      @Test
      @TestMetadata("inlineSuspendFunction.kt")
      public void testInlineSuspendFunction() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/inlineSuspendFunction.kt");
      }

      @Test
      @TestMetadata("rethrowInFinally.kt")
      public void testRethrowInFinally() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/rethrowInFinally.kt");
      }

      @Test
      @TestMetadata("rethrowInFinallyWithSuspension.kt")
      public void testRethrowInFinallyWithSuspension() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/rethrowInFinallyWithSuspension.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/simple.kt");
      }

      @Test
      @TestMetadata("suspendInCycle.kt")
      public void testSuspendInCycle() {
        runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/suspendInCycle.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/suspendConversion")
    @TestDataPath("$PROJECT_ROOT")
    public class SuspendConversion {
      @Test
      public void testAllFilesPresentInSuspendConversion() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendConversion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("intersectionTypeToSubtypeConversion.kt")
      public void testIntersectionTypeToSubtypeConversion() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/intersectionTypeToSubtypeConversion.kt");
      }

      @Test
      @TestMetadata("onArgument.kt")
      public void testOnArgument() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onArgument.kt");
      }

      @Test
      @TestMetadata("onInlineArgument.kt")
      public void testOnInlineArgument() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onInlineArgument.kt");
      }

      @Test
      @TestMetadata("subtypeOfFunctionalTypeToSuspendConversion.kt")
      public void testSubtypeOfFunctionalTypeToSuspendConversion() {
        runTest("compiler/testData/codegen/box/coroutines/suspendConversion/subtypeOfFunctionalTypeToSuspendConversion.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine")
    @TestDataPath("$PROJECT_ROOT")
    public class SuspendFunctionAsCoroutine {
      @Test
      public void testAllFilesPresentInSuspendFunctionAsCoroutine() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("dispatchResume.kt")
      public void testDispatchResume() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/dispatchResume.kt");
      }

      @Test
      @TestMetadata("handleException.kt")
      public void testHandleException() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/handleException.kt");
      }

      @Test
      @TestMetadata("ifExpressionInsideCoroutine_1_3.kt")
      public void testIfExpressionInsideCoroutine_1_3() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/ifExpressionInsideCoroutine_1_3.kt");
      }

      @Test
      @TestMetadata("inline.kt")
      public void testInline() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inline.kt");
      }

      @Test
      @TestMetadata("inlineTwoReceivers.kt")
      public void testInlineTwoReceivers() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inlineTwoReceivers.kt");
      }

      @Test
      @TestMetadata("member.kt")
      public void testMember() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/member.kt");
      }

      @Test
      @TestMetadata("noinlineTwoReceivers.kt")
      public void testNoinlineTwoReceivers() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/noinlineTwoReceivers.kt");
      }

      @Test
      @TestMetadata("operators.kt")
      public void testOperators() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/operators.kt");
      }

      @Test
      @TestMetadata("privateFunctions.kt")
      public void testPrivateFunctions() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateFunctions.kt");
      }

      @Test
      @TestMetadata("privateInFile.kt")
      public void testPrivateInFile() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateInFile.kt");
      }

      @Test
      @TestMetadata("returnNoSuspend.kt")
      public void testReturnNoSuspend() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/returnNoSuspend.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/simple.kt");
      }

      @Test
      @TestMetadata("superCall.kt")
      public void testSuperCall() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCall.kt");
      }

      @Test
      @TestMetadata("superCallAbstractClass.kt")
      public void testSuperCallAbstractClass() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallAbstractClass.kt");
      }

      @Test
      @TestMetadata("superCallInterface.kt")
      public void testSuperCallInterface() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallInterface.kt");
      }

      @Test
      @TestMetadata("superCallOverload.kt")
      public void testSuperCallOverload() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallOverload.kt");
      }

      @Test
      @TestMetadata("withVariables.kt")
      public void testWithVariables() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/withVariables.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall")
    @TestDataPath("$PROJECT_ROOT")
    public class SuspendFunctionTypeCall {
      @Test
      public void testAllFilesPresentInSuspendFunctionTypeCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("localVal.kt")
      public void testLocalVal() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/localVal.kt");
      }

      @Test
      @TestMetadata("manyParameters.kt")
      public void testManyParameters() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParameters.kt");
      }

      @Test
      @TestMetadata("manyParametersNoCapture.kt")
      public void testManyParametersNoCapture() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParametersNoCapture.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/simple.kt");
      }

      @Test
      @TestMetadata("suspendModifier.kt")
      public void testSuspendModifier() {
        runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/suspendModifier.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations")
    @TestDataPath("$PROJECT_ROOT")
    public class TailCallOptimizations {
      @Test
      public void testAllFilesPresentInTailCallOptimizations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("crossinline.kt")
      public void testCrossinline() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/crossinline.kt");
      }

      @Test
      @TestMetadata("inlineWithoutStateMachine.kt")
      public void testInlineWithoutStateMachine() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithoutStateMachine.kt");
      }

      @Test
      @TestMetadata("innerObjectRetransformation.kt")
      public void testInnerObjectRetransformation() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/innerObjectRetransformation.kt");
      }

      @Test
      @TestMetadata("tryCatch.kt")
      public void testTryCatch() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tryCatch.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit")
      @TestDataPath("$PROJECT_ROOT")
      public class Unit {
        @Test
        public void testAllFilesPresentInUnit() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/tailOperations")
    @TestDataPath("$PROJECT_ROOT")
    public class TailOperations {
      @Test
      public void testAllFilesPresentInTailOperations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailOperations"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("suspendWithIf.kt")
      public void testSuspendWithIf() {
        runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithIf.kt");
      }

      @Test
      @TestMetadata("suspendWithTryCatch.kt")
      public void testSuspendWithTryCatch() {
        runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithTryCatch.kt");
      }

      @Test
      @TestMetadata("suspendWithWhen.kt")
      public void testSuspendWithWhen() {
        runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithWhen.kt");
      }

      @Test
      @TestMetadata("tailInlining.kt")
      public void testTailInlining() {
        runTest("compiler/testData/codegen/box/coroutines/tailOperations/tailInlining.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/unitTypeReturn")
    @TestDataPath("$PROJECT_ROOT")
    public class UnitTypeReturn {
      @Test
      public void testAllFilesPresentInUnitTypeReturn() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/unitTypeReturn"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("coroutineNonLocalReturn.kt")
      public void testCoroutineNonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineNonLocalReturn.kt");
      }

      @Test
      @TestMetadata("coroutineReturn.kt")
      public void testCoroutineReturn() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineReturn.kt");
      }

      @Test
      @TestMetadata("inlineUnitFunction.kt")
      public void testInlineUnitFunction() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/inlineUnitFunction.kt");
      }

      @Test
      @TestMetadata("interfaceDelegation.kt")
      public void testInterfaceDelegation() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/interfaceDelegation.kt");
      }

      @Test
      @TestMetadata("suspendNonLocalReturn.kt")
      public void testSuspendNonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendNonLocalReturn.kt");
      }

      @Test
      @TestMetadata("suspendReturn.kt")
      public void testSuspendReturn() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendReturn.kt");
      }

      @Test
      @TestMetadata("unitSafeCall.kt")
      public void testUnitSafeCall() {
        runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/unitSafeCall.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling")
    @TestDataPath("$PROJECT_ROOT")
    public class VarSpilling {
      @Test
      public void testAllFilesPresentInVarSpilling() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("fakeInlinerVariables.kt")
      public void testFakeInlinerVariables() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/fakeInlinerVariables.kt");
      }

      @Test
      @TestMetadata("kt19475.kt")
      public void testKt19475() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt19475.kt");
      }

      @Test
      @TestMetadata("kt38925.kt")
      public void testKt38925() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt38925.kt");
      }

      @Test
      @TestMetadata("kt49834.kt")
      public void testKt49834() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt49834.kt");
      }

      @Test
      @TestMetadata("kt64139.kt")
      public void testKt64139() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt64139.kt");
      }

      @Test
      @TestMetadata("lvtWithInlineOnly.kt")
      public void testLvtWithInlineOnly() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/lvtWithInlineOnly.kt");
      }

      @Test
      @TestMetadata("nullSpilling.kt")
      public void testNullSpilling() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/nullSpilling.kt");
      }

      @Test
      @TestMetadata("refinedIntTypesAnalysis.kt")
      public void testRefinedIntTypesAnalysis() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/refinedIntTypesAnalysis.kt");
      }

      @Test
      @TestMetadata("safeCallElvis.kt")
      public void testSafeCallElvis() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/safeCallElvis.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling/cleanup")
      @TestDataPath("$PROJECT_ROOT")
      public class Cleanup {
        @Test
        public void testAllFilesPresentInCleanup() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling/cleanup"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling/debugMode")
      @TestDataPath("$PROJECT_ROOT")
      public class DebugMode {
        @Test
        public void testAllFilesPresentInDebugMode() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling/debugMode"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/correctFrontendCode")
  @TestDataPath("$PROJECT_ROOT")
  public class CorrectFrontendCode {
    @Test
    public void testAllFilesPresentInCorrectFrontendCode() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/correctFrontendCode"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("privateNestedClassInSuper.kt")
    public void testPrivateNestedClassInSuper() {
      runTest("compiler/testData/codegen/box/correctFrontendCode/privateNestedClassInSuper.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/dataClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class DataClasses {
    @Test
    public void testAllFilesPresentInDataClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("arrayParams.kt")
    public void testArrayParams() {
      runTest("compiler/testData/codegen/box/dataClasses/arrayParams.kt");
    }

    @Test
    @TestMetadata("changingVarParam.kt")
    public void testChangingVarParam() {
      runTest("compiler/testData/codegen/box/dataClasses/changingVarParam.kt");
    }

    @Test
    @TestMetadata("dataClassWithManyFields.kt")
    public void testDataClassWithManyFields() {
      runTest("compiler/testData/codegen/box/dataClasses/dataClassWithManyFields.kt");
    }

    @Test
    @TestMetadata("doubleParam.kt")
    public void testDoubleParam() {
      runTest("compiler/testData/codegen/box/dataClasses/doubleParam.kt");
    }

    @Test
    @TestMetadata("equalityChecksPrimitiveUnboxed.kt")
    public void testEqualityChecksPrimitiveUnboxed() {
      runTest("compiler/testData/codegen/box/dataClasses/equalityChecksPrimitiveUnboxed.kt");
    }

    @Test
    @TestMetadata("floatParam.kt")
    public void testFloatParam() {
      runTest("compiler/testData/codegen/box/dataClasses/floatParam.kt");
    }

    @Test
    @TestMetadata("fromOtherModule.kt")
    public void testFromOtherModule() {
      runTest("compiler/testData/codegen/box/dataClasses/fromOtherModule.kt");
    }

    @Test
    @TestMetadata("genericParam.kt")
    public void testGenericParam() {
      runTest("compiler/testData/codegen/box/dataClasses/genericParam.kt");
    }

    @Test
    @TestMetadata("kt49715.kt")
    public void testKt49715() {
      runTest("compiler/testData/codegen/box/dataClasses/kt49715.kt");
    }

    @Test
    @TestMetadata("kt49715_behaviorChange.kt")
    public void testKt49715_behaviorChange() {
      runTest("compiler/testData/codegen/box/dataClasses/kt49715_behaviorChange.kt");
    }

    @Test
    @TestMetadata("mixedParams.kt")
    public void testMixedParams() {
      runTest("compiler/testData/codegen/box/dataClasses/mixedParams.kt");
    }

    @Test
    @TestMetadata("multiDeclaration.kt")
    public void testMultiDeclaration() {
      runTest("compiler/testData/codegen/box/dataClasses/multiDeclaration.kt");
    }

    @Test
    @TestMetadata("multiDeclarationFor.kt")
    public void testMultiDeclarationFor() {
      runTest("compiler/testData/codegen/box/dataClasses/multiDeclarationFor.kt");
    }

    @Test
    @TestMetadata("nonTrivialFinalMemberInSuperClass.kt")
    public void testNonTrivialFinalMemberInSuperClass() {
      runTest("compiler/testData/codegen/box/dataClasses/nonTrivialFinalMemberInSuperClass.kt");
    }

    @Test
    @TestMetadata("nonTrivialMemberInSuperClass.kt")
    public void testNonTrivialMemberInSuperClass() {
      runTest("compiler/testData/codegen/box/dataClasses/nonTrivialMemberInSuperClass.kt");
    }

    @Test
    @TestMetadata("privateValParams.kt")
    public void testPrivateValParams() {
      runTest("compiler/testData/codegen/box/dataClasses/privateValParams.kt");
    }

    @Test
    @TestMetadata("twoValParams.kt")
    public void testTwoValParams() {
      runTest("compiler/testData/codegen/box/dataClasses/twoValParams.kt");
    }

    @Test
    @TestMetadata("twoVarParams.kt")
    public void testTwoVarParams() {
      runTest("compiler/testData/codegen/box/dataClasses/twoVarParams.kt");
    }

    @Test
    @TestMetadata("unitComponent.kt")
    public void testUnitComponent() {
      runTest("compiler/testData/codegen/box/dataClasses/unitComponent.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/dataClasses/components")
    @TestDataPath("$PROJECT_ROOT")
    public class Components {
      @Test
      public void testAllFilesPresentInComponents() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/components"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt49812.kt")
      public void testKt49812() {
        runTest("compiler/testData/codegen/box/dataClasses/components/kt49812.kt");
      }

      @Test
      @TestMetadata("kt49936.kt")
      public void testKt49936() {
        runTest("compiler/testData/codegen/box/dataClasses/components/kt49936.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/dataClasses/copy")
    @TestDataPath("$PROJECT_ROOT")
    public class Copy {
      @Test
      public void testAllFilesPresentInCopy() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/copy"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("constructorWithDefaultParam.kt")
      public void testConstructorWithDefaultParam() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/constructorWithDefaultParam.kt");
      }

      @Test
      @TestMetadata("copyInObjectNestedDataClass.kt")
      public void testCopyInObjectNestedDataClass() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/copyInObjectNestedDataClass.kt");
      }

      @Test
      @TestMetadata("kt12708.kt")
      public void testKt12708() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/kt12708.kt");
      }

      @Test
      @TestMetadata("kt3033.kt")
      public void testKt3033() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/kt3033.kt");
      }

      @Test
      @TestMetadata("valInConstructorParams.kt")
      public void testValInConstructorParams() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/valInConstructorParams.kt");
      }

      @Test
      @TestMetadata("varInConstructorParams.kt")
      public void testVarInConstructorParams() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/varInConstructorParams.kt");
      }

      @Test
      @TestMetadata("withGenericParameter.kt")
      public void testWithGenericParameter() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/withGenericParameter.kt");
      }

      @Test
      @TestMetadata("withSecondaryConstructor.kt")
      public void testWithSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/dataClasses/copy/withSecondaryConstructor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/dataClasses/equals")
    @TestDataPath("$PROJECT_ROOT")
    public class Equals {
      @Test
      public void testAllFilesPresentInEquals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/equals"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("alreadyDeclared.kt")
      public void testAlreadyDeclared() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/alreadyDeclared.kt");
      }

      @Test
      @TestMetadata("genericarray.kt")
      public void testGenericarray() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/genericarray.kt");
      }

      @Test
      @TestMetadata("intarray.kt")
      public void testIntarray() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/intarray.kt");
      }

      @Test
      @TestMetadata("null.kt")
      public void testNull() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/null.kt");
      }

      @Test
      @TestMetadata("nullother.kt")
      public void testNullother() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/nullother.kt");
      }

      @Test
      @TestMetadata("sameinstance.kt")
      public void testSameinstance() {
        runTest("compiler/testData/codegen/box/dataClasses/equals/sameinstance.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/dataClasses/hashCode")
    @TestDataPath("$PROJECT_ROOT")
    public class HashCode {
      @Test
      public void testAllFilesPresentInHashCode() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/hashCode"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("alreadyDeclared.kt")
      public void testAlreadyDeclared() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/alreadyDeclared.kt");
      }

      @Test
      @TestMetadata("boolean.kt")
      public void testBoolean() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/boolean.kt");
      }

      @Test
      @TestMetadata("byte.kt")
      public void testByte() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/byte.kt");
      }

      @Test
      @TestMetadata("char.kt")
      public void testChar() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/char.kt");
      }

      @Test
      @TestMetadata("double.kt")
      public void testDouble() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/double.kt");
      }

      @Test
      @TestMetadata("float.kt")
      public void testFloat() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/float.kt");
      }

      @Test
      @TestMetadata("genericNull.kt")
      public void testGenericNull() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/genericNull.kt");
      }

      @Test
      @TestMetadata("int.kt")
      public void testInt() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/int.kt");
      }

      @Test
      @TestMetadata("long.kt")
      public void testLong() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/long.kt");
      }

      @Test
      @TestMetadata("null.kt")
      public void testNull() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/null.kt");
      }

      @Test
      @TestMetadata("short.kt")
      public void testShort() {
        runTest("compiler/testData/codegen/box/dataClasses/hashCode/short.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/dataClasses/toString")
    @TestDataPath("$PROJECT_ROOT")
    public class ToString {
      @Test
      public void testAllFilesPresentInToString() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/toString"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("alreadyDeclared.kt")
      public void testAlreadyDeclared() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/alreadyDeclared.kt");
      }

      @Test
      @TestMetadata("arrayParams.kt")
      public void testArrayParams() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/arrayParams.kt");
      }

      @Test
      @TestMetadata("changingVarParam.kt")
      public void testChangingVarParam() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/changingVarParam.kt");
      }

      @Test
      @TestMetadata("genericParam.kt")
      public void testGenericParam() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/genericParam.kt");
      }

      @Test
      @TestMetadata("mixedParams.kt")
      public void testMixedParams() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/mixedParams.kt");
      }

      @Test
      @TestMetadata("primitiveArrays.kt")
      public void testPrimitiveArrays() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/primitiveArrays.kt");
      }

      @Test
      @TestMetadata("unitComponent.kt")
      public void testUnitComponent() {
        runTest("compiler/testData/codegen/box/dataClasses/toString/unitComponent.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/dataObjects")
  @TestDataPath("$PROJECT_ROOT")
  public class DataObjects {
    @Test
    public void testAllFilesPresentInDataObjects() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataObjects"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("equals.kt")
    public void testEquals() {
      runTest("compiler/testData/codegen/box/dataObjects/equals.kt");
    }

    @Test
    @TestMetadata("hashCode.kt")
    public void testHashCode() {
      runTest("compiler/testData/codegen/box/dataObjects/hashCode.kt");
    }

    @Test
    @TestMetadata("toString.kt")
    public void testToString() {
      runTest("compiler/testData/codegen/box/dataObjects/toString.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/deadCodeElimination")
  @TestDataPath("$PROJECT_ROOT")
  public class DeadCodeElimination {
    @Test
    public void testAllFilesPresentInDeadCodeElimination() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/deadCodeElimination"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("emptyVariableRange.kt")
    public void testEmptyVariableRange() {
      runTest("compiler/testData/codegen/box/deadCodeElimination/emptyVariableRange.kt");
    }

    @Test
    @TestMetadata("intersectingVariableRange.kt")
    public void testIntersectingVariableRange() {
      runTest("compiler/testData/codegen/box/deadCodeElimination/intersectingVariableRange.kt");
    }

    @Test
    @TestMetadata("intersectingVariableRangeInFinally.kt")
    public void testIntersectingVariableRangeInFinally() {
      runTest("compiler/testData/codegen/box/deadCodeElimination/intersectingVariableRangeInFinally.kt");
    }

    @Test
    @TestMetadata("kt14357.kt")
    public void testKt14357() {
      runTest("compiler/testData/codegen/box/deadCodeElimination/kt14357.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/defaultArguments")
  @TestDataPath("$PROJECT_ROOT")
  public class DefaultArguments {
    @Test
    public void testAllFilesPresentInDefaultArguments() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("callDefaultFromInitializer.kt")
    public void testCallDefaultFromInitializer() {
      runTest("compiler/testData/codegen/box/defaultArguments/callDefaultFromInitializer.kt");
    }

    @Test
    @TestMetadata("captureInTailrec.kt")
    public void testCaptureInTailrec() {
      runTest("compiler/testData/codegen/box/defaultArguments/captureInTailrec.kt");
    }

    @Test
    @TestMetadata("complexInheritance.kt")
    public void testComplexInheritance() {
      runTest("compiler/testData/codegen/box/defaultArguments/complexInheritance.kt");
    }

    @Test
    @TestMetadata("implementedByFake.kt")
    public void testImplementedByFake() {
      runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake.kt");
    }

    @Test
    @TestMetadata("implementedByFake2.kt")
    public void testImplementedByFake2() {
      runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake2.kt");
    }

    @Test
    @TestMetadata("implementedByFake3.kt")
    public void testImplementedByFake3() {
      runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake3.kt");
    }

    @Test
    @TestMetadata("inheritedFromInterfaceViaAbstractSuperclass.kt")
    public void testInheritedFromInterfaceViaAbstractSuperclass() {
      runTest("compiler/testData/codegen/box/defaultArguments/inheritedFromInterfaceViaAbstractSuperclass.kt");
    }

    @Test
    @TestMetadata("kt36853.kt")
    public void testKt36853() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36853.kt");
    }

    @Test
    @TestMetadata("kt36853_fibonacci.kt")
    public void testKt36853_fibonacci() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36853_fibonacci.kt");
    }

    @Test
    @TestMetadata("kt36853_nestedObject.kt")
    public void testKt36853_nestedObject() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36853_nestedObject.kt");
    }

    @Test
    @TestMetadata("kt36853a.kt")
    public void testKt36853a() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt36853a.kt");
    }

    @Test
    @TestMetadata("kt46189.kt")
    public void testKt46189() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt46189.kt");
    }

    @Test
    @TestMetadata("kt47073.kt")
    public void testKt47073() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt47073.kt");
    }

    @Test
    @TestMetadata("kt47073_nested.kt")
    public void testKt47073_nested() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt47073_nested.kt");
    }

    @Test
    @TestMetadata("kt48391.kt")
    public void testKt48391() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt48391.kt");
    }

    @Test
    @TestMetadata("kt52702.kt")
    public void testKt52702() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt52702.kt");
    }

    @Test
    @TestMetadata("kt6382.kt")
    public void testKt6382() {
      runTest("compiler/testData/codegen/box/defaultArguments/kt6382.kt");
    }

    @Test
    @TestMetadata("protected.kt")
    public void testProtected() {
      runTest("compiler/testData/codegen/box/defaultArguments/protected.kt");
    }

    @Test
    @TestMetadata("recursiveDefaultArguments.kt")
    public void testRecursiveDefaultArguments() {
      runTest("compiler/testData/codegen/box/defaultArguments/recursiveDefaultArguments.kt");
    }

    @Test
    @TestMetadata("referenceAsArg.kt")
    public void testReferenceAsArg() {
      runTest("compiler/testData/codegen/box/defaultArguments/referenceAsArg.kt");
    }

    @Test
    @TestMetadata("simpleFromOtherFile.kt")
    public void testSimpleFromOtherFile() {
      runTest("compiler/testData/codegen/box/defaultArguments/simpleFromOtherFile.kt");
    }

    @Test
    @TestMetadata("useNextParamInLambda.kt")
    public void testUseNextParamInLambda() {
      runTest("compiler/testData/codegen/box/defaultArguments/useNextParamInLambda.kt");
    }

    @Test
    @TestMetadata("useNextParamInLambdaTailrec.kt")
    public void testUseNextParamInLambdaTailrec() {
      runTest("compiler/testData/codegen/box/defaultArguments/useNextParamInLambdaTailrec.kt");
    }

    @Test
    @TestMetadata("useThisInLambda.kt")
    public void testUseThisInLambda() {
      runTest("compiler/testData/codegen/box/defaultArguments/useThisInLambda.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/defaultArguments/constructor")
    @TestDataPath("$PROJECT_ROOT")
    public class Constructor {
      @Test
      public void testAllFilesPresentInConstructor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/constructor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("annotation.kt")
      public void testAnnotation() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/annotation.kt");
      }

      @Test
      @TestMetadata("annotationWithEmptyArray.kt")
      public void testAnnotationWithEmptyArray() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/annotationWithEmptyArray.kt");
      }

      @Test
      @TestMetadata("defArgs1.kt")
      public void testDefArgs1() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1.kt");
      }

      @Test
      @TestMetadata("defArgs1InnerClass.kt")
      public void testDefArgs1InnerClass() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1InnerClass.kt");
      }

      @Test
      @TestMetadata("defArgs2.kt")
      public void testDefArgs2() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs2.kt");
      }

      @Test
      @TestMetadata("doubleDefArgs1InnerClass.kt")
      public void testDoubleDefArgs1InnerClass() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/doubleDefArgs1InnerClass.kt");
      }

      @Test
      @TestMetadata("enum.kt")
      public void testEnum() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/enum.kt");
      }

      @Test
      @TestMetadata("enumWithOneDefArg.kt")
      public void testEnumWithOneDefArg() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithOneDefArg.kt");
      }

      @Test
      @TestMetadata("enumWithTwoDefArgs.kt")
      public void testEnumWithTwoDefArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDefArgs.kt");
      }

      @Test
      @TestMetadata("enumWithTwoDoubleDefArgs.kt")
      public void testEnumWithTwoDoubleDefArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDoubleDefArgs.kt");
      }

      @Test
      @TestMetadata("innerClass32Args.kt")
      public void testInnerClass32Args() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/innerClass32Args.kt");
      }

      @Test
      @TestMetadata("kt2852.kt")
      public void testKt2852() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt2852.kt");
      }

      @Test
      @TestMetadata("kt30517.kt")
      public void testKt30517() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt30517.kt");
      }

      @Test
      @TestMetadata("kt3060.kt")
      public void testKt3060() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt3060.kt");
      }

      @Test
      @TestMetadata("objectExpressionDelegatingToSecondaryConstructor.kt")
      public void testObjectExpressionDelegatingToSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/defaultArguments/constructor/objectExpressionDelegatingToSecondaryConstructor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/defaultArguments/convention")
    @TestDataPath("$PROJECT_ROOT")
    public class Convention {
      @Test
      public void testAllFilesPresentInConvention() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/convention"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("incWithDefaultInGetter.kt")
      public void testIncWithDefaultInGetter() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/incWithDefaultInGetter.kt");
      }

      @Test
      @TestMetadata("incWithDefaults.kt")
      public void testIncWithDefaults() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/incWithDefaults.kt");
      }

      @Test
      @TestMetadata("kt16520.kt")
      public void testKt16520() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/kt16520.kt");
      }

      @Test
      @TestMetadata("kt9140.kt")
      public void testKt9140() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/kt9140.kt");
      }

      @Test
      @TestMetadata("plusAssignWithDefaultInGetter.kt")
      public void testPlusAssignWithDefaultInGetter() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/plusAssignWithDefaultInGetter.kt");
      }

      @Test
      @TestMetadata("plusAssignWithDefaults.kt")
      public void testPlusAssignWithDefaults() {
        runTest("compiler/testData/codegen/box/defaultArguments/convention/plusAssignWithDefaults.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/defaultArguments/function")
    @TestDataPath("$PROJECT_ROOT")
    public class Function {
      @Test
      @TestMetadata("abstractClass.kt")
      public void testAbstractClass() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/abstractClass.kt");
      }

      @Test
      public void testAllFilesPresentInFunction() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/function"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("complexInheritance.kt")
      public void testComplexInheritance() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/complexInheritance.kt");
      }

      @Test
      @TestMetadata("covariantOverride.kt")
      public void testCovariantOverride() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/covariantOverride.kt");
      }

      @Test
      @TestMetadata("covariantOverrideGeneric.kt")
      public void testCovariantOverrideGeneric() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/covariantOverrideGeneric.kt");
      }

      @Test
      @TestMetadata("defaultLambdaInline.kt")
      public void testDefaultLambdaInline() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/defaultLambdaInline.kt");
      }

      @Test
      @TestMetadata("extensionFunctionManyArgs.kt")
      public void testExtensionFunctionManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extensionFunctionManyArgs.kt");
      }

      @Test
      @TestMetadata("extentionFunction.kt")
      public void testExtentionFunction() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunction.kt");
      }

      @Test
      @TestMetadata("extentionFunctionDouble.kt")
      public void testExtentionFunctionDouble() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDouble.kt");
      }

      @Test
      @TestMetadata("extentionFunctionDoubleTwoArgs.kt")
      public void testExtentionFunctionDoubleTwoArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDoubleTwoArgs.kt");
      }

      @Test
      @TestMetadata("extentionFunctionInClassObject.kt")
      public void testExtentionFunctionInClassObject() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInClassObject.kt");
      }

      @Test
      @TestMetadata("extentionFunctionInObject.kt")
      public void testExtentionFunctionInObject() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInObject.kt");
      }

      @Test
      @TestMetadata("extentionFunctionWithOneDefArg.kt")
      public void testExtentionFunctionWithOneDefArg() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionWithOneDefArg.kt");
      }

      @Test
      @TestMetadata("funInTrait.kt")
      public void testFunInTrait() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/funInTrait.kt");
      }

      @Test
      @TestMetadata("funInTraitChain.kt")
      public void testFunInTraitChain() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/funInTraitChain.kt");
      }

      @Test
      @TestMetadata("innerExtentionFunction.kt")
      public void testInnerExtentionFunction() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunction.kt");
      }

      @Test
      @TestMetadata("innerExtentionFunctionDouble.kt")
      public void testInnerExtentionFunctionDouble() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDouble.kt");
      }

      @Test
      @TestMetadata("innerExtentionFunctionDoubleTwoArgs.kt")
      public void testInnerExtentionFunctionDoubleTwoArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDoubleTwoArgs.kt");
      }

      @Test
      @TestMetadata("innerExtentionFunctionManyArgs.kt")
      public void testInnerExtentionFunctionManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionManyArgs.kt");
      }

      @Test
      @TestMetadata("kt15971.kt")
      public void testKt15971() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971.kt");
      }

      @Test
      @TestMetadata("kt15971_2.kt")
      public void testKt15971_2() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971_2.kt");
      }

      @Test
      @TestMetadata("kt15971_3.kt")
      public void testKt15971_3() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971_3.kt");
      }

      @Test
      @TestMetadata("kt36188.kt")
      public void testKt36188() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt36188.kt");
      }

      @Test
      @TestMetadata("kt36188_2.kt")
      public void testKt36188_2() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt36188_2.kt");
      }

      @Test
      @TestMetadata("kt5232.kt")
      public void testKt5232() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/kt5232.kt");
      }

      @Test
      @TestMetadata("memberFunctionManyArgs.kt")
      public void testMemberFunctionManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/memberFunctionManyArgs.kt");
      }

      @Test
      @TestMetadata("mixingNamedAndPositioned.kt")
      public void testMixingNamedAndPositioned() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/mixingNamedAndPositioned.kt");
      }

      @Test
      @TestMetadata("topLevelManyArgs.kt")
      public void testTopLevelManyArgs() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/topLevelManyArgs.kt");
      }

      @Test
      @TestMetadata("trait.kt")
      public void testTrait() {
        runTest("compiler/testData/codegen/box/defaultArguments/function/trait.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/defaultArguments/private")
    @TestDataPath("$PROJECT_ROOT")
    public class Private {
      @Test
      public void testAllFilesPresentInPrivate() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/private"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("memberExtensionFunction.kt")
      public void testMemberExtensionFunction() {
        runTest("compiler/testData/codegen/box/defaultArguments/private/memberExtensionFunction.kt");
      }

      @Test
      @TestMetadata("memberFunction.kt")
      public void testMemberFunction() {
        runTest("compiler/testData/codegen/box/defaultArguments/private/memberFunction.kt");
      }

      @Test
      @TestMetadata("primaryConstructor.kt")
      public void testPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/defaultArguments/private/primaryConstructor.kt");
      }

      @Test
      @TestMetadata("secondaryConstructor.kt")
      public void testSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/defaultArguments/private/secondaryConstructor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/defaultArguments/signature")
    @TestDataPath("$PROJECT_ROOT")
    public class Signature {
      @Test
      public void testAllFilesPresentInSignature() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/signature"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt2789.kt")
      public void testKt2789() {
        runTest("compiler/testData/codegen/box/defaultArguments/signature/kt2789.kt");
      }

      @Test
      @TestMetadata("kt9428.kt")
      public void testKt9428() {
        runTest("compiler/testData/codegen/box/defaultArguments/signature/kt9428.kt");
      }

      @Test
      @TestMetadata("kt9924.kt")
      public void testKt9924() {
        runTest("compiler/testData/codegen/box/defaultArguments/signature/kt9924.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/delegatedProperty")
  @TestDataPath("$PROJECT_ROOT")
  public class DelegatedProperty {
    @Test
    @TestMetadata("accessTopLevelDelegatedPropertyInClinit.kt")
    public void testAccessTopLevelDelegatedPropertyInClinit() {
      runTest("compiler/testData/codegen/box/delegatedProperty/accessTopLevelDelegatedPropertyInClinit.kt");
    }

    @Test
    public void testAllFilesPresentInDelegatedProperty() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("beforeDeclarationContainerOptimization.kt")
    public void testBeforeDeclarationContainerOptimization() {
      runTest("compiler/testData/codegen/box/delegatedProperty/beforeDeclarationContainerOptimization.kt");
    }

    @Test
    @TestMetadata("callableReferenceAsSecondArgumentOfDelegate.kt")
    public void testCallableReferenceAsSecondArgumentOfDelegate() {
      runTest("compiler/testData/codegen/box/delegatedProperty/callableReferenceAsSecondArgumentOfDelegate.kt");
    }

    @Test
    @TestMetadata("capturePropertyInClosure.kt")
    public void testCapturePropertyInClosure() {
      runTest("compiler/testData/codegen/box/delegatedProperty/capturePropertyInClosure.kt");
    }

    @Test
    @TestMetadata("castGetReturnType.kt")
    public void testCastGetReturnType() {
      runTest("compiler/testData/codegen/box/delegatedProperty/castGetReturnType.kt");
    }

    @Test
    @TestMetadata("castSetParameter.kt")
    public void testCastSetParameter() {
      runTest("compiler/testData/codegen/box/delegatedProperty/castSetParameter.kt");
    }

    @Test
    @TestMetadata("delegateAsInnerClass.kt")
    public void testDelegateAsInnerClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateAsInnerClass.kt");
    }

    @Test
    @TestMetadata("delegateByOtherProperty.kt")
    public void testDelegateByOtherProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateByOtherProperty.kt");
    }

    @Test
    @TestMetadata("delegateByTopLevelFun.kt")
    public void testDelegateByTopLevelFun() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateByTopLevelFun.kt");
    }

    @Test
    @TestMetadata("delegateByTopLevelProperty.kt")
    public void testDelegateByTopLevelProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateByTopLevelProperty.kt");
    }

    @Test
    @TestMetadata("delegateForExtProperty.kt")
    public void testDelegateForExtProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateForExtProperty.kt");
    }

    @Test
    @TestMetadata("delegateForExtPropertyInClass.kt")
    public void testDelegateForExtPropertyInClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateForExtPropertyInClass.kt");
    }

    @Test
    @TestMetadata("delegateToConstVal.kt")
    public void testDelegateToConstVal() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConstVal.kt");
    }

    @Test
    @TestMetadata("delegateToConstructorParameter.kt")
    public void testDelegateToConstructorParameter() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConstructorParameter.kt");
    }

    @Test
    @TestMetadata("delegateWithPrivateSet.kt")
    public void testDelegateWithPrivateSet() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegateWithPrivateSet.kt");
    }

    @Test
    @TestMetadata("delegatedPropertyInEnum.kt")
    public void testDelegatedPropertyInEnum() {
      runTest("compiler/testData/codegen/box/delegatedProperty/delegatedPropertyInEnum.kt");
    }

    @Test
    @TestMetadata("DelegationByFunctionWithEnumUpperBound.kt")
    public void testDelegationByFunctionWithEnumUpperBound() {
      runTest("compiler/testData/codegen/box/delegatedProperty/DelegationByFunctionWithEnumUpperBound.kt");
    }

    @Test
    @TestMetadata("extensionDelegatesWithSameNames.kt")
    public void testExtensionDelegatesWithSameNames() {
      runTest("compiler/testData/codegen/box/delegatedProperty/extensionDelegatesWithSameNames.kt");
    }

    @Test
    @TestMetadata("extensionPropertyAndExtensionGetValue.kt")
    public void testExtensionPropertyAndExtensionGetValue() {
      runTest("compiler/testData/codegen/box/delegatedProperty/extensionPropertyAndExtensionGetValue.kt");
    }

    @Test
    @TestMetadata("functionRefDelefate.kt")
    public void testFunctionRefDelefate() {
      runTest("compiler/testData/codegen/box/delegatedProperty/functionRefDelefate.kt");
    }

    @Test
    @TestMetadata("genericDelegate.kt")
    public void testGenericDelegate() {
      runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegate.kt");
    }

    @Test
    @TestMetadata("genericDelegateUncheckedCast1.kt")
    public void testGenericDelegateUncheckedCast1() {
      runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegateUncheckedCast1.kt");
    }

    @Test
    @TestMetadata("genericDelegateUncheckedCast2.kt")
    public void testGenericDelegateUncheckedCast2() {
      runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegateUncheckedCast2.kt");
    }

    @Test
    @TestMetadata("genericSetValueViaSyntheticAccessor.kt")
    public void testGenericSetValueViaSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/delegatedProperty/genericSetValueViaSyntheticAccessor.kt");
    }

    @Test
    @TestMetadata("getAsExtensionFun.kt")
    public void testGetAsExtensionFun() {
      runTest("compiler/testData/codegen/box/delegatedProperty/getAsExtensionFun.kt");
    }

    @Test
    @TestMetadata("getAsExtensionFunInClass.kt")
    public void testGetAsExtensionFunInClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/getAsExtensionFunInClass.kt");
    }

    @Test
    @TestMetadata("inClassVal.kt")
    public void testInClassVal() {
      runTest("compiler/testData/codegen/box/delegatedProperty/inClassVal.kt");
    }

    @Test
    @TestMetadata("inClassVar.kt")
    public void testInClassVar() {
      runTest("compiler/testData/codegen/box/delegatedProperty/inClassVar.kt");
    }

    @Test
    @TestMetadata("inTrait.kt")
    public void testInTrait() {
      runTest("compiler/testData/codegen/box/delegatedProperty/inTrait.kt");
    }

    @Test
    @TestMetadata("inferredPropertyType.kt")
    public void testInferredPropertyType() {
      runTest("compiler/testData/codegen/box/delegatedProperty/inferredPropertyType.kt");
    }

    @Test
    @TestMetadata("insideInlinedObjectMultiModule.kt")
    public void testInsideInlinedObjectMultiModule() {
      runTest("compiler/testData/codegen/box/delegatedProperty/insideInlinedObjectMultiModule.kt");
    }

    @Test
    @TestMetadata("kt35707.kt")
    public void testKt35707() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt35707.kt");
    }

    @Test
    @TestMetadata("kt37204.kt")
    public void testKt37204() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt37204.kt");
    }

    @Test
    @TestMetadata("kt4138.kt")
    public void testKt4138() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt4138.kt");
    }

    @Test
    @TestMetadata("kt45431.kt")
    public void testKt45431() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt45431.kt");
    }

    @Test
    @TestMetadata("kt6722.kt")
    public void testKt6722() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt6722.kt");
    }

    @Test
    @TestMetadata("kt9712.kt")
    public void testKt9712() {
      runTest("compiler/testData/codegen/box/delegatedProperty/kt9712.kt");
    }

    @Test
    @TestMetadata("noTypeVariablesLeft.kt")
    public void testNoTypeVariablesLeft() {
      runTest("compiler/testData/codegen/box/delegatedProperty/noTypeVariablesLeft.kt");
    }

    @Test
    @TestMetadata("privateVar.kt")
    public void testPrivateVar() {
      runTest("compiler/testData/codegen/box/delegatedProperty/privateVar.kt");
    }

    @Test
    @TestMetadata("protectedVarWithPrivateSet.kt")
    public void testProtectedVarWithPrivateSet() {
      runTest("compiler/testData/codegen/box/delegatedProperty/protectedVarWithPrivateSet.kt");
    }

    @Test
    @TestMetadata("referenceEnclosingClassFieldInReceiver.kt")
    public void testReferenceEnclosingClassFieldInReceiver() {
      runTest("compiler/testData/codegen/box/delegatedProperty/referenceEnclosingClassFieldInReceiver.kt");
    }

    @Test
    @TestMetadata("referenceEnclosingClassFieldInReceiver2.kt")
    public void testReferenceEnclosingClassFieldInReceiver2() {
      runTest("compiler/testData/codegen/box/delegatedProperty/referenceEnclosingClassFieldInReceiver2.kt");
    }

    @Test
    @TestMetadata("resolveGetValueWithWholeDelegate.kt")
    public void testResolveGetValueWithWholeDelegate() {
      runTest("compiler/testData/codegen/box/delegatedProperty/resolveGetValueWithWholeDelegate.kt");
    }

    @Test
    @TestMetadata("setAsExtensionFun.kt")
    public void testSetAsExtensionFun() {
      runTest("compiler/testData/codegen/box/delegatedProperty/setAsExtensionFun.kt");
    }

    @Test
    @TestMetadata("setAsExtensionFunInClass.kt")
    public void testSetAsExtensionFunInClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/setAsExtensionFunInClass.kt");
    }

    @Test
    @TestMetadata("topLevelVal.kt")
    public void testTopLevelVal() {
      runTest("compiler/testData/codegen/box/delegatedProperty/topLevelVal.kt");
    }

    @Test
    @TestMetadata("topLevelVar.kt")
    public void testTopLevelVar() {
      runTest("compiler/testData/codegen/box/delegatedProperty/topLevelVar.kt");
    }

    @Test
    @TestMetadata("twoPropByOneDelegete.kt")
    public void testTwoPropByOneDelegete() {
      runTest("compiler/testData/codegen/box/delegatedProperty/twoPropByOneDelegete.kt");
    }

    @Test
    @TestMetadata("useKPropertyLater.kt")
    public void testUseKPropertyLater() {
      runTest("compiler/testData/codegen/box/delegatedProperty/useKPropertyLater.kt");
    }

    @Test
    @TestMetadata("valByMapDelegatedProperty.kt")
    public void testValByMapDelegatedProperty() {
      runTest("compiler/testData/codegen/box/delegatedProperty/valByMapDelegatedProperty.kt");
    }

    @Test
    @TestMetadata("valInInnerClass.kt")
    public void testValInInnerClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/valInInnerClass.kt");
    }

    @Test
    @TestMetadata("varInInnerClass.kt")
    public void testVarInInnerClass() {
      runTest("compiler/testData/codegen/box/delegatedProperty/varInInnerClass.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToAnother")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegateToAnother {
      @Test
      public void testAllFilesPresentInDelegateToAnother() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToAnother"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("custom.kt")
      public void testCustom() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/custom.kt");
      }

      @Test
      @TestMetadata("kt49793_companionObject.kt")
      public void testKt49793_companionObject() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/kt49793_companionObject.kt");
      }

      @Test
      @TestMetadata("kt49793_interfaceCompanionObject.kt")
      public void testKt49793_interfaceCompanionObject() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/kt49793_interfaceCompanionObject.kt");
      }

      @Test
      @TestMetadata("kt49793_object.kt")
      public void testKt49793_object() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/kt49793_object.kt");
      }

      @Test
      @TestMetadata("kt50019_noOptimizedCallableReferences.kt")
      public void testKt50019_noOptimizedCallableReferences() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/kt50019_noOptimizedCallableReferences.kt");
      }

      @Test
      @TestMetadata("mutable.kt")
      public void testMutable() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/mutable.kt");
      }

      @Test
      @TestMetadata("openProperty.kt")
      public void testOpenProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/openProperty.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/simple.kt");
      }

      @Test
      @TestMetadata("withSideEffects.kt")
      public void testWithSideEffects() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/withSideEffects.kt");
      }

      @Test
      @TestMetadata("withSideEffectsFromFileClass.kt")
      public void testWithSideEffectsFromFileClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother/withSideEffectsFromFileClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToConst")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegateToConst {
      @Test
      public void testAllFilesPresentInDelegateToConst() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToConst"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("delegateToConst.kt")
      public void testDelegateToConst() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConst/delegateToConst.kt");
      }

      @Test
      @TestMetadata("delegateToConstProperty.kt")
      public void testDelegateToConstProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConst/delegateToConstProperty.kt");
      }

      @Test
      @TestMetadata("delegateToNull.kt")
      public void testDelegateToNull() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToConst/delegateToNull.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegateToFinalProperty {
      @Test
      public void testAllFilesPresentInDelegateToFinalProperty() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("chain.kt")
      public void testChain() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/chain.kt");
      }

      @Test
      @TestMetadata("delegateToFinalInstanceProperty.kt")
      public void testDelegateToFinalInstanceProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/delegateToFinalInstanceProperty.kt");
      }

      @Test
      @TestMetadata("delegateToFinalObjectProperty.kt")
      public void testDelegateToFinalObjectProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/delegateToFinalObjectProperty.kt");
      }

      @Test
      @TestMetadata("delegateToFinalProperty.kt")
      public void testDelegateToFinalProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/delegateToFinalProperty.kt");
      }

      @Test
      @TestMetadata("finalPropertyInAnotherFile.kt")
      public void testFinalPropertyInAnotherFile() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/finalPropertyInAnotherFile.kt");
      }

      @Test
      @TestMetadata("initializeContainerOfTopLevelProperties.kt")
      public void testInitializeContainerOfTopLevelProperties() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/initializeContainerOfTopLevelProperties.kt");
      }

      @Test
      @TestMetadata("memberExtensionPropertyAndImportFromObject.kt")
      public void testMemberExtensionPropertyAndImportFromObject() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/memberExtensionPropertyAndImportFromObject.kt");
      }

      @Test
      @TestMetadata("memberExtensionPropertyAndLocalDelegatedProperty.kt")
      public void testMemberExtensionPropertyAndLocalDelegatedProperty() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToFinalProperty/memberExtensionPropertyAndLocalDelegatedProperty.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegateToSingleton {
      @Test
      public void testAllFilesPresentInDelegateToSingleton() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("delegateToEnum.kt")
      public void testDelegateToEnum() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/delegateToEnum.kt");
      }

      @Test
      @TestMetadata("delegateToEnumInAClass.kt")
      public void testDelegateToEnumInAClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/delegateToEnumInAClass.kt");
      }

      @Test
      @TestMetadata("delegateToSingleton.kt")
      public void testDelegateToSingleton() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/delegateToSingleton.kt");
      }

      @Test
      @TestMetadata("noInitializationOfOuterClass.kt")
      public void testNoInitializationOfOuterClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/noInitializationOfOuterClass.kt");
      }

      @Test
      @TestMetadata("withSideEffects.kt")
      public void testWithSideEffects() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/withSideEffects.kt");
      }

      @Test
      @TestMetadata("withSideEffectsFromFileClass.kt")
      public void testWithSideEffectsFromFileClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/withSideEffectsFromFileClass.kt");
      }

      @Test
      @TestMetadata("withSideEffectsToEnum.kt")
      public void testWithSideEffectsToEnum() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToSingleton/withSideEffectsToEnum.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/delegateToThis")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegateToThis {
      @Test
      public void testAllFilesPresentInDelegateToThis() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/delegateToThis"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("delegateToOuterThis.kt")
      public void testDelegateToOuterThis() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToThis/delegateToOuterThis.kt");
      }

      @Test
      @TestMetadata("delegateToThis.kt")
      public void testDelegateToThis() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToThis/delegateToThis.kt");
      }

      @Test
      @TestMetadata("delegateToThisByExtension.kt")
      public void testDelegateToThisByExtension() {
        runTest("compiler/testData/codegen/box/delegatedProperty/delegateToThis/delegateToThisByExtension.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/local")
    @TestDataPath("$PROJECT_ROOT")
    public class Local {
      @Test
      public void testAllFilesPresentInLocal() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/local"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("capturedLocalVal.kt")
      public void testCapturedLocalVal() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVal.kt");
      }

      @Test
      @TestMetadata("capturedLocalValNoInline.kt")
      public void testCapturedLocalValNoInline() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalValNoInline.kt");
      }

      @Test
      @TestMetadata("capturedLocalVar.kt")
      public void testCapturedLocalVar() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVar.kt");
      }

      @Test
      @TestMetadata("capturedLocalVarNoInline.kt")
      public void testCapturedLocalVarNoInline() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVarNoInline.kt");
      }

      @Test
      @TestMetadata("inlineGetValue.kt")
      public void testInlineGetValue() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/inlineGetValue.kt");
      }

      @Test
      @TestMetadata("inlineOperators.kt")
      public void testInlineOperators() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/inlineOperators.kt");
      }

      @Test
      @TestMetadata("kt12891.kt")
      public void testKt12891() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt12891.kt");
      }

      @Test
      @TestMetadata("kt13557.kt")
      public void testKt13557() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt13557.kt");
      }

      @Test
      @TestMetadata("kt16864.kt")
      public void testKt16864() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt16864.kt");
      }

      @Test
      @TestMetadata("kt19690.kt")
      public void testKt19690() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt19690.kt");
      }

      @Test
      @TestMetadata("kt21085.kt")
      public void testKt21085() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt21085.kt");
      }

      @Test
      @TestMetadata("kt23117.kt")
      public void testKt23117() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/kt23117.kt");
      }

      @Test
      @TestMetadata("localVal.kt")
      public void testLocalVal() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/localVal.kt");
      }

      @Test
      @TestMetadata("localValNoExplicitType.kt")
      public void testLocalValNoExplicitType() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/localValNoExplicitType.kt");
      }

      @Test
      @TestMetadata("localVar.kt")
      public void testLocalVar() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/localVar.kt");
      }

      @Test
      @TestMetadata("localVarNoExplicitType.kt")
      public void testLocalVarNoExplicitType() {
        runTest("compiler/testData/codegen/box/delegatedProperty/local/localVarNoExplicitType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties")
    @TestDataPath("$PROJECT_ROOT")
    public class OptimizedDelegatedProperties {
      @Test
      public void testAllFilesPresentInOptimizedDelegatedProperties() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("definedInSources.kt")
      public void testDefinedInSources() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/definedInSources.kt");
      }

      @Test
      @TestMetadata("definedInSourcesWithNonNullParameter.kt")
      public void testDefinedInSourcesWithNonNullParameter() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/definedInSourcesWithNonNullParameter.kt");
      }

      @Test
      @TestMetadata("inSeparateModule.kt")
      public void testInSeparateModule() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/inSeparateModule.kt");
      }

      @Test
      @TestMetadata("inSeparateModuleWithNonNullParameter.kt")
      public void testInSeparateModuleWithNonNullParameter() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/inSeparateModuleWithNonNullParameter.kt");
      }

      @Test
      @TestMetadata("kt40815.kt")
      public void testKt40815() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815.kt");
      }

      @Test
      @TestMetadata("kt40815_2.kt")
      public void testKt40815_2() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815_2.kt");
      }

      @Test
      @TestMetadata("kt40815_3.kt")
      public void testKt40815_3() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815_3.kt");
      }

      @Test
      @TestMetadata("kt42253.kt")
      public void testKt42253() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt42253.kt");
      }

      @Test
      @TestMetadata("kt48825.kt")
      public void testKt48825() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt48825.kt");
      }

      @Test
      @TestMetadata("lazy.kt")
      public void testLazy() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/lazy.kt");
      }

      @Test
      @TestMetadata("mixedArgumentSizes.kt")
      public void testMixedArgumentSizes() {
        runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/mixedArgumentSizes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty/provideDelegate")
    @TestDataPath("$PROJECT_ROOT")
    public class ProvideDelegate {
      @Test
      public void testAllFilesPresentInProvideDelegate() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/provideDelegate"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("commonCaseForInference.kt")
      public void testCommonCaseForInference() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/commonCaseForInference.kt");
      }

      @Test
      @TestMetadata("delegatedPropertyWithIdProvideDelegate.kt")
      public void testDelegatedPropertyWithIdProvideDelegate() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/delegatedPropertyWithIdProvideDelegate.kt");
      }

      @Test
      @TestMetadata("differentReceivers.kt")
      public void testDifferentReceivers() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/differentReceivers.kt");
      }

      @Test
      @TestMetadata("evaluationOrder.kt")
      public void testEvaluationOrder() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/evaluationOrder.kt");
      }

      @Test
      @TestMetadata("evaluationOrderVar.kt")
      public void testEvaluationOrderVar() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/evaluationOrderVar.kt");
      }

      @Test
      @TestMetadata("extensionDelegated.kt")
      public void testExtensionDelegated() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/extensionDelegated.kt");
      }

      @Test
      @TestMetadata("generic.kt")
      public void testGeneric() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/generic.kt");
      }

      @Test
      @TestMetadata("genericDelegateWithNoAdditionalInfo.kt")
      public void testGenericDelegateWithNoAdditionalInfo() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/genericDelegateWithNoAdditionalInfo.kt");
      }

      @Test
      @TestMetadata("genericProvideDelegateOnNumberLiteral.kt")
      public void testGenericProvideDelegateOnNumberLiteral() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/genericProvideDelegateOnNumberLiteral.kt");
      }

      @Test
      @TestMetadata("hostCheck.kt")
      public void testHostCheck() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/hostCheck.kt");
      }

      @Test
      @TestMetadata("inClass.kt")
      public void testInClass() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inClass.kt");
      }

      @Test
      @TestMetadata("inferenceFromReceiver2.kt")
      public void testInferenceFromReceiver2() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inferenceFromReceiver2.kt");
      }

      @Test
      @TestMetadata("inlineProvideDelegate.kt")
      public void testInlineProvideDelegate() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inlineProvideDelegate.kt");
      }

      @Test
      @TestMetadata("kt15437.kt")
      public void testKt15437() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt15437.kt");
      }

      @Test
      @TestMetadata("kt16441.kt")
      public void testKt16441() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt16441.kt");
      }

      @Test
      @TestMetadata("kt18902.kt")
      public void testKt18902() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt18902.kt");
      }

      @Test
      @TestMetadata("kt39588.kt")
      public void testKt39588() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt39588.kt");
      }

      @Test
      @TestMetadata("local.kt")
      public void testLocal() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/local.kt");
      }

      @Test
      @TestMetadata("localCaptured.kt")
      public void testLocalCaptured() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/localCaptured.kt");
      }

      @Test
      @TestMetadata("localDifferentReceivers.kt")
      public void testLocalDifferentReceivers() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/localDifferentReceivers.kt");
      }

      @Test
      @TestMetadata("memberExtension.kt")
      public void testMemberExtension() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/memberExtension.kt");
      }

      @Test
      @TestMetadata("notNullAssertionInLocalDelegated.kt")
      public void testNotNullAssertionInLocalDelegated() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/notNullAssertionInLocalDelegated.kt");
      }

      @Test
      @TestMetadata("propertyMetadata.kt")
      public void testPropertyMetadata() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/propertyMetadata.kt");
      }

      @Test
      @TestMetadata("provideDelegateByExtensionFunction.kt")
      public void testProvideDelegateByExtensionFunction() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/provideDelegateByExtensionFunction.kt");
      }

      @Test
      @TestMetadata("setValue.kt")
      public void testSetValue() {
        runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/setValue.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/delegation")
  @TestDataPath("$PROJECT_ROOT")
  public class Delegation {
    @Test
    public void testAllFilesPresentInDelegation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegation"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("delegationDifferentModule.kt")
    public void testDelegationDifferentModule() {
      runTest("compiler/testData/codegen/box/delegation/delegationDifferentModule.kt");
    }

    @Test
    @TestMetadata("delegationDifferentModule2.kt")
    public void testDelegationDifferentModule2() {
      runTest("compiler/testData/codegen/box/delegation/delegationDifferentModule2.kt");
    }

    @Test
    @TestMetadata("delegationToIntersectionType.kt")
    public void testDelegationToIntersectionType() {
      runTest("compiler/testData/codegen/box/delegation/delegationToIntersectionType.kt");
    }

    @Test
    @TestMetadata("delegationToVar.kt")
    public void testDelegationToVar() {
      runTest("compiler/testData/codegen/box/delegation/delegationToVar.kt");
    }

    @Test
    @TestMetadata("delegationWithPrivateConstructor.kt")
    public void testDelegationWithPrivateConstructor() {
      runTest("compiler/testData/codegen/box/delegation/delegationWithPrivateConstructor.kt");
    }

    @Test
    @TestMetadata("genericFunctionInGenericInterface.kt")
    public void testGenericFunctionInGenericInterface() {
      runTest("compiler/testData/codegen/box/delegation/genericFunctionInGenericInterface.kt");
    }

    @Test
    @TestMetadata("genericProperty.kt")
    public void testGenericProperty() {
      runTest("compiler/testData/codegen/box/delegation/genericProperty.kt");
    }

    @Test
    @TestMetadata("hiddenSuperOverrideIn1.0.kt")
    public void testHiddenSuperOverrideIn1_0() {
      runTest("compiler/testData/codegen/box/delegation/hiddenSuperOverrideIn1.0.kt");
    }

    @Test
    @TestMetadata("ifWithCallableReferenceInLazy.kt")
    public void testIfWithCallableReferenceInLazy() {
      runTest("compiler/testData/codegen/box/delegation/ifWithCallableReferenceInLazy.kt");
    }

    @Test
    @TestMetadata("inDataClass.kt")
    public void testInDataClass() {
      runTest("compiler/testData/codegen/box/delegation/inDataClass.kt");
    }

    @Test
    @TestMetadata("kt30102_comparable.kt")
    public void testKt30102_comparable() {
      runTest("compiler/testData/codegen/box/delegation/kt30102_comparable.kt");
    }

    @Test
    @TestMetadata("kt8154.kt")
    public void testKt8154() {
      runTest("compiler/testData/codegen/box/delegation/kt8154.kt");
    }

    @Test
    @TestMetadata("nestedNameClash.kt")
    public void testNestedNameClash() {
      runTest("compiler/testData/codegen/box/delegation/nestedNameClash.kt");
    }

    @Test
    @TestMetadata("nestedNameClash2.kt")
    public void testNestedNameClash2() {
      runTest("compiler/testData/codegen/box/delegation/nestedNameClash2.kt");
    }

    @Test
    @TestMetadata("smartCastedDelegation.kt")
    public void testSmartCastedDelegation() {
      runTest("compiler/testData/codegen/box/delegation/smartCastedDelegation.kt");
    }

    @Test
    @TestMetadata("viaTypeAlias.kt")
    public void testViaTypeAlias() {
      runTest("compiler/testData/codegen/box/delegation/viaTypeAlias.kt");
    }

    @Test
    @TestMetadata("withDefaultParameters.kt")
    public void testWithDefaultParameters() {
      runTest("compiler/testData/codegen/box/delegation/withDefaultParameters.kt");
    }

    @Test
    @TestMetadata("withDefaultsMultipleFilesOrder.kt")
    public void testWithDefaultsMultipleFilesOrder() {
      runTest("compiler/testData/codegen/box/delegation/withDefaultsMultipleFilesOrder.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/deprecated")
  @TestDataPath("$PROJECT_ROOT")
  public class Deprecated {
    @Test
    public void testAllFilesPresentInDeprecated() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/deprecated"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/destructuringDeclInLambdaParam")
  @TestDataPath("$PROJECT_ROOT")
  public class DestructuringDeclInLambdaParam {
    @Test
    public void testAllFilesPresentInDestructuringDeclInLambdaParam() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/destructuringDeclInLambdaParam"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("extensionComponents.kt")
    public void testExtensionComponents() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/extensionComponents.kt");
    }

    @Test
    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/generic.kt");
    }

    @Test
    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/inline.kt");
    }

    @Test
    @TestMetadata("otherParameters.kt")
    public void testOtherParameters() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/otherParameters.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/simple.kt");
    }

    @Test
    @TestMetadata("stdlibUsages.kt")
    public void testStdlibUsages() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/stdlibUsages.kt");
    }

    @Test
    @TestMetadata("underscoreNames.kt")
    public void testUnderscoreNames() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/underscoreNames.kt");
    }

    @Test
    @TestMetadata("withIndexed.kt")
    public void testWithIndexed() {
      runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/withIndexed.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/diagnostics")
  @TestDataPath("$PROJECT_ROOT")
  public class Diagnostics {
    @Test
    public void testAllFilesPresentInDiagnostics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/diagnostics/functions")
    @TestDataPath("$PROJECT_ROOT")
    public class Functions {
      @Test
      public void testAllFilesPresentInFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        public void testAllFilesPresentInInference() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/inference"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("kt6176.kt")
        public void testKt6176() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/inference/kt6176.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke")
      @TestDataPath("$PROJECT_ROOT")
      public class Invoke {
        @Test
        public void testAllFilesPresentInInvoke() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects")
        @TestDataPath("$PROJECT_ROOT")
        public class OnObjects {
          @Test
          public void testAllFilesPresentInOnObjects() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("invokeOnClassObject1.kt")
          public void testInvokeOnClassObject1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject1.kt");
          }

          @Test
          @TestMetadata("invokeOnClassObject2.kt")
          public void testInvokeOnClassObject2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject2.kt");
          }

          @Test
          @TestMetadata("invokeOnClassObjectOfNestedClass1.kt")
          public void testInvokeOnClassObjectOfNestedClass1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass1.kt");
          }

          @Test
          @TestMetadata("invokeOnClassObjectOfNestedClass2.kt")
          public void testInvokeOnClassObjectOfNestedClass2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass2.kt");
          }

          @Test
          @TestMetadata("invokeOnEnum1.kt")
          public void testInvokeOnEnum1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum1.kt");
          }

          @Test
          @TestMetadata("invokeOnEnum2.kt")
          public void testInvokeOnEnum2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum2.kt");
          }

          @Test
          @TestMetadata("invokeOnImportedEnum1.kt")
          public void testInvokeOnImportedEnum1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum1.kt");
          }

          @Test
          @TestMetadata("invokeOnImportedEnum2.kt")
          public void testInvokeOnImportedEnum2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum2.kt");
          }

          @Test
          @TestMetadata("invokeOnObject1.kt")
          public void testInvokeOnObject1() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject1.kt");
          }

          @Test
          @TestMetadata("invokeOnObject2.kt")
          public void testInvokeOnObject2() {
            runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject2.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion")
      @TestDataPath("$PROJECT_ROOT")
      public class TailRecursion {
        @Test
        public void testAllFilesPresentInTailRecursion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/tailRecursion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("defaultArgs.kt")
        public void testDefaultArgs() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs.kt");
        }

        @Test
        @TestMetadata("defaultArgs2.kt")
        public void testDefaultArgs2() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs2.kt");
        }

        @Test
        @TestMetadata("defaultArgsOverridden.kt")
        public void testDefaultArgsOverridden() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsOverridden.kt");
        }

        @Test
        @TestMetadata("defaultArgsWithSideEffects.kt")
        public void testDefaultArgsWithSideEffects() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsWithSideEffects.kt");
        }

        @Test
        @TestMetadata("defaultArgsWithSideEffects2.kt")
        public void testDefaultArgsWithSideEffects2() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsWithSideEffects2.kt");
        }

        @Test
        @TestMetadata("extensionTailCall.kt")
        public void testExtensionTailCall() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/extensionTailCall.kt");
        }

        @Test
        @TestMetadata("functionWithNoTails.kt")
        public void testFunctionWithNoTails() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNoTails.kt");
        }

        @Test
        @TestMetadata("functionWithNonTailRecursions.kt")
        public void testFunctionWithNonTailRecursions() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNonTailRecursions.kt");
        }

        @Test
        @TestMetadata("functionWithoutAnnotation.kt")
        public void testFunctionWithoutAnnotation() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithoutAnnotation.kt");
        }

        @Test
        @TestMetadata("infixCall.kt")
        public void testInfixCall() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixCall.kt");
        }

        @Test
        @TestMetadata("infixRecursiveCall.kt")
        public void testInfixRecursiveCall() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixRecursiveCall.kt");
        }

        @Test
        @TestMetadata("insideElvis.kt")
        public void testInsideElvis() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/insideElvis.kt");
        }

        @Test
        @TestMetadata("kt47084_lambdaInDefaultArgument.kt")
        public void testKt47084_lambdaInDefaultArgument() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/kt47084_lambdaInDefaultArgument.kt");
        }

        @Test
        @TestMetadata("labeledThisReferences.kt")
        public void testLabeledThisReferences() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/labeledThisReferences.kt");
        }

        @Test
        @TestMetadata("loops.kt")
        public void testLoops() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/loops.kt");
        }

        @Test
        @TestMetadata("multilevelBlocks.kt")
        public void testMultilevelBlocks() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/multilevelBlocks.kt");
        }

        @Test
        @TestMetadata("realIteratorFoldl.kt")
        public void testRealIteratorFoldl() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realIteratorFoldl.kt");
        }

        @Test
        @TestMetadata("realStringEscape.kt")
        public void testRealStringEscape() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringEscape.kt");
        }

        @Test
        @TestMetadata("realStringRepeat.kt")
        public void testRealStringRepeat() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringRepeat.kt");
        }

        @Test
        @TestMetadata("recursiveCallInInlineLambda.kt")
        public void testRecursiveCallInInlineLambda() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInInlineLambda.kt");
        }

        @Test
        @TestMetadata("recursiveCallInInlineLambdaWithCapture.kt")
        public void testRecursiveCallInInlineLambdaWithCapture() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInInlineLambdaWithCapture.kt");
        }

        @Test
        @TestMetadata("recursiveCallInLambda.kt")
        public void testRecursiveCallInLambda() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLambda.kt");
        }

        @Test
        @TestMetadata("recursiveCallInLocalFunction.kt")
        public void testRecursiveCallInLocalFunction() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLocalFunction.kt");
        }

        @Test
        @TestMetadata("recursiveInnerFunction.kt")
        public void testRecursiveInnerFunction() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveInnerFunction.kt");
        }

        @Test
        @TestMetadata("returnIf.kt")
        public void testReturnIf() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnIf.kt");
        }

        @Test
        @TestMetadata("returnInCatch.kt")
        public void testReturnInCatch() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInCatch.kt");
        }

        @Test
        @TestMetadata("returnInFinally.kt")
        public void testReturnInFinally() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInFinally.kt");
        }

        @Test
        @TestMetadata("returnInIfInFinally.kt")
        public void testReturnInIfInFinally() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInIfInFinally.kt");
        }

        @Test
        @TestMetadata("returnInParentheses.kt")
        public void testReturnInParentheses() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInParentheses.kt");
        }

        @Test
        @TestMetadata("returnInTry.kt")
        public void testReturnInTry() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInTry.kt");
        }

        @Test
        @TestMetadata("simpleBlock.kt")
        public void testSimpleBlock() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleBlock.kt");
        }

        @Test
        @TestMetadata("simpleReturn.kt")
        public void testSimpleReturn() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturn.kt");
        }

        @Test
        @TestMetadata("simpleReturnWithElse.kt")
        public void testSimpleReturnWithElse() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturnWithElse.kt");
        }

        @Test
        @TestMetadata("sum.kt")
        public void testSum() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/sum.kt");
        }

        @Test
        @TestMetadata("tailCallInBlockInParentheses.kt")
        public void testTailCallInBlockInParentheses() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInBlockInParentheses.kt");
        }

        @Test
        @TestMetadata("tailCallInParentheses.kt")
        public void testTailCallInParentheses() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInParentheses.kt");
        }

        @Test
        @TestMetadata("tailRecursionInFinally.kt")
        public void testTailRecursionInFinally() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailRecursionInFinally.kt");
        }

        @Test
        @TestMetadata("tailrecWithExplicitCompanionObjectDispatcher.kt")
        public void testTailrecWithExplicitCompanionObjectDispatcher() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailrecWithExplicitCompanionObjectDispatcher.kt");
        }

        @Test
        @TestMetadata("tailrecWithExplicitObjectDispatcher.kt")
        public void testTailrecWithExplicitObjectDispatcher() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailrecWithExplicitObjectDispatcher.kt");
        }

        @Test
        @TestMetadata("thisReferences.kt")
        public void testThisReferences() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/thisReferences.kt");
        }

        @Test
        @TestMetadata("unitBlocks.kt")
        public void testUnitBlocks() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/unitBlocks.kt");
        }

        @Test
        @TestMetadata("whenWithCondition.kt")
        public void testWhenWithCondition() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithCondition.kt");
        }

        @Test
        @TestMetadata("whenWithInRange.kt")
        public void testWhenWithInRange() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithInRange.kt");
        }

        @Test
        @TestMetadata("whenWithIs.kt")
        public void testWhenWithIs() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithIs.kt");
        }

        @Test
        @TestMetadata("whenWithoutCondition.kt")
        public void testWhenWithoutCondition() {
          runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithoutCondition.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/diagnostics/vararg")
    @TestDataPath("$PROJECT_ROOT")
    public class Vararg {
      @Test
      public void testAllFilesPresentInVararg() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/vararg"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt4172.kt")
      public void testKt4172() {
        runTest("compiler/testData/codegen/box/diagnostics/vararg/kt4172.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/differentDependencyVersion")
  @TestDataPath("$PROJECT_ROOT")
  public class DifferentDependencyVersion {
    @Test
    public void testAllFilesPresentInDifferentDependencyVersion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/differentDependencyVersion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/directInvokeOptimization")
  @TestDataPath("$PROJECT_ROOT")
  public class DirectInvokeOptimization {
    @Test
    public void testAllFilesPresentInDirectInvokeOptimization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/directInvokeOptimization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("boundInnerContructorRef.kt")
    public void testBoundInnerContructorRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/boundInnerContructorRef.kt");
    }

    @Test
    @TestMetadata("boundMemberRef.kt")
    public void testBoundMemberRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/boundMemberRef.kt");
    }

    @Test
    @TestMetadata("canary.kt")
    public void testCanary() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/canary.kt");
    }

    @Test
    @TestMetadata("capturingLambda.kt")
    public void testCapturingLambda() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/capturingLambda.kt");
    }

    @Test
    @TestMetadata("contructorRef.kt")
    public void testContructorRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/contructorRef.kt");
    }

    @Test
    @TestMetadata("kt53202.kt")
    public void testKt53202() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/kt53202.kt");
    }

    @Test
    @TestMetadata("kt53202_funLiteral.kt")
    public void testKt53202_funLiteral() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/kt53202_funLiteral.kt");
    }

    @Test
    @TestMetadata("kt53202_returns.kt")
    public void testKt53202_returns() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/kt53202_returns.kt");
    }

    @Test
    @TestMetadata("nestedLambdas.kt")
    public void testNestedLambdas() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/nestedLambdas.kt");
    }

    @Test
    @TestMetadata("simpleAnonymousFun.kt")
    public void testSimpleAnonymousFun() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/simpleAnonymousFun.kt");
    }

    @Test
    @TestMetadata("simpleFunRef.kt")
    public void testSimpleFunRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/simpleFunRef.kt");
    }

    @Test
    @TestMetadata("simpleLambda.kt")
    public void testSimpleLambda() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/simpleLambda.kt");
    }

    @Test
    @TestMetadata("unboundInnerContructorRef.kt")
    public void testUnboundInnerContructorRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/unboundInnerContructorRef.kt");
    }

    @Test
    @TestMetadata("unboundMemberRef.kt")
    public void testUnboundMemberRef() {
      runTest("compiler/testData/codegen/box/directInvokeOptimization/unboundMemberRef.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/elvis")
  @TestDataPath("$PROJECT_ROOT")
  public class Elvis {
    @Test
    public void testAllFilesPresentInElvis() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/elvis"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("genericElvisWithMoreSpecificLHS.kt")
    public void testGenericElvisWithMoreSpecificLHS() {
      runTest("compiler/testData/codegen/box/elvis/genericElvisWithMoreSpecificLHS.kt");
    }

    @Test
    @TestMetadata("genericElvisWithNullLHS.kt")
    public void testGenericElvisWithNullLHS() {
      runTest("compiler/testData/codegen/box/elvis/genericElvisWithNullLHS.kt");
    }

    @Test
    @TestMetadata("genericNull.kt")
    public void testGenericNull() {
      runTest("compiler/testData/codegen/box/elvis/genericNull.kt");
    }

    @Test
    @TestMetadata("kt24209.kt")
    public void testKt24209() {
      runTest("compiler/testData/codegen/box/elvis/kt24209.kt");
    }

    @Test
    @TestMetadata("kt6694ExactAnnotationForElvis.kt")
    public void testKt6694ExactAnnotationForElvis() {
      runTest("compiler/testData/codegen/box/elvis/kt6694ExactAnnotationForElvis.kt");
    }

    @Test
    @TestMetadata("nullNullOk.kt")
    public void testNullNullOk() {
      runTest("compiler/testData/codegen/box/elvis/nullNullOk.kt");
    }

    @Test
    @TestMetadata("ofNonNullableResultType.kt")
    public void testOfNonNullableResultType() {
      runTest("compiler/testData/codegen/box/elvis/ofNonNullableResultType.kt");
    }

    @Test
    @TestMetadata("primitive.kt")
    public void testPrimitive() {
      runTest("compiler/testData/codegen/box/elvis/primitive.kt");
    }

    @Test
    @TestMetadata("withReturn.kt")
    public void testWithReturn() {
      runTest("compiler/testData/codegen/box/elvis/withReturn.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/enum")
  @TestDataPath("$PROJECT_ROOT")
  public class Enum {
    @Test
    @TestMetadata("abstractMethodInEnum.kt")
    public void testAbstractMethodInEnum() {
      runTest("compiler/testData/codegen/box/enum/abstractMethodInEnum.kt");
    }

    @Test
    @TestMetadata("abstractNestedClass.kt")
    public void testAbstractNestedClass() {
      runTest("compiler/testData/codegen/box/enum/abstractNestedClass.kt");
    }

    @Test
    public void testAllFilesPresentInEnum() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/enum"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("asReturnExpression.kt")
    public void testAsReturnExpression() {
      runTest("compiler/testData/codegen/box/enum/asReturnExpression.kt");
    }

    @Test
    @TestMetadata("companionAccessingEnumValue.kt")
    public void testCompanionAccessingEnumValue() {
      runTest("compiler/testData/codegen/box/enum/companionAccessingEnumValue.kt");
    }

    @Test
    @TestMetadata("companionObjectInEnum.kt")
    public void testCompanionObjectInEnum() {
      runTest("compiler/testData/codegen/box/enum/companionObjectInEnum.kt");
    }

    @Test
    @TestMetadata("constructorWithReordering.kt")
    public void testConstructorWithReordering() {
      runTest("compiler/testData/codegen/box/enum/constructorWithReordering.kt");
    }

    @Test
    @TestMetadata("deepInnerClassInEnumEntryClass.kt")
    public void testDeepInnerClassInEnumEntryClass() {
      runTest("compiler/testData/codegen/box/enum/deepInnerClassInEnumEntryClass.kt");
    }

    @Test
    @TestMetadata("deepInnerClassInEnumEntryClass2.kt")
    public void testDeepInnerClassInEnumEntryClass2() {
      runTest("compiler/testData/codegen/box/enum/deepInnerClassInEnumEntryClass2.kt");
    }

    @Test
    @TestMetadata("emptyConstructor.kt")
    public void testEmptyConstructor() {
      runTest("compiler/testData/codegen/box/enum/emptyConstructor.kt");
    }

    @Test
    @TestMetadata("emptyEnumValuesValueOf.kt")
    public void testEmptyEnumValuesValueOf() {
      runTest("compiler/testData/codegen/box/enum/emptyEnumValuesValueOf.kt");
    }

    @Test
    @TestMetadata("enumCompanionInitJsAndWasm.kt")
    public void testEnumCompanionInitJsAndWasm() {
      runTest("compiler/testData/codegen/box/enum/enumCompanionInitJsAndWasm.kt");
    }

    @Test
    @TestMetadata("enumConstructorParameterClashWithDefaults.kt")
    public void testEnumConstructorParameterClashWithDefaults() {
      runTest("compiler/testData/codegen/box/enum/enumConstructorParameterClashWithDefaults.kt");
    }

    @Test
    @TestMetadata("enumEntries.kt")
    public void testEnumEntries() {
      runTest("compiler/testData/codegen/box/enum/enumEntries.kt");
    }

    @Test
    @TestMetadata("enumEntriesCompatibilityCheck.kt")
    public void testEnumEntriesCompatibilityCheck() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesCompatibilityCheck.kt");
    }

    @Test
    @TestMetadata("enumEntriesInCompanion.kt")
    public void testEnumEntriesInCompanion() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesInCompanion.kt");
    }

    @Test
    @TestMetadata("enumEntriesIntrinsicWithoutFeature.kt")
    public void testEnumEntriesIntrinsicWithoutFeature() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesIntrinsicWithoutFeature.kt");
    }

    @Test
    @TestMetadata("enumEntriesMultimoduleNoMappings.kt")
    public void testEnumEntriesMultimoduleNoMappings() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesMultimoduleNoMappings.kt");
    }

    @Test
    @TestMetadata("enumEntriesNameClashes.kt")
    public void testEnumEntriesNameClashes() {
      runTest("compiler/testData/codegen/box/enum/enumEntriesNameClashes.kt");
    }

    @Test
    @TestMetadata("enumEntryHashCode.kt")
    public void testEnumEntryHashCode() {
      runTest("compiler/testData/codegen/box/enum/enumEntryHashCode.kt");
    }

    @Test
    @TestMetadata("enumEntryMembers.kt")
    public void testEnumEntryMembers() {
      runTest("compiler/testData/codegen/box/enum/enumEntryMembers.kt");
    }

    @Test
    @TestMetadata("enumEntryReferenceFromInnerClassConstructor1.kt")
    public void testEnumEntryReferenceFromInnerClassConstructor1() {
      runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor1.kt");
    }

    @Test
    @TestMetadata("enumEntryReferenceFromInnerClassConstructor2.kt")
    public void testEnumEntryReferenceFromInnerClassConstructor2() {
      runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor2.kt");
    }

    @Test
    @TestMetadata("enumEntryReferenceFromInnerClassConstructor3.kt")
    public void testEnumEntryReferenceFromInnerClassConstructor3() {
      runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor3.kt");
    }

    @Test
    @TestMetadata("enumInheritedFromTrait.kt")
    public void testEnumInheritedFromTrait() {
      runTest("compiler/testData/codegen/box/enum/enumInheritedFromTrait.kt");
    }

    @Test
    @TestMetadata("enumMultiModule.kt")
    public void testEnumMultiModule() {
      runTest("compiler/testData/codegen/box/enum/enumMultiModule.kt");
    }

    @Test
    @TestMetadata("enumShort.kt")
    public void testEnumShort() {
      runTest("compiler/testData/codegen/box/enum/enumShort.kt");
    }

    @Test
    @TestMetadata("enumValueOf.kt")
    public void testEnumValueOf() {
      runTest("compiler/testData/codegen/box/enum/enumValueOf.kt");
    }

    @Test
    @TestMetadata("enumWithLambdaParameter.kt")
    public void testEnumWithLambdaParameter() {
      runTest("compiler/testData/codegen/box/enum/enumWithLambdaParameter.kt");
    }

    @Test
    @TestMetadata("getEnumEntityByOrdinal.kt")
    public void testGetEnumEntityByOrdinal() {
      runTest("compiler/testData/codegen/box/enum/getEnumEntityByOrdinal.kt");
    }

    @Test
    @TestMetadata("inPackage.kt")
    public void testInPackage() {
      runTest("compiler/testData/codegen/box/enum/inPackage.kt");
    }

    @Test
    @TestMetadata("inclassobj.kt")
    public void testInclassobj() {
      runTest("compiler/testData/codegen/box/enum/inclassobj.kt");
    }

    @Test
    @TestMetadata("initEntriesInCompanionObject.kt")
    public void testInitEntriesInCompanionObject() {
      runTest("compiler/testData/codegen/box/enum/initEntriesInCompanionObject.kt");
    }

    @Test
    @TestMetadata("initEntriesInCompanionObject2.kt")
    public void testInitEntriesInCompanionObject2() {
      runTest("compiler/testData/codegen/box/enum/initEntriesInCompanionObject2.kt");
    }

    @Test
    @TestMetadata("initEntriesInValueOf.kt")
    public void testInitEntriesInValueOf() {
      runTest("compiler/testData/codegen/box/enum/initEntriesInValueOf.kt");
    }

    @Test
    @TestMetadata("initEnumAfterObjectAccessJsAndWasm.kt")
    public void testInitEnumAfterObjectAccessJsAndWasm() {
      runTest("compiler/testData/codegen/box/enum/initEnumAfterObjectAccessJsAndWasm.kt");
    }

    @Test
    @TestMetadata("inner.kt")
    public void testInner() {
      runTest("compiler/testData/codegen/box/enum/inner.kt");
    }

    @Test
    @TestMetadata("innerClassInEnumEntryClass.kt")
    public void testInnerClassInEnumEntryClass() {
      runTest("compiler/testData/codegen/box/enum/innerClassInEnumEntryClass.kt");
    }

    @Test
    @TestMetadata("innerClassMethodInEnumEntryClass.kt")
    public void testInnerClassMethodInEnumEntryClass() {
      runTest("compiler/testData/codegen/box/enum/innerClassMethodInEnumEntryClass.kt");
    }

    @Test
    @TestMetadata("innerClassMethodInEnumEntryClass2.kt")
    public void testInnerClassMethodInEnumEntryClass2() {
      runTest("compiler/testData/codegen/box/enum/innerClassMethodInEnumEntryClass2.kt");
    }

    @Test
    @TestMetadata("innerWithExistingClassObject.kt")
    public void testInnerWithExistingClassObject() {
      runTest("compiler/testData/codegen/box/enum/innerWithExistingClassObject.kt");
    }

    @Test
    @TestMetadata("k54079.kt")
    public void testK54079() {
      runTest("compiler/testData/codegen/box/enum/k54079.kt");
    }

    @Test
    @TestMetadata("kt1119.kt")
    public void testKt1119() {
      runTest("compiler/testData/codegen/box/enum/kt1119.kt");
    }

    @Test
    @TestMetadata("kt18731.kt")
    public void testKt18731() {
      runTest("compiler/testData/codegen/box/enum/kt18731.kt");
    }

    @Test
    @TestMetadata("kt18731_2.kt")
    public void testKt18731_2() {
      runTest("compiler/testData/codegen/box/enum/kt18731_2.kt");
    }

    @Test
    @TestMetadata("kt20651.kt")
    public void testKt20651() {
      runTest("compiler/testData/codegen/box/enum/kt20651.kt");
    }

    @Test
    @TestMetadata("kt20651_inlineLambda.kt")
    public void testKt20651_inlineLambda() {
      runTest("compiler/testData/codegen/box/enum/kt20651_inlineLambda.kt");
    }

    @Test
    @TestMetadata("kt20651a.kt")
    public void testKt20651a() {
      runTest("compiler/testData/codegen/box/enum/kt20651a.kt");
    }

    @Test
    @TestMetadata("kt20651b.kt")
    public void testKt20651b() {
      runTest("compiler/testData/codegen/box/enum/kt20651b.kt");
    }

    @Test
    @TestMetadata("kt2350.kt")
    public void testKt2350() {
      runTest("compiler/testData/codegen/box/enum/kt2350.kt");
    }

    @Test
    @TestMetadata("kt38996.kt")
    public void testKt38996() {
      runTest("compiler/testData/codegen/box/enum/kt38996.kt");
    }

    @Test
    @TestMetadata("kt44744.kt")
    public void testKt44744() {
      runTest("compiler/testData/codegen/box/enum/kt44744.kt");
    }

    @Test
    @TestMetadata("kt44744_innerClass.kt")
    public void testKt44744_innerClass() {
      runTest("compiler/testData/codegen/box/enum/kt44744_innerClass.kt");
    }

    @Test
    @TestMetadata("kt46605.kt")
    public void testKt46605() {
      runTest("compiler/testData/codegen/box/enum/kt46605.kt");
    }

    @Test
    @TestMetadata("kt7257.kt")
    public void testKt7257() {
      runTest("compiler/testData/codegen/box/enum/kt7257.kt");
    }

    @Test
    @TestMetadata("kt7257_anonObjectInit.kt")
    public void testKt7257_anonObjectInit() {
      runTest("compiler/testData/codegen/box/enum/kt7257_anonObjectInit.kt");
    }

    @Test
    @TestMetadata("kt7257_anonObjectMethod.kt")
    public void testKt7257_anonObjectMethod() {
      runTest("compiler/testData/codegen/box/enum/kt7257_anonObjectMethod.kt");
    }

    @Test
    @TestMetadata("kt7257_boundReference1.kt")
    public void testKt7257_boundReference1() {
      runTest("compiler/testData/codegen/box/enum/kt7257_boundReference1.kt");
    }

    @Test
    @TestMetadata("kt7257_boundReference2.kt")
    public void testKt7257_boundReference2() {
      runTest("compiler/testData/codegen/box/enum/kt7257_boundReference2.kt");
    }

    @Test
    @TestMetadata("kt7257_boundReferenceWithImplicitReceiver.kt")
    public void testKt7257_boundReferenceWithImplicitReceiver() {
      runTest("compiler/testData/codegen/box/enum/kt7257_boundReferenceWithImplicitReceiver.kt");
    }

    @Test
    @TestMetadata("kt7257_explicitReceiver.kt")
    public void testKt7257_explicitReceiver() {
      runTest("compiler/testData/codegen/box/enum/kt7257_explicitReceiver.kt");
    }

    @Test
    @TestMetadata("kt7257_fullyQualifiedReceiver.kt")
    public void testKt7257_fullyQualifiedReceiver() {
      runTest("compiler/testData/codegen/box/enum/kt7257_fullyQualifiedReceiver.kt");
    }

    @Test
    @TestMetadata("kt7257_namedLocalFun.kt")
    public void testKt7257_namedLocalFun() {
      runTest("compiler/testData/codegen/box/enum/kt7257_namedLocalFun.kt");
    }

    @Test
    @TestMetadata("kt7257_notInline.kt")
    public void testKt7257_notInline() {
      runTest("compiler/testData/codegen/box/enum/kt7257_notInline.kt");
    }

    @Test
    @TestMetadata("kt9711.kt")
    public void testKt9711() {
      runTest("compiler/testData/codegen/box/enum/kt9711.kt");
    }

    @Test
    @TestMetadata("kt9711_2.kt")
    public void testKt9711_2() {
      runTest("compiler/testData/codegen/box/enum/kt9711_2.kt");
    }

    @Test
    @TestMetadata("manyDefaultParameters.kt")
    public void testManyDefaultParameters() {
      runTest("compiler/testData/codegen/box/enum/manyDefaultParameters.kt");
    }

    @Test
    @TestMetadata("ordinal.kt")
    public void testOrdinal() {
      runTest("compiler/testData/codegen/box/enum/ordinal.kt");
    }

    @Test
    @TestMetadata("ordinalsWithEnumEntitiesOverrides.kt")
    public void testOrdinalsWithEnumEntitiesOverrides() {
      runTest("compiler/testData/codegen/box/enum/ordinalsWithEnumEntitiesOverrides.kt");
    }

    @Test
    @TestMetadata("overloadedEnumValues.kt")
    public void testOverloadedEnumValues() {
      runTest("compiler/testData/codegen/box/enum/overloadedEnumValues.kt");
    }

    @Test
    @TestMetadata("refToThis.kt")
    public void testRefToThis() {
      runTest("compiler/testData/codegen/box/enum/refToThis.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/enum/simple.kt");
    }

    @Test
    @TestMetadata("sortEnumEntries.kt")
    public void testSortEnumEntries() {
      runTest("compiler/testData/codegen/box/enum/sortEnumEntries.kt");
    }

    @Test
    @TestMetadata("superCallInEnumLiteral.kt")
    public void testSuperCallInEnumLiteral() {
      runTest("compiler/testData/codegen/box/enum/superCallInEnumLiteral.kt");
    }

    @Test
    @TestMetadata("toString.kt")
    public void testToString() {
      runTest("compiler/testData/codegen/box/enum/toString.kt");
    }

    @Test
    @TestMetadata("valueof.kt")
    public void testValueof() {
      runTest("compiler/testData/codegen/box/enum/valueof.kt");
    }

    @Test
    @TestMetadata("whenInObject.kt")
    public void testWhenInObject() {
      runTest("compiler/testData/codegen/box/enum/whenInObject.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/enum/defaultCtor")
    @TestDataPath("$PROJECT_ROOT")
    public class DefaultCtor {
      @Test
      public void testAllFilesPresentInDefaultCtor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/enum/defaultCtor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("constructorWithDefaultArguments.kt")
      public void testConstructorWithDefaultArguments() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/constructorWithDefaultArguments.kt");
      }

      @Test
      @TestMetadata("constructorWithVararg.kt")
      public void testConstructorWithVararg() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/constructorWithVararg.kt");
      }

      @Test
      @TestMetadata("entryClassConstructorWithDefaultArguments.kt")
      public void testEntryClassConstructorWithDefaultArguments() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/entryClassConstructorWithDefaultArguments.kt");
      }

      @Test
      @TestMetadata("entryClassConstructorWithVarargs.kt")
      public void testEntryClassConstructorWithVarargs() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/entryClassConstructorWithVarargs.kt");
      }

      @Test
      @TestMetadata("noPrimaryConstructor.kt")
      public void testNoPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/noPrimaryConstructor.kt");
      }

      @Test
      @TestMetadata("secondaryConstructorWithDefaultArguments.kt")
      public void testSecondaryConstructorWithDefaultArguments() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/secondaryConstructorWithDefaultArguments.kt");
      }

      @Test
      @TestMetadata("secondaryConstructorWithVararg.kt")
      public void testSecondaryConstructorWithVararg() {
        runTest("compiler/testData/codegen/box/enum/defaultCtor/secondaryConstructorWithVararg.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/equivalentCalls")
  @TestDataPath("$PROJECT_ROOT")
  public class EquivalentCalls {
    @Test
    public void testAllFilesPresentInEquivalentCalls() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/equivalentCalls"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("localEquivalentWins.kt")
    public void testLocalEquivalentWins() {
      runTest("compiler/testData/codegen/box/equivalentCalls/localEquivalentWins.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/evaluate")
  @TestDataPath("$PROJECT_ROOT")
  public class Evaluate {
    @Test
    public void testAllFilesPresentInEvaluate() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/evaluate"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("kt9443.kt")
    public void testKt9443() {
      runTest("compiler/testData/codegen/box/evaluate/kt9443.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/exclExcl")
  @TestDataPath("$PROJECT_ROOT")
  public class ExclExcl {
    @Test
    public void testAllFilesPresentInExclExcl() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/exclExcl"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("genericNull.kt")
    public void testGenericNull() {
      runTest("compiler/testData/codegen/box/exclExcl/genericNull.kt");
    }

    @Test
    @TestMetadata("kt48440.kt")
    public void testKt48440() {
      runTest("compiler/testData/codegen/box/exclExcl/kt48440.kt");
    }

    @Test
    @TestMetadata("kt48440_2.kt")
    public void testKt48440_2() {
      runTest("compiler/testData/codegen/box/exclExcl/kt48440_2.kt");
    }

    @Test
    @TestMetadata("primitive.kt")
    public void testPrimitive() {
      runTest("compiler/testData/codegen/box/exclExcl/primitive.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/extensionClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class ExtensionClasses {
    @Test
    public void testAllFilesPresentInExtensionClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/extensionFunctions")
  @TestDataPath("$PROJECT_ROOT")
  public class ExtensionFunctions {
    @Test
    public void testAllFilesPresentInExtensionFunctions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionFunctions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("classMethodCallExtensionSuper.kt")
    public void testClassMethodCallExtensionSuper() {
      runTest("compiler/testData/codegen/box/extensionFunctions/classMethodCallExtensionSuper.kt");
    }

    @Test
    @TestMetadata("defaultMethodInterfaceCallExtensionSuper.kt")
    public void testDefaultMethodInterfaceCallExtensionSuper() {
      runTest("compiler/testData/codegen/box/extensionFunctions/defaultMethodInterfaceCallExtensionSuper.kt");
    }

    @Test
    @TestMetadata("executionOrder.kt")
    public void testExecutionOrder() {
      runTest("compiler/testData/codegen/box/extensionFunctions/executionOrder.kt");
    }

    @Test
    @TestMetadata("extensionFunctionAsSupertype.kt")
    public void testExtensionFunctionAsSupertype() {
      runTest("compiler/testData/codegen/box/extensionFunctions/extensionFunctionAsSupertype.kt");
    }

    @Test
    @TestMetadata("kt1061.kt")
    public void testKt1061() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1061.kt");
    }

    @Test
    @TestMetadata("kt1249.kt")
    public void testKt1249() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1249.kt");
    }

    @Test
    @TestMetadata("kt1290.kt")
    public void testKt1290() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1290.kt");
    }

    @Test
    @TestMetadata("kt13312.kt")
    public void testKt13312() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt13312.kt");
    }

    @Test
    @TestMetadata("kt1776.kt")
    public void testKt1776() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1776.kt");
    }

    @Test
    @TestMetadata("kt1953.kt")
    public void testKt1953() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1953.kt");
    }

    @Test
    @TestMetadata("kt1953_class.kt")
    public void testKt1953_class() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt1953_class.kt");
    }

    @Test
    @TestMetadata("kt23675.kt")
    public void testKt23675() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt23675.kt");
    }

    @Test
    @TestMetadata("kt3285.kt")
    public void testKt3285() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt3285.kt");
    }

    @Test
    @TestMetadata("kt3298.kt")
    public void testKt3298() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt3298.kt");
    }

    @Test
    @TestMetadata("kt3646.kt")
    public void testKt3646() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt3646.kt");
    }

    @Test
    @TestMetadata("kt3969.kt")
    public void testKt3969() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt3969.kt");
    }

    @Test
    @TestMetadata("kt4228.kt")
    public void testKt4228() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt4228.kt");
    }

    @Test
    @TestMetadata("kt475.kt")
    public void testKt475() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt475.kt");
    }

    @Test
    @TestMetadata("kt5467.kt")
    public void testKt5467() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt5467.kt");
    }

    @Test
    @TestMetadata("kt606.kt")
    public void testKt606() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt606.kt");
    }

    @Test
    @TestMetadata("kt865.kt")
    public void testKt865() {
      runTest("compiler/testData/codegen/box/extensionFunctions/kt865.kt");
    }

    @Test
    @TestMetadata("memberExtensionEqualsHashCodeToStringInInterface.kt")
    public void testMemberExtensionEqualsHashCodeToStringInInterface() {
      runTest("compiler/testData/codegen/box/extensionFunctions/memberExtensionEqualsHashCodeToStringInInterface.kt");
    }

    @Test
    @TestMetadata("nested2.kt")
    public void testNested2() {
      runTest("compiler/testData/codegen/box/extensionFunctions/nested2.kt");
    }

    @Test
    @TestMetadata("shared.kt")
    public void testShared() {
      runTest("compiler/testData/codegen/box/extensionFunctions/shared.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/extensionFunctions/simple.kt");
    }

    @Test
    @TestMetadata("thisMethodInObjectLiteral.kt")
    public void testThisMethodInObjectLiteral() {
      runTest("compiler/testData/codegen/box/extensionFunctions/thisMethodInObjectLiteral.kt");
    }

    @Test
    @TestMetadata("virtual.kt")
    public void testVirtual() {
      runTest("compiler/testData/codegen/box/extensionFunctions/virtual.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/extensionFunctions/contextReceivers")
    @TestDataPath("$PROJECT_ROOT")
    public class ContextReceivers {
      @Test
      public void testAllFilesPresentInContextReceivers() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionFunctions/contextReceivers"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP")
      @TestDataPath("$PROJECT_ROOT")
      public class FromKEEP {
        @Test
        public void testAllFilesPresentInFromKEEP() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionFunctions/contextReceivers/fromKEEP"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/extensionProperties")
  @TestDataPath("$PROJECT_ROOT")
  public class ExtensionProperties {
    @Test
    @TestMetadata("accessorForPrivateSetter.kt")
    public void testAccessorForPrivateSetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/accessorForPrivateSetter.kt");
    }

    @Test
    public void testAllFilesPresentInExtensionProperties() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionProperties"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("genericContextOverride.kt")
    public void testGenericContextOverride() {
      runTest("compiler/testData/codegen/box/extensionProperties/genericContextOverride.kt");
    }

    @Test
    @TestMetadata("genericValForPrimitiveType.kt")
    public void testGenericValForPrimitiveType() {
      runTest("compiler/testData/codegen/box/extensionProperties/genericValForPrimitiveType.kt");
    }

    @Test
    @TestMetadata("genericVarForPrimitiveType.kt")
    public void testGenericVarForPrimitiveType() {
      runTest("compiler/testData/codegen/box/extensionProperties/genericVarForPrimitiveType.kt");
    }

    @Test
    @TestMetadata("inClass.kt")
    public void testInClass() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClass.kt");
    }

    @Test
    @TestMetadata("inClassLongTypeInReceiver.kt")
    public void testInClassLongTypeInReceiver() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassLongTypeInReceiver.kt");
    }

    @Test
    @TestMetadata("inClassWithGetter.kt")
    public void testInClassWithGetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassWithGetter.kt");
    }

    @Test
    @TestMetadata("inClassWithPrivateGetter.kt")
    public void testInClassWithPrivateGetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateGetter.kt");
    }

    @Test
    @TestMetadata("inClassWithPrivateSetter.kt")
    public void testInClassWithPrivateSetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateSetter.kt");
    }

    @Test
    @TestMetadata("inClassWithSetter.kt")
    public void testInClassWithSetter() {
      runTest("compiler/testData/codegen/box/extensionProperties/inClassWithSetter.kt");
    }

    @Test
    @TestMetadata("kt46952.kt")
    public void testKt46952() {
      runTest("compiler/testData/codegen/box/extensionProperties/kt46952.kt");
    }

    @Test
    @TestMetadata("kt9897.kt")
    public void testKt9897() {
      runTest("compiler/testData/codegen/box/extensionProperties/kt9897.kt");
    }

    @Test
    @TestMetadata("kt9897_topLevel.kt")
    public void testKt9897_topLevel() {
      runTest("compiler/testData/codegen/box/extensionProperties/kt9897_topLevel.kt");
    }

    @Test
    @TestMetadata("nonAbstractInInterface.kt")
    public void testNonAbstractInInterface() {
      runTest("compiler/testData/codegen/box/extensionProperties/nonAbstractInInterface.kt");
    }

    @Test
    @TestMetadata("topLevel.kt")
    public void testTopLevel() {
      runTest("compiler/testData/codegen/box/extensionProperties/topLevel.kt");
    }

    @Test
    @TestMetadata("topLevelLongTypeInReceiver.kt")
    public void testTopLevelLongTypeInReceiver() {
      runTest("compiler/testData/codegen/box/extensionProperties/topLevelLongTypeInReceiver.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/external")
  @TestDataPath("$PROJECT_ROOT")
  public class External {
    @Test
    public void testAllFilesPresentInExternal() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/external"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/fakeOverride")
  @TestDataPath("$PROJECT_ROOT")
  public class FakeOverride {
    @Test
    public void testAllFilesPresentInFakeOverride() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fakeOverride"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("diamondFunction.kt")
    public void testDiamondFunction() {
      runTest("compiler/testData/codegen/box/fakeOverride/diamondFunction.kt");
    }

    @Test
    @TestMetadata("fakeOverrideOfPrivateSetter.kt")
    public void testFakeOverrideOfPrivateSetter() {
      runTest("compiler/testData/codegen/box/fakeOverride/fakeOverrideOfPrivateSetter.kt");
    }

    @Test
    @TestMetadata("function.kt")
    public void testFunction() {
      runTest("compiler/testData/codegen/box/fakeOverride/function.kt");
    }

    @Test
    @TestMetadata("internalFromFriendModule.kt")
    public void testInternalFromFriendModule() {
      runTest("compiler/testData/codegen/box/fakeOverride/internalFromFriendModule.kt");
    }

    @Test
    @TestMetadata("intersectionInLocal.kt")
    public void testIntersectionInLocal() {
      runTest("compiler/testData/codegen/box/fakeOverride/intersectionInLocal.kt");
    }

    @Test
    @TestMetadata("intersectionOverrideBetweenValAndVar.kt")
    public void testIntersectionOverrideBetweenValAndVar() {
      runTest("compiler/testData/codegen/box/fakeOverride/intersectionOverrideBetweenValAndVar.kt");
    }

    @Test
    @TestMetadata("kt49371.kt")
    public void testKt49371() {
      runTest("compiler/testData/codegen/box/fakeOverride/kt49371.kt");
    }

    @Test
    @TestMetadata("methodOfAnyFromInterface.kt")
    public void testMethodOfAnyFromInterface() {
      runTest("compiler/testData/codegen/box/fakeOverride/methodOfAnyFromInterface.kt");
    }

    @Test
    @TestMetadata("privateFakeOverrides0.kt")
    public void testPrivateFakeOverrides0() {
      runTest("compiler/testData/codegen/box/fakeOverride/privateFakeOverrides0.kt");
    }

    @Test
    @TestMetadata("privateFakeOverrides1.kt")
    public void testPrivateFakeOverrides1() {
      runTest("compiler/testData/codegen/box/fakeOverride/privateFakeOverrides1.kt");
    }

    @Test
    @TestMetadata("propertyGetter.kt")
    public void testPropertyGetter() {
      runTest("compiler/testData/codegen/box/fakeOverride/propertyGetter.kt");
    }

    @Test
    @TestMetadata("propertySetter.kt")
    public void testPropertySetter() {
      runTest("compiler/testData/codegen/box/fakeOverride/propertySetter.kt");
    }

    @Test
    @TestMetadata("substitutionInLocal.kt")
    public void testSubstitutionInLocal() {
      runTest("compiler/testData/codegen/box/fakeOverride/substitutionInLocal.kt");
    }

    @Test
    @TestMetadata("varianceOverload.kt")
    public void testVarianceOverload() {
      runTest("compiler/testData/codegen/box/fakeOverride/varianceOverload.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/fieldRename")
  @TestDataPath("$PROJECT_ROOT")
  public class FieldRename {
    @Test
    public void testAllFilesPresentInFieldRename() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fieldRename"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("constructorAndClassObject.kt")
    public void testConstructorAndClassObject() {
      runTest("compiler/testData/codegen/box/fieldRename/constructorAndClassObject.kt");
    }

    @Test
    @TestMetadata("delegates.kt")
    public void testDelegates() {
      runTest("compiler/testData/codegen/box/fieldRename/delegates.kt");
    }

    @Test
    @TestMetadata("genericPropertyWithItself.kt")
    public void testGenericPropertyWithItself() {
      runTest("compiler/testData/codegen/box/fieldRename/genericPropertyWithItself.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/finally")
  @TestDataPath("$PROJECT_ROOT")
  public class Finally {
    @Test
    public void testAllFilesPresentInFinally() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/finally"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("breakAndOuterFinally.kt")
    public void testBreakAndOuterFinally() {
      runTest("compiler/testData/codegen/box/finally/breakAndOuterFinally.kt");
    }

    @Test
    @TestMetadata("continueAndOuterFinally.kt")
    public void testContinueAndOuterFinally() {
      runTest("compiler/testData/codegen/box/finally/continueAndOuterFinally.kt");
    }

    @Test
    @TestMetadata("decrementInFinally.kt")
    public void testDecrementInFinally() {
      runTest("compiler/testData/codegen/box/finally/decrementInFinally.kt");
    }

    @Test
    @TestMetadata("finallyAndFinally.kt")
    public void testFinallyAndFinally() {
      runTest("compiler/testData/codegen/box/finally/finallyAndFinally.kt");
    }

    @Test
    @TestMetadata("kt31923_break.kt")
    public void testKt31923_break() {
      runTest("compiler/testData/codegen/box/finally/kt31923_break.kt");
    }

    @Test
    @TestMetadata("kt31923_continue.kt")
    public void testKt31923_continue() {
      runTest("compiler/testData/codegen/box/finally/kt31923_continue.kt");
    }

    @Test
    @TestMetadata("kt31923_return.kt")
    public void testKt31923_return() {
      runTest("compiler/testData/codegen/box/finally/kt31923_return.kt");
    }

    @Test
    @TestMetadata("kt3549.kt")
    public void testKt3549() {
      runTest("compiler/testData/codegen/box/finally/kt3549.kt");
    }

    @Test
    @TestMetadata("kt3706.kt")
    public void testKt3706() {
      runTest("compiler/testData/codegen/box/finally/kt3706.kt");
    }

    @Test
    @TestMetadata("kt3867.kt")
    public void testKt3867() {
      runTest("compiler/testData/codegen/box/finally/kt3867.kt");
    }

    @Test
    @TestMetadata("kt3874.kt")
    public void testKt3874() {
      runTest("compiler/testData/codegen/box/finally/kt3874.kt");
    }

    @Test
    @TestMetadata("kt3894.kt")
    public void testKt3894() {
      runTest("compiler/testData/codegen/box/finally/kt3894.kt");
    }

    @Test
    @TestMetadata("kt4134.kt")
    public void testKt4134() {
      runTest("compiler/testData/codegen/box/finally/kt4134.kt");
    }

    @Test
    @TestMetadata("loopAndFinally.kt")
    public void testLoopAndFinally() {
      runTest("compiler/testData/codegen/box/finally/loopAndFinally.kt");
    }

    @Test
    @TestMetadata("nestedFinallyAndNonFinallyTry.kt")
    public void testNestedFinallyAndNonFinallyTry() {
      runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry.kt");
    }

    @Test
    @TestMetadata("nestedFinallyAndNonFinallyTry2.kt")
    public void testNestedFinallyAndNonFinallyTry2() {
      runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry2.kt");
    }

    @Test
    @TestMetadata("nestedFinallyAndNonFinallyTry3.kt")
    public void testNestedFinallyAndNonFinallyTry3() {
      runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry3.kt");
    }

    @Test
    @TestMetadata("nestedFinallyAndNonFinallyTry4.kt")
    public void testNestedFinallyAndNonFinallyTry4() {
      runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry4.kt");
    }

    @Test
    @TestMetadata("notChainCatch.kt")
    public void testNotChainCatch() {
      runTest("compiler/testData/codegen/box/finally/notChainCatch.kt");
    }

    @Test
    @TestMetadata("objectInFinally.kt")
    public void testObjectInFinally() {
      runTest("compiler/testData/codegen/box/finally/objectInFinally.kt");
    }

    @Test
    @TestMetadata("returnNullFromInlined.kt")
    public void testReturnNullFromInlined() {
      runTest("compiler/testData/codegen/box/finally/returnNullFromInlined.kt");
    }

    @Test
    @TestMetadata("someStuff.kt")
    public void testSomeStuff() {
      runTest("compiler/testData/codegen/box/finally/someStuff.kt");
    }

    @Test
    @TestMetadata("tryFinally.kt")
    public void testTryFinally() {
      runTest("compiler/testData/codegen/box/finally/tryFinally.kt");
    }

    @Test
    @TestMetadata("tryLoopTry.kt")
    public void testTryLoopTry() {
      runTest("compiler/testData/codegen/box/finally/tryLoopTry.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/fir")
  @TestDataPath("$PROJECT_ROOT")
  public class Fir {
    @Test
    public void testAllFilesPresentInFir() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fir"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("anonymousOverrideWithDefaultInLocalOverridden.kt")
    public void testAnonymousOverrideWithDefaultInLocalOverridden() {
      runTest("compiler/testData/codegen/box/fir/anonymousOverrideWithDefaultInLocalOverridden.kt");
    }

    @Test
    @TestMetadata("anonymousOverrideWithDefaultInOverridden.kt")
    public void testAnonymousOverrideWithDefaultInOverridden() {
      runTest("compiler/testData/codegen/box/fir/anonymousOverrideWithDefaultInOverridden.kt");
    }

    @Test
    @TestMetadata("classCanNotBeCastedToVoid.kt")
    public void testClassCanNotBeCastedToVoid() {
      runTest("compiler/testData/codegen/box/fir/classCanNotBeCastedToVoid.kt");
    }

    @Test
    @TestMetadata("deserializedOptInDeprecated.kt")
    public void testDeserializedOptInDeprecated() {
      runTest("compiler/testData/codegen/box/fir/deserializedOptInDeprecated.kt");
    }

    @Test
    @TestMetadata("falsePositiveBoundSmartcast.kt")
    public void testFalsePositiveBoundSmartcast() {
      runTest("compiler/testData/codegen/box/fir/falsePositiveBoundSmartcast.kt");
    }

    @Test
    @TestMetadata("functionsDifferInTypeParameterBounds.kt")
    public void testFunctionsDifferInTypeParameterBounds() {
      runTest("compiler/testData/codegen/box/fir/functionsDifferInTypeParameterBounds.kt");
    }

    @Test
    @TestMetadata("functionsDifferInTypeParameterBounds2.kt")
    public void testFunctionsDifferInTypeParameterBounds2() {
      runTest("compiler/testData/codegen/box/fir/functionsDifferInTypeParameterBounds2.kt");
    }

    @Test
    @TestMetadata("functionsDifferInTypeParameterBounds3.kt")
    public void testFunctionsDifferInTypeParameterBounds3() {
      runTest("compiler/testData/codegen/box/fir/functionsDifferInTypeParameterBounds3.kt");
    }

    @Test
    @TestMetadata("listAssignmentInWhen.kt")
    public void testListAssignmentInWhen() {
      runTest("compiler/testData/codegen/box/fir/listAssignmentInWhen.kt");
    }

    @Test
    @TestMetadata("localInvokeExtension.kt")
    public void testLocalInvokeExtension() {
      runTest("compiler/testData/codegen/box/fir/localInvokeExtension.kt");
    }

    @Test
    @TestMetadata("localOverrideWithDefaultInLocalOverridden.kt")
    public void testLocalOverrideWithDefaultInLocalOverridden() {
      runTest("compiler/testData/codegen/box/fir/localOverrideWithDefaultInLocalOverridden.kt");
    }

    @Test
    @TestMetadata("localOverrideWithDefaultInOverridden.kt")
    public void testLocalOverrideWithDefaultInOverridden() {
      runTest("compiler/testData/codegen/box/fir/localOverrideWithDefaultInOverridden.kt");
    }

    @Test
    @TestMetadata("missingDependencyClassInTypeArguments.kt")
    public void testMissingDependencyClassInTypeArguments() {
      runTest("compiler/testData/codegen/box/fir/missingDependencyClassInTypeArguments.kt");
    }

    @Test
    @TestMetadata("nestedClassTypeParameterDeserialization.kt")
    public void testNestedClassTypeParameterDeserialization() {
      runTest("compiler/testData/codegen/box/fir/nestedClassTypeParameterDeserialization.kt");
    }

    @Test
    @TestMetadata("SamWithReceiverMavenProjectImportHandler.kt")
    public void testSamWithReceiverMavenProjectImportHandler() {
      runTest("compiler/testData/codegen/box/fir/SamWithReceiverMavenProjectImportHandler.kt");
    }

    @Test
    @TestMetadata("smartCastToInvisibleClassMember.kt")
    public void testSmartCastToInvisibleClassMember() {
      runTest("compiler/testData/codegen/box/fir/smartCastToInvisibleClassMember.kt");
    }

    @Test
    @TestMetadata("sourceBinarySource.kt")
    public void testSourceBinarySource() {
      runTest("compiler/testData/codegen/box/fir/sourceBinarySource.kt");
    }

    @Test
    @TestMetadata("starProjectionLambdaNullReturn.kt")
    public void testStarProjectionLambdaNullReturn() {
      runTest("compiler/testData/codegen/box/fir/starProjectionLambdaNullReturn.kt");
    }

    @Test
    @TestMetadata("suppressedInvisibleReferenceQualifier.kt")
    public void testSuppressedInvisibleReferenceQualifier() {
      runTest("compiler/testData/codegen/box/fir/suppressedInvisibleReferenceQualifier.kt");
    }

    @Test
    @TestMetadata("toLong.kt")
    public void testToLong() {
      runTest("compiler/testData/codegen/box/fir/toLong.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/fir/primitivesInJava")
    @TestDataPath("$PROJECT_ROOT")
    public class PrimitivesInJava {
      @Test
      public void testAllFilesPresentInPrimitivesInJava() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fir/primitivesInJava"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/fullJdk")
  @TestDataPath("$PROJECT_ROOT")
  public class FullJdk {
    @Test
    public void testAllFilesPresentInFullJdk() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/fullJdk/native")
    @TestDataPath("$PROJECT_ROOT")
    public class Native {
      @Test
      public void testAllFilesPresentInNative() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk/native"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/fullJdk/regressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Regressions {
      @Test
      public void testAllFilesPresentInRegressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk/regressions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/funInterface")
  @TestDataPath("$PROJECT_ROOT")
  public class FunInterface {
    @Test
    public void testAllFilesPresentInFunInterface() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/funInterface"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("basicFunInterface.kt")
    public void testBasicFunInterface() {
      runTest("compiler/testData/codegen/box/funInterface/basicFunInterface.kt");
    }

    @Test
    @TestMetadata("basicFunInterfaceConversion.kt")
    public void testBasicFunInterfaceConversion() {
      runTest("compiler/testData/codegen/box/funInterface/basicFunInterfaceConversion.kt");
    }

    @Test
    @TestMetadata("basicFunInterfaceConversionClash.kt")
    public void testBasicFunInterfaceConversionClash() {
      runTest("compiler/testData/codegen/box/funInterface/basicFunInterfaceConversionClash.kt");
    }

    @Test
    @TestMetadata("castFromAny.kt")
    public void testCastFromAny() {
      runTest("compiler/testData/codegen/box/funInterface/castFromAny.kt");
    }

    @Test
    @TestMetadata("contravariantIntersectionType.kt")
    public void testContravariantIntersectionType() {
      runTest("compiler/testData/codegen/box/funInterface/contravariantIntersectionType.kt");
    }

    @Test
    @TestMetadata("contravariantIntersectionTypeWithNonTrivialCommonSupertype.kt")
    public void testContravariantIntersectionTypeWithNonTrivialCommonSupertype() {
      runTest("compiler/testData/codegen/box/funInterface/contravariantIntersectionTypeWithNonTrivialCommonSupertype.kt");
    }

    @Test
    @TestMetadata("contravariantIntersectionTypeWithNonTrivialCommonSupertype2.kt")
    public void testContravariantIntersectionTypeWithNonTrivialCommonSupertype2() {
      runTest("compiler/testData/codegen/box/funInterface/contravariantIntersectionTypeWithNonTrivialCommonSupertype2.kt");
    }

    @Test
    @TestMetadata("funConversionInVararg.kt")
    public void testFunConversionInVararg() {
      runTest("compiler/testData/codegen/box/funInterface/funConversionInVararg.kt");
    }

    @Test
    @TestMetadata("funInterfaceCallInLambda.kt")
    public void testFunInterfaceCallInLambda() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceCallInLambda.kt");
    }

    @Test
    @TestMetadata("funInterfaceInheritance.kt")
    public void testFunInterfaceInheritance() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceInheritance.kt");
    }

    @Test
    @TestMetadata("funInterfaceTypealias.kt")
    public void testFunInterfaceTypealias() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceTypealias.kt");
    }

    @Test
    @TestMetadata("funInterfaceWithReceiver.kt")
    public void testFunInterfaceWithReceiver() {
      runTest("compiler/testData/codegen/box/funInterface/funInterfaceWithReceiver.kt");
    }

    @Test
    @TestMetadata("inlinedSamWrapper.kt")
    public void testInlinedSamWrapper() {
      runTest("compiler/testData/codegen/box/funInterface/inlinedSamWrapper.kt");
    }

    @Test
    @TestMetadata("intersectionTypeToFunInterfaceConversion.kt")
    public void testIntersectionTypeToFunInterfaceConversion() {
      runTest("compiler/testData/codegen/box/funInterface/intersectionTypeToFunInterfaceConversion.kt");
    }

    @Test
    @TestMetadata("irrelevantPrivateDeclarations.kt")
    public void testIrrelevantPrivateDeclarations() {
      runTest("compiler/testData/codegen/box/funInterface/irrelevantPrivateDeclarations.kt");
    }

    @Test
    @TestMetadata("kt41670.kt")
    public void testKt41670() {
      runTest("compiler/testData/codegen/box/funInterface/kt41670.kt");
    }

    @Test
    @TestMetadata("kt45444_privateFunInterface.kt")
    public void testKt45444_privateFunInterface() {
      runTest("compiler/testData/codegen/box/funInterface/kt45444_privateFunInterface.kt");
    }

    @Test
    @TestMetadata("kt46512_indyFunInterfaceOverCallableReference.kt")
    public void testKt46512_indyFunInterfaceOverCallableReference() {
      runTest("compiler/testData/codegen/box/funInterface/kt46512_indyFunInterfaceOverCallableReference.kt");
    }

    @Test
    @TestMetadata("kt46908_functionSupertype.kt")
    public void testKt46908_functionSupertype() {
      runTest("compiler/testData/codegen/box/funInterface/kt46908_functionSupertype.kt");
    }

    @Test
    @TestMetadata("multimodule.kt")
    public void testMultimodule() {
      runTest("compiler/testData/codegen/box/funInterface/multimodule.kt");
    }

    @Test
    @TestMetadata("noOptimizedCallableReferences.kt")
    public void testNoOptimizedCallableReferences() {
      runTest("compiler/testData/codegen/box/funInterface/noOptimizedCallableReferences.kt");
    }

    @Test
    @TestMetadata("nonAbstractMethod.kt")
    public void testNonAbstractMethod() {
      runTest("compiler/testData/codegen/box/funInterface/nonAbstractMethod.kt");
    }

    @Test
    @TestMetadata("nullableSam.kt")
    public void testNullableSam() {
      runTest("compiler/testData/codegen/box/funInterface/nullableSam.kt");
    }

    @Test
    @TestMetadata("partialSam.kt")
    public void testPartialSam() {
      runTest("compiler/testData/codegen/box/funInterface/partialSam.kt");
    }

    @Test
    @TestMetadata("primitiveConversions.kt")
    public void testPrimitiveConversions() {
      runTest("compiler/testData/codegen/box/funInterface/primitiveConversions.kt");
    }

    @Test
    @TestMetadata("receiverEvaluatedOnce.kt")
    public void testReceiverEvaluatedOnce() {
      runTest("compiler/testData/codegen/box/funInterface/receiverEvaluatedOnce.kt");
    }

    @Test
    @TestMetadata("samConstructorExplicitInvocation.kt")
    public void testSamConstructorExplicitInvocation() {
      runTest("compiler/testData/codegen/box/funInterface/samConstructorExplicitInvocation.kt");
    }

    @Test
    @TestMetadata("samConversionToGenericInterfaceInGenericFun.kt")
    public void testSamConversionToGenericInterfaceInGenericFun() {
      runTest("compiler/testData/codegen/box/funInterface/samConversionToGenericInterfaceInGenericFun.kt");
    }

    @Test
    @TestMetadata("subtypeOfFunctionalTypeToFunInterfaceConversion.kt")
    public void testSubtypeOfFunctionalTypeToFunInterfaceConversion() {
      runTest("compiler/testData/codegen/box/funInterface/subtypeOfFunctionalTypeToFunInterfaceConversion.kt");
    }

    @Test
    @TestMetadata("suspendFunInterfaceConversionCodegen.kt")
    public void testSuspendFunInterfaceConversionCodegen() {
      runTest("compiler/testData/codegen/box/funInterface/suspendFunInterfaceConversionCodegen.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/funInterface/equality")
    @TestDataPath("$PROJECT_ROOT")
    public class Equality {
      @Test
      public void testAllFilesPresentInEquality() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/funInterface/equality"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("functionReferencesBound.kt")
      public void testFunctionReferencesBound() {
        runTest("compiler/testData/codegen/box/funInterface/equality/functionReferencesBound.kt");
      }

      @Test
      @TestMetadata("functionReferencesUnbound.kt")
      public void testFunctionReferencesUnbound() {
        runTest("compiler/testData/codegen/box/funInterface/equality/functionReferencesUnbound.kt");
      }

      @Test
      @TestMetadata("lambdaRuntimeConversion.kt")
      public void testLambdaRuntimeConversion() {
        runTest("compiler/testData/codegen/box/funInterface/equality/lambdaRuntimeConversion.kt");
      }

      @Test
      @TestMetadata("localFunctionReferences.kt")
      public void testLocalFunctionReferences() {
        runTest("compiler/testData/codegen/box/funInterface/equality/localFunctionReferences.kt");
      }

      @Test
      @TestMetadata("simpleLambdas.kt")
      public void testSimpleLambdas() {
        runTest("compiler/testData/codegen/box/funInterface/equality/simpleLambdas.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/functions")
  @TestDataPath("$PROJECT_ROOT")
  public class Functions {
    @Test
    public void testAllFilesPresentInFunctions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("coerceVoidToArray.kt")
    public void testCoerceVoidToArray() {
      runTest("compiler/testData/codegen/box/functions/coerceVoidToArray.kt");
    }

    @Test
    @TestMetadata("coerceVoidToObject.kt")
    public void testCoerceVoidToObject() {
      runTest("compiler/testData/codegen/box/functions/coerceVoidToObject.kt");
    }

    @Test
    @TestMetadata("defaultargs.kt")
    public void testDefaultargs() {
      runTest("compiler/testData/codegen/box/functions/defaultargs.kt");
    }

    @Test
    @TestMetadata("defaultargs1.kt")
    public void testDefaultargs1() {
      runTest("compiler/testData/codegen/box/functions/defaultargs1.kt");
    }

    @Test
    @TestMetadata("defaultargs2.kt")
    public void testDefaultargs2() {
      runTest("compiler/testData/codegen/box/functions/defaultargs2.kt");
    }

    @Test
    @TestMetadata("defaultargs3.kt")
    public void testDefaultargs3() {
      runTest("compiler/testData/codegen/box/functions/defaultargs3.kt");
    }

    @Test
    @TestMetadata("defaultargs4.kt")
    public void testDefaultargs4() {
      runTest("compiler/testData/codegen/box/functions/defaultargs4.kt");
    }

    @Test
    @TestMetadata("defaultargs5.kt")
    public void testDefaultargs5() {
      runTest("compiler/testData/codegen/box/functions/defaultargs5.kt");
    }

    @Test
    @TestMetadata("defaultargs6.kt")
    public void testDefaultargs6() {
      runTest("compiler/testData/codegen/box/functions/defaultargs6.kt");
    }

    @Test
    @TestMetadata("defaultargs7.kt")
    public void testDefaultargs7() {
      runTest("compiler/testData/codegen/box/functions/defaultargs7.kt");
    }

    @Test
    @TestMetadata("delegatedPropertyWithMultipleOverriddens_generics.kt")
    public void testDelegatedPropertyWithMultipleOverriddens_generics() {
      runTest("compiler/testData/codegen/box/functions/delegatedPropertyWithMultipleOverriddens_generics.kt");
    }

    @Test
    @TestMetadata("delegatedPropertyWithMultipleOverriddens_noGenerics.kt")
    public void testDelegatedPropertyWithMultipleOverriddens_noGenerics() {
      runTest("compiler/testData/codegen/box/functions/delegatedPropertyWithMultipleOverriddens_noGenerics.kt");
    }

    @Test
    @TestMetadata("ea33909.kt")
    public void testEa33909() {
      runTest("compiler/testData/codegen/box/functions/ea33909.kt");
    }

    @Test
    @TestMetadata("fakeDescriptorWithSeveralOverridenOne.kt")
    public void testFakeDescriptorWithSeveralOverridenOne() {
      runTest("compiler/testData/codegen/box/functions/fakeDescriptorWithSeveralOverridenOne.kt");
    }

    @Test
    @TestMetadata("infixRecursiveCall.kt")
    public void testInfixRecursiveCall() {
      runTest("compiler/testData/codegen/box/functions/infixRecursiveCall.kt");
    }

    @Test
    @TestMetadata("kt1038.kt")
    public void testKt1038() {
      runTest("compiler/testData/codegen/box/functions/kt1038.kt");
    }

    @Test
    @TestMetadata("kt1199.kt")
    public void testKt1199() {
      runTest("compiler/testData/codegen/box/functions/kt1199.kt");
    }

    @Test
    @TestMetadata("kt1413.kt")
    public void testKt1413() {
      runTest("compiler/testData/codegen/box/functions/kt1413.kt");
    }

    @Test
    @TestMetadata("kt1649_1.kt")
    public void testKt1649_1() {
      runTest("compiler/testData/codegen/box/functions/kt1649_1.kt");
    }

    @Test
    @TestMetadata("kt1649_2.kt")
    public void testKt1649_2() {
      runTest("compiler/testData/codegen/box/functions/kt1649_2.kt");
    }

    @Test
    @TestMetadata("kt2270.kt")
    public void testKt2270() {
      runTest("compiler/testData/codegen/box/functions/kt2270.kt");
    }

    @Test
    @TestMetadata("kt2271.kt")
    public void testKt2271() {
      runTest("compiler/testData/codegen/box/functions/kt2271.kt");
    }

    @Test
    @TestMetadata("kt2280.kt")
    public void testKt2280() {
      runTest("compiler/testData/codegen/box/functions/kt2280.kt");
    }

    @Test
    @TestMetadata("kt2481.kt")
    public void testKt2481() {
      runTest("compiler/testData/codegen/box/functions/kt2481.kt");
    }

    @Test
    @TestMetadata("kt2716.kt")
    public void testKt2716() {
      runTest("compiler/testData/codegen/box/functions/kt2716.kt");
    }

    @Test
    @TestMetadata("kt2739.kt")
    public void testKt2739() {
      runTest("compiler/testData/codegen/box/functions/kt2739.kt");
    }

    @Test
    @TestMetadata("kt2929.kt")
    public void testKt2929() {
      runTest("compiler/testData/codegen/box/functions/kt2929.kt");
    }

    @Test
    @TestMetadata("kt3214.kt")
    public void testKt3214() {
      runTest("compiler/testData/codegen/box/functions/kt3214.kt");
    }

    @Test
    @TestMetadata("kt3313.kt")
    public void testKt3313() {
      runTest("compiler/testData/codegen/box/functions/kt3313.kt");
    }

    @Test
    @TestMetadata("kt3573.kt")
    public void testKt3573() {
      runTest("compiler/testData/codegen/box/functions/kt3573.kt");
    }

    @Test
    @TestMetadata("kt3724.kt")
    public void testKt3724() {
      runTest("compiler/testData/codegen/box/functions/kt3724.kt");
    }

    @Test
    @TestMetadata("kt395.kt")
    public void testKt395() {
      runTest("compiler/testData/codegen/box/functions/kt395.kt");
    }

    @Test
    @TestMetadata("kt47449.kt")
    public void testKt47449() {
      runTest("compiler/testData/codegen/box/functions/kt47449.kt");
    }

    @Test
    @TestMetadata("kt47527.kt")
    public void testKt47527() {
      runTest("compiler/testData/codegen/box/functions/kt47527.kt");
    }

    @Test
    @TestMetadata("kt48058.kt")
    public void testKt48058() {
      runTest("compiler/testData/codegen/box/functions/kt48058.kt");
    }

    @Test
    @TestMetadata("kt58825_arrayOverloads.kt")
    public void testKt58825_arrayOverloads() {
      runTest("compiler/testData/codegen/box/functions/kt58825_arrayOverloads.kt");
    }

    @Test
    @TestMetadata("kt785.kt")
    public void testKt785() {
      runTest("compiler/testData/codegen/box/functions/kt785.kt");
    }

    @Test
    @TestMetadata("kt873.kt")
    public void testKt873() {
      runTest("compiler/testData/codegen/box/functions/kt873.kt");
    }

    @Test
    @TestMetadata("localFunction.kt")
    public void testLocalFunction() {
      runTest("compiler/testData/codegen/box/functions/localFunction.kt");
    }

    @Test
    @TestMetadata("localReturnInsideFunctionExpression.kt")
    public void testLocalReturnInsideFunctionExpression() {
      runTest("compiler/testData/codegen/box/functions/localReturnInsideFunctionExpression.kt");
    }

    @Test
    @TestMetadata("mutualInline.kt")
    public void testMutualInline() {
      runTest("compiler/testData/codegen/box/functions/mutualInline.kt");
    }

    @Test
    @TestMetadata("nothisnoclosure.kt")
    public void testNothisnoclosure() {
      runTest("compiler/testData/codegen/box/functions/nothisnoclosure.kt");
    }

    @Test
    @TestMetadata("overloadByInterfaceType.kt")
    public void testOverloadByInterfaceType() {
      runTest("compiler/testData/codegen/box/functions/overloadByInterfaceType.kt");
    }

    @Test
    @TestMetadata("prefixRecursiveCall.kt")
    public void testPrefixRecursiveCall() {
      runTest("compiler/testData/codegen/box/functions/prefixRecursiveCall.kt");
    }

    @Test
    @TestMetadata("recursiveCompareTo.kt")
    public void testRecursiveCompareTo() {
      runTest("compiler/testData/codegen/box/functions/recursiveCompareTo.kt");
    }

    @Test
    @TestMetadata("recursiveIncrementCall.kt")
    public void testRecursiveIncrementCall() {
      runTest("compiler/testData/codegen/box/functions/recursiveIncrementCall.kt");
    }

    @Test
    @TestMetadata("typeParameterAsUpperBound.kt")
    public void testTypeParameterAsUpperBound() {
      runTest("compiler/testData/codegen/box/functions/typeParameterAsUpperBound.kt");
    }

    @Test
    @TestMetadata("typeParametersInLocalFunction.kt")
    public void testTypeParametersInLocalFunction() {
      runTest("compiler/testData/codegen/box/functions/typeParametersInLocalFunction.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/functions/bigArity")
    @TestDataPath("$PROJECT_ROOT")
    public class BigArity {
      @Test
      public void testAllFilesPresentInBigArity() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/bigArity"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("function255.kt")
      public void testFunction255() {
        runTest("compiler/testData/codegen/box/functions/bigArity/function255.kt");
      }

      @Test
      @TestMetadata("instanceOfCallableReference.kt")
      public void testInstanceOfCallableReference() {
        runTest("compiler/testData/codegen/box/functions/bigArity/instanceOfCallableReference.kt");
      }

      @Test
      @TestMetadata("invokeCallableReference.kt")
      public void testInvokeCallableReference() {
        runTest("compiler/testData/codegen/box/functions/bigArity/invokeCallableReference.kt");
      }

      @Test
      @TestMetadata("invokeLambda.kt")
      public void testInvokeLambda() {
        runTest("compiler/testData/codegen/box/functions/bigArity/invokeLambda.kt");
      }

      @Test
      @TestMetadata("invokeMemberCallableReference.kt")
      public void testInvokeMemberCallableReference() {
        runTest("compiler/testData/codegen/box/functions/bigArity/invokeMemberCallableReference.kt");
      }

      @Test
      @TestMetadata("nestedBigArityFunCalls.kt")
      public void testNestedBigArityFunCalls() {
        runTest("compiler/testData/codegen/box/functions/bigArity/nestedBigArityFunCalls.kt");
      }

      @Test
      @TestMetadata("subclass.kt")
      public void testSubclass() {
        runTest("compiler/testData/codegen/box/functions/bigArity/subclass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/functions/functionExpression")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionExpression {
      @Test
      public void testAllFilesPresentInFunctionExpression() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/functionExpression"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("functionExpression.kt")
      public void testFunctionExpression() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpression.kt");
      }

      @Test
      @TestMetadata("functionExpressionWithThisReference.kt")
      public void testFunctionExpressionWithThisReference() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpressionWithThisReference.kt");
      }

      @Test
      @TestMetadata("functionLiteralExpression.kt")
      public void testFunctionLiteralExpression() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/functionLiteralExpression.kt");
      }

      @Test
      @TestMetadata("insideGenericLambda.kt")
      public void testInsideGenericLambda() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/insideGenericLambda.kt");
      }

      @Test
      @TestMetadata("underscoreParameters.kt")
      public void testUnderscoreParameters() {
        runTest("compiler/testData/codegen/box/functions/functionExpression/underscoreParameters.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/functions/invoke")
    @TestDataPath("$PROJECT_ROOT")
    public class Invoke {
      @Test
      public void testAllFilesPresentInInvoke() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/invoke"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("castFunctionToExtension.kt")
      public void testCastFunctionToExtension() {
        runTest("compiler/testData/codegen/box/functions/invoke/castFunctionToExtension.kt");
      }

      @Test
      @TestMetadata("extensionInvokeOnExpr.kt")
      public void testExtensionInvokeOnExpr() {
        runTest("compiler/testData/codegen/box/functions/invoke/extensionInvokeOnExpr.kt");
      }

      @Test
      @TestMetadata("implicitInvokeInCompanionObjectWithFunctionalArgument.kt")
      public void testImplicitInvokeInCompanionObjectWithFunctionalArgument() {
        runTest("compiler/testData/codegen/box/functions/invoke/implicitInvokeInCompanionObjectWithFunctionalArgument.kt");
      }

      @Test
      @TestMetadata("implicitInvokeWithFunctionLiteralArgument.kt")
      public void testImplicitInvokeWithFunctionLiteralArgument() {
        runTest("compiler/testData/codegen/box/functions/invoke/implicitInvokeWithFunctionLiteralArgument.kt");
      }

      @Test
      @TestMetadata("invoke.kt")
      public void testInvoke() {
        runTest("compiler/testData/codegen/box/functions/invoke/invoke.kt");
      }

      @Test
      @TestMetadata("invokeOnExprByConvention.kt")
      public void testInvokeOnExprByConvention() {
        runTest("compiler/testData/codegen/box/functions/invoke/invokeOnExprByConvention.kt");
      }

      @Test
      @TestMetadata("kt3189.kt")
      public void testKt3189() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3189.kt");
      }

      @Test
      @TestMetadata("kt3190.kt")
      public void testKt3190() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3190.kt");
      }

      @Test
      @TestMetadata("kt3297.kt")
      public void testKt3297() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3297.kt");
      }

      @Test
      @TestMetadata("kt3450getAndInvoke.kt")
      public void testKt3450getAndInvoke() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3450getAndInvoke.kt");
      }

      @Test
      @TestMetadata("kt3631invokeOnString.kt")
      public void testKt3631invokeOnString() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3631invokeOnString.kt");
      }

      @Test
      @TestMetadata("kt3772.kt")
      public void testKt3772() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3772.kt");
      }

      @Test
      @TestMetadata("kt3821invokeOnThis.kt")
      public void testKt3821invokeOnThis() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3821invokeOnThis.kt");
      }

      @Test
      @TestMetadata("kt3822invokeOnThis.kt")
      public void testKt3822invokeOnThis() {
        runTest("compiler/testData/codegen/box/functions/invoke/kt3822invokeOnThis.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/functions/localFunctions")
    @TestDataPath("$PROJECT_ROOT")
    public class LocalFunctions {
      @Test
      public void testAllFilesPresentInLocalFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/localFunctions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("boundTypeParameterInSupertype.kt")
      public void testBoundTypeParameterInSupertype() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/boundTypeParameterInSupertype.kt");
      }

      @Test
      @TestMetadata("boundTypeParameterInVararg.kt")
      public void testBoundTypeParameterInVararg() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/boundTypeParameterInVararg.kt");
      }

      @Test
      @TestMetadata("callBetweenLocalFunctions.kt")
      public void testCallBetweenLocalFunctions() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/callBetweenLocalFunctions.kt");
      }

      @Test
      @TestMetadata("callInlineLocalInLambda.kt")
      public void testCallInlineLocalInLambda() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/callInlineLocalInLambda.kt");
      }

      @Test
      @TestMetadata("captureUpperBoundedTypeParameter.kt")
      public void testCaptureUpperBoundedTypeParameter() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/captureUpperBoundedTypeParameter.kt");
      }

      @Test
      @TestMetadata("definedWithinLambda.kt")
      public void testDefinedWithinLambda() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambda.kt");
      }

      @Test
      @TestMetadata("definedWithinLambdaInnerUsage1.kt")
      public void testDefinedWithinLambdaInnerUsage1() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambdaInnerUsage1.kt");
      }

      @Test
      @TestMetadata("definedWithinLambdaInnerUsage2.kt")
      public void testDefinedWithinLambdaInnerUsage2() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambdaInnerUsage2.kt");
      }

      @Test
      @TestMetadata("kt2895.kt")
      public void testKt2895() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt2895.kt");
      }

      @Test
      @TestMetadata("kt3308.kt")
      public void testKt3308() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt3308.kt");
      }

      @Test
      @TestMetadata("kt3978.kt")
      public void testKt3978() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt3978.kt");
      }

      @Test
      @TestMetadata("kt3978_2.kt")
      public void testKt3978_2() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt3978_2.kt");
      }

      @Test
      @TestMetadata("kt4119.kt")
      public void testKt4119() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4119.kt");
      }

      @Test
      @TestMetadata("kt4119_2.kt")
      public void testKt4119_2() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4119_2.kt");
      }

      @Test
      @TestMetadata("kt4514.kt")
      public void testKt4514() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4514.kt");
      }

      @Test
      @TestMetadata("kt4783.kt")
      public void testKt4783() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4783.kt");
      }

      @Test
      @TestMetadata("kt4784.kt")
      public void testKt4784() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4784.kt");
      }

      @Test
      @TestMetadata("kt4989.kt")
      public void testKt4989() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/kt4989.kt");
      }

      @Test
      @TestMetadata("localExtensionOnNullableParameter.kt")
      public void testLocalExtensionOnNullableParameter() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/localExtensionOnNullableParameter.kt");
      }

      @Test
      @TestMetadata("localFunctionInConstructor.kt")
      public void testLocalFunctionInConstructor() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionInConstructor.kt");
      }

      @Test
      @TestMetadata("localFunctionVsLocalVariable.kt")
      public void testLocalFunctionVsLocalVariable() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionVsLocalVariable.kt");
      }

      @Test
      @TestMetadata("nameClash.kt")
      public void testNameClash() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/nameClash.kt");
      }

      @Test
      @TestMetadata("nameClashAcrossDifferentContainers.kt")
      public void testNameClashAcrossDifferentContainers() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/nameClashAcrossDifferentContainers.kt");
      }

      @Test
      @TestMetadata("overloadedLocalFunWithoutClosure.kt")
      public void testOverloadedLocalFunWithoutClosure() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunWithoutClosure.kt");
      }

      @Test
      @TestMetadata("overloadedLocalFunction.kt")
      public void testOverloadedLocalFunction() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction.kt");
      }

      @Test
      @TestMetadata("overloadedLocalFunction1.kt")
      public void testOverloadedLocalFunction1() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction1.kt");
      }

      @Test
      @TestMetadata("overloadedLocalFunction2.kt")
      public void testOverloadedLocalFunction2() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction2.kt");
      }

      @Test
      @TestMetadata("overloadedLocalFunction3.kt")
      public void testOverloadedLocalFunction3() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction3.kt");
      }

      @Test
      @TestMetadata("parameterAsDefaultValue.kt")
      public void testParameterAsDefaultValue() {
        runTest("compiler/testData/codegen/box/functions/localFunctions/parameterAsDefaultValue.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/ieee754")
  @TestDataPath("$PROJECT_ROOT")
  public class Ieee754 {
    @Test
    public void testAllFilesPresentInIeee754() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ieee754"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("anyCastToPrimitiveCompareTo1.kt")
    public void testAnyCastToPrimitiveCompareTo1() {
      runTest("compiler/testData/codegen/box/ieee754/anyCastToPrimitiveCompareTo1.kt");
    }

    @Test
    @TestMetadata("anyCastToPrimitiveCompareTo2.kt")
    public void testAnyCastToPrimitiveCompareTo2() {
      runTest("compiler/testData/codegen/box/ieee754/anyCastToPrimitiveCompareTo2.kt");
    }

    @Test
    @TestMetadata("anyToReal.kt")
    public void testAnyToReal() {
      runTest("compiler/testData/codegen/box/ieee754/anyToReal.kt");
    }

    @Test
    @TestMetadata("asComparableToDouble.kt")
    public void testAsComparableToDouble() {
      runTest("compiler/testData/codegen/box/ieee754/asComparableToDouble.kt");
    }

    @Test
    @TestMetadata("asComparableToDouble_properIeeeComparisons.kt")
    public void testAsComparableToDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/asComparableToDouble_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("comparableToTWithT_properIeeeComparisons.kt")
    public void testComparableToTWithT_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/comparableToTWithT_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("comparableTypeCast.kt")
    public void testComparableTypeCast() {
      runTest("compiler/testData/codegen/box/ieee754/comparableTypeCast.kt");
    }

    @Test
    @TestMetadata("dataClass.kt")
    public void testDataClass() {
      runTest("compiler/testData/codegen/box/ieee754/dataClass.kt");
    }

    @Test
    @TestMetadata("differentTypesComparison.kt")
    public void testDifferentTypesComparison() {
      runTest("compiler/testData/codegen/box/ieee754/differentTypesComparison.kt");
    }

    @Test
    @TestMetadata("equalsDouble.kt")
    public void testEqualsDouble() {
      runTest("compiler/testData/codegen/box/ieee754/equalsDouble.kt");
    }

    @Test
    @TestMetadata("equalsDouble_properIeeeComparisons.kt")
    public void testEqualsDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsDouble_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("equalsFloat.kt")
    public void testEqualsFloat() {
      runTest("compiler/testData/codegen/box/ieee754/equalsFloat.kt");
    }

    @Test
    @TestMetadata("equalsFloat_properIeeeComparisons.kt")
    public void testEqualsFloat_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsFloat_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("equalsNaN.kt")
    public void testEqualsNaN() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNaN.kt");
    }

    @Test
    @TestMetadata("equalsNaN_properIeeeComparisons.kt")
    public void testEqualsNaN_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNaN_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("equalsNullableDouble.kt")
    public void testEqualsNullableDouble() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNullableDouble.kt");
    }

    @Test
    @TestMetadata("equalsNullableDouble_properIeeeComparisons.kt")
    public void testEqualsNullableDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNullableDouble_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("equalsNullableFloat.kt")
    public void testEqualsNullableFloat() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNullableFloat.kt");
    }

    @Test
    @TestMetadata("equalsNullableFloat_properIeeeComparisons.kt")
    public void testEqualsNullableFloat_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/equalsNullableFloat_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("explicitCompareCall.kt")
    public void testExplicitCompareCall() {
      runTest("compiler/testData/codegen/box/ieee754/explicitCompareCall.kt");
    }

    @Test
    @TestMetadata("explicitEqualsCall.kt")
    public void testExplicitEqualsCall() {
      runTest("compiler/testData/codegen/box/ieee754/explicitEqualsCall.kt");
    }

    @Test
    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/ieee754/generic.kt");
    }

    @Test
    @TestMetadata("greaterDouble.kt")
    public void testGreaterDouble() {
      runTest("compiler/testData/codegen/box/ieee754/greaterDouble.kt");
    }

    @Test
    @TestMetadata("greaterDouble_properIeeeComparisons.kt")
    public void testGreaterDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/greaterDouble_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("greaterFloat.kt")
    public void testGreaterFloat() {
      runTest("compiler/testData/codegen/box/ieee754/greaterFloat.kt");
    }

    @Test
    @TestMetadata("greaterFloat_properIeeeComparisons.kt")
    public void testGreaterFloat_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/greaterFloat_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/ieee754/inline.kt");
    }

    @Test
    @TestMetadata("lessDouble.kt")
    public void testLessDouble() {
      runTest("compiler/testData/codegen/box/ieee754/lessDouble.kt");
    }

    @Test
    @TestMetadata("lessDouble_properIeeeAndNewInference.kt")
    public void testLessDouble_properIeeeAndNewInference() {
      runTest("compiler/testData/codegen/box/ieee754/lessDouble_properIeeeAndNewInference.kt");
    }

    @Test
    @TestMetadata("lessDouble_properIeeeComparisons.kt")
    public void testLessDouble_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/lessDouble_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("lessFloat.kt")
    public void testLessFloat() {
      runTest("compiler/testData/codegen/box/ieee754/lessFloat.kt");
    }

    @Test
    @TestMetadata("lessFloat_properIeeeComparisons.kt")
    public void testLessFloat_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/lessFloat_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("nullableAnyToReal.kt")
    public void testNullableAnyToReal() {
      runTest("compiler/testData/codegen/box/ieee754/nullableAnyToReal.kt");
    }

    @Test
    @TestMetadata("nullableDoubleEquals.kt")
    public void testNullableDoubleEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEquals.kt");
    }

    @Test
    @TestMetadata("nullableDoubleEqualsLV13.kt")
    public void testNullableDoubleEqualsLV13() {
      runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEqualsLV13.kt");
    }

    @Test
    @TestMetadata("nullableDoubleNotEquals.kt")
    public void testNullableDoubleNotEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableDoubleNotEquals.kt");
    }

    @Test
    @TestMetadata("nullableFloatEquals.kt")
    public void testNullableFloatEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableFloatEquals.kt");
    }

    @Test
    @TestMetadata("nullableFloatNotEquals.kt")
    public void testNullableFloatNotEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableFloatNotEquals.kt");
    }

    @Test
    @TestMetadata("nullableIntEquals.kt")
    public void testNullableIntEquals() {
      runTest("compiler/testData/codegen/box/ieee754/nullableIntEquals.kt");
    }

    @Test
    @TestMetadata("safeCall.kt")
    public void testSafeCall() {
      runTest("compiler/testData/codegen/box/ieee754/safeCall.kt");
    }

    @Test
    @TestMetadata("smartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons.kt")
    public void testSmartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("smartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons.kt")
    public void testSmartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("smartCastToDifferentTypes_properIeeeComparisons.kt")
    public void testSmartCastToDifferentTypes_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypes_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("smartCastToDoubleAndComparableToDouble.kt")
    public void testSmartCastToDoubleAndComparableToDouble() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToDoubleAndComparableToDouble.kt");
    }

    @Test
    @TestMetadata("smartCastToInt.kt")
    public void testSmartCastToInt() {
      runTest("compiler/testData/codegen/box/ieee754/smartCastToInt.kt");
    }

    @Test
    @TestMetadata("when.kt")
    public void testWhen() {
      runTest("compiler/testData/codegen/box/ieee754/when.kt");
    }

    @Test
    @TestMetadata("whenNoSubject.kt")
    public void testWhenNoSubject() {
      runTest("compiler/testData/codegen/box/ieee754/whenNoSubject.kt");
    }

    @Test
    @TestMetadata("whenNoSubject_properIeeeComparisons.kt")
    public void testWhenNoSubject_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/whenNoSubject_properIeeeComparisons.kt");
    }

    @Test
    @TestMetadata("whenNullableSmartCast.kt")
    public void testWhenNullableSmartCast() {
      runTest("compiler/testData/codegen/box/ieee754/whenNullableSmartCast.kt");
    }

    @Test
    @TestMetadata("when_properIeeeComparisons.kt")
    public void testWhen_properIeeeComparisons() {
      runTest("compiler/testData/codegen/box/ieee754/when_properIeeeComparisons.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/increment")
  @TestDataPath("$PROJECT_ROOT")
  public class Increment {
    @Test
    public void testAllFilesPresentInIncrement() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/increment"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("argumentWithSideEffects.kt")
    public void testArgumentWithSideEffects() {
      runTest("compiler/testData/codegen/box/increment/argumentWithSideEffects.kt");
    }

    @Test
    @TestMetadata("arrayElement.kt")
    public void testArrayElement() {
      runTest("compiler/testData/codegen/box/increment/arrayElement.kt");
    }

    @Test
    @TestMetadata("assignPlusOnSmartCast.kt")
    public void testAssignPlusOnSmartCast() {
      runTest("compiler/testData/codegen/box/increment/assignPlusOnSmartCast.kt");
    }

    @Test
    @TestMetadata("augmentedAssignmentWithComplexRhs.kt")
    public void testAugmentedAssignmentWithComplexRhs() {
      runTest("compiler/testData/codegen/box/increment/augmentedAssignmentWithComplexRhs.kt");
    }

    @Test
    @TestMetadata("classNaryGetSet.kt")
    public void testClassNaryGetSet() {
      runTest("compiler/testData/codegen/box/increment/classNaryGetSet.kt");
    }

    @Test
    @TestMetadata("classVarargGetSet.kt")
    public void testClassVarargGetSet() {
      runTest("compiler/testData/codegen/box/increment/classVarargGetSet.kt");
    }

    @Test
    @TestMetadata("classVarargGetSetEvaluationOrder.kt")
    public void testClassVarargGetSetEvaluationOrder() {
      runTest("compiler/testData/codegen/box/increment/classVarargGetSetEvaluationOrder.kt");
    }

    @Test
    @TestMetadata("classWithGetSet.kt")
    public void testClassWithGetSet() {
      runTest("compiler/testData/codegen/box/increment/classWithGetSet.kt");
    }

    @Test
    @TestMetadata("extOnLong.kt")
    public void testExtOnLong() {
      runTest("compiler/testData/codegen/box/increment/extOnLong.kt");
    }

    @Test
    @TestMetadata("genericClassWithGetSet.kt")
    public void testGenericClassWithGetSet() {
      runTest("compiler/testData/codegen/box/increment/genericClassWithGetSet.kt");
    }

    @Test
    @TestMetadata("kt36956.kt")
    public void testKt36956() {
      runTest("compiler/testData/codegen/box/increment/kt36956.kt");
    }

    @Test
    @TestMetadata("memberExtOnLong.kt")
    public void testMemberExtOnLong() {
      runTest("compiler/testData/codegen/box/increment/memberExtOnLong.kt");
    }

    @Test
    @TestMetadata("mutableListElement.kt")
    public void testMutableListElement() {
      runTest("compiler/testData/codegen/box/increment/mutableListElement.kt");
    }

    @Test
    @TestMetadata("nullable.kt")
    public void testNullable() {
      runTest("compiler/testData/codegen/box/increment/nullable.kt");
    }

    @Test
    @TestMetadata("postfixIncrementDoubleSmartCast.kt")
    public void testPostfixIncrementDoubleSmartCast() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementDoubleSmartCast.kt");
    }

    @Test
    @TestMetadata("postfixIncrementOnClass.kt")
    public void testPostfixIncrementOnClass() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementOnClass.kt");
    }

    @Test
    @TestMetadata("postfixIncrementOnClassSmartCast.kt")
    public void testPostfixIncrementOnClassSmartCast() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementOnClassSmartCast.kt");
    }

    @Test
    @TestMetadata("postfixIncrementOnShortSmartCast.kt")
    public void testPostfixIncrementOnShortSmartCast() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementOnShortSmartCast.kt");
    }

    @Test
    @TestMetadata("postfixIncrementOnSmartCast.kt")
    public void testPostfixIncrementOnSmartCast() {
      runTest("compiler/testData/codegen/box/increment/postfixIncrementOnSmartCast.kt");
    }

    @Test
    @TestMetadata("postfixNullableClassIncrement.kt")
    public void testPostfixNullableClassIncrement() {
      runTest("compiler/testData/codegen/box/increment/postfixNullableClassIncrement.kt");
    }

    @Test
    @TestMetadata("postfixNullableIncrement.kt")
    public void testPostfixNullableIncrement() {
      runTest("compiler/testData/codegen/box/increment/postfixNullableIncrement.kt");
    }

    @Test
    @TestMetadata("prefixIncrementOnClass.kt")
    public void testPrefixIncrementOnClass() {
      runTest("compiler/testData/codegen/box/increment/prefixIncrementOnClass.kt");
    }

    @Test
    @TestMetadata("prefixIncrementOnClassSmartCast.kt")
    public void testPrefixIncrementOnClassSmartCast() {
      runTest("compiler/testData/codegen/box/increment/prefixIncrementOnClassSmartCast.kt");
    }

    @Test
    @TestMetadata("prefixIncrementOnSmartCast.kt")
    public void testPrefixIncrementOnSmartCast() {
      runTest("compiler/testData/codegen/box/increment/prefixIncrementOnSmartCast.kt");
    }

    @Test
    @TestMetadata("prefixNullableClassIncrement.kt")
    public void testPrefixNullableClassIncrement() {
      runTest("compiler/testData/codegen/box/increment/prefixNullableClassIncrement.kt");
    }

    @Test
    @TestMetadata("prefixNullableIncrement.kt")
    public void testPrefixNullableIncrement() {
      runTest("compiler/testData/codegen/box/increment/prefixNullableIncrement.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/inference")
  @TestDataPath("$PROJECT_ROOT")
  public class Inference {
    @Test
    public void testAllFilesPresentInInference() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("approximateNonTopLevelCapturedTypes.kt")
    public void testApproximateNonTopLevelCapturedTypes() {
      runTest("compiler/testData/codegen/box/inference/approximateNonTopLevelCapturedTypes.kt");
    }

    @Test
    @TestMetadata("builderInferenceLeakingVariable.kt")
    public void testBuilderInferenceLeakingVariable() {
      runTest("compiler/testData/codegen/box/inference/builderInferenceLeakingVariable.kt");
    }

    @Test
    @TestMetadata("capturedStarProjection.kt")
    public void testCapturedStarProjection() {
      runTest("compiler/testData/codegen/box/inference/capturedStarProjection.kt");
    }

    @Test
    @TestMetadata("capturedTypesSubstitutionIntoAbbreviation.kt")
    public void testCapturedTypesSubstitutionIntoAbbreviation() {
      runTest("compiler/testData/codegen/box/inference/capturedTypesSubstitutionIntoAbbreviation.kt");
    }

    @Test
    @TestMetadata("coercionToUnitWithLastLambdaExpression.kt")
    public void testCoercionToUnitWithLastLambdaExpression() {
      runTest("compiler/testData/codegen/box/inference/coercionToUnitWithLastLambdaExpression.kt");
    }

    @Test
    @TestMetadata("coerctionToUnitForLastExpressionWithStarProjection.kt")
    public void testCoerctionToUnitForLastExpressionWithStarProjection() {
      runTest("compiler/testData/codegen/box/inference/coerctionToUnitForLastExpressionWithStarProjection.kt");
    }

    @Test
    @TestMetadata("earlyReturnInsideCrossinlineLambda.kt")
    public void testEarlyReturnInsideCrossinlineLambda() {
      runTest("compiler/testData/codegen/box/inference/earlyReturnInsideCrossinlineLambda.kt");
    }

    @Test
    @TestMetadata("inferenceWithTypeVariableInsideCapturedType.kt")
    public void testInferenceWithTypeVariableInsideCapturedType() {
      runTest("compiler/testData/codegen/box/inference/inferenceWithTypeVariableInsideCapturedType.kt");
    }

    @Test
    @TestMetadata("integerLiteralTypeInLamdaReturnType.kt")
    public void testIntegerLiteralTypeInLamdaReturnType() {
      runTest("compiler/testData/codegen/box/inference/integerLiteralTypeInLamdaReturnType.kt");
    }

    @Test
    @TestMetadata("kt10822.kt")
    public void testKt10822() {
      runTest("compiler/testData/codegen/box/inference/kt10822.kt");
    }

    @Test
    @TestMetadata("kt35684.kt")
    public void testKt35684() {
      runTest("compiler/testData/codegen/box/inference/kt35684.kt");
    }

    @Test
    @TestMetadata("kt36446.kt")
    public void testKt36446() {
      runTest("compiler/testData/codegen/box/inference/kt36446.kt");
    }

    @Test
    @TestMetadata("kt38664.kt")
    public void testKt38664() {
      runTest("compiler/testData/codegen/box/inference/kt38664.kt");
    }

    @Test
    @TestMetadata("kt39824.kt")
    public void testKt39824() {
      runTest("compiler/testData/codegen/box/inference/kt39824.kt");
    }

    @Test
    @TestMetadata("kt42042.kt")
    public void testKt42042() {
      runTest("compiler/testData/codegen/box/inference/kt42042.kt");
    }

    @Test
    @TestMetadata("kt42130.kt")
    public void testKt42130() {
      runTest("compiler/testData/codegen/box/inference/kt42130.kt");
    }

    @Test
    @TestMetadata("kt45118.kt")
    public void testKt45118() {
      runTest("compiler/testData/codegen/box/inference/kt45118.kt");
    }

    @Test
    @TestMetadata("kt49838.kt")
    public void testKt49838() {
      runTest("compiler/testData/codegen/box/inference/kt49838.kt");
    }

    @Test
    @TestMetadata("lambdaWithStarReturn.kt")
    public void testLambdaWithStarReturn() {
      runTest("compiler/testData/codegen/box/inference/lambdaWithStarReturn.kt");
    }

    @Test
    @TestMetadata("lambdasWithExtensionFunctionType.kt")
    public void testLambdasWithExtensionFunctionType() {
      runTest("compiler/testData/codegen/box/inference/lambdasWithExtensionFunctionType.kt");
    }

    @Test
    @TestMetadata("lastExpressionOfLambdaWithNothingConstraint.kt")
    public void testLastExpressionOfLambdaWithNothingConstraint() {
      runTest("compiler/testData/codegen/box/inference/lastExpressionOfLambdaWithNothingConstraint.kt");
    }

    @Test
    @TestMetadata("mapCollectChainWithNullResult.kt")
    public void testMapCollectChainWithNullResult() {
      runTest("compiler/testData/codegen/box/inference/mapCollectChainWithNullResult.kt");
    }

    @Test
    @TestMetadata("noCoercionToUniForNullableLambdaReturnType.kt")
    public void testNoCoercionToUniForNullableLambdaReturnType() {
      runTest("compiler/testData/codegen/box/inference/noCoercionToUniForNullableLambdaReturnType.kt");
    }

    @Test
    @TestMetadata("noCoercionToUnitWithEqualityConstraintForNullableReturnType.kt")
    public void testNoCoercionToUnitWithEqualityConstraintForNullableReturnType() {
      runTest("compiler/testData/codegen/box/inference/noCoercionToUnitWithEqualityConstraintForNullableReturnType.kt");
    }

    @Test
    @TestMetadata("overrideDefaultProperty.kt")
    public void testOverrideDefaultProperty() {
      runTest("compiler/testData/codegen/box/inference/overrideDefaultProperty.kt");
    }

    @Test
    @TestMetadata("overrideGenericDefaultMethod.kt")
    public void testOverrideGenericDefaultMethod() {
      runTest("compiler/testData/codegen/box/inference/overrideGenericDefaultMethod.kt");
    }

    @Test
    @TestMetadata("plusAssignInsideLambda.kt")
    public void testPlusAssignInsideLambda() {
      runTest("compiler/testData/codegen/box/inference/plusAssignInsideLambda.kt");
    }

    @Test
    @TestMetadata("recursiveConstraintInsideTypeArgumentWithStarProjection.kt")
    public void testRecursiveConstraintInsideTypeArgumentWithStarProjection() {
      runTest("compiler/testData/codegen/box/inference/recursiveConstraintInsideTypeArgumentWithStarProjection.kt");
    }

    @Test
    @TestMetadata("referenceToCatchParameterFromLambdaExpression.kt")
    public void testReferenceToCatchParameterFromLambdaExpression() {
      runTest("compiler/testData/codegen/box/inference/referenceToCatchParameterFromLambdaExpression.kt");
    }

    @Test
    @TestMetadata("specialCallsWithCallableReferences.kt")
    public void testSpecialCallsWithCallableReferences() {
      runTest("compiler/testData/codegen/box/inference/specialCallsWithCallableReferences.kt");
    }

    @Test
    @TestMetadata("sumOfOverloads.kt")
    public void testSumOfOverloads() {
      runTest("compiler/testData/codegen/box/inference/sumOfOverloads.kt");
    }

    @Test
    @TestMetadata("suspendExtensionRecevierFromConstraint.kt")
    public void testSuspendExtensionRecevierFromConstraint() {
      runTest("compiler/testData/codegen/box/inference/suspendExtensionRecevierFromConstraint.kt");
    }

    @Test
    @TestMetadata("unsafeVarianceCodegen.kt")
    public void testUnsafeVarianceCodegen() {
      runTest("compiler/testData/codegen/box/inference/unsafeVarianceCodegen.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inference/builderInference")
    @TestDataPath("$PROJECT_ROOT")
    public class BuilderInference {
      @Test
      public void testAllFilesPresentInBuilderInference() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/builderInference"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("builderCallAsReturnTypeInLocalClass.kt")
      public void testBuilderCallAsReturnTypeInLocalClass() {
        runTest("compiler/testData/codegen/box/inference/builderInference/builderCallAsReturnTypeInLocalClass.kt");
      }

      @Test
      @TestMetadata("callableReferenceAndCoercionToUnit.kt")
      public void testCallableReferenceAndCoercionToUnit() {
        runTest("compiler/testData/codegen/box/inference/builderInference/callableReferenceAndCoercionToUnit.kt");
      }

      @Test
      @TestMetadata("callableReferencesProperCompletion.kt")
      public void testCallableReferencesProperCompletion() {
        runTest("compiler/testData/codegen/box/inference/builderInference/callableReferencesProperCompletion.kt");
      }

      @Test
      @TestMetadata("capturedTypes.kt")
      public void testCapturedTypes() {
        runTest("compiler/testData/codegen/box/inference/builderInference/capturedTypes.kt");
      }

      @Test
      @TestMetadata("changingResolveIfDontUseBuilderInferenceDisabledFeature.kt")
      public void testChangingResolveIfDontUseBuilderInferenceDisabledFeature() {
        runTest("compiler/testData/codegen/box/inference/builderInference/changingResolveIfDontUseBuilderInferenceDisabledFeature.kt");
      }

      @Test
      @TestMetadata("constraintsBetweenTwoStubVariables.kt")
      public void testConstraintsBetweenTwoStubVariables() {
        runTest("compiler/testData/codegen/box/inference/builderInference/constraintsBetweenTwoStubVariables.kt");
      }

      @Test
      @TestMetadata("kt41164.kt")
      public void testKt41164() {
        runTest("compiler/testData/codegen/box/inference/builderInference/kt41164.kt");
      }

      @Test
      @TestMetadata("kt42139.kt")
      public void testKt42139() {
        runTest("compiler/testData/codegen/box/inference/builderInference/kt42139.kt");
      }

      @Test
      @TestMetadata("kt44241.kt")
      public void testKt44241() {
        runTest("compiler/testData/codegen/box/inference/builderInference/kt44241.kt");
      }

      @Test
      @TestMetadata("kt45083.kt")
      public void testKt45083() {
        runTest("compiler/testData/codegen/box/inference/builderInference/kt45083.kt");
      }

      @Test
      @TestMetadata("kt47052.kt")
      public void testKt47052() {
        runTest("compiler/testData/codegen/box/inference/builderInference/kt47052.kt");
      }

      @Test
      @TestMetadata("kt47744.kt")
      public void testKt47744() {
        runTest("compiler/testData/codegen/box/inference/builderInference/kt47744.kt");
      }

      @Test
      @TestMetadata("kt49887.kt")
      public void testKt49887() {
        runTest("compiler/testData/codegen/box/inference/builderInference/kt49887.kt");
      }

      @Test
      @TestMetadata("kt51988.kt")
      public void testKt51988() {
        runTest("compiler/testData/codegen/box/inference/builderInference/kt51988.kt");
      }

      @Test
      @TestMetadata("labaledCall.kt")
      public void testLabaledCall() {
        runTest("compiler/testData/codegen/box/inference/builderInference/labaledCall.kt");
      }

      @Test
      @TestMetadata("lackOfNullCheckOnNullableInsideBuild.kt")
      public void testLackOfNullCheckOnNullableInsideBuild() {
        runTest("compiler/testData/codegen/box/inference/builderInference/lackOfNullCheckOnNullableInsideBuild.kt");
      }

      @Test
      @TestMetadata("memberScope.kt")
      public void testMemberScope() {
        runTest("compiler/testData/codegen/box/inference/builderInference/memberScope.kt");
      }

      @Test
      @TestMetadata("nullability.kt")
      public void testNullability() {
        runTest("compiler/testData/codegen/box/inference/builderInference/nullability.kt");
      }

      @Test
      @TestMetadata("propagateInferenceSessionIntoDeclarationAnalyzers.kt")
      public void testPropagateInferenceSessionIntoDeclarationAnalyzers() {
        runTest("compiler/testData/codegen/box/inference/builderInference/propagateInferenceSessionIntoDeclarationAnalyzers.kt");
      }

      @Test
      @TestMetadata("specialCallsWithCallableReferences.kt")
      public void testSpecialCallsWithCallableReferences() {
        runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithCallableReferences.kt");
      }

      @Test
      @TestMetadata("specialCallsWithCallableReferencesDontRewriteAtSlice.kt")
      public void testSpecialCallsWithCallableReferencesDontRewriteAtSlice() {
        runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithCallableReferencesDontRewriteAtSlice.kt");
      }

      @Test
      @TestMetadata("specialCallsWithCallableReferencesErrorType.kt")
      public void testSpecialCallsWithCallableReferencesErrorType() {
        runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithCallableReferencesErrorType.kt");
      }

      @Test
      @TestMetadata("specialCallsWithLambdas.kt")
      public void testSpecialCallsWithLambdas() {
        runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithLambdas.kt");
      }

      @Test
      @TestMetadata("substituteStubTypeIntoCR.kt")
      public void testSubstituteStubTypeIntoCR() {
        runTest("compiler/testData/codegen/box/inference/builderInference/substituteStubTypeIntoCR.kt");
      }

      @Test
      @TestMetadata("substituteStubTypeIntolambdaParameterDescriptor.kt")
      public void testSubstituteStubTypeIntolambdaParameterDescriptor() {
        runTest("compiler/testData/codegen/box/inference/builderInference/substituteStubTypeIntolambdaParameterDescriptor.kt");
      }

      @Test
      @TestMetadata("substitutelambdaExtensionReceiverType.kt")
      public void testSubstitutelambdaExtensionReceiverType() {
        runTest("compiler/testData/codegen/box/inference/builderInference/substitutelambdaExtensionReceiverType.kt");
      }

      @Test
      @TestMetadata("topDownCompletionBreakedByNonBuilderInferenceSession.kt")
      public void testTopDownCompletionBreakedByNonBuilderInferenceSession() {
        runTest("compiler/testData/codegen/box/inference/builderInference/topDownCompletionBreakedByNonBuilderInferenceSession.kt");
      }

      @Test
      @TestMetadata("topDownCompletionWithThreeBuilderInferenceCalls.kt")
      public void testTopDownCompletionWithThreeBuilderInferenceCalls() {
        runTest("compiler/testData/codegen/box/inference/builderInference/topDownCompletionWithThreeBuilderInferenceCalls.kt");
      }

      @Test
      @TestMetadata("topDownCompletionWithThreeBuilderInferenceCallsSameLevel.kt")
      public void testTopDownCompletionWithThreeBuilderInferenceCallsSameLevel() {
        runTest("compiler/testData/codegen/box/inference/builderInference/topDownCompletionWithThreeBuilderInferenceCallsSameLevel.kt");
      }

      @Test
      @TestMetadata("topDownCompletionWithTwoBuilderInferenceCalls.kt")
      public void testTopDownCompletionWithTwoBuilderInferenceCalls() {
        runTest("compiler/testData/codegen/box/inference/builderInference/topDownCompletionWithTwoBuilderInferenceCalls.kt");
      }

      @Test
      @TestMetadata("withExpectedType.kt")
      public void testWithExpectedType() {
        runTest("compiler/testData/codegen/box/inference/builderInference/withExpectedType.kt");
      }

      @Test
      @TestMetadata("withoutAnnotation.kt")
      public void testWithoutAnnotation() {
        runTest("compiler/testData/codegen/box/inference/builderInference/withoutAnnotation.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/inlineArgsInPlace")
  @TestDataPath("$PROJECT_ROOT")
  public class InlineArgsInPlace {
    @Test
    public void testAllFilesPresentInInlineArgsInPlace() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineArgsInPlace"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("arrayDequeRemoveAll.kt")
    public void testArrayDequeRemoveAll() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/arrayDequeRemoveAll.kt");
    }

    @Test
    @TestMetadata("breakInArgumentExpression.kt")
    public void testBreakInArgumentExpression() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/breakInArgumentExpression.kt");
    }

    @Test
    @TestMetadata("continueInArgumentExpression.kt")
    public void testContinueInArgumentExpression() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/continueInArgumentExpression.kt");
    }

    @Test
    @TestMetadata("inlineCircularDedepency.kt")
    public void testInlineCircularDedepency() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/inlineCircularDedepency.kt");
    }

    @Test
    @TestMetadata("kotlinReflect.kt")
    public void testKotlinReflect() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/kotlinReflect.kt");
    }

    @Test
    @TestMetadata("kt49370.kt")
    public void testKt49370() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/kt49370.kt");
    }

    @Test
    @TestMetadata("kt49407.kt")
    public void testKt49407() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/kt49407.kt");
    }

    @Test
    @TestMetadata("mapSet.kt")
    public void testMapSet() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/mapSet.kt");
    }

    @Test
    @TestMetadata("mutableCollectionPlusAssign.kt")
    public void testMutableCollectionPlusAssign() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/mutableCollectionPlusAssign.kt");
    }

    @Test
    @TestMetadata("noinlineParameter.kt")
    public void testNoinlineParameter() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/noinlineParameter.kt");
    }

    @Test
    @TestMetadata("suspensionPointInsideArgument.kt")
    public void testSuspensionPointInsideArgument() {
      runTest("compiler/testData/codegen/box/inlineArgsInPlace/suspensionPointInsideArgument.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/inlineClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class InlineClasses {
    @Test
    public void testAllFilesPresentInInlineClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("annotatedMemberExtensionProperty.kt")
    public void testAnnotatedMemberExtensionProperty() {
      runTest("compiler/testData/codegen/box/inlineClasses/annotatedMemberExtensionProperty.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("annotatedMemberExtensionPropertyGeneric.kt")
    public void testAnnotatedMemberExtensionPropertyGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/annotatedMemberExtensionPropertyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("anySuperCall.kt")
    public void testAnySuperCall() {
      runTest("compiler/testData/codegen/box/inlineClasses/anySuperCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("anySuperCallGeneric.kt")
    public void testAnySuperCallGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/anySuperCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boundCallableReferencePassedToInlineFunction.kt")
    public void testBoundCallableReferencePassedToInlineFunction() {
      runTest("compiler/testData/codegen/box/inlineClasses/boundCallableReferencePassedToInlineFunction.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boundCallableReferencePassedToInlineFunctionGeneric.kt")
    public void testBoundCallableReferencePassedToInlineFunctionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boundCallableReferencePassedToInlineFunctionGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boundCallableReferencePassedToInlineFunctionGeneric2.kt")
    public void testBoundCallableReferencePassedToInlineFunctionGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boundCallableReferencePassedToInlineFunctionGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxImplDoesNotExecuteInSecondaryConstructor.kt")
    public void testBoxImplDoesNotExecuteInSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInSecondaryConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxImplDoesNotExecuteInSecondaryConstructorGeneric.kt")
    public void testBoxImplDoesNotExecuteInSecondaryConstructorGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInSecondaryConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxImplDoesNotExecuteInitBlock.kt")
    public void testBoxImplDoesNotExecuteInitBlock() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInitBlock.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxImplDoesNotExecuteInitBlockGeneric.kt")
    public void testBoxImplDoesNotExecuteInitBlockGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInitBlockGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableForFakeOverride.kt")
    public void testBoxNullableForFakeOverride() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableForFakeOverride.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableForFakeOverrideGeneric.kt")
    public void testBoxNullableForFakeOverrideGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableForFakeOverrideGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableForFakeOverrideGeneric2.kt")
    public void testBoxNullableForFakeOverrideGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableForFakeOverrideGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableValueOfInlineClassWithNonNullUnderlyingType.kt")
    public void testBoxNullableValueOfInlineClassWithNonNullUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithNonNullUnderlyingType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric.kt")
    public void testBoxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric2.kt")
    public void testBoxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt")
    public void testBoxNullableValueOfInlineClassWithPrimitiveUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric.kt")
    public void testBoxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric2.kt")
    public void testBoxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxResultInlineClassOfConstructorCall.kt")
    public void testBoxResultInlineClassOfConstructorCall() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxResultInlineClassOfConstructorCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxResultInlineClassOfConstructorCallGeneric.kt")
    public void testBoxResultInlineClassOfConstructorCallGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxResultInlineClassOfConstructorCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxResultInlineClassOfConstructorCallGeneric2.kt")
    public void testBoxResultInlineClassOfConstructorCallGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxResultInlineClassOfConstructorCallGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxUnboxInlineClassesWithOperatorsGetSet.kt")
    public void testBoxUnboxInlineClassesWithOperatorsGetSet() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxInlineClassesWithOperatorsGetSet.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxUnboxInlineClassesWithOperatorsGetSetGeneric.kt")
    public void testBoxUnboxInlineClassesWithOperatorsGetSetGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxInlineClassesWithOperatorsGetSetGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxUnboxOfInlineClassForCapturedVars.kt")
    public void testBoxUnboxOfInlineClassForCapturedVars() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxOfInlineClassForCapturedVars.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("boxUnboxOfInlineClassForCapturedVarsGeneric.kt")
    public void testBoxUnboxOfInlineClassForCapturedVarsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxOfInlineClassForCapturedVarsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("bridgeForFunctionReturningInlineClass.kt")
    public void testBridgeForFunctionReturningInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeForFunctionReturningInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("bridgeForFunctionReturningInlineClassGeneric.kt")
    public void testBridgeForFunctionReturningInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeForFunctionReturningInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("bridgeGenerationWithInlineClassOverAny.kt")
    public void testBridgeGenerationWithInlineClassOverAny() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeGenerationWithInlineClassOverAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("bridgeGenerationWithInlineClassOverAnyGeneric.kt")
    public void testBridgeGenerationWithInlineClassOverAnyGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeGenerationWithInlineClassOverAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("bridgeGenerationWithInlineClassOverAnyGeneric2.kt")
    public void testBridgeGenerationWithInlineClassOverAnyGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgeGenerationWithInlineClassOverAnyGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("bridgesWhenInlineClassImplementsGenericInterface.kt")
    public void testBridgesWhenInlineClassImplementsGenericInterface() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgesWhenInlineClassImplementsGenericInterface.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("bridgesWhenInlineClassImplementsGenericInterfaceGeneric.kt")
    public void testBridgesWhenInlineClassImplementsGenericInterfaceGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/bridgesWhenInlineClassImplementsGenericInterfaceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("callComputablePropertyInsideInlineClass.kt")
    public void testCallComputablePropertyInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/callComputablePropertyInsideInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("callableReferencesWithInlineClasses.kt")
    public void testCallableReferencesWithInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/callableReferencesWithInlineClasses.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("callableReferencesWithInlineClassesGeneric.kt")
    public void testCallableReferencesWithInlineClassesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/callableReferencesWithInlineClassesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("castInsideWhenExpression.kt")
    public void testCastInsideWhenExpression() {
      runTest("compiler/testData/codegen/box/inlineClasses/castInsideWhenExpression.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("castInsideWhenExpressionGeneric.kt")
    public void testCastInsideWhenExpressionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/castInsideWhenExpressionGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxUnboxOfArgumentsOnInlinedFunctions.kt")
    public void testCheckBoxUnboxOfArgumentsOnInlinedFunctions() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxUnboxOfArgumentsOnInlinedFunctions.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxUnboxOfArgumentsOnInlinedFunctionsGeneric.kt")
    public void testCheckBoxUnboxOfArgumentsOnInlinedFunctionsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxUnboxOfArgumentsOnInlinedFunctionsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingAfterAssertionOperator.kt")
    public void testCheckBoxingAfterAssertionOperator() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingAfterAssertionOperator.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingAfterAssertionOperatorGeneric.kt")
    public void testCheckBoxingAfterAssertionOperatorGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingAfterAssertionOperatorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingForComplexClassHierarchy.kt")
    public void testCheckBoxingForComplexClassHierarchy() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForComplexClassHierarchy.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingForComplexClassHierarchyGeneric.kt")
    public void testCheckBoxingForComplexClassHierarchyGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForComplexClassHierarchyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingForNonLocalAndLabeledReturns.kt")
    public void testCheckBoxingForNonLocalAndLabeledReturns() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForNonLocalAndLabeledReturns.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingForNonLocalAndLabeledReturnsGeneric.kt")
    public void testCheckBoxingForNonLocalAndLabeledReturnsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForNonLocalAndLabeledReturnsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingFromReturnTypeForInlineClasses.kt")
    public void testCheckBoxingFromReturnTypeForInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingFromReturnTypeForInlineClasses.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingFromReturnTypeForInlineClassesGeneric.kt")
    public void testCheckBoxingFromReturnTypeForInlineClassesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingFromReturnTypeForInlineClassesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingOnFunctionCalls.kt")
    public void testCheckBoxingOnFunctionCalls() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnFunctionCalls.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingOnFunctionCallsGeneric.kt")
    public void testCheckBoxingOnFunctionCallsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnFunctionCallsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingOnLocalVariableAssignments.kt")
    public void testCheckBoxingOnLocalVariableAssignments() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnLocalVariableAssignments.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingOnLocalVariableAssignmentsGeneric.kt")
    public void testCheckBoxingOnLocalVariableAssignmentsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnLocalVariableAssignmentsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingUnboxingForInheritedTypeSpecializedFunctions.kt")
    public void testCheckBoxingUnboxingForInheritedTypeSpecializedFunctions() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingUnboxingForInheritedTypeSpecializedFunctions.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkBoxingUnboxingForInheritedTypeSpecializedFunctionsGeneric.kt")
    public void testCheckBoxingUnboxingForInheritedTypeSpecializedFunctionsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingUnboxingForInheritedTypeSpecializedFunctionsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkCallingMembersInsideInlineClass.kt")
    public void testCheckCallingMembersInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkCallingMembersInsideInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkCallingMembersInsideInlineClassGeneric.kt")
    public void testCheckCallingMembersInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkCallingMembersInsideInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkCastToInlineClass.kt")
    public void testCheckCastToInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkCastToInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkCastToInlineClassGeneric.kt")
    public void testCheckCastToInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkCastToInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkForInstanceOfInlineClass.kt")
    public void testCheckForInstanceOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkForInstanceOfInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkForInstanceOfInlineClassGeneric.kt")
    public void testCheckForInstanceOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkForInstanceOfInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkLambdaWithInlineClassesInFunctionalType.kt")
    public void testCheckLambdaWithInlineClassesInFunctionalType() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkLambdaWithInlineClassesInFunctionalType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkLambdaWithInlineClassesInFunctionalTypeGeneric.kt")
    public void testCheckLambdaWithInlineClassesInFunctionalTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkLambdaWithInlineClassesInFunctionalTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkUnboxingResultFromTypeVariable.kt")
    public void testCheckUnboxingResultFromTypeVariable() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkUnboxingResultFromTypeVariable.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkUnboxingResultFromTypeVariableGeneric.kt")
    public void testCheckUnboxingResultFromTypeVariableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkUnboxingResultFromTypeVariableGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("checkUnboxingResultFromTypeVariableGeneric2.kt")
    public void testCheckUnboxingResultFromTypeVariableGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/checkUnboxingResultFromTypeVariableGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("classInInlineClassInit.kt")
    public void testClassInInlineClassInit() {
      runTest("compiler/testData/codegen/box/inlineClasses/classInInlineClassInit.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("classInInlineClassInitGeneric.kt")
    public void testClassInInlineClassInitGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/classInInlineClassInitGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("computablePropertyInsideInlineClass.kt")
    public void testComputablePropertyInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/computablePropertyInsideInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("conformToComparableAndCallInterfaceMethod.kt")
    public void testConformToComparableAndCallInterfaceMethod() {
      runTest("compiler/testData/codegen/box/inlineClasses/conformToComparableAndCallInterfaceMethod.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("conformToComparableAndCallInterfaceMethodGeneric.kt")
    public void testConformToComparableAndCallInterfaceMethodGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/conformToComparableAndCallInterfaceMethodGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("constructorCallableReference.kt")
    public void testConstructorCallableReference() {
      runTest("compiler/testData/codegen/box/inlineClasses/constructorCallableReference.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("constructorCallableReferenceGeneric.kt")
    public void testConstructorCallableReferenceGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/constructorCallableReferenceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("correctBoxingForBranchExpressions.kt")
    public void testCorrectBoxingForBranchExpressions() {
      runTest("compiler/testData/codegen/box/inlineClasses/correctBoxingForBranchExpressions.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("correctBoxingForBranchExpressionsGeneric.kt")
    public void testCorrectBoxingForBranchExpressionsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/correctBoxingForBranchExpressionsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("createInlineClassInArgumentPosition.kt")
    public void testCreateInlineClassInArgumentPosition() {
      runTest("compiler/testData/codegen/box/inlineClasses/createInlineClassInArgumentPosition.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("createInlineClassInArgumentPositionGeneric.kt")
    public void testCreateInlineClassInArgumentPositionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/createInlineClassInArgumentPositionGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("crossinlineWithInlineClassInParameter.kt")
    public void testCrossinlineWithInlineClassInParameter() {
      runTest("compiler/testData/codegen/box/inlineClasses/crossinlineWithInlineClassInParameter.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("crossinlineWithInlineClassInParameterGeneric.kt")
    public void testCrossinlineWithInlineClassInParameterGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/crossinlineWithInlineClassInParameterGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("crossinlineWithInlineClassInParameterGeneric2.kt")
    public void testCrossinlineWithInlineClassInParameterGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/crossinlineWithInlineClassInParameterGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("customIterator.kt")
    public void testCustomIterator() {
      runTest("compiler/testData/codegen/box/inlineClasses/customIterator.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("defaultFunctionsFromAnyForInlineClass.kt")
    public void testDefaultFunctionsFromAnyForInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultFunctionsFromAnyForInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("defaultFunctionsFromAnyForInlineClassGeneric.kt")
    public void testDefaultFunctionsFromAnyForInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultFunctionsFromAnyForInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("defaultInterfaceMethodsInInlineClass.kt")
    public void testDefaultInterfaceMethodsInInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultInterfaceMethodsInInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("defaultInterfaceMethodsInInlineClassGeneric.kt")
    public void testDefaultInterfaceMethodsInInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultInterfaceMethodsInInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("defaultWithInlineClassArgument.kt")
    public void testDefaultWithInlineClassArgument() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultWithInlineClassArgument.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("defaultWithInlineClassArgumentGeneric.kt")
    public void testDefaultWithInlineClassArgumentGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/defaultWithInlineClassArgumentGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("elvisWithInlineClassAndNullConstant.kt")
    public void testElvisWithInlineClassAndNullConstant() {
      runTest("compiler/testData/codegen/box/inlineClasses/elvisWithInlineClassAndNullConstant.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("elvisWithInlineClassAndNullConstantGeneric.kt")
    public void testElvisWithInlineClassAndNullConstantGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/elvisWithInlineClassAndNullConstantGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("emptyConstructorForInlineClass.kt")
    public void testEmptyConstructorForInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/emptyConstructorForInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("emptyConstructorForInlineClassGeneric.kt")
    public void testEmptyConstructorForInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/emptyConstructorForInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksInlineClassNonNull.kt")
    public void testEqualityChecksInlineClassNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksInlineClassNonNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksInlineClassNonNullGeneric.kt")
    public void testEqualityChecksInlineClassNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksInlineClassNonNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksMixedNullability.kt")
    public void testEqualityChecksMixedNullability() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksMixedNullability.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksMixedNullabilityGeneric.kt")
    public void testEqualityChecksMixedNullabilityGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksMixedNullabilityGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedInlineClassNonNull.kt")
    public void testEqualityChecksNegatedInlineClassNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedInlineClassNonNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedInlineClassNonNullGeneric.kt")
    public void testEqualityChecksNegatedInlineClassNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedInlineClassNonNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedNonNull.kt")
    public void testEqualityChecksNegatedNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNonNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedNonNullGeneric.kt")
    public void testEqualityChecksNegatedNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNonNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedNullable.kt")
    public void testEqualityChecksNegatedNullable() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNullable.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedNullableGeneric.kt")
    public void testEqualityChecksNegatedNullableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNullableGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedNullableGeneric2.kt")
    public void testEqualityChecksNegatedNullableGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNullableGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedPrimitive.kt")
    public void testEqualityChecksNegatedPrimitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedPrimitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNegatedPrimitiveGeneric.kt")
    public void testEqualityChecksNegatedPrimitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedPrimitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNonNull.kt")
    public void testEqualityChecksNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNonNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNonNullGeneric.kt")
    public void testEqualityChecksNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNonNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNullable.kt")
    public void testEqualityChecksNullable() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNullable.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNullableGeneric.kt")
    public void testEqualityChecksNullableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNullableGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksNullableGeneric2.kt")
    public void testEqualityChecksNullableGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNullableGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksPrimitive.kt")
    public void testEqualityChecksPrimitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksPrimitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksPrimitiveGeneric.kt")
    public void testEqualityChecksPrimitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksPrimitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityChecksPrimitiveUnboxed.kt")
    public void testEqualityChecksPrimitiveUnboxed() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksPrimitiveUnboxed.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityForBoxesOfNullableValuesOfInlineClass.kt")
    public void testEqualityForBoxesOfNullableValuesOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityForBoxesOfNullableValuesOfInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalityForBoxesOfNullableValuesOfInlineClassGeneric.kt")
    public void testEqualityForBoxesOfNullableValuesOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalityForBoxesOfNullableValuesOfInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsCallsLeftArgument.kt")
    public void testEqualsCallsLeftArgument() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsCallsLeftArgument.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsCallsLeftArgumentGeneric.kt")
    public void testEqualsCallsLeftArgumentGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsCallsLeftArgumentGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderInlineClass.kt")
    public void testEqualsEvaluationOrderInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderInlineClassGeneric.kt")
    public void testEqualsEvaluationOrderInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderNonNull.kt")
    public void testEqualsEvaluationOrderNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNonNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderNonNullGeneric.kt")
    public void testEqualsEvaluationOrderNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNonNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderNullable.kt")
    public void testEqualsEvaluationOrderNullable() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNullable.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderNullableGeneric.kt")
    public void testEqualsEvaluationOrderNullableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNullableGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderNullableGeneric2.kt")
    public void testEqualsEvaluationOrderNullableGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNullableGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderPrimitive.kt")
    public void testEqualsEvaluationOrderPrimitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderPrimitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsEvaluationOrderPrimitiveGeneric.kt")
    public void testEqualsEvaluationOrderPrimitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderPrimitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsOperatorWithGenericCall.kt")
    public void testEqualsOperatorWithGenericCall() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsOperatorWithGenericCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("equalsOperatorWithGenericCallGeneric.kt")
    public void testEqualsOperatorWithGenericCallGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/equalsOperatorWithGenericCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("extLambdaInInlineClassFun.kt")
    public void testExtLambdaInInlineClassFun() {
      runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("extLambdaInInlineClassFun2.kt")
    public void testExtLambdaInInlineClassFun2() {
      runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFun2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("extLambdaInInlineClassFun2Generic.kt")
    public void testExtLambdaInInlineClassFun2Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFun2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("extLambdaInInlineClassFunGeneric.kt")
    public void testExtLambdaInInlineClassFunGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("fieldNameClash.kt")
    public void testFieldNameClash() {
      runTest("compiler/testData/codegen/box/inlineClasses/fieldNameClash.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("fieldNameClashGeneric.kt")
    public void testFieldNameClashGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/fieldNameClashGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("funInterfaceDoubleSuffux.kt")
    public void testFunInterfaceDoubleSuffux() {
      runTest("compiler/testData/codegen/box/inlineClasses/funInterfaceDoubleSuffux.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("funInterfaceDoubleSuffux2.kt")
    public void testFunInterfaceDoubleSuffux2() {
      runTest("compiler/testData/codegen/box/inlineClasses/funInterfaceDoubleSuffux2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("functionExpression.kt")
    public void testFunctionExpression() {
      runTest("compiler/testData/codegen/box/inlineClasses/functionExpression.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("functionExpressionGeneric.kt")
    public void testFunctionExpressionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/functionExpressionGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("genericInlineClassSynthMembers.kt")
    public void testGenericInlineClassSynthMembers() {
      runTest("compiler/testData/codegen/box/inlineClasses/genericInlineClassSynthMembers.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("genericVararg2ndConstructor.kt")
    public void testGenericVararg2ndConstructor() {
      runTest("compiler/testData/codegen/box/inlineClasses/genericVararg2ndConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("initBlock.kt")
    public void testInitBlock() {
      runTest("compiler/testData/codegen/box/inlineClasses/initBlock.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("initBlockGeneric.kt")
    public void testInitBlockGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/initBlockGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("initInCompanion.kt")
    public void testInitInCompanion() {
      runTest("compiler/testData/codegen/box/inlineClasses/initInCompanion.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassAsLastExpressionInInLambda.kt")
    public void testInlineClassAsLastExpressionInInLambda() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassAsLastExpressionInInLambda.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassAsLastExpressionInInLambdaGeneric.kt")
    public void testInlineClassAsLastExpressionInInLambdaGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassAsLastExpressionInInLambdaGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassEqualityShouldUseTotalOrderForFloatingPointData.kt")
    public void testInlineClassEqualityShouldUseTotalOrderForFloatingPointData() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassEqualityShouldUseTotalOrderForFloatingPointData.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassEqualityShouldUseTotalOrderForFloatingPointDataGeneric.kt")
    public void testInlineClassEqualityShouldUseTotalOrderForFloatingPointDataGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassEqualityShouldUseTotalOrderForFloatingPointDataGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassFieldHandling.kt")
    public void testInlineClassFieldHandling() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFieldHandling.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassFieldHandlingGeneric.kt")
    public void testInlineClassFieldHandlingGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFieldHandlingGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassFunctionInvoke.kt")
    public void testInlineClassFunctionInvoke() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFunctionInvoke.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassFunctionInvokeGeneric.kt")
    public void testInlineClassFunctionInvokeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFunctionInvokeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassHashCodeOverride.kt")
    public void testInlineClassHashCodeOverride() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassHashCodeOverride.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassInInitBlock.kt")
    public void testInlineClassInInitBlock() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInInitBlock.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassInInitBlockGeneric.kt")
    public void testInlineClassInInitBlockGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInInitBlockGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassInStringTemplate.kt")
    public void testInlineClassInStringTemplate() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInStringTemplate.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassInStringTemplateGeneric.kt")
    public void testInlineClassInStringTemplateGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInStringTemplateGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassPropertyReferenceGetAndSet.kt")
    public void testInlineClassPropertyReferenceGetAndSet() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassPropertyReferenceGetAndSet.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassPropertyReferenceGetAndSetGeneric.kt")
    public void testInlineClassPropertyReferenceGetAndSetGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassPropertyReferenceGetAndSetGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassValueCapturedInInlineLambda.kt")
    public void testInlineClassValueCapturedInInlineLambda() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInInlineLambda.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassValueCapturedInInlineLambdaGeneric.kt")
    public void testInlineClassValueCapturedInInlineLambdaGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInInlineLambdaGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassValueCapturedInNonInlineLambda.kt")
    public void testInlineClassValueCapturedInNonInlineLambda() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInNonInlineLambda.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassValueCapturedInNonInlineLambdaGeneric.kt")
    public void testInlineClassValueCapturedInNonInlineLambdaGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInNonInlineLambdaGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassValuesInsideStrings.kt")
    public void testInlineClassValuesInsideStrings() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValuesInsideStrings.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassValuesInsideStringsGeneric.kt")
    public void testInlineClassValuesInsideStringsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValuesInsideStringsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassWithCustomEquals.kt")
    public void testInlineClassWithCustomEquals() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithCustomEquals.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassWithCustomEqualsGeneric.kt")
    public void testInlineClassWithCustomEqualsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithCustomEqualsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassWithDefaultFunctionsFromAny.kt")
    public void testInlineClassWithDefaultFunctionsFromAny() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithDefaultFunctionsFromAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassWithDefaultFunctionsFromAnyGeneric.kt")
    public void testInlineClassWithDefaultFunctionsFromAnyGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithDefaultFunctionsFromAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassesAsInlineFunParameters.kt")
    public void testInlineClassesAsInlineFunParameters() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesAsInlineFunParameters.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassesAsInlineFunParametersGeneric.kt")
    public void testInlineClassesAsInlineFunParametersGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesAsInlineFunParametersGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassesCheckCast.kt")
    public void testInlineClassesCheckCast() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesCheckCast.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassesCheckCastGeneric.kt")
    public void testInlineClassesCheckCastGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesCheckCastGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassesInInlineLambdaParameters.kt")
    public void testInlineClassesInInlineLambdaParameters() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesInInlineLambdaParameters.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassesInInlineLambdaParametersGeneric.kt")
    public void testInlineClassesInInlineLambdaParametersGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesInInlineLambdaParametersGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassesRefTypesInInlineLambdaParameters.kt")
    public void testInlineClassesRefTypesInInlineLambdaParameters() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesRefTypesInInlineLambdaParameters.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineClassesRefTypesInInlineLambdaParametersGeneric.kt")
    public void testInlineClassesRefTypesInInlineLambdaParametersGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesRefTypesInInlineLambdaParametersGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineExtLambdaInInlineClassFun.kt")
    public void testInlineExtLambdaInInlineClassFun() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineExtLambdaInInlineClassFun2.kt")
    public void testInlineExtLambdaInInlineClassFun2() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFun2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineExtLambdaInInlineClassFun2Generic.kt")
    public void testInlineExtLambdaInInlineClassFun2Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFun2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineExtLambdaInInlineClassFunGeneric.kt")
    public void testInlineExtLambdaInInlineClassFunGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineFunctionInsideInlineClass.kt")
    public void testInlineFunctionInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineFunctionInsideInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("inlineFunctionInsideInlineClassGeneric.kt")
    public void testInlineFunctionInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/inlineFunctionInsideInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("iterateOverArrayOfInlineClassValues.kt")
    public void testIterateOverArrayOfInlineClassValues() {
      runTest("compiler/testData/codegen/box/inlineClasses/iterateOverArrayOfInlineClassValues.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("iterateOverArrayOfInlineClassValuesGeneric.kt")
    public void testIterateOverArrayOfInlineClassValuesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/iterateOverArrayOfInlineClassValuesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("iterateOverListOfInlineClassValues.kt")
    public void testIterateOverListOfInlineClassValues() {
      runTest("compiler/testData/codegen/box/inlineClasses/iterateOverListOfInlineClassValues.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("iterateOverListOfInlineClassValuesGeneric.kt")
    public void testIterateOverListOfInlineClassValuesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/iterateOverListOfInlineClassValuesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("jvmInline.kt")
    public void testJvmInline() {
      runTest("compiler/testData/codegen/box/inlineClasses/jvmInline.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt25246.kt")
    public void testKt25246() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt25246.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt25750.kt")
    public void testKt25750() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt25750.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt25750Generic.kt")
    public void testKt25750Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt25750Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt25771.kt")
    public void testKt25771() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt25771.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt26103.kt")
    public void testKt26103() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt26103.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt26103_contravariantUnderlyingType.kt")
    public void testKt26103_contravariantUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt26103_contravariantUnderlyingType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt26103_covariantUnderlyingType.kt")
    public void testKt26103_covariantUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt26103_covariantUnderlyingType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt26103_original.kt")
    public void testKt26103_original() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt26103_original.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096.kt")
    public void testKt27096() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096Generic.kt")
    public void testKt27096Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_enum.kt")
    public void testKt27096_enum() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_enum.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_enumGeneric.kt")
    public void testKt27096_enumGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_enumGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_functional.kt")
    public void testKt27096_functional() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_functional.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_functionalGeneric.kt")
    public void testKt27096_functionalGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_functionalGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_innerClass.kt")
    public void testKt27096_innerClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_innerClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_nullablePrimitive.kt")
    public void testKt27096_nullablePrimitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullablePrimitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_nullablePrimitiveGeneric.kt")
    public void testKt27096_nullablePrimitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullablePrimitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_nullablePrimitiveGeneric2.kt")
    public void testKt27096_nullablePrimitiveGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullablePrimitiveGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_nullableReference.kt")
    public void testKt27096_nullableReference() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullableReference.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_nullableReferenceGeneric.kt")
    public void testKt27096_nullableReferenceGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullableReferenceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_nullableReferenceGeneric2.kt")
    public void testKt27096_nullableReferenceGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullableReferenceGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_primitive.kt")
    public void testKt27096_primitive() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_primitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_primitiveGeneric.kt")
    public void testKt27096_primitiveGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_primitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_reference.kt")
    public void testKt27096_reference() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_reference.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27096_referenceGeneric.kt")
    public void testKt27096_referenceGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27096_referenceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27113.kt")
    public void testKt27113() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27113.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27113a.kt")
    public void testKt27113a() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27113a.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27113aGeneric.kt")
    public void testKt27113aGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27113aGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27132.kt")
    public void testKt27132() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27132.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27132Generic.kt")
    public void testKt27132Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27132Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27140.kt")
    public void testKt27140() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27140.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27140Generic.kt")
    public void testKt27140Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27140Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27705.kt")
    public void testKt27705() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27705.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27705Generic.kt")
    public void testKt27705Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27705Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27706.kt")
    public void testKt27706() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27706.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt27706Generic.kt")
    public void testKt27706Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt27706Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt28405.kt")
    public void testKt28405() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt28405.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt28585.kt")
    public void testKt28585() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt28585.kt");
    }

    @Test
    @TestMetadata("kt31994.kt")
    public void testKt31994() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt31994.kt");
    }

    @Test
    @TestMetadata("kt32793.kt")
    public void testKt32793() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt32793.kt");
    }

    @Test
    @TestMetadata("kt33119.kt")
    public void testKt33119() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt33119.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt33119Generic.kt")
    public void testKt33119Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt33119Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt34268.kt")
    public void testKt34268() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt34268.kt");
    }

    @Test
    @TestMetadata("kt34902.kt")
    public void testKt34902() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt34902.kt");
    }

    @Test
    @TestMetadata("kt37998.kt")
    public void testKt37998() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt37998.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt37998Generic.kt")
    public void testKt37998Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt37998Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt38680.kt")
    public void testKt38680() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt38680Generic.kt")
    public void testKt38680Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt38680a.kt")
    public void testKt38680a() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680a.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt38680aGeneric.kt")
    public void testKt38680aGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680aGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt38680b.kt")
    public void testKt38680b() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680b.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt38680bGeneric.kt")
    public void testKt38680bGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt38680bGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt44141.kt")
    public void testKt44141() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44141.kt");
    }

    @Test
    @TestMetadata("kt44867.kt")
    public void testKt44867() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44867.kt");
    }

    @Test
    @TestMetadata("kt44978.kt")
    public void testKt44978() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt44978.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt45084.kt")
    public void testKt45084() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt45084.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt45084Generic.kt")
    public void testKt45084Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt45084Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt45991.kt")
    public void testKt45991() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt45991.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt46554.kt")
    public void testKt46554() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt46554.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt46554Generic.kt")
    public void testKt46554Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt46554Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt47762.kt")
    public void testKt47762() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt47762.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt47762Generic.kt")
    public void testKt47762Generic() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt47762Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt47823.kt")
    public void testKt47823() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt47823.kt");
    }

    @Test
    @TestMetadata("kt50974_resultMultiModule.kt")
    public void testKt50974_resultMultiModule() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt50974_resultMultiModule.kt");
    }

    @Test
    @TestMetadata("kt51157.kt")
    public void testKt51157() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt51157.kt");
    }

    @Test
    @TestMetadata("kt51254.kt")
    public void testKt51254() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt51254.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt52913.kt")
    public void testKt52913() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt52913.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt54455.kt")
    public void testKt54455() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt54455.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("kt57973.kt")
    public void testKt57973() {
      runTest("compiler/testData/codegen/box/inlineClasses/kt57973.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("lateinitInlineClasses.kt")
    public void testLateinitInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/lateinitInlineClasses.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("mangledDefaultParameterFunction.kt")
    public void testMangledDefaultParameterFunction() {
      runTest("compiler/testData/codegen/box/inlineClasses/mangledDefaultParameterFunction.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("mangledDefaultParameterFunctionGeneric.kt")
    public void testMangledDefaultParameterFunctionGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/mangledDefaultParameterFunctionGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("mangledSuperCalls.kt")
    public void testMangledSuperCalls() {
      runTest("compiler/testData/codegen/box/inlineClasses/mangledSuperCalls.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("mangledSuperCallsGeneric.kt")
    public void testMangledSuperCallsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/mangledSuperCallsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("multifileClass.kt")
    public void testMultifileClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/multifileClass.kt");
    }

    @Test
    @TestMetadata("nestedInlineClass.kt")
    public void testNestedInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/nestedInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("nestedInlineClassGeneric.kt")
    public void testNestedInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/nestedInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("noAssertionsOnInlineClassBasedOnNullableType.kt")
    public void testNoAssertionsOnInlineClassBasedOnNullableType() {
      runTest("compiler/testData/codegen/box/inlineClasses/noAssertionsOnInlineClassBasedOnNullableType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("noAssertionsOnInlineClassBasedOnNullableTypeGeneric.kt")
    public void testNoAssertionsOnInlineClassBasedOnNullableTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/noAssertionsOnInlineClassBasedOnNullableTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("noReturnTypeMangling.kt")
    public void testNoReturnTypeMangling() {
      runTest("compiler/testData/codegen/box/inlineClasses/noReturnTypeMangling.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("noReturnTypeManglingGeneric.kt")
    public void testNoReturnTypeManglingGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/noReturnTypeManglingGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("nullableEqeqNonNull.kt")
    public void testNullableEqeqNonNull() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableEqeqNonNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("nullableEqeqNonNullGeneric.kt")
    public void testNullableEqeqNonNullGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableEqeqNonNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("nullableWrapperEquality.kt")
    public void testNullableWrapperEquality() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableWrapperEquality.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("nullableWrapperEqualityGeneric.kt")
    public void testNullableWrapperEqualityGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableWrapperEqualityGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("nullableWrapperEqualityGeneric2.kt")
    public void testNullableWrapperEqualityGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/nullableWrapperEqualityGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("overrideReturnNothing.kt")
    public void testOverrideReturnNothing() {
      runTest("compiler/testData/codegen/box/inlineClasses/overrideReturnNothing.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("overridingFunCallingPrivateFun.kt")
    public void testOverridingFunCallingPrivateFun() {
      runTest("compiler/testData/codegen/box/inlineClasses/overridingFunCallingPrivateFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("overridingFunCallingPrivateFunGeneric.kt")
    public void testOverridingFunCallingPrivateFunGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/overridingFunCallingPrivateFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("passInlineClassAsVararg.kt")
    public void testPassInlineClassAsVararg() {
      runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassAsVararg.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("passInlineClassAsVarargGeneric.kt")
    public void testPassInlineClassAsVarargGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassAsVarargGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("passInlineClassWithSpreadOperatorToVarargs.kt")
    public void testPassInlineClassWithSpreadOperatorToVarargs() {
      runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassWithSpreadOperatorToVarargs.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("passInlineClassWithSpreadOperatorToVarargsGeneric.kt")
    public void testPassInlineClassWithSpreadOperatorToVarargsGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassWithSpreadOperatorToVarargsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("privateConstructorFunInterfaceMultiModule.kt")
    public void testPrivateConstructorFunInterfaceMultiModule() {
      runTest("compiler/testData/codegen/box/inlineClasses/privateConstructorFunInterfaceMultiModule.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("privateConstructorFunInterfaceMultiModuleGeneric.kt")
    public void testPrivateConstructorFunInterfaceMultiModuleGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/privateConstructorFunInterfaceMultiModuleGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("propertyLoweringOrder.kt")
    public void testPropertyLoweringOrder() {
      runTest("compiler/testData/codegen/box/inlineClasses/propertyLoweringOrder.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("propertyLoweringOrderGeneric.kt")
    public void testPropertyLoweringOrderGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/propertyLoweringOrderGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("referToPropertyInCompanionObjectOfInlineClass.kt")
    public void testReferToPropertyInCompanionObjectOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToPropertyInCompanionObjectOfInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("referToPropertyInCompanionObjectOfInlineClassGeneric.kt")
    public void testReferToPropertyInCompanionObjectOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToPropertyInCompanionObjectOfInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("referToUnderlyingPropertyInsideInlineClass.kt")
    public void testReferToUnderlyingPropertyInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyInsideInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("referToUnderlyingPropertyInsideInlineClassGeneric.kt")
    public void testReferToUnderlyingPropertyInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyInsideInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("referToUnderlyingPropertyOfInlineClass.kt")
    public void testReferToUnderlyingPropertyOfInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyOfInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("referToUnderlyingPropertyOfInlineClassGeneric.kt")
    public void testReferToUnderlyingPropertyOfInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyOfInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("removeInInlineCollectionOfInlineClassAsInt.kt")
    public void testRemoveInInlineCollectionOfInlineClassAsInt() {
      runTest("compiler/testData/codegen/box/inlineClasses/removeInInlineCollectionOfInlineClassAsInt.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("result.kt")
    public void testResult() {
      runTest("compiler/testData/codegen/box/inlineClasses/result.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("resultGeneric.kt")
    public void testResultGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/resultGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("resultGeneric2.kt")
    public void testResultGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/resultGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("resultInlining.kt")
    public void testResultInlining() {
      runTest("compiler/testData/codegen/box/inlineClasses/resultInlining.kt");
    }

    @Test
    @TestMetadata("resultRunCatchingOrElse.kt")
    public void testResultRunCatchingOrElse() {
      runTest("compiler/testData/codegen/box/inlineClasses/resultRunCatchingOrElse.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("safeAsOfTypeParameterWithInlineClassBound.kt")
    public void testSafeAsOfTypeParameterWithInlineClassBound() {
      runTest("compiler/testData/codegen/box/inlineClasses/safeAsOfTypeParameterWithInlineClassBound.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("safeAsOfTypeParameterWithInlineClassBoundGeneric.kt")
    public void testSafeAsOfTypeParameterWithInlineClassBoundGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/safeAsOfTypeParameterWithInlineClassBoundGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("samWrapperDifferentModule.kt")
    public void testSamWrapperDifferentModule() {
      runTest("compiler/testData/codegen/box/inlineClasses/samWrapperDifferentModule.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("samWrapperDifferentModuleGeneric.kt")
    public void testSamWrapperDifferentModuleGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/samWrapperDifferentModuleGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("secondaryConstructorVisibilies.kt")
    public void testSecondaryConstructorVisibilies() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorVisibilies.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("secondaryConstructorWithVararg.kt")
    public void testSecondaryConstructorWithVararg() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorWithVararg.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("secondaryConstructorWithVarargGeneric.kt")
    public void testSecondaryConstructorWithVarargGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorWithVarargGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("secondaryConstructorsInsideInlineClass.kt")
    public void testSecondaryConstructorsInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("secondaryConstructorsInsideInlineClassGeneric.kt")
    public void testSecondaryConstructorsInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("secondaryConstructorsInsideInlineClassWithPrimitiveCarrierType.kt")
    public void testSecondaryConstructorsInsideInlineClassWithPrimitiveCarrierType() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClassWithPrimitiveCarrierType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("secondaryConstructorsInsideInlineClassWithPrimitiveCarrierTypeGeneric.kt")
    public void testSecondaryConstructorsInsideInlineClassWithPrimitiveCarrierTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClassWithPrimitiveCarrierTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("secondaryConstructorsWithBody.kt")
    public void testSecondaryConstructorsWithBody() {
      runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsWithBody.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("simpleSecondaryConstructor.kt")
    public void testSimpleSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/inlineClasses/simpleSecondaryConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("simpleSecondaryConstructorGeneric.kt")
    public void testSimpleSecondaryConstructorGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/simpleSecondaryConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("smartCastOnThisOfInlineClassType.kt")
    public void testSmartCastOnThisOfInlineClassType() {
      runTest("compiler/testData/codegen/box/inlineClasses/smartCastOnThisOfInlineClassType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("smartCastOnThisOfInlineClassTypeGeneric.kt")
    public void testSmartCastOnThisOfInlineClassTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/smartCastOnThisOfInlineClassTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("stringPlus.kt")
    public void testStringPlus() {
      runTest("compiler/testData/codegen/box/inlineClasses/stringPlus.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("stringPlusGeneric.kt")
    public void testStringPlusGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/stringPlusGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("toStringCallingPrivateFun.kt")
    public void testToStringCallingPrivateFun() {
      runTest("compiler/testData/codegen/box/inlineClasses/toStringCallingPrivateFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("toStringCallingPrivateFunGeneric.kt")
    public void testToStringCallingPrivateFunGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/toStringCallingPrivateFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("toStringOfUnboxedNullable.kt")
    public void testToStringOfUnboxedNullable() {
      runTest("compiler/testData/codegen/box/inlineClasses/toStringOfUnboxedNullable.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("toStringOfUnboxedNullableGeneric.kt")
    public void testToStringOfUnboxedNullableGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/toStringOfUnboxedNullableGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("typeChecksForInlineClasses.kt")
    public void testTypeChecksForInlineClasses() {
      runTest("compiler/testData/codegen/box/inlineClasses/typeChecksForInlineClasses.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("typeChecksForInlineClassesGeneric.kt")
    public void testTypeChecksForInlineClassesGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/typeChecksForInlineClassesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("UIntArraySortExample.kt")
    public void testUIntArraySortExample() {
      runTest("compiler/testData/codegen/box/inlineClasses/UIntArraySortExample.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("UIntArraySortExampleGeneric.kt")
    public void testUIntArraySortExampleGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/UIntArraySortExampleGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("UIntSafeAsInt.kt")
    public void testUIntSafeAsInt() {
      runTest("compiler/testData/codegen/box/inlineClasses/UIntSafeAsInt.kt");
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithNonNullUnderlyingType.kt")
    public void testUnboxNullableValueOfInlineClassWithNonNullUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNonNullUnderlyingType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric.kt")
    public void testUnboxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNonNullUnderlyingTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI.kt")
    public void testUnboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI2.kt")
    public void testUnboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI2() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullableInlineClassUnderlyingTypeGWI2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingType.kt")
    public void testUnboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI.kt")
    public void testUnboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI2.kt")
    public void testUnboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI2() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGWI2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGeneric.kt")
    public void testUnboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNullablePrimitiveUnderlyingTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt")
    public void testUnboxNullableValueOfInlineClassWithPrimitiveUnderlyingType() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric.kt")
    public void testUnboxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithPrimitiveUnderlyingTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxParameterOfSuspendLambdaBeforeInvoke.kt")
    public void testUnboxParameterOfSuspendLambdaBeforeInvoke() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxParameterOfSuspendLambdaBeforeInvoke.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxParameterOfSuspendLambdaBeforeInvokeGeneric.kt")
    public void testUnboxParameterOfSuspendLambdaBeforeInvokeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxParameterOfSuspendLambdaBeforeInvokeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxReceiverOnCallingMethodFromInlineClass.kt")
    public void testUnboxReceiverOnCallingMethodFromInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxReceiverOnCallingMethodFromInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxReceiverOnCallingMethodFromInlineClassGeneric.kt")
    public void testUnboxReceiverOnCallingMethodFromInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxReceiverOnCallingMethodFromInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxResultParameterWhenCapturingToCrossinlineLambda.kt")
    public void testUnboxResultParameterWhenCapturingToCrossinlineLambda() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxResultParameterWhenCapturingToCrossinlineLambda.kt");
    }

    @Test
    @TestMetadata("unboxValueFromPlatformType.kt")
    public void testUnboxValueFromPlatformType() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueFromPlatformType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxValueFromPlatformTypeGeneric.kt")
    public void testUnboxValueFromPlatformTypeGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueFromPlatformTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxValueOfAnyBeforeMethodInvocation.kt")
    public void testUnboxValueOfAnyBeforeMethodInvocation() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfAnyBeforeMethodInvocation.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxValueOfAnyBeforeMethodInvocationGeneric.kt")
    public void testUnboxValueOfAnyBeforeMethodInvocationGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfAnyBeforeMethodInvocationGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxValueOfAnyBeforeMethodInvocationGeneric2.kt")
    public void testUnboxValueOfAnyBeforeMethodInvocationGeneric2() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfAnyBeforeMethodInvocationGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("unboxValueOfNullableInlineClassUsingInlineFunction.kt")
    public void testUnboxValueOfNullableInlineClassUsingInlineFunction() {
      runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfNullableInlineClassUsingInlineFunction.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("useInlineClassesInsideElvisOperator.kt")
    public void testUseInlineClassesInsideElvisOperator() {
      runTest("compiler/testData/codegen/box/inlineClasses/useInlineClassesInsideElvisOperator.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("useInlineClassesInsideElvisOperatorGeneric.kt")
    public void testUseInlineClassesInsideElvisOperatorGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/useInlineClassesInsideElvisOperatorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("useInlineFunctionInsideInlineClass.kt")
    public void testUseInlineFunctionInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/useInlineFunctionInsideInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("useInlineFunctionInsideInlineClassGeneric.kt")
    public void testUseInlineFunctionInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/useInlineFunctionInsideInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("useThisInsideInlineClass.kt")
    public void testUseThisInsideInlineClass() {
      runTest("compiler/testData/codegen/box/inlineClasses/useThisInsideInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("useThisInsideInlineClassGeneric.kt")
    public void testUseThisInsideInlineClassGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/useThisInsideInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("whenWithSubject.kt")
    public void testWhenWithSubject() {
      runTest("compiler/testData/codegen/box/inlineClasses/whenWithSubject.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Test
    @TestMetadata("whenWithSubjectGeneric.kt")
    public void testWhenWithSubjectGeneric() {
      runTest("compiler/testData/codegen/box/inlineClasses/whenWithSubjectGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda")
    @TestDataPath("$PROJECT_ROOT")
    public class BoxReturnValueInLambda {
      @Test
      public void testAllFilesPresentInBoxReturnValueInLambda() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("boxAny.kt")
      public void testBoxAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxAnyGeneric.kt")
      public void testBoxAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxFunLiteralAny.kt")
      public void testBoxFunLiteralAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxFunLiteralAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxFunLiteralAnyGeneric.kt")
      public void testBoxFunLiteralAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxFunLiteralAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxInt.kt")
      public void testBoxInt() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxInt.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxIntGeneric.kt")
      public void testBoxIntGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxIntGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableAny.kt")
      public void testBoxNullableAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableAnyGeneric.kt")
      public void testBoxNullableAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableAnyGeneric2.kt")
      public void testBoxNullableAnyGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableAnyNull.kt")
      public void testBoxNullableAnyNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableAnyNullGeneric.kt")
      public void testBoxNullableAnyNullGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableAnyNullGeneric2.kt")
      public void testBoxNullableAnyNullGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyNullGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableInt.kt")
      public void testBoxNullableInt() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableInt.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableIntGeneric.kt")
      public void testBoxNullableIntGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableIntGeneric2.kt")
      public void testBoxNullableIntGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableIntNull.kt")
      public void testBoxNullableIntNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableIntNullGeneric.kt")
      public void testBoxNullableIntNullGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableIntNullGeneric2.kt")
      public void testBoxNullableIntNullGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntNullGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableString.kt")
      public void testBoxNullableString() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableString.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableStringGeneric.kt")
      public void testBoxNullableStringGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableStringGeneric2.kt")
      public void testBoxNullableStringGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableStringNull.kt")
      public void testBoxNullableStringNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableStringNullGeneric.kt")
      public void testBoxNullableStringNullGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxNullableStringNullGeneric2.kt")
      public void testBoxNullableStringNullGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringNullGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxString.kt")
      public void testBoxString() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxString.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxStringGeneric.kt")
      public void testBoxStringGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxStringGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt27586_1.kt")
      public void testKt27586_1() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/kt27586_1.kt");
      }

      @Test
      @TestMetadata("kt27586_2.kt")
      public void testKt27586_2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/kt27586_2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride")
    @TestDataPath("$PROJECT_ROOT")
    public class BoxReturnValueOnOverride {
      @Test
      public void testAllFilesPresentInBoxReturnValueOnOverride() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("boxReturnValueInDefaultMethod.kt")
      public void testBoxReturnValueInDefaultMethod() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/boxReturnValueInDefaultMethod.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boxReturnValueInDefaultMethodGenericInt.kt")
      public void testBoxReturnValueInDefaultMethodGenericInt() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/boxReturnValueInDefaultMethodGenericInt.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideChainErasedToAny.kt")
      public void testCovariantOverrideChainErasedToAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideChainErasedToAnyGeneric.kt")
      public void testCovariantOverrideChainErasedToAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideChainErasedToNullableAny.kt")
      public void testCovariantOverrideChainErasedToNullableAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToNullableAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideChainErasedToNullableAnyGeneric.kt")
      public void testCovariantOverrideChainErasedToNullableAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToNullableAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideChainErasedToNullableAnyGeneric2.kt")
      public void testCovariantOverrideChainErasedToNullableAnyGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToNullableAnyGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideErasedToAny.kt")
      public void testCovariantOverrideErasedToAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideErasedToAnyGeneric.kt")
      public void testCovariantOverrideErasedToAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideErasedToInterface.kt")
      public void testCovariantOverrideErasedToInterface() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToInterface.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideErasedToInterfaceGeneric.kt")
      public void testCovariantOverrideErasedToInterfaceGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToInterfaceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideErasedToPrimitive.kt")
      public void testCovariantOverrideErasedToPrimitive() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToPrimitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideErasedToPrimitiveGeneric.kt")
      public void testCovariantOverrideErasedToPrimitiveGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToPrimitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideListVsMutableList.kt")
      public void testCovariantOverrideListVsMutableList() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideListVsMutableList.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideListVsMutableListGeneric.kt")
      public void testCovariantOverrideListVsMutableListGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideListVsMutableListGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideUnrelatedInterfaces.kt")
      public void testCovariantOverrideUnrelatedInterfaces() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideUnrelatedInterfaces.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("covariantOverrideUnrelatedInterfacesGeneric.kt")
      public void testCovariantOverrideUnrelatedInterfacesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideUnrelatedInterfacesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericOverride.kt")
      public void testGenericOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverride.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericOverrideGeneric.kt")
      public void testGenericOverrideGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverrideGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericOverrideSpecialized.kt")
      public void testGenericOverrideSpecialized() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverrideSpecialized.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericOverrideSpecializedGeneric.kt")
      public void testGenericOverrideSpecializedGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverrideSpecializedGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassInOverriddenReturnTypes.kt")
      public void testInlineClassInOverriddenReturnTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/inlineClassInOverriddenReturnTypes.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassInOverriddenReturnTypesGeneric.kt")
      public void testInlineClassInOverriddenReturnTypesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/inlineClassInOverriddenReturnTypesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt28483.kt")
      public void testKt28483() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt28483.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt28483Generic.kt")
      public void testKt28483Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt28483Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt28483Generic2.kt")
      public void testKt28483Generic2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt28483Generic2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt31585.kt")
      public void testKt31585() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt31585.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt31585Generic.kt")
      public void testKt31585Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt31585Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt35234.kt")
      public void testKt35234() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt35234.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt35234Generic.kt")
      public void testKt35234Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt35234Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt35234a.kt")
      public void testKt35234a() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt35234a.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithInlineClass.kt")
      public void testOverrideGenericWithInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithInlineClassGeneric.kt")
      public void testOverrideGenericWithInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullAny.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullAnyGeneric.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG2.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyG2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG2.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNG2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull.kt")
      public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideNullableInlineClassWithNonNullAny.kt")
      public void testOverrideNullableInlineClassWithNonNullAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideNullableInlineClassWithNonNullAnyGeneric.kt")
      public void testOverrideNullableInlineClassWithNonNullAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAny.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAny() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyGeneric.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyGeneric2.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyNull.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyNull() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyNull.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyNullGeneric.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyNullGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyNullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyNullGeneric2.kt")
      public void testOverrideNullableInlineClassWithNonNullNullableAnyNullGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyNullGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("relatedReturnTypes1a.kt")
      public void testRelatedReturnTypes1a() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1a.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("relatedReturnTypes1aGeneric.kt")
      public void testRelatedReturnTypes1aGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1aGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("relatedReturnTypes1b.kt")
      public void testRelatedReturnTypes1b() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1b.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("relatedReturnTypes1bGeneric.kt")
      public void testRelatedReturnTypes1bGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1bGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("relatedReturnTypes2a.kt")
      public void testRelatedReturnTypes2a() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2a.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("relatedReturnTypes2aGeneric.kt")
      public void testRelatedReturnTypes2aGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2aGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("relatedReturnTypes2b.kt")
      public void testRelatedReturnTypes2b() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2b.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("relatedReturnTypes2bGeneric.kt")
      public void testRelatedReturnTypes2bGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2bGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("uncastInlineClassToAnyAndBack.kt")
      public void testUncastInlineClassToAnyAndBack() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/uncastInlineClassToAnyAndBack.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("uncastInlineClassToAnyAndBackGeneric.kt")
      public void testUncastInlineClassToAnyAndBackGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/uncastInlineClassToAnyAndBackGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("unrelatedGenerics.kt")
      public void testUnrelatedGenerics() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/unrelatedGenerics.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("unrelatedGenericsGeneric.kt")
      public void testUnrelatedGenericsGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/unrelatedGenericsGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/callableReferences")
    @TestDataPath("$PROJECT_ROOT")
    public class CallableReferences {
      @Test
      public void testAllFilesPresentInCallableReferences() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/callableReferences"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("boundInlineClassExtensionFun.kt")
      public void testBoundInlineClassExtensionFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassExtensionFunGeneric.kt")
      public void testBoundInlineClassExtensionFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassExtensionVal.kt")
      public void testBoundInlineClassExtensionVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassExtensionValGeneric.kt")
      public void testBoundInlineClassExtensionValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassMemberFun.kt")
      public void testBoundInlineClassMemberFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassMemberFunGeneric.kt")
      public void testBoundInlineClassMemberFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassMemberVal.kt")
      public void testBoundInlineClassMemberVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassMemberValGeneric.kt")
      public void testBoundInlineClassMemberValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassPrimaryVal.kt")
      public void testBoundInlineClassPrimaryVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassPrimaryVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("boundInlineClassPrimaryValGeneric.kt")
      public void testBoundInlineClassPrimaryValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassPrimaryValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("constructorWithInlineClassParameters.kt")
      public void testConstructorWithInlineClassParameters() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/constructorWithInlineClassParameters.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("constructorWithInlineClassParametersGeneric.kt")
      public void testConstructorWithInlineClassParametersGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/constructorWithInlineClassParametersGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("equalsHashCodeToString.kt")
      public void testEqualsHashCodeToString() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/equalsHashCodeToString.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("equalsHashCodeToStringGeneric.kt")
      public void testEqualsHashCodeToStringGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/equalsHashCodeToStringGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("funWithInlineClassParameters.kt")
      public void testFunWithInlineClassParameters() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/funWithInlineClassParameters.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("funWithInlineClassParametersGeneric.kt")
      public void testFunWithInlineClassParametersGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/funWithInlineClassParametersGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassExtensionFun.kt")
      public void testInlineClassExtensionFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassExtensionFunGeneric.kt")
      public void testInlineClassExtensionFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassExtensionVal.kt")
      public void testInlineClassExtensionVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassExtensionValGeneric.kt")
      public void testInlineClassExtensionValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassInternalPrimaryVal.kt")
      public void testInlineClassInternalPrimaryVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassInternalPrimaryVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassInternalPrimaryValGeneric.kt")
      public void testInlineClassInternalPrimaryValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassInternalPrimaryValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassMemberFun.kt")
      public void testInlineClassMemberFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassMemberFunGeneric.kt")
      public void testInlineClassMemberFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassMemberVal.kt")
      public void testInlineClassMemberVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassMemberValGeneric.kt")
      public void testInlineClassMemberValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrimaryConstructor.kt")
      public void testInlineClassPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrimaryConstructorGeneric.kt")
      public void testInlineClassPrimaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrimaryVal.kt")
      public void testInlineClassPrimaryVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrimaryValGeneric.kt")
      public void testInlineClassPrimaryValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrivatePrimaryVal.kt")
      public void testInlineClassPrivatePrimaryVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrivatePrimaryVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrivatePrimaryValGeneric.kt")
      public void testInlineClassPrivatePrimaryValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrivatePrimaryValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassTypeBoundMemberVar.kt")
      public void testInlineClassTypeBoundMemberVar() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeBoundMemberVar.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassTypeBoundMemberVarGeneric.kt")
      public void testInlineClassTypeBoundMemberVarGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeBoundMemberVarGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassTypeMemberVar.kt")
      public void testInlineClassTypeMemberVar() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeMemberVar.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassTypeMemberVarGeneric.kt")
      public void testInlineClassTypeMemberVarGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeMemberVarGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassTypeTopLevelVar.kt")
      public void testInlineClassTypeTopLevelVar() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeTopLevelVar.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassTypeTopLevelVarGeneric.kt")
      public void testInlineClassTypeTopLevelVarGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeTopLevelVarGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt37986.kt")
      public void testKt37986() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/kt37986.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt37986Generic.kt")
      public void testKt37986Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/kt37986Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/inlineClasses/callableReferences/let")
      @TestDataPath("$PROJECT_ROOT")
      public class Let {
        @Test
        public void testAllFilesPresentInLet() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/callableReferences/let"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("any.kt")
        public void testAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/any.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyGeneric.kt")
        public void testAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/anyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyN.kt")
        public void testAnyN() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/anyN.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyNGeneric.kt")
        public void testAnyNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/anyNGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyNGeneric2.kt")
        public void testAnyNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/anyNGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("int.kt")
        public void testInt() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/int.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("intGeneric.kt")
        public void testIntGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/intGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("intN.kt")
        public void testIntN() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/intN.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("intNGeneric.kt")
        public void testIntNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/intNGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("intNGeneric2.kt")
        public void testIntNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/intNGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("null.kt")
        public void testNull() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/null.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("nullGeneric.kt")
        public void testNullGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/nullGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("result.kt")
        public void testResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/result.kt");
        }

        @Test
        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/string.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("stringGeneric.kt")
        public void testStringGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/stringGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("stringN.kt")
        public void testStringN() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/stringN.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("stringNGeneric.kt")
        public void testStringNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/stringNGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("stringNGeneric2.kt")
        public void testStringNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/let/stringNGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors")
    @TestDataPath("$PROJECT_ROOT")
    public class ContextsAndAccessors {
      @Test
      @TestMetadata("accessPrivateInlineClassCompanionMethod.kt")
      public void testAccessPrivateInlineClassCompanionMethod() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethod.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassCompanionMethod2.kt")
      public void testAccessPrivateInlineClassCompanionMethod2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethod2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassCompanionMethod2Generic.kt")
      public void testAccessPrivateInlineClassCompanionMethod2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethod2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassCompanionMethodGeneric.kt")
      public void testAccessPrivateInlineClassCompanionMethodGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethodGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassConstructorFromCompanion.kt")
      public void testAccessPrivateInlineClassConstructorFromCompanion() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromCompanion.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassConstructorFromCompanionGeneric.kt")
      public void testAccessPrivateInlineClassConstructorFromCompanionGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromCompanionGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassConstructorFromLambda.kt")
      public void testAccessPrivateInlineClassConstructorFromLambda() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromLambda.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassConstructorFromLambdaGeneric.kt")
      public void testAccessPrivateInlineClassConstructorFromLambdaGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromLambdaGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromCompanion.kt")
      public void testAccessPrivateInlineClassMethodFromCompanion() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanion.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromCompanion2.kt")
      public void testAccessPrivateInlineClassMethodFromCompanion2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanion2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromCompanion2Generic.kt")
      public void testAccessPrivateInlineClassMethodFromCompanion2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanion2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromCompanionGeneric.kt")
      public void testAccessPrivateInlineClassMethodFromCompanionGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanionGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromInlineLambda.kt")
      public void testAccessPrivateInlineClassMethodFromInlineLambda() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambda.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromInlineLambda2.kt")
      public void testAccessPrivateInlineClassMethodFromInlineLambda2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambda2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromInlineLambda2Generic.kt")
      public void testAccessPrivateInlineClassMethodFromInlineLambda2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambda2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromInlineLambdaGeneric.kt")
      public void testAccessPrivateInlineClassMethodFromInlineLambdaGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambdaGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromLambda.kt")
      public void testAccessPrivateInlineClassMethodFromLambda() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambda.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromLambda2.kt")
      public void testAccessPrivateInlineClassMethodFromLambda2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambda2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromLambda2Generic.kt")
      public void testAccessPrivateInlineClassMethodFromLambda2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambda2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("accessPrivateInlineClassMethodFromLambdaGeneric.kt")
      public void testAccessPrivateInlineClassMethodFromLambdaGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambdaGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      public void testAllFilesPresentInContextsAndAccessors() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("captureInlineClassInstanceInLambda.kt")
      public void testCaptureInlineClassInstanceInLambda() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambda.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("captureInlineClassInstanceInLambda2.kt")
      public void testCaptureInlineClassInstanceInLambda2() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambda2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("captureInlineClassInstanceInLambda2Generic.kt")
      public void testCaptureInlineClassInstanceInLambda2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambda2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("captureInlineClassInstanceInLambdaGeneric.kt")
      public void testCaptureInlineClassInstanceInLambdaGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambdaGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("captureInlineClassInstanceInObject.kt")
      public void testCaptureInlineClassInstanceInObject() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInObject.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("captureInlineClassInstanceInObjectGeneric.kt")
      public void testCaptureInlineClassInstanceInObjectGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInObjectGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineLambdaInInlineClassFun.kt")
      public void testInlineLambdaInInlineClassFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/inlineLambdaInInlineClassFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineLambdaInInlineClassFunGeneric.kt")
      public void testInlineLambdaInInlineClassFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/inlineLambdaInInlineClassFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt26858.kt")
      public void testKt26858() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt26858.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt26858Generic.kt")
      public void testKt26858Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt26858Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt27513.kt")
      public void testKt27513() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt27513.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt27513Generic.kt")
      public void testKt27513Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt27513Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt30780.kt")
      public void testKt30780() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt30780.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt30780Generic.kt")
      public void testKt30780Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt30780Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("lambdaInInlineClassFun.kt")
      public void testLambdaInInlineClassFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/lambdaInInlineClassFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("lambdaInInlineClassFunGeneric.kt")
      public void testLambdaInInlineClassFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/lambdaInInlineClassFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("objectInInlineClassFun.kt")
      public void testObjectInInlineClassFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/objectInInlineClassFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("objectInInlineClassFunGeneric.kt")
      public void testObjectInInlineClassFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/objectInInlineClassFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("toPrivateCompanionFun.kt")
      public void testToPrivateCompanionFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("toPrivateCompanionFunGeneric.kt")
      public void testToPrivateCompanionFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("toPrivateCompanionVal.kt")
      public void testToPrivateCompanionVal() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionVal.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("toPrivateCompanionValGeneric.kt")
      public void testToPrivateCompanionValGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionValGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/defaultParameterValues")
    @TestDataPath("$PROJECT_ROOT")
    public class DefaultParameterValues {
      @Test
      public void testAllFilesPresentInDefaultParameterValues() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/defaultParameterValues"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("defaultConstructorParameterValuesOfInlineClassType.kt")
      public void testDefaultConstructorParameterValuesOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultConstructorParameterValuesOfInlineClassType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultConstructorParameterValuesOfInlineClassTypeGeneric.kt")
      public void testDefaultConstructorParameterValuesOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultConstructorParameterValuesOfInlineClassTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultInterfaceFunParameterValuesOfInlineClassType.kt")
      public void testDefaultInterfaceFunParameterValuesOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultInterfaceFunParameterValuesOfInlineClassType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultInterfaceFunParameterValuesOfInlineClassTypeGeneric.kt")
      public void testDefaultInterfaceFunParameterValuesOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultInterfaceFunParameterValuesOfInlineClassTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultParameterValuesOfInlineClassType.kt")
      public void testDefaultParameterValuesOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultParameterValuesOfInlineClassTypeBoxing.kt")
      public void testDefaultParameterValuesOfInlineClassTypeBoxing() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassTypeBoxing.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultParameterValuesOfInlineClassTypeBoxingGeneric.kt")
      public void testDefaultParameterValuesOfInlineClassTypeBoxingGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassTypeBoxingGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultParameterValuesOfInlineClassTypeGeneric.kt")
      public void testDefaultParameterValuesOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultValueOfInlineClassTypeInInlineFun.kt")
      public void testDefaultValueOfInlineClassTypeInInlineFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultValueOfInlineClassTypeInInlineFunGeneric.kt")
      public void testDefaultValueOfInlineClassTypeInInlineFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultValueOfInlineClassTypeInInlineFunInInlineClass.kt")
      public void testDefaultValueOfInlineClassTypeInInlineFunInInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFunInInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultValueOfInlineClassTypeInInlineFunInInlineClassGeneric.kt")
      public void testDefaultValueOfInlineClassTypeInInlineFunInInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFunInInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassFun.kt")
      public void testInlineClassFun() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassFun.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassFunGeneric.kt")
      public void testInlineClassFunGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassFunGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrimaryConstructor.kt")
      public void testInlineClassPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrimaryConstructorGeneric.kt")
      public void testInlineClassPrimaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrimaryConstructorWithInlineClassValue.kt")
      public void testInlineClassPrimaryConstructorWithInlineClassValue() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructorWithInlineClassValue.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassPrimaryConstructorWithInlineClassValueGeneric.kt")
      public void testInlineClassPrimaryConstructorWithInlineClassValueGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructorWithInlineClassValueGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassSecondaryConstructor.kt")
      public void testInlineClassSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassSecondaryConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineClassSecondaryConstructorGeneric.kt")
      public void testInlineClassSecondaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassSecondaryConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt26554.kt")
      public void testKt26554() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/kt26554.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt27416.kt")
      public void testKt27416() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/kt27416.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt27416Generic.kt")
      public void testKt27416Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/kt27416Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class DefaultWithDefaultParameter {
        @Test
        public void testAllFilesPresentInDefaultWithDefaultParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultWithDefaultParameter"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class OverrideFunctionWithDefaultParameter {
        @Test
        public void testAllFilesPresentInOverrideFunctionWithDefaultParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/overrideFunctionWithDefaultParameter"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegationByUnderlyingType {
      @Test
      public void testAllFilesPresentInDelegationByUnderlyingType() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("default.kt")
      public void testDefault() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/default.kt");
      }

      @Test
      @TestMetadata("defaultArgument.kt")
      public void testDefaultArgument() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/defaultArgument.kt");
      }

      @Test
      @TestMetadata("defaultArgumentGeneric.kt")
      public void testDefaultArgumentGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/defaultArgumentGeneric.kt");
      }

      @Test
      @TestMetadata("defaultGeneric.kt")
      public void testDefaultGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/defaultGeneric.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/simple.kt");
      }

      @Test
      @TestMetadata("simpleGeneric.kt")
      public void testSimpleGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/delegationByUnderlyingType/simpleGeneric.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/funInterface")
    @TestDataPath("$PROJECT_ROOT")
    public class FunInterface {
      @Test
      public void testAllFilesPresentInFunInterface() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/funInterface"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("argumentIC.kt")
      public void testArgumentIC() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/argumentIC.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("argumentICGeneric.kt")
      public void testArgumentICGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/argumentICGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("argumentICGeneric2.kt")
      public void testArgumentICGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/argumentICGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("argumentResult.kt")
      public void testArgumentResult() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/argumentResult.kt");
      }

      @Test
      @TestMetadata("kt51121.kt")
      public void testKt51121() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/kt51121.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt51121_2.kt")
      public void testKt51121_2() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/kt51121_2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mangledSamWrappers.kt")
      public void testMangledSamWrappers() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/mangledSamWrappers.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mangledSamWrappersGeneric.kt")
      public void testMangledSamWrappersGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/mangledSamWrappersGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("returnIC.kt")
      public void testReturnIC() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/returnIC.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("returnICGeneric.kt")
      public void testReturnICGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/returnICGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("returnICGeneric2.kt")
      public void testReturnICGeneric2() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/returnICGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("returnResult.kt")
      public void testReturnResult() {
        runTest("compiler/testData/codegen/box/inlineClasses/funInterface/returnResult.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/functionNameMangling")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionNameMangling {
      @Test
      public void testAllFilesPresentInFunctionNameMangling() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/functionNameMangling"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("anonymousObjectInFunctionWithMangledName.kt")
      public void testAnonymousObjectInFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/anonymousObjectInFunctionWithMangledName.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("anonymousObjectInFunctionWithMangledNameGeneric.kt")
      public void testAnonymousObjectInFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/anonymousObjectInFunctionWithMangledNameGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("extensionFunctionsDoNotClash.kt")
      public void testExtensionFunctionsDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/extensionFunctionsDoNotClash.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("extensionFunctionsDoNotClashGeneric.kt")
      public void testExtensionFunctionsDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/extensionFunctionsDoNotClashGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("functionsWithDifferentNullabilityDoNotClash.kt")
      public void testFunctionsWithDifferentNullabilityDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/functionsWithDifferentNullabilityDoNotClash.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("functionsWithDifferentNullabilityDoNotClashGeneric.kt")
      public void testFunctionsWithDifferentNullabilityDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/functionsWithDifferentNullabilityDoNotClashGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericFunctionsDoNotClash.kt")
      public void testGenericFunctionsDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/genericFunctionsDoNotClash.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericFunctionsDoNotClashGeneric.kt")
      public void testGenericFunctionsDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/genericFunctionsDoNotClashGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("localClassInFunctionWithMangledName.kt")
      public void testLocalClassInFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/localClassInFunctionWithMangledName.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("localClassInFunctionWithMangledNameGeneric.kt")
      public void testLocalClassInFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/localClassInFunctionWithMangledNameGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mangledFunctionsCanBeOverridden.kt")
      public void testMangledFunctionsCanBeOverridden() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsCanBeOverridden.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mangledFunctionsCanBeOverriddenGeneric.kt")
      public void testMangledFunctionsCanBeOverriddenGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsCanBeOverriddenGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mangledFunctionsDoNotClash.kt")
      public void testMangledFunctionsDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsDoNotClash.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mangledFunctionsDoNotClashGeneric.kt")
      public void testMangledFunctionsDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsDoNotClashGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mangledFunctionsPresentInStackTrace.kt")
      public void testMangledFunctionsPresentInStackTrace() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsPresentInStackTrace.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mangledFunctionsPresentInStackTraceGeneric.kt")
      public void testMangledFunctionsPresentInStackTraceGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsPresentInStackTraceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mixedSignatureFunctionsDoNotClash.kt")
      public void testMixedSignatureFunctionsDoNotClash() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mixedSignatureFunctionsDoNotClash.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("mixedSignatureFunctionsDoNotClashGeneric.kt")
      public void testMixedSignatureFunctionsDoNotClashGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mixedSignatureFunctionsDoNotClashGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overridingMethodInGenericClass.kt")
      public void testOverridingMethodInGenericClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overridingMethodInGenericClass2.kt")
      public void testOverridingMethodInGenericClass2() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClass2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overridingMethodInGenericClass2Generic.kt")
      public void testOverridingMethodInGenericClass2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClass2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overridingMethodInGenericClassGeneric.kt")
      public void testOverridingMethodInGenericClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("propertySetterWithInlineClassTypeArgument.kt")
      public void testPropertySetterWithInlineClassTypeArgument() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/propertySetterWithInlineClassTypeArgument.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("propertySetterWithInlineClassTypeArgumentGeneric.kt")
      public void testPropertySetterWithInlineClassTypeArgumentGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/propertySetterWithInlineClassTypeArgumentGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("reflectionForFunctionWithMangledName.kt")
      public void testReflectionForFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForFunctionWithMangledName.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("reflectionForFunctionWithMangledNameGeneric.kt")
      public void testReflectionForFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForFunctionWithMangledNameGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("reflectionForPropertyOfInlineClassType.kt")
      public void testReflectionForPropertyOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForPropertyOfInlineClassType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("reflectionForPropertyOfInlineClassTypeGeneric.kt")
      public void testReflectionForPropertyOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForPropertyOfInlineClassTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("syntheticAccessorForFunctionWithMangledName.kt")
      public void testSyntheticAccessorForFunctionWithMangledName() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorForFunctionWithMangledName.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("syntheticAccessorForFunctionWithMangledNameGeneric.kt")
      public void testSyntheticAccessorForFunctionWithMangledNameGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorForFunctionWithMangledNameGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("syntheticAccessorsForPropertyOfInlineClassType.kt")
      public void testSyntheticAccessorsForPropertyOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorsForPropertyOfInlineClassType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("syntheticAccessorsForPropertyOfInlineClassTypeGeneric.kt")
      public void testSyntheticAccessorsForPropertyOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorsForPropertyOfInlineClassTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue")
    @TestDataPath("$PROJECT_ROOT")
    public class GenericUnderlyingValue {
      @Test
      public void testAllFilesPresentInGenericUnderlyingValue() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("array.kt")
      public void testArray() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/array.kt");
      }

      @Test
      @TestMetadata("arrayIC.kt")
      public void testArrayIC() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/arrayIC.kt");
      }

      @Test
      @TestMetadata("primitive.kt")
      public void testPrimitive() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/primitive.kt");
      }

      @Test
      @TestMetadata("recursive.kt")
      public void testRecursive() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/recursive.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/simple.kt");
      }

      @Test
      @TestMetadata("simple2.kt")
      public void testSimple2() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/simple2.kt");
      }

      @Test
      @TestMetadata("upperBound.kt")
      public void testUpperBound() {
        runTest("compiler/testData/codegen/box/inlineClasses/genericUnderlyingValue/upperBound.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/hiddenConstructor")
    @TestDataPath("$PROJECT_ROOT")
    public class HiddenConstructor {
      @Test
      public void testAllFilesPresentInHiddenConstructor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/hiddenConstructor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("constructorReferencedFromOtherFile1.kt")
      public void testConstructorReferencedFromOtherFile1() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile1.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("constructorReferencedFromOtherFile1Generic.kt")
      public void testConstructorReferencedFromOtherFile1Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile1Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("constructorReferencedFromOtherFile2.kt")
      public void testConstructorReferencedFromOtherFile2() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("constructorReferencedFromOtherFile2Generic.kt")
      public void testConstructorReferencedFromOtherFile2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("constructorWithDefaultParameters.kt")
      public void testConstructorWithDefaultParameters() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorWithDefaultParameters.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("constructorWithDefaultParametersGeneric.kt")
      public void testConstructorWithDefaultParametersGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorWithDefaultParametersGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatingSuperConstructorCall.kt")
      public void testDelegatingSuperConstructorCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatingSuperConstructorCallGeneric.kt")
      public void testDelegatingSuperConstructorCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatingSuperConstructorCallInSecondaryConstructor.kt")
      public void testDelegatingSuperConstructorCallInSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCallInSecondaryConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatingSuperConstructorCallInSecondaryConstructorGeneric.kt")
      public void testDelegatingSuperConstructorCallInSecondaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCallInSecondaryConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatingThisConstructorCall.kt")
      public void testDelegatingThisConstructorCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingThisConstructorCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatingThisConstructorCallGeneric.kt")
      public void testDelegatingThisConstructorCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingThisConstructorCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("enumClassConstructor.kt")
      public void testEnumClassConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/enumClassConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("enumClassConstructorGeneric.kt")
      public void testEnumClassConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/enumClassConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("innerClassConstructor.kt")
      public void testInnerClassConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/innerClassConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("innerClassConstructorGeneric.kt")
      public void testInnerClassConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/innerClassConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt28855.kt")
      public void testKt28855() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/kt28855.kt");
      }

      @Test
      @TestMetadata("primaryConstructor.kt")
      public void testPrimaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/primaryConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("primaryConstructorGeneric.kt")
      public void testPrimaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/primaryConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("privateConstructor.kt")
      public void testPrivateConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/privateConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("privateConstructorGeneric.kt")
      public void testPrivateConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/privateConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("sealedClassConstructor.kt")
      public void testSealedClassConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/sealedClassConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("sealedClassConstructorGeneric.kt")
      public void testSealedClassConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/sealedClassConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("secondaryConstructor.kt")
      public void testSecondaryConstructor() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/secondaryConstructor.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("secondaryConstructorGeneric.kt")
      public void testSecondaryConstructorGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/secondaryConstructorGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/inlineClassCollection")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClassCollection {
      @Test
      public void testAllFilesPresentInInlineClassCollection() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/inlineClassCollection"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("inlineCollectionOfInlineClass.kt")
      public void testInlineCollectionOfInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineCollectionOfInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineCollectionOfInlineClassGeneric.kt")
      public void testInlineCollectionOfInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineCollectionOfInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineListOfInlineClass.kt")
      public void testInlineListOfInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineListOfInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineListOfInlineClassGeneric.kt")
      public void testInlineListOfInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineListOfInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineMapOfInlineClass.kt")
      public void testInlineMapOfInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineMapOfInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineMapOfInlineClassGeneric.kt")
      public void testInlineMapOfInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineMapOfInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("inlineMutableCollectionBulkAdd.kt")
      public void testInlineMutableCollectionBulkAdd() {
        runTest("compiler/testData/codegen/box/inlineClasses/inlineClassCollection/inlineMutableCollectionBulkAdd.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/interfaceDelegation")
    @TestDataPath("$PROJECT_ROOT")
    public class InterfaceDelegation {
      @Test
      public void testAllFilesPresentInInterfaceDelegation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/interfaceDelegation"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("interfaceImplementationByDelegation.kt")
      public void testInterfaceImplementationByDelegation() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/interfaceImplementationByDelegation.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("interfaceImplementationByDelegationGeneric.kt")
      public void testInterfaceImplementationByDelegationGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/interfaceImplementationByDelegationGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt38337.kt")
      public void testKt38337() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/kt38337.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt38337Generic.kt")
      public void testKt38337Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/kt38337Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberExtValDelegationWithInlineClassParameterTypes.kt")
      public void testMemberExtValDelegationWithInlineClassParameterTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberExtValDelegationWithInlineClassParameterTypes.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberExtValDelegationWithInlineClassParameterTypesGeneric.kt")
      public void testMemberExtValDelegationWithInlineClassParameterTypesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberExtValDelegationWithInlineClassParameterTypesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberExtVarDelegationWithInlineClassParameterTypes.kt")
      public void testMemberExtVarDelegationWithInlineClassParameterTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberExtVarDelegationWithInlineClassParameterTypes.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberFunDelegatedToInlineClassInt.kt")
      public void testMemberFunDelegatedToInlineClassInt() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassInt.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberFunDelegatedToInlineClassIntGeneric.kt")
      public void testMemberFunDelegatedToInlineClassIntGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassIntGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberFunDelegatedToInlineClassLong.kt")
      public void testMemberFunDelegatedToInlineClassLong() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassLong.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberFunDelegatedToInlineClassLongGeneric.kt")
      public void testMemberFunDelegatedToInlineClassLongGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassLongGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberFunDelegationToInlineClassWithInlineClassParameterTypes.kt")
      public void testMemberFunDelegationToInlineClassWithInlineClassParameterTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationToInlineClassWithInlineClassParameterTypes.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberFunDelegationToInlineClassWithInlineClassParameterTypesGeneric.kt")
      public void testMemberFunDelegationToInlineClassWithInlineClassParameterTypesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationToInlineClassWithInlineClassParameterTypesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberFunDelegationWithInlineClassParameterTypes.kt")
      public void testMemberFunDelegationWithInlineClassParameterTypes() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationWithInlineClassParameterTypes.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("memberFunDelegationWithInlineClassParameterTypesGeneric.kt")
      public void testMemberFunDelegationWithInlineClassParameterTypesGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationWithInlineClassParameterTypesGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls")
    @TestDataPath("$PROJECT_ROOT")
    public class InterfaceMethodCalls {
      @Test
      public void testAllFilesPresentInInterfaceMethodCalls() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("complexGenericMethodWithInlineClassOverride.kt")
      public void testComplexGenericMethodWithInlineClassOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("complexGenericMethodWithInlineClassOverride2.kt")
      public void testComplexGenericMethodWithInlineClassOverride2() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("complexGenericMethodWithInlineClassOverride2Generic.kt")
      public void testComplexGenericMethodWithInlineClassOverride2Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride2Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("complexGenericMethodWithInlineClassOverride3.kt")
      public void testComplexGenericMethodWithInlineClassOverride3() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride3.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("complexGenericMethodWithInlineClassOverride3Generic.kt")
      public void testComplexGenericMethodWithInlineClassOverride3Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride3Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("complexGenericMethodWithInlineClassOverrideGeneric.kt")
      public void testComplexGenericMethodWithInlineClassOverrideGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverrideGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultInterfaceExtensionFunCall.kt")
      public void testDefaultInterfaceExtensionFunCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceExtensionFunCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultInterfaceExtensionFunCallGeneric.kt")
      public void testDefaultInterfaceExtensionFunCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceExtensionFunCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultInterfaceMethodCall.kt")
      public void testDefaultInterfaceMethodCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceMethodCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("defaultInterfaceMethodCallGeneric.kt")
      public void testDefaultInterfaceMethodCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceMethodCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericDefaultInterfaceExtensionFunCall.kt")
      public void testGenericDefaultInterfaceExtensionFunCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceExtensionFunCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericDefaultInterfaceExtensionFunCallGeneric.kt")
      public void testGenericDefaultInterfaceExtensionFunCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceExtensionFunCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericDefaultInterfaceMethodCall.kt")
      public void testGenericDefaultInterfaceMethodCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceMethodCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericDefaultInterfaceMethodCallGeneric.kt")
      public void testGenericDefaultInterfaceMethodCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceMethodCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericInterfaceMethodCall.kt")
      public void testGenericInterfaceMethodCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericInterfaceMethodCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericInterfaceMethodCallGeneric.kt")
      public void testGenericInterfaceMethodCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericInterfaceMethodCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericMethodWithInlineClassOverride.kt")
      public void testGenericMethodWithInlineClassOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericMethodWithInlineClassOverride.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("genericMethodWithInlineClassOverrideGeneric.kt")
      public void testGenericMethodWithInlineClassOverrideGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericMethodWithInlineClassOverrideGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("interfaceSuperCall.kt")
      public void testInterfaceSuperCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/interfaceSuperCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("interfaceSuperCallGeneric.kt")
      public void testInterfaceSuperCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/interfaceSuperCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overriddenDefaultInterfaceMethodCall.kt")
      public void testOverriddenDefaultInterfaceMethodCall() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/overriddenDefaultInterfaceMethodCall.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("overriddenDefaultInterfaceMethodCallGeneric.kt")
      public void testOverriddenDefaultInterfaceMethodCallGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/overriddenDefaultInterfaceMethodCallGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    public class JavaInterop {
      @Test
      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/javaInterop"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods")
    @TestDataPath("$PROJECT_ROOT")
    public class Jvm8DefaultInterfaceMethods {
      @Test
      public void testAllFilesPresentInJvm8DefaultInterfaceMethods() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/propertyDelegation")
    @TestDataPath("$PROJECT_ROOT")
    public class PropertyDelegation {
      @Test
      public void testAllFilesPresentInPropertyDelegation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/propertyDelegation"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("captureLocalVarDelegatedToInlineClass.kt")
      public void testCaptureLocalVarDelegatedToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/captureLocalVarDelegatedToInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("captureLocalVarDelegatedToInlineClassGeneric.kt")
      public void testCaptureLocalVarDelegatedToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/captureLocalVarDelegatedToInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateClassVarToInlineClass.kt")
      public void testDelegateClassVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateClassVarToInlineClassGeneric.kt")
      public void testDelegateClassVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateClassVarToInlineClassWithProvideDelegate.kt")
      public void testDelegateClassVarToInlineClassWithProvideDelegate() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClassWithProvideDelegate.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateClassVarToInlineClassWithProvideDelegateGeneric.kt")
      public void testDelegateClassVarToInlineClassWithProvideDelegateGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClassWithProvideDelegateGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateCompanionVarToInlineClass.kt")
      public void testDelegateCompanionVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateCompanionVarToInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateCompanionVarToInlineClassGeneric.kt")
      public void testDelegateCompanionVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateCompanionVarToInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateLocalVarToInlineClass.kt")
      public void testDelegateLocalVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateLocalVarToInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateLocalVarToInlineClassGeneric.kt")
      public void testDelegateLocalVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateLocalVarToInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateObjectVarToInlineClass.kt")
      public void testDelegateObjectVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateObjectVarToInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateObjectVarToInlineClassGeneric.kt")
      public void testDelegateObjectVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateObjectVarToInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatePrivateCompanionVarToInlineClass.kt")
      public void testDelegatePrivateCompanionVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatePrivateCompanionVarToInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatePrivateCompanionVarToInlineClassGeneric.kt")
      public void testDelegatePrivateCompanionVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatePrivateCompanionVarToInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateTopLevelVarToInlineClass.kt")
      public void testDelegateTopLevelVarToInlineClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateTopLevelVarToInlineClass.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegateTopLevelVarToInlineClassGeneric.kt")
      public void testDelegateTopLevelVarToInlineClassGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateTopLevelVarToInlineClassGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatedPropertyOfInlineClassType.kt")
      public void testDelegatedPropertyOfInlineClassType() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatedPropertyOfInlineClassType.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("delegatedPropertyOfInlineClassTypeGeneric.kt")
      public void testDelegatedPropertyOfInlineClassTypeGeneric() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatedPropertyOfInlineClassTypeGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt27070.kt")
      public void testKt27070() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt27070.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt27070Generic.kt")
      public void testKt27070Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt27070Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt42933.kt")
      public void testKt42933() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt42933.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }

      @Test
      @TestMetadata("kt42933Generic.kt")
      public void testKt42933Generic() {
        runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt42933Generic.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/result")
    @TestDataPath("$PROJECT_ROOT")
    public class Result {
      @Test
      public void testAllFilesPresentInResult() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/result"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("directCall1.kt")
      public void testDirectCall1() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/directCall1.kt");
      }

      @Test
      @TestMetadata("directCall2.kt")
      public void testDirectCall2() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/directCall2.kt");
      }

      @Test
      @TestMetadata("doubleOverride.kt")
      public void testDoubleOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/doubleOverride.kt");
      }

      @Test
      @TestMetadata("extensionOverride.kt")
      public void testExtensionOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/extensionOverride.kt");
      }

      @Test
      @TestMetadata("inlineMethodOnResult.kt")
      public void testInlineMethodOnResult() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/inlineMethodOnResult.kt");
      }

      @Test
      @TestMetadata("lambdaTakesResultThroughBridge.kt")
      public void testLambdaTakesResultThroughBridge() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/lambdaTakesResultThroughBridge.kt");
      }

      @Test
      @TestMetadata("returnGenericMultiModule.kt")
      public void testReturnGenericMultiModule() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/returnGenericMultiModule.kt");
      }

      @Test
      @TestMetadata("returnGenericSingleModule.kt")
      public void testReturnGenericSingleModule() {
        runTest("compiler/testData/codegen/box/inlineClasses/result/returnGenericSingleModule.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/returnResult")
    @TestDataPath("$PROJECT_ROOT")
    public class ReturnResult {
      @Test
      public void testAllFilesPresentInReturnResult() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/returnResult"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("class.kt")
      public void testClass() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/class.kt");
      }

      @Test
      @TestMetadata("classAnyOverride.kt")
      public void testClassAnyOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/classAnyOverride.kt");
      }

      @Test
      @TestMetadata("classGenericOverride.kt")
      public void testClassGenericOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/classGenericOverride.kt");
      }

      @Test
      @TestMetadata("classResultOverride.kt")
      public void testClassResultOverride() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/classResultOverride.kt");
      }

      @Test
      @TestMetadata("interface.kt")
      public void testInterface() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/interface.kt");
      }

      @Test
      @TestMetadata("topLevel.kt")
      public void testTopLevel() {
        runTest("compiler/testData/codegen/box/inlineClasses/returnResult/topLevel.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter")
    @TestDataPath("$PROJECT_ROOT")
    public class UnboxGenericParameter {
      @Test
      public void testAllFilesPresentInUnboxGenericParameter() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface")
      @TestDataPath("$PROJECT_ROOT")
      public class FunInterface {
        @Test
        public void testAllFilesPresentInFunInterface() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("any.kt")
        public void testAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/any.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyGeneric.kt")
        public void testAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyN.kt")
        public void testAnyN() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyN.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyNGeneric.kt")
        public void testAnyNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyNGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyNGeneric2.kt")
        public void testAnyNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyNGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("iface.kt")
        public void testIface() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/iface.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceChild.kt")
        public void testIfaceChild() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/ifaceChild.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceChildGeneric.kt")
        public void testIfaceChildGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/ifaceChildGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceGeneric.kt")
        public void testIfaceGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/ifaceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("nullableResult.kt")
        public void testNullableResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/nullableResult.kt");
        }

        @Test
        @TestMetadata("primitive.kt")
        public void testPrimitive() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/primitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("primitiveGeneric.kt")
        public void testPrimitiveGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/primitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("result.kt")
        public void testResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/result.kt");
        }

        @Test
        @TestMetadata("resultAny.kt")
        public void testResultAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/resultAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("resultAnyGeneric.kt")
        public void testResultAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/resultAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/string.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("stringGeneric.kt")
        public void testStringGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/stringGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda")
      @TestDataPath("$PROJECT_ROOT")
      public class Lambda {
        @Test
        public void testAllFilesPresentInLambda() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("any.kt")
        public void testAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/any.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyGeneric.kt")
        public void testAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyN.kt")
        public void testAnyN() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyN.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyNGeneric.kt")
        public void testAnyNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyNGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyNGeneric2.kt")
        public void testAnyNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyNGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("iface.kt")
        public void testIface() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/iface.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceChild.kt")
        public void testIfaceChild() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/ifaceChild.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceChildGeneric.kt")
        public void testIfaceChildGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/ifaceChildGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceGeneric.kt")
        public void testIfaceGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/ifaceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("nullableResult.kt")
        public void testNullableResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/nullableResult.kt");
        }

        @Test
        @TestMetadata("primitive.kt")
        public void testPrimitive() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/primitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("primitiveGeneric.kt")
        public void testPrimitiveGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/primitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("result.kt")
        public void testResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/result.kt");
        }

        @Test
        @TestMetadata("resultAny.kt")
        public void testResultAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/resultAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("resultAnyGeneric.kt")
        public void testResultAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/resultAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/string.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("stringGeneric.kt")
        public void testStringGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/stringGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral")
      @TestDataPath("$PROJECT_ROOT")
      public class ObjectLiteral {
        @Test
        public void testAllFilesPresentInObjectLiteral() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("any.kt")
        public void testAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/any.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyGeneric.kt")
        public void testAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyN.kt")
        public void testAnyN() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyN.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyNGeneric.kt")
        public void testAnyNGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyNGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("anyNGeneric2.kt")
        public void testAnyNGeneric2() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyNGeneric2.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("iface.kt")
        public void testIface() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/iface.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceChild.kt")
        public void testIfaceChild() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/ifaceChild.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceChildGeneric.kt")
        public void testIfaceChildGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/ifaceChildGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("ifaceGeneric.kt")
        public void testIfaceGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/ifaceGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("nullableResult.kt")
        public void testNullableResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/nullableResult.kt");
        }

        @Test
        @TestMetadata("primitive.kt")
        public void testPrimitive() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/primitive.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("primitiveGeneric.kt")
        public void testPrimitiveGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/primitiveGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("result.kt")
        public void testResult() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/result.kt");
        }

        @Test
        @TestMetadata("resultAny.kt")
        public void testResultAny() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/resultAny.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("resultAnyGeneric.kt")
        public void testResultAnyGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/resultAnyGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/string.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }

        @Test
        @TestMetadata("stringGeneric.kt")
        public void testStringGeneric() {
          runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/stringGeneric.kt", TransformersFunctions.getRemoveOptionalJvmInlineAnnotation());
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/innerNested")
  @TestDataPath("$PROJECT_ROOT")
  public class InnerNested {
    @Test
    public void testAllFilesPresentInInnerNested() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/innerNested"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("considerPropertyInitValueFromNestedClass.kt")
    public void testConsiderPropertyInitValueFromNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/considerPropertyInitValueFromNestedClass.kt");
    }

    @Test
    @TestMetadata("createNestedClass.kt")
    public void testCreateNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/createNestedClass.kt");
    }

    @Test
    @TestMetadata("createdNestedInOuterMember.kt")
    public void testCreatedNestedInOuterMember() {
      runTest("compiler/testData/codegen/box/innerNested/createdNestedInOuterMember.kt");
    }

    @Test
    @TestMetadata("extenderNestedClass.kt")
    public void testExtenderNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/extenderNestedClass.kt");
    }

    @Test
    @TestMetadata("extensionFun.kt")
    public void testExtensionFun() {
      runTest("compiler/testData/codegen/box/innerNested/extensionFun.kt");
    }

    @Test
    @TestMetadata("extensionToNested.kt")
    public void testExtensionToNested() {
      runTest("compiler/testData/codegen/box/innerNested/extensionToNested.kt");
    }

    @Test
    @TestMetadata("importNestedClass.kt")
    public void testImportNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/importNestedClass.kt");
    }

    @Test
    @TestMetadata("innerGeneric.kt")
    public void testInnerGeneric() {
      runTest("compiler/testData/codegen/box/innerNested/innerGeneric.kt");
    }

    @Test
    @TestMetadata("innerImplicitParameter.kt")
    public void testInnerImplicitParameter() {
      runTest("compiler/testData/codegen/box/innerNested/innerImplicitParameter.kt");
    }

    @Test
    @TestMetadata("innerLabeledThis.kt")
    public void testInnerLabeledThis() {
      runTest("compiler/testData/codegen/box/innerNested/innerLabeledThis.kt");
    }

    @Test
    @TestMetadata("innerSimple.kt")
    public void testInnerSimple() {
      runTest("compiler/testData/codegen/box/innerNested/innerSimple.kt");
    }

    @Test
    @TestMetadata("innerWithDefaultArgument.kt")
    public void testInnerWithDefaultArgument() {
      runTest("compiler/testData/codegen/box/innerNested/innerWithDefaultArgument.kt");
    }

    @Test
    @TestMetadata("innerWithDefaultInner.kt")
    public void testInnerWithDefaultInner() {
      runTest("compiler/testData/codegen/box/innerNested/innerWithDefaultInner.kt");
    }

    @Test
    @TestMetadata("kt3132.kt")
    public void testKt3132() {
      runTest("compiler/testData/codegen/box/innerNested/kt3132.kt");
    }

    @Test
    @TestMetadata("kt3927.kt")
    public void testKt3927() {
      runTest("compiler/testData/codegen/box/innerNested/kt3927.kt");
    }

    @Test
    @TestMetadata("kt46829.kt")
    public void testKt46829() {
      runTest("compiler/testData/codegen/box/innerNested/kt46829.kt");
    }

    @Test
    @TestMetadata("kt5363.kt")
    public void testKt5363() {
      runTest("compiler/testData/codegen/box/innerNested/kt5363.kt");
    }

    @Test
    @TestMetadata("kt63732.kt")
    public void testKt63732() {
      runTest("compiler/testData/codegen/box/innerNested/kt63732.kt");
    }

    @Test
    @TestMetadata("kt6804.kt")
    public void testKt6804() {
      runTest("compiler/testData/codegen/box/innerNested/kt6804.kt");
    }

    @Test
    @TestMetadata("nestedClassInObject.kt")
    public void testNestedClassInObject() {
      runTest("compiler/testData/codegen/box/innerNested/nestedClassInObject.kt");
    }

    @Test
    @TestMetadata("nestedClassObject.kt")
    public void testNestedClassObject() {
      runTest("compiler/testData/codegen/box/innerNested/nestedClassObject.kt");
    }

    @Test
    @TestMetadata("nestedEnumConstant.kt")
    public void testNestedEnumConstant() {
      runTest("compiler/testData/codegen/box/innerNested/nestedEnumConstant.kt");
    }

    @Test
    @TestMetadata("nestedGeneric.kt")
    public void testNestedGeneric() {
      runTest("compiler/testData/codegen/box/innerNested/nestedGeneric.kt");
    }

    @Test
    @TestMetadata("nestedInPackage.kt")
    public void testNestedInPackage() {
      runTest("compiler/testData/codegen/box/innerNested/nestedInPackage.kt");
    }

    @Test
    @TestMetadata("nestedInnerClass.kt")
    public void testNestedInnerClass() {
      runTest("compiler/testData/codegen/box/innerNested/nestedInnerClass.kt");
    }

    @Test
    @TestMetadata("nestedObjects.kt")
    public void testNestedObjects() {
      runTest("compiler/testData/codegen/box/innerNested/nestedObjects.kt");
    }

    @Test
    @TestMetadata("nestedSimple.kt")
    public void testNestedSimple() {
      runTest("compiler/testData/codegen/box/innerNested/nestedSimple.kt");
    }

    @Test
    @TestMetadata("passingOuterRef.kt")
    public void testPassingOuterRef() {
      runTest("compiler/testData/codegen/box/innerNested/passingOuterRef.kt");
    }

    @Test
    @TestMetadata("protectedNestedClass.kt")
    public void testProtectedNestedClass() {
      runTest("compiler/testData/codegen/box/innerNested/protectedNestedClass.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/innerNested/superConstructorCall")
    @TestDataPath("$PROJECT_ROOT")
    public class SuperConstructorCall {
      @Test
      public void testAllFilesPresentInSuperConstructorCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/innerNested/superConstructorCall"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("deepInnerHierarchy.kt")
      public void testDeepInnerHierarchy() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/deepInnerHierarchy.kt");
      }

      @Test
      @TestMetadata("deepLocalHierarchy.kt")
      public void testDeepLocalHierarchy() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/deepLocalHierarchy.kt");
      }

      @Test
      @TestMetadata("innerExtendsInnerViaSecondaryConstuctor.kt")
      public void testInnerExtendsInnerViaSecondaryConstuctor() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsInnerViaSecondaryConstuctor.kt");
      }

      @Test
      @TestMetadata("innerExtendsInnerWithProperOuterCapture.kt")
      public void testInnerExtendsInnerWithProperOuterCapture() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsInnerWithProperOuterCapture.kt");
      }

      @Test
      @TestMetadata("kt11833_1.kt")
      public void testKt11833_1() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/kt11833_1.kt");
      }

      @Test
      @TestMetadata("kt11833_2.kt")
      public void testKt11833_2() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/kt11833_2.kt");
      }

      @Test
      @TestMetadata("localClassOuterDiffersFromInnerOuter.kt")
      public void testLocalClassOuterDiffersFromInnerOuter() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localClassOuterDiffersFromInnerOuter.kt");
      }

      @Test
      @TestMetadata("localExtendsInner.kt")
      public void testLocalExtendsInner() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localExtendsInner.kt");
      }

      @Test
      @TestMetadata("localExtendsLocalWithClosure.kt")
      public void testLocalExtendsLocalWithClosure() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localExtendsLocalWithClosure.kt");
      }

      @Test
      @TestMetadata("localWithClosureExtendsLocalWithClosure.kt")
      public void testLocalWithClosureExtendsLocalWithClosure() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localWithClosureExtendsLocalWithClosure.kt");
      }

      @Test
      @TestMetadata("objectExtendsClassDefaultArgument.kt")
      public void testObjectExtendsClassDefaultArgument() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsClassDefaultArgument.kt");
      }

      @Test
      @TestMetadata("objectExtendsClassVararg.kt")
      public void testObjectExtendsClassVararg() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsClassVararg.kt");
      }

      @Test
      @TestMetadata("objectExtendsInner.kt")
      public void testObjectExtendsInner() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInner.kt");
      }

      @Test
      @TestMetadata("objectExtendsInnerDefaultArgument.kt")
      public void testObjectExtendsInnerDefaultArgument() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerDefaultArgument.kt");
      }

      @Test
      @TestMetadata("objectExtendsInnerOfLocalVarargAndDefault.kt")
      public void testObjectExtendsInnerOfLocalVarargAndDefault() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerOfLocalVarargAndDefault.kt");
      }

      @Test
      @TestMetadata("objectExtendsInnerOfLocalWithCapture.kt")
      public void testObjectExtendsInnerOfLocalWithCapture() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerOfLocalWithCapture.kt");
      }

      @Test
      @TestMetadata("objectExtendsInnerWithDelegatingConstructor.kt")
      public void testObjectExtendsInnerWithDelegatingConstructor() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerWithDelegatingConstructor.kt");
      }

      @Test
      @TestMetadata("objectExtendsLocalCaptureInSuperCall.kt")
      public void testObjectExtendsLocalCaptureInSuperCall() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocalCaptureInSuperCall.kt");
      }

      @Test
      @TestMetadata("objectExtendsLocalWithClosure.kt")
      public void testObjectExtendsLocalWithClosure() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocalWithClosure.kt");
      }

      @Test
      @TestMetadata("objectExtendsLocal_kt16858.kt")
      public void testObjectExtendsLocal_kt16858() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocal_kt16858.kt");
      }

      @Test
      @TestMetadata("objectOuterDiffersFromInnerOuter.kt")
      public void testObjectOuterDiffersFromInnerOuter() {
        runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectOuterDiffersFromInnerOuter.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/instructions")
  @TestDataPath("$PROJECT_ROOT")
  public class Instructions {
    @Test
    public void testAllFilesPresentInInstructions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/instructions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/instructions/swap")
    @TestDataPath("$PROJECT_ROOT")
    public class Swap {
      @Test
      public void testAllFilesPresentInSwap() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/instructions/swap"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("swapRefToSharedVarInt.kt")
      public void testSwapRefToSharedVarInt() {
        runTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarInt.kt");
      }

      @Test
      @TestMetadata("swapRefToSharedVarLong.kt")
      public void testSwapRefToSharedVarLong() {
        runTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarLong.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/intrinsics")
  @TestDataPath("$PROJECT_ROOT")
  public class Intrinsics {
    @Test
    public void testAllFilesPresentInIntrinsics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/intrinsics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("charToInt.kt")
    public void testCharToInt() {
      runTest("compiler/testData/codegen/box/intrinsics/charToInt.kt");
    }

    @Test
    @TestMetadata("ea35953.kt")
    public void testEa35953() {
      runTest("compiler/testData/codegen/box/intrinsics/ea35953.kt");
    }

    @Test
    @TestMetadata("incWithLabel.kt")
    public void testIncWithLabel() {
      runTest("compiler/testData/codegen/box/intrinsics/incWithLabel.kt");
    }

    @Test
    @TestMetadata("kt10131.kt")
    public void testKt10131() {
      runTest("compiler/testData/codegen/box/intrinsics/kt10131.kt");
    }

    @Test
    @TestMetadata("kt10131a.kt")
    public void testKt10131a() {
      runTest("compiler/testData/codegen/box/intrinsics/kt10131a.kt");
    }

    @Test
    @TestMetadata("kt12125.kt")
    public void testKt12125() {
      runTest("compiler/testData/codegen/box/intrinsics/kt12125.kt");
    }

    @Test
    @TestMetadata("kt12125_2.kt")
    public void testKt12125_2() {
      runTest("compiler/testData/codegen/box/intrinsics/kt12125_2.kt");
    }

    @Test
    @TestMetadata("kt12125_inc.kt")
    public void testKt12125_inc() {
      runTest("compiler/testData/codegen/box/intrinsics/kt12125_inc.kt");
    }

    @Test
    @TestMetadata("kt12125_inc_2.kt")
    public void testKt12125_inc_2() {
      runTest("compiler/testData/codegen/box/intrinsics/kt12125_inc_2.kt");
    }

    @Test
    @TestMetadata("kt52163_boolean.kt")
    public void testKt52163_boolean() {
      runTest("compiler/testData/codegen/box/intrinsics/kt52163_boolean.kt");
    }

    @Test
    @TestMetadata("kt52163_doubleCompareToInt.kt")
    public void testKt52163_doubleCompareToInt() {
      runTest("compiler/testData/codegen/box/intrinsics/kt52163_doubleCompareToInt.kt");
    }

    @Test
    @TestMetadata("kt8666.kt")
    public void testKt8666() {
      runTest("compiler/testData/codegen/box/intrinsics/kt8666.kt");
    }

    @Test
    @TestMetadata("longRangeWithExplicitDot.kt")
    public void testLongRangeWithExplicitDot() {
      runTest("compiler/testData/codegen/box/intrinsics/longRangeWithExplicitDot.kt");
    }

    @Test
    @TestMetadata("nonShortCircuitAnd.kt")
    public void testNonShortCircuitAnd() {
      runTest("compiler/testData/codegen/box/intrinsics/nonShortCircuitAnd.kt");
    }

    @Test
    @TestMetadata("nullPlusString.kt")
    public void testNullPlusString() {
      runTest("compiler/testData/codegen/box/intrinsics/nullPlusString.kt");
    }

    @Test
    @TestMetadata("prefixIncDec.kt")
    public void testPrefixIncDec() {
      runTest("compiler/testData/codegen/box/intrinsics/prefixIncDec.kt");
    }

    @Test
    @TestMetadata("rangeFromCollection.kt")
    public void testRangeFromCollection() {
      runTest("compiler/testData/codegen/box/intrinsics/rangeFromCollection.kt");
    }

    @Test
    @TestMetadata("stringFromCollection.kt")
    public void testStringFromCollection() {
      runTest("compiler/testData/codegen/box/intrinsics/stringFromCollection.kt");
    }

    @Test
    @TestMetadata("throwableParamOrder.kt")
    public void testThrowableParamOrder() {
      runTest("compiler/testData/codegen/box/intrinsics/throwableParamOrder.kt");
    }

    @Test
    @TestMetadata("tostring.kt")
    public void testTostring() {
      runTest("compiler/testData/codegen/box/intrinsics/tostring.kt");
    }

    @Test
    @TestMetadata("trimMarginWithBlankString.kt")
    public void testTrimMarginWithBlankString() {
      runTest("compiler/testData/codegen/box/intrinsics/trimMarginWithBlankString.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/invokedynamic")
  @TestDataPath("$PROJECT_ROOT")
  public class Invokedynamic {
    @Test
    public void testAllFilesPresentInInvokedynamic() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/invokedynamic/lambdas")
    @TestDataPath("$PROJECT_ROOT")
    public class Lambdas {
      @Test
      public void testAllFilesPresentInLambdas() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/lambdas"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt52875.kt")
      public void testKt52875() {
        runTest("compiler/testData/codegen/box/invokedynamic/lambdas/kt52875.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClassInSignature {
        @Test
        public void testAllFilesPresentInInlineClassInSignature() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/lambdas/inlineClassInSignature"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam")
    @TestDataPath("$PROJECT_ROOT")
    public class Sam {
      @Test
      public void testAllFilesPresentInSam() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface")
      @TestDataPath("$PROJECT_ROOT")
      public class FunctionExprToJavaInterface {
        @Test
        public void testAllFilesPresentInFunctionExprToJavaInterface() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/functionExprToJavaInterface"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface")
      @TestDataPath("$PROJECT_ROOT")
      public class FunctionRefToJavaInterface {
        @Test
        public void testAllFilesPresentInFunctionRefToJavaInterface() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions")
        @TestDataPath("$PROJECT_ROOT")
        public class SpecialFunctions {
          @Test
          public void testAllFilesPresentInSpecialFunctions() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/specialFunctions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor")
        @TestDataPath("$PROJECT_ROOT")
        public class WithAccessor {
          @Test
          public void testAllFilesPresentInWithAccessor() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/functionRefToJavaInterface/withAccessor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClassInSignature {
        @Test
        public void testAllFilesPresentInInlineClassInSignature() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/inlineClassInSignature"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics")
      @TestDataPath("$PROJECT_ROOT")
      public class SpecializedGenerics {
        @Test
        public void testAllFilesPresentInSpecializedGenerics() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/sam/specializedGenerics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/invokedynamic/serializable")
    @TestDataPath("$PROJECT_ROOT")
    public class Serializable {
      @Test
      public void testAllFilesPresentInSerializable() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/invokedynamic/serializable"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/involvesIrInterpreter")
  @TestDataPath("$PROJECT_ROOT")
  public class InvolvesIrInterpreter {
    @Test
    public void testAllFilesPresentInInvolvesIrInterpreter() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/involvesIrInterpreter"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("annotationClassWithInner.kt")
    public void testAnnotationClassWithInner() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/annotationClassWithInner.kt");
    }

    @Test
    @TestMetadata("booleanOperations.kt")
    public void testBooleanOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/booleanOperations.kt");
    }

    @Test
    @TestMetadata("byteOperations.kt")
    public void testByteOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/byteOperations.kt");
    }

    @Test
    @TestMetadata("charOperations.kt")
    public void testCharOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/charOperations.kt");
    }

    @Test
    @TestMetadata("complexBooleanConstant.kt")
    public void testComplexBooleanConstant() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/complexBooleanConstant.kt");
    }

    @Test
    @TestMetadata("doubleOperations.kt")
    public void testDoubleOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/doubleOperations.kt");
    }

    @Test
    @TestMetadata("floatOperations.kt")
    public void testFloatOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/floatOperations.kt");
    }

    @Test
    @TestMetadata("inJavaLangPackage.kt")
    public void testInJavaLangPackage() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/inJavaLangPackage.kt");
    }

    @Test
    @TestMetadata("inJavaPackage.kt")
    public void testInJavaPackage() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/inJavaPackage.kt");
    }

    @Test
    @TestMetadata("intOperations.kt")
    public void testIntOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/intOperations.kt");
    }

    @Test
    @TestMetadata("jvmFloatDoubleToString.kt")
    public void testJvmFloatDoubleToString() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/jvmFloatDoubleToString.kt");
    }

    @Test
    @TestMetadata("kt55912.kt")
    public void testKt55912() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt55912.kt");
    }

    @Test
    @TestMetadata("kt56215.kt")
    public void testKt56215() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/kt56215.kt");
    }

    @Test
    @TestMetadata("longOperations.kt")
    public void testLongOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/longOperations.kt");
    }

    @Test
    @TestMetadata("objectConstValInAnnotationArgument.kt")
    public void testObjectConstValInAnnotationArgument() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/objectConstValInAnnotationArgument.kt");
    }

    @Test
    @TestMetadata("shortOperations.kt")
    public void testShortOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/shortOperations.kt");
    }

    @Test
    @TestMetadata("stdlibConst.kt")
    public void testStdlibConst() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/stdlibConst.kt");
    }

    @Test
    @TestMetadata("stringConcatenation.kt")
    public void testStringConcatenation() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/stringConcatenation.kt");
    }

    @Test
    @TestMetadata("stringConcatenationWithObject.kt")
    public void testStringConcatenationWithObject() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/stringConcatenationWithObject.kt");
    }

    @Test
    @TestMetadata("stringOperations.kt")
    public void testStringOperations() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/stringOperations.kt");
    }

    @Test
    @TestMetadata("thisPlusString.kt")
    public void testThisPlusString() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/thisPlusString.kt");
    }

    @Test
    @TestMetadata("thisPlusStringWithObject.kt")
    public void testThisPlusStringWithObject() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/thisPlusStringWithObject.kt");
    }

    @Test
    @TestMetadata("unsignedConst.kt")
    public void testUnsignedConst() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/unsignedConst.kt");
    }

    @Test
    @TestMetadata("useCorrectToString.kt")
    public void testUseCorrectToString() {
      runTest("compiler/testData/codegen/box/involvesIrInterpreter/useCorrectToString.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstEvaluationFromJavaWorld {
      @Test
      public void testAllFilesPresentInConstEvaluationFromJavaWorld() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/involvesIrInterpreter/constEvaluationFromJavaWorld"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst")
    @TestDataPath("$PROJECT_ROOT")
    public class IntrinsicConst {
      @Test
      public void testAllFilesPresentInIntrinsicConst() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("constTrimIndent.kt")
      public void testConstTrimIndent() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/constTrimIndent.kt");
      }

      @Test
      @TestMetadata("constTrimMargin.kt")
      public void testConstTrimMargin() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/constTrimMargin.kt");
      }

      @Test
      @TestMetadata("enumName.kt")
      public void testEnumName() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/enumName.kt");
      }

      @Test
      @TestMetadata("enumNameWithInit.kt")
      public void testEnumNameWithInit() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/enumNameWithInit.kt");
      }

      @Test
      @TestMetadata("equals_after.kt")
      public void testEquals_after() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/equals_after.kt");
      }

      @Test
      @TestMetadata("ifConstVal.kt")
      public void testIfConstVal() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/ifConstVal.kt");
      }

      @Test
      @TestMetadata("kCallableName.kt")
      public void testKCallableName() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/kCallableName.kt");
      }

      @Test
      @TestMetadata("kCallableNameWithSideEffect.kt")
      public void testKCallableNameWithSideEffect() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/kCallableNameWithSideEffect.kt");
      }

      @Test
      @TestMetadata("kt53272.kt")
      public void testKt53272() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/kt53272.kt");
      }

      @Test
      @TestMetadata("kt58717.kt")
      public void testKt58717() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/kt58717.kt");
      }

      @Test
      @TestMetadata("nullableEnumName.kt")
      public void testNullableEnumName() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/intrinsicConst/nullableEnumName.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/involvesIrInterpreter/serialization")
    @TestDataPath("$PROJECT_ROOT")
    public class Serialization {
      @Test
      public void testAllFilesPresentInSerialization() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/involvesIrInterpreter/serialization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("annotationInArguments.kt")
      public void testAnnotationInArguments() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/annotationInArguments.kt");
      }

      @Test
      @TestMetadata("annotationSerialization.kt")
      public void testAnnotationSerialization() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/annotationSerialization.kt");
      }

      @Test
      @TestMetadata("annotationWithArray.kt")
      public void testAnnotationWithArray() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/annotationWithArray.kt");
      }

      @Test
      @TestMetadata("annotationWithDefaults.kt")
      public void testAnnotationWithDefaults() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/annotationWithDefaults.kt");
      }

      @Test
      @TestMetadata("nestedTypeAnnotation.kt")
      public void testNestedTypeAnnotation() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/nestedTypeAnnotation.kt");
      }

      @Test
      @TestMetadata("typeAnnotation.kt")
      public void testTypeAnnotation() {
        runTest("compiler/testData/codegen/box/involvesIrInterpreter/serialization/typeAnnotation.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/ir")
  @TestDataPath("$PROJECT_ROOT")
  public class Ir {
    @Test
    public void testAllFilesPresentInIr() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("anonymousClassLeak.kt")
    public void testAnonymousClassLeak() {
      runTest("compiler/testData/codegen/box/ir/anonymousClassLeak.kt");
    }

    @Test
    @TestMetadata("anonymousObjectInForLoopIteratorAndBody.kt")
    public void testAnonymousObjectInForLoopIteratorAndBody() {
      runTest("compiler/testData/codegen/box/ir/anonymousObjectInForLoopIteratorAndBody.kt");
    }

    @Test
    @TestMetadata("anonymousObjectInGenericFun.kt")
    public void testAnonymousObjectInGenericFun() {
      runTest("compiler/testData/codegen/box/ir/anonymousObjectInGenericFun.kt");
    }

    @Test
    @TestMetadata("anonymousObjectInsideElvis.kt")
    public void testAnonymousObjectInsideElvis() {
      runTest("compiler/testData/codegen/box/ir/anonymousObjectInsideElvis.kt");
    }

    @Test
    @TestMetadata("classInitializers.kt")
    public void testClassInitializers() {
      runTest("compiler/testData/codegen/box/ir/classInitializers.kt");
    }

    @Test
    @TestMetadata("enumClass.kt")
    public void testEnumClass() {
      runTest("compiler/testData/codegen/box/ir/enumClass.kt");
    }

    @Test
    @TestMetadata("enumClass2.kt")
    public void testEnumClass2() {
      runTest("compiler/testData/codegen/box/ir/enumClass2.kt");
    }

    @Test
    @TestMetadata("enumClass3.kt")
    public void testEnumClass3() {
      runTest("compiler/testData/codegen/box/ir/enumClass3.kt");
    }

    @Test
    @TestMetadata("fileClassInitializers.kt")
    public void testFileClassInitializers() {
      runTest("compiler/testData/codegen/box/ir/fileClassInitializers.kt");
    }

    @Test
    @TestMetadata("genericCompanion.kt")
    public void testGenericCompanion() {
      runTest("compiler/testData/codegen/box/ir/genericCompanion.kt");
    }

    @Test
    @TestMetadata("hashCodeOnGenericSubstitutedWithPrimitive.kt")
    public void testHashCodeOnGenericSubstitutedWithPrimitive() {
      runTest("compiler/testData/codegen/box/ir/hashCodeOnGenericSubstitutedWithPrimitive.kt");
    }

    @Test
    @TestMetadata("kt25405.kt")
    public void testKt25405() {
      runTest("compiler/testData/codegen/box/ir/kt25405.kt");
    }

    @Test
    @TestMetadata("kt40083.kt")
    public void testKt40083() {
      runTest("compiler/testData/codegen/box/ir/kt40083.kt");
    }

    @Test
    @TestMetadata("kt41765.kt")
    public void testKt41765() {
      runTest("compiler/testData/codegen/box/ir/kt41765.kt");
    }

    @Test
    @TestMetadata("kt52677.kt")
    public void testKt52677() {
      runTest("compiler/testData/codegen/box/ir/kt52677.kt");
    }

    @Test
    @TestMetadata("kt55318.kt")
    public void testKt55318() {
      runTest("compiler/testData/codegen/box/ir/kt55318.kt");
    }

    @Test
    @TestMetadata("lambdaWithLoop.kt")
    public void testLambdaWithLoop() {
      runTest("compiler/testData/codegen/box/ir/lambdaWithLoop.kt");
    }

    @Test
    @TestMetadata("objectClass.kt")
    public void testObjectClass() {
      runTest("compiler/testData/codegen/box/ir/objectClass.kt");
    }

    @Test
    @TestMetadata("recursiveGeneric.kt")
    public void testRecursiveGeneric() {
      runTest("compiler/testData/codegen/box/ir/recursiveGeneric.kt");
    }

    @Test
    @TestMetadata("recursiveGeneric2.kt")
    public void testRecursiveGeneric2() {
      runTest("compiler/testData/codegen/box/ir/recursiveGeneric2.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/ir/simple.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ir/closureConversion")
    @TestDataPath("$PROJECT_ROOT")
    public class ClosureConversion {
      @Test
      public void testAllFilesPresentInClosureConversion() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/closureConversion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("closureConversion1.kt")
      public void testClosureConversion1() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion1.kt");
      }

      @Test
      @TestMetadata("closureConversion2.kt")
      public void testClosureConversion2() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion2.kt");
      }

      @Test
      @TestMetadata("closureConversion3.kt")
      public void testClosureConversion3() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion3.kt");
      }

      @Test
      @TestMetadata("closureConversion4.kt")
      public void testClosureConversion4() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion4.kt");
      }

      @Test
      @TestMetadata("innerClass1.kt")
      public void testInnerClass1() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/innerClass1.kt");
      }

      @Test
      @TestMetadata("innerClass2.kt")
      public void testInnerClass2() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/innerClass2.kt");
      }

      @Test
      @TestMetadata("mutable1.kt")
      public void testMutable1() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/mutable1.kt");
      }

      @Test
      @TestMetadata("mutablePrimitives.kt")
      public void testMutablePrimitives() {
        runTest("compiler/testData/codegen/box/ir/closureConversion/mutablePrimitives.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ir/primitiveNumberComparisons")
    @TestDataPath("$PROJECT_ROOT")
    public class PrimitiveNumberComparisons {
      @Test
      public void testAllFilesPresentInPrimitiveNumberComparisons() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/primitiveNumberComparisons"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("comparableToDouble.kt")
      public void testComparableToDouble() {
        runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/comparableToDouble.kt");
      }

      @Test
      @TestMetadata("doubleEqeq.kt")
      public void testDoubleEqeq() {
        runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/doubleEqeq.kt");
      }

      @Test
      @TestMetadata("floatEqeq.kt")
      public void testFloatEqeq() {
        runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/floatEqeq.kt");
      }

      @Test
      @TestMetadata("mixedNumberTypes.kt")
      public void testMixedNumberTypes() {
        runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/mixedNumberTypes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ir/privateSignatures")
    @TestDataPath("$PROJECT_ROOT")
    public class PrivateSignatures {
      @Test
      public void testAllFilesPresentInPrivateSignatures() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/privateSignatures"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("enumEntryArguments.kt")
      public void testEnumEntryArguments() {
        runTest("compiler/testData/codegen/box/ir/privateSignatures/enumEntryArguments.kt");
      }

      @Test
      @TestMetadata("privateLeakThroughInline.kt")
      public void testPrivateLeakThroughInline() {
        runTest("compiler/testData/codegen/box/ir/privateSignatures/privateLeakThroughInline.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ir/serializationRegressions")
    @TestDataPath("$PROJECT_ROOT")
    public class SerializationRegressions {
      @Test
      public void testAllFilesPresentInSerializationRegressions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/serializationRegressions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("anonFakeOverride.kt")
      public void testAnonFakeOverride() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/anonFakeOverride.kt");
      }

      @Test
      @TestMetadata("deepGenericDelegatedProperty.kt")
      public void testDeepGenericDelegatedProperty() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/deepGenericDelegatedProperty.kt");
      }

      @Test
      @TestMetadata("dispatchReceiverValue.kt")
      public void testDispatchReceiverValue() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/dispatchReceiverValue.kt");
      }

      @Test
      @TestMetadata("genericProperty.kt")
      public void testGenericProperty() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/genericProperty.kt");
      }

      @Test
      @TestMetadata("innerClassInEnumEntryClass.kt")
      public void testInnerClassInEnumEntryClass() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/innerClassInEnumEntryClass.kt");
      }

      @Test
      @TestMetadata("signatureClash.kt")
      public void testSignatureClash() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/signatureClash.kt");
      }

      @Test
      @TestMetadata("transitiveClash.kt")
      public void testTransitiveClash() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/transitiveClash.kt");
      }

      @Test
      @TestMetadata("useImportedMember.kt")
      public void testUseImportedMember() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/useImportedMember.kt");
      }

      @Test
      @TestMetadata("varAsFunctionCall.kt")
      public void testVarAsFunctionCall() {
        runTest("compiler/testData/codegen/box/ir/serializationRegressions/varAsFunctionCall.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/javaFieldAndKotlinProperty")
  @TestDataPath("$PROJECT_ROOT")
  public class JavaFieldAndKotlinProperty {
    @Test
    public void testAllFilesPresentInJavaFieldAndKotlinProperty() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaFieldAndKotlinProperty"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/javaInterop")
  @TestDataPath("$PROJECT_ROOT")
  public class JavaInterop {
    @Test
    public void testAllFilesPresentInJavaInterop() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests")
    @TestDataPath("$PROJECT_ROOT")
    public class ForeignAnnotationsTests {
      @Test
      public void testAllFilesPresentInForeignAnnotationsTests() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests/tests")
      @TestDataPath("$PROJECT_ROOT")
      public class Tests {
        @Test
        public void testAllFilesPresentInTests() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/foreignAnnotationsTests/tests"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaInterop/generics")
    @TestDataPath("$PROJECT_ROOT")
    public class Generics {
      @Test
      public void testAllFilesPresentInGenerics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/generics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions")
    @TestDataPath("$PROJECT_ROOT")
    public class NotNullAssertions {
      @Test
      public void testAllFilesPresentInNotNullAssertions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("mapPut.kt")
      public void testMapPut() {
        runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/mapPut.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability")
      @TestDataPath("$PROJECT_ROOT")
      public class EnhancedNullability {
        @Test
        public void testAllFilesPresentInEnhancedNullability() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages")
      @TestDataPath("$PROJECT_ROOT")
      public class ExpressionAssertionMessages {
        @Test
        public void testAllFilesPresentInExpressionAssertionMessages() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/expressionAssertionMessages"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue")
      @TestDataPath("$PROJECT_ROOT")
      public class NullCheckOnLambdaReturnValue {
        @Test
        public void testAllFilesPresentInNullCheckOnLambdaReturnValue() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaInterop/objectMethods")
    @TestDataPath("$PROJECT_ROOT")
    public class ObjectMethods {
      @Test
      public void testAllFilesPresentInObjectMethods() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/objectMethods"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance")
    @TestDataPath("$PROJECT_ROOT")
    public class PrimitiveVsWrapperTypeInInheritance {
      @Test
      public void testAllFilesPresentInPrimitiveVsWrapperTypeInInheritance() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/primitiveVsWrapperTypeInInheritance"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaInterop/statics")
    @TestDataPath("$PROJECT_ROOT")
    public class Statics {
      @Test
      public void testAllFilesPresentInStatics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/statics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/javaVisibility")
  @TestDataPath("$PROJECT_ROOT")
  public class JavaVisibility {
    @Test
    public void testAllFilesPresentInJavaVisibility() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaVisibility"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaVisibility/package")
    @TestDataPath("$PROJECT_ROOT")
    public class Package {
      @Test
      public void testAllFilesPresentInPackage() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaVisibility/package"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaVisibility/protectedAndPackage")
    @TestDataPath("$PROJECT_ROOT")
    public class ProtectedAndPackage {
      @Test
      public void testAllFilesPresentInProtectedAndPackage() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaVisibility/protectedAndPackage"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaVisibility/protectedStatic")
    @TestDataPath("$PROJECT_ROOT")
    public class ProtectedStatic {
      @Test
      public void testAllFilesPresentInProtectedStatic() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaVisibility/protectedStatic"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/jdk")
  @TestDataPath("$PROJECT_ROOT")
  public class Jdk {
    @Test
    public void testAllFilesPresentInJdk() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jdk"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("arrayList.kt")
    public void testArrayList() {
      runTest("compiler/testData/codegen/box/jdk/arrayList.kt");
    }

    @Test
    @TestMetadata("hashMap.kt")
    public void testHashMap() {
      runTest("compiler/testData/codegen/box/jdk/hashMap.kt");
    }

    @Test
    @TestMetadata("iteratingOverHashMap.kt")
    public void testIteratingOverHashMap() {
      runTest("compiler/testData/codegen/box/jdk/iteratingOverHashMap.kt");
    }

    @Test
    @TestMetadata("kt1397.kt")
    public void testKt1397() {
      runTest("compiler/testData/codegen/box/jdk/kt1397.kt");
    }

    @Test
    @TestMetadata("noStringToCharArray.kt")
    public void testNoStringToCharArray() {
      runTest("compiler/testData/codegen/box/jdk/noStringToCharArray.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/js")
  @TestDataPath("$PROJECT_ROOT")
  public class Js {
    @Test
    public void testAllFilesPresentInJs() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/js"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/jvm8")
  @TestDataPath("$PROJECT_ROOT")
  public class Jvm8 {
    @Test
    public void testAllFilesPresentInJvm8() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvm8/defaults")
    @TestDataPath("$PROJECT_ROOT")
    public class Defaults {
      @Test
      public void testAllFilesPresentInDefaults() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/allCompatibility")
      @TestDataPath("$PROJECT_ROOT")
      public class AllCompatibility {
        @Test
        public void testAllFilesPresentInAllCompatibility() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/allCompatibility"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy")
        @TestDataPath("$PROJECT_ROOT")
        public class DelegationBy {
          @Test
          public void testAllFilesPresentInDelegationBy() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/delegationBy")
      @TestDataPath("$PROJECT_ROOT")
      public class DelegationBy {
        @Test
        public void testAllFilesPresentInDelegationBy() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/delegationBy"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls")
      @TestDataPath("$PROJECT_ROOT")
      public class NoDefaultImpls {
        @Test
        public void testAllFilesPresentInNoDefaultImpls() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy")
        @TestDataPath("$PROJECT_ROOT")
        public class DelegationBy {
          @Test
          public void testAllFilesPresentInDelegationBy() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/specialization")
        @TestDataPath("$PROJECT_ROOT")
        public class Specialization {
          @Test
          public void testAllFilesPresentInSpecialization() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/specialization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        public class WithCompatibility {
          @Test
          public void testAllFilesPresentInWithCompatibility() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/withCompatibility"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class NonDefaultInheritance {
        @Test
        public void testAllFilesPresentInNonDefaultInheritance() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/nonDefaultInheritance"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/reflection")
      @TestDataPath("$PROJECT_ROOT")
      public class Reflection {
        @Test
        public void testAllFilesPresentInReflection() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/reflection"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvm8/interfaceFlag")
    @TestDataPath("$PROJECT_ROOT")
    public class InterfaceFlag {
      @Test
      public void testAllFilesPresentInInterfaceFlag() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/interfaceFlag"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvm8/javaDefaults")
    @TestDataPath("$PROJECT_ROOT")
    public class JavaDefaults {
      @Test
      public void testAllFilesPresentInJavaDefaults() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/javaDefaults"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/jvmField")
  @TestDataPath("$PROJECT_ROOT")
  public class JvmField {
    @Test
    public void testAllFilesPresentInJvmField() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmField"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/jvmName")
  @TestDataPath("$PROJECT_ROOT")
  public class JvmName {
    @Test
    public void testAllFilesPresentInJvmName() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmName"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvmName/fileFacades")
    @TestDataPath("$PROJECT_ROOT")
    public class FileFacades {
      @Test
      public void testAllFilesPresentInFileFacades() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmName/fileFacades"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/jvmOverloads")
  @TestDataPath("$PROJECT_ROOT")
  public class JvmOverloads {
    @Test
    public void testAllFilesPresentInJvmOverloads() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmOverloads"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/jvmPackageName")
  @TestDataPath("$PROJECT_ROOT")
  public class JvmPackageName {
    @Test
    public void testAllFilesPresentInJvmPackageName() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmPackageName"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/jvmStatic")
  @TestDataPath("$PROJECT_ROOT")
  public class JvmStatic {
    @Test
    public void testAllFilesPresentInJvmStatic() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmStatic"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvmStatic/protectedInSuperClass")
    @TestDataPath("$PROJECT_ROOT")
    public class ProtectedInSuperClass {
      @Test
      public void testAllFilesPresentInProtectedInSuperClass() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmStatic/protectedInSuperClass"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/labels")
  @TestDataPath("$PROJECT_ROOT")
  public class Labels {
    @Test
    public void testAllFilesPresentInLabels() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/labels"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("controlLabelClashesWithFuncitonName.kt")
    public void testControlLabelClashesWithFuncitonName() {
      runTest("compiler/testData/codegen/box/labels/controlLabelClashesWithFuncitonName.kt");
    }

    @Test
    @TestMetadata("infixCallLabelling.kt")
    public void testInfixCallLabelling() {
      runTest("compiler/testData/codegen/box/labels/infixCallLabelling.kt");
    }

    @Test
    @TestMetadata("labeledDeclarations.kt")
    public void testLabeledDeclarations() {
      runTest("compiler/testData/codegen/box/labels/labeledDeclarations.kt");
    }

    @Test
    @TestMetadata("propertyAccessor.kt")
    public void testPropertyAccessor() {
      runTest("compiler/testData/codegen/box/labels/propertyAccessor.kt");
    }

    @Test
    @TestMetadata("propertyAccessorFunctionLiteral.kt")
    public void testPropertyAccessorFunctionLiteral() {
      runTest("compiler/testData/codegen/box/labels/propertyAccessorFunctionLiteral.kt");
    }

    @Test
    @TestMetadata("propertyAccessorInnerExtensionFun.kt")
    public void testPropertyAccessorInnerExtensionFun() {
      runTest("compiler/testData/codegen/box/labels/propertyAccessorInnerExtensionFun.kt");
    }

    @Test
    @TestMetadata("propertyAccessorObject.kt")
    public void testPropertyAccessorObject() {
      runTest("compiler/testData/codegen/box/labels/propertyAccessorObject.kt");
    }

    @Test
    @TestMetadata("propertyInClassAccessor.kt")
    public void testPropertyInClassAccessor() {
      runTest("compiler/testData/codegen/box/labels/propertyInClassAccessor.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/lazyCodegen")
  @TestDataPath("$PROJECT_ROOT")
  public class LazyCodegen {
    @Test
    public void testAllFilesPresentInLazyCodegen() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lazyCodegen"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("exceptionInFieldInitializer.kt")
    public void testExceptionInFieldInitializer() {
      runTest("compiler/testData/codegen/box/lazyCodegen/exceptionInFieldInitializer.kt");
    }

    @Test
    @TestMetadata("ifElse.kt")
    public void testIfElse() {
      runTest("compiler/testData/codegen/box/lazyCodegen/ifElse.kt");
    }

    @Test
    @TestMetadata("increment.kt")
    public void testIncrement() {
      runTest("compiler/testData/codegen/box/lazyCodegen/increment.kt");
    }

    @Test
    @TestMetadata("safeAssign.kt")
    public void testSafeAssign() {
      runTest("compiler/testData/codegen/box/lazyCodegen/safeAssign.kt");
    }

    @Test
    @TestMetadata("safeAssignComplex.kt")
    public void testSafeAssignComplex() {
      runTest("compiler/testData/codegen/box/lazyCodegen/safeAssignComplex.kt");
    }

    @Test
    @TestMetadata("safeCallAndArray.kt")
    public void testSafeCallAndArray() {
      runTest("compiler/testData/codegen/box/lazyCodegen/safeCallAndArray.kt");
    }

    @Test
    @TestMetadata("toString.kt")
    public void testToString() {
      runTest("compiler/testData/codegen/box/lazyCodegen/toString.kt");
    }

    @Test
    @TestMetadata("tryCatchExpression.kt")
    public void testTryCatchExpression() {
      runTest("compiler/testData/codegen/box/lazyCodegen/tryCatchExpression.kt");
    }

    @Test
    @TestMetadata("when.kt")
    public void testWhen() {
      runTest("compiler/testData/codegen/box/lazyCodegen/when.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/lazyCodegen/optimizations")
    @TestDataPath("$PROJECT_ROOT")
    public class Optimizations {
      @Test
      public void testAllFilesPresentInOptimizations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lazyCodegen/optimizations"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("negateConstantCompare.kt")
      public void testNegateConstantCompare() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateConstantCompare.kt");
      }

      @Test
      @TestMetadata("negateFalse.kt")
      public void testNegateFalse() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalse.kt");
      }

      @Test
      @TestMetadata("negateFalseVar.kt")
      public void testNegateFalseVar() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalseVar.kt");
      }

      @Test
      @TestMetadata("negateFalseVarChain.kt")
      public void testNegateFalseVarChain() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalseVarChain.kt");
      }

      @Test
      @TestMetadata("negateObjectComp.kt")
      public void testNegateObjectComp() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateObjectComp.kt");
      }

      @Test
      @TestMetadata("negateObjectComp2.kt")
      public void testNegateObjectComp2() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateObjectComp2.kt");
      }

      @Test
      @TestMetadata("negateTrue.kt")
      public void testNegateTrue() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateTrue.kt");
      }

      @Test
      @TestMetadata("negateTrueVar.kt")
      public void testNegateTrueVar() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateTrueVar.kt");
      }

      @Test
      @TestMetadata("noOptimization.kt")
      public void testNoOptimization() {
        runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/noOptimization.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/localClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class LocalClasses {
    @Test
    public void testAllFilesPresentInLocalClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/localClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("anonymousObjectInExtension.kt")
    public void testAnonymousObjectInExtension() {
      runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInExtension.kt");
    }

    @Test
    @TestMetadata("anonymousObjectInInitializer.kt")
    public void testAnonymousObjectInInitializer() {
      runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInInitializer.kt");
    }

    @Test
    @TestMetadata("anonymousObjectInParameterInitializer.kt")
    public void testAnonymousObjectInParameterInitializer() {
      runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInParameterInitializer.kt");
    }

    @Test
    @TestMetadata("capturingInDefaultConstructorParameter.kt")
    public void testCapturingInDefaultConstructorParameter() {
      runTest("compiler/testData/codegen/box/localClasses/capturingInDefaultConstructorParameter.kt");
    }

    @Test
    @TestMetadata("closureOfInnerLocalClass.kt")
    public void testClosureOfInnerLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/closureOfInnerLocalClass.kt");
    }

    @Test
    @TestMetadata("closureOfLambdaInLocalClass.kt")
    public void testClosureOfLambdaInLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/closureOfLambdaInLocalClass.kt");
    }

    @Test
    @TestMetadata("closureWithSelfInstantiation.kt")
    public void testClosureWithSelfInstantiation() {
      runTest("compiler/testData/codegen/box/localClasses/closureWithSelfInstantiation.kt");
    }

    @Test
    @TestMetadata("defaultParameterInConstructor.kt")
    public void testDefaultParameterInConstructor() {
      runTest("compiler/testData/codegen/box/localClasses/defaultParameterInConstructor.kt");
    }

    @Test
    @TestMetadata("inExtensionFunction.kt")
    public void testInExtensionFunction() {
      runTest("compiler/testData/codegen/box/localClasses/inExtensionFunction.kt");
    }

    @Test
    @TestMetadata("inExtensionProperty.kt")
    public void testInExtensionProperty() {
      runTest("compiler/testData/codegen/box/localClasses/inExtensionProperty.kt");
    }

    @Test
    @TestMetadata("inLocalExtensionFunction.kt")
    public void testInLocalExtensionFunction() {
      runTest("compiler/testData/codegen/box/localClasses/inLocalExtensionFunction.kt");
    }

    @Test
    @TestMetadata("inLocalExtensionProperty.kt")
    public void testInLocalExtensionProperty() {
      runTest("compiler/testData/codegen/box/localClasses/inLocalExtensionProperty.kt");
    }

    @Test
    @TestMetadata("innerClassInLocalClass.kt")
    public void testInnerClassInLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/innerClassInLocalClass.kt");
    }

    @Test
    @TestMetadata("innerOfLocalCaptureExtensionReceiver.kt")
    public void testInnerOfLocalCaptureExtensionReceiver() {
      runTest("compiler/testData/codegen/box/localClasses/innerOfLocalCaptureExtensionReceiver.kt");
    }

    @Test
    @TestMetadata("kt10835.kt")
    public void testKt10835() {
      runTest("compiler/testData/codegen/box/localClasses/kt10835.kt");
    }

    @Test
    @TestMetadata("kt10835a.kt")
    public void testKt10835a() {
      runTest("compiler/testData/codegen/box/localClasses/kt10835a.kt");
    }

    @Test
    @TestMetadata("kt2700.kt")
    public void testKt2700() {
      runTest("compiler/testData/codegen/box/localClasses/kt2700.kt");
    }

    @Test
    @TestMetadata("kt2873.kt")
    public void testKt2873() {
      runTest("compiler/testData/codegen/box/localClasses/kt2873.kt");
    }

    @Test
    @TestMetadata("kt3210.kt")
    public void testKt3210() {
      runTest("compiler/testData/codegen/box/localClasses/kt3210.kt");
    }

    @Test
    @TestMetadata("kt3389.kt")
    public void testKt3389() {
      runTest("compiler/testData/codegen/box/localClasses/kt3389.kt");
    }

    @Test
    @TestMetadata("kt3584.kt")
    public void testKt3584() {
      runTest("compiler/testData/codegen/box/localClasses/kt3584.kt");
    }

    @Test
    @TestMetadata("kt4174.kt")
    public void testKt4174() {
      runTest("compiler/testData/codegen/box/localClasses/kt4174.kt");
    }

    @Test
    @TestMetadata("kt45383.kt")
    public void testKt45383() {
      runTest("compiler/testData/codegen/box/localClasses/kt45383.kt");
    }

    @Test
    @TestMetadata("localClass.kt")
    public void testLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/localClass.kt");
    }

    @Test
    @TestMetadata("localClassCaptureExtensionReceiver.kt")
    public void testLocalClassCaptureExtensionReceiver() {
      runTest("compiler/testData/codegen/box/localClasses/localClassCaptureExtensionReceiver.kt");
    }

    @Test
    @TestMetadata("localClassInInitializer.kt")
    public void testLocalClassInInitializer() {
      runTest("compiler/testData/codegen/box/localClasses/localClassInInitializer.kt");
    }

    @Test
    @TestMetadata("localClassInParameterInitializer.kt")
    public void testLocalClassInParameterInitializer() {
      runTest("compiler/testData/codegen/box/localClasses/localClassInParameterInitializer.kt");
    }

    @Test
    @TestMetadata("localClassUsedBeforeDeclaration.kt")
    public void testLocalClassUsedBeforeDeclaration() {
      runTest("compiler/testData/codegen/box/localClasses/localClassUsedBeforeDeclaration.kt");
    }

    @Test
    @TestMetadata("localDataClass.kt")
    public void testLocalDataClass() {
      runTest("compiler/testData/codegen/box/localClasses/localDataClass.kt");
    }

    @Test
    @TestMetadata("localExtendsInnerAndReferencesOuterMember.kt")
    public void testLocalExtendsInnerAndReferencesOuterMember() {
      runTest("compiler/testData/codegen/box/localClasses/localExtendsInnerAndReferencesOuterMember.kt");
    }

    @Test
    @TestMetadata("localGenericWithTypeParameters.kt")
    public void testLocalGenericWithTypeParameters() {
      runTest("compiler/testData/codegen/box/localClasses/localGenericWithTypeParameters.kt");
    }

    @Test
    @TestMetadata("nameWithWhitespace.kt")
    public void testNameWithWhitespace() {
      runTest("compiler/testData/codegen/box/localClasses/nameWithWhitespace.kt");
    }

    @Test
    @TestMetadata("noclosure.kt")
    public void testNoclosure() {
      runTest("compiler/testData/codegen/box/localClasses/noclosure.kt");
    }

    @Test
    @TestMetadata("object.kt")
    public void testObject() {
      runTest("compiler/testData/codegen/box/localClasses/object.kt");
    }

    @Test
    @TestMetadata("ownClosureOfInnerLocalClass.kt")
    public void testOwnClosureOfInnerLocalClass() {
      runTest("compiler/testData/codegen/box/localClasses/ownClosureOfInnerLocalClass.kt");
    }

    @Test
    @TestMetadata("recaptureVarCapturedInLocalClass1.kt")
    public void testRecaptureVarCapturedInLocalClass1() {
      runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass1.kt");
    }

    @Test
    @TestMetadata("recaptureVarCapturedInLocalClass2.kt")
    public void testRecaptureVarCapturedInLocalClass2() {
      runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass2.kt");
    }

    @Test
    @TestMetadata("recaptureVarCapturedInLocalClass3.kt")
    public void testRecaptureVarCapturedInLocalClass3() {
      runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass3.kt");
    }

    @Test
    @TestMetadata("subclassingExtensionReceiverClass.kt")
    public void testSubclassingExtensionReceiverClass() {
      runTest("compiler/testData/codegen/box/localClasses/subclassingExtensionReceiverClass.kt");
    }

    @Test
    @TestMetadata("withclosure.kt")
    public void testWithclosure() {
      runTest("compiler/testData/codegen/box/localClasses/withclosure.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/mangling")
  @TestDataPath("$PROJECT_ROOT")
  public class Mangling {
    @Test
    public void testAllFilesPresentInMangling() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/mangling"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("internal.kt")
    public void testInternal() {
      runTest("compiler/testData/codegen/box/mangling/internal.kt");
    }

    @Test
    @TestMetadata("internalOverride.kt")
    public void testInternalOverride() {
      runTest("compiler/testData/codegen/box/mangling/internalOverride.kt");
    }

    @Test
    @TestMetadata("internalOverrideSuperCall.kt")
    public void testInternalOverrideSuperCall() {
      runTest("compiler/testData/codegen/box/mangling/internalOverrideSuperCall.kt");
    }

    @Test
    @TestMetadata("parentheses.kt")
    public void testParentheses() {
      runTest("compiler/testData/codegen/box/mangling/parentheses.kt");
    }

    @Test
    @TestMetadata("publicOverride.kt")
    public void testPublicOverride() {
      runTest("compiler/testData/codegen/box/mangling/publicOverride.kt");
    }

    @Test
    @TestMetadata("publicOverrideSuperCall.kt")
    public void testPublicOverrideSuperCall() {
      runTest("compiler/testData/codegen/box/mangling/publicOverrideSuperCall.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/mixedNamedPosition")
  @TestDataPath("$PROJECT_ROOT")
  public class MixedNamedPosition {
    @Test
    public void testAllFilesPresentInMixedNamedPosition() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/mixedNamedPosition"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("defaults.kt")
    public void testDefaults() {
      runTest("compiler/testData/codegen/box/mixedNamedPosition/defaults.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/mixedNamedPosition/simple.kt");
    }

    @Test
    @TestMetadata("varargs.kt")
    public void testVarargs() {
      runTest("compiler/testData/codegen/box/mixedNamedPosition/varargs.kt");
    }

    @Test
    @TestMetadata("varargsEvaluationOrder.kt")
    public void testVarargsEvaluationOrder() {
      runTest("compiler/testData/codegen/box/mixedNamedPosition/varargsEvaluationOrder.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/multiDecl")
  @TestDataPath("$PROJECT_ROOT")
  public class MultiDecl {
    @Test
    public void testAllFilesPresentInMultiDecl() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("ComplexInitializer.kt")
    public void testComplexInitializer() {
      runTest("compiler/testData/codegen/box/multiDecl/ComplexInitializer.kt");
    }

    @Test
    @TestMetadata("component.kt")
    public void testComponent() {
      runTest("compiler/testData/codegen/box/multiDecl/component.kt");
    }

    @Test
    @TestMetadata("kt9828_hashMap.kt")
    public void testKt9828_hashMap() {
      runTest("compiler/testData/codegen/box/multiDecl/kt9828_hashMap.kt");
    }

    @Test
    @TestMetadata("returnInElvis.kt")
    public void testReturnInElvis() {
      runTest("compiler/testData/codegen/box/multiDecl/returnInElvis.kt");
    }

    @Test
    @TestMetadata("SimpleVals.kt")
    public void testSimpleVals() {
      runTest("compiler/testData/codegen/box/multiDecl/SimpleVals.kt");
    }

    @Test
    @TestMetadata("SimpleValsExtensions.kt")
    public void testSimpleValsExtensions() {
      runTest("compiler/testData/codegen/box/multiDecl/SimpleValsExtensions.kt");
    }

    @Test
    @TestMetadata("SimpleVarsExtensions.kt")
    public void testSimpleVarsExtensions() {
      runTest("compiler/testData/codegen/box/multiDecl/SimpleVarsExtensions.kt");
    }

    @Test
    @TestMetadata("UnderscoreNames.kt")
    public void testUnderscoreNames() {
      runTest("compiler/testData/codegen/box/multiDecl/UnderscoreNames.kt");
    }

    @Test
    @TestMetadata("ValCapturedInFunctionLiteral.kt")
    public void testValCapturedInFunctionLiteral() {
      runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInFunctionLiteral.kt");
    }

    @Test
    @TestMetadata("ValCapturedInLocalFunction.kt")
    public void testValCapturedInLocalFunction() {
      runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInLocalFunction.kt");
    }

    @Test
    @TestMetadata("ValCapturedInObjectLiteral.kt")
    public void testValCapturedInObjectLiteral() {
      runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInObjectLiteral.kt");
    }

    @Test
    @TestMetadata("VarCapturedInFunctionLiteral.kt")
    public void testVarCapturedInFunctionLiteral() {
      runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInFunctionLiteral.kt");
    }

    @Test
    @TestMetadata("VarCapturedInLocalFunction.kt")
    public void testVarCapturedInLocalFunction() {
      runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInLocalFunction.kt");
    }

    @Test
    @TestMetadata("VarCapturedInObjectLiteral.kt")
    public void testVarCapturedInObjectLiteral() {
      runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInObjectLiteral.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator")
    @TestDataPath("$PROJECT_ROOT")
    public class ForIterator {
      @Test
      public void testAllFilesPresentInForIterator() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forIterator"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("MultiDeclFor.kt")
      public void testMultiDeclFor() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclFor.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentExtensions.kt")
      public void testMultiDeclForComponentExtensions() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentExtensions.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
      public void testMultiDeclForComponentMemberExtensions() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensions.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
      public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
      }

      @Test
      @TestMetadata("MultiDeclForValCaptured.kt")
      public void testMultiDeclForValCaptured() {
        runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForValCaptured.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator/longIterator")
      @TestDataPath("$PROJECT_ROOT")
      public class LongIterator {
        @Test
        public void testAllFilesPresentInLongIterator() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forIterator/longIterator"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange")
    @TestDataPath("$PROJECT_ROOT")
    public class ForRange {
      @Test
      public void testAllFilesPresentInForRange() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("MultiDeclFor.kt")
      public void testMultiDeclFor() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclFor.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentExtensions.kt")
      public void testMultiDeclForComponentExtensions() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentExtensions.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
      public void testMultiDeclForComponentMemberExtensions() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensions.kt");
      }

      @Test
      @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
      public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
      }

      @Test
      @TestMetadata("MultiDeclForValCaptured.kt")
      public void testMultiDeclForValCaptured() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForValCaptured.kt");
      }

      @Test
      @TestMetadata("UnderscoreNames.kt")
      public void testUnderscoreNames() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/UnderscoreNames.kt");
      }

      @Test
      @TestMetadata("UnderscoreNamesDontCallComponent.kt")
      public void testUnderscoreNamesDontCallComponent() {
        runTest("compiler/testData/codegen/box/multiDecl/forRange/UnderscoreNamesDontCallComponent.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo")
      @TestDataPath("$PROJECT_ROOT")
      public class ExplicitRangeTo {
        @Test
        public void testAllFilesPresentInExplicitRangeTo() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("MultiDeclFor.kt")
        public void testMultiDeclFor() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclFor.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }

        @Test
        @TestMetadata("MultiDeclForValCaptured.kt")
        public void testMultiDeclForValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForValCaptured.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int")
        @TestDataPath("$PROJECT_ROOT")
        public class Int {
          @Test
          public void testAllFilesPresentInInt() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("MultiDeclForComponentExtensions.kt")
          public void testMultiDeclForComponentExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensions.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
          public void testMultiDeclForComponentExtensionsValCaptured() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensionsValCaptured.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
          public void testMultiDeclForComponentMemberExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensions.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
          public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long")
        @TestDataPath("$PROJECT_ROOT")
        public class Long {
          @Test
          public void testAllFilesPresentInLong() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("MultiDeclForComponentExtensions.kt")
          public void testMultiDeclForComponentExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensions.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
          public void testMultiDeclForComponentExtensionsValCaptured() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensionsValCaptured.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
          public void testMultiDeclForComponentMemberExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensions.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
          public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot")
      @TestDataPath("$PROJECT_ROOT")
      public class ExplicitRangeToWithDot {
        @Test
        public void testAllFilesPresentInExplicitRangeToWithDot() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("MultiDeclFor.kt")
        public void testMultiDeclFor() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclFor.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }

        @Test
        @TestMetadata("MultiDeclForValCaptured.kt")
        public void testMultiDeclForValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForValCaptured.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int")
        @TestDataPath("$PROJECT_ROOT")
        public class Int {
          @Test
          public void testAllFilesPresentInInt() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("MultiDeclForComponentExtensions.kt")
          public void testMultiDeclForComponentExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensions.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
          public void testMultiDeclForComponentExtensionsValCaptured() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensionsValCaptured.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
          public void testMultiDeclForComponentMemberExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensions.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
          public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long")
        @TestDataPath("$PROJECT_ROOT")
        public class Long {
          @Test
          public void testAllFilesPresentInLong() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("MultiDeclForComponentExtensions.kt")
          public void testMultiDeclForComponentExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensions.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
          public void testMultiDeclForComponentExtensionsValCaptured() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensionsValCaptured.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
          public void testMultiDeclForComponentMemberExtensions() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensions.kt");
          }

          @Test
          @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
          public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
            runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/int")
      @TestDataPath("$PROJECT_ROOT")
      public class Int {
        @Test
        public void testAllFilesPresentInInt() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/int"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/long")
      @TestDataPath("$PROJECT_ROOT")
      public class Long {
        @Test
        public void testAllFilesPresentInLong() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/long"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensions.kt")
        public void testMultiDeclForComponentExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
        public void testMultiDeclForComponentExtensionsValCaptured() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensionsValCaptured.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
        public void testMultiDeclForComponentMemberExtensions() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensions.kt");
        }

        @Test
        @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
        public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() {
          runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/multifileClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class MultifileClasses {
    @Test
    public void testAllFilesPresentInMultifileClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multifileClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multifileClasses/optimized")
    @TestDataPath("$PROJECT_ROOT")
    public class Optimized {
      @Test
      public void testAllFilesPresentInOptimized() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multifileClasses/optimized"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/multiplatform")
  @TestDataPath("$PROJECT_ROOT")
  public class Multiplatform {
    @Test
    public void testAllFilesPresentInMultiplatform() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true, "k2");
    }

    @Test
    @TestMetadata("expectProperty.kt")
    public void testExpectProperty() {
      runTest("compiler/testData/codegen/box/multiplatform/expectProperty.kt");
    }

    @Test
    @TestMetadata("kt59613.kt")
    public void testKt59613() {
      runTest("compiler/testData/codegen/box/multiplatform/kt59613.kt");
    }

    @Test
    @TestMetadata("optionalExpectation.kt")
    public void testOptionalExpectation() {
      runTest("compiler/testData/codegen/box/multiplatform/optionalExpectation.kt");
    }

    @Test
    @TestMetadata("starImportOfExpectEnumWithActualTypeAlias.kt")
    public void testStarImportOfExpectEnumWithActualTypeAlias() {
      runTest("compiler/testData/codegen/box/multiplatform/starImportOfExpectEnumWithActualTypeAlias.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiplatform/complexMatchings")
    @TestDataPath("$PROJECT_ROOT")
    public class ComplexMatchings {
      @Test
      public void testAllFilesPresentInComplexMatchings() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/complexMatchings"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("expectCtorlessFinalToActualObject.kt")
      public void testExpectCtorlessFinalToActualObject() {
        runTest("compiler/testData/codegen/box/multiplatform/complexMatchings/expectCtorlessFinalToActualObject.kt");
      }

      @Test
      @TestMetadata("expectCtorlessFinalToActualUnit.kt")
      public void testExpectCtorlessFinalToActualUnit() {
        runTest("compiler/testData/codegen/box/multiplatform/complexMatchings/expectCtorlessFinalToActualUnit.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiplatform/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class DefaultArguments {
      @Test
      public void testAllFilesPresentInDefaultArguments() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/defaultArguments"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("bothInExpectAndActual.kt")
      public void testBothInExpectAndActual() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/bothInExpectAndActual.kt");
      }

      @Test
      @TestMetadata("bothInExpectAndActual2.kt")
      public void testBothInExpectAndActual2() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/bothInExpectAndActual2.kt");
      }

      @Test
      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/constructor.kt");
      }

      @Test
      @TestMetadata("delegatedExpectedInterface.kt")
      public void testDelegatedExpectedInterface() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/delegatedExpectedInterface.kt");
      }

      @Test
      @TestMetadata("dispatchReceiverValue.kt")
      public void testDispatchReceiverValue() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/dispatchReceiverValue.kt");
      }

      @Test
      @TestMetadata("extensionReceiverValue.kt")
      public void testExtensionReceiverValue() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/extensionReceiverValue.kt");
      }

      @Test
      @TestMetadata("function.kt")
      public void testFunction() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/function.kt");
      }

      @Test
      @TestMetadata("functionFromOtherModule.kt")
      public void testFunctionFromOtherModule() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/functionFromOtherModule.kt");
      }

      @Test
      @TestMetadata("inheritedFromCommonClass.kt")
      public void testInheritedFromCommonClass() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromCommonClass.kt");
      }

      @Test
      @TestMetadata("inheritedFromExpectedClass.kt")
      public void testInheritedFromExpectedClass() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedClass.kt");
      }

      @Test
      @TestMetadata("inheritedFromExpectedInterface.kt")
      public void testInheritedFromExpectedInterface() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedInterface.kt");
      }

      @Test
      @TestMetadata("inheritedFromExpectedMethod.kt")
      public void testInheritedFromExpectedMethod() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedMethod.kt");
      }

      @Test
      @TestMetadata("inheritedInExpectedDeclarations.kt")
      public void testInheritedInExpectedDeclarations() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedInExpectedDeclarations.kt");
      }

      @Test
      @TestMetadata("inheritedViaAnotherInterfaceIndirectly.kt")
      public void testInheritedViaAnotherInterfaceIndirectly() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedViaAnotherInterfaceIndirectly.kt");
      }

      @Test
      @TestMetadata("inlineFunctionWithDefaultLambda.kt")
      public void testInlineFunctionWithDefaultLambda() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inlineFunctionWithDefaultLambda.kt");
      }

      @Test
      @TestMetadata("kt23239.kt")
      public void testKt23239() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/kt23239.kt");
      }

      @Test
      @TestMetadata("kt23739.kt")
      public void testKt23739() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/kt23739.kt");
      }

      @Test
      @TestMetadata("nestedEnumEntryValue.kt")
      public void testNestedEnumEntryValue() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/nestedEnumEntryValue.kt");
      }

      @Test
      @TestMetadata("parametersInArgumentValues.kt")
      public void testParametersInArgumentValues() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/parametersInArgumentValues.kt");
      }

      @Test
      @TestMetadata("superCall.kt")
      public void testSuperCall() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/superCall.kt");
      }

      @Test
      @TestMetadata("suspend.kt")
      public void testSuspend() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/suspend.kt");
      }

      @Test
      @TestMetadata("typeAlias.kt")
      public void testTypeAlias() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/typeAlias.kt");
      }

      @Test
      @TestMetadata("typeAlias2.kt")
      public void testTypeAlias2() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/typeAlias2.kt");
      }

      @Test
      @TestMetadata("withTypeParameter.kt")
      public void testWithTypeParameter() {
        runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/withTypeParameter.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiplatform/exhaustiveness")
    @TestDataPath("$PROJECT_ROOT")
    public class Exhaustiveness {
      @Test
      public void testAllFilesPresentInExhaustiveness() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/exhaustiveness"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiplatform/hmpp")
    @TestDataPath("$PROJECT_ROOT")
    public class Hmpp {
      @Test
      public void testAllFilesPresentInHmpp() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/hmpp"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiplatform/migratedOldTests")
    @TestDataPath("$PROJECT_ROOT")
    public class MigratedOldTests {
      @Test
      public void testAllFilesPresentInMigratedOldTests() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/migratedOldTests"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("mpp1.kt")
      public void testMpp1() {
        runTest("compiler/testData/codegen/box/multiplatform/migratedOldTests/mpp1.kt");
      }

      @Test
      @TestMetadata("mpp2.kt")
      public void testMpp2() {
        runTest("compiler/testData/codegen/box/multiplatform/migratedOldTests/mpp2.kt");
      }

      @Test
      @TestMetadata("mpp_default_args.kt")
      public void testMpp_default_args() {
        runTest("compiler/testData/codegen/box/multiplatform/migratedOldTests/mpp_default_args.kt");
      }

      @Test
      @TestMetadata("remap_expect_property_ref.kt")
      public void testRemap_expect_property_ref() {
        runTest("compiler/testData/codegen/box/multiplatform/migratedOldTests/remap_expect_property_ref.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiplatform/multiModule")
    @TestDataPath("$PROJECT_ROOT")
    public class MultiModule {
      @Test
      public void testAllFilesPresentInMultiModule() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/multiModule"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/nonLocalReturns")
  @TestDataPath("$PROJECT_ROOT")
  public class NonLocalReturns {
    @Test
    public void testAllFilesPresentInNonLocalReturns() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nonLocalReturns"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("kt9644let.kt")
    public void testKt9644let() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/kt9644let.kt");
    }

    @Test
    @TestMetadata("localReturnInsideProperty.kt")
    public void testLocalReturnInsideProperty() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/localReturnInsideProperty.kt");
    }

    @Test
    @TestMetadata("returnInsideTwoLambdas.kt")
    public void testReturnInsideTwoLambdas() {
      runTest("compiler/testData/codegen/box/nonLocalReturns/returnInsideTwoLambdas.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/notNullAssertions")
  @TestDataPath("$PROJECT_ROOT")
  public class NotNullAssertions {
    @Test
    public void testAllFilesPresentInNotNullAssertions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/notNullAssertions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/nothingValue")
  @TestDataPath("$PROJECT_ROOT")
  public class NothingValue {
    @Test
    public void testAllFilesPresentInNothingValue() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nothingValue"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("inNestedCall.kt")
    public void testInNestedCall() {
      runTest("compiler/testData/codegen/box/nothingValue/inNestedCall.kt");
    }

    @Test
    @TestMetadata("nothingValueException.kt")
    public void testNothingValueException() {
      runTest("compiler/testData/codegen/box/nothingValue/nothingValueException.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/nullCheckOptimization")
  @TestDataPath("$PROJECT_ROOT")
  public class NullCheckOptimization {
    @Test
    public void testAllFilesPresentInNullCheckOptimization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nullCheckOptimization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("isNullable.kt")
    public void testIsNullable() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/isNullable.kt");
    }

    @Test
    @TestMetadata("kt22410.kt")
    public void testKt22410() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/kt22410.kt");
    }

    @Test
    @TestMetadata("kt49136a.kt")
    public void testKt49136a() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/kt49136a.kt");
    }

    @Test
    @TestMetadata("kt7774.kt")
    public void testKt7774() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/kt7774.kt");
    }

    @Test
    @TestMetadata("primitiveCheckWithSideEffect.kt")
    public void testPrimitiveCheckWithSideEffect() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/primitiveCheckWithSideEffect.kt");
    }

    @Test
    @TestMetadata("trivialInstanceOf.kt")
    public void testTrivialInstanceOf() {
      runTest("compiler/testData/codegen/box/nullCheckOptimization/trivialInstanceOf.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/objectIntrinsics")
  @TestDataPath("$PROJECT_ROOT")
  public class ObjectIntrinsics {
    @Test
    public void testAllFilesPresentInObjectIntrinsics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objectIntrinsics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("objects.kt")
    public void testObjects() {
      runTest("compiler/testData/codegen/box/objectIntrinsics/objects.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/objects")
  @TestDataPath("$PROJECT_ROOT")
  public class Objects {
    @Test
    public void testAllFilesPresentInObjects() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("anonymousObjectAndContrvariantProjection.kt")
    public void testAnonymousObjectAndContrvariantProjection() {
      runTest("compiler/testData/codegen/box/objects/anonymousObjectAndContrvariantProjection.kt");
    }

    @Test
    @TestMetadata("anonymousObjectPropertyInitialization.kt")
    public void testAnonymousObjectPropertyInitialization() {
      runTest("compiler/testData/codegen/box/objects/anonymousObjectPropertyInitialization.kt");
    }

    @Test
    @TestMetadata("anonymousObjectReturnsFromTopLevelFun.kt")
    public void testAnonymousObjectReturnsFromTopLevelFun() {
      runTest("compiler/testData/codegen/box/objects/anonymousObjectReturnsFromTopLevelFun.kt");
    }

    @Test
    @TestMetadata("classCallsProtectedInheritedByCompanion.kt")
    public void testClassCallsProtectedInheritedByCompanion() {
      runTest("compiler/testData/codegen/box/objects/classCallsProtectedInheritedByCompanion.kt");
    }

    @Test
    @TestMetadata("classCompanion.kt")
    public void testClassCompanion() {
      runTest("compiler/testData/codegen/box/objects/classCompanion.kt");
    }

    @Test
    @TestMetadata("compoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject.kt")
    public void testCompoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject.kt");
    }

    @Test
    @TestMetadata("compoundAssignmentToArrayAccessToPropertyImportedFromObject.kt")
    public void testCompoundAssignmentToArrayAccessToPropertyImportedFromObject() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToArrayAccessToPropertyImportedFromObject.kt");
    }

    @Test
    @TestMetadata("compoundAssignmentToExtensionPropertyImportedFromObject.kt")
    public void testCompoundAssignmentToExtensionPropertyImportedFromObject() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToExtensionPropertyImportedFromObject.kt");
    }

    @Test
    @TestMetadata("compoundAssignmentToObjectFromCall.kt")
    public void testCompoundAssignmentToObjectFromCall() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToObjectFromCall.kt");
    }

    @Test
    @TestMetadata("compoundAssignmentToPropertyImportedFromObject.kt")
    public void testCompoundAssignmentToPropertyImportedFromObject() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToPropertyImportedFromObject.kt");
    }

    @Test
    @TestMetadata("compoundAssignmentToPropertyWithQualifier.kt")
    public void testCompoundAssignmentToPropertyWithQualifier() {
      runTest("compiler/testData/codegen/box/objects/compoundAssignmentToPropertyWithQualifier.kt");
    }

    @Test
    @TestMetadata("flist.kt")
    public void testFlist() {
      runTest("compiler/testData/codegen/box/objects/flist.kt");
    }

    @Test
    @TestMetadata("initializationOrder.kt")
    public void testInitializationOrder() {
      runTest("compiler/testData/codegen/box/objects/initializationOrder.kt");
    }

    @Test
    @TestMetadata("initializationOrderConsts.kt")
    public void testInitializationOrderConsts() {
      runTest("compiler/testData/codegen/box/objects/initializationOrderConsts.kt");
    }

    @Test
    @TestMetadata("initializerBlockResetToDefault.kt")
    public void testInitializerBlockResetToDefault() {
      runTest("compiler/testData/codegen/box/objects/initializerBlockResetToDefault.kt");
    }

    @Test
    @TestMetadata("interfaceCompanion.kt")
    public void testInterfaceCompanion() {
      runTest("compiler/testData/codegen/box/objects/interfaceCompanion.kt");
    }

    @Test
    @TestMetadata("interfaceCompanionObjectReference.kt")
    public void testInterfaceCompanionObjectReference() {
      runTest("compiler/testData/codegen/box/objects/interfaceCompanionObjectReference.kt");
    }

    @Test
    @TestMetadata("kt1047a.kt")
    public void testKt1047a() {
      runTest("compiler/testData/codegen/box/objects/kt1047a.kt");
    }

    @Test
    @TestMetadata("kt11117.kt")
    public void testKt11117() {
      runTest("compiler/testData/codegen/box/objects/kt11117.kt");
    }

    @Test
    @TestMetadata("kt1186.kt")
    public void testKt1186() {
      runTest("compiler/testData/codegen/box/objects/kt1186.kt");
    }

    @Test
    @TestMetadata("kt1600.kt")
    public void testKt1600() {
      runTest("compiler/testData/codegen/box/objects/kt1600.kt");
    }

    @Test
    @TestMetadata("kt18982.kt")
    public void testKt18982() {
      runTest("compiler/testData/codegen/box/objects/kt18982.kt");
    }

    @Test
    @TestMetadata("kt2398.kt")
    public void testKt2398() {
      runTest("compiler/testData/codegen/box/objects/kt2398.kt");
    }

    @Test
    @TestMetadata("kt2663.kt")
    public void testKt2663() {
      runTest("compiler/testData/codegen/box/objects/kt2663.kt");
    }

    @Test
    @TestMetadata("kt2663_3.kt")
    public void testKt2663_3() {
      runTest("compiler/testData/codegen/box/objects/kt2663_3.kt");
    }

    @Test
    @TestMetadata("kt2675.kt")
    public void testKt2675() {
      runTest("compiler/testData/codegen/box/objects/kt2675.kt");
    }

    @Test
    @TestMetadata("kt2719.kt")
    public void testKt2719() {
      runTest("compiler/testData/codegen/box/objects/kt2719.kt");
    }

    @Test
    @TestMetadata("kt2822.kt")
    public void testKt2822() {
      runTest("compiler/testData/codegen/box/objects/kt2822.kt");
    }

    @Test
    @TestMetadata("kt32351.kt")
    public void testKt32351() {
      runTest("compiler/testData/codegen/box/objects/kt32351.kt");
    }

    @Test
    @TestMetadata("kt32749.kt")
    public void testKt32749() {
      runTest("compiler/testData/codegen/box/objects/kt32749.kt");
    }

    @Test
    @TestMetadata("kt3684.kt")
    public void testKt3684() {
      runTest("compiler/testData/codegen/box/objects/kt3684.kt");
    }

    @Test
    @TestMetadata("kt4086.kt")
    public void testKt4086() {
      runTest("compiler/testData/codegen/box/objects/kt4086.kt");
    }

    @Test
    @TestMetadata("kt45170.kt")
    public void testKt45170() {
      runTest("compiler/testData/codegen/box/objects/kt45170.kt");
    }

    @Test
    @TestMetadata("kt46136.kt")
    public void testKt46136() {
      runTest("compiler/testData/codegen/box/objects/kt46136.kt");
    }

    @Test
    @TestMetadata("kt52540.kt")
    public void testKt52540() {
      runTest("compiler/testData/codegen/box/objects/kt52540.kt");
    }

    @Test
    @TestMetadata("kt535.kt")
    public void testKt535() {
      runTest("compiler/testData/codegen/box/objects/kt535.kt");
    }

    @Test
    @TestMetadata("kt694.kt")
    public void testKt694() {
      runTest("compiler/testData/codegen/box/objects/kt694.kt");
    }

    @Test
    @TestMetadata("localFunctionInObjectInitializer_kt4516.kt")
    public void testLocalFunctionInObjectInitializer_kt4516() {
      runTest("compiler/testData/codegen/box/objects/localFunctionInObjectInitializer_kt4516.kt");
    }

    @Test
    @TestMetadata("methodOnObject.kt")
    public void testMethodOnObject() {
      runTest("compiler/testData/codegen/box/objects/methodOnObject.kt");
    }

    @Test
    @TestMetadata("nestedDerivedClassCallsProtectedFromCompanion.kt")
    public void testNestedDerivedClassCallsProtectedFromCompanion() {
      runTest("compiler/testData/codegen/box/objects/nestedDerivedClassCallsProtectedFromCompanion.kt");
    }

    @Test
    @TestMetadata("nestedObjectWithSuperclass.kt")
    public void testNestedObjectWithSuperclass() {
      runTest("compiler/testData/codegen/box/objects/nestedObjectWithSuperclass.kt");
    }

    @Test
    @TestMetadata("object.kt")
    public void testObject() {
      runTest("compiler/testData/codegen/box/objects/object.kt");
    }

    @Test
    @TestMetadata("objectExtendsInnerAndReferencesOuterMember.kt")
    public void testObjectExtendsInnerAndReferencesOuterMember() {
      runTest("compiler/testData/codegen/box/objects/objectExtendsInnerAndReferencesOuterMember.kt");
    }

    @Test
    @TestMetadata("objectInLocalAnonymousObject.kt")
    public void testObjectInLocalAnonymousObject() {
      runTest("compiler/testData/codegen/box/objects/objectInLocalAnonymousObject.kt");
    }

    @Test
    @TestMetadata("objectInitialization_kt5523.kt")
    public void testObjectInitialization_kt5523() {
      runTest("compiler/testData/codegen/box/objects/objectInitialization_kt5523.kt");
    }

    @Test
    @TestMetadata("objectLiteral.kt")
    public void testObjectLiteral() {
      runTest("compiler/testData/codegen/box/objects/objectLiteral.kt");
    }

    @Test
    @TestMetadata("objectLiteralInClass.kt")
    public void testObjectLiteralInClass() {
      runTest("compiler/testData/codegen/box/objects/objectLiteralInClass.kt");
    }

    @Test
    @TestMetadata("objectLiteralInClosure.kt")
    public void testObjectLiteralInClosure() {
      runTest("compiler/testData/codegen/box/objects/objectLiteralInClosure.kt");
    }

    @Test
    @TestMetadata("objectVsClassInitialization_kt5291.kt")
    public void testObjectVsClassInitialization_kt5291() {
      runTest("compiler/testData/codegen/box/objects/objectVsClassInitialization_kt5291.kt");
    }

    @Test
    @TestMetadata("objectWithSuperclass.kt")
    public void testObjectWithSuperclass() {
      runTest("compiler/testData/codegen/box/objects/objectWithSuperclass.kt");
    }

    @Test
    @TestMetadata("objectWithSuperclassAndTrait.kt")
    public void testObjectWithSuperclassAndTrait() {
      runTest("compiler/testData/codegen/box/objects/objectWithSuperclassAndTrait.kt");
    }

    @Test
    @TestMetadata("privateExtensionFromInitializer_kt4543.kt")
    public void testPrivateExtensionFromInitializer_kt4543() {
      runTest("compiler/testData/codegen/box/objects/privateExtensionFromInitializer_kt4543.kt");
    }

    @Test
    @TestMetadata("privateFunctionFromClosureInInitializer_kt5582.kt")
    public void testPrivateFunctionFromClosureInInitializer_kt5582() {
      runTest("compiler/testData/codegen/box/objects/privateFunctionFromClosureInInitializer_kt5582.kt");
    }

    @Test
    @TestMetadata("receiverInConstructor.kt")
    public void testReceiverInConstructor() {
      runTest("compiler/testData/codegen/box/objects/receiverInConstructor.kt");
    }

    @Test
    @TestMetadata("safeAccess.kt")
    public void testSafeAccess() {
      runTest("compiler/testData/codegen/box/objects/safeAccess.kt");
    }

    @Test
    @TestMetadata("selfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall.kt")
    public void testSelfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("selfReferenceToCompanionObjectInInlineLambdaInConstructorBody.kt")
    public void testSelfReferenceToCompanionObjectInInlineLambdaInConstructorBody() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInInlineLambdaInConstructorBody.kt");
    }

    @Test
    @TestMetadata("selfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("selfReferenceToCompanionObjectInLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToCompanionObjectInLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInLambdaInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("selfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall.kt")
    public void testSelfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("selfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody.kt")
    public void testSelfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody.kt");
    }

    @Test
    @TestMetadata("selfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("selfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("selfReferenceToObjectInAnonymousObjectInSuperConstructorCall.kt")
    public void testSelfReferenceToObjectInAnonymousObjectInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInAnonymousObjectInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("selfReferenceToObjectInInlineLambdaInConstructorBody.kt")
    public void testSelfReferenceToObjectInInlineLambdaInConstructorBody() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInInlineLambdaInConstructorBody.kt");
    }

    @Test
    @TestMetadata("selfReferenceToObjectInInlineLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToObjectInInlineLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInInlineLambdaInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("selfReferenceToObjectInLambdaInSuperConstructorCall.kt")
    public void testSelfReferenceToObjectInLambdaInSuperConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInLambdaInSuperConstructorCall.kt");
    }

    @Test
    @TestMetadata("simpleObject.kt")
    public void testSimpleObject() {
      runTest("compiler/testData/codegen/box/objects/simpleObject.kt");
    }

    @Test
    @TestMetadata("substitutionFunctionFromSuper.kt")
    public void testSubstitutionFunctionFromSuper() {
      runTest("compiler/testData/codegen/box/objects/substitutionFunctionFromSuper.kt");
    }

    @Test
    @TestMetadata("thisInConstructor.kt")
    public void testThisInConstructor() {
      runTest("compiler/testData/codegen/box/objects/thisInConstructor.kt");
    }

    @Test
    @TestMetadata("thisRefToObjectInNestedClassConstructorCall.kt")
    public void testThisRefToObjectInNestedClassConstructorCall() {
      runTest("compiler/testData/codegen/box/objects/thisRefToObjectInNestedClassConstructorCall.kt");
    }

    @Test
    @TestMetadata("useAnonymousObjectAsIterator.kt")
    public void testUseAnonymousObjectAsIterator() {
      runTest("compiler/testData/codegen/box/objects/useAnonymousObjectAsIterator.kt");
    }

    @Test
    @TestMetadata("useAnonymousObjectFunction.kt")
    public void testUseAnonymousObjectFunction() {
      runTest("compiler/testData/codegen/box/objects/useAnonymousObjectFunction.kt");
    }

    @Test
    @TestMetadata("useImportedMember.kt")
    public void testUseImportedMember() {
      runTest("compiler/testData/codegen/box/objects/useImportedMember.kt");
    }

    @Test
    @TestMetadata("useImportedMemberFromCompanion.kt")
    public void testUseImportedMemberFromCompanion() {
      runTest("compiler/testData/codegen/box/objects/useImportedMemberFromCompanion.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess")
    @TestDataPath("$PROJECT_ROOT")
    public class CompanionObjectAccess {
      @Test
      public void testAllFilesPresentInCompanionObjectAccess() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt27117.kt")
      public void testKt27117() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117.kt");
      }

      @Test
      @TestMetadata("kt27117_lv12.kt")
      public void testKt27117_lv12() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117_lv12.kt");
      }

      @Test
      @TestMetadata("kt27117_lv13.kt")
      public void testKt27117_lv13() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117_lv13.kt");
      }

      @Test
      @TestMetadata("kt27121.kt")
      public void testKt27121() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121.kt");
      }

      @Test
      @TestMetadata("kt27121_lv12.kt")
      public void testKt27121_lv12() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121_lv12.kt");
      }

      @Test
      @TestMetadata("kt27121_lv13.kt")
      public void testKt27121_lv13() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121_lv13.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectAccessedFromAnonymousObjectInNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromAnonymousObjectInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromAnonymousObjectInNestedClass.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectAccessedFromInitBlock.kt")
      public void testPrivateCompanionObjectAccessedFromInitBlock() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInitBlock.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectAccessedFromInitBlockOfNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromInitBlockOfNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInitBlockOfNestedClass.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectAccessedFromInlineLambdaInNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromInlineLambdaInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInlineLambdaInNestedClass.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectAccessedFromLambdaInNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromLambdaInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromLambdaInNestedClass.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectAccessedFromMethodInlinedInNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromMethodInlinedInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromMethodInlinedInNestedClass.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectAccessedFromNestedClass.kt")
      public void testPrivateCompanionObjectAccessedFromNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromNestedClass.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectAccessedFromNestedClassSeveralTimes.kt")
      public void testPrivateCompanionObjectAccessedFromNestedClassSeveralTimes() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromNestedClassSeveralTimes.kt");
      }

      @Test
      @TestMetadata("privateCompanionObjectUsedInNestedClass.kt")
      public void testPrivateCompanionObjectUsedInNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectUsedInNestedClass.kt");
      }

      @Test
      @TestMetadata("protectedCompanionObjectAccessedFromNestedClass.kt")
      public void testProtectedCompanionObjectAccessedFromNestedClass() {
        runTest("compiler/testData/codegen/box/objects/companionObjectAccess/protectedCompanionObjectAccessedFromNestedClass.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors")
      @TestDataPath("$PROJECT_ROOT")
      public class MultipleCompanionsWithAccessors {
        @Test
        @TestMetadata("accessFromInlineLambda.kt")
        public void testAccessFromInlineLambda() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/accessFromInlineLambda.kt");
        }

        @Test
        public void testAllFilesPresentInMultipleCompanionsWithAccessors() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("anonymousObjectInPropertyInitializer.kt")
        public void testAnonymousObjectInPropertyInitializer() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/anonymousObjectInPropertyInitializer.kt");
        }

        @Test
        @TestMetadata("fromAnonymousObjectInNestedClass.kt")
        public void testFromAnonymousObjectInNestedClass() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromAnonymousObjectInNestedClass.kt");
        }

        @Test
        @TestMetadata("fromInitBlock.kt")
        public void testFromInitBlock() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInitBlock.kt");
        }

        @Test
        @TestMetadata("fromInitBlockOfNestedClass.kt")
        public void testFromInitBlockOfNestedClass() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInitBlockOfNestedClass.kt");
        }

        @Test
        @TestMetadata("fromInlineLambdaInNestedClass.kt")
        public void testFromInlineLambdaInNestedClass() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInlineLambdaInNestedClass.kt");
        }

        @Test
        @TestMetadata("inheritedProtectedCompanionAndOwnPrivateCompanion.kt")
        public void testInheritedProtectedCompanionAndOwnPrivateCompanion() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/inheritedProtectedCompanionAndOwnPrivateCompanion.kt");
        }

        @Test
        @TestMetadata("inheritedProtectedCompanionsReferencedByName.kt")
        public void testInheritedProtectedCompanionsReferencedByName() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/inheritedProtectedCompanionsReferencedByName.kt");
        }

        @Test
        @TestMetadata("lambdaInPropertyInitializer.kt")
        public void testLambdaInPropertyInitializer() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/lambdaInPropertyInitializer.kt");
        }

        @Test
        @TestMetadata("twoInheritedProtectedCompanions.kt")
        public void testTwoInheritedProtectedCompanions() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/twoInheritedProtectedCompanions.kt");
        }

        @Test
        @TestMetadata("withCompanionObjectBase.kt")
        public void testWithCompanionObjectBase() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/withCompanionObjectBase.kt");
        }

        @Test
        @TestMetadata("withMultipleNestedCompanionObjectBases.kt")
        public void testWithMultipleNestedCompanionObjectBases() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/withMultipleNestedCompanionObjectBases.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion")
      @TestDataPath("$PROJECT_ROOT")
      public class PrimitiveCompanion {
        @Test
        public void testAllFilesPresentInPrimitiveCompanion() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("byteCompanionObject.kt")
        public void testByteCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/byteCompanionObject.kt");
        }

        @Test
        @TestMetadata("charCompanionObject.kt")
        public void testCharCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/charCompanionObject.kt");
        }

        @Test
        @TestMetadata("doubleCompanionObject.kt")
        public void testDoubleCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/doubleCompanionObject.kt");
        }

        @Test
        @TestMetadata("floatCompanionObject.kt")
        public void testFloatCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/floatCompanionObject.kt");
        }

        @Test
        @TestMetadata("intCompanionObject.kt")
        public void testIntCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/intCompanionObject.kt");
        }

        @Test
        @TestMetadata("longCompanionObject.kt")
        public void testLongCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/longCompanionObject.kt");
        }

        @Test
        @TestMetadata("shortCompanionObject.kt")
        public void testShortCompanionObject() {
          runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/shortCompanionObject.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/operatorConventions")
  @TestDataPath("$PROJECT_ROOT")
  public class OperatorConventions {
    @Test
    public void testAllFilesPresentInOperatorConventions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/operatorConventions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("annotatedAssignment.kt")
    public void testAnnotatedAssignment() {
      runTest("compiler/testData/codegen/box/operatorConventions/annotatedAssignment.kt");
    }

    @Test
    @TestMetadata("assignToDotQualifiedWithSideEffect.kt")
    public void testAssignToDotQualifiedWithSideEffect() {
      runTest("compiler/testData/codegen/box/operatorConventions/assignToDotQualifiedWithSideEffect.kt");
    }

    @Test
    @TestMetadata("assignmentOperations.kt")
    public void testAssignmentOperations() {
      runTest("compiler/testData/codegen/box/operatorConventions/assignmentOperations.kt");
    }

    @Test
    @TestMetadata("augmentedAssignmentInInitializer.kt")
    public void testAugmentedAssignmentInInitializer() {
      runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssignmentInInitializer.kt");
    }

    @Test
    @TestMetadata("augmentedAssignmentWithArrayLHS.kt")
    public void testAugmentedAssignmentWithArrayLHS() {
      runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssignmentWithArrayLHS.kt");
    }

    @Test
    @TestMetadata("genericArrayAccessCall.kt")
    public void testGenericArrayAccessCall() {
      runTest("compiler/testData/codegen/box/operatorConventions/genericArrayAccessCall.kt");
    }

    @Test
    @TestMetadata("incDecOnObject.kt")
    public void testIncDecOnObject() {
      runTest("compiler/testData/codegen/box/operatorConventions/incDecOnObject.kt");
    }

    @Test
    @TestMetadata("infixFunctionOverBuiltinMember.kt")
    public void testInfixFunctionOverBuiltinMember() {
      runTest("compiler/testData/codegen/box/operatorConventions/infixFunctionOverBuiltinMember.kt");
    }

    @Test
    @TestMetadata("kt14201.kt")
    public void testKt14201() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt14201.kt");
    }

    @Test
    @TestMetadata("kt14201_2.kt")
    public void testKt14201_2() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt14201_2.kt");
    }

    @Test
    @TestMetadata("kt14227.kt")
    public void testKt14227() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt14227.kt");
    }

    @Test
    @TestMetadata("kt20387.kt")
    public void testKt20387() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt20387.kt");
    }

    @Test
    @TestMetadata("kt39880.kt")
    public void testKt39880() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt39880.kt");
    }

    @Test
    @TestMetadata("kt4152.kt")
    public void testKt4152() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt4152.kt");
    }

    @Test
    @TestMetadata("kt42722.kt")
    public void testKt42722() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt42722.kt");
    }

    @Test
    @TestMetadata("kt44647.kt")
    public void testKt44647() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt44647.kt");
    }

    @Test
    @TestMetadata("kt45022.kt")
    public void testKt45022() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt45022.kt");
    }

    @Test
    @TestMetadata("kt4987.kt")
    public void testKt4987() {
      runTest("compiler/testData/codegen/box/operatorConventions/kt4987.kt");
    }

    @Test
    @TestMetadata("nestedMaps.kt")
    public void testNestedMaps() {
      runTest("compiler/testData/codegen/box/operatorConventions/nestedMaps.kt");
    }

    @Test
    @TestMetadata("operatorSetLambda.kt")
    public void testOperatorSetLambda() {
      runTest("compiler/testData/codegen/box/operatorConventions/operatorSetLambda.kt");
    }

    @Test
    @TestMetadata("overloadedSet.kt")
    public void testOverloadedSet() {
      runTest("compiler/testData/codegen/box/operatorConventions/overloadedSet.kt");
    }

    @Test
    @TestMetadata("plusAssignWithComplexRHS.kt")
    public void testPlusAssignWithComplexRHS() {
      runTest("compiler/testData/codegen/box/operatorConventions/plusAssignWithComplexRHS.kt");
    }

    @Test
    @TestMetadata("plusExplicit.kt")
    public void testPlusExplicit() {
      runTest("compiler/testData/codegen/box/operatorConventions/plusExplicit.kt");
    }

    @Test
    @TestMetadata("reassignmentLhsCaching.kt")
    public void testReassignmentLhsCaching() {
      runTest("compiler/testData/codegen/box/operatorConventions/reassignmentLhsCaching.kt");
    }

    @Test
    @TestMetadata("remAssignmentOperation.kt")
    public void testRemAssignmentOperation() {
      runTest("compiler/testData/codegen/box/operatorConventions/remAssignmentOperation.kt");
    }

    @Test
    @TestMetadata("remOverModOperation.kt")
    public void testRemOverModOperation() {
      runTest("compiler/testData/codegen/box/operatorConventions/remOverModOperation.kt");
    }

    @Test
    @TestMetadata("suspendOperators.kt")
    public void testSuspendOperators() {
      runTest("compiler/testData/codegen/box/operatorConventions/suspendOperators.kt");
    }

    @Test
    @TestMetadata("untilOperator.kt")
    public void testUntilOperator() {
      runTest("compiler/testData/codegen/box/operatorConventions/untilOperator.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/operatorConventions/compareTo")
    @TestDataPath("$PROJECT_ROOT")
    public class CompareTo {
      @Test
      public void testAllFilesPresentInCompareTo() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/operatorConventions/compareTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("boolean.kt")
      public void testBoolean() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/boolean.kt");
      }

      @Test
      @TestMetadata("comparable.kt")
      public void testComparable() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/comparable.kt");
      }

      @Test
      @TestMetadata("customCompareTo.kt")
      public void testCustomCompareTo() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/customCompareTo.kt");
      }

      @Test
      @TestMetadata("doubleInt.kt")
      public void testDoubleInt() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleInt.kt");
      }

      @Test
      @TestMetadata("doubleLong.kt")
      public void testDoubleLong() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleLong.kt");
      }

      @Test
      @TestMetadata("extensionArray.kt")
      public void testExtensionArray() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionArray.kt");
      }

      @Test
      @TestMetadata("extensionObject.kt")
      public void testExtensionObject() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionObject.kt");
      }

      @Test
      @TestMetadata("intDouble.kt")
      public void testIntDouble() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/intDouble.kt");
      }

      @Test
      @TestMetadata("intLong.kt")
      public void testIntLong() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/intLong.kt");
      }

      @Test
      @TestMetadata("longDouble.kt")
      public void testLongDouble() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/longDouble.kt");
      }

      @Test
      @TestMetadata("longInt.kt")
      public void testLongInt() {
        runTest("compiler/testData/codegen/box/operatorConventions/compareTo/longInt.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/optimizations")
  @TestDataPath("$PROJECT_ROOT")
  public class Optimizations {
    @Test
    public void testAllFilesPresentInOptimizations() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/optimizations"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("kt20844.kt")
    public void testKt20844() {
      runTest("compiler/testData/codegen/box/optimizations/kt20844.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/package")
  @TestDataPath("$PROJECT_ROOT")
  public class Package {
    @Test
    public void testAllFilesPresentInPackage() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/package"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("boxPrimitiveTypeInClinit.kt")
    public void testBoxPrimitiveTypeInClinit() {
      runTest("compiler/testData/codegen/box/package/boxPrimitiveTypeInClinit.kt");
    }

    @Test
    @TestMetadata("checkCast.kt")
    public void testCheckCast() {
      runTest("compiler/testData/codegen/box/package/checkCast.kt");
    }

    @Test
    @TestMetadata("incrementProperty.kt")
    public void testIncrementProperty() {
      runTest("compiler/testData/codegen/box/package/incrementProperty.kt");
    }

    @Test
    @TestMetadata("initializationOrder.kt")
    public void testInitializationOrder() {
      runTest("compiler/testData/codegen/box/package/initializationOrder.kt");
    }

    @Test
    @TestMetadata("invokespecial.kt")
    public void testInvokespecial() {
      runTest("compiler/testData/codegen/box/package/invokespecial.kt");
    }

    @Test
    @TestMetadata("kt57353.kt")
    public void testKt57353() {
      runTest("compiler/testData/codegen/box/package/kt57353.kt");
    }

    @Test
    @TestMetadata("nullablePrimitiveNoFieldInitializer.kt")
    public void testNullablePrimitiveNoFieldInitializer() {
      runTest("compiler/testData/codegen/box/package/nullablePrimitiveNoFieldInitializer.kt");
    }

    @Test
    @TestMetadata("packageLocalClassNotImportedWithDefaultImport.kt")
    public void testPackageLocalClassNotImportedWithDefaultImport() {
      runTest("compiler/testData/codegen/box/package/packageLocalClassNotImportedWithDefaultImport.kt");
    }

    @Test
    @TestMetadata("packageQualifiedMethod.kt")
    public void testPackageQualifiedMethod() {
      runTest("compiler/testData/codegen/box/package/packageQualifiedMethod.kt");
    }

    @Test
    @TestMetadata("privateMembersInImportList.kt")
    public void testPrivateMembersInImportList() {
      runTest("compiler/testData/codegen/box/package/privateMembersInImportList.kt");
    }

    @Test
    @TestMetadata("privateTopLevelPropAndVarInInner.kt")
    public void testPrivateTopLevelPropAndVarInInner() {
      runTest("compiler/testData/codegen/box/package/privateTopLevelPropAndVarInInner.kt");
    }

    @Test
    @TestMetadata("referenceWithTheSameNameAsPackage.kt")
    public void testReferenceWithTheSameNameAsPackage() {
      runTest("compiler/testData/codegen/box/package/referenceWithTheSameNameAsPackage.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/parametersMetadata")
  @TestDataPath("$PROJECT_ROOT")
  public class ParametersMetadata {
    @Test
    public void testAllFilesPresentInParametersMetadata() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/parametersMetadata"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/platformTypes")
  @TestDataPath("$PROJECT_ROOT")
  public class PlatformTypes {
    @Test
    public void testAllFilesPresentInPlatformTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/platformTypes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/platformTypes/primitives")
    @TestDataPath("$PROJECT_ROOT")
    public class Primitives {
      @Test
      public void testAllFilesPresentInPrimitives() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/platformTypes/primitives"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("assign.kt")
      public void testAssign() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/assign.kt");
      }

      @Test
      @TestMetadata("compareTo.kt")
      public void testCompareTo() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/compareTo.kt");
      }

      @Test
      @TestMetadata("dec.kt")
      public void testDec() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/dec.kt");
      }

      @Test
      @TestMetadata("div.kt")
      public void testDiv() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/div.kt");
      }

      @Test
      @TestMetadata("equals.kt")
      public void testEquals() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/equals.kt");
      }

      @Test
      @TestMetadata("hashCode.kt")
      public void testHashCode() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/hashCode.kt");
      }

      @Test
      @TestMetadata("inc.kt")
      public void testInc() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/inc.kt");
      }

      @Test
      @TestMetadata("minus.kt")
      public void testMinus() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/minus.kt");
      }

      @Test
      @TestMetadata("mod.kt")
      public void testMod() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/mod.kt");
      }

      @Test
      @TestMetadata("not.kt")
      public void testNot() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/not.kt");
      }

      @Test
      @TestMetadata("notEquals.kt")
      public void testNotEquals() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/notEquals.kt");
      }

      @Test
      @TestMetadata("plus.kt")
      public void testPlus() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/plus.kt");
      }

      @Test
      @TestMetadata("plusAssign.kt")
      public void testPlusAssign() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/plusAssign.kt");
      }

      @Test
      @TestMetadata("rangeTo.kt")
      public void testRangeTo() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/rangeTo.kt");
      }

      @Test
      @TestMetadata("times.kt")
      public void testTimes() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/times.kt");
      }

      @Test
      @TestMetadata("toShort.kt")
      public void testToShort() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/toShort.kt");
      }

      @Test
      @TestMetadata("toString.kt")
      public void testToString() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/toString.kt");
      }

      @Test
      @TestMetadata("unaryMinus.kt")
      public void testUnaryMinus() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/unaryMinus.kt");
      }

      @Test
      @TestMetadata("unaryPlus.kt")
      public void testUnaryPlus() {
        runTest("compiler/testData/codegen/box/platformTypes/primitives/unaryPlus.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/polymorphicSignature")
  @TestDataPath("$PROJECT_ROOT")
  public class PolymorphicSignature {
    @Test
    public void testAllFilesPresentInPolymorphicSignature() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/polymorphicSignature"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/primitiveTypes")
  @TestDataPath("$PROJECT_ROOT")
  public class PrimitiveTypes {
    @Test
    public void testAllFilesPresentInPrimitiveTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("booleanHashCode.kt")
    public void testBooleanHashCode() {
      runTest("compiler/testData/codegen/box/primitiveTypes/booleanHashCode.kt");
    }

    @Test
    @TestMetadata("comparisonWithNullCallsFun.kt")
    public void testComparisonWithNullCallsFun() {
      runTest("compiler/testData/codegen/box/primitiveTypes/comparisonWithNullCallsFun.kt");
    }

    @Test
    @TestMetadata("conversions.kt")
    public void testConversions() {
      runTest("compiler/testData/codegen/box/primitiveTypes/conversions.kt");
    }

    @Test
    @TestMetadata("ea35963.kt")
    public void testEa35963() {
      runTest("compiler/testData/codegen/box/primitiveTypes/ea35963.kt");
    }

    @Test
    @TestMetadata("equalsHashCodeToString.kt")
    public void testEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/primitiveTypes/equalsHashCodeToString.kt");
    }

    @Test
    @TestMetadata("incrementByteCharShort.kt")
    public void testIncrementByteCharShort() {
      runTest("compiler/testData/codegen/box/primitiveTypes/incrementByteCharShort.kt");
    }

    @Test
    @TestMetadata("intLiteralIsNotNull.kt")
    public void testIntLiteralIsNotNull() {
      runTest("compiler/testData/codegen/box/primitiveTypes/intLiteralIsNotNull.kt");
    }

    @Test
    @TestMetadata("kt1054.kt")
    public void testKt1054() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1054.kt");
    }

    @Test
    @TestMetadata("kt1055.kt")
    public void testKt1055() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1055.kt");
    }

    @Test
    @TestMetadata("kt1093.kt")
    public void testKt1093() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1093.kt");
    }

    @Test
    @TestMetadata("kt13023.kt")
    public void testKt13023() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt13023.kt");
    }

    @Test
    @TestMetadata("kt14868.kt")
    public void testKt14868() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt14868.kt");
    }

    @Test
    @TestMetadata("kt1508.kt")
    public void testKt1508() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1508.kt");
    }

    @Test
    @TestMetadata("kt1634.kt")
    public void testKt1634() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt1634.kt");
    }

    @Test
    @TestMetadata("kt16732.kt")
    public void testKt16732() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt16732.kt");
    }

    @Test
    @TestMetadata("kt2251.kt")
    public void testKt2251() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2251.kt");
    }

    @Test
    @TestMetadata("kt2269.kt")
    public void testKt2269() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2269.kt");
    }

    @Test
    @TestMetadata("kt2269NotOptimizable.kt")
    public void testKt2269NotOptimizable() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2269NotOptimizable.kt");
    }

    @Test
    @TestMetadata("kt2275.kt")
    public void testKt2275() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2275.kt");
    }

    @Test
    @TestMetadata("kt239.kt")
    public void testKt239() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt239.kt");
    }

    @Test
    @TestMetadata("kt242.kt")
    public void testKt242() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt242.kt");
    }

    @Test
    @TestMetadata("kt248.kt")
    public void testKt248() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt248.kt");
    }

    @Test
    @TestMetadata("kt2768.kt")
    public void testKt2768() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2768.kt");
    }

    @Test
    @TestMetadata("kt2794.kt")
    public void testKt2794() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt2794.kt");
    }

    @Test
    @TestMetadata("kt3078.kt")
    public void testKt3078() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt3078.kt");
    }

    @Test
    @TestMetadata("kt3517.kt")
    public void testKt3517() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt3517.kt");
    }

    @Test
    @TestMetadata("kt3576.kt")
    public void testKt3576() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt3576.kt");
    }

    @Test
    @TestMetadata("kt3613.kt")
    public void testKt3613() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt3613.kt");
    }

    @Test
    @TestMetadata("kt36952_identityEqualsWithBooleanInLocalFunction.kt")
    public void testKt36952_identityEqualsWithBooleanInLocalFunction() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt36952_identityEqualsWithBooleanInLocalFunction.kt");
    }

    @Test
    @TestMetadata("kt37505.kt")
    public void testKt37505() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt37505.kt");
    }

    @Test
    @TestMetadata("kt4097.kt")
    public void testKt4097() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt4097.kt");
    }

    @Test
    @TestMetadata("kt4098.kt")
    public void testKt4098() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt4098.kt");
    }

    @Test
    @TestMetadata("kt4210.kt")
    public void testKt4210() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt4210.kt");
    }

    @Test
    @TestMetadata("kt4251.kt")
    public void testKt4251() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt4251.kt");
    }

    @Test
    @TestMetadata("kt446.kt")
    public void testKt446() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt446.kt");
    }

    @Test
    @TestMetadata("kt46864_double.kt")
    public void testKt46864_double() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt46864_double.kt");
    }

    @Test
    @TestMetadata("kt46864_long.kt")
    public void testKt46864_long() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt46864_long.kt");
    }

    @Test
    @TestMetadata("kt518.kt")
    public void testKt518() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt518.kt");
    }

    @Test
    @TestMetadata("kt6590_identityEquals.kt")
    public void testKt6590_identityEquals() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt6590_identityEquals.kt");
    }

    @Test
    @TestMetadata("kt665.kt")
    public void testKt665() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt665.kt");
    }

    @Test
    @TestMetadata("kt711.kt")
    public void testKt711() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt711.kt");
    }

    @Test
    @TestMetadata("kt737.kt")
    public void testKt737() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt737.kt");
    }

    @Test
    @TestMetadata("kt752.kt")
    public void testKt752() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt752.kt");
    }

    @Test
    @TestMetadata("kt753.kt")
    public void testKt753() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt753.kt");
    }

    @Test
    @TestMetadata("kt756.kt")
    public void testKt756() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt756.kt");
    }

    @Test
    @TestMetadata("kt757.kt")
    public void testKt757() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt757.kt");
    }

    @Test
    @TestMetadata("kt828.kt")
    public void testKt828() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt828.kt");
    }

    @Test
    @TestMetadata("kt877.kt")
    public void testKt877() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt877.kt");
    }

    @Test
    @TestMetadata("kt882.kt")
    public void testKt882() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt882.kt");
    }

    @Test
    @TestMetadata("kt887.kt")
    public void testKt887() {
      runTest("compiler/testData/codegen/box/primitiveTypes/kt887.kt");
    }

    @Test
    @TestMetadata("nullAsNullableIntIsNull.kt")
    public void testNullAsNullableIntIsNull() {
      runTest("compiler/testData/codegen/box/primitiveTypes/nullAsNullableIntIsNull.kt");
    }

    @Test
    @TestMetadata("nullableAsIndex.kt")
    public void testNullableAsIndex() {
      runTest("compiler/testData/codegen/box/primitiveTypes/nullableAsIndex.kt");
    }

    @Test
    @TestMetadata("nullableCharBoolean.kt")
    public void testNullableCharBoolean() {
      runTest("compiler/testData/codegen/box/primitiveTypes/nullableCharBoolean.kt");
    }

    @Test
    @TestMetadata("numberEqualsHashCodeToString.kt")
    public void testNumberEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/primitiveTypes/numberEqualsHashCodeToString.kt");
    }

    @Test
    @TestMetadata("rangeTo.kt")
    public void testRangeTo() {
      runTest("compiler/testData/codegen/box/primitiveTypes/rangeTo.kt");
    }

    @Test
    @TestMetadata("reassignDestructured.kt")
    public void testReassignDestructured() {
      runTest("compiler/testData/codegen/box/primitiveTypes/reassignDestructured.kt");
    }

    @Test
    @TestMetadata("stringEqualsHashCodeToString.kt")
    public void testStringEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/primitiveTypes/stringEqualsHashCodeToString.kt");
    }

    @Test
    @TestMetadata("substituteIntForGeneric.kt")
    public void testSubstituteIntForGeneric() {
      runTest("compiler/testData/codegen/box/primitiveTypes/substituteIntForGeneric.kt");
    }

    @Test
    @TestMetadata("unboxComparable.kt")
    public void testUnboxComparable() {
      runTest("compiler/testData/codegen/box/primitiveTypes/unboxComparable.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/primitiveTypes/equalityWithObject")
    @TestDataPath("$PROJECT_ROOT")
    public class EqualityWithObject {
      @Test
      public void testAllFilesPresentInEqualityWithObject() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/equalityWithObject"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("boxedEqPrimitiveEvaluationOrder.kt")
      public void testBoxedEqPrimitiveEvaluationOrder() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/boxedEqPrimitiveEvaluationOrder.kt");
      }

      @Test
      @TestMetadata("boxedLongEqualsLong.kt")
      public void testBoxedLongEqualsLong() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/boxedLongEqualsLong.kt");
      }

      @Test
      @TestMetadata("intEqualsNull.kt")
      public void testIntEqualsNull() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNull.kt");
      }

      @Test
      @TestMetadata("intEqualsNullableInt.kt")
      public void testIntEqualsNullableInt() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNullableInt.kt");
      }

      @Test
      @TestMetadata("intEqualsNullableIntWithSmartCasts.kt")
      public void testIntEqualsNullableIntWithSmartCasts() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNullableIntWithSmartCasts.kt");
      }

      @Test
      @TestMetadata("kt42281.kt")
      public void testKt42281() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/kt42281.kt");
      }

      @Test
      @TestMetadata("objectWithAsymmetricEqualsEqPrimitive.kt")
      public void testObjectWithAsymmetricEqualsEqPrimitive() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/objectWithAsymmetricEqualsEqPrimitive.kt");
      }

      @Test
      @TestMetadata("whenIntAsNullableAny.kt")
      public void testWhenIntAsNullableAny() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/whenIntAsNullableAny.kt");
      }

      @Test
      @TestMetadata("whenNullableBoxed.kt")
      public void testWhenNullableBoxed() {
        runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/whenNullableBoxed.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated")
      @TestDataPath("$PROJECT_ROOT")
      public class Generated {
        @Test
        public void testAllFilesPresentInGenerated() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("boxedEqPrimitiveBoolean.kt")
        public void testBoxedEqPrimitiveBoolean() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveBoolean.kt");
        }

        @Test
        @TestMetadata("boxedEqPrimitiveByte.kt")
        public void testBoxedEqPrimitiveByte() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveByte.kt");
        }

        @Test
        @TestMetadata("boxedEqPrimitiveChar.kt")
        public void testBoxedEqPrimitiveChar() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveChar.kt");
        }

        @Test
        @TestMetadata("boxedEqPrimitiveInt.kt")
        public void testBoxedEqPrimitiveInt() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveInt.kt");
        }

        @Test
        @TestMetadata("boxedEqPrimitiveLong.kt")
        public void testBoxedEqPrimitiveLong() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveLong.kt");
        }

        @Test
        @TestMetadata("boxedEqPrimitiveShort.kt")
        public void testBoxedEqPrimitiveShort() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveShort.kt");
        }

        @Test
        @TestMetadata("primitiveEqBoxedBoolean.kt")
        public void testPrimitiveEqBoxedBoolean() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedBoolean.kt");
        }

        @Test
        @TestMetadata("primitiveEqBoxedByte.kt")
        public void testPrimitiveEqBoxedByte() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedByte.kt");
        }

        @Test
        @TestMetadata("primitiveEqBoxedChar.kt")
        public void testPrimitiveEqBoxedChar() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedChar.kt");
        }

        @Test
        @TestMetadata("primitiveEqBoxedInt.kt")
        public void testPrimitiveEqBoxedInt() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedInt.kt");
        }

        @Test
        @TestMetadata("primitiveEqBoxedLong.kt")
        public void testPrimitiveEqBoxedLong() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedLong.kt");
        }

        @Test
        @TestMetadata("primitiveEqBoxedShort.kt")
        public void testPrimitiveEqBoxedShort() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedShort.kt");
        }

        @Test
        @TestMetadata("primitiveEqObjectBoolean.kt")
        public void testPrimitiveEqObjectBoolean() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectBoolean.kt");
        }

        @Test
        @TestMetadata("primitiveEqObjectByte.kt")
        public void testPrimitiveEqObjectByte() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectByte.kt");
        }

        @Test
        @TestMetadata("primitiveEqObjectChar.kt")
        public void testPrimitiveEqObjectChar() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectChar.kt");
        }

        @Test
        @TestMetadata("primitiveEqObjectInt.kt")
        public void testPrimitiveEqObjectInt() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectInt.kt");
        }

        @Test
        @TestMetadata("primitiveEqObjectLong.kt")
        public void testPrimitiveEqObjectLong() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectLong.kt");
        }

        @Test
        @TestMetadata("primitiveEqObjectShort.kt")
        public void testPrimitiveEqObjectShort() {
          runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectShort.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/primitiveTypes/numberToChar")
    @TestDataPath("$PROJECT_ROOT")
    public class NumberToChar {
      @Test
      @TestMetadata("abstractMethodInSuperinterface.kt")
      public void testAbstractMethodInSuperinterface() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/abstractMethodInSuperinterface.kt");
      }

      @Test
      public void testAllFilesPresentInNumberToChar() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/numberToChar"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("fakeOverride.kt")
      public void testFakeOverride() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/fakeOverride.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/simple.kt");
      }

      @Test
      @TestMetadata("superCallToClass.kt")
      public void testSuperCallToClass() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/superCallToClass.kt");
      }

      @Test
      @TestMetadata("superCallToInterface.kt")
      public void testSuperCallToInterface() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/superCallToInterface.kt");
      }

      @Test
      @TestMetadata("superCallToNumber.kt")
      public void testSuperCallToNumber() {
        runTest("compiler/testData/codegen/box/primitiveTypes/numberToChar/superCallToNumber.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/private")
  @TestDataPath("$PROJECT_ROOT")
  public class Private {
    @Test
    public void testAllFilesPresentInPrivate() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/private"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("arrayConvention.kt")
    public void testArrayConvention() {
      runTest("compiler/testData/codegen/box/private/arrayConvention.kt");
    }

    @Test
    @TestMetadata("kt9855.kt")
    public void testKt9855() {
      runTest("compiler/testData/codegen/box/private/kt9855.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/privateConstructors")
  @TestDataPath("$PROJECT_ROOT")
  public class PrivateConstructors {
    @Test
    public void testAllFilesPresentInPrivateConstructors() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/privateConstructors"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("base.kt")
    public void testBase() {
      runTest("compiler/testData/codegen/box/privateConstructors/base.kt");
    }

    @Test
    @TestMetadata("captured.kt")
    public void testCaptured() {
      runTest("compiler/testData/codegen/box/privateConstructors/captured.kt");
    }

    @Test
    @TestMetadata("companion.kt")
    public void testCompanion() {
      runTest("compiler/testData/codegen/box/privateConstructors/companion.kt");
    }

    @Test
    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/privateConstructors/inline.kt");
    }

    @Test
    @TestMetadata("inner.kt")
    public void testInner() {
      runTest("compiler/testData/codegen/box/privateConstructors/inner.kt");
    }

    @Test
    @TestMetadata("kt4860.kt")
    public void testKt4860() {
      runTest("compiler/testData/codegen/box/privateConstructors/kt4860.kt");
    }

    @Test
    @TestMetadata("secondary.kt")
    public void testSecondary() {
      runTest("compiler/testData/codegen/box/privateConstructors/secondary.kt");
    }

    @Test
    @TestMetadata("withArguments.kt")
    public void testWithArguments() {
      runTest("compiler/testData/codegen/box/privateConstructors/withArguments.kt");
    }

    @Test
    @TestMetadata("withDefault.kt")
    public void testWithDefault() {
      runTest("compiler/testData/codegen/box/privateConstructors/withDefault.kt");
    }

    @Test
    @TestMetadata("withLinkedClasses.kt")
    public void testWithLinkedClasses() {
      runTest("compiler/testData/codegen/box/privateConstructors/withLinkedClasses.kt");
    }

    @Test
    @TestMetadata("withLinkedObjects.kt")
    public void testWithLinkedObjects() {
      runTest("compiler/testData/codegen/box/privateConstructors/withLinkedObjects.kt");
    }

    @Test
    @TestMetadata("withVarargs.kt")
    public void testWithVarargs() {
      runTest("compiler/testData/codegen/box/privateConstructors/withVarargs.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/properties")
  @TestDataPath("$PROJECT_ROOT")
  public class Properties {
    @Test
    @TestMetadata("accessToPrivateProperty.kt")
    public void testAccessToPrivateProperty() {
      runTest("compiler/testData/codegen/box/properties/accessToPrivateProperty.kt");
    }

    @Test
    @TestMetadata("accessToPrivateSetter.kt")
    public void testAccessToPrivateSetter() {
      runTest("compiler/testData/codegen/box/properties/accessToPrivateSetter.kt");
    }

    @Test
    @TestMetadata("accessorForProtectedPropertyWithPrivateSetter.kt")
    public void testAccessorForProtectedPropertyWithPrivateSetter() {
      runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetter.kt");
    }

    @Test
    @TestMetadata("accessorForProtectedPropertyWithPrivateSetterInObjectLiteral.kt")
    public void testAccessorForProtectedPropertyWithPrivateSetterInObjectLiteral() {
      runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterInObjectLiteral.kt");
    }

    @Test
    @TestMetadata("accessorForProtectedPropertyWithPrivateSetterViaSuper.kt")
    public void testAccessorForProtectedPropertyWithPrivateSetterViaSuper() {
      runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterViaSuper.kt");
    }

    @Test
    @TestMetadata("accessorForProtectedPropertyWithPrivateSetterWithIntermediateClass.kt")
    public void testAccessorForProtectedPropertyWithPrivateSetterWithIntermediateClass() {
      runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterWithIntermediateClass.kt");
    }

    @Test
    public void testAllFilesPresentInProperties() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("augmentedAssignmentsAndIncrements.kt")
    public void testAugmentedAssignmentsAndIncrements() {
      runTest("compiler/testData/codegen/box/properties/augmentedAssignmentsAndIncrements.kt");
    }

    @Test
    @TestMetadata("classArtificialFieldInsideNested.kt")
    public void testClassArtificialFieldInsideNested() {
      runTest("compiler/testData/codegen/box/properties/classArtificialFieldInsideNested.kt");
    }

    @Test
    @TestMetadata("classFieldInsideLambda.kt")
    public void testClassFieldInsideLambda() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideLambda.kt");
    }

    @Test
    @TestMetadata("classFieldInsideLocalInSetter.kt")
    public void testClassFieldInsideLocalInSetter() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideLocalInSetter.kt");
    }

    @Test
    @TestMetadata("classFieldInsideNested.kt")
    public void testClassFieldInsideNested() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideNested.kt");
    }

    @Test
    @TestMetadata("classFieldInsideNestedLambda.kt")
    public void testClassFieldInsideNestedLambda() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideNestedLambda.kt");
    }

    @Test
    @TestMetadata("classFieldInsideNestedNestedLambda.kt")
    public void testClassFieldInsideNestedNestedLambda() {
      runTest("compiler/testData/codegen/box/properties/classFieldInsideNestedNestedLambda.kt");
    }

    @Test
    @TestMetadata("classObjectProperties.kt")
    public void testClassObjectProperties() {
      runTest("compiler/testData/codegen/box/properties/classObjectProperties.kt");
    }

    @Test
    @TestMetadata("classPrivateArtificialFieldInsideNested.kt")
    public void testClassPrivateArtificialFieldInsideNested() {
      runTest("compiler/testData/codegen/box/properties/classPrivateArtificialFieldInsideNested.kt");
    }

    @Test
    @TestMetadata("companionFieldInsideLambda.kt")
    public void testCompanionFieldInsideLambda() {
      runTest("compiler/testData/codegen/box/properties/companionFieldInsideLambda.kt");
    }

    @Test
    @TestMetadata("companionPrivateField.kt")
    public void testCompanionPrivateField() {
      runTest("compiler/testData/codegen/box/properties/companionPrivateField.kt");
    }

    @Test
    @TestMetadata("companionPrivateFieldInsideLambda.kt")
    public void testCompanionPrivateFieldInsideLambda() {
      runTest("compiler/testData/codegen/box/properties/companionPrivateFieldInsideLambda.kt");
    }

    @Test
    @TestMetadata("complexPropertyInitializer.kt")
    public void testComplexPropertyInitializer() {
      runTest("compiler/testData/codegen/box/properties/complexPropertyInitializer.kt");
    }

    @Test
    @TestMetadata("field.kt")
    public void testField() {
      runTest("compiler/testData/codegen/box/properties/field.kt");
    }

    @Test
    @TestMetadata("fieldInClass.kt")
    public void testFieldInClass() {
      runTest("compiler/testData/codegen/box/properties/fieldInClass.kt");
    }

    @Test
    @TestMetadata("fieldInsideField.kt")
    public void testFieldInsideField() {
      runTest("compiler/testData/codegen/box/properties/fieldInsideField.kt");
    }

    @Test
    @TestMetadata("fieldInsideLambda.kt")
    public void testFieldInsideLambda() {
      runTest("compiler/testData/codegen/box/properties/fieldInsideLambda.kt");
    }

    @Test
    @TestMetadata("fieldInsideNested.kt")
    public void testFieldInsideNested() {
      runTest("compiler/testData/codegen/box/properties/fieldInsideNested.kt");
    }

    @Test
    @TestMetadata("fieldSimple.kt")
    public void testFieldSimple() {
      runTest("compiler/testData/codegen/box/properties/fieldSimple.kt");
    }

    @Test
    @TestMetadata("generalAccess.kt")
    public void testGeneralAccess() {
      runTest("compiler/testData/codegen/box/properties/generalAccess.kt");
    }

    @Test
    @TestMetadata("genericPropertyMultiModule.kt")
    public void testGenericPropertyMultiModule() {
      runTest("compiler/testData/codegen/box/properties/genericPropertyMultiModule.kt");
    }

    @Test
    @TestMetadata("genericWithSameName.kt")
    public void testGenericWithSameName() {
      runTest("compiler/testData/codegen/box/properties/genericWithSameName.kt");
    }

    @Test
    @TestMetadata("initOrderMultiModule.kt")
    public void testInitOrderMultiModule() {
      runTest("compiler/testData/codegen/box/properties/initOrderMultiModule.kt");
    }

    @Test
    @TestMetadata("initializerOfConstValWithConst.kt")
    public void testInitializerOfConstValWithConst() {
      runTest("compiler/testData/codegen/box/properties/initializerOfConstValWithConst.kt");
    }

    @Test
    @TestMetadata("initializerOfConstValWithConstExpr.kt")
    public void testInitializerOfConstValWithConstExpr() {
      runTest("compiler/testData/codegen/box/properties/initializerOfConstValWithConstExpr.kt");
    }

    @Test
    @TestMetadata("initializerOfValWithConstExpr.kt")
    public void testInitializerOfValWithConstExpr() {
      runTest("compiler/testData/codegen/box/properties/initializerOfValWithConstExpr.kt");
    }

    @Test
    @TestMetadata("initializerOfValWithNonConstExpr.kt")
    public void testInitializerOfValWithNonConstExpr() {
      runTest("compiler/testData/codegen/box/properties/initializerOfValWithNonConstExpr.kt");
    }

    @Test
    @TestMetadata("kt10715.kt")
    public void testKt10715() {
      runTest("compiler/testData/codegen/box/properties/kt10715.kt");
    }

    @Test
    @TestMetadata("kt10729.kt")
    public void testKt10729() {
      runTest("compiler/testData/codegen/box/properties/kt10729.kt");
    }

    @Test
    @TestMetadata("kt1165.kt")
    public void testKt1165() {
      runTest("compiler/testData/codegen/box/properties/kt1165.kt");
    }

    @Test
    @TestMetadata("kt1168.kt")
    public void testKt1168() {
      runTest("compiler/testData/codegen/box/properties/kt1168.kt");
    }

    @Test
    @TestMetadata("kt1170.kt")
    public void testKt1170() {
      runTest("compiler/testData/codegen/box/properties/kt1170.kt");
    }

    @Test
    @TestMetadata("kt1398.kt")
    public void testKt1398() {
      runTest("compiler/testData/codegen/box/properties/kt1398.kt");
    }

    @Test
    @TestMetadata("kt1417.kt")
    public void testKt1417() {
      runTest("compiler/testData/codegen/box/properties/kt1417.kt");
    }

    @Test
    @TestMetadata("kt1714_minimal.kt")
    public void testKt1714_minimal() {
      runTest("compiler/testData/codegen/box/properties/kt1714_minimal.kt");
    }

    @Test
    @TestMetadata("kt1892.kt")
    public void testKt1892() {
      runTest("compiler/testData/codegen/box/properties/kt1892.kt");
    }

    @Test
    @TestMetadata("kt2331.kt")
    public void testKt2331() {
      runTest("compiler/testData/codegen/box/properties/kt2331.kt");
    }

    @Test
    @TestMetadata("kt257.kt")
    public void testKt257() {
      runTest("compiler/testData/codegen/box/properties/kt257.kt");
    }

    @Test
    @TestMetadata("kt2655.kt")
    public void testKt2655() {
      runTest("compiler/testData/codegen/box/properties/kt2655.kt");
    }

    @Test
    @TestMetadata("kt2786.kt")
    public void testKt2786() {
      runTest("compiler/testData/codegen/box/properties/kt2786.kt");
    }

    @Test
    @TestMetadata("kt2892.kt")
    public void testKt2892() {
      runTest("compiler/testData/codegen/box/properties/kt2892.kt");
    }

    @Test
    @TestMetadata("kt3118.kt")
    public void testKt3118() {
      runTest("compiler/testData/codegen/box/properties/kt3118.kt");
    }

    @Test
    @TestMetadata("kt3524.kt")
    public void testKt3524() {
      runTest("compiler/testData/codegen/box/properties/kt3524.kt");
    }

    @Test
    @TestMetadata("kt3551.kt")
    public void testKt3551() {
      runTest("compiler/testData/codegen/box/properties/kt3551.kt");
    }

    @Test
    @TestMetadata("kt3556.kt")
    public void testKt3556() {
      runTest("compiler/testData/codegen/box/properties/kt3556.kt");
    }

    @Test
    @TestMetadata("kt3930.kt")
    public void testKt3930() {
      runTest("compiler/testData/codegen/box/properties/kt3930.kt");
    }

    @Test
    @TestMetadata("kt4140.kt")
    public void testKt4140() {
      runTest("compiler/testData/codegen/box/properties/kt4140.kt");
    }

    @Test
    @TestMetadata("kt4252.kt")
    public void testKt4252() {
      runTest("compiler/testData/codegen/box/properties/kt4252.kt");
    }

    @Test
    @TestMetadata("kt4252_2.kt")
    public void testKt4252_2() {
      runTest("compiler/testData/codegen/box/properties/kt4252_2.kt");
    }

    @Test
    @TestMetadata("kt4340.kt")
    public void testKt4340() {
      runTest("compiler/testData/codegen/box/properties/kt4340.kt");
    }

    @Test
    @TestMetadata("kt4373.kt")
    public void testKt4373() {
      runTest("compiler/testData/codegen/box/properties/kt4373.kt");
    }

    @Test
    @TestMetadata("kt4383.kt")
    public void testKt4383() {
      runTest("compiler/testData/codegen/box/properties/kt4383.kt");
    }

    @Test
    @TestMetadata("kt49203_lateinit.kt")
    public void testKt49203_lateinit() {
      runTest("compiler/testData/codegen/box/properties/kt49203_lateinit.kt");
    }

    @Test
    @TestMetadata("kt49203_var.kt")
    public void testKt49203_var() {
      runTest("compiler/testData/codegen/box/properties/kt49203_var.kt");
    }

    @Test
    @TestMetadata("kt613.kt")
    public void testKt613() {
      runTest("compiler/testData/codegen/box/properties/kt613.kt");
    }

    @Test
    @TestMetadata("kt8928.kt")
    public void testKt8928() {
      runTest("compiler/testData/codegen/box/properties/kt8928.kt");
    }

    @Test
    @TestMetadata("kt9603.kt")
    public void testKt9603() {
      runTest("compiler/testData/codegen/box/properties/kt9603.kt");
    }

    @Test
    @TestMetadata("lazyInitialization.kt")
    public void testLazyInitialization() {
      runTest("compiler/testData/codegen/box/properties/lazyInitialization.kt");
    }

    @Test
    @TestMetadata("lazyInitializationCyclicImports.kt")
    public void testLazyInitializationCyclicImports() {
      runTest("compiler/testData/codegen/box/properties/lazyInitializationCyclicImports.kt");
    }

    @Test
    @TestMetadata("lazyInitializationMultiModule.kt")
    public void testLazyInitializationMultiModule() {
      runTest("compiler/testData/codegen/box/properties/lazyInitializationMultiModule.kt");
    }

    @Test
    @TestMetadata("lazyInitializationOrder.kt")
    public void testLazyInitializationOrder() {
      runTest("compiler/testData/codegen/box/properties/lazyInitializationOrder.kt");
    }

    @Test
    @TestMetadata("lazyInitializationSplitPerModule.kt")
    public void testLazyInitializationSplitPerModule() {
      runTest("compiler/testData/codegen/box/properties/lazyInitializationSplitPerModule.kt");
    }

    @Test
    @TestMetadata("primitiveOverrideDefaultAccessor.kt")
    public void testPrimitiveOverrideDefaultAccessor() {
      runTest("compiler/testData/codegen/box/properties/primitiveOverrideDefaultAccessor.kt");
    }

    @Test
    @TestMetadata("primitiveOverrideDelegateAccessor.kt")
    public void testPrimitiveOverrideDelegateAccessor() {
      runTest("compiler/testData/codegen/box/properties/primitiveOverrideDelegateAccessor.kt");
    }

    @Test
    @TestMetadata("privateAccessorOfOverriddenProperty.kt")
    public void testPrivateAccessorOfOverriddenProperty() {
      runTest("compiler/testData/codegen/box/properties/privateAccessorOfOverriddenProperty.kt");
    }

    @Test
    @TestMetadata("privatePropertyInConstructor.kt")
    public void testPrivatePropertyInConstructor() {
      runTest("compiler/testData/codegen/box/properties/privatePropertyInConstructor.kt");
    }

    @Test
    @TestMetadata("PrivatePropertyOfComplexGenericFunctionType.kt")
    public void testPrivatePropertyOfComplexGenericFunctionType() {
      runTest("compiler/testData/codegen/box/properties/PrivatePropertyOfComplexGenericFunctionType.kt");
    }

    @Test
    @TestMetadata("PrivatePropertyOfGenericContravariantFunctionType.kt")
    public void testPrivatePropertyOfGenericContravariantFunctionType() {
      runTest("compiler/testData/codegen/box/properties/PrivatePropertyOfGenericContravariantFunctionType.kt");
    }

    @Test
    @TestMetadata("PrivatePropertyOfGenericCovariantFunctionType.kt")
    public void testPrivatePropertyOfGenericCovariantFunctionType() {
      runTest("compiler/testData/codegen/box/properties/PrivatePropertyOfGenericCovariantFunctionType.kt");
    }

    @Test
    @TestMetadata("privatePropertyWithoutBackingField.kt")
    public void testPrivatePropertyWithoutBackingField() {
      runTest("compiler/testData/codegen/box/properties/privatePropertyWithoutBackingField.kt");
    }

    @Test
    @TestMetadata("twoAnnotatedExtensionPropertiesWithoutBackingFields.kt")
    public void testTwoAnnotatedExtensionPropertiesWithoutBackingFields() {
      runTest("compiler/testData/codegen/box/properties/twoAnnotatedExtensionPropertiesWithoutBackingFields.kt");
    }

    @Test
    @TestMetadata("typeInferredFromGetter.kt")
    public void testTypeInferredFromGetter() {
      runTest("compiler/testData/codegen/box/properties/typeInferredFromGetter.kt");
    }

    @Test
    @TestMetadata("unreachableUninitializedProperty.kt")
    public void testUnreachableUninitializedProperty() {
      runTest("compiler/testData/codegen/box/properties/unreachableUninitializedProperty.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/properties/backingField")
    @TestDataPath("$PROJECT_ROOT")
    public class BackingField {
      @Test
      public void testAllFilesPresentInBackingField() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/backingField"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("backingFieldVisibility.kt")
      public void testBackingFieldVisibility() {
        runTest("compiler/testData/codegen/box/properties/backingField/backingFieldVisibility.kt");
      }

      @Test
      @TestMetadata("backingFieldWithSmartTypeParameters.kt")
      public void testBackingFieldWithSmartTypeParameters() {
        runTest("compiler/testData/codegen/box/properties/backingField/backingFieldWithSmartTypeParameters.kt");
      }

      @Test
      @TestMetadata("charSequenceWithBackingField1.kt")
      public void testCharSequenceWithBackingField1() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField1.kt");
      }

      @Test
      @TestMetadata("charSequenceWithBackingField2.kt")
      public void testCharSequenceWithBackingField2() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField2.kt");
      }

      @Test
      @TestMetadata("charSequenceWithBackingField3.kt")
      public void testCharSequenceWithBackingField3() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField3.kt");
      }

      @Test
      @TestMetadata("charSequenceWithBackingField4.kt")
      public void testCharSequenceWithBackingField4() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField4.kt");
      }

      @Test
      @TestMetadata("charSequenceWithBackingField5.kt")
      public void testCharSequenceWithBackingField5() {
        runTest("compiler/testData/codegen/box/properties/backingField/charSequenceWithBackingField5.kt");
      }

      @Test
      @TestMetadata("explicitBackingFieldInAnonymous.kt")
      public void testExplicitBackingFieldInAnonymous() {
        runTest("compiler/testData/codegen/box/properties/backingField/explicitBackingFieldInAnonymous.kt");
      }

      @Test
      @TestMetadata("getterReturnTypeWithBackingField.kt")
      public void testGetterReturnTypeWithBackingField() {
        runTest("compiler/testData/codegen/box/properties/backingField/getterReturnTypeWithBackingField.kt");
      }

      @Test
      @TestMetadata("independentBackingFieldType.kt")
      public void testIndependentBackingFieldType() {
        runTest("compiler/testData/codegen/box/properties/backingField/independentBackingFieldType.kt");
      }

      @Test
      @TestMetadata("lateinitBackingFields.kt")
      public void testLateinitBackingFields() {
        runTest("compiler/testData/codegen/box/properties/backingField/lateinitBackingFields.kt");
      }

      @Test
      @TestMetadata("overriddenPropertiesWithExplicitBackingFields.kt")
      public void testOverriddenPropertiesWithExplicitBackingFields() {
        runTest("compiler/testData/codegen/box/properties/backingField/overriddenPropertiesWithExplicitBackingFields.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/properties/const")
    @TestDataPath("$PROJECT_ROOT")
    public class Const {
      @Test
      public void testAllFilesPresentInConst() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/const"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("anotherFile.kt")
      public void testAnotherFile() {
        runTest("compiler/testData/codegen/box/properties/const/anotherFile.kt");
      }

      @Test
      @TestMetadata("constPropertyAccessor.kt")
      public void testConstPropertyAccessor() {
        runTest("compiler/testData/codegen/box/properties/const/constPropertyAccessor.kt");
      }

      @Test
      @TestMetadata("intermoduleInlineConst.kt")
      public void testIntermoduleInlineConst() {
        runTest("compiler/testData/codegen/box/properties/const/intermoduleInlineConst.kt");
      }

      @Test
      @TestMetadata("kt52970.kt")
      public void testKt52970() {
        runTest("compiler/testData/codegen/box/properties/const/kt52970.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/properties/lateinit")
    @TestDataPath("$PROJECT_ROOT")
    public class Lateinit {
      @Test
      @TestMetadata("accessor.kt")
      public void testAccessor() {
        runTest("compiler/testData/codegen/box/properties/lateinit/accessor.kt");
      }

      @Test
      @TestMetadata("accessorException.kt")
      public void testAccessorException() {
        runTest("compiler/testData/codegen/box/properties/lateinit/accessorException.kt");
      }

      @Test
      @TestMetadata("accessorExceptionPublic.kt")
      public void testAccessorExceptionPublic() {
        runTest("compiler/testData/codegen/box/properties/lateinit/accessorExceptionPublic.kt");
      }

      @Test
      public void testAllFilesPresentInLateinit() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("exceptionField.kt")
      public void testExceptionField() {
        runTest("compiler/testData/codegen/box/properties/lateinit/exceptionField.kt");
      }

      @Test
      @TestMetadata("exceptionGetter.kt")
      public void testExceptionGetter() {
        runTest("compiler/testData/codegen/box/properties/lateinit/exceptionGetter.kt");
      }

      @Test
      @TestMetadata("kt30548.kt")
      public void testKt30548() {
        runTest("compiler/testData/codegen/box/properties/lateinit/kt30548.kt");
      }

      @Test
      @TestMetadata("localClass.kt")
      public void testLocalClass() {
        runTest("compiler/testData/codegen/box/properties/lateinit/localClass.kt");
      }

      @Test
      @TestMetadata("nameClash.kt")
      public void testNameClash() {
        runTest("compiler/testData/codegen/box/properties/lateinit/nameClash.kt");
      }

      @Test
      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/codegen/box/properties/lateinit/override.kt");
      }

      @Test
      @TestMetadata("overrideException.kt")
      public void testOverrideException() {
        runTest("compiler/testData/codegen/box/properties/lateinit/overrideException.kt");
      }

      @Test
      @TestMetadata("privateSetter.kt")
      public void testPrivateSetter() {
        runTest("compiler/testData/codegen/box/properties/lateinit/privateSetter.kt");
      }

      @Test
      @TestMetadata("privateSetterFromLambda.kt")
      public void testPrivateSetterFromLambda() {
        runTest("compiler/testData/codegen/box/properties/lateinit/privateSetterFromLambda.kt");
      }

      @Test
      @TestMetadata("privateSetterViaSubclass.kt")
      public void testPrivateSetterViaSubclass() {
        runTest("compiler/testData/codegen/box/properties/lateinit/privateSetterViaSubclass.kt");
      }

      @Test
      @TestMetadata("privateVarInCompanion.kt")
      public void testPrivateVarInCompanion() {
        runTest("compiler/testData/codegen/box/properties/lateinit/privateVarInCompanion.kt");
      }

      @Test
      @TestMetadata("simpleVar.kt")
      public void testSimpleVar() {
        runTest("compiler/testData/codegen/box/properties/lateinit/simpleVar.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize")
      @TestDataPath("$PROJECT_ROOT")
      public class IsInitializedAndDeinitialize {
        @Test
        public void testAllFilesPresentInIsInitializedAndDeinitialize() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("companionObjectField.kt")
        public void testCompanionObjectField() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/companionObjectField.kt");
        }

        @Test
        @TestMetadata("emptyLhs.kt")
        public void testEmptyLhs() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/emptyLhs.kt");
        }

        @Test
        @TestMetadata("innerSubclass.kt")
        public void testInnerSubclass() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/innerSubclass.kt");
        }

        @Test
        @TestMetadata("isInitializedMultiFile.kt")
        public void testIsInitializedMultiFile() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/isInitializedMultiFile.kt");
        }

        @Test
        @TestMetadata("nonInlineLambda.kt")
        public void testNonInlineLambda() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/nonInlineLambda.kt");
        }

        @Test
        @TestMetadata("propertyImportedFromObject.kt")
        public void testPropertyImportedFromObject() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/propertyImportedFromObject.kt");
        }

        @Test
        @TestMetadata("sideEffects.kt")
        public void testSideEffects() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/sideEffects.kt");
        }

        @Test
        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() {
          runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/topLevelProperty.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/properties/lateinit/local")
      @TestDataPath("$PROJECT_ROOT")
      public class Local {
        @Test
        public void testAllFilesPresentInLocal() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/local"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("capturedLocalLateinit.kt")
        public void testCapturedLocalLateinit() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/capturedLocalLateinit.kt");
        }

        @Test
        @TestMetadata("kt23260.kt")
        public void testKt23260() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/kt23260.kt");
        }

        @Test
        @TestMetadata("localLateinit.kt")
        public void testLocalLateinit() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/localLateinit.kt");
        }

        @Test
        @TestMetadata("uninitializedCapturedMemberAccess.kt")
        public void testUninitializedCapturedMemberAccess() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedCapturedMemberAccess.kt");
        }

        @Test
        @TestMetadata("uninitializedCapturedRead.kt")
        public void testUninitializedCapturedRead() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedCapturedRead.kt");
        }

        @Test
        @TestMetadata("uninitializedMemberAccess.kt")
        public void testUninitializedMemberAccess() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedMemberAccess.kt");
        }

        @Test
        @TestMetadata("uninitializedRead.kt")
        public void testUninitializedRead() {
          runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedRead.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/properties/lateinit/topLevel")
      @TestDataPath("$PROJECT_ROOT")
      public class TopLevel {
        @Test
        @TestMetadata("accessorException.kt")
        public void testAccessorException() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/accessorException.kt");
        }

        @Test
        @TestMetadata("accessorForTopLevelLateinit.kt")
        public void testAccessorForTopLevelLateinit() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/accessorForTopLevelLateinit.kt");
        }

        @Test
        public void testAllFilesPresentInTopLevel() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/topLevel"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("topLevelLateinit.kt")
        public void testTopLevelLateinit() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/topLevelLateinit.kt");
        }

        @Test
        @TestMetadata("uninitializedMemberAccess.kt")
        public void testUninitializedMemberAccess() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/uninitializedMemberAccess.kt");
        }

        @Test
        @TestMetadata("uninitializedRead.kt")
        public void testUninitializedRead() {
          runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/uninitializedRead.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/publishedApi")
  @TestDataPath("$PROJECT_ROOT")
  public class PublishedApi {
    @Test
    public void testAllFilesPresentInPublishedApi() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/publishedApi"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("inlineFromFriendModule.kt")
    public void testInlineFromFriendModule() {
      runTest("compiler/testData/codegen/box/publishedApi/inlineFromFriendModule.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/publishedApi/simple.kt");
    }

    @Test
    @TestMetadata("topLevel.kt")
    public void testTopLevel() {
      runTest("compiler/testData/codegen/box/publishedApi/topLevel.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/ranges")
  @TestDataPath("$PROJECT_ROOT")
  public class Ranges {
    @Test
    public void testAllFilesPresentInRanges() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("capturedLoopVar.kt")
    public void testCapturedLoopVar() {
      runTest("compiler/testData/codegen/box/ranges/capturedLoopVar.kt");
    }

    @Test
    @TestMetadata("forByteProgressionWithIntIncrement.kt")
    public void testForByteProgressionWithIntIncrement() {
      runTest("compiler/testData/codegen/box/ranges/forByteProgressionWithIntIncrement.kt");
    }

    @Test
    @TestMetadata("forInCharSequenceLengthDecreasedInLoopBody.kt")
    public void testForInCharSequenceLengthDecreasedInLoopBody() {
      runTest("compiler/testData/codegen/box/ranges/forInCharSequenceLengthDecreasedInLoopBody.kt");
    }

    @Test
    @TestMetadata("forInCharSequenceLengthIncreasedInLoopBody.kt")
    public void testForInCharSequenceLengthIncreasedInLoopBody() {
      runTest("compiler/testData/codegen/box/ranges/forInCharSequenceLengthIncreasedInLoopBody.kt");
    }

    @Test
    @TestMetadata("forInCharSequenceWithCustomIterator.kt")
    public void testForInCharSequenceWithCustomIterator() {
      runTest("compiler/testData/codegen/box/ranges/forInCharSequenceWithCustomIterator.kt");
    }

    @Test
    @TestMetadata("forInCharSequenceWithMultipleGetFunctions.kt")
    public void testForInCharSequenceWithMultipleGetFunctions() {
      runTest("compiler/testData/codegen/box/ranges/forInCharSequenceWithMultipleGetFunctions.kt");
    }

    @Test
    @TestMetadata("forInCustomCharSequence.kt")
    public void testForInCustomCharSequence() {
      runTest("compiler/testData/codegen/box/ranges/forInCustomCharSequence.kt");
    }

    @Test
    @TestMetadata("forInCustomIterable.kt")
    public void testForInCustomIterable() {
      runTest("compiler/testData/codegen/box/ranges/forInCustomIterable.kt");
    }

    @Test
    @TestMetadata("forInDoubleRangeWithCustomIterator.kt")
    public void testForInDoubleRangeWithCustomIterator() {
      runTest("compiler/testData/codegen/box/ranges/forInDoubleRangeWithCustomIterator.kt");
    }

    @Test
    @TestMetadata("forInFloatRangeWithCustomIterator.kt")
    public void testForInFloatRangeWithCustomIterator() {
      runTest("compiler/testData/codegen/box/ranges/forInFloatRangeWithCustomIterator.kt");
    }

    @Test
    @TestMetadata("forInIntRangeToConstWithBreak.kt")
    public void testForInIntRangeToConstWithBreak() {
      runTest("compiler/testData/codegen/box/ranges/forInIntRangeToConstWithBreak.kt");
    }

    @Test
    @TestMetadata("forInIntRangeToConstWithContinue.kt")
    public void testForInIntRangeToConstWithContinue() {
      runTest("compiler/testData/codegen/box/ranges/forInIntRangeToConstWithContinue.kt");
    }

    @Test
    @TestMetadata("forInRangeLiteralWithMixedTypeBounds.kt")
    public void testForInRangeLiteralWithMixedTypeBounds() {
      runTest("compiler/testData/codegen/box/ranges/forInRangeLiteralWithMixedTypeBounds.kt");
    }

    @Test
    @TestMetadata("forInRangeWithImplicitReceiver.kt")
    public void testForInRangeWithImplicitReceiver() {
      runTest("compiler/testData/codegen/box/ranges/forInRangeWithImplicitReceiver.kt");
    }

    @Test
    @TestMetadata("forInStringVarUpdatedInLoopBody.kt")
    public void testForInStringVarUpdatedInLoopBody() {
      runTest("compiler/testData/codegen/box/ranges/forInStringVarUpdatedInLoopBody.kt");
    }

    @Test
    @TestMetadata("forIntRange.kt")
    public void testForIntRange() {
      runTest("compiler/testData/codegen/box/ranges/forIntRange.kt");
    }

    @Test
    @TestMetadata("forNullableIntInRangeWithImplicitReceiver.kt")
    public void testForNullableIntInRangeWithImplicitReceiver() {
      runTest("compiler/testData/codegen/box/ranges/forNullableIntInRangeWithImplicitReceiver.kt");
    }

    @Test
    @TestMetadata("kt37370.kt")
    public void testKt37370() {
      runTest("compiler/testData/codegen/box/ranges/kt37370.kt");
    }

    @Test
    @TestMetadata("kt37370a.kt")
    public void testKt37370a() {
      runTest("compiler/testData/codegen/box/ranges/kt37370a.kt");
    }

    @Test
    @TestMetadata("kt47492.kt")
    public void testKt47492() {
      runTest("compiler/testData/codegen/box/ranges/kt47492.kt");
    }

    @Test
    @TestMetadata("kt47492a.kt")
    public void testKt47492a() {
      runTest("compiler/testData/codegen/box/ranges/kt47492a.kt");
    }

    @Test
    @TestMetadata("kt47492b.kt")
    public void testKt47492b() {
      runTest("compiler/testData/codegen/box/ranges/kt47492b.kt");
    }

    @Test
    @TestMetadata("multiAssignmentIterationOverIntRange.kt")
    public void testMultiAssignmentIterationOverIntRange() {
      runTest("compiler/testData/codegen/box/ranges/multiAssignmentIterationOverIntRange.kt");
    }

    @Test
    @TestMetadata("safeCallRangeTo.kt")
    public void testSafeCallRangeTo() {
      runTest("compiler/testData/codegen/box/ranges/safeCallRangeTo.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/contains")
    @TestDataPath("$PROJECT_ROOT")
    public class Contains {
      @Test
      public void testAllFilesPresentInContains() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/contains"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("charInCharRangeWithPossibleOverflow.kt")
      public void testCharInCharRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/charInCharRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("comparisonWithRangeBoundEliminated.kt")
      public void testComparisonWithRangeBoundEliminated() {
        runTest("compiler/testData/codegen/box/ranges/contains/comparisonWithRangeBoundEliminated.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForCollection.kt")
      public void testEvaluationOrderForCollection() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForCollection.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForComparableRange.kt")
      public void testEvaluationOrderForComparableRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForComparableRange.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForDownTo.kt")
      public void testEvaluationOrderForDownTo() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForDownTo.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForDownToReversed.kt")
      public void testEvaluationOrderForDownToReversed() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForDownToReversed.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForNullableArgument.kt")
      public void testEvaluationOrderForNullableArgument() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForNullableArgument.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForRangeLiteral.kt")
      public void testEvaluationOrderForRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForRangeLiteral.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForRangeLiteralReversed.kt")
      public void testEvaluationOrderForRangeLiteralReversed() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForRangeLiteralReversed.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForUntil.kt")
      public void testEvaluationOrderForUntil() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForUntil.kt");
      }

      @Test
      @TestMetadata("evaluationOrderForUntilReversed.kt")
      public void testEvaluationOrderForUntilReversed() {
        runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForUntilReversed.kt");
      }

      @Test
      @TestMetadata("genericCharInRangeLiteral.kt")
      public void testGenericCharInRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/contains/genericCharInRangeLiteral.kt");
      }

      @Test
      @TestMetadata("inArray.kt")
      public void testInArray() {
        runTest("compiler/testData/codegen/box/ranges/contains/inArray.kt");
      }

      @Test
      @TestMetadata("inCharSequence.kt")
      public void testInCharSequence() {
        runTest("compiler/testData/codegen/box/ranges/contains/inCharSequence.kt");
      }

      @Test
      @TestMetadata("inComparableRange.kt")
      public void testInComparableRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inComparableRange.kt");
      }

      @Test
      @TestMetadata("inCustomObjectRange.kt")
      public void testInCustomObjectRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inCustomObjectRange.kt");
      }

      @Test
      @TestMetadata("inDoubleRangeLiteralVsComparableRangeLiteral.kt")
      public void testInDoubleRangeLiteralVsComparableRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/contains/inDoubleRangeLiteralVsComparableRangeLiteral.kt");
      }

      @Test
      @TestMetadata("inExtensionRange.kt")
      public void testInExtensionRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inExtensionRange.kt");
      }

      @Test
      @TestMetadata("inFloatingPointRangeWithNaNBound.kt")
      public void testInFloatingPointRangeWithNaNBound() {
        runTest("compiler/testData/codegen/box/ranges/contains/inFloatingPointRangeWithNaNBound.kt");
      }

      @Test
      @TestMetadata("inIntRange.kt")
      public void testInIntRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inIntRange.kt");
      }

      @Test
      @TestMetadata("inIterable.kt")
      public void testInIterable() {
        runTest("compiler/testData/codegen/box/ranges/contains/inIterable.kt");
      }

      @Test
      @TestMetadata("inNonMatchingRange.kt")
      public void testInNonMatchingRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inNonMatchingRange.kt");
      }

      @Test
      @TestMetadata("inOptimizableDoubleRange.kt")
      public void testInOptimizableDoubleRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableDoubleRange.kt");
      }

      @Test
      @TestMetadata("inOptimizableFloatRange.kt")
      public void testInOptimizableFloatRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableFloatRange.kt");
      }

      @Test
      @TestMetadata("inOptimizableIntRange.kt")
      public void testInOptimizableIntRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableIntRange.kt");
      }

      @Test
      @TestMetadata("inOptimizableLongRange.kt")
      public void testInOptimizableLongRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableLongRange.kt");
      }

      @Test
      @TestMetadata("inPrimitiveProgression.kt")
      public void testInPrimitiveProgression() {
        runTest("compiler/testData/codegen/box/ranges/contains/inPrimitiveProgression.kt");
      }

      @Test
      @TestMetadata("inPrimitiveRange.kt")
      public void testInPrimitiveRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/inPrimitiveRange.kt");
      }

      @Test
      @TestMetadata("inRangeLiteralComposition.kt")
      public void testInRangeLiteralComposition() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeLiteralComposition.kt");
      }

      @Test
      @TestMetadata("inRangeWithCustomContains.kt")
      public void testInRangeWithCustomContains() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithCustomContains.kt");
      }

      @Test
      @TestMetadata("inRangeWithImplicitReceiver.kt")
      public void testInRangeWithImplicitReceiver() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithImplicitReceiver.kt");
      }

      @Test
      @TestMetadata("inRangeWithNonmatchingArguments.kt")
      public void testInRangeWithNonmatchingArguments() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithNonmatchingArguments.kt");
      }

      @Test
      @TestMetadata("inRangeWithSmartCast.kt")
      public void testInRangeWithSmartCast() {
        runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithSmartCast.kt");
      }

      @Test
      @TestMetadata("inUntil.kt")
      public void testInUntil() {
        runTest("compiler/testData/codegen/box/ranges/contains/inUntil.kt");
      }

      @Test
      @TestMetadata("inUntilMaxValue.kt")
      public void testInUntilMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/contains/inUntilMaxValue.kt");
      }

      @Test
      @TestMetadata("inUntilMinValue.kt")
      public void testInUntilMinValue() {
        runTest("compiler/testData/codegen/box/ranges/contains/inUntilMinValue.kt");
      }

      @Test
      @TestMetadata("inUntilMinValueNonConst.kt")
      public void testInUntilMinValueNonConst() {
        runTest("compiler/testData/codegen/box/ranges/contains/inUntilMinValueNonConst.kt");
      }

      @Test
      @TestMetadata("intInByteRangeWithPossibleOverflow.kt")
      public void testIntInByteRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/intInByteRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("intInIntRangeWithPossibleOverflow.kt")
      public void testIntInIntRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/intInIntRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("intInShortRangeWithPossibleOverflow.kt")
      public void testIntInShortRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/intInShortRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("kt20106.kt")
      public void testKt20106() {
        runTest("compiler/testData/codegen/box/ranges/contains/kt20106.kt");
      }

      @Test
      @TestMetadata("longInLongRangeWithPossibleOverflow.kt")
      public void testLongInLongRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/longInLongRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("nullableInPrimitiveRange.kt")
      public void testNullableInPrimitiveRange() {
        runTest("compiler/testData/codegen/box/ranges/contains/nullableInPrimitiveRange.kt");
      }

      @Test
      @TestMetadata("rangeContainsString.kt")
      public void testRangeContainsString() {
        runTest("compiler/testData/codegen/box/ranges/contains/rangeContainsString.kt");
      }

      @Test
      @TestMetadata("smartCastOnBothEnds.kt")
      public void testSmartCastOnBothEnds() {
        runTest("compiler/testData/codegen/box/ranges/contains/smartCastOnBothEnds.kt");
      }

      @Test
      @TestMetadata("uintInUByteRangeWithPossibleOverflow.kt")
      public void testUintInUByteRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/uintInUByteRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("uintInUIntRangeWithPossibleOverflow.kt")
      public void testUintInUIntRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/uintInUIntRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("uintInUShortRangeWithPossibleOverflow.kt")
      public void testUintInUShortRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/uintInUShortRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("ulongInULongRangeWithPossibleOverflow.kt")
      public void testUlongInULongRangeWithPossibleOverflow() {
        runTest("compiler/testData/codegen/box/ranges/contains/ulongInULongRangeWithPossibleOverflow.kt");
      }

      @Test
      @TestMetadata("userDefinedContainsExtension.kt")
      public void testUserDefinedContainsExtension() {
        runTest("compiler/testData/codegen/box/ranges/contains/userDefinedContainsExtension.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/contains/generated")
      @TestDataPath("$PROJECT_ROOT")
      public class Generated {
        @Test
        public void testAllFilesPresentInGenerated() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/contains/generated"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("arrayIndices.kt")
        public void testArrayIndices() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/arrayIndices.kt");
        }

        @Test
        @TestMetadata("charDownTo.kt")
        public void testCharDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charDownTo.kt");
        }

        @Test
        @TestMetadata("charRangeTo.kt")
        public void testCharRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charRangeTo.kt");
        }

        @Test
        @TestMetadata("charRangeUntil.kt")
        public void testCharRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charRangeUntil.kt");
        }

        @Test
        @TestMetadata("charSequenceIndices.kt")
        public void testCharSequenceIndices() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charSequenceIndices.kt");
        }

        @Test
        @TestMetadata("charUntil.kt")
        public void testCharUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/charUntil.kt");
        }

        @Test
        @TestMetadata("collectionIndices.kt")
        public void testCollectionIndices() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/collectionIndices.kt");
        }

        @Test
        @TestMetadata("doubleRangeTo.kt")
        public void testDoubleRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/doubleRangeTo.kt");
        }

        @Test
        @TestMetadata("doubleRangeUntil.kt")
        public void testDoubleRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/doubleRangeUntil.kt");
        }

        @Test
        @TestMetadata("floatRangeTo.kt")
        public void testFloatRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/floatRangeTo.kt");
        }

        @Test
        @TestMetadata("floatRangeUntil.kt")
        public void testFloatRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/floatRangeUntil.kt");
        }

        @Test
        @TestMetadata("intDownTo.kt")
        public void testIntDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/intDownTo.kt");
        }

        @Test
        @TestMetadata("intRangeTo.kt")
        public void testIntRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/intRangeTo.kt");
        }

        @Test
        @TestMetadata("intRangeUntil.kt")
        public void testIntRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/intRangeUntil.kt");
        }

        @Test
        @TestMetadata("intUntil.kt")
        public void testIntUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/intUntil.kt");
        }

        @Test
        @TestMetadata("longDownTo.kt")
        public void testLongDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/longDownTo.kt");
        }

        @Test
        @TestMetadata("longRangeTo.kt")
        public void testLongRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/longRangeTo.kt");
        }

        @Test
        @TestMetadata("longRangeUntil.kt")
        public void testLongRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/longRangeUntil.kt");
        }

        @Test
        @TestMetadata("longUntil.kt")
        public void testLongUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/longUntil.kt");
        }

        @Test
        @TestMetadata("uintDownTo.kt")
        public void testUintDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/uintDownTo.kt");
        }

        @Test
        @TestMetadata("uintRangeTo.kt")
        public void testUintRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/uintRangeTo.kt");
        }

        @Test
        @TestMetadata("uintRangeUntil.kt")
        public void testUintRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/uintRangeUntil.kt");
        }

        @Test
        @TestMetadata("uintUntil.kt")
        public void testUintUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/uintUntil.kt");
        }

        @Test
        @TestMetadata("ulongDownTo.kt")
        public void testUlongDownTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/ulongDownTo.kt");
        }

        @Test
        @TestMetadata("ulongRangeTo.kt")
        public void testUlongRangeTo() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/ulongRangeTo.kt");
        }

        @Test
        @TestMetadata("ulongRangeUntil.kt")
        public void testUlongRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/ulongRangeUntil.kt");
        }

        @Test
        @TestMetadata("ulongUntil.kt")
        public void testUlongUntil() {
          runTest("compiler/testData/codegen/box/ranges/contains/generated/ulongUntil.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder")
    @TestDataPath("$PROJECT_ROOT")
    public class EvaluationOrder {
      @Test
      public void testAllFilesPresentInEvaluationOrder() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInDownTo.kt")
      public void testForInDownTo() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownTo.kt");
      }

      @Test
      @TestMetadata("forInDownToReversed.kt")
      public void testForInDownToReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownToReversed.kt");
      }

      @Test
      @TestMetadata("forInDownToReversedReversed.kt")
      public void testForInDownToReversedReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownToReversedReversed.kt");
      }

      @Test
      @TestMetadata("forInRangeLiteral.kt")
      public void testForInRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteral.kt");
      }

      @Test
      @TestMetadata("forInRangeLiteralReversed.kt")
      public void testForInRangeLiteralReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteralReversed.kt");
      }

      @Test
      @TestMetadata("forInRangeLiteralReversedReversed.kt")
      public void testForInRangeLiteralReversedReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteralReversedReversed.kt");
      }

      @Test
      @TestMetadata("forInUntil.kt")
      public void testForInUntil() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntil.kt");
      }

      @Test
      @TestMetadata("forInUntilReversed.kt")
      public void testForInUntilReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntilReversed.kt");
      }

      @Test
      @TestMetadata("forInUntilReversedReversed.kt")
      public void testForInUntilReversedReversed() {
        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntilReversedReversed.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped")
      @TestDataPath("$PROJECT_ROOT")
      public class Stepped {
        @Test
        public void testAllFilesPresentInStepped() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInDownTo {
          @Test
          public void testAllFilesPresentInForInDownTo() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("forInDownToReversedStep.kt")
          public void testForInDownToReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStep.kt");
          }

          @Test
          @TestMetadata("forInDownToReversedStepReversed.kt")
          public void testForInDownToReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStepReversed.kt");
          }

          @Test
          @TestMetadata("forInDownToReversedStepReversedStep.kt")
          public void testForInDownToReversedStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStepReversedStep.kt");
          }

          @Test
          @TestMetadata("forInDownToStep.kt")
          public void testForInDownToStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStep.kt");
          }

          @Test
          @TestMetadata("forInDownToStepReversed.kt")
          public void testForInDownToStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversed.kt");
          }

          @Test
          @TestMetadata("forInDownToStepReversedStep.kt")
          public void testForInDownToStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversedStep.kt");
          }

          @Test
          @TestMetadata("forInDownToStepReversedStepReversed.kt")
          public void testForInDownToStepReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversedStepReversed.kt");
          }

          @Test
          @TestMetadata("forInDownToStepStep.kt")
          public void testForInDownToStepStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepStep.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInRangeLiteral {
          @Test
          public void testAllFilesPresentInForInRangeLiteral() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("forInRangeLiteralReversedStep.kt")
          public void testForInRangeLiteralReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStep.kt");
          }

          @Test
          @TestMetadata("forInRangeLiteralReversedStepReversed.kt")
          public void testForInRangeLiteralReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStepReversed.kt");
          }

          @Test
          @TestMetadata("forInRangeLiteralReversedStepReversedStep.kt")
          public void testForInRangeLiteralReversedStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStepReversedStep.kt");
          }

          @Test
          @TestMetadata("forInRangeLiteralStep.kt")
          public void testForInRangeLiteralStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStep.kt");
          }

          @Test
          @TestMetadata("forInRangeLiteralStepReversed.kt")
          public void testForInRangeLiteralStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversed.kt");
          }

          @Test
          @TestMetadata("forInRangeLiteralStepReversedStep.kt")
          public void testForInRangeLiteralStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversedStep.kt");
          }

          @Test
          @TestMetadata("forInRangeLiteralStepReversedStepReversed.kt")
          public void testForInRangeLiteralStepReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversedStepReversed.kt");
          }

          @Test
          @TestMetadata("forInRangeLiteralStepStep.kt")
          public void testForInRangeLiteralStepStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepStep.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInUntil {
          @Test
          public void testAllFilesPresentInForInUntil() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("forInUntilReversedStep.kt")
          public void testForInUntilReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStep.kt");
          }

          @Test
          @TestMetadata("forInUntilReversedStepReversed.kt")
          public void testForInUntilReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStepReversed.kt");
          }

          @Test
          @TestMetadata("forInUntilReversedStepReversedStep.kt")
          public void testForInUntilReversedStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStepReversedStep.kt");
          }

          @Test
          @TestMetadata("forInUntilStep.kt")
          public void testForInUntilStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStep.kt");
          }

          @Test
          @TestMetadata("forInUntilStepReversed.kt")
          public void testForInUntilStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversed.kt");
          }

          @Test
          @TestMetadata("forInUntilStepReversedStep.kt")
          public void testForInUntilStepReversedStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversedStep.kt");
          }

          @Test
          @TestMetadata("forInUntilStepReversedStepReversed.kt")
          public void testForInUntilStepReversedStepReversed() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversedStepReversed.kt");
          }

          @Test
          @TestMetadata("forInUntilStepStep.kt")
          public void testForInUntilStepStep() {
            runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepStep.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/expression")
    @TestDataPath("$PROJECT_ROOT")
    public class Expression {
      @Test
      public void testAllFilesPresentInExpression() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/expression"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("emptyDownto.kt")
      public void testEmptyDownto() {
        runTest("compiler/testData/codegen/box/ranges/expression/emptyDownto.kt");
      }

      @Test
      @TestMetadata("emptyRange.kt")
      public void testEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/emptyRange.kt");
      }

      @Test
      @TestMetadata("inexactDownToMinValue.kt")
      public void testInexactDownToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/inexactDownToMinValue.kt");
      }

      @Test
      @TestMetadata("inexactSteppedDownTo.kt")
      public void testInexactSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/inexactSteppedDownTo.kt");
      }

      @Test
      @TestMetadata("inexactSteppedRange.kt")
      public void testInexactSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/inexactSteppedRange.kt");
      }

      @Test
      @TestMetadata("inexactToMaxValue.kt")
      public void testInexactToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/inexactToMaxValue.kt");
      }

      @Test
      @TestMetadata("maxValueMinusTwoToMaxValue.kt")
      public void testMaxValueMinusTwoToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/maxValueMinusTwoToMaxValue.kt");
      }

      @Test
      @TestMetadata("maxValueToMaxValue.kt")
      public void testMaxValueToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/maxValueToMaxValue.kt");
      }

      @Test
      @TestMetadata("maxValueToMinValue.kt")
      public void testMaxValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/maxValueToMinValue.kt");
      }

      @Test
      @TestMetadata("oneElementDownTo.kt")
      public void testOneElementDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/oneElementDownTo.kt");
      }

      @Test
      @TestMetadata("oneElementRange.kt")
      public void testOneElementRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/oneElementRange.kt");
      }

      @Test
      @TestMetadata("openRange.kt")
      public void testOpenRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/openRange.kt");
      }

      @Test
      @TestMetadata("openRangeUntil.kt")
      public void testOpenRangeUntil() {
        runTest("compiler/testData/codegen/box/ranges/expression/openRangeUntil.kt");
      }

      @Test
      @TestMetadata("overflowZeroDownToMaxValue.kt")
      public void testOverflowZeroDownToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/overflowZeroDownToMaxValue.kt");
      }

      @Test
      @TestMetadata("overflowZeroToMinValue.kt")
      public void testOverflowZeroToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/overflowZeroToMinValue.kt");
      }

      @Test
      @TestMetadata("progressionDownToMinValue.kt")
      public void testProgressionDownToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionDownToMinValue.kt");
      }

      @Test
      @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
      public void testProgressionMaxValueMinusTwoToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueMinusTwoToMaxValue.kt");
      }

      @Test
      @TestMetadata("progressionMaxValueToMaxValue.kt")
      public void testProgressionMaxValueToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueToMaxValue.kt");
      }

      @Test
      @TestMetadata("progressionMaxValueToMinValue.kt")
      public void testProgressionMaxValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueToMinValue.kt");
      }

      @Test
      @TestMetadata("progressionMinValueToMinValue.kt")
      public void testProgressionMinValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/expression/progressionMinValueToMinValue.kt");
      }

      @Test
      @TestMetadata("reversedBackSequence.kt")
      public void testReversedBackSequence() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedBackSequence.kt");
      }

      @Test
      @TestMetadata("reversedEmptyBackSequence.kt")
      public void testReversedEmptyBackSequence() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedEmptyBackSequence.kt");
      }

      @Test
      @TestMetadata("reversedEmptyRange.kt")
      public void testReversedEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedEmptyRange.kt");
      }

      @Test
      @TestMetadata("reversedInexactSteppedDownTo.kt")
      public void testReversedInexactSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedInexactSteppedDownTo.kt");
      }

      @Test
      @TestMetadata("reversedRange.kt")
      public void testReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedRange.kt");
      }

      @Test
      @TestMetadata("reversedSimpleSteppedRange.kt")
      public void testReversedSimpleSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/reversedSimpleSteppedRange.kt");
      }

      @Test
      @TestMetadata("simpleDownTo.kt")
      public void testSimpleDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleDownTo.kt");
      }

      @Test
      @TestMetadata("simpleRange.kt")
      public void testSimpleRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleRange.kt");
      }

      @Test
      @TestMetadata("simpleRangeWithNonConstantEnds.kt")
      public void testSimpleRangeWithNonConstantEnds() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleRangeWithNonConstantEnds.kt");
      }

      @Test
      @TestMetadata("simpleSteppedDownTo.kt")
      public void testSimpleSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleSteppedDownTo.kt");
      }

      @Test
      @TestMetadata("simpleSteppedRange.kt")
      public void testSimpleSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/expression/simpleSteppedRange.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/forInDownTo")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInDownTo {
      @Test
      public void testAllFilesPresentInForInDownTo() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInDownTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInDownToWithPossibleUnderflow.kt")
      public void testForInDownToWithPossibleUnderflow() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forInDownToWithPossibleUnderflow.kt");
      }

      @Test
      @TestMetadata("forInSumDownToSum.kt")
      public void testForInSumDownToSum() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forInSumDownToSum.kt");
      }

      @Test
      @TestMetadata("forIntInDownTo.kt")
      public void testForIntInDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInDownTo.kt");
      }

      @Test
      @TestMetadata("forIntInDownToWithNonConstBounds.kt")
      public void testForIntInDownToWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInDownToWithNonConstBounds.kt");
      }

      @Test
      @TestMetadata("forIntInNonOptimizedDownTo.kt")
      public void testForIntInNonOptimizedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInNonOptimizedDownTo.kt");
      }

      @Test
      @TestMetadata("forLongInDownTo.kt")
      public void testForLongInDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forLongInDownTo.kt");
      }

      @Test
      @TestMetadata("forNullableIntInDownTo.kt")
      public void testForNullableIntInDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInDownTo/forNullableIntInDownTo.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/forInIndices")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInIndices {
      @Test
      public void testAllFilesPresentInForInIndices() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInIndices"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInArrayListIndices.kt")
      public void testForInArrayListIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInArrayListIndices.kt");
      }

      @Test
      @TestMetadata("forInCharSequenceIndices.kt")
      public void testForInCharSequenceIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCharSequenceIndices.kt");
      }

      @Test
      @TestMetadata("forInCharSequenceTypeParameterIndices.kt")
      public void testForInCharSequenceTypeParameterIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCharSequenceTypeParameterIndices.kt");
      }

      @Test
      @TestMetadata("forInCollectionImplicitReceiverIndices.kt")
      public void testForInCollectionImplicitReceiverIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionImplicitReceiverIndices.kt");
      }

      @Test
      @TestMetadata("forInCollectionIndices.kt")
      public void testForInCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionIndices.kt");
      }

      @Test
      @TestMetadata("forInCollectionTypeParameterIndices.kt")
      public void testForInCollectionTypeParameterIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionTypeParameterIndices.kt");
      }

      @Test
      @TestMetadata("forInListIndices.kt")
      public void testForInListIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInListIndices.kt");
      }

      @Test
      @TestMetadata("forInListIndicesBreak.kt")
      public void testForInListIndicesBreak() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInListIndicesBreak.kt");
      }

      @Test
      @TestMetadata("forInListIndicesContinue.kt")
      public void testForInListIndicesContinue() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInListIndicesContinue.kt");
      }

      @Test
      @TestMetadata("forInNonOptimizedIndices.kt")
      public void testForInNonOptimizedIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInNonOptimizedIndices.kt");
      }

      @Test
      @TestMetadata("forInObjectArrayIndices.kt")
      public void testForInObjectArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInObjectArrayIndices.kt");
      }

      @Test
      @TestMetadata("forInPrimitiveArrayIndices.kt")
      public void testForInPrimitiveArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forInPrimitiveArrayIndices.kt");
      }

      @Test
      @TestMetadata("forNullableIntInArrayIndices.kt")
      public void testForNullableIntInArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forNullableIntInArrayIndices.kt");
      }

      @Test
      @TestMetadata("forNullableIntInCollectionIndices.kt")
      public void testForNullableIntInCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/forNullableIntInCollectionIndices.kt");
      }

      @Test
      @TestMetadata("indexOfLast.kt")
      public void testIndexOfLast() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/indexOfLast.kt");
      }

      @Test
      @TestMetadata("kt12983_forInGenericArrayIndices.kt")
      public void testKt12983_forInGenericArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInGenericArrayIndices.kt");
      }

      @Test
      @TestMetadata("kt12983_forInGenericCollectionIndices.kt")
      public void testKt12983_forInGenericCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInGenericCollectionIndices.kt");
      }

      @Test
      @TestMetadata("kt12983_forInSpecificArrayIndices.kt")
      public void testKt12983_forInSpecificArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInSpecificArrayIndices.kt");
      }

      @Test
      @TestMetadata("kt12983_forInSpecificCollectionIndices.kt")
      public void testKt12983_forInSpecificCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInSpecificCollectionIndices.kt");
      }

      @Test
      @TestMetadata("kt13241_Array.kt")
      public void testKt13241_Array() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_Array.kt");
      }

      @Test
      @TestMetadata("kt13241_CharSequence.kt")
      public void testKt13241_CharSequence() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_CharSequence.kt");
      }

      @Test
      @TestMetadata("kt13241_Collection.kt")
      public void testKt13241_Collection() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_Collection.kt");
      }

      @Test
      @TestMetadata("kt43159_ArrayUpperBound.kt")
      public void testKt43159_ArrayUpperBound() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt43159_ArrayUpperBound.kt");
      }

      @Test
      @TestMetadata("kt43159_GenericArray.kt")
      public void testKt43159_GenericArray() {
        runTest("compiler/testData/codegen/box/ranges/forInIndices/kt43159_GenericArray.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/forInProgressionWithIndex")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInProgressionWithIndex {
      @Test
      public void testAllFilesPresentInForInProgressionWithIndex() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInProgressionWithIndex"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInDownToWithIndex.kt")
      public void testForInDownToWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInDownToWithIndex.kt");
      }

      @Test
      @TestMetadata("forInIndicesWithIndex.kt")
      public void testForInIndicesWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInIndicesWithIndex.kt");
      }

      @Test
      @TestMetadata("forInRangeToWithIndex.kt")
      public void testForInRangeToWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInRangeToWithIndex.kt");
      }

      @Test
      @TestMetadata("forInReversedStepWithIndex.kt")
      public void testForInReversedStepWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInReversedStepWithIndex.kt");
      }

      @Test
      @TestMetadata("forInReversedWithIndex.kt")
      public void testForInReversedWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInReversedWithIndex.kt");
      }

      @Test
      @TestMetadata("forInStepReversedWithIndex.kt")
      public void testForInStepReversedWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInStepReversedWithIndex.kt");
      }

      @Test
      @TestMetadata("forInStepWithIndex.kt")
      public void testForInStepWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInStepWithIndex.kt");
      }

      @Test
      @TestMetadata("forInUntilWithIndex.kt")
      public void testForInUntilWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInUntilWithIndex.kt");
      }

      @Test
      @TestMetadata("forInWithIndexBreakAndContinue.kt")
      public void testForInWithIndexBreakAndContinue() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexBreakAndContinue.kt");
      }

      @Test
      @TestMetadata("forInWithIndexNoIndexOrElementVar.kt")
      public void testForInWithIndexNoIndexOrElementVar() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexNoIndexOrElementVar.kt");
      }

      @Test
      @TestMetadata("forInWithIndexNotDestructured.kt")
      public void testForInWithIndexNotDestructured() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexNotDestructured.kt");
      }

      @Test
      @TestMetadata("forInWithIndexReversed.kt")
      public void testForInWithIndexReversed() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexReversed.kt");
      }

      @Test
      @TestMetadata("forInWithIndexWithDestructuringInLoop.kt")
      public void testForInWithIndexWithDestructuringInLoop() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexWithDestructuringInLoop.kt");
      }

      @Test
      @TestMetadata("forInWithIndexWithIndex.kt")
      public void testForInWithIndexWithIndex() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexWithIndex.kt");
      }

      @Test
      @TestMetadata("kt42909.kt")
      public void testKt42909() {
        runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/kt42909.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/forInReversed")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInReversed {
      @Test
      public void testAllFilesPresentInForInReversed() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInReversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInReversedArrayIndices.kt")
      public void testForInReversedArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedArrayIndices.kt");
      }

      @Test
      @TestMetadata("forInReversedCharSequenceIndices.kt")
      public void testForInReversedCharSequenceIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedCharSequenceIndices.kt");
      }

      @Test
      @TestMetadata("forInReversedCollectionIndices.kt")
      public void testForInReversedCollectionIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedCollectionIndices.kt");
      }

      @Test
      @TestMetadata("forInReversedDownTo.kt")
      public void testForInReversedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedDownTo.kt");
      }

      @Test
      @TestMetadata("forInReversedEmptyRange.kt")
      public void testForInReversedEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRange.kt");
      }

      @Test
      @TestMetadata("forInReversedEmptyRangeLiteral.kt")
      public void testForInReversedEmptyRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRangeLiteral.kt");
      }

      @Test
      @TestMetadata("forInReversedEmptyRangeLiteralWithNonConstBounds.kt")
      public void testForInReversedEmptyRangeLiteralWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRangeLiteralWithNonConstBounds.kt");
      }

      @Test
      @TestMetadata("forInReversedRange.kt")
      public void testForInReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRange.kt");
      }

      @Test
      @TestMetadata("forInReversedRangeLiteral.kt")
      public void testForInReversedRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRangeLiteral.kt");
      }

      @Test
      @TestMetadata("forInReversedRangeLiteralWithNonConstBounds.kt")
      public void testForInReversedRangeLiteralWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRangeLiteralWithNonConstBounds.kt");
      }

      @Test
      @TestMetadata("forInReversedReversedArrayIndices.kt")
      public void testForInReversedReversedArrayIndices() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedArrayIndices.kt");
      }

      @Test
      @TestMetadata("forInReversedReversedDownTo.kt")
      public void testForInReversedReversedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedDownTo.kt");
      }

      @Test
      @TestMetadata("ForInReversedReversedRange.kt")
      public void testForInReversedReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/ForInReversedReversedRange.kt");
      }

      @Test
      @TestMetadata("forInReversedReversedReversedRange.kt")
      public void testForInReversedReversedReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedReversedRange.kt");
      }

      @Test
      @TestMetadata("forInReversedReversedUntil.kt")
      public void testForInReversedReversedUntil() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedUntil.kt");
      }

      @Test
      @TestMetadata("forInReversedReversedUntilWithNonConstBounds.kt")
      public void testForInReversedReversedUntilWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedUntilWithNonConstBounds.kt");
      }

      @Test
      @TestMetadata("forInReversedUntil.kt")
      public void testForInReversedUntil() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedUntil.kt");
      }

      @Test
      @TestMetadata("forInReversedUntilWithNonConstBounds.kt")
      public void testForInReversedUntilWithNonConstBounds() {
        runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedUntilWithNonConstBounds.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/forInUntil")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInUntil {
      @Test
      public void testAllFilesPresentInForInUntil() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInUntil"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInUntilChar.kt")
      public void testForInUntilChar() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilChar.kt");
      }

      @Test
      @TestMetadata("forInUntilCharMaxValue.kt")
      public void testForInUntilCharMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMaxValue.kt");
      }

      @Test
      @TestMetadata("forInUntilCharMinValue.kt")
      public void testForInUntilCharMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMinValue.kt");
      }

      @Test
      @TestMetadata("forInUntilCharMinValueNonConst.kt")
      public void testForInUntilCharMinValueNonConst() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMinValueNonConst.kt");
      }

      @Test
      @TestMetadata("forInUntilInt.kt")
      public void testForInUntilInt() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilInt.kt");
      }

      @Test
      @TestMetadata("forInUntilIntMaxValue.kt")
      public void testForInUntilIntMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMaxValue.kt");
      }

      @Test
      @TestMetadata("forInUntilIntMinValue.kt")
      public void testForInUntilIntMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMinValue.kt");
      }

      @Test
      @TestMetadata("forInUntilIntMinValueNonConst.kt")
      public void testForInUntilIntMinValueNonConst() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMinValueNonConst.kt");
      }

      @Test
      @TestMetadata("forInUntilLesserInt.kt")
      public void testForInUntilLesserInt() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLesserInt.kt");
      }

      @Test
      @TestMetadata("forInUntilLong.kt")
      public void testForInUntilLong() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLong.kt");
      }

      @Test
      @TestMetadata("forInUntilLongMaxValue.kt")
      public void testForInUntilLongMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMaxValue.kt");
      }

      @Test
      @TestMetadata("forInUntilLongMinValue.kt")
      public void testForInUntilLongMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMinValue.kt");
      }

      @Test
      @TestMetadata("forInUntilLongMinValueNonConst.kt")
      public void testForInUntilLongMinValueNonConst() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMinValueNonConst.kt");
      }

      @Test
      @TestMetadata("forIntInIntUntilSmartcastInt.kt")
      public void testForIntInIntUntilSmartcastInt() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/forIntInIntUntilSmartcastInt.kt");
      }

      @Test
      @TestMetadata("kt42533.kt")
      public void testKt42533() {
        runTest("compiler/testData/codegen/box/ranges/forInUntil/kt42533.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/forWithPossibleOverflow")
    @TestDataPath("$PROJECT_ROOT")
    public class ForWithPossibleOverflow {
      @Test
      public void testAllFilesPresentInForWithPossibleOverflow() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forWithPossibleOverflow"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("forInDownToCharMinValue.kt")
      public void testForInDownToCharMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToCharMinValue.kt");
      }

      @Test
      @TestMetadata("forInDownToCharMinValueReversed.kt")
      public void testForInDownToCharMinValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToCharMinValueReversed.kt");
      }

      @Test
      @TestMetadata("forInDownToIntMinValue.kt")
      public void testForInDownToIntMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToIntMinValue.kt");
      }

      @Test
      @TestMetadata("forInDownToIntMinValueReversed.kt")
      public void testForInDownToIntMinValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToIntMinValueReversed.kt");
      }

      @Test
      @TestMetadata("forInDownToLongMinValue.kt")
      public void testForInDownToLongMinValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToLongMinValue.kt");
      }

      @Test
      @TestMetadata("forInDownToLongMinValueReversed.kt")
      public void testForInDownToLongMinValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToLongMinValueReversed.kt");
      }

      @Test
      @TestMetadata("forInRangeToCharMaxValue.kt")
      public void testForInRangeToCharMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToCharMaxValue.kt");
      }

      @Test
      @TestMetadata("forInRangeToCharMaxValueReversed.kt")
      public void testForInRangeToCharMaxValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToCharMaxValueReversed.kt");
      }

      @Test
      @TestMetadata("forInRangeToIntMaxValue.kt")
      public void testForInRangeToIntMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToIntMaxValue.kt");
      }

      @Test
      @TestMetadata("forInRangeToIntMaxValueReversed.kt")
      public void testForInRangeToIntMaxValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToIntMaxValueReversed.kt");
      }

      @Test
      @TestMetadata("forInRangeToLongMaxValue.kt")
      public void testForInRangeToLongMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToLongMaxValue.kt");
      }

      @Test
      @TestMetadata("forInRangeToLongMaxValueReversed.kt")
      public void testForInRangeToLongMaxValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToLongMaxValueReversed.kt");
      }

      @Test
      @TestMetadata("forInUntilIntMinValueReversed.kt")
      public void testForInUntilIntMinValueReversed() {
        runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInUntilIntMinValueReversed.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    public class JavaInterop {
      @Test
      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/javaInterop"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/javaInterop/withIndex")
      @TestDataPath("$PROJECT_ROOT")
      public class WithIndex {
        @Test
        public void testAllFilesPresentInWithIndex() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/javaInterop/withIndex"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/literal")
    @TestDataPath("$PROJECT_ROOT")
    public class Literal {
      @Test
      public void testAllFilesPresentInLiteral() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/literal"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("emptyDownto.kt")
      public void testEmptyDownto() {
        runTest("compiler/testData/codegen/box/ranges/literal/emptyDownto.kt");
      }

      @Test
      @TestMetadata("emptyRange.kt")
      public void testEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/emptyRange.kt");
      }

      @Test
      @TestMetadata("inexactDownToMinValue.kt")
      public void testInexactDownToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/inexactDownToMinValue.kt");
      }

      @Test
      @TestMetadata("inexactSteppedDownTo.kt")
      public void testInexactSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/inexactSteppedDownTo.kt");
      }

      @Test
      @TestMetadata("inexactSteppedRange.kt")
      public void testInexactSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/inexactSteppedRange.kt");
      }

      @Test
      @TestMetadata("inexactToMaxValue.kt")
      public void testInexactToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/inexactToMaxValue.kt");
      }

      @Test
      @TestMetadata("maxValueMinusTwoToMaxValue.kt")
      public void testMaxValueMinusTwoToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/maxValueMinusTwoToMaxValue.kt");
      }

      @Test
      @TestMetadata("maxValueToMaxValue.kt")
      public void testMaxValueToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/maxValueToMaxValue.kt");
      }

      @Test
      @TestMetadata("maxValueToMinValue.kt")
      public void testMaxValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/maxValueToMinValue.kt");
      }

      @Test
      @TestMetadata("oneElementDownTo.kt")
      public void testOneElementDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/oneElementDownTo.kt");
      }

      @Test
      @TestMetadata("oneElementRange.kt")
      public void testOneElementRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/oneElementRange.kt");
      }

      @Test
      @TestMetadata("openRange.kt")
      public void testOpenRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/openRange.kt");
      }

      @Test
      @TestMetadata("openRangeUntil.kt")
      public void testOpenRangeUntil() {
        runTest("compiler/testData/codegen/box/ranges/literal/openRangeUntil.kt");
      }

      @Test
      @TestMetadata("overflowZeroDownToMaxValue.kt")
      public void testOverflowZeroDownToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/overflowZeroDownToMaxValue.kt");
      }

      @Test
      @TestMetadata("overflowZeroToMinValue.kt")
      public void testOverflowZeroToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/overflowZeroToMinValue.kt");
      }

      @Test
      @TestMetadata("progressionDownToMinValue.kt")
      public void testProgressionDownToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionDownToMinValue.kt");
      }

      @Test
      @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
      public void testProgressionMaxValueMinusTwoToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueMinusTwoToMaxValue.kt");
      }

      @Test
      @TestMetadata("progressionMaxValueToMaxValue.kt")
      public void testProgressionMaxValueToMaxValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueToMaxValue.kt");
      }

      @Test
      @TestMetadata("progressionMaxValueToMinValue.kt")
      public void testProgressionMaxValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueToMinValue.kt");
      }

      @Test
      @TestMetadata("progressionMinValueToMinValue.kt")
      public void testProgressionMinValueToMinValue() {
        runTest("compiler/testData/codegen/box/ranges/literal/progressionMinValueToMinValue.kt");
      }

      @Test
      @TestMetadata("reversedBackSequence.kt")
      public void testReversedBackSequence() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedBackSequence.kt");
      }

      @Test
      @TestMetadata("reversedEmptyBackSequence.kt")
      public void testReversedEmptyBackSequence() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedEmptyBackSequence.kt");
      }

      @Test
      @TestMetadata("reversedEmptyRange.kt")
      public void testReversedEmptyRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedEmptyRange.kt");
      }

      @Test
      @TestMetadata("reversedInexactSteppedDownTo.kt")
      public void testReversedInexactSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedInexactSteppedDownTo.kt");
      }

      @Test
      @TestMetadata("reversedRange.kt")
      public void testReversedRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedRange.kt");
      }

      @Test
      @TestMetadata("reversedSimpleSteppedRange.kt")
      public void testReversedSimpleSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/reversedSimpleSteppedRange.kt");
      }

      @Test
      @TestMetadata("simpleDownTo.kt")
      public void testSimpleDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleDownTo.kt");
      }

      @Test
      @TestMetadata("simpleRange.kt")
      public void testSimpleRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleRange.kt");
      }

      @Test
      @TestMetadata("simpleRangeWithNonConstantEnds.kt")
      public void testSimpleRangeWithNonConstantEnds() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleRangeWithNonConstantEnds.kt");
      }

      @Test
      @TestMetadata("simpleSteppedDownTo.kt")
      public void testSimpleSteppedDownTo() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleSteppedDownTo.kt");
      }

      @Test
      @TestMetadata("simpleSteppedRange.kt")
      public void testSimpleSteppedRange() {
        runTest("compiler/testData/codegen/box/ranges/literal/simpleSteppedRange.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/nullableLoopParameter")
    @TestDataPath("$PROJECT_ROOT")
    public class NullableLoopParameter {
      @Test
      public void testAllFilesPresentInNullableLoopParameter() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/nullableLoopParameter"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("progressionExpression.kt")
      public void testProgressionExpression() {
        runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/progressionExpression.kt");
      }

      @Test
      @TestMetadata("rangeExpression.kt")
      public void testRangeExpression() {
        runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/rangeExpression.kt");
      }

      @Test
      @TestMetadata("rangeLiteral.kt")
      public void testRangeLiteral() {
        runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/rangeLiteral.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/stepped")
    @TestDataPath("$PROJECT_ROOT")
    public class Stepped {
      @Test
      public void testAllFilesPresentInStepped() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Expression {
        @Test
        public void testAllFilesPresentInExpression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/downTo")
        @TestDataPath("$PROJECT_ROOT")
        public class DownTo {
          @Test
          public void testAllFilesPresentInDownTo() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/downTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyProgression.kt")
          public void testEmptyProgression() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/emptyProgression.kt");
          }

          @Test
          @TestMetadata("illegalStepNegative.kt")
          public void testIllegalStepNegative() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/illegalStepNegative.kt");
          }

          @Test
          @TestMetadata("illegalStepNonConst.kt")
          public void testIllegalStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/illegalStepNonConst.kt");
          }

          @Test
          @TestMetadata("illegalStepThenLegalStep.kt")
          public void testIllegalStepThenLegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/illegalStepThenLegalStep.kt");
          }

          @Test
          @TestMetadata("illegalStepZero.kt")
          public void testIllegalStepZero() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/illegalStepZero.kt");
          }

          @Test
          @TestMetadata("legalStepThenIllegalStep.kt")
          public void testLegalStepThenIllegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/legalStepThenIllegalStep.kt");
          }

          @Test
          @TestMetadata("maxValueToMinValueStepMaxValue.kt")
          public void testMaxValueToMinValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/maxValueToMinValueStepMaxValue.kt");
          }

          @Test
          @TestMetadata("maxValueToOneStepMaxValue.kt")
          public void testMaxValueToOneStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/maxValueToOneStepMaxValue.kt");
          }

          @Test
          @TestMetadata("maxValueToZeroStepMaxValue.kt")
          public void testMaxValueToZeroStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/maxValueToZeroStepMaxValue.kt");
          }

          @Test
          @TestMetadata("mixedTypeStep.kt")
          public void testMixedTypeStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/mixedTypeStep.kt");
          }

          @Test
          @TestMetadata("singleElementStepTwo.kt")
          public void testSingleElementStepTwo() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/singleElementStepTwo.kt");
          }

          @Test
          @TestMetadata("stepNonConst.kt")
          public void testStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepNonConst.kt");
          }

          @Test
          @TestMetadata("stepOne.kt")
          public void testStepOne() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepOne.kt");
          }

          @Test
          @TestMetadata("stepToOutsideRange.kt")
          public void testStepToOutsideRange() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepToOutsideRange.kt");
          }

          @Test
          @TestMetadata("stepToSameLast.kt")
          public void testStepToSameLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepToSameLast.kt");
          }

          @Test
          @TestMetadata("stepToSmallerLast.kt")
          public void testStepToSmallerLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepToSmallerLast.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep")
          @TestDataPath("$PROJECT_ROOT")
          public class NestedStep {
            @Test
            public void testAllFilesPresentInNestedStep() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("stepOneThenStepOne.kt")
            public void testStepOneThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepOneThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepThenSameStep.kt")
            public void testStepThenSameStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepThenSameStep.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepOne.kt")
            public void testStepToSameLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSameLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
            public void testStepToSameLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
            public void testStepToSameLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepOne.kt")
            public void testStepToSmallerLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSmallerLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
            public void testStepToSmallerLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
            public void testStepToSmallerLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed")
          @TestDataPath("$PROJECT_ROOT")
          public class Reversed {
            @Test
            public void testAllFilesPresentInReversed() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("reversedThenStep.kt")
            public void testReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/reversedThenStep.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversed.kt")
            public void testReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/reversedThenStepThenReversed.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
            public void testReversedThenStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/reversedThenStepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversed.kt")
            public void testStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/stepThenReversed.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStep.kt")
            public void testStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/stepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
            public void testStepThenReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/stepThenReversedThenStepThenReversed.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo")
        @TestDataPath("$PROJECT_ROOT")
        public class RangeTo {
          @Test
          public void testAllFilesPresentInRangeTo() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyProgression.kt")
          public void testEmptyProgression() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/emptyProgression.kt");
          }

          @Test
          @TestMetadata("illegalStepNegative.kt")
          public void testIllegalStepNegative() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/illegalStepNegative.kt");
          }

          @Test
          @TestMetadata("illegalStepNonConst.kt")
          public void testIllegalStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/illegalStepNonConst.kt");
          }

          @Test
          @TestMetadata("illegalStepThenLegalStep.kt")
          public void testIllegalStepThenLegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/illegalStepThenLegalStep.kt");
          }

          @Test
          @TestMetadata("illegalStepZero.kt")
          public void testIllegalStepZero() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/illegalStepZero.kt");
          }

          @Test
          @TestMetadata("legalStepThenIllegalStep.kt")
          public void testLegalStepThenIllegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/legalStepThenIllegalStep.kt");
          }

          @Test
          @TestMetadata("minValueToMaxValueStepMaxValue.kt")
          public void testMinValueToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/minValueToMaxValueStepMaxValue.kt");
          }

          @Test
          @TestMetadata("mixedTypeStep.kt")
          public void testMixedTypeStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/mixedTypeStep.kt");
          }

          @Test
          @TestMetadata("oneToMaxValueStepMaxValue.kt")
          public void testOneToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/oneToMaxValueStepMaxValue.kt");
          }

          @Test
          @TestMetadata("singleElementStepTwo.kt")
          public void testSingleElementStepTwo() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/singleElementStepTwo.kt");
          }

          @Test
          @TestMetadata("stepNonConst.kt")
          public void testStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepNonConst.kt");
          }

          @Test
          @TestMetadata("stepOne.kt")
          public void testStepOne() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepOne.kt");
          }

          @Test
          @TestMetadata("stepToOutsideRange.kt")
          public void testStepToOutsideRange() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepToOutsideRange.kt");
          }

          @Test
          @TestMetadata("stepToSameLast.kt")
          public void testStepToSameLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepToSameLast.kt");
          }

          @Test
          @TestMetadata("stepToSmallerLast.kt")
          public void testStepToSmallerLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepToSmallerLast.kt");
          }

          @Test
          @TestMetadata("zeroToMaxValueStepMaxValue.kt")
          public void testZeroToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/zeroToMaxValueStepMaxValue.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep")
          @TestDataPath("$PROJECT_ROOT")
          public class NestedStep {
            @Test
            public void testAllFilesPresentInNestedStep() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("stepOneThenStepOne.kt")
            public void testStepOneThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepOneThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepThenSameStep.kt")
            public void testStepThenSameStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepThenSameStep.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepOne.kt")
            public void testStepToSameLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSameLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
            public void testStepToSameLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
            public void testStepToSameLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepOne.kt")
            public void testStepToSmallerLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSmallerLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
            public void testStepToSmallerLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
            public void testStepToSmallerLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed")
          @TestDataPath("$PROJECT_ROOT")
          public class Reversed {
            @Test
            public void testAllFilesPresentInReversed() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("reversedThenStep.kt")
            public void testReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/reversedThenStep.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversed.kt")
            public void testReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/reversedThenStepThenReversed.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
            public void testReversedThenStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/reversedThenStepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversed.kt")
            public void testStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/stepThenReversed.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStep.kt")
            public void testStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/stepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
            public void testStepThenReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/stepThenReversedThenStepThenReversed.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil")
        @TestDataPath("$PROJECT_ROOT")
        public class RangeUntil {
          @Test
          public void testAllFilesPresentInRangeUntil() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyProgression.kt")
          public void testEmptyProgression() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/emptyProgression.kt");
          }

          @Test
          @TestMetadata("illegalStepNegative.kt")
          public void testIllegalStepNegative() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/illegalStepNegative.kt");
          }

          @Test
          @TestMetadata("illegalStepThenLegalStep.kt")
          public void testIllegalStepThenLegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/illegalStepThenLegalStep.kt");
          }

          @Test
          @TestMetadata("illegalStepZero.kt")
          public void testIllegalStepZero() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/illegalStepZero.kt");
          }

          @Test
          @TestMetadata("legalStepThenIllegalStep.kt")
          public void testLegalStepThenIllegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/legalStepThenIllegalStep.kt");
          }

          @Test
          @TestMetadata("singleElementStepTwo.kt")
          public void testSingleElementStepTwo() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/singleElementStepTwo.kt");
          }

          @Test
          @TestMetadata("stepOne.kt")
          public void testStepOne() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/stepOne.kt");
          }

          @Test
          @TestMetadata("stepToOutsideRange.kt")
          public void testStepToOutsideRange() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/stepToOutsideRange.kt");
          }

          @Test
          @TestMetadata("stepToSameLast.kt")
          public void testStepToSameLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/stepToSameLast.kt");
          }

          @Test
          @TestMetadata("stepToSmallerLast.kt")
          public void testStepToSmallerLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/stepToSmallerLast.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep")
          @TestDataPath("$PROJECT_ROOT")
          public class NestedStep {
            @Test
            public void testAllFilesPresentInNestedStep() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("stepOneThenStepOne.kt")
            public void testStepOneThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep/stepOneThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepThenSameStep.kt")
            public void testStepThenSameStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep/stepThenSameStep.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepOne.kt")
            public void testStepToSameLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep/stepToSameLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
            public void testStepToSameLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep/stepToSameLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
            public void testStepToSameLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepOne.kt")
            public void testStepToSmallerLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep/stepToSmallerLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
            public void testStepToSmallerLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
            public void testStepToSmallerLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/reversed")
          @TestDataPath("$PROJECT_ROOT")
          public class Reversed {
            @Test
            public void testAllFilesPresentInReversed() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("reversedThenStep.kt")
            public void testReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/reversed/reversedThenStep.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversed.kt")
            public void testReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/reversed/reversedThenStepThenReversed.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
            public void testReversedThenStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/reversed/reversedThenStepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversed.kt")
            public void testStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/reversed/stepThenReversed.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStep.kt")
            public void testStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/reversed/stepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
            public void testStepThenReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeUntil/reversed/stepThenReversedThenStepThenReversed.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/until")
        @TestDataPath("$PROJECT_ROOT")
        public class Until {
          @Test
          public void testAllFilesPresentInUntil() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/until"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyProgression.kt")
          public void testEmptyProgression() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/emptyProgression.kt");
          }

          @Test
          @TestMetadata("emptyProgressionToMinValue.kt")
          public void testEmptyProgressionToMinValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/emptyProgressionToMinValue.kt");
          }

          @Test
          @TestMetadata("illegalStepNegative.kt")
          public void testIllegalStepNegative() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/illegalStepNegative.kt");
          }

          @Test
          @TestMetadata("illegalStepNonConst.kt")
          public void testIllegalStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/illegalStepNonConst.kt");
          }

          @Test
          @TestMetadata("illegalStepThenLegalStep.kt")
          public void testIllegalStepThenLegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/illegalStepThenLegalStep.kt");
          }

          @Test
          @TestMetadata("illegalStepZero.kt")
          public void testIllegalStepZero() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/illegalStepZero.kt");
          }

          @Test
          @TestMetadata("legalStepThenIllegalStep.kt")
          public void testLegalStepThenIllegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/legalStepThenIllegalStep.kt");
          }

          @Test
          @TestMetadata("minValueToMaxValueStepMaxValue.kt")
          public void testMinValueToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/minValueToMaxValueStepMaxValue.kt");
          }

          @Test
          @TestMetadata("mixedTypeStep.kt")
          public void testMixedTypeStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/mixedTypeStep.kt");
          }

          @Test
          @TestMetadata("progressionToNonConst.kt")
          public void testProgressionToNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/progressionToNonConst.kt");
          }

          @Test
          @TestMetadata("singleElementStepTwo.kt")
          public void testSingleElementStepTwo() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/singleElementStepTwo.kt");
          }

          @Test
          @TestMetadata("stepNonConst.kt")
          public void testStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepNonConst.kt");
          }

          @Test
          @TestMetadata("stepOne.kt")
          public void testStepOne() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepOne.kt");
          }

          @Test
          @TestMetadata("stepToOutsideRange.kt")
          public void testStepToOutsideRange() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepToOutsideRange.kt");
          }

          @Test
          @TestMetadata("stepToSameLast.kt")
          public void testStepToSameLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepToSameLast.kt");
          }

          @Test
          @TestMetadata("stepToSmallerLast.kt")
          public void testStepToSmallerLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepToSmallerLast.kt");
          }

          @Test
          @TestMetadata("zeroToMaxValueStepMaxValue.kt")
          public void testZeroToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/zeroToMaxValueStepMaxValue.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep")
          @TestDataPath("$PROJECT_ROOT")
          public class NestedStep {
            @Test
            public void testAllFilesPresentInNestedStep() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("stepOneThenStepOne.kt")
            public void testStepOneThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepOneThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepThenSameStep.kt")
            public void testStepThenSameStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepThenSameStep.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepOne.kt")
            public void testStepToSameLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSameLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
            public void testStepToSameLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSameLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
            public void testStepToSameLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepOne.kt")
            public void testStepToSmallerLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSmallerLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
            public void testStepToSmallerLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
            public void testStepToSmallerLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed")
          @TestDataPath("$PROJECT_ROOT")
          public class Reversed {
            @Test
            public void testAllFilesPresentInReversed() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("reversedThenStep.kt")
            public void testReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/reversedThenStep.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversed.kt")
            public void testReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/reversedThenStepThenReversed.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
            public void testReversedThenStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/reversedThenStepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversed.kt")
            public void testStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/stepThenReversed.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStep.kt")
            public void testStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/stepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
            public void testStepThenReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/stepThenReversedThenStepThenReversed.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal")
      @TestDataPath("$PROJECT_ROOT")
      public class Literal {
        @Test
        public void testAllFilesPresentInLiteral() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/downTo")
        @TestDataPath("$PROJECT_ROOT")
        public class DownTo {
          @Test
          public void testAllFilesPresentInDownTo() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/downTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyProgression.kt")
          public void testEmptyProgression() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/emptyProgression.kt");
          }

          @Test
          @TestMetadata("illegalStepNegative.kt")
          public void testIllegalStepNegative() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/illegalStepNegative.kt");
          }

          @Test
          @TestMetadata("illegalStepNonConst.kt")
          public void testIllegalStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/illegalStepNonConst.kt");
          }

          @Test
          @TestMetadata("illegalStepThenLegalStep.kt")
          public void testIllegalStepThenLegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/illegalStepThenLegalStep.kt");
          }

          @Test
          @TestMetadata("illegalStepZero.kt")
          public void testIllegalStepZero() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/illegalStepZero.kt");
          }

          @Test
          @TestMetadata("legalStepThenIllegalStep.kt")
          public void testLegalStepThenIllegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/legalStepThenIllegalStep.kt");
          }

          @Test
          @TestMetadata("maxValueToMinValueStepMaxValue.kt")
          public void testMaxValueToMinValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/maxValueToMinValueStepMaxValue.kt");
          }

          @Test
          @TestMetadata("maxValueToOneStepMaxValue.kt")
          public void testMaxValueToOneStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/maxValueToOneStepMaxValue.kt");
          }

          @Test
          @TestMetadata("maxValueToZeroStepMaxValue.kt")
          public void testMaxValueToZeroStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/maxValueToZeroStepMaxValue.kt");
          }

          @Test
          @TestMetadata("mixedTypeStep.kt")
          public void testMixedTypeStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/mixedTypeStep.kt");
          }

          @Test
          @TestMetadata("singleElementStepTwo.kt")
          public void testSingleElementStepTwo() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/singleElementStepTwo.kt");
          }

          @Test
          @TestMetadata("stepNonConst.kt")
          public void testStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepNonConst.kt");
          }

          @Test
          @TestMetadata("stepOne.kt")
          public void testStepOne() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepOne.kt");
          }

          @Test
          @TestMetadata("stepToOutsideRange.kt")
          public void testStepToOutsideRange() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepToOutsideRange.kt");
          }

          @Test
          @TestMetadata("stepToSameLast.kt")
          public void testStepToSameLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepToSameLast.kt");
          }

          @Test
          @TestMetadata("stepToSmallerLast.kt")
          public void testStepToSmallerLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepToSmallerLast.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep")
          @TestDataPath("$PROJECT_ROOT")
          public class NestedStep {
            @Test
            public void testAllFilesPresentInNestedStep() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("stepOneThenStepOne.kt")
            public void testStepOneThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepOneThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepThenSameStep.kt")
            public void testStepThenSameStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepThenSameStep.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepOne.kt")
            public void testStepToSameLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSameLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
            public void testStepToSameLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
            public void testStepToSameLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepOne.kt")
            public void testStepToSmallerLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSmallerLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
            public void testStepToSmallerLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
            public void testStepToSmallerLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed")
          @TestDataPath("$PROJECT_ROOT")
          public class Reversed {
            @Test
            public void testAllFilesPresentInReversed() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("reversedThenStep.kt")
            public void testReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/reversedThenStep.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversed.kt")
            public void testReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/reversedThenStepThenReversed.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
            public void testReversedThenStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/reversedThenStepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversed.kt")
            public void testStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/stepThenReversed.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStep.kt")
            public void testStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/stepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
            public void testStepThenReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/stepThenReversedThenStepThenReversed.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo")
        @TestDataPath("$PROJECT_ROOT")
        public class RangeTo {
          @Test
          public void testAllFilesPresentInRangeTo() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyProgression.kt")
          public void testEmptyProgression() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/emptyProgression.kt");
          }

          @Test
          @TestMetadata("illegalStepNegative.kt")
          public void testIllegalStepNegative() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/illegalStepNegative.kt");
          }

          @Test
          @TestMetadata("illegalStepNonConst.kt")
          public void testIllegalStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/illegalStepNonConst.kt");
          }

          @Test
          @TestMetadata("illegalStepThenLegalStep.kt")
          public void testIllegalStepThenLegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/illegalStepThenLegalStep.kt");
          }

          @Test
          @TestMetadata("illegalStepZero.kt")
          public void testIllegalStepZero() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/illegalStepZero.kt");
          }

          @Test
          @TestMetadata("legalStepThenIllegalStep.kt")
          public void testLegalStepThenIllegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/legalStepThenIllegalStep.kt");
          }

          @Test
          @TestMetadata("minValueToMaxValueStepMaxValue.kt")
          public void testMinValueToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/minValueToMaxValueStepMaxValue.kt");
          }

          @Test
          @TestMetadata("mixedTypeStep.kt")
          public void testMixedTypeStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/mixedTypeStep.kt");
          }

          @Test
          @TestMetadata("oneToMaxValueStepMaxValue.kt")
          public void testOneToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/oneToMaxValueStepMaxValue.kt");
          }

          @Test
          @TestMetadata("singleElementStepTwo.kt")
          public void testSingleElementStepTwo() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/singleElementStepTwo.kt");
          }

          @Test
          @TestMetadata("stepNonConst.kt")
          public void testStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepNonConst.kt");
          }

          @Test
          @TestMetadata("stepOne.kt")
          public void testStepOne() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepOne.kt");
          }

          @Test
          @TestMetadata("stepToOutsideRange.kt")
          public void testStepToOutsideRange() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepToOutsideRange.kt");
          }

          @Test
          @TestMetadata("stepToSameLast.kt")
          public void testStepToSameLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepToSameLast.kt");
          }

          @Test
          @TestMetadata("stepToSmallerLast.kt")
          public void testStepToSmallerLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepToSmallerLast.kt");
          }

          @Test
          @TestMetadata("zeroToMaxValueStepMaxValue.kt")
          public void testZeroToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/zeroToMaxValueStepMaxValue.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep")
          @TestDataPath("$PROJECT_ROOT")
          public class NestedStep {
            @Test
            public void testAllFilesPresentInNestedStep() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("stepOneThenStepOne.kt")
            public void testStepOneThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepOneThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepThenSameStep.kt")
            public void testStepThenSameStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepThenSameStep.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepOne.kt")
            public void testStepToSameLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSameLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
            public void testStepToSameLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
            public void testStepToSameLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepOne.kt")
            public void testStepToSmallerLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSmallerLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
            public void testStepToSmallerLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
            public void testStepToSmallerLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed")
          @TestDataPath("$PROJECT_ROOT")
          public class Reversed {
            @Test
            public void testAllFilesPresentInReversed() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("reversedThenStep.kt")
            public void testReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/reversedThenStep.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversed.kt")
            public void testReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/reversedThenStepThenReversed.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
            public void testReversedThenStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/reversedThenStepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversed.kt")
            public void testStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/stepThenReversed.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStep.kt")
            public void testStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/stepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
            public void testStepThenReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/stepThenReversedThenStepThenReversed.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil")
        @TestDataPath("$PROJECT_ROOT")
        public class RangeUntil {
          @Test
          public void testAllFilesPresentInRangeUntil() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyProgression.kt")
          public void testEmptyProgression() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/emptyProgression.kt");
          }

          @Test
          @TestMetadata("illegalStepNegative.kt")
          public void testIllegalStepNegative() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/illegalStepNegative.kt");
          }

          @Test
          @TestMetadata("illegalStepThenLegalStep.kt")
          public void testIllegalStepThenLegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/illegalStepThenLegalStep.kt");
          }

          @Test
          @TestMetadata("illegalStepZero.kt")
          public void testIllegalStepZero() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/illegalStepZero.kt");
          }

          @Test
          @TestMetadata("legalStepThenIllegalStep.kt")
          public void testLegalStepThenIllegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/legalStepThenIllegalStep.kt");
          }

          @Test
          @TestMetadata("singleElementStepTwo.kt")
          public void testSingleElementStepTwo() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/singleElementStepTwo.kt");
          }

          @Test
          @TestMetadata("stepOne.kt")
          public void testStepOne() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/stepOne.kt");
          }

          @Test
          @TestMetadata("stepToOutsideRange.kt")
          public void testStepToOutsideRange() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/stepToOutsideRange.kt");
          }

          @Test
          @TestMetadata("stepToSameLast.kt")
          public void testStepToSameLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/stepToSameLast.kt");
          }

          @Test
          @TestMetadata("stepToSmallerLast.kt")
          public void testStepToSmallerLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/stepToSmallerLast.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep")
          @TestDataPath("$PROJECT_ROOT")
          public class NestedStep {
            @Test
            public void testAllFilesPresentInNestedStep() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("stepOneThenStepOne.kt")
            public void testStepOneThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep/stepOneThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepThenSameStep.kt")
            public void testStepThenSameStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep/stepThenSameStep.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepOne.kt")
            public void testStepToSameLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep/stepToSameLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
            public void testStepToSameLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep/stepToSameLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
            public void testStepToSameLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepOne.kt")
            public void testStepToSmallerLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep/stepToSmallerLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
            public void testStepToSmallerLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
            public void testStepToSmallerLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/reversed")
          @TestDataPath("$PROJECT_ROOT")
          public class Reversed {
            @Test
            public void testAllFilesPresentInReversed() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("reversedThenStep.kt")
            public void testReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/reversed/reversedThenStep.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversed.kt")
            public void testReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/reversed/reversedThenStepThenReversed.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
            public void testReversedThenStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/reversed/reversedThenStepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversed.kt")
            public void testStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/reversed/stepThenReversed.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStep.kt")
            public void testStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/reversed/stepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
            public void testStepThenReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeUntil/reversed/stepThenReversedThenStepThenReversed.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/until")
        @TestDataPath("$PROJECT_ROOT")
        public class Until {
          @Test
          public void testAllFilesPresentInUntil() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/until"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Test
          @TestMetadata("emptyProgression.kt")
          public void testEmptyProgression() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/emptyProgression.kt");
          }

          @Test
          @TestMetadata("emptyProgressionToMinValue.kt")
          public void testEmptyProgressionToMinValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/emptyProgressionToMinValue.kt");
          }

          @Test
          @TestMetadata("illegalStepNegative.kt")
          public void testIllegalStepNegative() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/illegalStepNegative.kt");
          }

          @Test
          @TestMetadata("illegalStepNonConst.kt")
          public void testIllegalStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/illegalStepNonConst.kt");
          }

          @Test
          @TestMetadata("illegalStepThenLegalStep.kt")
          public void testIllegalStepThenLegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/illegalStepThenLegalStep.kt");
          }

          @Test
          @TestMetadata("illegalStepZero.kt")
          public void testIllegalStepZero() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/illegalStepZero.kt");
          }

          @Test
          @TestMetadata("legalStepThenIllegalStep.kt")
          public void testLegalStepThenIllegalStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/legalStepThenIllegalStep.kt");
          }

          @Test
          @TestMetadata("minValueToMaxValueStepMaxValue.kt")
          public void testMinValueToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/minValueToMaxValueStepMaxValue.kt");
          }

          @Test
          @TestMetadata("mixedTypeStep.kt")
          public void testMixedTypeStep() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/mixedTypeStep.kt");
          }

          @Test
          @TestMetadata("progressionToNonConst.kt")
          public void testProgressionToNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/progressionToNonConst.kt");
          }

          @Test
          @TestMetadata("singleElementStepTwo.kt")
          public void testSingleElementStepTwo() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/singleElementStepTwo.kt");
          }

          @Test
          @TestMetadata("stepNonConst.kt")
          public void testStepNonConst() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepNonConst.kt");
          }

          @Test
          @TestMetadata("stepOne.kt")
          public void testStepOne() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepOne.kt");
          }

          @Test
          @TestMetadata("stepToOutsideRange.kt")
          public void testStepToOutsideRange() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepToOutsideRange.kt");
          }

          @Test
          @TestMetadata("stepToSameLast.kt")
          public void testStepToSameLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepToSameLast.kt");
          }

          @Test
          @TestMetadata("stepToSmallerLast.kt")
          public void testStepToSmallerLast() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepToSmallerLast.kt");
          }

          @Test
          @TestMetadata("zeroToMaxValueStepMaxValue.kt")
          public void testZeroToMaxValueStepMaxValue() {
            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/zeroToMaxValueStepMaxValue.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep")
          @TestDataPath("$PROJECT_ROOT")
          public class NestedStep {
            @Test
            public void testAllFilesPresentInNestedStep() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("stepOneThenStepOne.kt")
            public void testStepOneThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepOneThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepThenSameStep.kt")
            public void testStepThenSameStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepThenSameStep.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepOne.kt")
            public void testStepToSameLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSameLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
            public void testStepToSameLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSameLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
            public void testStepToSameLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepOne.kt")
            public void testStepToSmallerLastThenStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSmallerLastThenStepOne.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
            public void testStepToSmallerLastThenStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
            public void testStepToSmallerLastThenStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed")
          @TestDataPath("$PROJECT_ROOT")
          public class Reversed {
            @Test
            public void testAllFilesPresentInReversed() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("reversedThenStep.kt")
            public void testReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/reversedThenStep.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversed.kt")
            public void testReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/reversedThenStepThenReversed.kt");
            }

            @Test
            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
            public void testReversedThenStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/reversedThenStepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversed.kt")
            public void testStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/stepThenReversed.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStep.kt")
            public void testStepThenReversedThenStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/stepThenReversedThenStep.kt");
            }

            @Test
            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
            public void testStepThenReversedThenStepThenReversed() {
              runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/stepThenReversedThenStepThenReversed.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned")
      @TestDataPath("$PROJECT_ROOT")
      public class Unsigned {
        @Test
        public void testAllFilesPresentInUnsigned() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Expression {
          @Test
          public void testAllFilesPresentInExpression() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo")
          @TestDataPath("$PROJECT_ROOT")
          public class DownTo {
            @Test
            public void testAllFilesPresentInDownTo() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("emptyProgression.kt")
            public void testEmptyProgression() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/emptyProgression.kt");
            }

            @Test
            @TestMetadata("illegalStepNegative.kt")
            public void testIllegalStepNegative() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/illegalStepNegative.kt");
            }

            @Test
            @TestMetadata("illegalStepNonConst.kt")
            public void testIllegalStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/illegalStepNonConst.kt");
            }

            @Test
            @TestMetadata("illegalStepThenLegalStep.kt")
            public void testIllegalStepThenLegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/illegalStepThenLegalStep.kt");
            }

            @Test
            @TestMetadata("illegalStepZero.kt")
            public void testIllegalStepZero() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/illegalStepZero.kt");
            }

            @Test
            @TestMetadata("legalStepThenIllegalStep.kt")
            public void testLegalStepThenIllegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/legalStepThenIllegalStep.kt");
            }

            @Test
            @TestMetadata("maxValueToMinValueStepMaxValue.kt")
            public void testMaxValueToMinValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/maxValueToMinValueStepMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueToOneStepMaxValue.kt")
            public void testMaxValueToOneStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/maxValueToOneStepMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueToZeroStepMaxValue.kt")
            public void testMaxValueToZeroStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/maxValueToZeroStepMaxValue.kt");
            }

            @Test
            @TestMetadata("mixedTypeStep.kt")
            public void testMixedTypeStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/mixedTypeStep.kt");
            }

            @Test
            @TestMetadata("singleElementStepTwo.kt")
            public void testSingleElementStepTwo() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/singleElementStepTwo.kt");
            }

            @Test
            @TestMetadata("stepNonConst.kt")
            public void testStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepNonConst.kt");
            }

            @Test
            @TestMetadata("stepOne.kt")
            public void testStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepOne.kt");
            }

            @Test
            @TestMetadata("stepToOutsideRange.kt")
            public void testStepToOutsideRange() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepToOutsideRange.kt");
            }

            @Test
            @TestMetadata("stepToSameLast.kt")
            public void testStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLast.kt")
            public void testStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepToSmallerLast.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep")
            @TestDataPath("$PROJECT_ROOT")
            public class NestedStep {
              @Test
              public void testAllFilesPresentInNestedStep() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("stepOneThenStepOne.kt")
              public void testStepOneThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepOneThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepThenSameStep.kt")
              public void testStepThenSameStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepThenSameStep.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepOne.kt")
              public void testStepToSameLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSameLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSameLast.kt")
              public void testStepToSameLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
              public void testStepToSameLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepOne.kt")
              public void testStepToSmallerLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSmallerLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
              public void testStepToSmallerLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
              public void testStepToSmallerLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed")
            @TestDataPath("$PROJECT_ROOT")
            public class Reversed {
              @Test
              public void testAllFilesPresentInReversed() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("reversedThenStep.kt")
              public void testReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/reversedThenStep.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversed.kt")
              public void testReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/reversedThenStepThenReversed.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversedThenStep.kt")
              public void testReversedThenStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/reversedThenStepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversed.kt")
              public void testStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/stepThenReversed.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStep.kt")
              public void testStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/stepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStepThenReversed.kt")
              public void testStepThenReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/stepThenReversedThenStepThenReversed.kt");
              }
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo")
          @TestDataPath("$PROJECT_ROOT")
          public class RangeTo {
            @Test
            public void testAllFilesPresentInRangeTo() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("emptyProgression.kt")
            public void testEmptyProgression() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/emptyProgression.kt");
            }

            @Test
            @TestMetadata("illegalStepNegative.kt")
            public void testIllegalStepNegative() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/illegalStepNegative.kt");
            }

            @Test
            @TestMetadata("illegalStepNonConst.kt")
            public void testIllegalStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/illegalStepNonConst.kt");
            }

            @Test
            @TestMetadata("illegalStepThenLegalStep.kt")
            public void testIllegalStepThenLegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/illegalStepThenLegalStep.kt");
            }

            @Test
            @TestMetadata("illegalStepZero.kt")
            public void testIllegalStepZero() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/illegalStepZero.kt");
            }

            @Test
            @TestMetadata("legalStepThenIllegalStep.kt")
            public void testLegalStepThenIllegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/legalStepThenIllegalStep.kt");
            }

            @Test
            @TestMetadata("minValueToMaxValueStepMaxValue.kt")
            public void testMinValueToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/minValueToMaxValueStepMaxValue.kt");
            }

            @Test
            @TestMetadata("mixedTypeStep.kt")
            public void testMixedTypeStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/mixedTypeStep.kt");
            }

            @Test
            @TestMetadata("oneToMaxValueStepMaxValue.kt")
            public void testOneToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/oneToMaxValueStepMaxValue.kt");
            }

            @Test
            @TestMetadata("singleElementStepTwo.kt")
            public void testSingleElementStepTwo() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/singleElementStepTwo.kt");
            }

            @Test
            @TestMetadata("stepNonConst.kt")
            public void testStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepNonConst.kt");
            }

            @Test
            @TestMetadata("stepOne.kt")
            public void testStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepOne.kt");
            }

            @Test
            @TestMetadata("stepToOutsideRange.kt")
            public void testStepToOutsideRange() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepToOutsideRange.kt");
            }

            @Test
            @TestMetadata("stepToSameLast.kt")
            public void testStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLast.kt")
            public void testStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("zeroToMaxValueStepMaxValue.kt")
            public void testZeroToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/zeroToMaxValueStepMaxValue.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep")
            @TestDataPath("$PROJECT_ROOT")
            public class NestedStep {
              @Test
              public void testAllFilesPresentInNestedStep() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("stepOneThenStepOne.kt")
              public void testStepOneThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepOneThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepThenSameStep.kt")
              public void testStepThenSameStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepThenSameStep.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepOne.kt")
              public void testStepToSameLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSameLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSameLast.kt")
              public void testStepToSameLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
              public void testStepToSameLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepOne.kt")
              public void testStepToSmallerLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSmallerLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
              public void testStepToSmallerLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
              public void testStepToSmallerLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed")
            @TestDataPath("$PROJECT_ROOT")
            public class Reversed {
              @Test
              public void testAllFilesPresentInReversed() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("reversedThenStep.kt")
              public void testReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/reversedThenStep.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversed.kt")
              public void testReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/reversedThenStepThenReversed.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversedThenStep.kt")
              public void testReversedThenStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/reversedThenStepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversed.kt")
              public void testStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/stepThenReversed.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStep.kt")
              public void testStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/stepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStepThenReversed.kt")
              public void testStepThenReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/stepThenReversedThenStepThenReversed.kt");
              }
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil")
          @TestDataPath("$PROJECT_ROOT")
          public class RangeUntil {
            @Test
            public void testAllFilesPresentInRangeUntil() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("emptyProgression.kt")
            public void testEmptyProgression() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/emptyProgression.kt");
            }

            @Test
            @TestMetadata("illegalStepNegative.kt")
            public void testIllegalStepNegative() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/illegalStepNegative.kt");
            }

            @Test
            @TestMetadata("illegalStepThenLegalStep.kt")
            public void testIllegalStepThenLegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/illegalStepThenLegalStep.kt");
            }

            @Test
            @TestMetadata("illegalStepZero.kt")
            public void testIllegalStepZero() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/illegalStepZero.kt");
            }

            @Test
            @TestMetadata("legalStepThenIllegalStep.kt")
            public void testLegalStepThenIllegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/legalStepThenIllegalStep.kt");
            }

            @Test
            @TestMetadata("singleElementStepTwo.kt")
            public void testSingleElementStepTwo() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/singleElementStepTwo.kt");
            }

            @Test
            @TestMetadata("stepOne.kt")
            public void testStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/stepOne.kt");
            }

            @Test
            @TestMetadata("stepToOutsideRange.kt")
            public void testStepToOutsideRange() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/stepToOutsideRange.kt");
            }

            @Test
            @TestMetadata("stepToSameLast.kt")
            public void testStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/stepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLast.kt")
            public void testStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/stepToSmallerLast.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep")
            @TestDataPath("$PROJECT_ROOT")
            public class NestedStep {
              @Test
              public void testAllFilesPresentInNestedStep() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("stepOneThenStepOne.kt")
              public void testStepOneThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep/stepOneThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepThenSameStep.kt")
              public void testStepThenSameStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep/stepThenSameStep.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepOne.kt")
              public void testStepToSameLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep/stepToSameLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSameLast.kt")
              public void testStepToSameLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep/stepToSameLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
              public void testStepToSameLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepOne.kt")
              public void testStepToSmallerLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep/stepToSmallerLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
              public void testStepToSmallerLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
              public void testStepToSmallerLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/reversed")
            @TestDataPath("$PROJECT_ROOT")
            public class Reversed {
              @Test
              public void testAllFilesPresentInReversed() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("reversedThenStep.kt")
              public void testReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/reversed/reversedThenStep.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversed.kt")
              public void testReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/reversed/reversedThenStepThenReversed.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversedThenStep.kt")
              public void testReversedThenStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/reversed/reversedThenStepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversed.kt")
              public void testStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/reversed/stepThenReversed.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStep.kt")
              public void testStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/reversed/stepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStepThenReversed.kt")
              public void testStepThenReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeUntil/reversed/stepThenReversedThenStepThenReversed.kt");
              }
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until")
          @TestDataPath("$PROJECT_ROOT")
          public class Until {
            @Test
            public void testAllFilesPresentInUntil() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("emptyProgression.kt")
            public void testEmptyProgression() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/emptyProgression.kt");
            }

            @Test
            @TestMetadata("emptyProgressionToMinValue.kt")
            public void testEmptyProgressionToMinValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/emptyProgressionToMinValue.kt");
            }

            @Test
            @TestMetadata("illegalStepNegative.kt")
            public void testIllegalStepNegative() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/illegalStepNegative.kt");
            }

            @Test
            @TestMetadata("illegalStepNonConst.kt")
            public void testIllegalStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/illegalStepNonConst.kt");
            }

            @Test
            @TestMetadata("illegalStepThenLegalStep.kt")
            public void testIllegalStepThenLegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/illegalStepThenLegalStep.kt");
            }

            @Test
            @TestMetadata("illegalStepZero.kt")
            public void testIllegalStepZero() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/illegalStepZero.kt");
            }

            @Test
            @TestMetadata("legalStepThenIllegalStep.kt")
            public void testLegalStepThenIllegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/legalStepThenIllegalStep.kt");
            }

            @Test
            @TestMetadata("minValueToMaxValueStepMaxValue.kt")
            public void testMinValueToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/minValueToMaxValueStepMaxValue.kt");
            }

            @Test
            @TestMetadata("mixedTypeStep.kt")
            public void testMixedTypeStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/mixedTypeStep.kt");
            }

            @Test
            @TestMetadata("progressionToNonConst.kt")
            public void testProgressionToNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/progressionToNonConst.kt");
            }

            @Test
            @TestMetadata("singleElementStepTwo.kt")
            public void testSingleElementStepTwo() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/singleElementStepTwo.kt");
            }

            @Test
            @TestMetadata("stepNonConst.kt")
            public void testStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepNonConst.kt");
            }

            @Test
            @TestMetadata("stepOne.kt")
            public void testStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepOne.kt");
            }

            @Test
            @TestMetadata("stepToOutsideRange.kt")
            public void testStepToOutsideRange() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepToOutsideRange.kt");
            }

            @Test
            @TestMetadata("stepToSameLast.kt")
            public void testStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLast.kt")
            public void testStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("zeroToMaxValueStepMaxValue.kt")
            public void testZeroToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/zeroToMaxValueStepMaxValue.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep")
            @TestDataPath("$PROJECT_ROOT")
            public class NestedStep {
              @Test
              public void testAllFilesPresentInNestedStep() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("stepOneThenStepOne.kt")
              public void testStepOneThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepOneThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepThenSameStep.kt")
              public void testStepThenSameStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepThenSameStep.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepOne.kt")
              public void testStepToSameLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSameLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSameLast.kt")
              public void testStepToSameLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSameLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
              public void testStepToSameLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepOne.kt")
              public void testStepToSmallerLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSmallerLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
              public void testStepToSmallerLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
              public void testStepToSmallerLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed")
            @TestDataPath("$PROJECT_ROOT")
            public class Reversed {
              @Test
              public void testAllFilesPresentInReversed() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("reversedThenStep.kt")
              public void testReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/reversedThenStep.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversed.kt")
              public void testReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/reversedThenStepThenReversed.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversedThenStep.kt")
              public void testReversedThenStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/reversedThenStepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversed.kt")
              public void testStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/stepThenReversed.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStep.kt")
              public void testStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/stepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStepThenReversed.kt")
              public void testStepThenReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/stepThenReversedThenStepThenReversed.kt");
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal")
        @TestDataPath("$PROJECT_ROOT")
        public class Literal {
          @Test
          public void testAllFilesPresentInLiteral() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo")
          @TestDataPath("$PROJECT_ROOT")
          public class DownTo {
            @Test
            public void testAllFilesPresentInDownTo() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("emptyProgression.kt")
            public void testEmptyProgression() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/emptyProgression.kt");
            }

            @Test
            @TestMetadata("illegalStepNegative.kt")
            public void testIllegalStepNegative() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/illegalStepNegative.kt");
            }

            @Test
            @TestMetadata("illegalStepNonConst.kt")
            public void testIllegalStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/illegalStepNonConst.kt");
            }

            @Test
            @TestMetadata("illegalStepThenLegalStep.kt")
            public void testIllegalStepThenLegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/illegalStepThenLegalStep.kt");
            }

            @Test
            @TestMetadata("illegalStepZero.kt")
            public void testIllegalStepZero() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/illegalStepZero.kt");
            }

            @Test
            @TestMetadata("legalStepThenIllegalStep.kt")
            public void testLegalStepThenIllegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/legalStepThenIllegalStep.kt");
            }

            @Test
            @TestMetadata("maxValueToMinValueStepMaxValue.kt")
            public void testMaxValueToMinValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/maxValueToMinValueStepMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueToOneStepMaxValue.kt")
            public void testMaxValueToOneStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/maxValueToOneStepMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueToZeroStepMaxValue.kt")
            public void testMaxValueToZeroStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/maxValueToZeroStepMaxValue.kt");
            }

            @Test
            @TestMetadata("mixedTypeStep.kt")
            public void testMixedTypeStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/mixedTypeStep.kt");
            }

            @Test
            @TestMetadata("singleElementStepTwo.kt")
            public void testSingleElementStepTwo() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/singleElementStepTwo.kt");
            }

            @Test
            @TestMetadata("stepNonConst.kt")
            public void testStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepNonConst.kt");
            }

            @Test
            @TestMetadata("stepOne.kt")
            public void testStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepOne.kt");
            }

            @Test
            @TestMetadata("stepToOutsideRange.kt")
            public void testStepToOutsideRange() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepToOutsideRange.kt");
            }

            @Test
            @TestMetadata("stepToSameLast.kt")
            public void testStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLast.kt")
            public void testStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepToSmallerLast.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep")
            @TestDataPath("$PROJECT_ROOT")
            public class NestedStep {
              @Test
              public void testAllFilesPresentInNestedStep() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("stepOneThenStepOne.kt")
              public void testStepOneThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepOneThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepThenSameStep.kt")
              public void testStepThenSameStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepThenSameStep.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepOne.kt")
              public void testStepToSameLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSameLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSameLast.kt")
              public void testStepToSameLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
              public void testStepToSameLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepOne.kt")
              public void testStepToSmallerLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSmallerLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
              public void testStepToSmallerLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
              public void testStepToSmallerLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed")
            @TestDataPath("$PROJECT_ROOT")
            public class Reversed {
              @Test
              public void testAllFilesPresentInReversed() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("reversedThenStep.kt")
              public void testReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/reversedThenStep.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversed.kt")
              public void testReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/reversedThenStepThenReversed.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversedThenStep.kt")
              public void testReversedThenStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/reversedThenStepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversed.kt")
              public void testStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/stepThenReversed.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStep.kt")
              public void testStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/stepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStepThenReversed.kt")
              public void testStepThenReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/stepThenReversedThenStepThenReversed.kt");
              }
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo")
          @TestDataPath("$PROJECT_ROOT")
          public class RangeTo {
            @Test
            public void testAllFilesPresentInRangeTo() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("emptyProgression.kt")
            public void testEmptyProgression() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/emptyProgression.kt");
            }

            @Test
            @TestMetadata("illegalStepNegative.kt")
            public void testIllegalStepNegative() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/illegalStepNegative.kt");
            }

            @Test
            @TestMetadata("illegalStepNonConst.kt")
            public void testIllegalStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/illegalStepNonConst.kt");
            }

            @Test
            @TestMetadata("illegalStepThenLegalStep.kt")
            public void testIllegalStepThenLegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/illegalStepThenLegalStep.kt");
            }

            @Test
            @TestMetadata("illegalStepZero.kt")
            public void testIllegalStepZero() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/illegalStepZero.kt");
            }

            @Test
            @TestMetadata("legalStepThenIllegalStep.kt")
            public void testLegalStepThenIllegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/legalStepThenIllegalStep.kt");
            }

            @Test
            @TestMetadata("minValueToMaxValueStepMaxValue.kt")
            public void testMinValueToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/minValueToMaxValueStepMaxValue.kt");
            }

            @Test
            @TestMetadata("mixedTypeStep.kt")
            public void testMixedTypeStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/mixedTypeStep.kt");
            }

            @Test
            @TestMetadata("oneToMaxValueStepMaxValue.kt")
            public void testOneToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/oneToMaxValueStepMaxValue.kt");
            }

            @Test
            @TestMetadata("singleElementStepTwo.kt")
            public void testSingleElementStepTwo() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/singleElementStepTwo.kt");
            }

            @Test
            @TestMetadata("stepNonConst.kt")
            public void testStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepNonConst.kt");
            }

            @Test
            @TestMetadata("stepOne.kt")
            public void testStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepOne.kt");
            }

            @Test
            @TestMetadata("stepToOutsideRange.kt")
            public void testStepToOutsideRange() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepToOutsideRange.kt");
            }

            @Test
            @TestMetadata("stepToSameLast.kt")
            public void testStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLast.kt")
            public void testStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("zeroToMaxValueStepMaxValue.kt")
            public void testZeroToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/zeroToMaxValueStepMaxValue.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep")
            @TestDataPath("$PROJECT_ROOT")
            public class NestedStep {
              @Test
              public void testAllFilesPresentInNestedStep() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("stepOneThenStepOne.kt")
              public void testStepOneThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepOneThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepThenSameStep.kt")
              public void testStepThenSameStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepThenSameStep.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepOne.kt")
              public void testStepToSameLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSameLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSameLast.kt")
              public void testStepToSameLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
              public void testStepToSameLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepOne.kt")
              public void testStepToSmallerLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSmallerLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
              public void testStepToSmallerLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
              public void testStepToSmallerLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed")
            @TestDataPath("$PROJECT_ROOT")
            public class Reversed {
              @Test
              public void testAllFilesPresentInReversed() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("reversedThenStep.kt")
              public void testReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/reversedThenStep.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversed.kt")
              public void testReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/reversedThenStepThenReversed.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversedThenStep.kt")
              public void testReversedThenStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/reversedThenStepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversed.kt")
              public void testStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/stepThenReversed.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStep.kt")
              public void testStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/stepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStepThenReversed.kt")
              public void testStepThenReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/stepThenReversedThenStepThenReversed.kt");
              }
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil")
          @TestDataPath("$PROJECT_ROOT")
          public class RangeUntil {
            @Test
            public void testAllFilesPresentInRangeUntil() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("emptyProgression.kt")
            public void testEmptyProgression() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/emptyProgression.kt");
            }

            @Test
            @TestMetadata("illegalStepNegative.kt")
            public void testIllegalStepNegative() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/illegalStepNegative.kt");
            }

            @Test
            @TestMetadata("illegalStepThenLegalStep.kt")
            public void testIllegalStepThenLegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/illegalStepThenLegalStep.kt");
            }

            @Test
            @TestMetadata("illegalStepZero.kt")
            public void testIllegalStepZero() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/illegalStepZero.kt");
            }

            @Test
            @TestMetadata("legalStepThenIllegalStep.kt")
            public void testLegalStepThenIllegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/legalStepThenIllegalStep.kt");
            }

            @Test
            @TestMetadata("singleElementStepTwo.kt")
            public void testSingleElementStepTwo() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/singleElementStepTwo.kt");
            }

            @Test
            @TestMetadata("stepOne.kt")
            public void testStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/stepOne.kt");
            }

            @Test
            @TestMetadata("stepToOutsideRange.kt")
            public void testStepToOutsideRange() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/stepToOutsideRange.kt");
            }

            @Test
            @TestMetadata("stepToSameLast.kt")
            public void testStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/stepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLast.kt")
            public void testStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/stepToSmallerLast.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep")
            @TestDataPath("$PROJECT_ROOT")
            public class NestedStep {
              @Test
              public void testAllFilesPresentInNestedStep() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("stepOneThenStepOne.kt")
              public void testStepOneThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep/stepOneThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepThenSameStep.kt")
              public void testStepThenSameStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep/stepThenSameStep.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepOne.kt")
              public void testStepToSameLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep/stepToSameLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSameLast.kt")
              public void testStepToSameLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep/stepToSameLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
              public void testStepToSameLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepOne.kt")
              public void testStepToSmallerLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep/stepToSmallerLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
              public void testStepToSmallerLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
              public void testStepToSmallerLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/reversed")
            @TestDataPath("$PROJECT_ROOT")
            public class Reversed {
              @Test
              public void testAllFilesPresentInReversed() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("reversedThenStep.kt")
              public void testReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/reversed/reversedThenStep.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversed.kt")
              public void testReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/reversed/reversedThenStepThenReversed.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversedThenStep.kt")
              public void testReversedThenStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/reversed/reversedThenStepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversed.kt")
              public void testStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/reversed/stepThenReversed.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStep.kt")
              public void testStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/reversed/stepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStepThenReversed.kt")
              public void testStepThenReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeUntil/reversed/stepThenReversedThenStepThenReversed.kt");
              }
            }
          }

          @Nested
          @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until")
          @TestDataPath("$PROJECT_ROOT")
          public class Until {
            @Test
            public void testAllFilesPresentInUntil() {
              KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
            }

            @Test
            @TestMetadata("emptyProgression.kt")
            public void testEmptyProgression() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/emptyProgression.kt");
            }

            @Test
            @TestMetadata("emptyProgressionToMinValue.kt")
            public void testEmptyProgressionToMinValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/emptyProgressionToMinValue.kt");
            }

            @Test
            @TestMetadata("illegalStepNegative.kt")
            public void testIllegalStepNegative() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/illegalStepNegative.kt");
            }

            @Test
            @TestMetadata("illegalStepNonConst.kt")
            public void testIllegalStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/illegalStepNonConst.kt");
            }

            @Test
            @TestMetadata("illegalStepThenLegalStep.kt")
            public void testIllegalStepThenLegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/illegalStepThenLegalStep.kt");
            }

            @Test
            @TestMetadata("illegalStepZero.kt")
            public void testIllegalStepZero() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/illegalStepZero.kt");
            }

            @Test
            @TestMetadata("legalStepThenIllegalStep.kt")
            public void testLegalStepThenIllegalStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/legalStepThenIllegalStep.kt");
            }

            @Test
            @TestMetadata("minValueToMaxValueStepMaxValue.kt")
            public void testMinValueToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/minValueToMaxValueStepMaxValue.kt");
            }

            @Test
            @TestMetadata("mixedTypeStep.kt")
            public void testMixedTypeStep() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/mixedTypeStep.kt");
            }

            @Test
            @TestMetadata("progressionToNonConst.kt")
            public void testProgressionToNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/progressionToNonConst.kt");
            }

            @Test
            @TestMetadata("singleElementStepTwo.kt")
            public void testSingleElementStepTwo() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/singleElementStepTwo.kt");
            }

            @Test
            @TestMetadata("stepNonConst.kt")
            public void testStepNonConst() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepNonConst.kt");
            }

            @Test
            @TestMetadata("stepOne.kt")
            public void testStepOne() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepOne.kt");
            }

            @Test
            @TestMetadata("stepToOutsideRange.kt")
            public void testStepToOutsideRange() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepToOutsideRange.kt");
            }

            @Test
            @TestMetadata("stepToSameLast.kt")
            public void testStepToSameLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepToSameLast.kt");
            }

            @Test
            @TestMetadata("stepToSmallerLast.kt")
            public void testStepToSmallerLast() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepToSmallerLast.kt");
            }

            @Test
            @TestMetadata("zeroToMaxValueStepMaxValue.kt")
            public void testZeroToMaxValueStepMaxValue() {
              runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/zeroToMaxValueStepMaxValue.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep")
            @TestDataPath("$PROJECT_ROOT")
            public class NestedStep {
              @Test
              public void testAllFilesPresentInNestedStep() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("stepOneThenStepOne.kt")
              public void testStepOneThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepOneThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepThenSameStep.kt")
              public void testStepThenSameStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepThenSameStep.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepOne.kt")
              public void testStepToSameLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSameLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSameLast.kt")
              public void testStepToSameLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSameLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
              public void testStepToSameLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepOne.kt")
              public void testStepToSmallerLastThenStepOne() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSmallerLastThenStepOne.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
              public void testStepToSmallerLastThenStepToSameLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
              }

              @Test
              @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
              public void testStepToSmallerLastThenStepToSmallerLast() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed")
            @TestDataPath("$PROJECT_ROOT")
            public class Reversed {
              @Test
              public void testAllFilesPresentInReversed() {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
              }

              @Test
              @TestMetadata("reversedThenStep.kt")
              public void testReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/reversedThenStep.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversed.kt")
              public void testReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/reversedThenStepThenReversed.kt");
              }

              @Test
              @TestMetadata("reversedThenStepThenReversedThenStep.kt")
              public void testReversedThenStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/reversedThenStepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversed.kt")
              public void testStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/stepThenReversed.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStep.kt")
              public void testStepThenReversedThenStep() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/stepThenReversedThenStep.kt");
              }

              @Test
              @TestMetadata("stepThenReversedThenStepThenReversed.kt")
              public void testStepThenReversedThenStepThenReversed() {
                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/stepThenReversedThenStepThenReversed.kt");
              }
            }
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges/unsigned")
    @TestDataPath("$PROJECT_ROOT")
    public class Unsigned {
      @Test
      public void testAllFilesPresentInUnsigned() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("bitShifting.kt")
      public void testBitShifting() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/bitShifting.kt");
      }

      @Test
      @TestMetadata("inMixedUnsignedRange.kt")
      public void testInMixedUnsignedRange() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/inMixedUnsignedRange.kt");
      }

      @Test
      @TestMetadata("kt35004.kt")
      public void testKt35004() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/kt35004.kt");
      }

      @Test
      @TestMetadata("kt36953.kt")
      public void testKt36953() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/kt36953.kt");
      }

      @Test
      @TestMetadata("kt36953_continue.kt")
      public void testKt36953_continue() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/kt36953_continue.kt");
      }

      @Test
      @TestMetadata("outOfBoundsInMixedContains.kt")
      public void testOutOfBoundsInMixedContains() {
        runTest("compiler/testData/codegen/box/ranges/unsigned/outOfBoundsInMixedContains.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/expression")
      @TestDataPath("$PROJECT_ROOT")
      public class Expression {
        @Test
        public void testAllFilesPresentInExpression() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/expression"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("emptyDownto.kt")
        public void testEmptyDownto() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/emptyDownto.kt");
        }

        @Test
        @TestMetadata("emptyRange.kt")
        public void testEmptyRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/emptyRange.kt");
        }

        @Test
        @TestMetadata("inexactDownToMinValue.kt")
        public void testInexactDownToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactDownToMinValue.kt");
        }

        @Test
        @TestMetadata("inexactSteppedDownTo.kt")
        public void testInexactSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactSteppedDownTo.kt");
        }

        @Test
        @TestMetadata("inexactSteppedRange.kt")
        public void testInexactSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactSteppedRange.kt");
        }

        @Test
        @TestMetadata("inexactToMaxValue.kt")
        public void testInexactToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactToMaxValue.kt");
        }

        @Test
        @TestMetadata("maxValueMinusTwoToMaxValue.kt")
        public void testMaxValueMinusTwoToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueMinusTwoToMaxValue.kt");
        }

        @Test
        @TestMetadata("maxValueToMaxValue.kt")
        public void testMaxValueToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueToMaxValue.kt");
        }

        @Test
        @TestMetadata("maxValueToMinValue.kt")
        public void testMaxValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueToMinValue.kt");
        }

        @Test
        @TestMetadata("oneElementDownTo.kt")
        public void testOneElementDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/oneElementDownTo.kt");
        }

        @Test
        @TestMetadata("oneElementRange.kt")
        public void testOneElementRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/oneElementRange.kt");
        }

        @Test
        @TestMetadata("openRange.kt")
        public void testOpenRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/openRange.kt");
        }

        @Test
        @TestMetadata("openRangeUntil.kt")
        public void testOpenRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/openRangeUntil.kt");
        }

        @Test
        @TestMetadata("overflowZeroDownToMaxValue.kt")
        public void testOverflowZeroDownToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/overflowZeroDownToMaxValue.kt");
        }

        @Test
        @TestMetadata("overflowZeroToMinValue.kt")
        public void testOverflowZeroToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/overflowZeroToMinValue.kt");
        }

        @Test
        @TestMetadata("progressionDownToMinValue.kt")
        public void testProgressionDownToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionDownToMinValue.kt");
        }

        @Test
        @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
        public void testProgressionMaxValueMinusTwoToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueMinusTwoToMaxValue.kt");
        }

        @Test
        @TestMetadata("progressionMaxValueToMaxValue.kt")
        public void testProgressionMaxValueToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueToMaxValue.kt");
        }

        @Test
        @TestMetadata("progressionMaxValueToMinValue.kt")
        public void testProgressionMaxValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueToMinValue.kt");
        }

        @Test
        @TestMetadata("progressionMinValueToMinValue.kt")
        public void testProgressionMinValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMinValueToMinValue.kt");
        }

        @Test
        @TestMetadata("reversedBackSequence.kt")
        public void testReversedBackSequence() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedBackSequence.kt");
        }

        @Test
        @TestMetadata("reversedEmptyBackSequence.kt")
        public void testReversedEmptyBackSequence() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedEmptyBackSequence.kt");
        }

        @Test
        @TestMetadata("reversedEmptyRange.kt")
        public void testReversedEmptyRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedEmptyRange.kt");
        }

        @Test
        @TestMetadata("reversedInexactSteppedDownTo.kt")
        public void testReversedInexactSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedInexactSteppedDownTo.kt");
        }

        @Test
        @TestMetadata("reversedRange.kt")
        public void testReversedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedRange.kt");
        }

        @Test
        @TestMetadata("reversedSimpleSteppedRange.kt")
        public void testReversedSimpleSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedSimpleSteppedRange.kt");
        }

        @Test
        @TestMetadata("simpleDownTo.kt")
        public void testSimpleDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleDownTo.kt");
        }

        @Test
        @TestMetadata("simpleRange.kt")
        public void testSimpleRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleRange.kt");
        }

        @Test
        @TestMetadata("simpleRangeWithNonConstantEnds.kt")
        public void testSimpleRangeWithNonConstantEnds() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleRangeWithNonConstantEnds.kt");
        }

        @Test
        @TestMetadata("simpleSteppedDownTo.kt")
        public void testSimpleSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleSteppedDownTo.kt");
        }

        @Test
        @TestMetadata("simpleSteppedRange.kt")
        public void testSimpleSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleSteppedRange.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/literal")
      @TestDataPath("$PROJECT_ROOT")
      public class Literal {
        @Test
        public void testAllFilesPresentInLiteral() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/literal"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("emptyDownto.kt")
        public void testEmptyDownto() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/emptyDownto.kt");
        }

        @Test
        @TestMetadata("emptyRange.kt")
        public void testEmptyRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/emptyRange.kt");
        }

        @Test
        @TestMetadata("inexactDownToMinValue.kt")
        public void testInexactDownToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactDownToMinValue.kt");
        }

        @Test
        @TestMetadata("inexactSteppedDownTo.kt")
        public void testInexactSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactSteppedDownTo.kt");
        }

        @Test
        @TestMetadata("inexactSteppedRange.kt")
        public void testInexactSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactSteppedRange.kt");
        }

        @Test
        @TestMetadata("inexactToMaxValue.kt")
        public void testInexactToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactToMaxValue.kt");
        }

        @Test
        @TestMetadata("maxValueMinusTwoToMaxValue.kt")
        public void testMaxValueMinusTwoToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueMinusTwoToMaxValue.kt");
        }

        @Test
        @TestMetadata("maxValueToMaxValue.kt")
        public void testMaxValueToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueToMaxValue.kt");
        }

        @Test
        @TestMetadata("maxValueToMinValue.kt")
        public void testMaxValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueToMinValue.kt");
        }

        @Test
        @TestMetadata("oneElementDownTo.kt")
        public void testOneElementDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/oneElementDownTo.kt");
        }

        @Test
        @TestMetadata("oneElementRange.kt")
        public void testOneElementRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/oneElementRange.kt");
        }

        @Test
        @TestMetadata("openRange.kt")
        public void testOpenRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/openRange.kt");
        }

        @Test
        @TestMetadata("openRangeUntil.kt")
        public void testOpenRangeUntil() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/openRangeUntil.kt");
        }

        @Test
        @TestMetadata("overflowZeroDownToMaxValue.kt")
        public void testOverflowZeroDownToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/overflowZeroDownToMaxValue.kt");
        }

        @Test
        @TestMetadata("overflowZeroToMinValue.kt")
        public void testOverflowZeroToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/overflowZeroToMinValue.kt");
        }

        @Test
        @TestMetadata("progressionDownToMinValue.kt")
        public void testProgressionDownToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionDownToMinValue.kt");
        }

        @Test
        @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
        public void testProgressionMaxValueMinusTwoToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueMinusTwoToMaxValue.kt");
        }

        @Test
        @TestMetadata("progressionMaxValueToMaxValue.kt")
        public void testProgressionMaxValueToMaxValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueToMaxValue.kt");
        }

        @Test
        @TestMetadata("progressionMaxValueToMinValue.kt")
        public void testProgressionMaxValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueToMinValue.kt");
        }

        @Test
        @TestMetadata("progressionMinValueToMinValue.kt")
        public void testProgressionMinValueToMinValue() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMinValueToMinValue.kt");
        }

        @Test
        @TestMetadata("reversedBackSequence.kt")
        public void testReversedBackSequence() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedBackSequence.kt");
        }

        @Test
        @TestMetadata("reversedEmptyBackSequence.kt")
        public void testReversedEmptyBackSequence() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedEmptyBackSequence.kt");
        }

        @Test
        @TestMetadata("reversedEmptyRange.kt")
        public void testReversedEmptyRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedEmptyRange.kt");
        }

        @Test
        @TestMetadata("reversedInexactSteppedDownTo.kt")
        public void testReversedInexactSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedInexactSteppedDownTo.kt");
        }

        @Test
        @TestMetadata("reversedRange.kt")
        public void testReversedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedRange.kt");
        }

        @Test
        @TestMetadata("reversedSimpleSteppedRange.kt")
        public void testReversedSimpleSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedSimpleSteppedRange.kt");
        }

        @Test
        @TestMetadata("simpleDownTo.kt")
        public void testSimpleDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleDownTo.kt");
        }

        @Test
        @TestMetadata("simpleRange.kt")
        public void testSimpleRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleRange.kt");
        }

        @Test
        @TestMetadata("simpleRangeWithNonConstantEnds.kt")
        public void testSimpleRangeWithNonConstantEnds() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleRangeWithNonConstantEnds.kt");
        }

        @Test
        @TestMetadata("simpleSteppedDownTo.kt")
        public void testSimpleSteppedDownTo() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleSteppedDownTo.kt");
        }

        @Test
        @TestMetadata("simpleSteppedRange.kt")
        public void testSimpleSteppedRange() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleSteppedRange.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class NullableLoopParameter {
        @Test
        public void testAllFilesPresentInNullableLoopParameter() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("progressionExpression.kt")
        public void testProgressionExpression() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/progressionExpression.kt");
        }

        @Test
        @TestMetadata("rangeExpression.kt")
        public void testRangeExpression() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/rangeExpression.kt");
        }

        @Test
        @TestMetadata("rangeLiteral.kt")
        public void testRangeLiteral() {
          runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/rangeLiteral.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/recursiveRawTypes")
  @TestDataPath("$PROJECT_ROOT")
  public class RecursiveRawTypes {
    @Test
    public void testAllFilesPresentInRecursiveRawTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/recursiveRawTypes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection")
  @TestDataPath("$PROJECT_ROOT")
  public class Reflection {
    @Test
    public void testAllFilesPresentInReflection() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Test
      public void testAllFilesPresentInAnnotations() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/annotations/onTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class OnTypes {
        @Test
        public void testAllFilesPresentInOnTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations/onTypes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/annotations/repeatable")
      @TestDataPath("$PROJECT_ROOT")
      public class Repeatable {
        @Test
        public void testAllFilesPresentInRepeatable() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations/repeatable"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/builtins")
    @TestDataPath("$PROJECT_ROOT")
    public class Builtins {
      @Test
      public void testAllFilesPresentInBuiltins() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/builtins"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/call")
    @TestDataPath("$PROJECT_ROOT")
    public class Call {
      @Test
      public void testAllFilesPresentInCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/call/bound")
      @TestDataPath("$PROJECT_ROOT")
      public class Bound {
        @Test
        public void testAllFilesPresentInBound() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/bound"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClasses {
        @Test
        public void testAllFilesPresentInInlineClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject")
        @TestDataPath("$PROJECT_ROOT")
        public class NonNullObject {
          @Test
          public void testAllFilesPresentInNonNullObject() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject")
        @TestDataPath("$PROJECT_ROOT")
        public class NullableObject {
          @Test
          public void testAllFilesPresentInNullableObject() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive")
        @TestDataPath("$PROJECT_ROOT")
        public class Primitive {
          @Test
          public void testAllFilesPresentInPrimitive() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/call/valueClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class ValueClasses {
        @Test
        public void testAllFilesPresentInValueClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/valueClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/callBy")
    @TestDataPath("$PROJECT_ROOT")
    public class CallBy {
      @Test
      public void testAllFilesPresentInCallBy() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/classLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class ClassLiterals {
      @Test
      public void testAllFilesPresentInClassLiterals() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/classLiterals"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("annotationClassLiteral.kt")
      public void testAnnotationClassLiteral() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/annotationClassLiteral.kt");
      }

      @Test
      @TestMetadata("genericClass.kt")
      public void testGenericClass() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/genericClass.kt");
      }

      @Test
      @TestMetadata("lambdaClass.kt")
      public void testLambdaClass() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/lambdaClass.kt");
      }

      @Test
      @TestMetadata("simpleClassLiteral.kt")
      public void testSimpleClassLiteral() {
        runTest("compiler/testData/codegen/box/reflection/classLiterals/simpleClassLiteral.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/classes")
    @TestDataPath("$PROJECT_ROOT")
    public class Classes {
      @Test
      public void testAllFilesPresentInClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/classes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("localClassSimpleName.kt")
      public void testLocalClassSimpleName() {
        runTest("compiler/testData/codegen/box/reflection/classes/localClassSimpleName.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/constructors")
    @TestDataPath("$PROJECT_ROOT")
    public class Constructors {
      @Test
      public void testAllFilesPresentInConstructors() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/constructors"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("constructorName.kt")
      public void testConstructorName() {
        runTest("compiler/testData/codegen/box/reflection/constructors/constructorName.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/createAnnotation")
    @TestDataPath("$PROJECT_ROOT")
    public class CreateAnnotation {
      @Test
      public void testAllFilesPresentInCreateAnnotation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/createAnnotation"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/enclosing")
    @TestDataPath("$PROJECT_ROOT")
    public class Enclosing {
      @Test
      public void testAllFilesPresentInEnclosing() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/enclosing"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/functions")
    @TestDataPath("$PROJECT_ROOT")
    public class Functions {
      @Test
      public void testAllFilesPresentInFunctions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/functions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("genericOverriddenFunction.kt")
      public void testGenericOverriddenFunction() {
        runTest("compiler/testData/codegen/box/reflection/functions/genericOverriddenFunction.kt");
      }

      @Test
      @TestMetadata("simpleNames.kt")
      public void testSimpleNames() {
        runTest("compiler/testData/codegen/box/reflection/functions/simpleNames.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/genericSignature")
    @TestDataPath("$PROJECT_ROOT")
    public class GenericSignature {
      @Test
      public void testAllFilesPresentInGenericSignature() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/genericSignature"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/isInstance")
    @TestDataPath("$PROJECT_ROOT")
    public class IsInstance {
      @Test
      public void testAllFilesPresentInIsInstance() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/isInstance"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/kClassInAnnotation")
    @TestDataPath("$PROJECT_ROOT")
    public class KClassInAnnotation {
      @Test
      public void testAllFilesPresentInKClassInAnnotation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/kClassInAnnotation"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/lambdaClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class LambdaClasses {
      @Test
      public void testAllFilesPresentInLambdaClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/lambdaClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/localClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class LocalClasses {
      @Test
      public void testAllFilesPresentInLocalClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/localClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/mapping")
    @TestDataPath("$PROJECT_ROOT")
    public class Mapping {
      @Test
      public void testAllFilesPresentInMapping() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/fakeOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class FakeOverrides {
        @Test
        public void testAllFilesPresentInFakeOverrides() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/fakeOverrides"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClasses {
        @Test
        public void testAllFilesPresentInInlineClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/inlineClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/jvmStatic")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmStatic {
        @Test
        public void testAllFilesPresentInJvmStatic() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/jvmStatic"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/types")
      @TestDataPath("$PROJECT_ROOT")
      public class Types {
        @Test
        public void testAllFilesPresentInTypes() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/types"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/mapping/valueClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class ValueClasses {
        @Test
        public void testAllFilesPresentInValueClasses() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/valueClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/methodsFromAny")
    @TestDataPath("$PROJECT_ROOT")
    public class MethodsFromAny {
      @Test
      public void testAllFilesPresentInMethodsFromAny() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/methodsFromAny"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("functionEqualsHashCode.kt")
      public void testFunctionEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionEqualsHashCode.kt");
      }

      @Test
      @TestMetadata("propertyEqualsHashCode.kt")
      public void testPropertyEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyEqualsHashCode.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    public class Modifiers {
      @Test
      public void testAllFilesPresentInModifiers() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/modifiers"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/multifileClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class MultifileClasses {
      @Test
      public void testAllFilesPresentInMultifileClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/multifileClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime")
    @TestDataPath("$PROJECT_ROOT")
    public class NoReflectAtRuntime {
      @Test
      public void testAllFilesPresentInNoReflectAtRuntime() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("propertyGetSetName.kt")
      public void testPropertyGetSetName() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyGetSetName.kt");
      }

      @Test
      @TestMetadata("propertyInstanceof.kt")
      public void testPropertyInstanceof() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyInstanceof.kt");
      }

      @Test
      @TestMetadata("simpleClassLiterals.kt")
      public void testSimpleClassLiterals() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/simpleClassLiterals.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny")
      @TestDataPath("$PROJECT_ROOT")
      public class MethodsFromAny {
        @Test
        public void testAllFilesPresentInMethodsFromAny() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("delegatedProperty.kt")
        public void testDelegatedProperty() {
          runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/delegatedProperty.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/parameters")
    @TestDataPath("$PROJECT_ROOT")
    public class Parameters {
      @Test
      public void testAllFilesPresentInParameters() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/parameters"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties {
      @Test
      public void testAllFilesPresentInProperties() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("genericOverriddenProperty.kt")
      public void testGenericOverriddenProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/genericOverriddenProperty.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/properties/accessors")
      @TestDataPath("$PROJECT_ROOT")
      public class Accessors {
        @Test
        public void testAllFilesPresentInAccessors() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/accessors"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/properties/getDelegate")
      @TestDataPath("$PROJECT_ROOT")
      public class GetDelegate {
        @Test
        public void testAllFilesPresentInGetDelegate() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/getDelegate"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/properties/getDelegate/method")
        @TestDataPath("$PROJECT_ROOT")
        public class Method {
          @Test
          public void testAllFilesPresentInMethod() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/getDelegate/method"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/properties/jvmField")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmField {
        @Test
        public void testAllFilesPresentInJvmField() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/jvmField"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/properties/localDelegated")
      @TestDataPath("$PROJECT_ROOT")
      public class LocalDelegated {
        @Test
        public void testAllFilesPresentInLocalDelegated() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/localDelegated"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/supertypes")
    @TestDataPath("$PROJECT_ROOT")
    public class Supertypes {
      @Test
      public void testAllFilesPresentInSupertypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/supertypes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/syntheticClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class SyntheticClasses {
      @Test
      public void testAllFilesPresentInSyntheticClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/syntheticClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/typeOf")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeOf {
      @Test
      public void testAllFilesPresentInTypeOf() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("arrayOfNullableReified.kt")
      public void testArrayOfNullableReified() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/arrayOfNullableReified.kt");
      }

      @Test
      @TestMetadata("classes.kt")
      public void testClasses() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/classes.kt");
      }

      @Test
      @TestMetadata("inlineClasses.kt")
      public void testInlineClasses() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/inlineClasses.kt");
      }

      @Test
      @TestMetadata("intersectionType.kt")
      public void testIntersectionType() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/intersectionType.kt");
      }

      @Test
      @TestMetadata("manyTypeArguments.kt")
      public void testManyTypeArguments() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/manyTypeArguments.kt");
      }

      @Test
      @TestMetadata("multipleLayers.kt")
      public void testMultipleLayers() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/multipleLayers.kt");
      }

      @Test
      @TestMetadata("reifiedAsNestedArgument.kt")
      public void testReifiedAsNestedArgument() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/reifiedAsNestedArgument.kt");
      }

      @Test
      @TestMetadata("typeOfCapturedStar.kt")
      public void testTypeOfCapturedStar() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/typeOfCapturedStar.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/js")
      @TestDataPath("$PROJECT_ROOT")
      public class Js {
        @Test
        public void testAllFilesPresentInJs() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/js"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/noReflect")
      @TestDataPath("$PROJECT_ROOT")
      public class NoReflect {
        @Test
        public void testAllFilesPresentInNoReflect() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/noReflect"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("typeReferenceEqualsHashCode.kt")
        public void testTypeReferenceEqualsHashCode() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/typeReferenceEqualsHashCode.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters")
        @TestDataPath("$PROJECT_ROOT")
        public class NonReifiedTypeParameters {
          @Test
          public void testAllFilesPresentInNonReifiedTypeParameters() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class NonReifiedTypeParameters {
        @Test
        public void testAllFilesPresentInNonReifiedTypeParameters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }

        @Test
        @TestMetadata("defaultUpperBound.kt")
        public void testDefaultUpperBound() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/defaultUpperBound.kt");
        }

        @Test
        @TestMetadata("equalsOnClassParameters.kt")
        public void testEqualsOnClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnClassParameters.kt");
        }

        @Test
        @TestMetadata("equalsOnFunctionParameters.kt")
        public void testEqualsOnFunctionParameters() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnFunctionParameters.kt");
        }

        @Test
        @TestMetadata("innerGeneric.kt")
        public void testInnerGeneric() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/innerGeneric.kt");
        }

        @Test
        @TestMetadata("simpleClassParameter.kt")
        public void testSimpleClassParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simpleClassParameter.kt");
        }

        @Test
        @TestMetadata("simpleFunctionParameter.kt")
        public void testSimpleFunctionParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simpleFunctionParameter.kt");
        }

        @Test
        @TestMetadata("simplePropertyParameter.kt")
        public void testSimplePropertyParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simplePropertyParameter.kt");
        }

        @Test
        @TestMetadata("starProjectionInUpperBound.kt")
        public void testStarProjectionInUpperBound() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/starProjectionInUpperBound.kt");
        }

        @Test
        @TestMetadata("typeParameterFlags.kt")
        public void testTypeParameterFlags() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/typeParameterFlags.kt");
        }

        @Test
        @TestMetadata("upperBoundUsesOuterClassParameter.kt")
        public void testUpperBoundUsesOuterClassParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/upperBoundUsesOuterClassParameter.kt");
        }

        @Test
        @TestMetadata("upperBounds.kt")
        public void testUpperBounds() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/upperBounds.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/typeParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeParameters {
      @Test
      public void testAllFilesPresentInTypeParameters() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeParameters"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/types")
    @TestDataPath("$PROJECT_ROOT")
    public class Types {
      @Test
      public void testAllFilesPresentInTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("innerGenericArguments.kt")
      public void testInnerGenericArguments() {
        runTest("compiler/testData/codegen/box/reflection/types/innerGenericArguments.kt");
      }

      @Test
      @TestMetadata("typeArguments.kt")
      public void testTypeArguments() {
        runTest("compiler/testData/codegen/box/reflection/types/typeArguments.kt");
      }

      @Test
      @TestMetadata("useSiteVariance.kt")
      public void testUseSiteVariance() {
        runTest("compiler/testData/codegen/box/reflection/types/useSiteVariance.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/types/createType")
      @TestDataPath("$PROJECT_ROOT")
      public class CreateType {
        @Test
        public void testAllFilesPresentInCreateType() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/createType"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/types/subtyping")
      @TestDataPath("$PROJECT_ROOT")
      public class Subtyping {
        @Test
        public void testAllFilesPresentInSubtyping() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/subtyping"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/regressions")
  @TestDataPath("$PROJECT_ROOT")
  public class Regressions {
    @Test
    public void testAllFilesPresentInRegressions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/regressions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("arrayLengthNPE.kt")
    public void testArrayLengthNPE() {
      runTest("compiler/testData/codegen/box/regressions/arrayLengthNPE.kt");
    }

    @Test
    @TestMetadata("commonSupertypeContravariant.kt")
    public void testCommonSupertypeContravariant() {
      runTest("compiler/testData/codegen/box/regressions/commonSupertypeContravariant.kt");
    }

    @Test
    @TestMetadata("commonSupertypeContravariant2.kt")
    public void testCommonSupertypeContravariant2() {
      runTest("compiler/testData/codegen/box/regressions/commonSupertypeContravariant2.kt");
    }

    @Test
    @TestMetadata("dontCaptureTypesWithTypeVariables.kt")
    public void testDontCaptureTypesWithTypeVariables() {
      runTest("compiler/testData/codegen/box/regressions/dontCaptureTypesWithTypeVariables.kt");
    }

    @Test
    @TestMetadata("doubleMerge.kt")
    public void testDoubleMerge() {
      runTest("compiler/testData/codegen/box/regressions/doubleMerge.kt");
    }

    @Test
    @TestMetadata("floatMerge.kt")
    public void testFloatMerge() {
      runTest("compiler/testData/codegen/box/regressions/floatMerge.kt");
    }

    @Test
    @TestMetadata("functionLiteralAsLastExpressionInBlock.kt")
    public void testFunctionLiteralAsLastExpressionInBlock() {
      runTest("compiler/testData/codegen/box/regressions/functionLiteralAsLastExpressionInBlock.kt");
    }

    @Test
    @TestMetadata("generic.kt")
    public void testGeneric() {
      runTest("compiler/testData/codegen/box/regressions/generic.kt");
    }

    @Test
    @TestMetadata("hashCodeNPE.kt")
    public void testHashCodeNPE() {
      runTest("compiler/testData/codegen/box/regressions/hashCodeNPE.kt");
    }

    @Test
    @TestMetadata("internalTopLevelOtherPackage.kt")
    public void testInternalTopLevelOtherPackage() {
      runTest("compiler/testData/codegen/box/regressions/internalTopLevelOtherPackage.kt");
    }

    @Test
    @TestMetadata("intersectionOfEqualTypes.kt")
    public void testIntersectionOfEqualTypes() {
      runTest("compiler/testData/codegen/box/regressions/intersectionOfEqualTypes.kt");
    }

    @Test
    @TestMetadata("kt10143.kt")
    public void testKt10143() {
      runTest("compiler/testData/codegen/box/regressions/kt10143.kt");
    }

    @Test
    @TestMetadata("kt10934.kt")
    public void testKt10934() {
      runTest("compiler/testData/codegen/box/regressions/kt10934.kt");
    }

    @Test
    @TestMetadata("Kt1149.kt")
    public void testKt1149() {
      runTest("compiler/testData/codegen/box/regressions/Kt1149.kt");
    }

    @Test
    @TestMetadata("kt13381.kt")
    public void testKt13381() {
      runTest("compiler/testData/codegen/box/regressions/kt13381.kt");
    }

    @Test
    @TestMetadata("kt14447.kt")
    public void testKt14447() {
      runTest("compiler/testData/codegen/box/regressions/kt14447.kt");
    }

    @Test
    @TestMetadata("kt15196.kt")
    public void testKt15196() {
      runTest("compiler/testData/codegen/box/regressions/kt15196.kt");
    }

    @Test
    @TestMetadata("kt1528.kt")
    public void testKt1528() {
      runTest("compiler/testData/codegen/box/regressions/kt1528.kt");
    }

    @Test
    @TestMetadata("Kt1619Test.kt")
    public void testKt1619Test() {
      runTest("compiler/testData/codegen/box/regressions/Kt1619Test.kt");
    }

    @Test
    @TestMetadata("kt1779.kt")
    public void testKt1779() {
      runTest("compiler/testData/codegen/box/regressions/kt1779.kt");
    }

    @Test
    @TestMetadata("kt1800.kt")
    public void testKt1800() {
      runTest("compiler/testData/codegen/box/regressions/kt1800.kt");
    }

    @Test
    @TestMetadata("kt1845.kt")
    public void testKt1845() {
      runTest("compiler/testData/codegen/box/regressions/kt1845.kt");
    }

    @Test
    @TestMetadata("kt18779.kt")
    public void testKt18779() {
      runTest("compiler/testData/codegen/box/regressions/kt18779.kt");
    }

    @Test
    @TestMetadata("kt2017.kt")
    public void testKt2017() {
      runTest("compiler/testData/codegen/box/regressions/kt2017.kt");
    }

    @Test
    @TestMetadata("kt2060.kt")
    public void testKt2060() {
      runTest("compiler/testData/codegen/box/regressions/kt2060.kt");
    }

    @Test
    @TestMetadata("kt2210.kt")
    public void testKt2210() {
      runTest("compiler/testData/codegen/box/regressions/kt2210.kt");
    }

    @Test
    @TestMetadata("kt2246.kt")
    public void testKt2246() {
      runTest("compiler/testData/codegen/box/regressions/kt2246.kt");
    }

    @Test
    @TestMetadata("kt24913.kt")
    public void testKt24913() {
      runTest("compiler/testData/codegen/box/regressions/kt24913.kt");
    }

    @Test
    @TestMetadata("Kt2495Test.kt")
    public void testKt2495Test() {
      runTest("compiler/testData/codegen/box/regressions/Kt2495Test.kt");
    }

    @Test
    @TestMetadata("kt2509.kt")
    public void testKt2509() {
      runTest("compiler/testData/codegen/box/regressions/kt2509.kt");
    }

    @Test
    @TestMetadata("kt3107.kt")
    public void testKt3107() {
      runTest("compiler/testData/codegen/box/regressions/kt3107.kt");
    }

    @Test
    @TestMetadata("kt32949.kt")
    public void testKt32949() {
      runTest("compiler/testData/codegen/box/regressions/kt32949.kt");
    }

    @Test
    @TestMetadata("kt33638.kt")
    public void testKt33638() {
      runTest("compiler/testData/codegen/box/regressions/kt33638.kt");
    }

    @Test
    @TestMetadata("kt3421.kt")
    public void testKt3421() {
      runTest("compiler/testData/codegen/box/regressions/kt3421.kt");
    }

    @Test
    @TestMetadata("kt344.kt")
    public void testKt344() {
      runTest("compiler/testData/codegen/box/regressions/kt344.kt");
    }

    @Test
    @TestMetadata("kt3442.kt")
    public void testKt3442() {
      runTest("compiler/testData/codegen/box/regressions/kt3442.kt");
    }

    @Test
    @TestMetadata("kt3587.kt")
    public void testKt3587() {
      runTest("compiler/testData/codegen/box/regressions/kt3587.kt");
    }

    @Test
    @TestMetadata("kt35914.kt")
    public void testKt35914() {
      runTest("compiler/testData/codegen/box/regressions/kt35914.kt");
    }

    @Test
    @TestMetadata("kt3850.kt")
    public void testKt3850() {
      runTest("compiler/testData/codegen/box/regressions/kt3850.kt");
    }

    @Test
    @TestMetadata("kt3903.kt")
    public void testKt3903() {
      runTest("compiler/testData/codegen/box/regressions/kt3903.kt");
    }

    @Test
    @TestMetadata("kt39088.kt")
    public void testKt39088() {
      runTest("compiler/testData/codegen/box/regressions/kt39088.kt");
    }

    @Test
    @TestMetadata("kt4142.kt")
    public void testKt4142() {
      runTest("compiler/testData/codegen/box/regressions/kt4142.kt");
    }

    @Test
    @TestMetadata("kt4281.kt")
    public void testKt4281() {
      runTest("compiler/testData/codegen/box/regressions/kt4281.kt");
    }

    @Test
    @TestMetadata("kt47279.kt")
    public void testKt47279() {
      runTest("compiler/testData/codegen/box/regressions/kt47279.kt");
    }

    @Test
    @TestMetadata("kt5056.kt")
    public void testKt5056() {
      runTest("compiler/testData/codegen/box/regressions/kt5056.kt");
    }

    @Test
    @TestMetadata("kt5395.kt")
    public void testKt5395() {
      runTest("compiler/testData/codegen/box/regressions/kt5395.kt");
    }

    @Test
    @TestMetadata("kt57487.kt")
    public void testKt57487() {
      runTest("compiler/testData/codegen/box/regressions/kt57487.kt");
    }

    @Test
    @TestMetadata("kt5786_privateWithDefault.kt")
    public void testKt5786_privateWithDefault() {
      runTest("compiler/testData/codegen/box/regressions/kt5786_privateWithDefault.kt");
    }

    @Test
    @TestMetadata("kt5953.kt")
    public void testKt5953() {
      runTest("compiler/testData/codegen/box/regressions/kt5953.kt");
    }

    @Test
    @TestMetadata("kt6153.kt")
    public void testKt6153() {
      runTest("compiler/testData/codegen/box/regressions/kt6153.kt");
    }

    @Test
    @TestMetadata("kt6434.kt")
    public void testKt6434() {
      runTest("compiler/testData/codegen/box/regressions/kt6434.kt");
    }

    @Test
    @TestMetadata("kt6434_2.kt")
    public void testKt6434_2() {
      runTest("compiler/testData/codegen/box/regressions/kt6434_2.kt");
    }

    @Test
    @TestMetadata("kt7401.kt")
    public void testKt7401() {
      runTest("compiler/testData/codegen/box/regressions/kt7401.kt");
    }

    @Test
    @TestMetadata("kt789.kt")
    public void testKt789() {
      runTest("compiler/testData/codegen/box/regressions/kt789.kt");
    }

    @Test
    @TestMetadata("kt998.kt")
    public void testKt998() {
      runTest("compiler/testData/codegen/box/regressions/kt998.kt");
    }

    @Test
    @TestMetadata("lambdaAsLastExpressionInLambda.kt")
    public void testLambdaAsLastExpressionInLambda() {
      runTest("compiler/testData/codegen/box/regressions/lambdaAsLastExpressionInLambda.kt");
    }

    @Test
    @TestMetadata("lambdaPostponeConstruction.kt")
    public void testLambdaPostponeConstruction() {
      runTest("compiler/testData/codegen/box/regressions/lambdaPostponeConstruction.kt");
    }

    @Test
    @TestMetadata("lambdaWrongReturnType.kt")
    public void testLambdaWrongReturnType() {
      runTest("compiler/testData/codegen/box/regressions/lambdaWrongReturnType.kt");
    }

    @Test
    @TestMetadata("noAssertionsWhenNullableTypeParameterReplacedWithIntersectionType.kt")
    public void testNoAssertionsWhenNullableTypeParameterReplacedWithIntersectionType() {
      runTest("compiler/testData/codegen/box/regressions/noAssertionsWhenNullableTypeParameterReplacedWithIntersectionType.kt");
    }

    @Test
    @TestMetadata("noCapturingForTypesWithTypeVariables.kt")
    public void testNoCapturingForTypesWithTypeVariables() {
      runTest("compiler/testData/codegen/box/regressions/noCapturingForTypesWithTypeVariables.kt");
    }

    @Test
    @TestMetadata("noResolutionRecursion.kt")
    public void testNoResolutionRecursion() {
      runTest("compiler/testData/codegen/box/regressions/noResolutionRecursion.kt");
    }

    @Test
    @TestMetadata("nullabilityForCommonCapturedSupertypes.kt")
    public void testNullabilityForCommonCapturedSupertypes() {
      runTest("compiler/testData/codegen/box/regressions/nullabilityForCommonCapturedSupertypes.kt");
    }

    @Test
    @TestMetadata("nullableAfterExclExcl.kt")
    public void testNullableAfterExclExcl() {
      runTest("compiler/testData/codegen/box/regressions/nullableAfterExclExcl.kt");
    }

    @Test
    @TestMetadata("objectCaptureOuterConstructorProperty.kt")
    public void testObjectCaptureOuterConstructorProperty() {
      runTest("compiler/testData/codegen/box/regressions/objectCaptureOuterConstructorProperty.kt");
    }

    @Test
    @TestMetadata("objectInsideDelegation.kt")
    public void testObjectInsideDelegation() {
      runTest("compiler/testData/codegen/box/regressions/objectInsideDelegation.kt");
    }

    @Test
    @TestMetadata("recursiveDnnTypeInLambda.kt")
    public void testRecursiveDnnTypeInLambda() {
      runTest("compiler/testData/codegen/box/regressions/recursiveDnnTypeInLambda.kt");
    }

    @Test
    @TestMetadata("resolvedCallForGetOperator.kt")
    public void testResolvedCallForGetOperator() {
      runTest("compiler/testData/codegen/box/regressions/resolvedCallForGetOperator.kt");
    }

    @Test
    @TestMetadata("supertypeDepth.kt")
    public void testSupertypeDepth() {
      runTest("compiler/testData/codegen/box/regressions/supertypeDepth.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reified")
  @TestDataPath("$PROJECT_ROOT")
  public class Reified {
    @Test
    public void testAllFilesPresentInReified() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reified"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("callableReferenceInlinedFun.kt")
    public void testCallableReferenceInlinedFun() {
      runTest("compiler/testData/codegen/box/reified/callableReferenceInlinedFun.kt");
    }

    @Test
    @TestMetadata("callableReferenceInlinedFunFromOtherModule.kt")
    public void testCallableReferenceInlinedFunFromOtherModule() {
      runTest("compiler/testData/codegen/box/reified/callableReferenceInlinedFunFromOtherModule.kt");
    }

    @Test
    @TestMetadata("checkcast.kt")
    public void testCheckcast() {
      runTest("compiler/testData/codegen/box/reified/checkcast.kt");
    }

    @Test
    @TestMetadata("copyToArray.kt")
    public void testCopyToArray() {
      runTest("compiler/testData/codegen/box/reified/copyToArray.kt");
    }

    @Test
    @TestMetadata("filterIsInstance.kt")
    public void testFilterIsInstance() {
      runTest("compiler/testData/codegen/box/reified/filterIsInstance.kt");
    }

    @Test
    @TestMetadata("instanceof.kt")
    public void testInstanceof() {
      runTest("compiler/testData/codegen/box/reified/instanceof.kt");
    }

    @Test
    @TestMetadata("kt16445.kt")
    public void testKt16445() {
      runTest("compiler/testData/codegen/box/reified/kt16445.kt");
    }

    @Test
    @TestMetadata("kt36237.kt")
    public void testKt36237() {
      runTest("compiler/testData/codegen/box/reified/kt36237.kt");
    }

    @Test
    @TestMetadata("kt39256_privateInlineWithAnonymousObject.kt")
    public void testKt39256_privateInlineWithAnonymousObject() {
      runTest("compiler/testData/codegen/box/reified/kt39256_privateInlineWithAnonymousObject.kt");
    }

    @Test
    @TestMetadata("newArrayInt.kt")
    public void testNewArrayInt() {
      runTest("compiler/testData/codegen/box/reified/newArrayInt.kt");
    }

    @Test
    @TestMetadata("recursiveNewArray.kt")
    public void testRecursiveNewArray() {
      runTest("compiler/testData/codegen/box/reified/recursiveNewArray.kt");
    }

    @Test
    @TestMetadata("reifiedChain.kt")
    public void testReifiedChain() {
      runTest("compiler/testData/codegen/box/reified/reifiedChain.kt");
    }

    @Test
    @TestMetadata("reifiedIntersectionType.kt")
    public void testReifiedIntersectionType() {
      runTest("compiler/testData/codegen/box/reified/reifiedIntersectionType.kt");
    }

    @Test
    @TestMetadata("reifiedIntersectionTypeArgument.kt")
    public void testReifiedIntersectionTypeArgument() {
      runTest("compiler/testData/codegen/box/reified/reifiedIntersectionTypeArgument.kt");
    }

    @Test
    @TestMetadata("reifiedIntersectionTypeArgumentCrossModule.kt")
    public void testReifiedIntersectionTypeArgumentCrossModule() {
      runTest("compiler/testData/codegen/box/reified/reifiedIntersectionTypeArgumentCrossModule.kt");
    }

    @Test
    @TestMetadata("reifiedTypeArgumentWithIntersectionTypeAsTypeArgument.kt")
    public void testReifiedTypeArgumentWithIntersectionTypeAsTypeArgument() {
      runTest("compiler/testData/codegen/box/reified/reifiedTypeArgumentWithIntersectionTypeAsTypeArgument.kt");
    }

    @Test
    @TestMetadata("reifiedTypeArgumentWithRecursion.kt")
    public void testReifiedTypeArgumentWithRecursion() {
      runTest("compiler/testData/codegen/box/reified/reifiedTypeArgumentWithRecursion.kt");
    }

    @Test
    @TestMetadata("safecast.kt")
    public void testSafecast() {
      runTest("compiler/testData/codegen/box/reified/safecast.kt");
    }

    @Test
    @TestMetadata("sameIndexRecursive.kt")
    public void testSameIndexRecursive() {
      runTest("compiler/testData/codegen/box/reified/sameIndexRecursive.kt");
    }

    @Test
    @TestMetadata("spreads.kt")
    public void testSpreads() {
      runTest("compiler/testData/codegen/box/reified/spreads.kt");
    }

    @Test
    @TestMetadata("varargs.kt")
    public void testVarargs() {
      runTest("compiler/testData/codegen/box/reified/varargs.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reified/arraysReification")
    @TestDataPath("$PROJECT_ROOT")
    public class ArraysReification {
      @Test
      public void testAllFilesPresentInArraysReification() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reified/arraysReification"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("jaggedArray.kt")
      public void testJaggedArray() {
        runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedArray.kt");
      }

      @Test
      @TestMetadata("jaggedDeep.kt")
      public void testJaggedDeep() {
        runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedDeep.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/safeCall")
  @TestDataPath("$PROJECT_ROOT")
  public class SafeCall {
    @Test
    public void testAllFilesPresentInSafeCall() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/safeCall"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("genericNull.kt")
    public void testGenericNull() {
      runTest("compiler/testData/codegen/box/safeCall/genericNull.kt");
    }

    @Test
    @TestMetadata("kt1572.kt")
    public void testKt1572() {
      runTest("compiler/testData/codegen/box/safeCall/kt1572.kt");
    }

    @Test
    @TestMetadata("kt232.kt")
    public void testKt232() {
      runTest("compiler/testData/codegen/box/safeCall/kt232.kt");
    }

    @Test
    @TestMetadata("kt245.kt")
    public void testKt245() {
      runTest("compiler/testData/codegen/box/safeCall/kt245.kt");
    }

    @Test
    @TestMetadata("kt247.kt")
    public void testKt247() {
      runTest("compiler/testData/codegen/box/safeCall/kt247.kt");
    }

    @Test
    @TestMetadata("kt3430.kt")
    public void testKt3430() {
      runTest("compiler/testData/codegen/box/safeCall/kt3430.kt");
    }

    @Test
    @TestMetadata("kt4733.kt")
    public void testKt4733() {
      runTest("compiler/testData/codegen/box/safeCall/kt4733.kt");
    }

    @Test
    @TestMetadata("kt52580.kt")
    public void testKt52580() {
      runTest("compiler/testData/codegen/box/safeCall/kt52580.kt");
    }

    @Test
    @TestMetadata("kt52743.kt")
    public void testKt52743() {
      runTest("compiler/testData/codegen/box/safeCall/kt52743.kt");
    }

    @Test
    @TestMetadata("primitive.kt")
    public void testPrimitive() {
      runTest("compiler/testData/codegen/box/safeCall/primitive.kt");
    }

    @Test
    @TestMetadata("primitiveEqSafeCall.kt")
    public void testPrimitiveEqSafeCall() {
      runTest("compiler/testData/codegen/box/safeCall/primitiveEqSafeCall.kt");
    }

    @Test
    @TestMetadata("primitiveNotEqSafeCall.kt")
    public void testPrimitiveNotEqSafeCall() {
      runTest("compiler/testData/codegen/box/safeCall/primitiveNotEqSafeCall.kt");
    }

    @Test
    @TestMetadata("safeCallEqPrimitive.kt")
    public void testSafeCallEqPrimitive() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallEqPrimitive.kt");
    }

    @Test
    @TestMetadata("safeCallIOnUninitializedNonNullValue.kt")
    public void testSafeCallIOnUninitializedNonNullValue() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallIOnUninitializedNonNullValue.kt");
    }

    @Test
    @TestMetadata("safeCallNotEqPrimitive.kt")
    public void testSafeCallNotEqPrimitive() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallNotEqPrimitive.kt");
    }

    @Test
    @TestMetadata("safeCallOnLong.kt")
    public void testSafeCallOnLong() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallOnLong.kt");
    }

    @Test
    @TestMetadata("safeCallWithElvisFolding.kt")
    public void testSafeCallWithElvisFolding() {
      runTest("compiler/testData/codegen/box/safeCall/safeCallWithElvisFolding.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/sam")
  @TestDataPath("$PROJECT_ROOT")
  public class Sam {
    @Test
    public void testAllFilesPresentInSam() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("kt51821.kt")
    public void testKt51821() {
      runTest("compiler/testData/codegen/box/sam/kt51821.kt");
    }

    @Test
    @TestMetadata("kt56188.kt")
    public void testKt56188() {
      runTest("compiler/testData/codegen/box/sam/kt56188.kt");
    }

    @Test
    @TestMetadata("kt59858.kt")
    public void testKt59858() {
      runTest("compiler/testData/codegen/box/sam/kt59858.kt");
    }

    @Test
    @TestMetadata("kt63564.kt")
    public void testKt63564() {
      runTest("compiler/testData/codegen/box/sam/kt63564.kt");
    }

    @Test
    @TestMetadata("kt64116.kt")
    public void testKt64116() {
      runTest("compiler/testData/codegen/box/sam/kt64116.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/sam/adapters")
    @TestDataPath("$PROJECT_ROOT")
    public class Adapters {
      @Test
      public void testAllFilesPresentInAdapters() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/adapters"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/sam/adapters/operators")
      @TestDataPath("$PROJECT_ROOT")
      public class Operators {
        @Test
        public void testAllFilesPresentInOperators() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/adapters/operators"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/sam/approximation")
    @TestDataPath("$PROJECT_ROOT")
    public class Approximation {
      @Test
      public void testAllFilesPresentInApproximation() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/approximation"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("approxToIntermediateType.kt")
      public void testApproxToIntermediateType() {
        runTest("compiler/testData/codegen/box/sam/approximation/approxToIntermediateType.kt");
      }

      @Test
      @TestMetadata("approxToSingleUpperBound.kt")
      public void testApproxToSingleUpperBound() {
        runTest("compiler/testData/codegen/box/sam/approximation/approxToSingleUpperBound.kt");
      }

      @Test
      @TestMetadata("impossibleToApproxToRepresentable.kt")
      public void testImpossibleToApproxToRepresentable() {
        runTest("compiler/testData/codegen/box/sam/approximation/impossibleToApproxToRepresentable.kt");
      }

      @Test
      @TestMetadata("impossibleToApproxToRepresentable2.kt")
      public void testImpossibleToApproxToRepresentable2() {
        runTest("compiler/testData/codegen/box/sam/approximation/impossibleToApproxToRepresentable2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/sam/constructors")
    @TestDataPath("$PROJECT_ROOT")
    public class Constructors {
      @Test
      public void testAllFilesPresentInConstructors() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/constructors"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("comparator.kt")
      public void testComparator() {
        runTest("compiler/testData/codegen/box/sam/constructors/comparator.kt");
      }

      @Test
      @TestMetadata("nonLiteralComparator.kt")
      public void testNonLiteralComparator() {
        runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralComparator.kt");
      }

      @Test
      @TestMetadata("sameWrapperClass2.kt")
      public void testSameWrapperClass2() {
        runTest("compiler/testData/codegen/box/sam/constructors/sameWrapperClass2.kt");
      }

      @Test
      @TestMetadata("suspendSamConstructorAdaptation.kt")
      public void testSuspendSamConstructorAdaptation() {
        runTest("compiler/testData/codegen/box/sam/constructors/suspendSamConstructorAdaptation.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/sam/equality")
    @TestDataPath("$PROJECT_ROOT")
    public class Equality {
      @Test
      public void testAllFilesPresentInEquality() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/equality"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/sam/javaSamWithEqualsHashCode")
    @TestDataPath("$PROJECT_ROOT")
    public class JavaSamWithEqualsHashCode {
      @Test
      public void testAllFilesPresentInJavaSamWithEqualsHashCode() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/javaSamWithEqualsHashCode"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/sameFileInSourceAndDependencies")
  @TestDataPath("$PROJECT_ROOT")
  public class SameFileInSourceAndDependencies {
    @Test
    public void testAllFilesPresentInSameFileInSourceAndDependencies() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sameFileInSourceAndDependencies"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("classDeclaration.kt")
    public void testClassDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/classDeclaration.kt");
    }

    @Test
    @TestMetadata("differingNumberOfGenericTypeParameters.kt")
    public void testDifferingNumberOfGenericTypeParameters() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/differingNumberOfGenericTypeParameters.kt");
    }

    @Test
    @TestMetadata("functionDeclaration.kt")
    public void testFunctionDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/functionDeclaration.kt");
    }

    @Test
    @TestMetadata("lateinitMemberPropertyDeclaration.kt")
    public void testLateinitMemberPropertyDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/lateinitMemberPropertyDeclaration.kt");
    }

    @Test
    @TestMetadata("memberFunctionDeclaration.kt")
    public void testMemberFunctionDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/memberFunctionDeclaration.kt");
    }

    @Test
    @TestMetadata("memberFunctionWithDefaultArgumentsDeclaration.kt")
    public void testMemberFunctionWithDefaultArgumentsDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/memberFunctionWithDefaultArgumentsDeclaration.kt");
    }

    @Test
    @TestMetadata("memberPropertyDeclaration.kt")
    public void testMemberPropertyDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/memberPropertyDeclaration.kt");
    }

    @Test
    @TestMetadata("nestedClassDeclaration.kt")
    public void testNestedClassDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/nestedClassDeclaration.kt");
    }

    @Test
    @TestMetadata("propertyDeclaration.kt")
    public void testPropertyDeclaration() {
      runTest("compiler/testData/codegen/box/sameFileInSourceAndDependencies/propertyDeclaration.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/script")
  @TestDataPath("$PROJECT_ROOT")
  public class Script {
    @Test
    public void testAllFilesPresentInScript() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/script"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/sealed")
  @TestDataPath("$PROJECT_ROOT")
  public class Sealed {
    @Test
    public void testAllFilesPresentInSealed() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sealed"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("delegatingConstructor.kt")
    public void testDelegatingConstructor() {
      runTest("compiler/testData/codegen/box/sealed/delegatingConstructor.kt");
    }

    @Test
    @TestMetadata("kt49752.kt")
    public void testKt49752() {
      runTest("compiler/testData/codegen/box/sealed/kt49752.kt");
    }

    @Test
    @TestMetadata("kt54028.kt")
    public void testKt54028() {
      runTest("compiler/testData/codegen/box/sealed/kt54028.kt");
    }

    @Test
    @TestMetadata("multipleFiles_enabled.kt")
    public void testMultipleFiles_enabled() {
      runTest("compiler/testData/codegen/box/sealed/multipleFiles_enabled.kt");
    }

    @Test
    @TestMetadata("objects.kt")
    public void testObjects() {
      runTest("compiler/testData/codegen/box/sealed/objects.kt");
    }

    @Test
    @TestMetadata("sealedInSameFile.kt")
    public void testSealedInSameFile() {
      runTest("compiler/testData/codegen/box/sealed/sealedInSameFile.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/sealed/simple.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/secondaryConstructors")
  @TestDataPath("$PROJECT_ROOT")
  public class SecondaryConstructors {
    @Test
    @TestMetadata("accessToCompanion.kt")
    public void testAccessToCompanion() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/accessToCompanion.kt");
    }

    @Test
    @TestMetadata("accessToNestedObject.kt")
    public void testAccessToNestedObject() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/accessToNestedObject.kt");
    }

    @Test
    public void testAllFilesPresentInSecondaryConstructors() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/secondaryConstructors"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("basicNoPrimaryManySinks.kt")
    public void testBasicNoPrimaryManySinks() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/basicNoPrimaryManySinks.kt");
    }

    @Test
    @TestMetadata("basicNoPrimaryOneSink.kt")
    public void testBasicNoPrimaryOneSink() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/basicNoPrimaryOneSink.kt");
    }

    @Test
    @TestMetadata("basicPrimary.kt")
    public void testBasicPrimary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/basicPrimary.kt");
    }

    @Test
    @TestMetadata("callFromLocalSubClass.kt")
    public void testCallFromLocalSubClass() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/callFromLocalSubClass.kt");
    }

    @Test
    @TestMetadata("callFromPrimaryWithNamedArgs.kt")
    public void testCallFromPrimaryWithNamedArgs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/callFromPrimaryWithNamedArgs.kt");
    }

    @Test
    @TestMetadata("callFromPrimaryWithOptionalArgs.kt")
    public void testCallFromPrimaryWithOptionalArgs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/callFromPrimaryWithOptionalArgs.kt");
    }

    @Test
    @TestMetadata("callFromSubClass.kt")
    public void testCallFromSubClass() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/callFromSubClass.kt");
    }

    @Test
    @TestMetadata("clashingDefaultConstructors.kt")
    public void testClashingDefaultConstructors() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/clashingDefaultConstructors.kt");
    }

    @Test
    @TestMetadata("dataClasses.kt")
    public void testDataClasses() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/dataClasses.kt");
    }

    @Test
    @TestMetadata("defaultArgs.kt")
    public void testDefaultArgs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/defaultArgs.kt");
    }

    @Test
    @TestMetadata("defaultParametersNotDuplicated.kt")
    public void testDefaultParametersNotDuplicated() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/defaultParametersNotDuplicated.kt");
    }

    @Test
    @TestMetadata("delegateWithComplexExpression.kt")
    public void testDelegateWithComplexExpression() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/delegateWithComplexExpression.kt");
    }

    @Test
    @TestMetadata("delegatedThisWithLambda.kt")
    public void testDelegatedThisWithLambda() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/delegatedThisWithLambda.kt");
    }

    @Test
    @TestMetadata("delegationWithPrimary.kt")
    public void testDelegationWithPrimary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/delegationWithPrimary.kt");
    }

    @Test
    @TestMetadata("enums.kt")
    public void testEnums() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/enums.kt");
    }

    @Test
    @TestMetadata("fieldInitializerOptimization.kt")
    public void testFieldInitializerOptimization() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/fieldInitializerOptimization.kt");
    }

    @Test
    @TestMetadata("generics.kt")
    public void testGenerics() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/generics.kt");
    }

    @Test
    @TestMetadata("inlineIntoTwoConstructors.kt")
    public void testInlineIntoTwoConstructors() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/inlineIntoTwoConstructors.kt");
    }

    @Test
    @TestMetadata("innerClasses.kt")
    public void testInnerClasses() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/innerClasses.kt");
    }

    @Test
    @TestMetadata("innerClassesInheritance.kt")
    public void testInnerClassesInheritance() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/innerClassesInheritance.kt");
    }

    @Test
    @TestMetadata("localClasses.kt")
    public void testLocalClasses() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/localClasses.kt");
    }

    @Test
    @TestMetadata("superCallPrimary.kt")
    public void testSuperCallPrimary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/superCallPrimary.kt");
    }

    @Test
    @TestMetadata("superCallSecondary.kt")
    public void testSuperCallSecondary() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/superCallSecondary.kt");
    }

    @Test
    @TestMetadata("varargs.kt")
    public void testVarargs() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/varargs.kt");
    }

    @Test
    @TestMetadata("withNonLocalReturn.kt")
    public void testWithNonLocalReturn() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withNonLocalReturn.kt");
    }

    @Test
    @TestMetadata("withReturn.kt")
    public void testWithReturn() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withReturn.kt");
    }

    @Test
    @TestMetadata("withReturnUnit.kt")
    public void testWithReturnUnit() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withReturnUnit.kt");
    }

    @Test
    @TestMetadata("withoutPrimarySimple.kt")
    public void testWithoutPrimarySimple() {
      runTest("compiler/testData/codegen/box/secondaryConstructors/withoutPrimarySimple.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/size")
  @TestDataPath("$PROJECT_ROOT")
  public class Size {
    @Test
    @TestMetadata("add.kt")
    public void testAdd() {
      runTest("compiler/testData/codegen/box/size/add.kt");
    }

    @Test
    public void testAllFilesPresentInSize() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/size"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("helloWorld.kt")
    public void testHelloWorld() {
      runTest("compiler/testData/codegen/box/size/helloWorld.kt");
    }

    @Test
    @TestMetadata("helloWorldDOM.kt")
    public void testHelloWorldDOM() {
      runTest("compiler/testData/codegen/box/size/helloWorldDOM.kt");
    }

    @Test
    @TestMetadata("objectsOptimization.kt")
    public void testObjectsOptimization() {
      runTest("compiler/testData/codegen/box/size/objectsOptimization.kt");
    }

    @Test
    @TestMetadata("ok.kt")
    public void testOk() {
      runTest("compiler/testData/codegen/box/size/ok.kt");
    }

    @Test
    @TestMetadata("removeUnusedOverride.kt")
    public void testRemoveUnusedOverride() {
      runTest("compiler/testData/codegen/box/size/removeUnusedOverride.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/smap")
  @TestDataPath("$PROJECT_ROOT")
  public class Smap {
    @Test
    public void testAllFilesPresentInSmap() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/smap"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/smartCasts")
  @TestDataPath("$PROJECT_ROOT")
  public class SmartCasts {
    @Test
    public void testAllFilesPresentInSmartCasts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/smartCasts"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("avoidSmartCastToDerivedForPrivate.kt")
    public void testAvoidSmartCastToDerivedForPrivate() {
      runTest("compiler/testData/codegen/box/smartCasts/avoidSmartCastToDerivedForPrivate.kt");
    }

    @Test
    @TestMetadata("complexExplicitReceiver.kt")
    public void testComplexExplicitReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/complexExplicitReceiver.kt");
    }

    @Test
    @TestMetadata("complexImplicitReceiver.kt")
    public void testComplexImplicitReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/complexImplicitReceiver.kt");
    }

    @Test
    @TestMetadata("falseSmartCast.kt")
    public void testFalseSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/falseSmartCast.kt");
    }

    @Test
    @TestMetadata("genericInheritanceWithNonGenericNoAmbiguity.kt")
    public void testGenericInheritanceWithNonGenericNoAmbiguity() {
      runTest("compiler/testData/codegen/box/smartCasts/genericInheritanceWithNonGenericNoAmbiguity.kt");
    }

    @Test
    @TestMetadata("genericIntersection.kt")
    public void testGenericIntersection() {
      runTest("compiler/testData/codegen/box/smartCasts/genericIntersection.kt");
    }

    @Test
    @TestMetadata("genericSet.kt")
    public void testGenericSet() {
      runTest("compiler/testData/codegen/box/smartCasts/genericSet.kt");
    }

    @Test
    @TestMetadata("implicitExtensionReceiver.kt")
    public void testImplicitExtensionReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitExtensionReceiver.kt");
    }

    @Test
    @TestMetadata("implicitMemberReceiver.kt")
    public void testImplicitMemberReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitMemberReceiver.kt");
    }

    @Test
    @TestMetadata("implicitReceiver.kt")
    public void testImplicitReceiver() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitReceiver.kt");
    }

    @Test
    @TestMetadata("implicitReceiverInWhen.kt")
    public void testImplicitReceiverInWhen() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitReceiverInWhen.kt");
    }

    @Test
    @TestMetadata("implicitToGrandSon.kt")
    public void testImplicitToGrandSon() {
      runTest("compiler/testData/codegen/box/smartCasts/implicitToGrandSon.kt");
    }

    @Test
    @TestMetadata("invokeRecieverSmartcastK1.kt")
    public void testInvokeRecieverSmartcastK1() {
      runTest("compiler/testData/codegen/box/smartCasts/invokeRecieverSmartcastK1.kt");
    }

    @Test
    @TestMetadata("invokeRecieverSmartcastK2.kt")
    public void testInvokeRecieverSmartcastK2() {
      runTest("compiler/testData/codegen/box/smartCasts/invokeRecieverSmartcastK2.kt");
    }

    @Test
    @TestMetadata("kt17725.kt")
    public void testKt17725() {
      runTest("compiler/testData/codegen/box/smartCasts/kt17725.kt");
    }

    @Test
    @TestMetadata("kt19100.kt")
    public void testKt19100() {
      runTest("compiler/testData/codegen/box/smartCasts/kt19100.kt");
    }

    @Test
    @TestMetadata("kt42517.kt")
    public void testKt42517() {
      runTest("compiler/testData/codegen/box/smartCasts/kt42517.kt");
    }

    @Test
    @TestMetadata("kt44804.kt")
    public void testKt44804() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44804.kt");
    }

    @Test
    @TestMetadata("kt44814.kt")
    public void testKt44814() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44814.kt");
    }

    @Test
    @TestMetadata("kt44932.kt")
    public void testKt44932() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44932.kt");
    }

    @Test
    @TestMetadata("kt44942.kt")
    public void testKt44942() {
      runTest("compiler/testData/codegen/box/smartCasts/kt44942.kt");
    }

    @Test
    @TestMetadata("kt52432.kt")
    public void testKt52432() {
      runTest("compiler/testData/codegen/box/smartCasts/kt52432.kt");
    }

    @Test
    @TestMetadata("lambdaArgumentWithoutType.kt")
    public void testLambdaArgumentWithoutType() {
      runTest("compiler/testData/codegen/box/smartCasts/lambdaArgumentWithoutType.kt");
    }

    @Test
    @TestMetadata("multipleSmartCast.kt")
    public void testMultipleSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/multipleSmartCast.kt");
    }

    @Test
    @TestMetadata("nullSmartCast.kt")
    public void testNullSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/nullSmartCast.kt");
    }

    @Test
    @TestMetadata("NullableFunctionTypeAsMemberImmutableProperty.kt")
    public void testNullableFunctionTypeAsMemberImmutableProperty() {
      runTest("compiler/testData/codegen/box/smartCasts/NullableFunctionTypeAsMemberImmutableProperty.kt");
    }

    @Test
    @TestMetadata("NullableFunctionTypeAsMemberImmutablePropertyFromConstructor.kt")
    public void testNullableFunctionTypeAsMemberImmutablePropertyFromConstructor() {
      runTest("compiler/testData/codegen/box/smartCasts/NullableFunctionTypeAsMemberImmutablePropertyFromConstructor.kt");
    }

    @Test
    @TestMetadata("NullableFunctionTypeAsPrimaryConstructorParameter.kt")
    public void testNullableFunctionTypeAsPrimaryConstructorParameter() {
      runTest("compiler/testData/codegen/box/smartCasts/NullableFunctionTypeAsPrimaryConstructorParameter.kt");
    }

    @Test
    @TestMetadata("NullableFunctionTypeAsSecondaryConstructorParameter.kt")
    public void testNullableFunctionTypeAsSecondaryConstructorParameter() {
      runTest("compiler/testData/codegen/box/smartCasts/NullableFunctionTypeAsSecondaryConstructorParameter.kt");
    }

    @Test
    @TestMetadata("propertyInitializationAfterSmartCast.kt")
    public void testPropertyInitializationAfterSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/propertyInitializationAfterSmartCast.kt");
    }

    @Test
    @TestMetadata("smartCastInsideIf.kt")
    public void testSmartCastInsideIf() {
      runTest("compiler/testData/codegen/box/smartCasts/smartCastInsideIf.kt");
    }

    @Test
    @TestMetadata("smartcastFromGenericToString.kt")
    public void testSmartcastFromGenericToString() {
      runTest("compiler/testData/codegen/box/smartCasts/smartcastFromGenericToString.kt");
    }

    @Test
    @TestMetadata("smartcastToStarType.kt")
    public void testSmartcastToStarType() {
      runTest("compiler/testData/codegen/box/smartCasts/smartcastToStarType.kt");
    }

    @Test
    @TestMetadata("whenSmartCast.kt")
    public void testWhenSmartCast() {
      runTest("compiler/testData/codegen/box/smartCasts/whenSmartCast.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/specialBuiltins")
  @TestDataPath("$PROJECT_ROOT")
  public class SpecialBuiltins {
    @Test
    public void testAllFilesPresentInSpecialBuiltins() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/specialBuiltins"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("bridgeNotEmptyMap.kt")
    public void testBridgeNotEmptyMap() {
      runTest("compiler/testData/codegen/box/specialBuiltins/bridgeNotEmptyMap.kt");
    }

    @Test
    @TestMetadata("bridges.kt")
    public void testBridges() {
      runTest("compiler/testData/codegen/box/specialBuiltins/bridges.kt");
    }

    @Test
    @TestMetadata("commonBridgesTarget.kt")
    public void testCommonBridgesTarget() {
      runTest("compiler/testData/codegen/box/specialBuiltins/commonBridgesTarget.kt");
    }

    @Test
    @TestMetadata("emptyList.kt")
    public void testEmptyList() {
      runTest("compiler/testData/codegen/box/specialBuiltins/emptyList.kt");
    }

    @Test
    @TestMetadata("emptyMap.kt")
    public void testEmptyMap() {
      runTest("compiler/testData/codegen/box/specialBuiltins/emptyMap.kt");
    }

    @Test
    @TestMetadata("emptyStringMap.kt")
    public void testEmptyStringMap() {
      runTest("compiler/testData/codegen/box/specialBuiltins/emptyStringMap.kt");
    }

    @Test
    @TestMetadata("entrySetSOE.kt")
    public void testEntrySetSOE() {
      runTest("compiler/testData/codegen/box/specialBuiltins/entrySetSOE.kt");
    }

    @Test
    @TestMetadata("enumAsOrdinaled.kt")
    public void testEnumAsOrdinaled() {
      runTest("compiler/testData/codegen/box/specialBuiltins/enumAsOrdinaled.kt");
    }

    @Test
    @TestMetadata("exceptionCause.kt")
    public void testExceptionCause() {
      runTest("compiler/testData/codegen/box/specialBuiltins/exceptionCause.kt");
    }

    @Test
    @TestMetadata("explicitSuperCall.kt")
    public void testExplicitSuperCall() {
      runTest("compiler/testData/codegen/box/specialBuiltins/explicitSuperCall.kt");
    }

    @Test
    @TestMetadata("irrelevantRemoveAtOverride.kt")
    public void testIrrelevantRemoveAtOverride() {
      runTest("compiler/testData/codegen/box/specialBuiltins/irrelevantRemoveAtOverride.kt");
    }

    @Test
    @TestMetadata("maps.kt")
    public void testMaps() {
      runTest("compiler/testData/codegen/box/specialBuiltins/maps.kt");
    }

    @Test
    @TestMetadata("noSpecialBridgeInSuperClass.kt")
    public void testNoSpecialBridgeInSuperClass() {
      runTest("compiler/testData/codegen/box/specialBuiltins/noSpecialBridgeInSuperClass.kt");
    }

    @Test
    @TestMetadata("notEmptyListAny.kt")
    public void testNotEmptyListAny() {
      runTest("compiler/testData/codegen/box/specialBuiltins/notEmptyListAny.kt");
    }

    @Test
    @TestMetadata("notEmptyMap.kt")
    public void testNotEmptyMap() {
      runTest("compiler/testData/codegen/box/specialBuiltins/notEmptyMap.kt");
    }

    @Test
    @TestMetadata("redundantStubForSize.kt")
    public void testRedundantStubForSize() {
      runTest("compiler/testData/codegen/box/specialBuiltins/redundantStubForSize.kt");
    }

    @Test
    @TestMetadata("removeAtTwoSpecialBridges.kt")
    public void testRemoveAtTwoSpecialBridges() {
      runTest("compiler/testData/codegen/box/specialBuiltins/removeAtTwoSpecialBridges.kt");
    }

    @Test
    @TestMetadata("removeSetInt.kt")
    public void testRemoveSetInt() {
      runTest("compiler/testData/codegen/box/specialBuiltins/removeSetInt.kt");
    }

    @Test
    @TestMetadata("throwable.kt")
    public void testThrowable() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwable.kt");
    }

    @Test
    @TestMetadata("throwableCause.kt")
    public void testThrowableCause() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwableCause.kt");
    }

    @Test
    @TestMetadata("throwableComplex.kt")
    public void testThrowableComplex() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwableComplex.kt");
    }

    @Test
    @TestMetadata("throwableImpl.kt")
    public void testThrowableImpl() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwableImpl.kt");
    }

    @Test
    @TestMetadata("throwableImplWithSecondaryConstructor.kt")
    public void testThrowableImplWithSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/specialBuiltins/throwableImplWithSecondaryConstructor.kt");
    }

    @Test
    @TestMetadata("valuesInsideEnum.kt")
    public void testValuesInsideEnum() {
      runTest("compiler/testData/codegen/box/specialBuiltins/valuesInsideEnum.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/statics")
  @TestDataPath("$PROJECT_ROOT")
  public class Statics {
    @Test
    public void testAllFilesPresentInStatics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/statics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("anonymousInitializerIObject.kt")
    public void testAnonymousInitializerIObject() {
      runTest("compiler/testData/codegen/box/statics/anonymousInitializerIObject.kt");
    }

    @Test
    @TestMetadata("anonymousInitializerInClassObject.kt")
    public void testAnonymousInitializerInClassObject() {
      runTest("compiler/testData/codegen/box/statics/anonymousInitializerInClassObject.kt");
    }

    @Test
    @TestMetadata("incInClassObject.kt")
    public void testIncInClassObject() {
      runTest("compiler/testData/codegen/box/statics/incInClassObject.kt");
    }

    @Test
    @TestMetadata("incInObject.kt")
    public void testIncInObject() {
      runTest("compiler/testData/codegen/box/statics/incInObject.kt");
    }

    @Test
    @TestMetadata("inheritedPropertyInClassObject.kt")
    public void testInheritedPropertyInClassObject() {
      runTest("compiler/testData/codegen/box/statics/inheritedPropertyInClassObject.kt");
    }

    @Test
    @TestMetadata("inheritedPropertyInObject.kt")
    public void testInheritedPropertyInObject() {
      runTest("compiler/testData/codegen/box/statics/inheritedPropertyInObject.kt");
    }

    @Test
    @TestMetadata("kt8089.kt")
    public void testKt8089() {
      runTest("compiler/testData/codegen/box/statics/kt8089.kt");
    }

    @Test
    @TestMetadata("syntheticAccessor.kt")
    public void testSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/statics/syntheticAccessor.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/storeStackBeforeInline")
  @TestDataPath("$PROJECT_ROOT")
  public class StoreStackBeforeInline {
    @Test
    public void testAllFilesPresentInStoreStackBeforeInline() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/storeStackBeforeInline"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("differentTypes.kt")
    public void testDifferentTypes() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/differentTypes.kt");
    }

    @Test
    @TestMetadata("primitiveMerge.kt")
    public void testPrimitiveMerge() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/primitiveMerge.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/simple.kt");
    }

    @Test
    @TestMetadata("unreachableMarker.kt")
    public void testUnreachableMarker() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/unreachableMarker.kt");
    }

    @Test
    @TestMetadata("withLambda.kt")
    public void testWithLambda() {
      runTest("compiler/testData/codegen/box/storeStackBeforeInline/withLambda.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/strings")
  @TestDataPath("$PROJECT_ROOT")
  public class Strings {
    @Test
    public void testAllFilesPresentInStrings() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/strings"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("concatDynamicWithConstants.kt")
    public void testConcatDynamicWithConstants() {
      runTest("compiler/testData/codegen/box/strings/concatDynamicWithConstants.kt");
    }

    @Test
    @TestMetadata("concatDynamicWithSpecialSymbols.kt")
    public void testConcatDynamicWithSpecialSymbols() {
      runTest("compiler/testData/codegen/box/strings/concatDynamicWithSpecialSymbols.kt");
    }

    @Test
    @TestMetadata("concatGenericWithNullablePrimitiveUpperBound.kt")
    public void testConcatGenericWithNullablePrimitiveUpperBound() {
      runTest("compiler/testData/codegen/box/strings/concatGenericWithNullablePrimitiveUpperBound.kt");
    }

    @Test
    @TestMetadata("concatGenericWithPrimitiveUpperBound.kt")
    public void testConcatGenericWithPrimitiveUpperBound() {
      runTest("compiler/testData/codegen/box/strings/concatGenericWithPrimitiveUpperBound.kt");
    }

    @Test
    @TestMetadata("concatGenericWithStringUpperBound.kt")
    public void testConcatGenericWithStringUpperBound() {
      runTest("compiler/testData/codegen/box/strings/concatGenericWithStringUpperBound.kt");
    }

    @Test
    @TestMetadata("concatNullableGenericWithPrimitiveUpperBound.kt")
    public void testConcatNullableGenericWithPrimitiveUpperBound() {
      runTest("compiler/testData/codegen/box/strings/concatNullableGenericWithPrimitiveUpperBound.kt");
    }

    @Test
    @TestMetadata("constInStringTemplate.kt")
    public void testConstInStringTemplate() {
      runTest("compiler/testData/codegen/box/strings/constInStringTemplate.kt");
    }

    @Test
    @TestMetadata("ea35743.kt")
    public void testEa35743() {
      runTest("compiler/testData/codegen/box/strings/ea35743.kt");
    }

    @Test
    @TestMetadata("forInString.kt")
    public void testForInString() {
      runTest("compiler/testData/codegen/box/strings/forInString.kt");
    }

    @Test
    @TestMetadata("interpolation.kt")
    public void testInterpolation() {
      runTest("compiler/testData/codegen/box/strings/interpolation.kt");
    }

    @Test
    @TestMetadata("kt13213.kt")
    public void testKt13213() {
      runTest("compiler/testData/codegen/box/strings/kt13213.kt");
    }

    @Test
    @TestMetadata("kt13213a.kt")
    public void testKt13213a() {
      runTest("compiler/testData/codegen/box/strings/kt13213a.kt");
    }

    @Test
    @TestMetadata("kt2592.kt")
    public void testKt2592() {
      runTest("compiler/testData/codegen/box/strings/kt2592.kt");
    }

    @Test
    @TestMetadata("kt3571.kt")
    public void testKt3571() {
      runTest("compiler/testData/codegen/box/strings/kt3571.kt");
    }

    @Test
    @TestMetadata("kt3652.kt")
    public void testKt3652() {
      runTest("compiler/testData/codegen/box/strings/kt3652.kt");
    }

    @Test
    @TestMetadata("kt47917.kt")
    public void testKt47917() {
      runTest("compiler/testData/codegen/box/strings/kt47917.kt");
    }

    @Test
    @TestMetadata("kt50140.kt")
    public void testKt50140() {
      runTest("compiler/testData/codegen/box/strings/kt50140.kt");
    }

    @Test
    @TestMetadata("kt5389_stringBuilderGet.kt")
    public void testKt5389_stringBuilderGet() {
      runTest("compiler/testData/codegen/box/strings/kt5389_stringBuilderGet.kt");
    }

    @Test
    @TestMetadata("kt5956.kt")
    public void testKt5956() {
      runTest("compiler/testData/codegen/box/strings/kt5956.kt");
    }

    @Test
    @TestMetadata("kt881.kt")
    public void testKt881() {
      runTest("compiler/testData/codegen/box/strings/kt881.kt");
    }

    @Test
    @TestMetadata("kt889.kt")
    public void testKt889() {
      runTest("compiler/testData/codegen/box/strings/kt889.kt");
    }

    @Test
    @TestMetadata("kt894.kt")
    public void testKt894() {
      runTest("compiler/testData/codegen/box/strings/kt894.kt");
    }

    @Test
    @TestMetadata("multilineStringsWithTemplates.kt")
    public void testMultilineStringsWithTemplates() {
      runTest("compiler/testData/codegen/box/strings/multilineStringsWithTemplates.kt");
    }

    @Test
    @TestMetadata("nestedConcat.kt")
    public void testNestedConcat() {
      runTest("compiler/testData/codegen/box/strings/nestedConcat.kt");
    }

    @Test
    @TestMetadata("rawStrings.kt")
    public void testRawStrings() {
      runTest("compiler/testData/codegen/box/strings/rawStrings.kt");
    }

    @Test
    @TestMetadata("rawStringsWithManyQuotes.kt")
    public void testRawStringsWithManyQuotes() {
      runTest("compiler/testData/codegen/box/strings/rawStringsWithManyQuotes.kt");
    }

    @Test
    @TestMetadata("simpleStringPlus.kt")
    public void testSimpleStringPlus() {
      runTest("compiler/testData/codegen/box/strings/simpleStringPlus.kt");
    }

    @Test
    @TestMetadata("singleConcatNullable.kt")
    public void testSingleConcatNullable() {
      runTest("compiler/testData/codegen/box/strings/singleConcatNullable.kt");
    }

    @Test
    @TestMetadata("stringBuilderAppend.kt")
    public void testStringBuilderAppend() {
      runTest("compiler/testData/codegen/box/strings/stringBuilderAppend.kt");
    }

    @Test
    @TestMetadata("stringPlusOnlyWorksOnString.kt")
    public void testStringPlusOnlyWorksOnString() {
      runTest("compiler/testData/codegen/box/strings/stringPlusOnlyWorksOnString.kt");
    }

    @Test
    @TestMetadata("stringPlusOverride.kt")
    public void testStringPlusOverride() {
      runTest("compiler/testData/codegen/box/strings/stringPlusOverride.kt");
    }

    @Test
    @TestMetadata("surrogatePair.kt")
    public void testSurrogatePair() {
      runTest("compiler/testData/codegen/box/strings/surrogatePair.kt");
    }

    @Test
    @TestMetadata("trimOptimization.kt")
    public void testTrimOptimization() {
      runTest("compiler/testData/codegen/box/strings/trimOptimization.kt");
    }

    @Test
    @TestMetadata("twoArgumentNullableStringOperatorPlus.kt")
    public void testTwoArgumentNullableStringOperatorPlus() {
      runTest("compiler/testData/codegen/box/strings/twoArgumentNullableStringOperatorPlus.kt");
    }

    @Test
    @TestMetadata("twoArgumentNullableStringPlus.kt")
    public void testTwoArgumentNullableStringPlus() {
      runTest("compiler/testData/codegen/box/strings/twoArgumentNullableStringPlus.kt");
    }

    @Test
    @TestMetadata("twoArgumentStringTemplate.kt")
    public void testTwoArgumentStringTemplate() {
      runTest("compiler/testData/codegen/box/strings/twoArgumentStringTemplate.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/super")
  @TestDataPath("$PROJECT_ROOT")
  public class Super {
    @Test
    public void testAllFilesPresentInSuper() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/super"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("basicmethodSuperClass.kt")
    public void testBasicmethodSuperClass() {
      runTest("compiler/testData/codegen/box/super/basicmethodSuperClass.kt");
    }

    @Test
    @TestMetadata("basicmethodSuperTrait.kt")
    public void testBasicmethodSuperTrait() {
      runTest("compiler/testData/codegen/box/super/basicmethodSuperTrait.kt");
    }

    @Test
    @TestMetadata("basicproperty.kt")
    public void testBasicproperty() {
      runTest("compiler/testData/codegen/box/super/basicproperty.kt");
    }

    @Test
    @TestMetadata("enclosedFun.kt")
    public void testEnclosedFun() {
      runTest("compiler/testData/codegen/box/super/enclosedFun.kt");
    }

    @Test
    @TestMetadata("enclosedVar.kt")
    public void testEnclosedVar() {
      runTest("compiler/testData/codegen/box/super/enclosedVar.kt");
    }

    @Test
    @TestMetadata("innerClassLabeledSuper.kt")
    public void testInnerClassLabeledSuper() {
      runTest("compiler/testData/codegen/box/super/innerClassLabeledSuper.kt");
    }

    @Test
    @TestMetadata("innerClassLabeledSuper2.kt")
    public void testInnerClassLabeledSuper2() {
      runTest("compiler/testData/codegen/box/super/innerClassLabeledSuper2.kt");
    }

    @Test
    @TestMetadata("innerClassLabeledSuperProperty.kt")
    public void testInnerClassLabeledSuperProperty() {
      runTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty.kt");
    }

    @Test
    @TestMetadata("innerClassLabeledSuperProperty2.kt")
    public void testInnerClassLabeledSuperProperty2() {
      runTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty2.kt");
    }

    @Test
    @TestMetadata("innerClassQualifiedFunctionCall.kt")
    public void testInnerClassQualifiedFunctionCall() {
      runTest("compiler/testData/codegen/box/super/innerClassQualifiedFunctionCall.kt");
    }

    @Test
    @TestMetadata("innerClassQualifiedPropertyAccess.kt")
    public void testInnerClassQualifiedPropertyAccess() {
      runTest("compiler/testData/codegen/box/super/innerClassQualifiedPropertyAccess.kt");
    }

    @Test
    @TestMetadata("interfaceHashCode.kt")
    public void testInterfaceHashCode() {
      runTest("compiler/testData/codegen/box/super/interfaceHashCode.kt");
    }

    @Test
    @TestMetadata("kt14243.kt")
    public void testKt14243() {
      runTest("compiler/testData/codegen/box/super/kt14243.kt");
    }

    @Test
    @TestMetadata("kt14243_2.kt")
    public void testKt14243_2() {
      runTest("compiler/testData/codegen/box/super/kt14243_2.kt");
    }

    @Test
    @TestMetadata("kt14243_class.kt")
    public void testKt14243_class() {
      runTest("compiler/testData/codegen/box/super/kt14243_class.kt");
    }

    @Test
    @TestMetadata("kt14243_prop.kt")
    public void testKt14243_prop() {
      runTest("compiler/testData/codegen/box/super/kt14243_prop.kt");
    }

    @Test
    @TestMetadata("kt3492ClassFun.kt")
    public void testKt3492ClassFun() {
      runTest("compiler/testData/codegen/box/super/kt3492ClassFun.kt");
    }

    @Test
    @TestMetadata("kt3492ClassProperty.kt")
    public void testKt3492ClassProperty() {
      runTest("compiler/testData/codegen/box/super/kt3492ClassProperty.kt");
    }

    @Test
    @TestMetadata("kt3492TraitFun.kt")
    public void testKt3492TraitFun() {
      runTest("compiler/testData/codegen/box/super/kt3492TraitFun.kt");
    }

    @Test
    @TestMetadata("kt3492TraitProperty.kt")
    public void testKt3492TraitProperty() {
      runTest("compiler/testData/codegen/box/super/kt3492TraitProperty.kt");
    }

    @Test
    @TestMetadata("kt4173.kt")
    public void testKt4173() {
      runTest("compiler/testData/codegen/box/super/kt4173.kt");
    }

    @Test
    @TestMetadata("kt4173_2.kt")
    public void testKt4173_2() {
      runTest("compiler/testData/codegen/box/super/kt4173_2.kt");
    }

    @Test
    @TestMetadata("kt4173_3.kt")
    public void testKt4173_3() {
      runTest("compiler/testData/codegen/box/super/kt4173_3.kt");
    }

    @Test
    @TestMetadata("kt4982.kt")
    public void testKt4982() {
      runTest("compiler/testData/codegen/box/super/kt4982.kt");
    }

    @Test
    @TestMetadata("multipleSuperTraits.kt")
    public void testMultipleSuperTraits() {
      runTest("compiler/testData/codegen/box/super/multipleSuperTraits.kt");
    }

    @Test
    @TestMetadata("superCallToNonGenericImplThroughGenericDefaultImpls.kt")
    public void testSuperCallToNonGenericImplThroughGenericDefaultImpls() {
      runTest("compiler/testData/codegen/box/super/superCallToNonGenericImplThroughGenericDefaultImpls.kt");
    }

    @Test
    @TestMetadata("traitproperty.kt")
    public void testTraitproperty() {
      runTest("compiler/testData/codegen/box/super/traitproperty.kt");
    }

    @Test
    @TestMetadata("unqualifiedSuper.kt")
    public void testUnqualifiedSuper() {
      runTest("compiler/testData/codegen/box/super/unqualifiedSuper.kt");
    }

    @Test
    @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
    public void testUnqualifiedSuperWithDeeperHierarchies() {
      runTest("compiler/testData/codegen/box/super/unqualifiedSuperWithDeeperHierarchies.kt");
    }

    @Test
    @TestMetadata("unqualifiedSuperWithMethodsOfAny.kt")
    public void testUnqualifiedSuperWithMethodsOfAny() {
      runTest("compiler/testData/codegen/box/super/unqualifiedSuperWithMethodsOfAny.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/super/superConstructor")
    @TestDataPath("$PROJECT_ROOT")
    public class SuperConstructor {
      @Test
      public void testAllFilesPresentInSuperConstructor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/super/superConstructor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt13846.kt")
      public void testKt13846() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt13846.kt");
      }

      @Test
      @TestMetadata("kt17464_arrayOf.kt")
      public void testKt17464_arrayOf() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt17464_arrayOf.kt");
      }

      @Test
      @TestMetadata("kt17464_linkedMapOf.kt")
      public void testKt17464_linkedMapOf() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt17464_linkedMapOf.kt");
      }

      @Test
      @TestMetadata("kt18356.kt")
      public void testKt18356() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt18356.kt");
      }

      @Test
      @TestMetadata("kt18356_2.kt")
      public void testKt18356_2() {
        runTest("compiler/testData/codegen/box/super/superConstructor/kt18356_2.kt");
      }

      @Test
      @TestMetadata("objectExtendsInner.kt")
      public void testObjectExtendsInner() {
        runTest("compiler/testData/codegen/box/super/superConstructor/objectExtendsInner.kt");
      }

      @Test
      @TestMetadata("objectExtendsLocalInner.kt")
      public void testObjectExtendsLocalInner() {
        runTest("compiler/testData/codegen/box/super/superConstructor/objectExtendsLocalInner.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/suppressions")
  @TestDataPath("$PROJECT_ROOT")
  public class Suppressions {
    @Test
    public void testAllFilesPresentInSuppressions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/suppressions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("suppressInvisible.kt")
    public void testSuppressInvisible() {
      runTest("compiler/testData/codegen/box/suppressions/suppressInvisible.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/suspendConversion")
  @TestDataPath("$PROJECT_ROOT")
  public class SuspendConversion {
    @Test
    public void testAllFilesPresentInSuspendConversion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/suspendConversion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("basicSuspendConversion.kt")
    public void testBasicSuspendConversion() {
      runTest("compiler/testData/codegen/box/suspendConversion/basicSuspendConversion.kt");
    }

    @Test
    @TestMetadata("basicSuspendConversionDefault.kt")
    public void testBasicSuspendConversionDefault() {
      runTest("compiler/testData/codegen/box/suspendConversion/basicSuspendConversionDefault.kt");
    }

    @Test
    @TestMetadata("basicSuspendConversionForCallableReference.kt")
    public void testBasicSuspendConversionForCallableReference() {
      runTest("compiler/testData/codegen/box/suspendConversion/basicSuspendConversionForCallableReference.kt");
    }

    @Test
    @TestMetadata("chainedFunSuspendConversionForSimpleExpression.kt")
    public void testChainedFunSuspendConversionForSimpleExpression() {
      runTest("compiler/testData/codegen/box/suspendConversion/chainedFunSuspendConversionForSimpleExpression.kt");
    }

    @Test
    @TestMetadata("kt50949_suspendConversionForExtensionFunction.kt")
    public void testKt50949_suspendConversionForExtensionFunction() {
      runTest("compiler/testData/codegen/box/suspendConversion/kt50949_suspendConversionForExtensionFunction.kt");
    }

    @Test
    @TestMetadata("overloadResolutionBySuspendModifier.kt")
    public void testOverloadResolutionBySuspendModifier() {
      runTest("compiler/testData/codegen/box/suspendConversion/overloadResolutionBySuspendModifier.kt");
    }

    @Test
    @TestMetadata("severalConversionsInOneCall.kt")
    public void testSeveralConversionsInOneCall() {
      runTest("compiler/testData/codegen/box/suspendConversion/severalConversionsInOneCall.kt");
    }

    @Test
    @TestMetadata("suspendAndFunConversionInDisabledMode.kt")
    public void testSuspendAndFunConversionInDisabledMode() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendAndFunConversionInDisabledMode.kt");
    }

    @Test
    @TestMetadata("suspendConversionCompatibility.kt")
    public void testSuspendConversionCompatibility() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionCompatibility.kt");
    }

    @Test
    @TestMetadata("suspendConversionOnVarargElements.kt")
    public void testSuspendConversionOnVarargElements() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionOnVarargElements.kt");
    }

    @Test
    @TestMetadata("suspendConversionWithFunInterfaces.kt")
    public void testSuspendConversionWithFunInterfaces() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionWithFunInterfaces.kt");
    }

    @Test
    @TestMetadata("suspendConversionWithReferenceAdaptation.kt")
    public void testSuspendConversionWithReferenceAdaptation() {
      runTest("compiler/testData/codegen/box/suspendConversion/suspendConversionWithReferenceAdaptation.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/synchronized")
  @TestDataPath("$PROJECT_ROOT")
  public class Synchronized {
    @Test
    public void testAllFilesPresentInSynchronized() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/synchronized"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/syntheticAccessors")
  @TestDataPath("$PROJECT_ROOT")
  public class SyntheticAccessors {
    @Test
    @TestMetadata("accessorForAbstractProtected.kt")
    public void testAccessorForAbstractProtected() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForAbstractProtected.kt");
    }

    @Test
    @TestMetadata("accessorForGenericConstructor.kt")
    public void testAccessorForGenericConstructor() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericConstructor.kt");
    }

    @Test
    @TestMetadata("accessorForGenericMethod.kt")
    public void testAccessorForGenericMethod() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericMethod.kt");
    }

    @Test
    @TestMetadata("accessorForGenericMethodWithDefaults.kt")
    public void testAccessorForGenericMethodWithDefaults() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericMethodWithDefaults.kt");
    }

    @Test
    @TestMetadata("accessorForProtected.kt")
    public void testAccessorForProtected() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtected.kt");
    }

    @Test
    @TestMetadata("accessorForProtectedInvokeVirtual.kt")
    public void testAccessorForProtectedInvokeVirtual() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtectedInvokeVirtual.kt");
    }

    @Test
    @TestMetadata("accessorForProtectedPropertyReference.kt")
    public void testAccessorForProtectedPropertyReference() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtectedPropertyReference.kt");
    }

    @Test
    public void testAllFilesPresentInSyntheticAccessors() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticAccessors"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/inline.kt");
    }

    @Test
    @TestMetadata("inlineInOtherClass.kt")
    public void testInlineInOtherClass() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/inlineInOtherClass.kt");
    }

    @Test
    @TestMetadata("kt10047.kt")
    public void testKt10047() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt10047.kt");
    }

    @Test
    @TestMetadata("kt21258_indirect.kt")
    public void testKt21258_indirect() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt21258_indirect.kt");
    }

    @Test
    @TestMetadata("kt21258_simple.kt")
    public void testKt21258_simple() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt21258_simple.kt");
    }

    @Test
    @TestMetadata("kt49316.kt")
    public void testKt49316() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt49316.kt");
    }

    @Test
    @TestMetadata("kt9717.kt")
    public void testKt9717() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt9717.kt");
    }

    @Test
    @TestMetadata("kt9717DifferentPackages.kt")
    public void testKt9717DifferentPackages() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt9717DifferentPackages.kt");
    }

    @Test
    @TestMetadata("kt9958.kt")
    public void testKt9958() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt9958.kt");
    }

    @Test
    @TestMetadata("kt9958Interface.kt")
    public void testKt9958Interface() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/kt9958Interface.kt");
    }

    @Test
    @TestMetadata("protectedFromLambda.kt")
    public void testProtectedFromLambda() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/protectedFromLambda.kt");
    }

    @Test
    @TestMetadata("superCallFromMultipleSubclasses.kt")
    public void testSuperCallFromMultipleSubclasses() {
      runTest("compiler/testData/codegen/box/syntheticAccessors/superCallFromMultipleSubclasses.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor")
    @TestDataPath("$PROJECT_ROOT")
    public class ProtectedJavaFieldAccessor {
      @Test
      public void testAllFilesPresentInProtectedJavaFieldAccessor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticAccessors/protectedJavaFieldAccessor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor")
    @TestDataPath("$PROJECT_ROOT")
    public class ProtectedMemberReferenceAccessor {
      @Test
      public void testAllFilesPresentInProtectedMemberReferenceAccessor() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("kt46597_crossinline_method.kt")
      public void testKt46597_crossinline_method() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_crossinline_method.kt");
      }

      @Test
      @TestMetadata("kt46597_crossinline_property.kt")
      public void testKt46597_crossinline_property() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_crossinline_property.kt");
      }

      @Test
      @TestMetadata("kt46597_method.kt")
      public void testKt46597_method() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_method.kt");
      }

      @Test
      @TestMetadata("kt46597_property.kt")
      public void testKt46597_property() {
        runTest("compiler/testData/codegen/box/syntheticAccessors/protectedMemberReferenceAccessor/kt46597_property.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/syntheticExtensions")
  @TestDataPath("$PROJECT_ROOT")
  public class SyntheticExtensions {
    @Test
    public void testAllFilesPresentInSyntheticExtensions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticExtensions"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/throws")
  @TestDataPath("$PROJECT_ROOT")
  public class Throws {
    @Test
    public void testAllFilesPresentInThrows() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/throws"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/toArray")
  @TestDataPath("$PROJECT_ROOT")
  public class ToArray {
    @Test
    public void testAllFilesPresentInToArray() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/toArray"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("kt3177-toTypedArray.kt")
    public void testKt3177_toTypedArray() {
      runTest("compiler/testData/codegen/box/toArray/kt3177-toTypedArray.kt");
    }

    @Test
    @TestMetadata("returnToTypedArray.kt")
    public void testReturnToTypedArray() {
      runTest("compiler/testData/codegen/box/toArray/returnToTypedArray.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/topLevelInitializtion")
  @TestDataPath("$PROJECT_ROOT")
  public class TopLevelInitializtion {
    @Test
    public void testAllFilesPresentInTopLevelInitializtion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/topLevelInitializtion"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("failInInitializer1.kt")
    public void testFailInInitializer1() {
      runTest("compiler/testData/codegen/box/topLevelInitializtion/failInInitializer1.kt");
    }

    @Test
    @TestMetadata("failInInitializer2.kt")
    public void testFailInInitializer2() {
      runTest("compiler/testData/codegen/box/topLevelInitializtion/failInInitializer2.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/topLevelPrivate")
  @TestDataPath("$PROJECT_ROOT")
  public class TopLevelPrivate {
    @Test
    public void testAllFilesPresentInTopLevelPrivate() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/topLevelPrivate"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("privateInInlineNested.kt")
    public void testPrivateInInlineNested() {
      runTest("compiler/testData/codegen/box/topLevelPrivate/privateInInlineNested.kt");
    }

    @Test
    @TestMetadata("syntheticAccessor.kt")
    public void testSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/topLevelPrivate/syntheticAccessor.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/trailingComma")
  @TestDataPath("$PROJECT_ROOT")
  public class TrailingComma {
    @Test
    public void testAllFilesPresentInTrailingComma() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/trailingComma"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("noDisambiguation.kt")
    public void testNoDisambiguation() {
      runTest("compiler/testData/codegen/box/trailingComma/noDisambiguation.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/traits")
  @TestDataPath("$PROJECT_ROOT")
  public class Traits {
    @Test
    @TestMetadata("abstractClassWithFakeOverride.kt")
    public void testAbstractClassWithFakeOverride() {
      runTest("compiler/testData/codegen/box/traits/abstractClassWithFakeOverride.kt");
    }

    @Test
    public void testAllFilesPresentInTraits() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/traits"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("diamondPropertyAccessors.kt")
    public void testDiamondPropertyAccessors() {
      runTest("compiler/testData/codegen/box/traits/diamondPropertyAccessors.kt");
    }

    @Test
    @TestMetadata("doubleDiamond.kt")
    public void testDoubleDiamond() {
      runTest("compiler/testData/codegen/box/traits/doubleDiamond.kt");
    }

    @Test
    @TestMetadata("doubleGenericDiamond.kt")
    public void testDoubleGenericDiamond() {
      runTest("compiler/testData/codegen/box/traits/doubleGenericDiamond.kt");
    }

    @Test
    @TestMetadata("genericMethod.kt")
    public void testGenericMethod() {
      runTest("compiler/testData/codegen/box/traits/genericMethod.kt");
    }

    @Test
    @TestMetadata("indirectlyInheritPropertyGetter.kt")
    public void testIndirectlyInheritPropertyGetter() {
      runTest("compiler/testData/codegen/box/traits/indirectlyInheritPropertyGetter.kt");
    }

    @Test
    @TestMetadata("inheritedFun.kt")
    public void testInheritedFun() {
      runTest("compiler/testData/codegen/box/traits/inheritedFun.kt");
    }

    @Test
    @TestMetadata("inheritedVar.kt")
    public void testInheritedVar() {
      runTest("compiler/testData/codegen/box/traits/inheritedVar.kt");
    }

    @Test
    @TestMetadata("interfaceWithNonAbstractFunIndirect.kt")
    public void testInterfaceWithNonAbstractFunIndirect() {
      runTest("compiler/testData/codegen/box/traits/interfaceWithNonAbstractFunIndirect.kt");
    }

    @Test
    @TestMetadata("interfaceWithNonAbstractFunIndirectGeneric.kt")
    public void testInterfaceWithNonAbstractFunIndirectGeneric() {
      runTest("compiler/testData/codegen/box/traits/interfaceWithNonAbstractFunIndirectGeneric.kt");
    }

    @Test
    @TestMetadata("kt1936.kt")
    public void testKt1936() {
      runTest("compiler/testData/codegen/box/traits/kt1936.kt");
    }

    @Test
    @TestMetadata("kt1936_1.kt")
    public void testKt1936_1() {
      runTest("compiler/testData/codegen/box/traits/kt1936_1.kt");
    }

    @Test
    @TestMetadata("kt2260.kt")
    public void testKt2260() {
      runTest("compiler/testData/codegen/box/traits/kt2260.kt");
    }

    @Test
    @TestMetadata("kt2399.kt")
    public void testKt2399() {
      runTest("compiler/testData/codegen/box/traits/kt2399.kt");
    }

    @Test
    @TestMetadata("kt2541.kt")
    public void testKt2541() {
      runTest("compiler/testData/codegen/box/traits/kt2541.kt");
    }

    @Test
    @TestMetadata("kt3315.kt")
    public void testKt3315() {
      runTest("compiler/testData/codegen/box/traits/kt3315.kt");
    }

    @Test
    @TestMetadata("kt3500.kt")
    public void testKt3500() {
      runTest("compiler/testData/codegen/box/traits/kt3500.kt");
    }

    @Test
    @TestMetadata("kt3579.kt")
    public void testKt3579() {
      runTest("compiler/testData/codegen/box/traits/kt3579.kt");
    }

    @Test
    @TestMetadata("kt3579_2.kt")
    public void testKt3579_2() {
      runTest("compiler/testData/codegen/box/traits/kt3579_2.kt");
    }

    @Test
    @TestMetadata("kt36973.kt")
    public void testKt36973() {
      runTest("compiler/testData/codegen/box/traits/kt36973.kt");
    }

    @Test
    @TestMetadata("kt5393.kt")
    public void testKt5393() {
      runTest("compiler/testData/codegen/box/traits/kt5393.kt");
    }

    @Test
    @TestMetadata("kt5393_property.kt")
    public void testKt5393_property() {
      runTest("compiler/testData/codegen/box/traits/kt5393_property.kt");
    }

    @Test
    @TestMetadata("multiple.kt")
    public void testMultiple() {
      runTest("compiler/testData/codegen/box/traits/multiple.kt");
    }

    @Test
    @TestMetadata("privateInterfaceMethod.kt")
    public void testPrivateInterfaceMethod() {
      runTest("compiler/testData/codegen/box/traits/privateInterfaceMethod.kt");
    }

    @Test
    @TestMetadata("receiverOfIntersectionType.kt")
    public void testReceiverOfIntersectionType() {
      runTest("compiler/testData/codegen/box/traits/receiverOfIntersectionType.kt");
    }

    @Test
    @TestMetadata("sameNameMethodFromInterface.kt")
    public void testSameNameMethodFromInterface() {
      runTest("compiler/testData/codegen/box/traits/sameNameMethodFromInterface.kt");
    }

    @Test
    @TestMetadata("syntheticAccessor.kt")
    public void testSyntheticAccessor() {
      runTest("compiler/testData/codegen/box/traits/syntheticAccessor.kt");
    }

    @Test
    @TestMetadata("traitImplDelegationWithCovariantOverride.kt")
    public void testTraitImplDelegationWithCovariantOverride() {
      runTest("compiler/testData/codegen/box/traits/traitImplDelegationWithCovariantOverride.kt");
    }

    @Test
    @TestMetadata("traitImplDiamond.kt")
    public void testTraitImplDiamond() {
      runTest("compiler/testData/codegen/box/traits/traitImplDiamond.kt");
    }

    @Test
    @TestMetadata("traitImplGenericDelegation.kt")
    public void testTraitImplGenericDelegation() {
      runTest("compiler/testData/codegen/box/traits/traitImplGenericDelegation.kt");
    }

    @Test
    @TestMetadata("traitWithPrivateExtension.kt")
    public void testTraitWithPrivateExtension() {
      runTest("compiler/testData/codegen/box/traits/traitWithPrivateExtension.kt");
    }

    @Test
    @TestMetadata("traitWithPrivateMember.kt")
    public void testTraitWithPrivateMember() {
      runTest("compiler/testData/codegen/box/traits/traitWithPrivateMember.kt");
    }

    @Test
    @TestMetadata("traitWithPrivateMemberAccessFromLambda.kt")
    public void testTraitWithPrivateMemberAccessFromLambda() {
      runTest("compiler/testData/codegen/box/traits/traitWithPrivateMemberAccessFromLambda.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/typeInfo")
  @TestDataPath("$PROJECT_ROOT")
  public class TypeInfo {
    @Test
    public void testAllFilesPresentInTypeInfo() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typeInfo"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("ifOrWhenSpecialCall.kt")
    public void testIfOrWhenSpecialCall() {
      runTest("compiler/testData/codegen/box/typeInfo/ifOrWhenSpecialCall.kt");
    }

    @Test
    @TestMetadata("implicitSmartCastThis.kt")
    public void testImplicitSmartCastThis() {
      runTest("compiler/testData/codegen/box/typeInfo/implicitSmartCastThis.kt");
    }

    @Test
    @TestMetadata("inheritance.kt")
    public void testInheritance() {
      runTest("compiler/testData/codegen/box/typeInfo/inheritance.kt");
    }

    @Test
    @TestMetadata("kt2811.kt")
    public void testKt2811() {
      runTest("compiler/testData/codegen/box/typeInfo/kt2811.kt");
    }

    @Test
    @TestMetadata("primitiveTypeInfo.kt")
    public void testPrimitiveTypeInfo() {
      runTest("compiler/testData/codegen/box/typeInfo/primitiveTypeInfo.kt");
    }

    @Test
    @TestMetadata("smartCastThis.kt")
    public void testSmartCastThis() {
      runTest("compiler/testData/codegen/box/typeInfo/smartCastThis.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/typeMapping")
  @TestDataPath("$PROJECT_ROOT")
  public class TypeMapping {
    @Test
    public void testAllFilesPresentInTypeMapping() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typeMapping"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("kt2831.kt")
    public void testKt2831() {
      runTest("compiler/testData/codegen/box/typeMapping/kt2831.kt");
    }

    @Test
    @TestMetadata("kt3286.kt")
    public void testKt3286() {
      runTest("compiler/testData/codegen/box/typeMapping/kt3286.kt");
    }

    @Test
    @TestMetadata("kt3863.kt")
    public void testKt3863() {
      runTest("compiler/testData/codegen/box/typeMapping/kt3863.kt");
    }

    @Test
    @TestMetadata("kt3976.kt")
    public void testKt3976() {
      runTest("compiler/testData/codegen/box/typeMapping/kt3976.kt");
    }

    @Test
    @TestMetadata("nothing.kt")
    public void testNothing() {
      runTest("compiler/testData/codegen/box/typeMapping/nothing.kt");
    }

    @Test
    @TestMetadata("nullNothing.kt")
    public void testNullNothing() {
      runTest("compiler/testData/codegen/box/typeMapping/nullNothing.kt");
    }

    @Test
    @TestMetadata("nullableNothing.kt")
    public void testNullableNothing() {
      runTest("compiler/testData/codegen/box/typeMapping/nullableNothing.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/typealias")
  @TestDataPath("$PROJECT_ROOT")
  public class Typealias {
    @Test
    public void testAllFilesPresentInTypealias() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typealias"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("deserializedAbbreviationWithRedundantArgument.kt")
    public void testDeserializedAbbreviationWithRedundantArgument() {
      runTest("compiler/testData/codegen/box/typealias/deserializedAbbreviationWithRedundantArgument.kt");
    }

    @Test
    @TestMetadata("enumEntryQualifier.kt")
    public void testEnumEntryQualifier() {
      runTest("compiler/testData/codegen/box/typealias/enumEntryQualifier.kt");
    }

    @Test
    @TestMetadata("extensionFunction.kt")
    public void testExtensionFunction() {
      runTest("compiler/testData/codegen/box/typealias/extensionFunction.kt");
    }

    @Test
    @TestMetadata("genericTypeAliasConstructor.kt")
    public void testGenericTypeAliasConstructor() {
      runTest("compiler/testData/codegen/box/typealias/genericTypeAliasConstructor.kt");
    }

    @Test
    @TestMetadata("genericTypeAliasConstructor2.kt")
    public void testGenericTypeAliasConstructor2() {
      runTest("compiler/testData/codegen/box/typealias/genericTypeAliasConstructor2.kt");
    }

    @Test
    @TestMetadata("incorrectTypeOfTypealiasForSuspendFTMM.kt")
    public void testIncorrectTypeOfTypealiasForSuspendFTMM() {
      runTest("compiler/testData/codegen/box/typealias/incorrectTypeOfTypealiasForSuspendFTMM.kt");
    }

    @Test
    @TestMetadata("incorrectTypeOfTypealiasForSuspendFunctionalType.kt")
    public void testIncorrectTypeOfTypealiasForSuspendFunctionalType() {
      runTest("compiler/testData/codegen/box/typealias/incorrectTypeOfTypealiasForSuspendFunctionalType.kt");
    }

    @Test
    @TestMetadata("innerClassTypeAliasConstructor.kt")
    public void testInnerClassTypeAliasConstructor() {
      runTest("compiler/testData/codegen/box/typealias/innerClassTypeAliasConstructor.kt");
    }

    @Test
    @TestMetadata("innerClassTypeAliasConstructorInSupertypes.kt")
    public void testInnerClassTypeAliasConstructorInSupertypes() {
      runTest("compiler/testData/codegen/box/typealias/innerClassTypeAliasConstructorInSupertypes.kt");
    }

    @Test
    @TestMetadata("kt15109.kt")
    public void testKt15109() {
      runTest("compiler/testData/codegen/box/typealias/kt15109.kt");
    }

    @Test
    @TestMetadata("kt45308.kt")
    public void testKt45308() {
      runTest("compiler/testData/codegen/box/typealias/kt45308.kt");
    }

    @Test
    @TestMetadata("objectLiteralConstructor.kt")
    public void testObjectLiteralConstructor() {
      runTest("compiler/testData/codegen/box/typealias/objectLiteralConstructor.kt");
    }

    @Test
    @TestMetadata("privateInKlib.kt")
    public void testPrivateInKlib() {
      runTest("compiler/testData/codegen/box/typealias/privateInKlib.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/typealias/simple.kt");
    }

    @Test
    @TestMetadata("typeAliasAsBareType.kt")
    public void testTypeAliasAsBareType() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasAsBareType.kt");
    }

    @Test
    @TestMetadata("typeAliasCompanion.kt")
    public void testTypeAliasCompanion() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasCompanion.kt");
    }

    @Test
    @TestMetadata("typeAliasConstructor.kt")
    public void testTypeAliasConstructor() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasConstructor.kt");
    }

    @Test
    @TestMetadata("typeAliasConstructorAccessor.kt")
    public void testTypeAliasConstructorAccessor() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorAccessor.kt");
    }

    @Test
    @TestMetadata("typeAliasConstructorForArray.kt")
    public void testTypeAliasConstructorForArray() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorForArray.kt");
    }

    @Test
    @TestMetadata("typeAliasConstructorInSuperCall.kt")
    public void testTypeAliasConstructorInSuperCall() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorInSuperCall.kt");
    }

    @Test
    @TestMetadata("typeAliasFunction.kt")
    public void testTypeAliasFunction() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasFunction.kt");
    }

    @Test
    @TestMetadata("typeAliasInAnonymousObjectType.kt")
    public void testTypeAliasInAnonymousObjectType() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasInAnonymousObjectType.kt");
    }

    @Test
    @TestMetadata("typeAliasObject.kt")
    public void testTypeAliasObject() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasObject.kt");
    }

    @Test
    @TestMetadata("typeAliasObjectCallable.kt")
    public void testTypeAliasObjectCallable() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasObjectCallable.kt");
    }

    @Test
    @TestMetadata("typeAliasOnTypeAlias.kt")
    public void testTypeAliasOnTypeAlias() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasOnTypeAlias.kt");
    }

    @Test
    @TestMetadata("typeAliasSecondaryConstructor.kt")
    public void testTypeAliasSecondaryConstructor() {
      runTest("compiler/testData/codegen/box/typealias/typeAliasSecondaryConstructor.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/unaryOp")
  @TestDataPath("$PROJECT_ROOT")
  public class UnaryOp {
    @Test
    public void testAllFilesPresentInUnaryOp() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unaryOp"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("call.kt")
    public void testCall() {
      runTest("compiler/testData/codegen/box/unaryOp/call.kt");
    }

    @Test
    @TestMetadata("callNullable.kt")
    public void testCallNullable() {
      runTest("compiler/testData/codegen/box/unaryOp/callNullable.kt");
    }

    @Test
    @TestMetadata("callWithCommonType.kt")
    public void testCallWithCommonType() {
      runTest("compiler/testData/codegen/box/unaryOp/callWithCommonType.kt");
    }

    @Test
    @TestMetadata("intrinsic.kt")
    public void testIntrinsic() {
      runTest("compiler/testData/codegen/box/unaryOp/intrinsic.kt");
    }

    @Test
    @TestMetadata("intrinsicNullable.kt")
    public void testIntrinsicNullable() {
      runTest("compiler/testData/codegen/box/unaryOp/intrinsicNullable.kt");
    }

    @Test
    @TestMetadata("longOverflow.kt")
    public void testLongOverflow() {
      runTest("compiler/testData/codegen/box/unaryOp/longOverflow.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/underscoredTypeArguments")
  @TestDataPath("$PROJECT_ROOT")
  public class UnderscoredTypeArguments {
    @Test
    public void testAllFilesPresentInUnderscoredTypeArguments() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/underscoredTypeArguments"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("backTicked.kt")
    public void testBackTicked() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/backTicked.kt");
    }

    @Test
    @TestMetadata("lambdaInputType.kt")
    public void testLambdaInputType() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/lambdaInputType.kt");
    }

    @Test
    @TestMetadata("react.kt")
    public void testReact() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/react.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/underscoredTypeArguments/simple.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/unit")
  @TestDataPath("$PROJECT_ROOT")
  public class Unit {
    @Test
    public void testAllFilesPresentInUnit() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unit"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("closureReturnsNullableUnit.kt")
    public void testClosureReturnsNullableUnit() {
      runTest("compiler/testData/codegen/box/unit/closureReturnsNullableUnit.kt");
    }

    @Test
    @TestMetadata("ifElse.kt")
    public void testIfElse() {
      runTest("compiler/testData/codegen/box/unit/ifElse.kt");
    }

    @Test
    @TestMetadata("kt3634.kt")
    public void testKt3634() {
      runTest("compiler/testData/codegen/box/unit/kt3634.kt");
    }

    @Test
    @TestMetadata("kt4212.kt")
    public void testKt4212() {
      runTest("compiler/testData/codegen/box/unit/kt4212.kt");
    }

    @Test
    @TestMetadata("kt4265.kt")
    public void testKt4265() {
      runTest("compiler/testData/codegen/box/unit/kt4265.kt");
    }

    @Test
    @TestMetadata("kt51036.kt")
    public void testKt51036() {
      runTest("compiler/testData/codegen/box/unit/kt51036.kt");
    }

    @Test
    @TestMetadata("kt56723.kt")
    public void testKt56723() {
      runTest("compiler/testData/codegen/box/unit/kt56723.kt");
    }

    @Test
    @TestMetadata("nullableUnit.kt")
    public void testNullableUnit() {
      runTest("compiler/testData/codegen/box/unit/nullableUnit.kt");
    }

    @Test
    @TestMetadata("nullableUnitInWhen1.kt")
    public void testNullableUnitInWhen1() {
      runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen1.kt");
    }

    @Test
    @TestMetadata("nullableUnitInWhen2.kt")
    public void testNullableUnitInWhen2() {
      runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen2.kt");
    }

    @Test
    @TestMetadata("nullableUnitInWhen3.kt")
    public void testNullableUnitInWhen3() {
      runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen3.kt");
    }

    @Test
    @TestMetadata("sillyThings.kt")
    public void testSillyThings() {
      runTest("compiler/testData/codegen/box/unit/sillyThings.kt");
    }

    @Test
    @TestMetadata("unitClassObject.kt")
    public void testUnitClassObject() {
      runTest("compiler/testData/codegen/box/unit/unitClassObject.kt");
    }

    @Test
    @TestMetadata("UnitValue.kt")
    public void testUnitValue() {
      runTest("compiler/testData/codegen/box/unit/UnitValue.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/unsignedTypes")
  @TestDataPath("$PROJECT_ROOT")
  public class UnsignedTypes {
    @Test
    public void testAllFilesPresentInUnsignedTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unsignedTypes"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("boxConstValOfUnsignedType.kt")
    public void testBoxConstValOfUnsignedType() {
      runTest("compiler/testData/codegen/box/unsignedTypes/boxConstValOfUnsignedType.kt");
    }

    @Test
    @TestMetadata("boxedUnsignedEqualsZero.kt")
    public void testBoxedUnsignedEqualsZero() {
      runTest("compiler/testData/codegen/box/unsignedTypes/boxedUnsignedEqualsZero.kt");
    }

    @Test
    @TestMetadata("checkBasicUnsignedLiterals.kt")
    public void testCheckBasicUnsignedLiterals() {
      runTest("compiler/testData/codegen/box/unsignedTypes/checkBasicUnsignedLiterals.kt");
    }

    @Test
    @TestMetadata("defaultArguments.kt")
    public void testDefaultArguments() {
      runTest("compiler/testData/codegen/box/unsignedTypes/defaultArguments.kt");
    }

    @Test
    @TestMetadata("equalsImplForInlineClassWrappingNullableInlineClass.kt")
    public void testEqualsImplForInlineClassWrappingNullableInlineClass() {
      runTest("compiler/testData/codegen/box/unsignedTypes/equalsImplForInlineClassWrappingNullableInlineClass.kt");
    }

    @Test
    @TestMetadata("forEachIndexedInListOfUInts.kt")
    public void testForEachIndexedInListOfUInts() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forEachIndexedInListOfUInts.kt");
    }

    @Test
    @TestMetadata("forInUnsignedDownTo.kt")
    public void testForInUnsignedDownTo() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedDownTo.kt");
    }

    @Test
    @TestMetadata("forInUnsignedProgression.kt")
    public void testForInUnsignedProgression() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedProgression.kt");
    }

    @Test
    @TestMetadata("forInUnsignedRange.kt")
    public void testForInUnsignedRange() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRange.kt");
    }

    @Test
    @TestMetadata("forInUnsignedRangeLiteral.kt")
    public void testForInUnsignedRangeLiteral() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRangeLiteral.kt");
    }

    @Test
    @TestMetadata("forInUnsignedRangeWithCoercion.kt")
    public void testForInUnsignedRangeWithCoercion() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRangeWithCoercion.kt");
    }

    @Test
    @TestMetadata("forInUnsignedUntil.kt")
    public void testForInUnsignedUntil() {
      runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedUntil.kt");
    }

    @Test
    @TestMetadata("implicitIntegerCoercionNamedArg.kt")
    public void testImplicitIntegerCoercionNamedArg() {
      runTest("compiler/testData/codegen/box/unsignedTypes/implicitIntegerCoercionNamedArg.kt");
    }

    @Test
    @TestMetadata("inUnsignedDownTo.kt")
    public void testInUnsignedDownTo() {
      runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedDownTo.kt");
    }

    @Test
    @TestMetadata("inUnsignedRange.kt")
    public void testInUnsignedRange() {
      runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedRange.kt");
    }

    @Test
    @TestMetadata("inUnsignedRangeLiteral.kt")
    public void testInUnsignedRangeLiteral() {
      runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedRangeLiteral.kt");
    }

    @Test
    @TestMetadata("inUnsignedUntil.kt")
    public void testInUnsignedUntil() {
      runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedUntil.kt");
    }

    @Test
    @TestMetadata("iterateOverArrayOfUnsignedValues.kt")
    public void testIterateOverArrayOfUnsignedValues() {
      runTest("compiler/testData/codegen/box/unsignedTypes/iterateOverArrayOfUnsignedValues.kt");
    }

    @Test
    @TestMetadata("iterateOverListOfBoxedUnsignedValues.kt")
    public void testIterateOverListOfBoxedUnsignedValues() {
      runTest("compiler/testData/codegen/box/unsignedTypes/iterateOverListOfBoxedUnsignedValues.kt");
    }

    @Test
    @TestMetadata("kt25784.kt")
    public void testKt25784() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt25784.kt");
    }

    @Test
    @TestMetadata("kt43286.kt")
    public void testKt43286() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt43286.kt");
    }

    @Test
    @TestMetadata("kt43286a.kt")
    public void testKt43286a() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt43286a.kt");
    }

    @Test
    @TestMetadata("kt47716.kt")
    public void testKt47716() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt47716.kt");
    }

    @Test
    @TestMetadata("kt61418.kt")
    public void testKt61418() {
      runTest("compiler/testData/codegen/box/unsignedTypes/kt61418.kt");
    }

    @Test
    @TestMetadata("literalEqualsNullableUnsigned.kt")
    public void testLiteralEqualsNullableUnsigned() {
      runTest("compiler/testData/codegen/box/unsignedTypes/literalEqualsNullableUnsigned.kt");
    }

    @Test
    @TestMetadata("nullableUnsignedEqualsLiteral.kt")
    public void testNullableUnsignedEqualsLiteral() {
      runTest("compiler/testData/codegen/box/unsignedTypes/nullableUnsignedEqualsLiteral.kt");
    }

    @Test
    @TestMetadata("signedToUnsignedConversions.kt")
    public void testSignedToUnsignedConversions() {
      runTest("compiler/testData/codegen/box/unsignedTypes/signedToUnsignedConversions.kt");
    }

    @Test
    @TestMetadata("unsignedArraySize.kt")
    public void testUnsignedArraySize() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedArraySize.kt");
    }

    @Test
    @TestMetadata("unsignedIntCompare.kt")
    public void testUnsignedIntCompare() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntCompare.kt");
    }

    @Test
    @TestMetadata("unsignedIntDivide.kt")
    public void testUnsignedIntDivide() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntDivide.kt");
    }

    @Test
    @TestMetadata("unsignedIntRemainder.kt")
    public void testUnsignedIntRemainder() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntRemainder.kt");
    }

    @Test
    @TestMetadata("unsignedIntToString.kt")
    public void testUnsignedIntToString() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntToString.kt");
    }

    @Test
    @TestMetadata("unsignedLiteralsForMaxLongValue.kt")
    public void testUnsignedLiteralsForMaxLongValue() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLiteralsForMaxLongValue.kt");
    }

    @Test
    @TestMetadata("unsignedLiteralsInApiVersion14.kt")
    public void testUnsignedLiteralsInApiVersion14() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLiteralsInApiVersion14.kt");
    }

    @Test
    @TestMetadata("unsignedLiteralsWithSignedOverflow.kt")
    public void testUnsignedLiteralsWithSignedOverflow() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLiteralsWithSignedOverflow.kt");
    }

    @Test
    @TestMetadata("unsignedLongCompare.kt")
    public void testUnsignedLongCompare() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongCompare.kt");
    }

    @Test
    @TestMetadata("unsignedLongDivide.kt")
    public void testUnsignedLongDivide() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongDivide.kt");
    }

    @Test
    @TestMetadata("unsignedLongRemainder.kt")
    public void testUnsignedLongRemainder() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongRemainder.kt");
    }

    @Test
    @TestMetadata("unsignedLongToString.kt")
    public void testUnsignedLongToString() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongToString.kt");
    }

    @Test
    @TestMetadata("unsignedRangeIterator.kt")
    public void testUnsignedRangeIterator() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedRangeIterator.kt");
    }

    @Test
    @TestMetadata("unsignedToSignedConversion.kt")
    public void testUnsignedToSignedConversion() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedToSignedConversion.kt");
    }

    @Test
    @TestMetadata("unsignedTypePrefixIncrementDecrementBoxing.kt")
    public void testUnsignedTypePrefixIncrementDecrementBoxing() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedTypePrefixIncrementDecrementBoxing.kt");
    }

    @Test
    @TestMetadata("unsignedTypeValuesInsideStringTemplates.kt")
    public void testUnsignedTypeValuesInsideStringTemplates() {
      runTest("compiler/testData/codegen/box/unsignedTypes/unsignedTypeValuesInsideStringTemplates.kt");
    }

    @Test
    @TestMetadata("varargsOfUnsignedTypes.kt")
    public void testVarargsOfUnsignedTypes() {
      runTest("compiler/testData/codegen/box/unsignedTypes/varargsOfUnsignedTypes.kt");
    }

    @Test
    @TestMetadata("whenByUnsigned.kt")
    public void testWhenByUnsigned() {
      runTest("compiler/testData/codegen/box/unsignedTypes/whenByUnsigned.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics")
    @TestDataPath("$PROJECT_ROOT")
    public class Jvm8Intrinsics {
      @Test
      public void testAllFilesPresentInJvm8Intrinsics() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/valueClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class ValueClasses {
    @Test
    public void testAllFilesPresentInValueClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/valueClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/valueClasses/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    public class JavaInterop {
      @Test
      public void testAllFilesPresentInJavaInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/valueClasses/javaInterop"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/vararg")
  @TestDataPath("$PROJECT_ROOT")
  public class Vararg {
    @Test
    public void testAllFilesPresentInVararg() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/vararg"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("boxingArgumentsForVararg.kt")
    public void testBoxingArgumentsForVararg() {
      runTest("compiler/testData/codegen/box/vararg/boxingArgumentsForVararg.kt");
    }

    @Test
    @TestMetadata("doNotCopyImmediatelyCreatedArrays.kt")
    public void testDoNotCopyImmediatelyCreatedArrays() {
      runTest("compiler/testData/codegen/box/vararg/doNotCopyImmediatelyCreatedArrays.kt");
    }

    @Test
    @TestMetadata("evaluationOrder.kt")
    public void testEvaluationOrder() {
      runTest("compiler/testData/codegen/box/vararg/evaluationOrder.kt");
    }

    @Test
    @TestMetadata("inlineClassArraysAsNamedArgumentInVararg.kt")
    public void testInlineClassArraysAsNamedArgumentInVararg() {
      runTest("compiler/testData/codegen/box/vararg/inlineClassArraysAsNamedArgumentInVararg.kt");
    }

    @Test
    @TestMetadata("kt10926.kt")
    public void testKt10926() {
      runTest("compiler/testData/codegen/box/vararg/kt10926.kt");
    }

    @Test
    @TestMetadata("kt1978.kt")
    public void testKt1978() {
      runTest("compiler/testData/codegen/box/vararg/kt1978.kt");
    }

    @Test
    @TestMetadata("kt37715.kt")
    public void testKt37715() {
      runTest("compiler/testData/codegen/box/vararg/kt37715.kt");
    }

    @Test
    @TestMetadata("kt37779.kt")
    public void testKt37779() {
      runTest("compiler/testData/codegen/box/vararg/kt37779.kt");
    }

    @Test
    @TestMetadata("kt581.kt")
    public void testKt581() {
      runTest("compiler/testData/codegen/box/vararg/kt581.kt");
    }

    @Test
    @TestMetadata("kt6192.kt")
    public void testKt6192() {
      runTest("compiler/testData/codegen/box/vararg/kt6192.kt");
    }

    @Test
    @TestMetadata("kt796_797.kt")
    public void testKt796_797() {
      runTest("compiler/testData/codegen/box/vararg/kt796_797.kt");
    }

    @Test
    @TestMetadata("referenceToContainsFromVarargParameter.kt")
    public void testReferenceToContainsFromVarargParameter() {
      runTest("compiler/testData/codegen/box/vararg/referenceToContainsFromVarargParameter.kt");
    }

    @Test
    @TestMetadata("singleAssignmentToVarargsInFunction.kt")
    public void testSingleAssignmentToVarargsInFunction() {
      runTest("compiler/testData/codegen/box/vararg/singleAssignmentToVarargsInFunction.kt");
    }

    @Test
    @TestMetadata("spreadCopiesArray.kt")
    public void testSpreadCopiesArray() {
      runTest("compiler/testData/codegen/box/vararg/spreadCopiesArray.kt");
    }

    @Test
    @TestMetadata("useSuspendFunResultAsVararg.kt")
    public void testUseSuspendFunResultAsVararg() {
      runTest("compiler/testData/codegen/box/vararg/useSuspendFunResultAsVararg.kt");
    }

    @Test
    @TestMetadata("varargInFunParam.kt")
    public void testVarargInFunParam() {
      runTest("compiler/testData/codegen/box/vararg/varargInFunParam.kt");
    }

    @Test
    @TestMetadata("varargInTailrec.kt")
    public void testVarargInTailrec() {
      runTest("compiler/testData/codegen/box/vararg/varargInTailrec.kt");
    }

    @Test
    @TestMetadata("varargsAndFunctionLiterals.kt")
    public void testVarargsAndFunctionLiterals() {
      runTest("compiler/testData/codegen/box/vararg/varargsAndFunctionLiterals.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/volatile")
  @TestDataPath("$PROJECT_ROOT")
  public class Volatile {
    @Test
    public void testAllFilesPresentInVolatile() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/volatile"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("volatileBool.kt")
    public void testVolatileBool() {
      runTest("compiler/testData/codegen/box/volatile/volatileBool.kt");
    }

    @Test
    @TestMetadata("volatileByte.kt")
    public void testVolatileByte() {
      runTest("compiler/testData/codegen/box/volatile/volatileByte.kt");
    }

    @Test
    @TestMetadata("volatileDouble.kt")
    public void testVolatileDouble() {
      runTest("compiler/testData/codegen/box/volatile/volatileDouble.kt");
    }

    @Test
    @TestMetadata("volatileFloat.kt")
    public void testVolatileFloat() {
      runTest("compiler/testData/codegen/box/volatile/volatileFloat.kt");
    }

    @Test
    @TestMetadata("volatileGeneric.kt")
    public void testVolatileGeneric() {
      runTest("compiler/testData/codegen/box/volatile/volatileGeneric.kt");
    }

    @Test
    @TestMetadata("volatileInt.kt")
    public void testVolatileInt() {
      runTest("compiler/testData/codegen/box/volatile/volatileInt.kt");
    }

    @Test
    @TestMetadata("volatileLong.kt")
    public void testVolatileLong() {
      runTest("compiler/testData/codegen/box/volatile/volatileLong.kt");
    }

    @Test
    @TestMetadata("volatileShort.kt")
    public void testVolatileShort() {
      runTest("compiler/testData/codegen/box/volatile/volatileShort.kt");
    }

    @Test
    @TestMetadata("volatileString.kt")
    public void testVolatileString() {
      runTest("compiler/testData/codegen/box/volatile/volatileString.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/when")
  @TestDataPath("$PROJECT_ROOT")
  public class When {
    @Test
    public void testAllFilesPresentInWhen() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
    }

    @Test
    @TestMetadata("callProperty.kt")
    public void testCallProperty() {
      runTest("compiler/testData/codegen/box/when/callProperty.kt");
    }

    @Test
    @TestMetadata("edgeCases.kt")
    public void testEdgeCases() {
      runTest("compiler/testData/codegen/box/when/edgeCases.kt");
    }

    @Test
    @TestMetadata("emptyWhen.kt")
    public void testEmptyWhen() {
      runTest("compiler/testData/codegen/box/when/emptyWhen.kt");
    }

    @Test
    @TestMetadata("exceptionOnNoMatch.kt")
    public void testExceptionOnNoMatch() {
      runTest("compiler/testData/codegen/box/when/exceptionOnNoMatch.kt");
    }

    @Test
    @TestMetadata("exhaustiveBoolean.kt")
    public void testExhaustiveBoolean() {
      runTest("compiler/testData/codegen/box/when/exhaustiveBoolean.kt");
    }

    @Test
    @TestMetadata("exhaustiveBreakContinue.kt")
    public void testExhaustiveBreakContinue() {
      runTest("compiler/testData/codegen/box/when/exhaustiveBreakContinue.kt");
    }

    @Test
    @TestMetadata("exhaustiveWhenInitialization.kt")
    public void testExhaustiveWhenInitialization() {
      runTest("compiler/testData/codegen/box/when/exhaustiveWhenInitialization.kt");
    }

    @Test
    @TestMetadata("exhaustiveWhenReturn.kt")
    public void testExhaustiveWhenReturn() {
      runTest("compiler/testData/codegen/box/when/exhaustiveWhenReturn.kt");
    }

    @Test
    @TestMetadata("implicitExhaustiveAndReturn.kt")
    public void testImplicitExhaustiveAndReturn() {
      runTest("compiler/testData/codegen/box/when/implicitExhaustiveAndReturn.kt");
    }

    @Test
    @TestMetadata("inferredTypeParameters.kt")
    public void testInferredTypeParameters() {
      runTest("compiler/testData/codegen/box/when/inferredTypeParameters.kt");
    }

    @Test
    @TestMetadata("integralWhenWithNoInlinedConstants2.kt")
    public void testIntegralWhenWithNoInlinedConstants2() {
      runTest("compiler/testData/codegen/box/when/integralWhenWithNoInlinedConstants2.kt");
    }

    @Test
    @TestMetadata("is.kt")
    public void testIs() {
      runTest("compiler/testData/codegen/box/when/is.kt");
    }

    @Test
    @TestMetadata("kt2457.kt")
    public void testKt2457() {
      runTest("compiler/testData/codegen/box/when/kt2457.kt");
    }

    @Test
    @TestMetadata("kt2466.kt")
    public void testKt2466() {
      runTest("compiler/testData/codegen/box/when/kt2466.kt");
    }

    @Test
    @TestMetadata("kt45081.kt")
    public void testKt45081() {
      runTest("compiler/testData/codegen/box/when/kt45081.kt");
    }

    @Test
    @TestMetadata("kt47365.kt")
    public void testKt47365() {
      runTest("compiler/testData/codegen/box/when/kt47365.kt");
    }

    @Test
    @TestMetadata("kt5307.kt")
    public void testKt5307() {
      runTest("compiler/testData/codegen/box/when/kt5307.kt");
    }

    @Test
    @TestMetadata("kt5448.kt")
    public void testKt5448() {
      runTest("compiler/testData/codegen/box/when/kt5448.kt");
    }

    @Test
    @TestMetadata("kt55993.kt")
    public void testKt55993() {
      runTest("compiler/testData/codegen/box/when/kt55993.kt");
    }

    @Test
    @TestMetadata("kt59346.kt")
    public void testKt59346() {
      runTest("compiler/testData/codegen/box/when/kt59346.kt");
    }

    @Test
    @TestMetadata("kt60212.kt")
    public void testKt60212() {
      runTest("compiler/testData/codegen/box/when/kt60212.kt");
    }

    @Test
    @TestMetadata("longInRange.kt")
    public void testLongInRange() {
      runTest("compiler/testData/codegen/box/when/longInRange.kt");
    }

    @Test
    @TestMetadata("matchNotNullAgainstNullable.kt")
    public void testMatchNotNullAgainstNullable() {
      runTest("compiler/testData/codegen/box/when/matchNotNullAgainstNullable.kt");
    }

    @Test
    @TestMetadata("multipleEntries.kt")
    public void testMultipleEntries() {
      runTest("compiler/testData/codegen/box/when/multipleEntries.kt");
    }

    @Test
    @TestMetadata("noElseCoerceToUnit.kt")
    public void testNoElseCoerceToUnit() {
      runTest("compiler/testData/codegen/box/when/noElseCoerceToUnit.kt");
    }

    @Test
    @TestMetadata("noElseExhaustive.kt")
    public void testNoElseExhaustive() {
      runTest("compiler/testData/codegen/box/when/noElseExhaustive.kt");
    }

    @Test
    @TestMetadata("noElseExhaustiveStatement.kt")
    public void testNoElseExhaustiveStatement() {
      runTest("compiler/testData/codegen/box/when/noElseExhaustiveStatement.kt");
    }

    @Test
    @TestMetadata("noElseExhaustiveUnitExpected.kt")
    public void testNoElseExhaustiveUnitExpected() {
      runTest("compiler/testData/codegen/box/when/noElseExhaustiveUnitExpected.kt");
    }

    @Test
    @TestMetadata("noElseInStatement.kt")
    public void testNoElseInStatement() {
      runTest("compiler/testData/codegen/box/when/noElseInStatement.kt");
    }

    @Test
    @TestMetadata("noElseNoMatch.kt")
    public void testNoElseNoMatch() {
      runTest("compiler/testData/codegen/box/when/noElseNoMatch.kt");
    }

    @Test
    @TestMetadata("nothingTyped.kt")
    public void testNothingTyped() {
      runTest("compiler/testData/codegen/box/when/nothingTyped.kt");
    }

    @Test
    @TestMetadata("nullableWhen.kt")
    public void testNullableWhen() {
      runTest("compiler/testData/codegen/box/when/nullableWhen.kt");
    }

    @Test
    @TestMetadata("range.kt")
    public void testRange() {
      runTest("compiler/testData/codegen/box/when/range.kt");
    }

    @Test
    @TestMetadata("sealedWhenInitialization.kt")
    public void testSealedWhenInitialization() {
      runTest("compiler/testData/codegen/box/when/sealedWhenInitialization.kt");
    }

    @Test
    @TestMetadata("switchBreakNoLabel.kt")
    public void testSwitchBreakNoLabel() {
      runTest("compiler/testData/codegen/box/when/switchBreakNoLabel.kt");
    }

    @Test
    @TestMetadata("switchOptimizationDense.kt")
    public void testSwitchOptimizationDense() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationDense.kt");
    }

    @Test
    @TestMetadata("switchOptimizationDuplicates.kt")
    public void testSwitchOptimizationDuplicates() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationDuplicates.kt");
    }

    @Test
    @TestMetadata("switchOptimizationMultipleConditions.kt")
    public void testSwitchOptimizationMultipleConditions() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationMultipleConditions.kt");
    }

    @Test
    @TestMetadata("switchOptimizationMultipleMixedConditions.kt")
    public void testSwitchOptimizationMultipleMixedConditions() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationMultipleMixedConditions.kt");
    }

    @Test
    @TestMetadata("switchOptimizationSingleStatementCase.kt")
    public void testSwitchOptimizationSingleStatementCase() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationSingleStatementCase.kt");
    }

    @Test
    @TestMetadata("switchOptimizationSparse.kt")
    public void testSwitchOptimizationSparse() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationSparse.kt");
    }

    @Test
    @TestMetadata("switchOptimizationStatement.kt")
    public void testSwitchOptimizationStatement() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationStatement.kt");
    }

    @Test
    @TestMetadata("switchOptimizationTypes.kt")
    public void testSwitchOptimizationTypes() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationTypes.kt");
    }

    @Test
    @TestMetadata("switchOptimizationUnordered.kt")
    public void testSwitchOptimizationUnordered() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationUnordered.kt");
    }

    @Test
    @TestMetadata("switchOptimizationWithGap.kt")
    public void testSwitchOptimizationWithGap() {
      runTest("compiler/testData/codegen/box/when/switchOptimizationWithGap.kt");
    }

    @Test
    @TestMetadata("typeDisjunction.kt")
    public void testTypeDisjunction() {
      runTest("compiler/testData/codegen/box/when/typeDisjunction.kt");
    }

    @Test
    @TestMetadata("whenArgumentIsEvaluatedOnlyOnce.kt")
    public void testWhenArgumentIsEvaluatedOnlyOnce() {
      runTest("compiler/testData/codegen/box/when/whenArgumentIsEvaluatedOnlyOnce.kt");
    }

    @Test
    @TestMetadata("whenSafeCallSubjectEvaluatedOnce.kt")
    public void testWhenSafeCallSubjectEvaluatedOnce() {
      runTest("compiler/testData/codegen/box/when/whenSafeCallSubjectEvaluatedOnce.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/when/enumOptimization")
    @TestDataPath("$PROJECT_ROOT")
    public class EnumOptimization {
      @Test
      public void testAllFilesPresentInEnumOptimization() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/enumOptimization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("bigEnum.kt")
      public void testBigEnum() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/bigEnum.kt");
      }

      @Test
      @TestMetadata("differentEnumClasses.kt")
      public void testDifferentEnumClasses() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/differentEnumClasses.kt");
      }

      @Test
      @TestMetadata("differentEnumClasses2.kt")
      public void testDifferentEnumClasses2() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/differentEnumClasses2.kt");
      }

      @Test
      @TestMetadata("duplicatingItems.kt")
      public void testDuplicatingItems() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/duplicatingItems.kt");
      }

      @Test
      @TestMetadata("enumInsideClassObject.kt")
      public void testEnumInsideClassObject() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/enumInsideClassObject.kt");
      }

      @Test
      @TestMetadata("expression.kt")
      public void testExpression() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/expression.kt");
      }

      @Test
      @TestMetadata("functionLiteralInTopLevel.kt")
      public void testFunctionLiteralInTopLevel() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/functionLiteralInTopLevel.kt");
      }

      @Test
      @TestMetadata("kt14597.kt")
      public void testKt14597() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt14597.kt");
      }

      @Test
      @TestMetadata("kt14597_full.kt")
      public void testKt14597_full() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt14597_full.kt");
      }

      @Test
      @TestMetadata("kt14802.kt")
      public void testKt14802() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt14802.kt");
      }

      @Test
      @TestMetadata("kt15806.kt")
      public void testKt15806() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt15806.kt");
      }

      @Test
      @TestMetadata("kt50258.kt")
      public void testKt50258() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/kt50258.kt");
      }

      @Test
      @TestMetadata("manyWhensWithinClass.kt")
      public void testManyWhensWithinClass() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/manyWhensWithinClass.kt");
      }

      @Test
      @TestMetadata("nestedWhenInCondition.kt")
      public void testNestedWhenInCondition() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nestedWhenInCondition.kt");
      }

      @Test
      @TestMetadata("nestedWhenInResult.kt")
      public void testNestedWhenInResult() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nestedWhenInResult.kt");
      }

      @Test
      @TestMetadata("nonConstantEnum.kt")
      public void testNonConstantEnum() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nonConstantEnum.kt");
      }

      @Test
      @TestMetadata("nullIsTheFirstEntry.kt")
      public void testNullIsTheFirstEntry() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nullIsTheFirstEntry.kt");
      }

      @Test
      @TestMetadata("nullability.kt")
      public void testNullability() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nullability.kt");
      }

      @Test
      @TestMetadata("nullableEnum.kt")
      public void testNullableEnum() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/nullableEnum.kt");
      }

      @Test
      @TestMetadata("subjectAny.kt")
      public void testSubjectAny() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/subjectAny.kt");
      }

      @Test
      @TestMetadata("withoutElse.kt")
      public void testWithoutElse() {
        runTest("compiler/testData/codegen/box/when/enumOptimization/withoutElse.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/when/stringOptimization")
    @TestDataPath("$PROJECT_ROOT")
    public class StringOptimization {
      @Test
      public void testAllFilesPresentInStringOptimization() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/stringOptimization"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("duplicatingItems.kt")
      public void testDuplicatingItems() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItems.kt");
      }

      @Test
      @TestMetadata("duplicatingItemsSameHashCode.kt")
      public void testDuplicatingItemsSameHashCode() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode.kt");
      }

      @Test
      @TestMetadata("duplicatingItemsSameHashCode2.kt")
      public void testDuplicatingItemsSameHashCode2() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode2.kt");
      }

      @Test
      @TestMetadata("duplicatingItemsSameHashCode3.kt")
      public void testDuplicatingItemsSameHashCode3() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode3.kt");
      }

      @Test
      @TestMetadata("expression.kt")
      public void testExpression() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/expression.kt");
      }

      @Test
      @TestMetadata("nullability.kt")
      public void testNullability() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/nullability.kt");
      }

      @Test
      @TestMetadata("sameHashCode.kt")
      public void testSameHashCode() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/sameHashCode.kt");
      }

      @Test
      @TestMetadata("statement.kt")
      public void testStatement() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/statement.kt");
      }

      @Test
      @TestMetadata("temporaryVarInWhenByStringIsDisposedProperly.kt")
      public void testTemporaryVarInWhenByStringIsDisposedProperly() {
        runTest("compiler/testData/codegen/box/when/stringOptimization/temporaryVarInWhenByStringIsDisposedProperly.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/when/whenSubjectVariable")
    @TestDataPath("$PROJECT_ROOT")
    public class WhenSubjectVariable {
      @Test
      public void testAllFilesPresentInWhenSubjectVariable() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/whenSubjectVariable"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.WASM, true);
      }

      @Test
      @TestMetadata("captureSubjectVariable.kt")
      public void testCaptureSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/captureSubjectVariable.kt");
      }

      @Test
      @TestMetadata("denseIntSwitchWithSubjectVariable.kt")
      public void testDenseIntSwitchWithSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/denseIntSwitchWithSubjectVariable.kt");
      }

      @Test
      @TestMetadata("equalityWithSubjectVariable.kt")
      public void testEqualityWithSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/equalityWithSubjectVariable.kt");
      }

      @Test
      @TestMetadata("ieee754Equality.kt")
      public void testIeee754Equality() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/ieee754Equality.kt");
      }

      @Test
      @TestMetadata("ieee754EqualityWithSmartCast.kt")
      public void testIeee754EqualityWithSmartCast() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/ieee754EqualityWithSmartCast.kt");
      }

      @Test
      @TestMetadata("isCheckOnSubjectVariable.kt")
      public void testIsCheckOnSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/isCheckOnSubjectVariable.kt");
      }

      @Test
      @TestMetadata("kt27161.kt")
      public void testKt27161() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161.kt");
      }

      @Test
      @TestMetadata("kt27161_int.kt")
      public void testKt27161_int() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_int.kt");
      }

      @Test
      @TestMetadata("kt27161_nested.kt")
      public void testKt27161_nested() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_nested.kt");
      }

      @Test
      @TestMetadata("kt27161_nested2.kt")
      public void testKt27161_nested2() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_nested2.kt");
      }

      @Test
      @TestMetadata("kt27161_string.kt")
      public void testKt27161_string() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_string.kt");
      }

      @Test
      @TestMetadata("kt33641_inlineClass.kt")
      public void testKt33641_inlineClass() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt33641_inlineClass.kt");
      }

      @Test
      @TestMetadata("rangeCheckOnSubjectVariable.kt")
      public void testRangeCheckOnSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/rangeCheckOnSubjectVariable.kt");
      }

      @Test
      @TestMetadata("sparseIntSwitchWithSubjectVariable.kt")
      public void testSparseIntSwitchWithSubjectVariable() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/sparseIntSwitchWithSubjectVariable.kt");
      }

      @Test
      @TestMetadata("subjectExpressionIsEvaluatedOnce.kt")
      public void testSubjectExpressionIsEvaluatedOnce() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/subjectExpressionIsEvaluatedOnce.kt");
      }

      @Test
      @TestMetadata("whenByEnum.kt")
      public void testWhenByEnum() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByEnum.kt");
      }

      @Test
      @TestMetadata("whenByNullableEnum.kt")
      public void testWhenByNullableEnum() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByNullableEnum.kt");
      }

      @Test
      @TestMetadata("whenByString.kt")
      public void testWhenByString() {
        runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByString.kt");
      }
    }
  }
}
