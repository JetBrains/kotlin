FILE: delegateTypeMismatch.kt
    public abstract interface ClassifierNamePolicy : R|kotlin/Any| {
        public final object SOURCE_CODE_QUALIFIED : R|ClassifierNamePolicy| {
            private constructor(): R|ClassifierNamePolicy.SOURCE_CODE_QUALIFIED| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public abstract interface KotlinType : R|kotlin/Any| {
    }
    public final class A : R|kotlin/Any| {
        public constructor(isLocked: R|kotlin/Boolean|): R|A| {
            super<R|kotlin/Any|>()
        }

        public final val isLocked: R|kotlin/Boolean| = R|<local>/isLocked|
            public get(): R|kotlin/Boolean|

        private final fun <T> property(initialValue: R|T|): R|kotlin/properties/ReadWriteProperty<A, T>| {
            ^property Q|kotlin/properties/Delegates|.R|kotlin/properties/Delegates.vetoable|<R|T|>(R|<local>/initialValue|, <L> = vetoable@fun <anonymous>(_: R|kotlin/reflect/KProperty<*>|, _: R|T|, _: R|T|): R|kotlin/Boolean| <kind=UNKNOWN>  {
                ^ when () {
                    this@R|/A|.R|/A.isLocked| ->  {
                        throw R|java/lang/IllegalStateException.IllegalStateException|(String(Cannot modify readonly DescriptorRendererOptions))
                    }
                    else ->  {
                        Boolean(true)
                    }
                }

            }
            )
        }

        public final var classifierNamePolicy: R|ClassifierNamePolicy|by this@R|/A|.R|/A.property|<R|ClassifierNamePolicy|>(Q|ClassifierNamePolicy.SOURCE_CODE_QUALIFIED|)
            public get(): R|ClassifierNamePolicy| {
                ^ this@R|/A|.D|/A.classifierNamePolicy|.R|FakeOverride<kotlin/properties/ReadWriteProperty.getValue: R|ClassifierNamePolicy|>|(this@R|/A|, ::R|/A.classifierNamePolicy|)
            }
            public set(<set-?>: R|ClassifierNamePolicy|): R|kotlin/Unit| {
                this@R|/A|.D|/A.classifierNamePolicy|.R|FakeOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(this@R|/A|, ::R|/A.classifierNamePolicy|, R|<local>/classifierNamePolicy|)
            }

        public final var typeNormalizer: R|(KotlinType) -> KotlinType|by this@R|/A|.R|/A.property|<R|(KotlinType) -> KotlinType|>(property@fun <anonymous>(it: R|KotlinType|): R|KotlinType| {
            ^ R|<local>/it|
        }
        )
            public get(): R|(KotlinType) -> KotlinType| {
                ^ this@R|/A|.D|/A.typeNormalizer|.R|FakeOverride<kotlin/properties/ReadWriteProperty.getValue: R|(KotlinType) -> KotlinType|>|(this@R|/A|, ::R|/A.typeNormalizer|)
            }
            public set(<set-?>: R|(KotlinType) -> KotlinType|): R|kotlin/Unit| {
                this@R|/A|.D|/A.typeNormalizer|.R|FakeOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(this@R|/A|, ::R|/A.typeNormalizer|, R|<local>/typeNormalizer|)
            }

    }
