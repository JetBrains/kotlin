Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Implicit receiver:
            FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                Type: kotlin.Enum.Companion
    Element 7
        Scope: FirNestedClassifierScopeWithSubstitution
            Classifiers:
                FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
        Static scope owner symbol: FirRegularClassSymbol public abstract class Enum<E : R|kotlin/Enum<E>|> : R|kotlin/Comparable<E>|, R|java/io/Serializable|
    Element 8
        Scope: FirNameAwareOnlyCallablesScope
            Functions
                FirNamedFunctionSymbol public final static fun valueOf(value: R|kotlin/String|): R|foo/MyEnumClass|
                FirNamedFunctionSymbol public final static fun values(): R|kotlin/Array<foo/MyEnumClass>|
            Properties:
                FirEnumEntrySymbol public final static enum entry Entry: R|foo/MyEnumClass|
                FirRegularPropertySymbol public final static val entries: R|kotlin/enums/EnumEntries<foo/MyEnumClass>|
                    public get(): R|kotlin/enums/EnumEntries<foo/MyEnumClass>|
    Element 9
        Implicit receiver:
            FirAnonymousObjectSymbol object : R|foo/MyEnumClass|
                Type: foo.<anonymous>

FILE: [ResolvedTo(IMPORTS)] enumEntryLevel.kt
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] constructor([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|foo/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] val i: R|kotlin/Int| = R|<local>/i|
            public [ResolvedTo(STATUS)] get(): R|kotlin/Int|

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val CONSTANT: R|kotlin/Int| = Int(0)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/Int|
    public final [ResolvedTo(STATUS)] enum class MyEnumClass : R|kotlin/Enum<foo/MyEnumClass>| {
        private [ResolvedTo(STATUS)] constructor(): R|foo/MyEnumClass| {
            LAZY_super<R|kotlin/Enum<foo/MyEnumClass>|>
        }

        public final static [ResolvedTo(BODY_RESOLVE)] enum entry Entry: R|foo/MyEnumClass| = object : R|foo/MyEnumClass| {
            private [ResolvedTo(BODY_RESOLVE)] constructor(): R|foo/<anonymous>| {
                super<R|foo/MyEnumClass|>()
            }

            [ResolvedTo(BODY_RESOLVE)] @R|foo/Anno|[Types](i = R|foo/CONSTANT|) <DANGLING MODIFIER: Top level declaration expected>
        }

        public final static [ResolvedTo(STATUS)] fun values(): R|kotlin/Array<foo/MyEnumClass>| {
        }

        public final static [ResolvedTo(STATUS)] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|foo/MyEnumClass| {
        }

        public final static [ResolvedTo(STATUS)] val entries: R|kotlin/enums/EnumEntries<foo/MyEnumClass>|
            public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<foo/MyEnumClass>|

    }