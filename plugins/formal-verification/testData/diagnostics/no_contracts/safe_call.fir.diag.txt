/safe_call.kt:(123,135): info: Generated Viper text for testSafeCall:
field class_Foo$member_x: Int

method class_Foo$fun_f$fun_take$T_class_global$class_Foo$return$T_Unit(this: Ref)
  returns (ret: dom$Unit)
  requires acc(this.class_Foo$member_x, wildcard)
  ensures acc(this.class_Foo$member_x, wildcard)


method global$fun_testSafeCall$fun_take$NT_class_global$class_Foo$return$NT_Unit(local$foo: dom$Nullable[Ref])
  returns (ret$0: dom$Nullable[dom$Unit])
  requires local$foo != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$foo, dom$Type$global$class_Foo()): Ref).class_Foo$member_x, wildcard)
  ensures local$foo != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$foo, dom$Type$global$class_Foo()): Ref).class_Foo$member_x, wildcard)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Unit()))
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$special$Nullable(dom$Type$global$class_Foo()))
  if (local$foo != (dom$Nullable$null(): dom$Nullable[Ref])) {
    var anonymous$0: dom$Unit
    anonymous$0 := class_Foo$fun_f$fun_take$T_class_global$class_Foo$return$T_Unit((dom$Casting$cast(local$foo,
      dom$Type$global$class_Foo()): Ref))
    ret$0 := (dom$Casting$cast(anonymous$0, dom$Type$special$Nullable(dom$Type$Unit())): dom$Nullable[dom$Unit])
  } else {
    ret$0 := (dom$Nullable$null(): dom$Nullable[dom$Unit])}
  goto label$ret$0
  label label$ret$0
}

/safe_call.kt:(198,221): info: Generated Viper text for testSafeCallNonNullable:
field class_Foo$member_x: Int

method class_Foo$fun_f$fun_take$T_class_global$class_Foo$return$T_Unit(this: Ref)
  returns (ret: dom$Unit)
  requires acc(this.class_Foo$member_x, wildcard)
  ensures acc(this.class_Foo$member_x, wildcard)


method global$fun_testSafeCallNonNullable$fun_take$T_class_global$class_Foo$return$NT_Unit(local$foo: Ref)
  returns (ret$0: dom$Nullable[dom$Unit])
  requires acc(local$foo.class_Foo$member_x, wildcard)
  ensures acc(local$foo.class_Foo$member_x, wildcard)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Unit()))
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$global$class_Foo())
  if ((dom$Casting$cast(local$foo, dom$Type$special$Nullable(dom$Type$global$class_Foo())): dom$Nullable[Ref]) !=
  (dom$Nullable$null(): dom$Nullable[Ref])) {
    var anonymous$0: dom$Unit
    anonymous$0 := class_Foo$fun_f$fun_take$T_class_global$class_Foo$return$T_Unit(local$foo)
    ret$0 := (dom$Casting$cast(anonymous$0, dom$Type$special$Nullable(dom$Type$Unit())): dom$Nullable[dom$Unit])
  } else {
    ret$0 := (dom$Nullable$null(): dom$Nullable[dom$Unit])}
  goto label$ret$0
  label label$ret$0
}

/safe_call.kt:(248,268): info: Generated Viper text for testSafeCallProperty:
field class_Foo$member_x: Int

method global$fun_testSafeCallProperty$fun_take$NT_class_global$class_Foo$return$NT_Int(local$foo: dom$Nullable[Ref])
  returns (ret$0: dom$Nullable[Int])
  requires local$foo != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$foo, dom$Type$global$class_Foo()): Ref).class_Foo$member_x, wildcard)
  ensures local$foo != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$foo, dom$Type$global$class_Foo()): Ref).class_Foo$member_x, wildcard)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$special$Nullable(dom$Type$global$class_Foo()))
  if (local$foo != (dom$Nullable$null(): dom$Nullable[Ref])) {
    ret$0 := (dom$Casting$cast((dom$Casting$cast(local$foo, dom$Type$global$class_Foo()): Ref).class_Foo$member_x,
      dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int])
  } else {
    ret$0 := (dom$Nullable$null(): dom$Nullable[Int])}
  goto label$ret$0
  label label$ret$0
}

/safe_call.kt:(335,366): info: Generated Viper text for testSafeCallPropertyNonNullable:
field class_Foo$member_x: Int

method global$fun_testSafeCallPropertyNonNullable$fun_take$T_class_global$class_Foo$return$NT_Int(local$foo: Ref)
  returns (ret$0: dom$Nullable[Int])
  requires acc(local$foo.class_Foo$member_x, wildcard)
  ensures acc(local$foo.class_Foo$member_x, wildcard)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$global$class_Foo())
  if ((dom$Casting$cast(local$foo, dom$Type$special$Nullable(dom$Type$global$class_Foo())): dom$Nullable[Ref]) !=
  (dom$Nullable$null(): dom$Nullable[Ref])) {
    ret$0 := (dom$Casting$cast(local$foo.class_Foo$member_x, dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int])
  } else {
    ret$0 := (dom$Nullable$null(): dom$Nullable[Int])}
  goto label$ret$0
  label label$ret$0
}
