//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

fun interface A {
    @Composable fun compute(value: Int): Unit
}
fun Example(a: A) {
    Example { it -> a.compute(it) }
}

//
// Transformed IR
// ------------------------------------------

interface A {
  @Composable
  @FunctionKeyMeta(key = 1334990189, startOffset = 106, endOffset = 135)
  abstract fun compute(value: Int, %composer: Composer?, %changed: Int)
}
fun Example(a: A) {
  Example(<block>{
    class <no name provided> : A {
      @Composable
      @FunctionKeyMeta(key = -1360105720, startOffset = 206, endOffset = 229)
      override fun compute(it: Int, %composer: Composer?, %changed: Int) {
        %composer = %composer.startRestartGroup(<>)
        sourceInformation(%composer, "C(compute)<comput...>:Test.kt")
        val %dirty = %changed
        if (%changed and 0b0110 == 0) {
          %dirty = %dirty or if (%composer.changed(it)) 0b0100 else 0b0010
        }
        if (%changed and 0b00110000 == 0) {
          %dirty = %dirty or if (%composer.changed(<this>)) 0b00100000 else 0b00010000
        }
        if (%composer.shouldExecute(%dirty and 0b00010011 != 0b00010010, %dirty and 0b0001)) {
          if (isTraceInProgress()) {
            traceEventStart(<>, %dirty, -1, <>)
          }
          a.compute(it, %composer, 0b1110 and %dirty)
          if (isTraceInProgress()) {
            traceEventEnd()
          }
        } else {
          %composer.skipToGroupEnd()
        }
        val tmp0_rcvr = <this>
        %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
          tmp0_rcvr.compute(it, %composer, updateChangedFlags(%changed or 0b0001))
        }
      }
    }
    <no name provided>()
  })
}
