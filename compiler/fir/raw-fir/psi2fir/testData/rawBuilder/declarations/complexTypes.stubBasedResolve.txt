FILE: [ResolvedTo(BODY_RESOLVE)] complexTypes.kt
    public final [ResolvedTo(BODY_RESOLVE)] class C<[ResolvedTo(BODY_RESOLVE)] T, [ResolvedTo(BODY_RESOLVE)] out S> : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=C] constructor<[ResolvedTo(BODY_RESOLVE)] T, [ResolvedTo(BODY_RESOLVE)] out S>(): R|a/b/C<T, S>| {
            super<R|kotlin/Any|>()
        }

        public final inner [ResolvedTo(BODY_RESOLVE)] class D<[ResolvedTo(BODY_RESOLVE)] R, [ResolvedTo(BODY_RESOLVE)] in P, [ResolvedTo(BODY_RESOLVE)] Outer(T), [ResolvedTo(BODY_RESOLVE)] out Outer(S)> : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=D] a/b/C<T, S>.constructor<[ResolvedTo(BODY_RESOLVE)] R, [ResolvedTo(BODY_RESOLVE)] in P>(): R|a/b/C.D<R, P, T, S>| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Test : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] val x: R|a/b/C.D<in kotlin/collections/List<*>, *, out kotlin/CharSequence, *>|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Test] get(): R|a/b/C.D<in kotlin/collections/List<*>, *, out kotlin/CharSequence, *>|

    }
