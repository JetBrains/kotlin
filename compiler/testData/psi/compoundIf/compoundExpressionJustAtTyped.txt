KtFile: compoundExpressionJustAtTyped.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('foo')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      RETURN
        PsiElement(return)('return')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n    ')
      RETURN
        PsiElement(return)('return')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('2')
      PsiWhiteSpace('\n\n    ')
      CALL_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        VALUE_ARGUMENT_LIST
          PsiElement(LPAR)('(')
          VALUE_ARGUMENT
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              PsiElement(CLOSING_QUOTE)('"')
          PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      BINARY_EXPRESSION
        BINARY_EXPRESSION
          INTEGER_CONSTANT
            PsiElement(INTEGER_LITERAL)('3')
          PsiWhiteSpace(' ')
          OPERATION_REFERENCE
            PsiElement(PLUS)('+')
          PsiWhiteSpace(' ')
          BINARY_EXPRESSION
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('4')
            PsiWhiteSpace(' ')
            OPERATION_REFERENCE
              PsiElement(MUL)('*')
            PsiWhiteSpace(' ')
            INTEGER_CONSTANT
              PsiElement(INTEGER_LITERAL)('5')
        PsiWhiteSpace(' ')
        OPERATION_REFERENCE
          PsiElement(IDENTIFIER)('infix')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('6')
      PsiWhiteSpace('\n\n    ')
      DOT_QUALIFIED_EXPRESSION
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('foo')
        PsiElement(DOT)('.')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('bar')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            VALUE_ARGUMENT
              FUN
                PsiElement(fun)('fun')
                VALUE_PARAMETER_LIST
                  PsiElement(LPAR)('(')
                  VALUE_PARAMETER
                    PsiElement(IDENTIFIER)('x')
                    PsiElement(COLON)(':')
                    PsiWhiteSpace(' ')
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('Int')
                  PsiElement(RPAR)(')')
                PsiWhiteSpace(' ')
                BLOCK
                  PsiElement(LBRACE)('{')
                  PsiWhiteSpace('\n    ')
                  PsiElement(RBRACE)('}')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      CALL_EXPRESSION
        COMPOUND_EXPRESSION
          COMPOUND_EXPRESSION
            BLOCK
              IF
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(LPAR)('(')
                PROPERTY
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  PsiElement(IDENTIFIER)('checkResult')
                  PsiWhiteSpace(' ')
                  PsiElement(EQ)('=')
                  PsiWhiteSpace(' ')
                  CALL_EXPRESSION
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('someConditionCheck')
                    VALUE_ARGUMENT_LIST
                      PsiElement(LPAR)('(')
                      PsiElement(RPAR)(')')
                PsiElement(SEMICOLON)(';')
                PsiWhiteSpace(' ')
                CONDITION
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('checkResult')
                PsiElement(RPAR)(')')
                PsiWhiteSpace(' ')
                THEN
                  BLOCK
                    PsiElement(LBRACE)('{')
                    PsiWhiteSpace('\n\n    ')
                    PsiElement(RBRACE)('}')
                PsiWhiteSpace(' ')
                PsiElement(else)('else')
                PsiWhiteSpace(' ')
                ELSE
                  BLOCK
                    PsiElement(LBRACE)('{')
                    PsiWhiteSpace('\n\n    ')
                    PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      LABELED_EXPRESSION
        LABEL_QUALIFIER
          LABEL
            PsiElement(IDENTIFIER)('label')
            PsiElement(AT)('@')
        PsiWhiteSpace(' ')
        WHILE
          PsiElement(while)('while')
          PsiWhiteSpace(' ')
          PsiElement(LPAR)('(')
          CONDITION
            BOOLEAN_CONSTANT
              PsiElement(true)('true')
          PsiElement(RPAR)(')')
          PsiWhiteSpace(' ')
          BODY
            BLOCK
              PsiElement(LBRACE)('{')
              PsiWhiteSpace('\n        ')
              BREAK
                PsiElement(break)('break')
                LABEL_QUALIFIER
                  LABEL
                    PsiElement(AT)('@')
                    PsiElement(IDENTIFIER)('label')
              PsiWhiteSpace('\n    ')
              PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      RETURN
        PsiElement(return)('return')
        LABEL_QUALIFIER
          LABEL
            PsiElement(AT)('@')
            PsiElement(IDENTIFIER)('label')
        PsiWhiteSpace(' ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n\n    ')
      ANNOTATED_EXPRESSION
        ANNOTATION_ENTRY
          PsiElement(AT)('@')
          CONSTRUCTOR_CALLEE
            TYPE_REFERENCE
              USER_TYPE
                REFERENCE_EXPRESSION
                  PsiElement(IDENTIFIER)('ann')
        PsiWhiteSpace('\n    ')
        INTEGER_CONSTANT
          PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')