/**
h3. Class members
*/

/*
class Example(a : Foo, i : Int) : Bar(i), Some {

  // functions
  abstract fun foo(a : Bar)

  fun foo(a : Bar) = 0

  fun foo(a : Bar) = {
    return 0
  }

  fun foo(a : Bar) { // return type is Unit

  // properties
  val x : Int = 5
  var y : Double = 7.0d
  var z : String = "SDfsdf" {
    get() = $z + "sdfsd"
    private set(s : String) { $z = s }
  }
}
*/

// h5. Grammar

memberDeclaration
  : classObject
  : object
  : constructor
  : function
  : property
  : class
  : typedef
  : anonymousInitializer
  ;

anonymousInitializer
  : block
  ;

classObject
  : modifiers "class" object
  ;
/**
bq. See [Class objects|Classes and Inheritance#Class objects]
*/

valueParameters
  : "(" functionParameter{","}? ")" // default values
  ;

functionParameter
  : modifiers ("val" | "var")? parameter ("=" expression)?
  ;

initializer
  : annotations "this" valueArguments
  : annotations constructorInvocation // type parameters may (must?) be omitted
  ;

block
  : "{" statements "}"
  ;

function
  : modifiers "fun" typeParameters?
      (type "." | annotations/*for receiver type*/)?
      SimpleName
      typeParameters? valueParameters (":" type)?
      typeConstraints
      functionBody?
  ;

functionBody
  : block
  : "=" expression
  ;

property
  : modifiers ("val" | "var")
      typeParameters? (type "." | annotations)?
      SimpleName (":" type)?
      typeConstraints
      ("=" expression SEMI?)?
      (getter? setter? | setter? getter?) SEMI?
  ;
/**
bq. See [Properties and Fields]
*/

getter
  : modifiers "get"
  : modifiers "get" "(" ")" (":" type)? functionBody
  ;

setter
  : modifiers "set"
  : modifiers "set" "(" modifiers (SimpleName | parameter) ")" functionBody
  ;

parameter
  : SimpleName ":" type
  ;

object
  : "object" SimpleName (":" delegationSpecifier{","})? classBody? // Class body can be optional: this is a declaration
/**
bq. See [Object expressions and Declarations]
*/
