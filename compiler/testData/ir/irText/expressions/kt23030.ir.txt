FILE fqName:<root> fileName:/kt23030.kt
  CLASS CLASS name:C modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.C
    CONSTRUCTOR visibility:public returnType:<root>.C [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:C modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:compareTo visibility:public modality:FINAL returnType:kotlin.Int [operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.C
      VALUE_PARAMETER kind:ExtensionReceiver name:<this> index:1 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:c index:2 type:kotlin.Char
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun compareTo (<this>: kotlin.Int, c: kotlin.Char): kotlin.Int declared in <root>.C'
          CONST Int type=kotlin.Int value=0
    FUN name:testMemberExtensionCompareToCall visibility:public modality:FINAL returnType:kotlin.Boolean
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.C
      VALUE_PARAMETER kind:Regular name:x index:1 type:kotlin.Int
      VALUE_PARAMETER kind:Regular name:y index:2 type:kotlin.Char
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun testMemberExtensionCompareToCall (x: kotlin.Int, y: kotlin.Char): kotlin.Boolean declared in <root>.C'
          CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
            ARG arg0: CALL 'public final fun compareTo (<this>: kotlin.Int, c: kotlin.Char): kotlin.Int declared in <root>.C' type=kotlin.Int origin=LT
              ARG <this>(index:0): GET_VAR '<this>: <root>.C declared in <root>.C.testMemberExtensionCompareToCall' type=<root>.C origin=IMPLICIT_ARGUMENT
              ARG <this>(index:1): GET_VAR 'x: kotlin.Int declared in <root>.C.testMemberExtensionCompareToCall' type=kotlin.Int origin=null
              ARG c: GET_VAR 'y: kotlin.Char declared in <root>.C.testMemberExtensionCompareToCall' type=kotlin.Char origin=null
            ARG arg1: CONST Int type=kotlin.Int value=0
    FUN name:testMemberExtensionCompareToCallWithSmartCast visibility:public modality:FINAL returnType:kotlin.Boolean
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.C
      VALUE_PARAMETER kind:Regular name:x index:1 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:y index:2 type:kotlin.Any
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun testMemberExtensionCompareToCallWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>.C'
          WHEN type=kotlin.Boolean origin=ANDAND
            BRANCH
              if: WHEN type=kotlin.Boolean origin=ANDAND
                BRANCH
                  if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                    GET_VAR 'x: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                  then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                    GET_VAR 'y: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Boolean type=kotlin.Boolean value=false
              then: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                ARG arg0: CALL 'public final fun compareTo (<this>: kotlin.Int, c: kotlin.Char): kotlin.Int declared in <root>.C' type=kotlin.Int origin=LT
                  ARG <this>(index:0): GET_VAR '<this>: <root>.C declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=<root>.C origin=IMPLICIT_ARGUMENT
                  ARG <this>(index:1): TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                    GET_VAR 'x: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                  ARG c: TYPE_OP type=kotlin.Char origin=IMPLICIT_CAST typeOperand=kotlin.Char
                    GET_VAR 'y: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                ARG arg1: CONST Int type=kotlin.Int value=0
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:compareTo visibility:public modality:FINAL returnType:kotlin.Int [operator]
    VALUE_PARAMETER kind:ExtensionReceiver name:<this> index:0 type:kotlin.Int
    VALUE_PARAMETER kind:Regular name:c index:1 type:kotlin.Char
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun compareTo (<this>: kotlin.Int, c: kotlin.Char): kotlin.Int declared in <root>'
        CONST Int type=kotlin.Int value=0
  FUN name:testEqualsWithSmartCast visibility:public modality:FINAL returnType:kotlin.Boolean
    VALUE_PARAMETER kind:Regular name:x index:0 type:kotlin.Any
    VALUE_PARAMETER kind:Regular name:y index:1 type:kotlin.Any
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun testEqualsWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                  GET_VAR 'x: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                  GET_VAR 'y: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: GET_VAR 'x: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
              ARG arg1: GET_VAR 'y: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:testOverloadedCompareToCall visibility:public modality:FINAL returnType:kotlin.Boolean
    VALUE_PARAMETER kind:Regular name:x index:0 type:kotlin.Int
    VALUE_PARAMETER kind:Regular name:y index:1 type:kotlin.Char
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun testOverloadedCompareToCall (x: kotlin.Int, y: kotlin.Char): kotlin.Boolean declared in <root>'
        CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
          ARG arg0: CALL 'public final fun compareTo (<this>: kotlin.Int, c: kotlin.Char): kotlin.Int declared in <root>' type=kotlin.Int origin=LT
            ARG <this>: GET_VAR 'x: kotlin.Int declared in <root>.testOverloadedCompareToCall' type=kotlin.Int origin=null
            ARG c: GET_VAR 'y: kotlin.Char declared in <root>.testOverloadedCompareToCall' type=kotlin.Char origin=null
          ARG arg1: CONST Int type=kotlin.Int value=0
  FUN name:testOverloadedCompareToCallWithSmartCast visibility:public modality:FINAL returnType:kotlin.Boolean
    VALUE_PARAMETER kind:Regular name:x index:0 type:kotlin.Any
    VALUE_PARAMETER kind:Regular name:y index:1 type:kotlin.Any
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun testOverloadedCompareToCallWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                  GET_VAR 'x: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                  GET_VAR 'y: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
              ARG arg0: CALL 'public final fun compareTo (<this>: kotlin.Int, c: kotlin.Char): kotlin.Int declared in <root>' type=kotlin.Int origin=LT
                ARG <this>: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  GET_VAR 'x: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
                ARG c: TYPE_OP type=kotlin.Char origin=IMPLICIT_CAST typeOperand=kotlin.Char
                  GET_VAR 'y: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
              ARG arg1: CONST Int type=kotlin.Int value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
