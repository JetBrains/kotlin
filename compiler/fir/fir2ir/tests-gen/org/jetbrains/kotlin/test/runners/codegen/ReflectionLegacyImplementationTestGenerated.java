/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.TestGeneratorForFir2IrTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box/reflection")
@TestDataPath("$PROJECT_ROOT")
public class ReflectionLegacyImplementationTestGenerated extends AbstractReflectionLegacyImplementationTest {
  @Test
  public void testAllFilesPresentInReflection() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/annotations")
  @TestDataPath("$PROJECT_ROOT")
  public class Annotations {
    @Test
    public void testAllFilesPresentInAnnotations() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("annotationRetentionAndTarget.kt")
    public void testAnnotationRetentionAndTarget() {
      runTest("compiler/testData/codegen/box/reflection/annotations/annotationRetentionAndTarget.kt");
    }

    @Test
    @TestMetadata("annotationsOnJavaMembers.kt")
    public void testAnnotationsOnJavaMembers() {
      runTest("compiler/testData/codegen/box/reflection/annotations/annotationsOnJavaMembers.kt");
    }

    @Test
    @TestMetadata("classLiteralWithVoidDefault.kt")
    public void testClassLiteralWithVoidDefault() {
      runTest("compiler/testData/codegen/box/reflection/annotations/classLiteralWithVoidDefault.kt");
    }

    @Test
    @TestMetadata("findAnnotation.kt")
    public void testFindAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/findAnnotation.kt");
    }

    @Test
    @TestMetadata("genericExtensionProperty.kt")
    public void testGenericExtensionProperty() {
      runTest("compiler/testData/codegen/box/reflection/annotations/genericExtensionProperty.kt");
    }

    @Test
    @TestMetadata("hasAnnotation.kt")
    public void testHasAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/hasAnnotation.kt");
    }

    @Test
    @TestMetadata("localClassLiteral.kt")
    public void testLocalClassLiteral() {
      runTest("compiler/testData/codegen/box/reflection/annotations/localClassLiteral.kt");
    }

    @Test
    @TestMetadata("localClassParameterAnnotation.kt")
    public void testLocalClassParameterAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/localClassParameterAnnotation.kt");
    }

    @Test
    @TestMetadata("openSuspendFun.kt")
    public void testOpenSuspendFun() {
      runTest("compiler/testData/codegen/box/reflection/annotations/openSuspendFun.kt");
    }

    @Test
    @TestMetadata("privateAnnotation.kt")
    public void testPrivateAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/privateAnnotation.kt");
    }

    @Test
    @TestMetadata("propertyAccessors.kt")
    public void testPropertyAccessors() {
      runTest("compiler/testData/codegen/box/reflection/annotations/propertyAccessors.kt");
    }

    @Test
    @TestMetadata("propertyWithoutBackingField.kt")
    public void testPropertyWithoutBackingField() {
      runTest("compiler/testData/codegen/box/reflection/annotations/propertyWithoutBackingField.kt");
    }

    @Test
    @TestMetadata("retentions.kt")
    public void testRetentions() {
      runTest("compiler/testData/codegen/box/reflection/annotations/retentions.kt");
    }

    @Test
    @TestMetadata("setparam.kt")
    public void testSetparam() {
      runTest("compiler/testData/codegen/box/reflection/annotations/setparam.kt");
    }

    @Test
    @TestMetadata("simpleClassAnnotation.kt")
    public void testSimpleClassAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/simpleClassAnnotation.kt");
    }

    @Test
    @TestMetadata("simpleConstructorAnnotation.kt")
    public void testSimpleConstructorAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/simpleConstructorAnnotation.kt");
    }

    @Test
    @TestMetadata("simpleFunAnnotation.kt")
    public void testSimpleFunAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/simpleFunAnnotation.kt");
    }

    @Test
    @TestMetadata("simpleParamAnnotation.kt")
    public void testSimpleParamAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/simpleParamAnnotation.kt");
    }

    @Test
    @TestMetadata("simpleValAnnotation.kt")
    public void testSimpleValAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/annotations/simpleValAnnotation.kt");
    }

    @Test
    @TestMetadata("spread.kt")
    public void testSpread() {
      runTest("compiler/testData/codegen/box/reflection/annotations/spread.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/annotations/onTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class OnTypes {
      @Test
      public void testAllFilesPresentInOnTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations/onTypes"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("arrayKClass.kt")
      public void testArrayKClass() {
        runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/arrayKClass.kt");
      }

      @Test
      @TestMetadata("arrayTypeInDefaultPackage.kt")
      public void testArrayTypeInDefaultPackage() {
        runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/arrayTypeInDefaultPackage.kt");
      }

      @Test
      @TestMetadata("arrayWithDefaultValue.kt")
      public void testArrayWithDefaultValue() {
        runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/arrayWithDefaultValue.kt");
      }

      @Test
      @TestMetadata("classLiteralWithExpectedType.kt")
      public void testClassLiteralWithExpectedType() {
        runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/classLiteralWithExpectedType.kt");
      }

      @Test
      @TestMetadata("differentArgumentTypes.kt")
      public void testDifferentArgumentTypes() {
        runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/differentArgumentTypes.kt");
      }

      @Test
      @TestMetadata("differentPositions.kt")
      public void testDifferentPositions() {
        runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/differentPositions.kt");
      }

      @Test
      @TestMetadata("equalsOnTypeAnnotationWithVarargField.kt")
      public void testEqualsOnTypeAnnotationWithVarargField() {
        runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/equalsOnTypeAnnotationWithVarargField.kt");
      }

      @Test
      @TestMetadata("localClass.kt")
      public void testLocalClass() {
        runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/localClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/annotations/repeatable")
    @TestDataPath("$PROJECT_ROOT")
    public class Repeatable {
      @Test
      public void testAllFilesPresentInRepeatable() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations/repeatable"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("javaAnnotation.kt")
      public void testJavaAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/javaAnnotation.kt");
      }

      @Test
      @TestMetadata("jvmRepeatableKotlinAnnotation.kt")
      public void testJvmRepeatableKotlinAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/jvmRepeatableKotlinAnnotation.kt");
      }

      @Test
      @TestMetadata("kotlinAnnotation.kt")
      public void testKotlinAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kotlinAnnotation.kt");
      }

      @Test
      @TestMetadata("kotlinAnnotationOnType.kt")
      public void testKotlinAnnotationOnType() {
        runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kotlinAnnotationOnType.kt");
      }

      @Test
      @TestMetadata("kt49335.kt")
      public void testKt49335() {
        runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kt49335.kt");
      }

      @Test
      @TestMetadata("kt53279_explicitContainer.kt")
      public void testKt53279_explicitContainer() {
        runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kt53279_explicitContainer.kt");
      }

      @Test
      @TestMetadata("kt53279_implicitContainer.kt")
      public void testKt53279_implicitContainer() {
        runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/kt53279_implicitContainer.kt");
      }

      @Test
      @TestMetadata("nonRepeatedAnnotationWithItsContainer.kt")
      public void testNonRepeatedAnnotationWithItsContainer() {
        runTest("compiler/testData/codegen/box/reflection/annotations/repeatable/nonRepeatedAnnotationWithItsContainer.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/builtins")
  @TestDataPath("$PROJECT_ROOT")
  public class Builtins {
    @Test
    public void testAllFilesPresentInBuiltins() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/builtins"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("collections.kt")
    public void testCollections() {
      runTest("compiler/testData/codegen/box/reflection/builtins/collections.kt");
    }

    @Test
    @TestMetadata("enumNameOrdinal.kt")
    public void testEnumNameOrdinal() {
      runTest("compiler/testData/codegen/box/reflection/builtins/enumNameOrdinal.kt");
    }

    @Test
    @TestMetadata("stringLength.kt")
    public void testStringLength() {
      runTest("compiler/testData/codegen/box/reflection/builtins/stringLength.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/caching")
  @TestDataPath("$PROJECT_ROOT")
  public class Caching {
    @Test
    public void testAllFilesPresentInCaching() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/caching"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("jvmKPackageCaching.kt")
    public void testJvmKPackageCaching() {
      runTest("compiler/testData/codegen/box/reflection/caching/jvmKPackageCaching.kt");
    }

    @Test
    @TestMetadata("jvmKTypeCaching.kt")
    public void testJvmKTypeCaching() {
      runTest("compiler/testData/codegen/box/reflection/caching/jvmKTypeCaching.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/call")
  @TestDataPath("$PROJECT_ROOT")
  public class Call {
    @Test
    public void testAllFilesPresentInCall() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("bigArity.kt")
    public void testBigArity() {
      runTest("compiler/testData/codegen/box/reflection/call/bigArity.kt");
    }

    @Test
    @TestMetadata("callInstanceJavaMethod.kt")
    public void testCallInstanceJavaMethod() {
      runTest("compiler/testData/codegen/box/reflection/call/callInstanceJavaMethod.kt");
    }

    @Test
    @TestMetadata("callPrivateJavaMethod.kt")
    public void testCallPrivateJavaMethod() {
      runTest("compiler/testData/codegen/box/reflection/call/callPrivateJavaMethod.kt");
    }

    @Test
    @TestMetadata("callStaticJavaMethod.kt")
    public void testCallStaticJavaMethod() {
      runTest("compiler/testData/codegen/box/reflection/call/callStaticJavaMethod.kt");
    }

    @Test
    @TestMetadata("cannotCallEnumConstructor.kt")
    public void testCannotCallEnumConstructor() {
      runTest("compiler/testData/codegen/box/reflection/call/cannotCallEnumConstructor.kt");
    }

    @Test
    @TestMetadata("contextParameters.kt")
    public void testContextParameters() {
      runTest("compiler/testData/codegen/box/reflection/call/contextParameters.kt");
    }

    @Test
    @TestMetadata("contextParametersSuspend.kt")
    public void testContextParametersSuspend() {
      runTest("compiler/testData/codegen/box/reflection/call/contextParametersSuspend.kt");
    }

    @Test
    @TestMetadata("disallowNullValueForNotNullField.kt")
    public void testDisallowNullValueForNotNullField() {
      runTest("compiler/testData/codegen/box/reflection/call/disallowNullValueForNotNullField.kt");
    }

    @Test
    @TestMetadata("equalsHashCodeToString.kt")
    public void testEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/reflection/call/equalsHashCodeToString.kt");
    }

    @Test
    @TestMetadata("exceptionHappened.kt")
    public void testExceptionHappened() {
      runTest("compiler/testData/codegen/box/reflection/call/exceptionHappened.kt");
    }

    @Test
    @TestMetadata("fakeOverride.kt")
    public void testFakeOverride() {
      runTest("compiler/testData/codegen/box/reflection/call/fakeOverride.kt");
    }

    @Test
    @TestMetadata("fakeOverrideSubstituted.kt")
    public void testFakeOverrideSubstituted() {
      runTest("compiler/testData/codegen/box/reflection/call/fakeOverrideSubstituted.kt");
    }

    @Test
    @TestMetadata("incorrectNumberOfArguments.kt")
    public void testIncorrectNumberOfArguments() {
      runTest("compiler/testData/codegen/box/reflection/call/incorrectNumberOfArguments.kt");
    }

    @Test
    @TestMetadata("innerClassConstructor.kt")
    public void testInnerClassConstructor() {
      runTest("compiler/testData/codegen/box/reflection/call/innerClassConstructor.kt");
    }

    @Test
    @TestMetadata("jvmStatic.kt")
    public void testJvmStatic() {
      runTest("compiler/testData/codegen/box/reflection/call/jvmStatic.kt");
    }

    @Test
    @TestMetadata("jvmStaticInObjectIncorrectReceiver.kt")
    public void testJvmStaticInObjectIncorrectReceiver() {
      runTest("compiler/testData/codegen/box/reflection/call/jvmStaticInObjectIncorrectReceiver.kt");
    }

    @Test
    @TestMetadata("localClassMember.kt")
    public void testLocalClassMember() {
      runTest("compiler/testData/codegen/box/reflection/call/localClassMember.kt");
    }

    @Test
    @TestMetadata("memberOfGenericClass.kt")
    public void testMemberOfGenericClass() {
      runTest("compiler/testData/codegen/box/reflection/call/memberOfGenericClass.kt");
    }

    @Test
    @TestMetadata("privateProperty.kt")
    public void testPrivateProperty() {
      runTest("compiler/testData/codegen/box/reflection/call/privateProperty.kt");
    }

    @Test
    @TestMetadata("propertyAccessors.kt")
    public void testPropertyAccessors() {
      runTest("compiler/testData/codegen/box/reflection/call/propertyAccessors.kt");
    }

    @Test
    @TestMetadata("propertyGetterAndGetFunctionDifferentReturnType.kt")
    public void testPropertyGetterAndGetFunctionDifferentReturnType() {
      runTest("compiler/testData/codegen/box/reflection/call/propertyGetterAndGetFunctionDifferentReturnType.kt");
    }

    @Test
    @TestMetadata("protectedMembers.kt")
    public void testProtectedMembers() {
      runTest("compiler/testData/codegen/box/reflection/call/protectedMembers.kt");
    }

    @Test
    @TestMetadata("returnUnit.kt")
    public void testReturnUnit() {
      runTest("compiler/testData/codegen/box/reflection/call/returnUnit.kt");
    }

    @Test
    @TestMetadata("simpleConstructor.kt")
    public void testSimpleConstructor() {
      runTest("compiler/testData/codegen/box/reflection/call/simpleConstructor.kt");
    }

    @Test
    @TestMetadata("simpleMemberFunction.kt")
    public void testSimpleMemberFunction() {
      runTest("compiler/testData/codegen/box/reflection/call/simpleMemberFunction.kt");
    }

    @Test
    @TestMetadata("simpleTopLevelFunctions.kt")
    public void testSimpleTopLevelFunctions() {
      runTest("compiler/testData/codegen/box/reflection/call/simpleTopLevelFunctions.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/call/bound")
    @TestDataPath("$PROJECT_ROOT")
    public class Bound {
      @Test
      public void testAllFilesPresentInBound() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/bound"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("companionObjectPropertyAccessors.kt")
      public void testCompanionObjectPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/companionObjectPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("extensionFunction.kt")
      public void testExtensionFunction() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/extensionFunction.kt");
      }

      @Test
      @TestMetadata("extensionPropertyAccessors.kt")
      public void testExtensionPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/extensionPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("innerClassConstructor.kt")
      public void testInnerClassConstructor() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/innerClassConstructor.kt");
      }

      @Test
      @TestMetadata("javaInstanceField.kt")
      public void testJavaInstanceField() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/javaInstanceField.kt");
      }

      @Test
      @TestMetadata("javaInstanceMethod.kt")
      public void testJavaInstanceMethod() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/javaInstanceMethod.kt");
      }

      @Test
      @TestMetadata("jvmStaticCompanionObjectPropertyAccessors.kt")
      public void testJvmStaticCompanionObjectPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticCompanionObjectPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("jvmStaticObjectFunction.kt")
      public void testJvmStaticObjectFunction() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticObjectFunction.kt");
      }

      @Test
      @TestMetadata("jvmStaticObjectPropertyAccessors.kt")
      public void testJvmStaticObjectPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticObjectPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("memberFunction.kt")
      public void testMemberFunction() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/memberFunction.kt");
      }

      @Test
      @TestMetadata("memberPropertyAccessors.kt")
      public void testMemberPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/memberPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("objectFunction.kt")
      public void testObjectFunction() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/objectFunction.kt");
      }

      @Test
      @TestMetadata("objectPropertyAccessors.kt")
      public void testObjectPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/call/bound/objectPropertyAccessors.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
      @Test
      public void testAllFilesPresentInInlineClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("inlineClassConstructor.kt")
      public void testInlineClassConstructor() {
        runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/inlineClassConstructor.kt");
      }

      @Test
      @TestMetadata("internalPrimaryValOfInlineClass.kt")
      public void testInternalPrimaryValOfInlineClass() {
        runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/internalPrimaryValOfInlineClass.kt");
      }

      @Test
      @TestMetadata("kt58887.kt")
      public void testKt58887() {
        runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/kt58887.kt");
      }

      @Test
      @TestMetadata("primaryValOfInlineClass.kt")
      public void testPrimaryValOfInlineClass() {
        runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primaryValOfInlineClass.kt");
      }

      @Test
      @TestMetadata("secondaryConstructorVisibilies.kt")
      public void testSecondaryConstructorVisibilies() {
        runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/secondaryConstructorVisibilies.kt");
      }

      @Test
      @TestMetadata("simpleConstructorWithInlineClassParameter.kt")
      public void testSimpleConstructorWithInlineClassParameter() {
        runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/simpleConstructorWithInlineClassParameter.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject")
      @TestDataPath("$PROJECT_ROOT")
      public class NonNullObject {
        @Test
        public void testAllFilesPresentInNonNullObject() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("constructorWithInlineClassParameters.kt")
        public void testConstructorWithInlineClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/constructorWithInlineClassParameters.kt");
        }

        @Test
        @TestMetadata("fieldAccessors.kt")
        public void testFieldAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/fieldAccessors.kt");
        }

        @Test
        @TestMetadata("functionsWithInlineClassParameters.kt")
        public void testFunctionsWithInlineClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/functionsWithInlineClassParameters.kt");
        }

        @Test
        @TestMetadata("jvmStaticFieldInObject.kt")
        public void testJvmStaticFieldInObject() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/jvmStaticFieldInObject.kt");
        }

        @Test
        @TestMetadata("jvmStaticFunction.kt")
        public void testJvmStaticFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/jvmStaticFunction.kt");
        }

        @Test
        @TestMetadata("nonOverridingFunOfInlineClass.kt")
        public void testNonOverridingFunOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/nonOverridingFunOfInlineClass.kt");
        }

        @Test
        @TestMetadata("nonOverridingVarOfInlineClass.kt")
        public void testNonOverridingVarOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/nonOverridingVarOfInlineClass.kt");
        }

        @Test
        @TestMetadata("overridingFunOfInlineClass.kt")
        public void testOverridingFunOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/overridingFunOfInlineClass.kt");
        }

        @Test
        @TestMetadata("overridingVarOfInlineClass.kt")
        public void testOverridingVarOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/overridingVarOfInlineClass.kt");
        }

        @Test
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/properties.kt");
        }

        @Test
        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonNullObject/suspendFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject")
      @TestDataPath("$PROJECT_ROOT")
      public class NullableObject {
        @Test
        public void testAllFilesPresentInNullableObject() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("constructorWithInlineClassParameters.kt")
        public void testConstructorWithInlineClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/constructorWithInlineClassParameters.kt");
        }

        @Test
        @TestMetadata("fieldAccessors.kt")
        public void testFieldAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/fieldAccessors.kt");
        }

        @Test
        @TestMetadata("functionsWithInlineClassParameters.kt")
        public void testFunctionsWithInlineClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/functionsWithInlineClassParameters.kt");
        }

        @Test
        @TestMetadata("jvmStaticFieldInObject.kt")
        public void testJvmStaticFieldInObject() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/jvmStaticFieldInObject.kt");
        }

        @Test
        @TestMetadata("jvmStaticFunction.kt")
        public void testJvmStaticFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/jvmStaticFunction.kt");
        }

        @Test
        @TestMetadata("nonOverridingFunOfInlineClass.kt")
        public void testNonOverridingFunOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/nonOverridingFunOfInlineClass.kt");
        }

        @Test
        @TestMetadata("nonOverridingVarOfInlineClass.kt")
        public void testNonOverridingVarOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/nonOverridingVarOfInlineClass.kt");
        }

        @Test
        @TestMetadata("overridingFunOfInlineClass.kt")
        public void testOverridingFunOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/overridingFunOfInlineClass.kt");
        }

        @Test
        @TestMetadata("overridingVarOfInlineClass.kt")
        public void testOverridingVarOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/overridingVarOfInlineClass.kt");
        }

        @Test
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/properties.kt");
        }

        @Test
        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nullableObject/suspendFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive")
      @TestDataPath("$PROJECT_ROOT")
      public class Primitive {
        @Test
        public void testAllFilesPresentInPrimitive() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("constructorWithInlineClassParameters.kt")
        public void testConstructorWithInlineClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/constructorWithInlineClassParameters.kt");
        }

        @Test
        @TestMetadata("fieldAccessors.kt")
        public void testFieldAccessors() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/fieldAccessors.kt");
        }

        @Test
        @TestMetadata("functionsWithInlineClassParameters.kt")
        public void testFunctionsWithInlineClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/functionsWithInlineClassParameters.kt");
        }

        @Test
        @TestMetadata("jvmStaticFieldInObject.kt")
        public void testJvmStaticFieldInObject() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/jvmStaticFieldInObject.kt");
        }

        @Test
        @TestMetadata("jvmStaticFunction.kt")
        public void testJvmStaticFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/jvmStaticFunction.kt");
        }

        @Test
        @TestMetadata("nonOverridingFunOfInlineClass.kt")
        public void testNonOverridingFunOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/nonOverridingFunOfInlineClass.kt");
        }

        @Test
        @TestMetadata("nonOverridingVarOfInlineClass.kt")
        public void testNonOverridingVarOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/nonOverridingVarOfInlineClass.kt");
        }

        @Test
        @TestMetadata("overridingFunOfInlineClass.kt")
        public void testOverridingFunOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/overridingFunOfInlineClass.kt");
        }

        @Test
        @TestMetadata("overridingVarOfInlineClass.kt")
        public void testOverridingVarOfInlineClass() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/overridingVarOfInlineClass.kt");
        }

        @Test
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/properties.kt");
        }

        @Test
        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/suspendFunction.kt");
        }

        @Test
        @TestMetadata("suspendFunctionGenericSubstitutedByPrimitive.kt")
        public void testSuspendFunctionGenericSubstitutedByPrimitive() {
          runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primitive/suspendFunctionGenericSubstitutedByPrimitive.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/call/valueClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class ValueClasses {
      @Test
      public void testAllFilesPresentInValueClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/valueClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("constructorWithMfvcParameters.kt")
      public void testConstructorWithMfvcParameters() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/constructorWithMfvcParameters.kt");
      }

      @Test
      @TestMetadata("fieldAccessors.kt")
      public void testFieldAccessors() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/fieldAccessors.kt");
      }

      @Test
      @TestMetadata("functionsWithMfvcParameters.kt")
      public void testFunctionsWithMfvcParameters() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/functionsWithMfvcParameters.kt");
      }

      @Test
      @TestMetadata("internalPrimaryValOfMfvc.kt")
      public void testInternalPrimaryValOfMfvc() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/internalPrimaryValOfMfvc.kt");
      }

      @Test
      @TestMetadata("jvmStaticFieldInObject.kt")
      public void testJvmStaticFieldInObject() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/jvmStaticFieldInObject.kt");
      }

      @Test
      @TestMetadata("jvmStaticFunction.kt")
      public void testJvmStaticFunction() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/jvmStaticFunction.kt");
      }

      @Test
      @TestMetadata("mfvcConstructor.kt")
      public void testMfvcConstructor() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/mfvcConstructor.kt");
      }

      @Test
      @TestMetadata("nonOverridingFunOfMfvc.kt")
      public void testNonOverridingFunOfMfvc() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/nonOverridingFunOfMfvc.kt");
      }

      @Test
      @TestMetadata("nonOverridingVarOfMfvc.kt")
      public void testNonOverridingVarOfMfvc() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/nonOverridingVarOfMfvc.kt");
      }

      @Test
      @TestMetadata("overridingFunOfMfvc.kt")
      public void testOverridingFunOfMfvc() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/overridingFunOfMfvc.kt");
      }

      @Test
      @TestMetadata("overridingVarOfMfvc.kt")
      public void testOverridingVarOfMfvc() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/overridingVarOfMfvc.kt");
      }

      @Test
      @TestMetadata("primaryValOfMfvc.kt")
      public void testPrimaryValOfMfvc() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/primaryValOfMfvc.kt");
      }

      @Test
      @TestMetadata("properties.kt")
      public void testProperties() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/properties.kt");
      }

      @Test
      @TestMetadata("secondaryConstructorVisibilies.kt")
      public void testSecondaryConstructorVisibilies() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/secondaryConstructorVisibilies.kt");
      }

      @Test
      @TestMetadata("suspendFunction.kt")
      public void testSuspendFunction() {
        runTest("compiler/testData/codegen/box/reflection/call/valueClasses/suspendFunction.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/callBy")
  @TestDataPath("$PROJECT_ROOT")
  public class CallBy {
    @Test
    public void testAllFilesPresentInCallBy() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("boundExtensionFunction.kt")
    public void testBoundExtensionFunction() {
      runTest("compiler/testData/codegen/box/reflection/callBy/boundExtensionFunction.kt");
    }

    @Test
    @TestMetadata("boundExtensionPropertyAcessor.kt")
    public void testBoundExtensionPropertyAcessor() {
      runTest("compiler/testData/codegen/box/reflection/callBy/boundExtensionPropertyAcessor.kt");
    }

    @Test
    @TestMetadata("boundJvmStaticInObject.kt")
    public void testBoundJvmStaticInObject() {
      runTest("compiler/testData/codegen/box/reflection/callBy/boundJvmStaticInObject.kt");
    }

    @Test
    @TestMetadata("brokenDefaultParametersFromDifferentFunctions.kt")
    public void testBrokenDefaultParametersFromDifferentFunctions() {
      runTest("compiler/testData/codegen/box/reflection/callBy/brokenDefaultParametersFromDifferentFunctions.kt");
    }

    @Test
    @TestMetadata("brokenDefaultParametersFromDifferentFunctionsJvmDefault.kt")
    public void testBrokenDefaultParametersFromDifferentFunctionsJvmDefault() {
      runTest("compiler/testData/codegen/box/reflection/callBy/brokenDefaultParametersFromDifferentFunctionsJvmDefault.kt");
    }

    @Test
    @TestMetadata("companionObject.kt")
    public void testCompanionObject() {
      runTest("compiler/testData/codegen/box/reflection/callBy/companionObject.kt");
    }

    @Test
    @TestMetadata("contextParameters.kt")
    public void testContextParameters() {
      runTest("compiler/testData/codegen/box/reflection/callBy/contextParameters.kt");
    }

    @Test
    @TestMetadata("contextParametersSuspend.kt")
    public void testContextParametersSuspend() {
      runTest("compiler/testData/codegen/box/reflection/callBy/contextParametersSuspend.kt");
    }

    @Test
    @TestMetadata("dataClassCopyWithValueClass.kt")
    public void testDataClassCopyWithValueClass() {
      runTest("compiler/testData/codegen/box/reflection/callBy/dataClassCopyWithValueClass.kt");
    }

    @Test
    @TestMetadata("defaultAndNonDefaultIntertwined.kt")
    public void testDefaultAndNonDefaultIntertwined() {
      runTest("compiler/testData/codegen/box/reflection/callBy/defaultAndNonDefaultIntertwined.kt");
    }

    @Test
    @TestMetadata("defaultInSuperClass.kt")
    public void testDefaultInSuperClass() {
      runTest("compiler/testData/codegen/box/reflection/callBy/defaultInSuperClass.kt");
    }

    @Test
    @TestMetadata("defaultInSuperInterface.kt")
    public void testDefaultInSuperInterface() {
      runTest("compiler/testData/codegen/box/reflection/callBy/defaultInSuperInterface.kt");
    }

    @Test
    @TestMetadata("emptyVarArg.kt")
    public void testEmptyVarArg() {
      runTest("compiler/testData/codegen/box/reflection/callBy/emptyVarArg.kt");
    }

    @Test
    @TestMetadata("extensionFunction.kt")
    public void testExtensionFunction() {
      runTest("compiler/testData/codegen/box/reflection/callBy/extensionFunction.kt");
    }

    @Test
    @TestMetadata("inlineClassDefaultArguments.kt")
    public void testInlineClassDefaultArguments() {
      runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassDefaultArguments.kt");
    }

    @Test
    @TestMetadata("inlineClassFunctionsAndConstructors.kt")
    public void testInlineClassFunctionsAndConstructors() {
      runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassFunctionsAndConstructors.kt");
    }

    @Test
    @TestMetadata("inlineClassInterface.kt")
    public void testInlineClassInterface() {
      runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassInterface.kt");
    }

    @Test
    @TestMetadata("inlineClassInterfaceJvmDefault.kt")
    public void testInlineClassInterfaceJvmDefault() {
      runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassInterfaceJvmDefault.kt");
    }

    @Test
    @TestMetadata("inlineClassMembers.kt")
    public void testInlineClassMembers() {
      runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassMembers.kt");
    }

    @Test
    @TestMetadata("jvmStaticInCompanionObject.kt")
    public void testJvmStaticInCompanionObject() {
      runTest("compiler/testData/codegen/box/reflection/callBy/jvmStaticInCompanionObject.kt");
    }

    @Test
    @TestMetadata("jvmStaticInObject.kt")
    public void testJvmStaticInObject() {
      runTest("compiler/testData/codegen/box/reflection/callBy/jvmStaticInObject.kt");
    }

    @Test
    @TestMetadata("kt60709.kt")
    public void testKt60709() {
      runTest("compiler/testData/codegen/box/reflection/callBy/kt60709.kt");
    }

    @Test
    @TestMetadata("kt61304.kt")
    public void testKt61304() {
      runTest("compiler/testData/codegen/box/reflection/callBy/kt61304.kt");
    }

    @Test
    @TestMetadata("manyArgumentsNoneDefaultConstructor.kt")
    public void testManyArgumentsNoneDefaultConstructor() {
      runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsNoneDefaultConstructor.kt");
    }

    @Test
    @TestMetadata("manyArgumentsNoneDefaultFunction.kt")
    public void testManyArgumentsNoneDefaultFunction() {
      runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsNoneDefaultFunction.kt");
    }

    @Test
    @TestMetadata("manyArgumentsOnlyOneDefault.kt")
    public void testManyArgumentsOnlyOneDefault() {
      runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsOnlyOneDefault.kt");
    }

    @Test
    @TestMetadata("manyMaskArguments.kt")
    public void testManyMaskArguments() {
      runTest("compiler/testData/codegen/box/reflection/callBy/manyMaskArguments.kt");
    }

    @Test
    @TestMetadata("mfvcDefaultArguments.kt")
    public void testMfvcDefaultArguments() {
      runTest("compiler/testData/codegen/box/reflection/callBy/mfvcDefaultArguments.kt");
    }

    @Test
    @TestMetadata("mfvcFunctionsAndConstructors.kt")
    public void testMfvcFunctionsAndConstructors() {
      runTest("compiler/testData/codegen/box/reflection/callBy/mfvcFunctionsAndConstructors.kt");
    }

    @Test
    @TestMetadata("mfvcInterface.kt")
    public void testMfvcInterface() {
      runTest("compiler/testData/codegen/box/reflection/callBy/mfvcInterface.kt");
    }

    @Test
    @TestMetadata("mfvcInterfaceJvmDefault.kt")
    public void testMfvcInterfaceJvmDefault() {
      runTest("compiler/testData/codegen/box/reflection/callBy/mfvcInterfaceJvmDefault.kt");
    }

    @Test
    @TestMetadata("mfvcKt61304.kt")
    public void testMfvcKt61304() {
      runTest("compiler/testData/codegen/box/reflection/callBy/mfvcKt61304.kt");
    }

    @Test
    @TestMetadata("mfvcMembers.kt")
    public void testMfvcMembers() {
      runTest("compiler/testData/codegen/box/reflection/callBy/mfvcMembers.kt");
    }

    @Test
    @TestMetadata("nonDefaultParameterOmitted.kt")
    public void testNonDefaultParameterOmitted() {
      runTest("compiler/testData/codegen/box/reflection/callBy/nonDefaultParameterOmitted.kt");
    }

    @Test
    @TestMetadata("nullValue.kt")
    public void testNullValue() {
      runTest("compiler/testData/codegen/box/reflection/callBy/nullValue.kt");
    }

    @Test
    @TestMetadata("ordinaryMethodIsInvokedWhenNoDefaultValuesAreUsed.kt")
    public void testOrdinaryMethodIsInvokedWhenNoDefaultValuesAreUsed() {
      runTest("compiler/testData/codegen/box/reflection/callBy/ordinaryMethodIsInvokedWhenNoDefaultValuesAreUsed.kt");
    }

    @Test
    @TestMetadata("primitiveDefaultValues.kt")
    public void testPrimitiveDefaultValues() {
      runTest("compiler/testData/codegen/box/reflection/callBy/primitiveDefaultValues.kt");
    }

    @Test
    @TestMetadata("privateMemberFunction.kt")
    public void testPrivateMemberFunction() {
      runTest("compiler/testData/codegen/box/reflection/callBy/privateMemberFunction.kt");
    }

    @Test
    @TestMetadata("simpleConstructor.kt")
    public void testSimpleConstructor() {
      runTest("compiler/testData/codegen/box/reflection/callBy/simpleConstructor.kt");
    }

    @Test
    @TestMetadata("simpleMemberFunciton.kt")
    public void testSimpleMemberFunciton() {
      runTest("compiler/testData/codegen/box/reflection/callBy/simpleMemberFunciton.kt");
    }

    @Test
    @TestMetadata("simpleTopLevelFunction.kt")
    public void testSimpleTopLevelFunction() {
      runTest("compiler/testData/codegen/box/reflection/callBy/simpleTopLevelFunction.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
      @Test
      public void testAllFilesPresentInInlineClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject")
      @TestDataPath("$PROJECT_ROOT")
      public class NonNullObject {
        @Test
        public void testAllFilesPresentInNonNullObject() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments")
        @TestDataPath("$PROJECT_ROOT")
        public class DefaultArguments {
          @Test
          public void testAllFilesPresentInDefaultArguments() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, true);
          }

          @Test
          @TestMetadata("constructorWithInlineClassParameters.kt")
          public void testConstructorWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/constructorWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("extensionFunctionsWithInlineClassParameters.kt")
          public void testExtensionFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/extensionFunctionsWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("fieldAccessors.kt")
          public void testFieldAccessors() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/fieldAccessors.kt");
          }

          @Test
          @TestMetadata("jvmStaticFieldInObject.kt")
          public void testJvmStaticFieldInObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/jvmStaticFieldInObject.kt");
          }

          @Test
          @TestMetadata("jvmStaticFunctionsOnCompanionObject.kt")
          public void testJvmStaticFunctionsOnCompanionObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/jvmStaticFunctionsOnCompanionObject.kt");
          }

          @Test
          @TestMetadata("jvmStaticFunctionsOnObject.kt")
          public void testJvmStaticFunctionsOnObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/jvmStaticFunctionsOnObject.kt");
          }

          @Test
          @TestMetadata("memberFunctionsWithInlineClassParameters.kt")
          public void testMemberFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/memberFunctionsWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("topLevelFunctionsWithInlineClassParameters.kt")
          public void testTopLevelFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nonNullObject/defaultArguments/topLevelFunctionsWithInlineClassParameters.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject")
      @TestDataPath("$PROJECT_ROOT")
      public class NullableObject {
        @Test
        public void testAllFilesPresentInNullableObject() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments")
        @TestDataPath("$PROJECT_ROOT")
        public class DefaultArguments {
          @Test
          public void testAllFilesPresentInDefaultArguments() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, true);
          }

          @Test
          @TestMetadata("constructorWithInlineClassParameters.kt")
          public void testConstructorWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/constructorWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("extensionFunctionsWithInlineClassParameters.kt")
          public void testExtensionFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/extensionFunctionsWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("fieldAccessors.kt")
          public void testFieldAccessors() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/fieldAccessors.kt");
          }

          @Test
          @TestMetadata("jvmStaticFieldInObject.kt")
          public void testJvmStaticFieldInObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/jvmStaticFieldInObject.kt");
          }

          @Test
          @TestMetadata("jvmStaticFunctionsOnCompanionObject.kt")
          public void testJvmStaticFunctionsOnCompanionObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/jvmStaticFunctionsOnCompanionObject.kt");
          }

          @Test
          @TestMetadata("jvmStaticFunctionsOnObject.kt")
          public void testJvmStaticFunctionsOnObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/jvmStaticFunctionsOnObject.kt");
          }

          @Test
          @TestMetadata("memberFunctionsWithInlineClassParameters.kt")
          public void testMemberFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/memberFunctionsWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("topLevelFunctionsWithInlineClassParameters.kt")
          public void testTopLevelFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/nullableObject/defaultArguments/topLevelFunctionsWithInlineClassParameters.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive")
      @TestDataPath("$PROJECT_ROOT")
      public class Primitive {
        @Test
        public void testAllFilesPresentInPrimitive() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments")
        @TestDataPath("$PROJECT_ROOT")
        public class DefaultArguments {
          @Test
          public void testAllFilesPresentInDefaultArguments() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, true);
          }

          @Test
          @TestMetadata("constructorWithInlineClassParameters.kt")
          public void testConstructorWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/constructorWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("extensionFunctionsWithInlineClassParameters.kt")
          public void testExtensionFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/extensionFunctionsWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("fieldAccessors.kt")
          public void testFieldAccessors() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/fieldAccessors.kt");
          }

          @Test
          @TestMetadata("jvmStaticFieldInObject.kt")
          public void testJvmStaticFieldInObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/jvmStaticFieldInObject.kt");
          }

          @Test
          @TestMetadata("jvmStaticFunctionsOnCompanionObject.kt")
          public void testJvmStaticFunctionsOnCompanionObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/jvmStaticFunctionsOnCompanionObject.kt");
          }

          @Test
          @TestMetadata("jvmStaticFunctionsOnObject.kt")
          public void testJvmStaticFunctionsOnObject() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/jvmStaticFunctionsOnObject.kt");
          }

          @Test
          @TestMetadata("memberFunctionsWithInlineClassParameters.kt")
          public void testMemberFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/memberFunctionsWithInlineClassParameters.kt");
          }

          @Test
          @TestMetadata("topLevelFunctionsWithInlineClassParameters.kt")
          public void testTopLevelFunctionsWithInlineClassParameters() {
            runTest("compiler/testData/codegen/box/reflection/callBy/inlineClasses/primitive/defaultArguments/topLevelFunctionsWithInlineClassParameters.kt");
          }
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/classLiterals")
  @TestDataPath("$PROJECT_ROOT")
  public class ClassLiterals {
    @Test
    public void testAllFilesPresentInClassLiterals() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/classLiterals"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("annotationClassLiteral.kt")
    public void testAnnotationClassLiteral() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/annotationClassLiteral.kt");
    }

    @Test
    @TestMetadata("arrays.kt")
    public void testArrays() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/arrays.kt");
    }

    @Test
    @TestMetadata("bareArray.kt")
    public void testBareArray() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/bareArray.kt");
    }

    @Test
    @TestMetadata("builtinClassLiterals.kt")
    public void testBuiltinClassLiterals() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/builtinClassLiterals.kt");
    }

    @Test
    @TestMetadata("genericArrays.kt")
    public void testGenericArrays() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/genericArrays.kt");
    }

    @Test
    @TestMetadata("genericClass.kt")
    public void testGenericClass() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/genericClass.kt");
    }

    @Test
    @TestMetadata("javaClassLiteral.kt")
    public void testJavaClassLiteral() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/javaClassLiteral.kt");
    }

    @Test
    @TestMetadata("lambdaClass.kt")
    public void testLambdaClass() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/lambdaClass.kt");
    }

    @Test
    @TestMetadata("nativeWithoutPackagePatching.kt")
    public void testNativeWithoutPackagePatching() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/nativeWithoutPackagePatching.kt");
    }

    @Test
    @TestMetadata("reifiedTypeClassLiteral.kt")
    public void testReifiedTypeClassLiteral() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/reifiedTypeClassLiteral.kt");
    }

    @Test
    @TestMetadata("simpleClassLiteral.kt")
    public void testSimpleClassLiteral() {
      runTest("compiler/testData/codegen/box/reflection/classLiterals/simpleClassLiteral.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/classes")
  @TestDataPath("$PROJECT_ROOT")
  public class Classes {
    @Test
    public void testAllFilesPresentInClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/classes"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("classSimpleName.kt")
    public void testClassSimpleName() {
      runTest("compiler/testData/codegen/box/reflection/classes/classSimpleName.kt");
    }

    @Test
    @TestMetadata("companionObject.kt")
    public void testCompanionObject() {
      runTest("compiler/testData/codegen/box/reflection/classes/companionObject.kt");
    }

    @Test
    @TestMetadata("createInstance.kt")
    public void testCreateInstance() {
      runTest("compiler/testData/codegen/box/reflection/classes/createInstance.kt");
    }

    @Test
    @TestMetadata("declaredMembers.kt")
    public void testDeclaredMembers() {
      runTest("compiler/testData/codegen/box/reflection/classes/declaredMembers.kt");
    }

    @Test
    @TestMetadata("deprecatedDefaultType.kt")
    public void testDeprecatedDefaultType() {
      runTest("compiler/testData/codegen/box/reflection/classes/deprecatedDefaultType.kt");
    }

    @Test
    @TestMetadata("javaVoid.kt")
    public void testJavaVoid() {
      runTest("compiler/testData/codegen/box/reflection/classes/javaVoid.kt");
    }

    @Test
    @TestMetadata("jvmName.kt")
    public void testJvmName() {
      runTest("compiler/testData/codegen/box/reflection/classes/jvmName.kt");
    }

    @Test
    @TestMetadata("jvmNameOfStandardClasses.kt")
    public void testJvmNameOfStandardClasses() {
      runTest("compiler/testData/codegen/box/reflection/classes/jvmNameOfStandardClasses.kt");
    }

    @Test
    @TestMetadata("localClassSimpleName.kt")
    public void testLocalClassSimpleName() {
      runTest("compiler/testData/codegen/box/reflection/classes/localClassSimpleName.kt");
    }

    @Test
    @TestMetadata("multiplatformKClassCreation.kt")
    public void testMultiplatformKClassCreation() {
      runTest("compiler/testData/codegen/box/reflection/classes/multiplatformKClassCreation.kt");
    }

    @Test
    @TestMetadata("nestedClasses.kt")
    public void testNestedClasses() {
      runTest("compiler/testData/codegen/box/reflection/classes/nestedClasses.kt");
    }

    @Test
    @TestMetadata("nestedClassesInScript.kt")
    public void testNestedClassesInScript() {
      runTest("compiler/testData/codegen/box/reflection/classes/nestedClassesInScript.kt");
    }

    @Test
    @TestMetadata("nestedClassesJava.kt")
    public void testNestedClassesJava() {
      runTest("compiler/testData/codegen/box/reflection/classes/nestedClassesJava.kt");
    }

    @Test
    @TestMetadata("objectInstance.kt")
    public void testObjectInstance() {
      runTest("compiler/testData/codegen/box/reflection/classes/objectInstance.kt");
    }

    @Test
    @TestMetadata("primitiveKClassEquality.kt")
    public void testPrimitiveKClassEquality() {
      runTest("compiler/testData/codegen/box/reflection/classes/primitiveKClassEquality.kt");
    }

    @Test
    @TestMetadata("qualifiedName.kt")
    public void testQualifiedName() {
      runTest("compiler/testData/codegen/box/reflection/classes/qualifiedName.kt");
    }

    @Test
    @TestMetadata("qualifiedNameJVM.kt")
    public void testQualifiedNameJVM() {
      runTest("compiler/testData/codegen/box/reflection/classes/qualifiedNameJVM.kt");
    }

    @Test
    @TestMetadata("qualifiedNameOfStandardClasses.kt")
    public void testQualifiedNameOfStandardClasses() {
      runTest("compiler/testData/codegen/box/reflection/classes/qualifiedNameOfStandardClasses.kt");
    }

    @Test
    @TestMetadata("qualifiedNameOfStandardClassesJVM.kt")
    public void testQualifiedNameOfStandardClassesJVM() {
      runTest("compiler/testData/codegen/box/reflection/classes/qualifiedNameOfStandardClassesJVM.kt");
    }

    @Test
    @TestMetadata("qualifiedNameOfStandardClassesOther.kt")
    public void testQualifiedNameOfStandardClassesOther() {
      runTest("compiler/testData/codegen/box/reflection/classes/qualifiedNameOfStandardClassesOther.kt");
    }

    @Test
    @TestMetadata("qualifiedNameWasm.kt")
    public void testQualifiedNameWasm() {
      runTest("compiler/testData/codegen/box/reflection/classes/qualifiedNameWasm.kt");
    }

    @Test
    @TestMetadata("qualifiedNameWithDollars.kt")
    public void testQualifiedNameWithDollars() {
      runTest("compiler/testData/codegen/box/reflection/classes/qualifiedNameWithDollars.kt");
    }

    @Test
    @TestMetadata("sealedSubclasses.kt")
    public void testSealedSubclasses() {
      runTest("compiler/testData/codegen/box/reflection/classes/sealedSubclasses.kt");
    }

    @Test
    @TestMetadata("starProjectedType.kt")
    public void testStarProjectedType() {
      runTest("compiler/testData/codegen/box/reflection/classes/starProjectedType.kt");
    }

    @Test
    @TestMetadata("toStringWasm.kt")
    public void testToStringWasm() {
      runTest("compiler/testData/codegen/box/reflection/classes/toStringWasm.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/constructors")
  @TestDataPath("$PROJECT_ROOT")
  public class Constructors {
    @Test
    public void testAllFilesPresentInConstructors() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/constructors"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("annotationClass.kt")
    public void testAnnotationClass() {
      runTest("compiler/testData/codegen/box/reflection/constructors/annotationClass.kt");
    }

    @Test
    @TestMetadata("classesWithoutConstructors.kt")
    public void testClassesWithoutConstructors() {
      runTest("compiler/testData/codegen/box/reflection/constructors/classesWithoutConstructors.kt");
    }

    @Test
    @TestMetadata("constructorName.kt")
    public void testConstructorName() {
      runTest("compiler/testData/codegen/box/reflection/constructors/constructorName.kt");
    }

    @Test
    @TestMetadata("enumEntry.kt")
    public void testEnumEntry() {
      runTest("compiler/testData/codegen/box/reflection/constructors/enumEntry.kt");
    }

    @Test
    @TestMetadata("primaryConstructor.kt")
    public void testPrimaryConstructor() {
      runTest("compiler/testData/codegen/box/reflection/constructors/primaryConstructor.kt");
    }

    @Test
    @TestMetadata("simpleGetConstructors.kt")
    public void testSimpleGetConstructors() {
      runTest("compiler/testData/codegen/box/reflection/constructors/simpleGetConstructors.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/createAnnotation")
  @TestDataPath("$PROJECT_ROOT")
  public class CreateAnnotation {
    @Test
    public void testAllFilesPresentInCreateAnnotation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/createAnnotation"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("annotationType.kt")
    public void testAnnotationType() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/annotationType.kt");
    }

    @Test
    @TestMetadata("arrayOfKClasses.kt")
    public void testArrayOfKClasses() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/arrayOfKClasses.kt");
    }

    @Test
    @TestMetadata("callByJava.kt")
    public void testCallByJava() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByJava.kt");
    }

    @Test
    @TestMetadata("callByKotlin.kt")
    public void testCallByKotlin() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByKotlin.kt");
    }

    @Test
    @TestMetadata("callByWithEmptyVarArg.kt")
    public void testCallByWithEmptyVarArg() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByWithEmptyVarArg.kt");
    }

    @Test
    @TestMetadata("callJava.kt")
    public void testCallJava() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/callJava.kt");
    }

    @Test
    @TestMetadata("callKotlin.kt")
    public void testCallKotlin() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/callKotlin.kt");
    }

    @Test
    @TestMetadata("createJdkAnnotationInstance.kt")
    public void testCreateJdkAnnotationInstance() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/createJdkAnnotationInstance.kt");
    }

    @Test
    @TestMetadata("enumKClassAnnotation.kt")
    public void testEnumKClassAnnotation() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/enumKClassAnnotation.kt");
    }

    @Test
    @TestMetadata("equalsHashCodeToString.kt")
    public void testEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/equalsHashCodeToString.kt");
    }

    @Test
    @TestMetadata("floatingPointParameters.kt")
    public void testFloatingPointParameters() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/floatingPointParameters.kt");
    }

    @Test
    @TestMetadata("parameterNamedEquals.kt")
    public void testParameterNamedEquals() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/parameterNamedEquals.kt");
    }

    @Test
    @TestMetadata("primitivesAndArrays.kt")
    public void testPrimitivesAndArrays() {
      runTest("compiler/testData/codegen/box/reflection/createAnnotation/primitivesAndArrays.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/functions")
  @TestDataPath("$PROJECT_ROOT")
  public class Functions {
    @Test
    public void testAllFilesPresentInFunctions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/functions"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("declaredVsInheritedFunctions.kt")
    public void testDeclaredVsInheritedFunctions() {
      runTest("compiler/testData/codegen/box/reflection/functions/declaredVsInheritedFunctions.kt");
    }

    @Test
    @TestMetadata("enumValuesValueOf.kt")
    public void testEnumValuesValueOf() {
      runTest("compiler/testData/codegen/box/reflection/functions/enumValuesValueOf.kt");
    }

    @Test
    @TestMetadata("functionFromStdlib.kt")
    public void testFunctionFromStdlib() {
      runTest("compiler/testData/codegen/box/reflection/functions/functionFromStdlib.kt");
    }

    @Test
    @TestMetadata("functionReferenceErasedToKFunction.kt")
    public void testFunctionReferenceErasedToKFunction() {
      runTest("compiler/testData/codegen/box/reflection/functions/functionReferenceErasedToKFunction.kt");
    }

    @Test
    @TestMetadata("genericOverriddenFunction.kt")
    public void testGenericOverriddenFunction() {
      runTest("compiler/testData/codegen/box/reflection/functions/genericOverriddenFunction.kt");
    }

    @Test
    @TestMetadata("instanceOfFunction.kt")
    public void testInstanceOfFunction() {
      runTest("compiler/testData/codegen/box/reflection/functions/instanceOfFunction.kt");
    }

    @Test
    @TestMetadata("isAccessibleOnAllMembers.kt")
    public void testIsAccessibleOnAllMembers() {
      runTest("compiler/testData/codegen/box/reflection/functions/isAccessibleOnAllMembers.kt");
    }

    @Test
    @TestMetadata("javaClassGetFunctions.kt")
    public void testJavaClassGetFunctions() {
      runTest("compiler/testData/codegen/box/reflection/functions/javaClassGetFunctions.kt");
    }

    @Test
    @TestMetadata("javaMethodsSmokeTest.kt")
    public void testJavaMethodsSmokeTest() {
      runTest("compiler/testData/codegen/box/reflection/functions/javaMethodsSmokeTest.kt");
    }

    @Test
    @TestMetadata("parentheses.kt")
    public void testParentheses() {
      runTest("compiler/testData/codegen/box/reflection/functions/parentheses.kt");
    }

    @Test
    @TestMetadata("platformName.kt")
    public void testPlatformName() {
      runTest("compiler/testData/codegen/box/reflection/functions/platformName.kt");
    }

    @Test
    @TestMetadata("privateMemberFunction.kt")
    public void testPrivateMemberFunction() {
      runTest("compiler/testData/codegen/box/reflection/functions/privateMemberFunction.kt");
    }

    @Test
    @TestMetadata("simpleGetFunctions.kt")
    public void testSimpleGetFunctions() {
      runTest("compiler/testData/codegen/box/reflection/functions/simpleGetFunctions.kt");
    }

    @Test
    @TestMetadata("simpleNames.kt")
    public void testSimpleNames() {
      runTest("compiler/testData/codegen/box/reflection/functions/simpleNames.kt");
    }

    @Test
    @TestMetadata("typeParameterInReturnType.kt")
    public void testTypeParameterInReturnType() {
      runTest("compiler/testData/codegen/box/reflection/functions/typeParameterInReturnType.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/isInstance")
  @TestDataPath("$PROJECT_ROOT")
  public class IsInstance {
    @Test
    public void testAllFilesPresentInIsInstance() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/isInstance"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("isInstanceCastAndSafeCast.kt")
    public void testIsInstanceCastAndSafeCast() {
      runTest("compiler/testData/codegen/box/reflection/isInstance/isInstanceCastAndSafeCast.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/kClassInAnnotation")
  @TestDataPath("$PROJECT_ROOT")
  public class KClassInAnnotation {
    @Test
    public void testAllFilesPresentInKClassInAnnotation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/kClassInAnnotation"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("array.kt")
    public void testArray() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/array.kt");
    }

    @Test
    @TestMetadata("arrayInJava.kt")
    public void testArrayInJava() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/arrayInJava.kt");
    }

    @Test
    @TestMetadata("basic.kt")
    public void testBasic() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/basic.kt");
    }

    @Test
    @TestMetadata("basicInJava.kt")
    public void testBasicInJava() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/basicInJava.kt");
    }

    @Test
    @TestMetadata("checkcast.kt")
    public void testCheckcast() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/checkcast.kt");
    }

    @Test
    @TestMetadata("forceWrapping.kt")
    public void testForceWrapping() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/forceWrapping.kt");
    }

    @Test
    @TestMetadata("vararg.kt")
    public void testVararg() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/vararg.kt");
    }

    @Test
    @TestMetadata("varargInJava.kt")
    public void testVarargInJava() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/varargInJava.kt");
    }

    @Test
    @TestMetadata("wrappingForCallableReferences.kt")
    public void testWrappingForCallableReferences() {
      runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/wrappingForCallableReferences.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/lambdaClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class LambdaClasses {
    @Test
    public void testAllFilesPresentInLambdaClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/lambdaClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("lightweightLambdas.kt")
    public void testLightweightLambdas() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/lightweightLambdas.kt");
    }

    @Test
    @TestMetadata("parameterNamesAndNullability.kt")
    public void testParameterNamesAndNullability() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/parameterNamesAndNullability.kt");
    }

    @Test
    @TestMetadata("reflectOnDefaultWithInlineClassArgument.kt")
    public void testReflectOnDefaultWithInlineClassArgument() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnDefaultWithInlineClassArgument.kt");
    }

    @Test
    @TestMetadata("reflectOnDefaultWithMfvcArgument.kt")
    public void testReflectOnDefaultWithMfvcArgument() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnDefaultWithMfvcArgument.kt");
    }

    @Test
    @TestMetadata("reflectOnLambdaInArrayConstructor.kt")
    public void testReflectOnLambdaInArrayConstructor() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInArrayConstructor.kt");
    }

    @Test
    @TestMetadata("reflectOnLambdaInConstructor.kt")
    public void testReflectOnLambdaInConstructor() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInConstructor.kt");
    }

    @Test
    @TestMetadata("reflectOnLambdaInField.kt")
    public void testReflectOnLambdaInField() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInField.kt");
    }

    @Test
    @TestMetadata("reflectOnLambdaInStaticField.kt")
    public void testReflectOnLambdaInStaticField() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInStaticField.kt");
    }

    @Test
    @TestMetadata("reflectOnLambdaInSuspend.kt")
    public void testReflectOnLambdaInSuspend() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInSuspend.kt");
    }

    @Test
    @TestMetadata("reflectOnLambdaInSuspendLambda.kt")
    public void testReflectOnLambdaInSuspendLambda() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInSuspendLambda.kt");
    }

    @Test
    @TestMetadata("reflectOnSuspendLambdaInField.kt")
    public void testReflectOnSuspendLambdaInField() {
      runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnSuspendLambdaInField.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/localClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class LocalClasses {
    @Test
    public void testAllFilesPresentInLocalClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/localClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("kt63988_nestedAnonymous.kt")
    public void testKt63988_nestedAnonymous() {
      runTest("compiler/testData/codegen/box/reflection/localClasses/kt63988_nestedAnonymous.kt");
    }

    @Test
    @TestMetadata("localClassesAndAnonymousObjects.kt")
    public void testLocalClassesAndAnonymousObjects() {
      runTest("compiler/testData/codegen/box/reflection/localClasses/localClassesAndAnonymousObjects.kt");
    }

    @Test
    @TestMetadata("localNestedClasses.kt")
    public void testLocalNestedClasses() {
      runTest("compiler/testData/codegen/box/reflection/localClasses/localNestedClasses.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/mapping")
  @TestDataPath("$PROJECT_ROOT")
  public class Mapping {
    @Test
    public void testAllFilesPresentInMapping() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("companionObjectProperty.kt")
    public void testCompanionObjectProperty() {
      runTest("compiler/testData/codegen/box/reflection/mapping/companionObjectProperty.kt");
    }

    @Test
    @TestMetadata("constructor.kt")
    public void testConstructor() {
      runTest("compiler/testData/codegen/box/reflection/mapping/constructor.kt");
    }

    @Test
    @TestMetadata("constructorWithInlineClassParameters.kt")
    public void testConstructorWithInlineClassParameters() {
      runTest("compiler/testData/codegen/box/reflection/mapping/constructorWithInlineClassParameters.kt");
    }

    @Test
    @TestMetadata("constructorWithMfvcParameters.kt")
    public void testConstructorWithMfvcParameters() {
      runTest("compiler/testData/codegen/box/reflection/mapping/constructorWithMfvcParameters.kt");
    }

    @Test
    @TestMetadata("extensionProperty.kt")
    public void testExtensionProperty() {
      runTest("compiler/testData/codegen/box/reflection/mapping/extensionProperty.kt");
    }

    @Test
    @TestMetadata("functions.kt")
    public void testFunctions() {
      runTest("compiler/testData/codegen/box/reflection/mapping/functions.kt");
    }

    @Test
    @TestMetadata("inlineReifiedFun.kt")
    public void testInlineReifiedFun() {
      runTest("compiler/testData/codegen/box/reflection/mapping/inlineReifiedFun.kt");
    }

    @Test
    @TestMetadata("interfaceCompanionPropertyWithJvmField.kt")
    public void testInterfaceCompanionPropertyWithJvmField() {
      runTest("compiler/testData/codegen/box/reflection/mapping/interfaceCompanionPropertyWithJvmField.kt");
    }

    @Test
    @TestMetadata("jClass2kClass.kt")
    public void testJClass2kClass() {
      runTest("compiler/testData/codegen/box/reflection/mapping/jClass2kClass.kt");
    }

    @Test
    @TestMetadata("javaConstructor.kt")
    public void testJavaConstructor() {
      runTest("compiler/testData/codegen/box/reflection/mapping/javaConstructor.kt");
    }

    @Test
    @TestMetadata("javaFields.kt")
    public void testJavaFields() {
      runTest("compiler/testData/codegen/box/reflection/mapping/javaFields.kt");
    }

    @Test
    @TestMetadata("javaMethods.kt")
    public void testJavaMethods() {
      runTest("compiler/testData/codegen/box/reflection/mapping/javaMethods.kt");
    }

    @Test
    @TestMetadata("lateinitProperty.kt")
    public void testLateinitProperty() {
      runTest("compiler/testData/codegen/box/reflection/mapping/lateinitProperty.kt");
    }

    @Test
    @TestMetadata("mappedClassIsEqualToClassLiteral.kt")
    public void testMappedClassIsEqualToClassLiteral() {
      runTest("compiler/testData/codegen/box/reflection/mapping/mappedClassIsEqualToClassLiteral.kt");
    }

    @Test
    @TestMetadata("memberProperty.kt")
    public void testMemberProperty() {
      runTest("compiler/testData/codegen/box/reflection/mapping/memberProperty.kt");
    }

    @Test
    @TestMetadata("methodsFromObject.kt")
    public void testMethodsFromObject() {
      runTest("compiler/testData/codegen/box/reflection/mapping/methodsFromObject.kt");
    }

    @Test
    @TestMetadata("methodsFromSuperInterface.kt")
    public void testMethodsFromSuperInterface() {
      runTest("compiler/testData/codegen/box/reflection/mapping/methodsFromSuperInterface.kt");
    }

    @Test
    @TestMetadata("nonTrivialFunctionNames.kt")
    public void testNonTrivialFunctionNames() {
      runTest("compiler/testData/codegen/box/reflection/mapping/nonTrivialFunctionNames.kt");
    }

    @Test
    @TestMetadata("nonTrivialPropertyNames.kt")
    public void testNonTrivialPropertyNames() {
      runTest("compiler/testData/codegen/box/reflection/mapping/nonTrivialPropertyNames.kt");
    }

    @Test
    @TestMetadata("openSuspendFun.kt")
    public void testOpenSuspendFun() {
      runTest("compiler/testData/codegen/box/reflection/mapping/openSuspendFun.kt");
    }

    @Test
    @TestMetadata("privateProperty.kt")
    public void testPrivateProperty() {
      runTest("compiler/testData/codegen/box/reflection/mapping/privateProperty.kt");
    }

    @Test
    @TestMetadata("propertyAccessorsWithJvmName.kt")
    public void testPropertyAccessorsWithJvmName() {
      runTest("compiler/testData/codegen/box/reflection/mapping/propertyAccessorsWithJvmName.kt");
    }

    @Test
    @TestMetadata("syntheticFields.kt")
    public void testSyntheticFields() {
      runTest("compiler/testData/codegen/box/reflection/mapping/syntheticFields.kt");
    }

    @Test
    @TestMetadata("topLevelFunctionOtherFile.kt")
    public void testTopLevelFunctionOtherFile() {
      runTest("compiler/testData/codegen/box/reflection/mapping/topLevelFunctionOtherFile.kt");
    }

    @Test
    @TestMetadata("topLevelProperty.kt")
    public void testTopLevelProperty() {
      runTest("compiler/testData/codegen/box/reflection/mapping/topLevelProperty.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/mapping/fakeOverrides")
    @TestDataPath("$PROJECT_ROOT")
    public class FakeOverrides {
      @Test
      public void testAllFilesPresentInFakeOverrides() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/fakeOverrides"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("javaFieldGetterSetter.kt")
      public void testJavaFieldGetterSetter() {
        runTest("compiler/testData/codegen/box/reflection/mapping/fakeOverrides/javaFieldGetterSetter.kt");
      }

      @Test
      @TestMetadata("javaMethod.kt")
      public void testJavaMethod() {
        runTest("compiler/testData/codegen/box/reflection/mapping/fakeOverrides/javaMethod.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/mapping/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
      @Test
      public void testAllFilesPresentInInlineClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("inlineClassPrimaryVal.kt")
      public void testInlineClassPrimaryVal() {
        runTest("compiler/testData/codegen/box/reflection/mapping/inlineClasses/inlineClassPrimaryVal.kt");
      }

      @Test
      @TestMetadata("suspendFunctionWithInlineClassInSignature.kt")
      public void testSuspendFunctionWithInlineClassInSignature() {
        runTest("compiler/testData/codegen/box/reflection/mapping/inlineClasses/suspendFunctionWithInlineClassInSignature.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/mapping/jvmStatic")
    @TestDataPath("$PROJECT_ROOT")
    public class JvmStatic {
      @Test
      public void testAllFilesPresentInJvmStatic() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("companionObjectFunction.kt")
      public void testCompanionObjectFunction() {
        runTest("compiler/testData/codegen/box/reflection/mapping/jvmStatic/companionObjectFunction.kt");
      }

      @Test
      @TestMetadata("objectFunction.kt")
      public void testObjectFunction() {
        runTest("compiler/testData/codegen/box/reflection/mapping/jvmStatic/objectFunction.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/mapping/types")
    @TestDataPath("$PROJECT_ROOT")
    public class Types {
      @Test
      public void testAllFilesPresentInTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/types"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("allSupertypes.kt")
      public void testAllSupertypes() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/allSupertypes.kt");
      }

      @Test
      @TestMetadata("annotationConstructorParameters.kt")
      public void testAnnotationConstructorParameters() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/annotationConstructorParameters.kt");
      }

      @Test
      @TestMetadata("array.kt")
      public void testArray() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/array.kt");
      }

      @Test
      @TestMetadata("constructors.kt")
      public void testConstructors() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/constructors.kt");
      }

      @Test
      @TestMetadata("createType.kt")
      public void testCreateType() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/createType.kt");
      }

      @Test
      @TestMetadata("genericArrayElementType.kt")
      public void testGenericArrayElementType() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/genericArrayElementType.kt");
      }

      @Test
      @TestMetadata("genericArrayElementTypeInSupertype.kt")
      public void testGenericArrayElementTypeInSupertype() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/genericArrayElementTypeInSupertype.kt");
      }

      @Test
      @TestMetadata("inlineClassInSignature.kt")
      public void testInlineClassInSignature() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/inlineClassInSignature.kt");
      }

      @Test
      @TestMetadata("inlineClassPrimaryVal.kt")
      public void testInlineClassPrimaryVal() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/inlineClassPrimaryVal.kt");
      }

      @Test
      @TestMetadata("innerGenericTypeArgument.kt")
      public void testInnerGenericTypeArgument() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/innerGenericTypeArgument.kt");
      }

      @Test
      @TestMetadata("memberFunctions.kt")
      public void testMemberFunctions() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/memberFunctions.kt");
      }

      @Test
      @TestMetadata("mfvcInSignature.kt")
      public void testMfvcInSignature() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/mfvcInSignature.kt");
      }

      @Test
      @TestMetadata("mfvcPrimaryVal.kt")
      public void testMfvcPrimaryVal() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/mfvcPrimaryVal.kt");
      }

      @Test
      @TestMetadata("overrideAnyWithPrimitive.kt")
      public void testOverrideAnyWithPrimitive() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/overrideAnyWithPrimitive.kt");
      }

      @Test
      @TestMetadata("parameterizedTypeArgument.kt")
      public void testParameterizedTypeArgument() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/parameterizedTypeArgument.kt");
      }

      @Test
      @TestMetadata("parameterizedTypes.kt")
      public void testParameterizedTypes() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/parameterizedTypes.kt");
      }

      @Test
      @TestMetadata("propertyAccessors.kt")
      public void testPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/propertyAccessors.kt");
      }

      @Test
      @TestMetadata("rawTypeArgument.kt")
      public void testRawTypeArgument() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/rawTypeArgument.kt");
      }

      @Test
      @TestMetadata("supertypes.kt")
      public void testSupertypes() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/supertypes.kt");
      }

      @Test
      @TestMetadata("suspendFun.kt")
      public void testSuspendFun() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/suspendFun.kt");
      }

      @Test
      @TestMetadata("topLevelFunctions.kt")
      public void testTopLevelFunctions() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/topLevelFunctions.kt");
      }

      @Test
      @TestMetadata("typeParameters.kt")
      public void testTypeParameters() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/typeParameters.kt");
      }

      @Test
      @TestMetadata("unit.kt")
      public void testUnit() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/unit.kt");
      }

      @Test
      @TestMetadata("withNullability.kt")
      public void testWithNullability() {
        runTest("compiler/testData/codegen/box/reflection/mapping/types/withNullability.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/mapping/valueClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class ValueClasses {
      @Test
      public void testAllFilesPresentInValueClasses() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/valueClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("mfvcPrimaryVal.kt")
      public void testMfvcPrimaryVal() {
        runTest("compiler/testData/codegen/box/reflection/mapping/valueClasses/mfvcPrimaryVal.kt");
      }

      @Test
      @TestMetadata("suspendFunctionWithMfvcInSignature.kt")
      public void testSuspendFunctionWithMfvcInSignature() {
        runTest("compiler/testData/codegen/box/reflection/mapping/valueClasses/suspendFunctionWithMfvcInSignature.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/methodsFromAny")
  @TestDataPath("$PROJECT_ROOT")
  public class MethodsFromAny {
    @Test
    @TestMetadata("adaptedCallableReferencesNotEqualToCallablesFromAPI.kt")
    public void testAdaptedCallableReferencesNotEqualToCallablesFromAPI() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/adaptedCallableReferencesNotEqualToCallablesFromAPI.kt");
    }

    @Test
    public void testAllFilesPresentInMethodsFromAny() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/methodsFromAny"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("builtinFunctionsToString.kt")
    public void testBuiltinFunctionsToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/builtinFunctionsToString.kt");
    }

    @Test
    @TestMetadata("callableReferencesEqualToCallablesFromAPI.kt")
    public void testCallableReferencesEqualToCallablesFromAPI() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/callableReferencesEqualToCallablesFromAPI.kt");
    }

    @Test
    @TestMetadata("classToString.kt")
    public void testClassToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/classToString.kt");
    }

    @Test
    @TestMetadata("contextParametersToString.kt")
    public void testContextParametersToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/contextParametersToString.kt");
    }

    @Test
    @TestMetadata("extensionPropertyReceiverToString.kt")
    public void testExtensionPropertyReceiverToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/extensionPropertyReceiverToString.kt");
    }

    @Test
    @TestMetadata("fakeOverrideEqualsHashCode.kt")
    public void testFakeOverrideEqualsHashCode() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideEqualsHashCode.kt");
    }

    @Test
    @TestMetadata("fakeOverrideToString.kt")
    public void testFakeOverrideToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideToString.kt");
    }

    @Test
    @TestMetadata("fakeOverrideToString2.kt")
    public void testFakeOverrideToString2() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideToString2.kt");
    }

    @Test
    @TestMetadata("functionEqualsHashCode.kt")
    public void testFunctionEqualsHashCode() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionEqualsHashCode.kt");
    }

    @Test
    @TestMetadata("functionFromStdlibMultiFileFacade.kt")
    public void testFunctionFromStdlibMultiFileFacade() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionFromStdlibMultiFileFacade.kt");
    }

    @Test
    @TestMetadata("functionFromStdlibSingleFileFacade.kt")
    public void testFunctionFromStdlibSingleFileFacade() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionFromStdlibSingleFileFacade.kt");
    }

    @Test
    @TestMetadata("functionToString.kt")
    public void testFunctionToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionToString.kt");
    }

    @Test
    @TestMetadata("memberExtensionToString.kt")
    public void testMemberExtensionToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/memberExtensionToString.kt");
    }

    @Test
    @TestMetadata("parametersEqualsHashCode.kt")
    public void testParametersEqualsHashCode() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersEqualsHashCode.kt");
    }

    @Test
    @TestMetadata("parametersEqualsWithClearCaches.kt")
    public void testParametersEqualsWithClearCaches() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersEqualsWithClearCaches.kt");
    }

    @Test
    @TestMetadata("parametersToString.kt")
    public void testParametersToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersToString.kt");
    }

    @Test
    @TestMetadata("propertyAccessorEqualsHashCode.kt")
    public void testPropertyAccessorEqualsHashCode() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyAccessorEqualsHashCode.kt");
    }

    @Test
    @TestMetadata("propertyEqualsHashCode.kt")
    public void testPropertyEqualsHashCode() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyEqualsHashCode.kt");
    }

    @Test
    @TestMetadata("propertyToString.kt")
    public void testPropertyToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyToString.kt");
    }

    @Test
    @TestMetadata("rawTypeToString.kt")
    public void testRawTypeToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/rawTypeToString.kt");
    }

    @Test
    @TestMetadata("typeEqualsHashCode.kt")
    public void testTypeEqualsHashCode() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeEqualsHashCode.kt");
    }

    @Test
    @TestMetadata("typeParametersEqualsHashCode.kt")
    public void testTypeParametersEqualsHashCode() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersEqualsHashCode.kt");
    }

    @Test
    @TestMetadata("typeParametersEqualsWithClearCaches.kt")
    public void testTypeParametersEqualsWithClearCaches() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersEqualsWithClearCaches.kt");
    }

    @Test
    @TestMetadata("typeParametersToString.kt")
    public void testTypeParametersToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersToString.kt");
    }

    @Test
    @TestMetadata("typeToString.kt")
    public void testTypeToString() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeToString.kt");
    }

    @Test
    @TestMetadata("typeToStringInnerGeneric.kt")
    public void testTypeToStringInnerGeneric() {
      runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeToStringInnerGeneric.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/modifiers")
  @TestDataPath("$PROJECT_ROOT")
  public class Modifiers {
    @Test
    public void testAllFilesPresentInModifiers() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/modifiers"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("callableModality.kt")
    public void testCallableModality() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/callableModality.kt");
    }

    @Test
    @TestMetadata("callableVisibility.kt")
    public void testCallableVisibility() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/callableVisibility.kt");
    }

    @Test
    @TestMetadata("classModality.kt")
    public void testClassModality() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/classModality.kt");
    }

    @Test
    @TestMetadata("classVisibility.kt")
    public void testClassVisibility() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/classVisibility.kt");
    }

    @Test
    @TestMetadata("classes.kt")
    public void testClasses() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/classes.kt");
    }

    @Test
    @TestMetadata("functions.kt")
    public void testFunctions() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/functions.kt");
    }

    @Test
    @TestMetadata("javaClassModality.kt")
    public void testJavaClassModality() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/javaClassModality.kt");
    }

    @Test
    @TestMetadata("javaClasses.kt")
    public void testJavaClasses() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/javaClasses.kt");
    }

    @Test
    @TestMetadata("javaVisibility.kt")
    public void testJavaVisibility() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/javaVisibility.kt");
    }

    @Test
    @TestMetadata("mfvc.kt")
    public void testMfvc() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/mfvc.kt");
    }

    @Test
    @TestMetadata("properties.kt")
    public void testProperties() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/properties.kt");
    }

    @Test
    @TestMetadata("typeParameters.kt")
    public void testTypeParameters() {
      runTest("compiler/testData/codegen/box/reflection/modifiers/typeParameters.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/multifileClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class MultifileClasses {
    @Test
    public void testAllFilesPresentInMultifileClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("callFunctionsInMultifileClass.kt")
    public void testCallFunctionsInMultifileClass() {
      runTest("compiler/testData/codegen/box/reflection/multifileClasses/callFunctionsInMultifileClass.kt");
    }

    @Test
    @TestMetadata("callPropertiesInMultifileClass.kt")
    public void testCallPropertiesInMultifileClass() {
      runTest("compiler/testData/codegen/box/reflection/multifileClasses/callPropertiesInMultifileClass.kt");
    }

    @Test
    @TestMetadata("javaFieldForVarAndConstVal.kt")
    public void testJavaFieldForVarAndConstVal() {
      runTest("compiler/testData/codegen/box/reflection/multifileClasses/javaFieldForVarAndConstVal.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime")
  @TestDataPath("$PROJECT_ROOT")
  public class NoReflectAtRuntime {
    @Test
    public void testAllFilesPresentInNoReflectAtRuntime() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("javaClass.kt")
    public void testJavaClass() {
      runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/javaClass.kt");
    }

    @Test
    @TestMetadata("javaVoid.kt")
    public void testJavaVoid() {
      runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/javaVoid.kt");
    }

    @Test
    @TestMetadata("primitiveJavaClass.kt")
    public void testPrimitiveJavaClass() {
      runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/primitiveJavaClass.kt");
    }

    @Test
    @TestMetadata("propertyGetSetName.kt")
    public void testPropertyGetSetName() {
      runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyGetSetName.kt");
    }

    @Test
    @TestMetadata("propertyInstanceof.kt")
    public void testPropertyInstanceof() {
      runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyInstanceof.kt");
    }

    @Test
    @TestMetadata("reifiedTypeJavaClass.kt")
    public void testReifiedTypeJavaClass() {
      runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/reifiedTypeJavaClass.kt");
    }

    @Test
    @TestMetadata("simpleClassLiterals.kt")
    public void testSimpleClassLiterals() {
      runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/simpleClassLiterals.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny")
    @TestDataPath("$PROJECT_ROOT")
    public class MethodsFromAny {
      @Test
      public void testAllFilesPresentInMethodsFromAny() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("callableReferences.kt")
      public void testCallableReferences() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/callableReferences.kt");
      }

      @Test
      @TestMetadata("classReference.kt")
      public void testClassReference() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/classReference.kt");
      }

      @Test
      @TestMetadata("delegatedProperty.kt")
      public void testDelegatedProperty() {
        runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/delegatedProperty.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/parameters")
  @TestDataPath("$PROJECT_ROOT")
  public class Parameters {
    @Test
    public void testAllFilesPresentInParameters() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/parameters"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("anonymousContextParameter.kt")
    public void testAnonymousContextParameter() {
      runTest("compiler/testData/codegen/box/reflection/parameters/anonymousContextParameter.kt");
    }

    @Test
    @TestMetadata("bigArity.kt")
    public void testBigArity() {
      runTest("compiler/testData/codegen/box/reflection/parameters/bigArity.kt");
    }

    @Test
    @TestMetadata("boundInnerClassConstructor.kt")
    public void testBoundInnerClassConstructor() {
      runTest("compiler/testData/codegen/box/reflection/parameters/boundInnerClassConstructor.kt");
    }

    @Test
    @TestMetadata("boundObjectMemberReferences.kt")
    public void testBoundObjectMemberReferences() {
      runTest("compiler/testData/codegen/box/reflection/parameters/boundObjectMemberReferences.kt");
    }

    @Test
    @TestMetadata("boundReferences.kt")
    public void testBoundReferences() {
      runTest("compiler/testData/codegen/box/reflection/parameters/boundReferences.kt");
    }

    @Test
    @TestMetadata("contextParameters.kt")
    public void testContextParameters() {
      runTest("compiler/testData/codegen/box/reflection/parameters/contextParameters.kt");
    }

    @Test
    @TestMetadata("findParameterByName.kt")
    public void testFindParameterByName() {
      runTest("compiler/testData/codegen/box/reflection/parameters/findParameterByName.kt");
    }

    @Test
    @TestMetadata("functionParameterNameAndIndex.kt")
    public void testFunctionParameterNameAndIndex() {
      runTest("compiler/testData/codegen/box/reflection/parameters/functionParameterNameAndIndex.kt");
    }

    @Test
    @TestMetadata("instanceExtensionReceiverAndValueParameters.kt")
    public void testInstanceExtensionReceiverAndValueParameters() {
      runTest("compiler/testData/codegen/box/reflection/parameters/instanceExtensionReceiverAndValueParameters.kt");
    }

    @Test
    @TestMetadata("instanceParameterOfFakeOverride.kt")
    public void testInstanceParameterOfFakeOverride() {
      runTest("compiler/testData/codegen/box/reflection/parameters/instanceParameterOfFakeOverride.kt");
    }

    @Test
    @TestMetadata("isMarkedNullable.kt")
    public void testIsMarkedNullable() {
      runTest("compiler/testData/codegen/box/reflection/parameters/isMarkedNullable.kt");
    }

    @Test
    @TestMetadata("isOptional.kt")
    public void testIsOptional() {
      runTest("compiler/testData/codegen/box/reflection/parameters/isOptional.kt");
    }

    @Test
    @TestMetadata("javaAnnotationConstructor.kt")
    public void testJavaAnnotationConstructor() {
      runTest("compiler/testData/codegen/box/reflection/parameters/javaAnnotationConstructor.kt");
    }

    @Test
    @TestMetadata("kinds.kt")
    public void testKinds() {
      runTest("compiler/testData/codegen/box/reflection/parameters/kinds.kt");
    }

    @Test
    @TestMetadata("propertySetter.kt")
    public void testPropertySetter() {
      runTest("compiler/testData/codegen/box/reflection/parameters/propertySetter.kt");
    }

    @Test
    @TestMetadata("realParameterNames.kt")
    public void testRealParameterNames() {
      runTest("compiler/testData/codegen/box/reflection/parameters/realParameterNames.kt");
    }

    @Test
    @TestMetadata("synthesizedParameterNames.kt")
    public void testSynthesizedParameterNames() {
      runTest("compiler/testData/codegen/box/reflection/parameters/synthesizedParameterNames.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/properties")
  @TestDataPath("$PROJECT_ROOT")
  public class Properties {
    @Test
    public void testAllFilesPresentInProperties() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("allVsDeclared.kt")
    public void testAllVsDeclared() {
      runTest("compiler/testData/codegen/box/reflection/properties/allVsDeclared.kt");
    }

    @Test
    @TestMetadata("callPrivatePropertyFromGetProperties.kt")
    public void testCallPrivatePropertyFromGetProperties() {
      runTest("compiler/testData/codegen/box/reflection/properties/callPrivatePropertyFromGetProperties.kt");
    }

    @Test
    @TestMetadata("contextParametersGet.kt")
    public void testContextParametersGet() {
      runTest("compiler/testData/codegen/box/reflection/properties/contextParametersGet.kt");
    }

    @Test
    @TestMetadata("declaredVsInheritedProperties.kt")
    public void testDeclaredVsInheritedProperties() {
      runTest("compiler/testData/codegen/box/reflection/properties/declaredVsInheritedProperties.kt");
    }

    @Test
    @TestMetadata("equalsHashCodeToString.kt")
    public void testEqualsHashCodeToString() {
      runTest("compiler/testData/codegen/box/reflection/properties/equalsHashCodeToString.kt");
    }

    @Test
    @TestMetadata("fakeOverridesInSubclass.kt")
    public void testFakeOverridesInSubclass() {
      runTest("compiler/testData/codegen/box/reflection/properties/fakeOverridesInSubclass.kt");
    }

    @Test
    @TestMetadata("genericClassLiteralPropertyReceiverIsStar.kt")
    public void testGenericClassLiteralPropertyReceiverIsStar() {
      runTest("compiler/testData/codegen/box/reflection/properties/genericClassLiteralPropertyReceiverIsStar.kt");
    }

    @Test
    @TestMetadata("genericOverriddenProperty.kt")
    public void testGenericOverriddenProperty() {
      runTest("compiler/testData/codegen/box/reflection/properties/genericOverriddenProperty.kt");
    }

    @Test
    @TestMetadata("genericProperty.kt")
    public void testGenericProperty() {
      runTest("compiler/testData/codegen/box/reflection/properties/genericProperty.kt");
    }

    @Test
    @TestMetadata("getExtensionPropertiesMutableVsReadonly.kt")
    public void testGetExtensionPropertiesMutableVsReadonly() {
      runTest("compiler/testData/codegen/box/reflection/properties/getExtensionPropertiesMutableVsReadonly.kt");
    }

    @Test
    @TestMetadata("getPropertiesMutableVsReadonly.kt")
    public void testGetPropertiesMutableVsReadonly() {
      runTest("compiler/testData/codegen/box/reflection/properties/getPropertiesMutableVsReadonly.kt");
    }

    @Test
    @TestMetadata("interfaceDelegation.kt")
    public void testInterfaceDelegation() {
      runTest("compiler/testData/codegen/box/reflection/properties/interfaceDelegation.kt");
    }

    @Test
    @TestMetadata("invokeKProperty.kt")
    public void testInvokeKProperty() {
      runTest("compiler/testData/codegen/box/reflection/properties/invokeKProperty.kt");
    }

    @Test
    @TestMetadata("javaPropertyInheritedInKotlin.kt")
    public void testJavaPropertyInheritedInKotlin() {
      runTest("compiler/testData/codegen/box/reflection/properties/javaPropertyInheritedInKotlin.kt");
    }

    @Test
    @TestMetadata("javaStaticField.kt")
    public void testJavaStaticField() {
      runTest("compiler/testData/codegen/box/reflection/properties/javaStaticField.kt");
    }

    @Test
    @TestMetadata("kotlinPropertyInheritedInJava.kt")
    public void testKotlinPropertyInheritedInJava() {
      runTest("compiler/testData/codegen/box/reflection/properties/kotlinPropertyInheritedInJava.kt");
    }

    @Test
    @TestMetadata("memberAndMemberExtensionWithSameName.kt")
    public void testMemberAndMemberExtensionWithSameName() {
      runTest("compiler/testData/codegen/box/reflection/properties/memberAndMemberExtensionWithSameName.kt");
    }

    @Test
    @TestMetadata("mutatePrivateJavaInstanceField.kt")
    public void testMutatePrivateJavaInstanceField() {
      runTest("compiler/testData/codegen/box/reflection/properties/mutatePrivateJavaInstanceField.kt");
    }

    @Test
    @TestMetadata("mutatePrivateJavaStaticField.kt")
    public void testMutatePrivateJavaStaticField() {
      runTest("compiler/testData/codegen/box/reflection/properties/mutatePrivateJavaStaticField.kt");
    }

    @Test
    @TestMetadata("noConflictOnKotlinGetterAndJavaField.kt")
    public void testNoConflictOnKotlinGetterAndJavaField() {
      runTest("compiler/testData/codegen/box/reflection/properties/noConflictOnKotlinGetterAndJavaField.kt");
    }

    @Test
    @TestMetadata("privateClassVal.kt")
    public void testPrivateClassVal() {
      runTest("compiler/testData/codegen/box/reflection/properties/privateClassVal.kt");
    }

    @Test
    @TestMetadata("privateClassVar.kt")
    public void testPrivateClassVar() {
      runTest("compiler/testData/codegen/box/reflection/properties/privateClassVar.kt");
    }

    @Test
    @TestMetadata("privateFakeOverrideFromSuperclass.kt")
    public void testPrivateFakeOverrideFromSuperclass() {
      runTest("compiler/testData/codegen/box/reflection/properties/privateFakeOverrideFromSuperclass.kt");
    }

    @Test
    @TestMetadata("privateJvmStaticVarInObject.kt")
    public void testPrivateJvmStaticVarInObject() {
      runTest("compiler/testData/codegen/box/reflection/properties/privateJvmStaticVarInObject.kt");
    }

    @Test
    @TestMetadata("privatePropertyCallIsAccessibleOnAccessors.kt")
    public void testPrivatePropertyCallIsAccessibleOnAccessors() {
      runTest("compiler/testData/codegen/box/reflection/properties/privatePropertyCallIsAccessibleOnAccessors.kt");
    }

    @Test
    @TestMetadata("privateToThisAccessors.kt")
    public void testPrivateToThisAccessors() {
      runTest("compiler/testData/codegen/box/reflection/properties/privateToThisAccessors.kt");
    }

    @Test
    @TestMetadata("propertyOfNestedClassAndArrayType.kt")
    public void testPropertyOfNestedClassAndArrayType() {
      runTest("compiler/testData/codegen/box/reflection/properties/propertyOfNestedClassAndArrayType.kt");
    }

    @Test
    @TestMetadata("propertyOrder.kt")
    public void testPropertyOrder() {
      runTest("compiler/testData/codegen/box/reflection/properties/propertyOrder.kt");
    }

    @Test
    @TestMetadata("protectedClassVar.kt")
    public void testProtectedClassVar() {
      runTest("compiler/testData/codegen/box/reflection/properties/protectedClassVar.kt");
    }

    @Test
    @TestMetadata("publicClassValAccessible.kt")
    public void testPublicClassValAccessible() {
      runTest("compiler/testData/codegen/box/reflection/properties/publicClassValAccessible.kt");
    }

    @Test
    @TestMetadata("referenceToJavaFieldOfKotlinSubclass.kt")
    public void testReferenceToJavaFieldOfKotlinSubclass() {
      runTest("compiler/testData/codegen/box/reflection/properties/referenceToJavaFieldOfKotlinSubclass.kt");
    }

    @Test
    @TestMetadata("simpleGetProperties.kt")
    public void testSimpleGetProperties() {
      runTest("compiler/testData/codegen/box/reflection/properties/simpleGetProperties.kt");
    }

    @Test
    @TestMetadata("syntheticJavaProperty.kt")
    public void testSyntheticJavaProperty() {
      runTest("compiler/testData/codegen/box/reflection/properties/syntheticJavaProperty.kt");
    }

    @Test
    @TestMetadata("withLocalType.kt")
    public void testWithLocalType() {
      runTest("compiler/testData/codegen/box/reflection/properties/withLocalType.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/properties/accessors")
    @TestDataPath("$PROJECT_ROOT")
    public class Accessors {
      @Test
      @TestMetadata("accessorNames.kt")
      public void testAccessorNames() {
        runTest("compiler/testData/codegen/box/reflection/properties/accessors/accessorNames.kt");
      }

      @Test
      public void testAllFilesPresentInAccessors() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/accessors"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("extensionPropertyAccessors.kt")
      public void testExtensionPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/properties/accessors/extensionPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("memberExtensions.kt")
      public void testMemberExtensions() {
        runTest("compiler/testData/codegen/box/reflection/properties/accessors/memberExtensions.kt");
      }

      @Test
      @TestMetadata("memberPropertyAccessors.kt")
      public void testMemberPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/properties/accessors/memberPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("topLevelPropertyAccessors.kt")
      public void testTopLevelPropertyAccessors() {
        runTest("compiler/testData/codegen/box/reflection/properties/accessors/topLevelPropertyAccessors.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/properties/getDelegate")
    @TestDataPath("$PROJECT_ROOT")
    public class GetDelegate {
      @Test
      public void testAllFilesPresentInGetDelegate() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/getDelegate"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("booleanPropertyNameStartsWithIs.kt")
      public void testBooleanPropertyNameStartsWithIs() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/booleanPropertyNameStartsWithIs.kt");
      }

      @Test
      @TestMetadata("boundExtensionProperty.kt")
      public void testBoundExtensionProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/boundExtensionProperty.kt");
      }

      @Test
      @TestMetadata("boundMemberProperty.kt")
      public void testBoundMemberProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/boundMemberProperty.kt");
      }

      @Test
      @TestMetadata("extensionProperty.kt")
      public void testExtensionProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/extensionProperty.kt");
      }

      @Test
      @TestMetadata("fakeOverride.kt")
      public void testFakeOverride() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/fakeOverride.kt");
      }

      @Test
      @TestMetadata("getExtensionDelegate.kt")
      public void testGetExtensionDelegate() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/getExtensionDelegate.kt");
      }

      @Test
      @TestMetadata("getExtensionDelegateForDelegatedToAnother.kt")
      public void testGetExtensionDelegateForDelegatedToAnother() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/getExtensionDelegateForDelegatedToAnother.kt");
      }

      @Test
      @TestMetadata("kPropertyForDelegatedProperty.kt")
      public void testKPropertyForDelegatedProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/kPropertyForDelegatedProperty.kt");
      }

      @Test
      @TestMetadata("memberExtensionProperty.kt")
      public void testMemberExtensionProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/memberExtensionProperty.kt");
      }

      @Test
      @TestMetadata("memberProperty.kt")
      public void testMemberProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/memberProperty.kt");
      }

      @Test
      @TestMetadata("nameClashClassAndCompanion.kt")
      public void testNameClashClassAndCompanion() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/nameClashClassAndCompanion.kt");
      }

      @Test
      @TestMetadata("nameClashExtensionProperties.kt")
      public void testNameClashExtensionProperties() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/nameClashExtensionProperties.kt");
      }

      @Test
      @TestMetadata("noSetAccessibleTrue.kt")
      public void testNoSetAccessibleTrue() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/noSetAccessibleTrue.kt");
      }

      @Test
      @TestMetadata("notDelegatedProperty.kt")
      public void testNotDelegatedProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/notDelegatedProperty.kt");
      }

      @Test
      @TestMetadata("overrideDelegatedByDelegated.kt")
      public void testOverrideDelegatedByDelegated() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/overrideDelegatedByDelegated.kt");
      }

      @Test
      @TestMetadata("topLevelProperty.kt")
      public void testTopLevelProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/topLevelProperty.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/properties/getDelegate/method")
      @TestDataPath("$PROJECT_ROOT")
      public class Method {
        @Test
        public void testAllFilesPresentInMethod() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/getDelegate/method"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("delegateMethodIsNonOverridable.kt")
        public void testDelegateMethodIsNonOverridable() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateMethodIsNonOverridable.kt");
        }

        @Test
        @TestMetadata("delegateToAnother.kt")
        public void testDelegateToAnother() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToAnother.kt");
        }

        @Test
        @TestMetadata("delegateToConst.kt")
        public void testDelegateToConst() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToConst.kt");
        }

        @Test
        @TestMetadata("delegateToConstProperty.kt")
        public void testDelegateToConstProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToConstProperty.kt");
        }

        @Test
        @TestMetadata("delegateToEnum.kt")
        public void testDelegateToEnum() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToEnum.kt");
        }

        @Test
        @TestMetadata("delegateToFinalObjectProperty.kt")
        public void testDelegateToFinalObjectProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToFinalObjectProperty.kt");
        }

        @Test
        @TestMetadata("delegateToFinalProperty.kt")
        public void testDelegateToFinalProperty() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToFinalProperty.kt");
        }

        @Test
        @TestMetadata("delegateToSingleton.kt")
        public void testDelegateToSingleton() {
          runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/method/delegateToSingleton.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/properties/jvmField")
    @TestDataPath("$PROJECT_ROOT")
    public class JvmField {
      @Test
      public void testAllFilesPresentInJvmField() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/jvmField"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("annotationCompanionWithAnnotation.kt")
      public void testAnnotationCompanionWithAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/properties/jvmField/annotationCompanionWithAnnotation.kt");
      }

      @Test
      @TestMetadata("interfaceCompanion.kt")
      public void testInterfaceCompanion() {
        runTest("compiler/testData/codegen/box/reflection/properties/jvmField/interfaceCompanion.kt");
      }

      @Test
      @TestMetadata("interfaceCompanionWithAnnotation.kt")
      public void testInterfaceCompanionWithAnnotation() {
        runTest("compiler/testData/codegen/box/reflection/properties/jvmField/interfaceCompanionWithAnnotation.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/properties/localDelegated")
    @TestDataPath("$PROJECT_ROOT")
    public class LocalDelegated {
      @Test
      public void testAllFilesPresentInLocalDelegated() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/localDelegated"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/annotations.kt");
      }

      @Test
      @TestMetadata("defaultImpls.kt")
      public void testDefaultImpls() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/defaultImpls.kt");
      }

      @Test
      @TestMetadata("inLambda.kt")
      public void testInLambda() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inLambda.kt");
      }

      @Test
      @TestMetadata("inLambdaInInline.kt")
      public void testInLambdaInInline() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inLambdaInInline.kt");
      }

      @Test
      @TestMetadata("inlineFun.kt")
      public void testInlineFun() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inlineFun.kt");
      }

      @Test
      @TestMetadata("localAndNonLocal.kt")
      public void testLocalAndNonLocal() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/localAndNonLocal.kt");
      }

      @Test
      @TestMetadata("localDelegatedProperty.kt")
      public void testLocalDelegatedProperty() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/localDelegatedProperty.kt");
      }

      @Test
      @TestMetadata("multiFileClass.kt")
      public void testMultiFileClass() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/multiFileClass.kt");
      }

      @Test
      @TestMetadata("unusedGenericType.kt")
      public void testUnusedGenericType() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/unusedGenericType.kt");
      }

      @Test
      @TestMetadata("variableOfGenericType.kt")
      public void testVariableOfGenericType() {
        runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/variableOfGenericType.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/supertypes")
  @TestDataPath("$PROJECT_ROOT")
  public class Supertypes {
    @Test
    public void testAllFilesPresentInSupertypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/supertypes"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("arrayClassifier.kt")
    public void testArrayClassifier() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/arrayClassifier.kt");
    }

    @Test
    @TestMetadata("builtInClassSupertypes.kt")
    public void testBuiltInClassSupertypes() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/builtInClassSupertypes.kt");
    }

    @Test
    @TestMetadata("flexibleTypesSubstitution.kt")
    public void testFlexibleTypesSubstitution() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/flexibleTypesSubstitution.kt");
    }

    @Test
    @TestMetadata("genericSubstitution.kt")
    public void testGenericSubstitution() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/genericSubstitution.kt");
    }

    @Test
    @TestMetadata("isSubclassOfIsSuperclassOf.kt")
    public void testIsSubclassOfIsSuperclassOf() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/isSubclassOfIsSuperclassOf.kt");
    }

    @Test
    @TestMetadata("javaArrayType.kt")
    public void testJavaArrayType() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/javaArrayType.kt");
    }

    @Test
    @TestMetadata("nullablilitySubstitution.kt")
    public void testNullablilitySubstitution() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/nullablilitySubstitution.kt");
    }

    @Test
    @TestMetadata("primitives.kt")
    public void testPrimitives() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/primitives.kt");
    }

    @Test
    @TestMetadata("rawSupertypes.kt")
    public void testRawSupertypes() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/rawSupertypes.kt");
    }

    @Test
    @TestMetadata("simpleSupertypes.kt")
    public void testSimpleSupertypes() {
      runTest("compiler/testData/codegen/box/reflection/supertypes/simpleSupertypes.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/syntheticClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class SyntheticClasses {
    @Test
    public void testAllFilesPresentInSyntheticClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/syntheticClasses"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("syntheticClasses.kt")
    public void testSyntheticClasses() {
      runTest("compiler/testData/codegen/box/reflection/syntheticClasses/syntheticClasses.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/typeOf")
  @TestDataPath("$PROJECT_ROOT")
  public class TypeOf {
    @Test
    public void testAllFilesPresentInTypeOf() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("annotatedType.kt")
    public void testAnnotatedType() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/annotatedType.kt");
    }

    @Test
    @TestMetadata("arrayOfNullableReified.kt")
    public void testArrayOfNullableReified() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/arrayOfNullableReified.kt");
    }

    @Test
    @TestMetadata("caching.kt")
    public void testCaching() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/caching.kt");
    }

    @Test
    @TestMetadata("classes.kt")
    public void testClasses() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/classes.kt");
    }

    @Test
    @TestMetadata("definitelyNotNullType.kt")
    public void testDefinitelyNotNullType() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/definitelyNotNullType.kt");
    }

    @Test
    @TestMetadata("flexibleTypes.kt")
    public void testFlexibleTypes() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/flexibleTypes.kt");
    }

    @Test
    @TestMetadata("inNestedInline.kt")
    public void testInNestedInline() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/inNestedInline.kt");
    }

    @Test
    @TestMetadata("inlineClasses.kt")
    public void testInlineClasses() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/inlineClasses.kt");
    }

    @Test
    @TestMetadata("intersectionType.kt")
    public void testIntersectionType() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/intersectionType.kt");
    }

    @Test
    @TestMetadata("ktype1_anonymousObject.kt")
    public void testKtype1_anonymousObject() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/ktype1_anonymousObject.kt");
    }

    @Test
    @TestMetadata("localClass.kt")
    public void testLocalClass() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/localClass.kt");
    }

    @Test
    @TestMetadata("manyTypeArguments.kt")
    public void testManyTypeArguments() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/manyTypeArguments.kt");
    }

    @Test
    @TestMetadata("mfvc.kt")
    public void testMfvc() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/mfvc.kt");
    }

    @Test
    @TestMetadata("multiModuleNullCheck.kt")
    public void testMultiModuleNullCheck() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/multiModuleNullCheck.kt");
    }

    @Test
    @TestMetadata("multipleLayers.kt")
    public void testMultipleLayers() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/multipleLayers.kt");
    }

    @Test
    @TestMetadata("mutableCollections.kt")
    public void testMutableCollections() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/mutableCollections.kt");
    }

    @Test
    @TestMetadata("nothing.kt")
    public void testNothing() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/nothing.kt");
    }

    @Test
    @TestMetadata("primitiveJavaTypes.kt")
    public void testPrimitiveJavaTypes() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/primitiveJavaTypes.kt");
    }

    @Test
    @TestMetadata("rawRecursiveType.kt")
    public void testRawRecursiveType() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/rawRecursiveType.kt");
    }

    @Test
    @TestMetadata("rawTypes.kt")
    public void testRawTypes() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/rawTypes.kt");
    }

    @Test
    @TestMetadata("reifiedAsNestedArgument.kt")
    public void testReifiedAsNestedArgument() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/reifiedAsNestedArgument.kt");
    }

    @Test
    @TestMetadata("typeAliasedType.kt")
    public void testTypeAliasedType() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/typeAliasedType.kt");
    }

    @Test
    @TestMetadata("typeOfCapturedStar.kt")
    public void testTypeOfCapturedStar() {
      runTest("compiler/testData/codegen/box/reflection/typeOf/typeOfCapturedStar.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/js")
    @TestDataPath("$PROJECT_ROOT")
    public class Js {
      @Test
      public void testAllFilesPresentInJs() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/js"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("classes.kt")
      public void testClasses() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/js/classes.kt");
      }

      @Test
      @TestMetadata("inlineClasses.kt")
      public void testInlineClasses() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/js/inlineClasses.kt");
      }

      @Test
      @TestMetadata("kType.kt")
      public void testKType() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/js/kType.kt");
      }

      @Test
      @TestMetadata("manyTypeArguments.kt")
      public void testManyTypeArguments() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/js/manyTypeArguments.kt");
      }

      @Test
      @TestMetadata("multipleLayers.kt")
      public void testMultipleLayers() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/js/multipleLayers.kt");
      }

      @Test
      @TestMetadata("multipleModules.kt")
      public void testMultipleModules() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/js/multipleModules.kt");
      }

      @Test
      @TestMetadata("typeOfCapturedStar.kt")
      public void testTypeOfCapturedStar() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/js/typeOfCapturedStar.kt");
      }

      @Test
      @TestMetadata("typeOfReifiedUnit.kt")
      public void testTypeOfReifiedUnit() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/js/typeOfReifiedUnit.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/noReflect")
    @TestDataPath("$PROJECT_ROOT")
    public class NoReflect {
      @Test
      public void testAllFilesPresentInNoReflect() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/noReflect"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("annotatedType.kt")
      public void testAnnotatedType() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/annotatedType.kt");
      }

      @Test
      @TestMetadata("classes.kt")
      public void testClasses() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/classes.kt");
      }

      @Test
      @TestMetadata("flexibleTypes.kt")
      public void testFlexibleTypes() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/flexibleTypes.kt");
      }

      @Test
      @TestMetadata("inlineClasses.kt")
      public void testInlineClasses() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/inlineClasses.kt");
      }

      @Test
      @TestMetadata("mfvc.kt")
      public void testMfvc() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/mfvc.kt");
      }

      @Test
      @TestMetadata("mutableCollections.kt")
      public void testMutableCollections() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/mutableCollections.kt");
      }

      @Test
      @TestMetadata("nothing.kt")
      public void testNothing() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nothing.kt");
      }

      @Test
      @TestMetadata("primitiveJavaTypes.kt")
      public void testPrimitiveJavaTypes() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/primitiveJavaTypes.kt");
      }

      @Test
      @TestMetadata("rawTypes.kt")
      public void testRawTypes() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/rawTypes.kt");
      }

      @Test
      @TestMetadata("typeReferenceEqualsHashCode.kt")
      public void testTypeReferenceEqualsHashCode() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/typeReferenceEqualsHashCode.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class NonReifiedTypeParameters {
        @Test
        public void testAllFilesPresentInNonReifiedTypeParameters() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("defaultUpperBound.kt")
        public void testDefaultUpperBound() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/defaultUpperBound.kt");
        }

        @Test
        @TestMetadata("equalsOnClassParameters.kt")
        public void testEqualsOnClassParameters() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/equalsOnClassParameters.kt");
        }

        @Test
        @TestMetadata("equalsOnFunctionParameters.kt")
        public void testEqualsOnFunctionParameters() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/equalsOnFunctionParameters.kt");
        }

        @Test
        @TestMetadata("innerGeneric.kt")
        public void testInnerGeneric() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/innerGeneric.kt");
        }

        @Test
        @TestMetadata("simpleClassParameter.kt")
        public void testSimpleClassParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simpleClassParameter.kt");
        }

        @Test
        @TestMetadata("simpleFunctionParameter.kt")
        public void testSimpleFunctionParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simpleFunctionParameter.kt");
        }

        @Test
        @TestMetadata("simplePropertyParameter.kt")
        public void testSimplePropertyParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simplePropertyParameter.kt");
        }

        @Test
        @TestMetadata("upperBoundUsesOuterClassParameter.kt")
        public void testUpperBoundUsesOuterClassParameter() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/upperBoundUsesOuterClassParameter.kt");
        }

        @Test
        @TestMetadata("upperBounds.kt")
        public void testUpperBounds() {
          runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/upperBounds.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class NonReifiedTypeParameters {
      @Test
      public void testAllFilesPresentInNonReifiedTypeParameters() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("defaultUpperBound.kt")
      public void testDefaultUpperBound() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/defaultUpperBound.kt");
      }

      @Test
      @TestMetadata("equalsOnClassParameters.kt")
      public void testEqualsOnClassParameters() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnClassParameters.kt");
      }

      @Test
      @TestMetadata("equalsOnClassParametersWithReflectAPI.kt")
      public void testEqualsOnClassParametersWithReflectAPI() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnClassParametersWithReflectAPI.kt");
      }

      @Test
      @TestMetadata("equalsOnFunctionParameters.kt")
      public void testEqualsOnFunctionParameters() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnFunctionParameters.kt");
      }

      @Test
      @TestMetadata("innerGeneric.kt")
      public void testInnerGeneric() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/innerGeneric.kt");
      }

      @Test
      @TestMetadata("insideInlineLambda_class.kt")
      public void testInsideInlineLambda_class() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/insideInlineLambda_class.kt");
      }

      @Test
      @TestMetadata("insideInlineLambda_indy.kt")
      public void testInsideInlineLambda_indy() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/insideInlineLambda_indy.kt");
      }

      @Test
      @TestMetadata("insideNonInlineLambda_class.kt")
      public void testInsideNonInlineLambda_class() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/insideNonInlineLambda_class.kt");
      }

      @Test
      @TestMetadata("insideNonInlineLambda_indy.kt")
      public void testInsideNonInlineLambda_indy() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/insideNonInlineLambda_indy.kt");
      }

      @Test
      @TestMetadata("recursiveBoundWithInline.kt")
      public void testRecursiveBoundWithInline() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/recursiveBoundWithInline.kt");
      }

      @Test
      @TestMetadata("recursiveBoundWithoutInline.kt")
      public void testRecursiveBoundWithoutInline() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/recursiveBoundWithoutInline.kt");
      }

      @Test
      @TestMetadata("simpleClassParameter.kt")
      public void testSimpleClassParameter() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simpleClassParameter.kt");
      }

      @Test
      @TestMetadata("simpleFunctionParameter.kt")
      public void testSimpleFunctionParameter() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simpleFunctionParameter.kt");
      }

      @Test
      @TestMetadata("simplePropertyParameter.kt")
      public void testSimplePropertyParameter() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simplePropertyParameter.kt");
      }

      @Test
      @TestMetadata("starProjectionInUpperBound.kt")
      public void testStarProjectionInUpperBound() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/starProjectionInUpperBound.kt");
      }

      @Test
      @TestMetadata("typeParameterFlags.kt")
      public void testTypeParameterFlags() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/typeParameterFlags.kt");
      }

      @Test
      @TestMetadata("upperBoundUsesOuterClassParameter.kt")
      public void testUpperBoundUsesOuterClassParameter() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/upperBoundUsesOuterClassParameter.kt");
      }

      @Test
      @TestMetadata("upperBounds.kt")
      public void testUpperBounds() {
        runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/upperBounds.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/typeParameters")
  @TestDataPath("$PROJECT_ROOT")
  public class TypeParameters {
    @Test
    public void testAllFilesPresentInTypeParameters() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeParameters"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("declarationSiteVariance.kt")
    public void testDeclarationSiteVariance() {
      runTest("compiler/testData/codegen/box/reflection/typeParameters/declarationSiteVariance.kt");
    }

    @Test
    @TestMetadata("innerGeneric.kt")
    public void testInnerGeneric() {
      runTest("compiler/testData/codegen/box/reflection/typeParameters/innerGeneric.kt");
    }

    @Test
    @TestMetadata("innerGenericJava.kt")
    public void testInnerGenericJava() {
      runTest("compiler/testData/codegen/box/reflection/typeParameters/innerGenericJava.kt");
    }

    @Test
    @TestMetadata("javaGenericTypeConstructor.kt")
    public void testJavaGenericTypeConstructor() {
      runTest("compiler/testData/codegen/box/reflection/typeParameters/javaGenericTypeConstructor.kt");
    }

    @Test
    @TestMetadata("typeParametersAndNames.kt")
    public void testTypeParametersAndNames() {
      runTest("compiler/testData/codegen/box/reflection/typeParameters/typeParametersAndNames.kt");
    }

    @Test
    @TestMetadata("upperBounds.kt")
    public void testUpperBounds() {
      runTest("compiler/testData/codegen/box/reflection/typeParameters/upperBounds.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/reflection/types")
  @TestDataPath("$PROJECT_ROOT")
  public class Types {
    @Test
    public void testAllFilesPresentInTypes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("classifierIsClass.kt")
    public void testClassifierIsClass() {
      runTest("compiler/testData/codegen/box/reflection/types/classifierIsClass.kt");
    }

    @Test
    @TestMetadata("classifierIsTypeParameter.kt")
    public void testClassifierIsTypeParameter() {
      runTest("compiler/testData/codegen/box/reflection/types/classifierIsTypeParameter.kt");
    }

    @Test
    @TestMetadata("classifiersOfBuiltInTypes.kt")
    public void testClassifiersOfBuiltInTypes() {
      runTest("compiler/testData/codegen/box/reflection/types/classifiersOfBuiltInTypes.kt");
    }

    @Test
    @TestMetadata("equalsForClassAndTypeParameterWithSameFqName.kt")
    public void testEqualsForClassAndTypeParameterWithSameFqName() {
      runTest("compiler/testData/codegen/box/reflection/types/equalsForClassAndTypeParameterWithSameFqName.kt");
    }

    @Test
    @TestMetadata("functionTypes.kt")
    public void testFunctionTypes() {
      runTest("compiler/testData/codegen/box/reflection/types/functionTypes.kt");
    }

    @Test
    @TestMetadata("innerGenericArguments.kt")
    public void testInnerGenericArguments() {
      runTest("compiler/testData/codegen/box/reflection/types/innerGenericArguments.kt");
    }

    @Test
    @TestMetadata("jvmErasureOfClass.kt")
    public void testJvmErasureOfClass() {
      runTest("compiler/testData/codegen/box/reflection/types/jvmErasureOfClass.kt");
    }

    @Test
    @TestMetadata("jvmErasureOfTypeParameter.kt")
    public void testJvmErasureOfTypeParameter() {
      runTest("compiler/testData/codegen/box/reflection/types/jvmErasureOfTypeParameter.kt");
    }

    @Test
    @TestMetadata("platformTypeClassifier.kt")
    public void testPlatformTypeClassifier() {
      runTest("compiler/testData/codegen/box/reflection/types/platformTypeClassifier.kt");
    }

    @Test
    @TestMetadata("platformTypeNotEqualToKotlinType.kt")
    public void testPlatformTypeNotEqualToKotlinType() {
      runTest("compiler/testData/codegen/box/reflection/types/platformTypeNotEqualToKotlinType.kt");
    }

    @Test
    @TestMetadata("platformTypeToString.kt")
    public void testPlatformTypeToString() {
      runTest("compiler/testData/codegen/box/reflection/types/platformTypeToString.kt");
    }

    @Test
    @TestMetadata("typeAliasedType.kt")
    public void testTypeAliasedType() {
      runTest("compiler/testData/codegen/box/reflection/types/typeAliasedType.kt");
    }

    @Test
    @TestMetadata("typeAliasedTypeInSupertype.kt")
    public void testTypeAliasedTypeInSupertype() {
      runTest("compiler/testData/codegen/box/reflection/types/typeAliasedTypeInSupertype.kt");
    }

    @Test
    @TestMetadata("typeArguments.kt")
    public void testTypeArguments() {
      runTest("compiler/testData/codegen/box/reflection/types/typeArguments.kt");
    }

    @Test
    @TestMetadata("useSiteVariance.kt")
    public void testUseSiteVariance() {
      runTest("compiler/testData/codegen/box/reflection/types/useSiteVariance.kt");
    }

    @Test
    @TestMetadata("withNullability.kt")
    public void testWithNullability() {
      runTest("compiler/testData/codegen/box/reflection/types/withNullability.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/types/createType")
    @TestDataPath("$PROJECT_ROOT")
    public class CreateType {
      @Test
      public void testAllFilesPresentInCreateType() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/createType"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/codegen/box/reflection/types/createType/annotations.kt");
      }

      @Test
      @TestMetadata("equality.kt")
      public void testEquality() {
        runTest("compiler/testData/codegen/box/reflection/types/createType/equality.kt");
      }

      @Test
      @TestMetadata("innerGeneric.kt")
      public void testInnerGeneric() {
        runTest("compiler/testData/codegen/box/reflection/types/createType/innerGeneric.kt");
      }

      @Test
      @TestMetadata("simpleCreateType.kt")
      public void testSimpleCreateType() {
        runTest("compiler/testData/codegen/box/reflection/types/createType/simpleCreateType.kt");
      }

      @Test
      @TestMetadata("typeParameter.kt")
      public void testTypeParameter() {
        runTest("compiler/testData/codegen/box/reflection/types/createType/typeParameter.kt");
      }

      @Test
      @TestMetadata("wrongNumberOfArguments.kt")
      public void testWrongNumberOfArguments() {
        runTest("compiler/testData/codegen/box/reflection/types/createType/wrongNumberOfArguments.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection/types/subtyping")
    @TestDataPath("$PROJECT_ROOT")
    public class Subtyping {
      @Test
      public void testAllFilesPresentInSubtyping() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/subtyping"), Pattern.compile("^(.+)\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("collections.kt")
      public void testCollections() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/collections.kt");
      }

      @Test
      @TestMetadata("flexibleArrayElementVariance.kt")
      public void testFlexibleArrayElementVariance() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/flexibleArrayElementVariance.kt");
      }

      @Test
      @TestMetadata("innerGenericCapturedType.kt")
      public void testInnerGenericCapturedType() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/innerGenericCapturedType.kt");
      }

      @Test
      @TestMetadata("nestedGenericCapturedType.kt")
      public void testNestedGenericCapturedType() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/nestedGenericCapturedType.kt");
      }

      @Test
      @TestMetadata("platformType.kt")
      public void testPlatformType() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/platformType.kt");
      }

      @Test
      @TestMetadata("rawType.kt")
      public void testRawType() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/rawType.kt");
      }

      @Test
      @TestMetadata("simpleGenericTypes.kt")
      public void testSimpleGenericTypes() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/simpleGenericTypes.kt");
      }

      @Test
      @TestMetadata("simpleSubtypeSupertype.kt")
      public void testSimpleSubtypeSupertype() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/simpleSubtypeSupertype.kt");
      }

      @Test
      @TestMetadata("typeProjection.kt")
      public void testTypeProjection() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/typeProjection.kt");
      }

      @Test
      @TestMetadata("variance.kt")
      public void testVariance() {
        runTest("compiler/testData/codegen/box/reflection/types/subtyping/variance.kt");
      }
    }
  }
}
