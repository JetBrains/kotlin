/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package templates

import generators.COMMON_AUTOGENERATED_WARNING
import java.io.File
import java.io.FileWriter

data class PlatformSourceFile(
        val platform: Platform,
        val sourceFile: SourceFile
)

fun Sequence<MemberTemplate>.groupByFileAndWrite(
        fileNameBuilder: (PlatformSourceFile) -> File
) {
    val groupedMembers = map { it.instantiate() }.flatten().groupBy {
        PlatformSourceFile(it.platform, it.sourceFile)
    }

    for ((psf, members) in groupedMembers) {
        val file = fileNameBuilder(psf)
        members.writeTo(file, psf)
    }
}

fun List<MemberBuilder>.writeTo(file: File, platformSource: PlatformSourceFile) {
    val (platform, sourceFile) = platformSource
    println("Generating file: $file")
    file.parentFile.mkdirs()
    FileWriter(file).use { writer ->
        if (sourceFile.multifile) {
            writer.appendln("@file:kotlin.jvm.JvmMultifileClass")
        }

        writer.appendln("@file:kotlin.jvm.JvmName(\"${sourceFile.jvmClassName}\")")
        if (platform == Platform.JVM)
            writer.appendln("@file:kotlin.jvm.JvmVersion")
        writer.appendln()

        writer.append("package ${sourceFile.packageName ?: "kotlin"}\n\n")
        writer.append("${COMMON_AUTOGENERATED_WARNING}\n\n")
        if (platform == Platform.JS) {
            writer.appendln("import kotlin.js.*")
            if (sourceFile == SourceFile.Arrays) {
                writer.appendln("import primitiveArrayConcat")
                writer.appendln("import withType")
            }
        }
        writer.appendln("import kotlin.comparisons.*")

        if (platform != Platform.Common && sourceFile == SourceFile.Sequences) {
            writer.appendln("import kotlin.coroutines.experimental.*")
        }

        writer.appendln()

        for (f in this) {
            f.build(writer)
        }
    }
}
