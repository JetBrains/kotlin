package

public final class OuterClass</*0*/ T1> {
    public constructor OuterClass</*0*/ T1>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final class NestedClass</*0*/ T2> {
        public constructor NestedClass</*0*/ T2>()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
    public typealias NestedType</*0*/ T>  = OuterClass.NestedClass<T>
}
public typealias ON1</*0*/ T1, /*1*/ T2>  = [ERROR : NestedClass]<T1, T2>
public typealias ON2</*0*/ T1, /*1*/ T2>  = [ERROR : NestedType]<T1, T2>
public typealias ON3</*0*/ T2>  = OuterClass.NestedType<T2>
