/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.checkers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.InnerTestClasses;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/diagnostics/testsWithStdLib")
@TestDataPath("$PROJECT_ROOT")
@InnerTestClasses({
        JetDiagnosticsTestWithStdLibGenerated.Annotations.class,
        JetDiagnosticsTestWithStdLibGenerated.CallableReference.class,
        JetDiagnosticsTestWithStdLibGenerated.ClassLiteral.class,
        JetDiagnosticsTestWithStdLibGenerated.DuplicateJvmSignature.class,
        JetDiagnosticsTestWithStdLibGenerated.FunctionLiterals.class,
        JetDiagnosticsTestWithStdLibGenerated.Inference.class,
        JetDiagnosticsTestWithStdLibGenerated.KotlinSignature.class,
        JetDiagnosticsTestWithStdLibGenerated.Native.class,
        JetDiagnosticsTestWithStdLibGenerated.Reified.class,
        JetDiagnosticsTestWithStdLibGenerated.Resolve.class,
        JetDiagnosticsTestWithStdLibGenerated.Varargs.class,
})
@RunWith(JUnit3RunnerWithInners.class)
public class JetDiagnosticsTestWithStdLibGenerated extends AbstractJetDiagnosticsTestWithStdLib {
    public void testAllFilesPresentInTestsWithStdLib() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @InnerTestClasses({
            Annotations.AnnotationApplicability.class,
            Annotations.AnnotationParameterMustBeConstant.class,
            Annotations.AnnotationWithVarargParameter.class,
            Annotations.PlatformStatic.class,
    })
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotations extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInAnnotations() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("ClassObjectAnnotatedWithItsClass.kt")
        public void testClassObjectAnnotatedWithItsClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/ClassObjectAnnotatedWithItsClass.kt");
            doTest(fileName);
        }

        @TestMetadata("qualifiedCallValue.kt")
        public void testQualifiedCallValue() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/qualifiedCallValue.kt");
            doTest(fileName);
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AnnotationApplicability extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInAnnotationApplicability() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("illegalPlatformName.kt")
            public void testIllegalPlatformName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/illegalPlatformName.kt");
                doTest(fileName);
            }

            @TestMetadata("platformName.kt")
            public void testPlatformName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/platformName.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AnnotationParameterMustBeConstant extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInAnnotationParameterMustBeConstant() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/array.kt");
                doTest(fileName);
            }

            @TestMetadata("classLiteral.kt")
            public void testClassLiteral() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/classLiteral.kt");
                doTest(fileName);
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/simple.kt");
                doTest(fileName);
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/vararg.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class AnnotationWithVarargParameter extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInAnnotationWithVarargParameter() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("javaAnnotationWithVarargArgument.kt")
            public void testJavaAnnotationWithVarargArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter/javaAnnotationWithVarargArgument.kt");
                doTest(fileName);
            }

            @TestMetadata("kotlinAnnotationWithVarargArgument.kt")
            public void testKotlinAnnotationWithVarargArgument() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter/kotlinAnnotationWithVarargArgument.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class PlatformStatic extends AbstractJetDiagnosticsTestWithStdLib {
            public void testAllFilesPresentInPlatformStatic() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("constructors.kt")
            public void testConstructors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/constructors.kt");
                doTest(fileName);
            }

            @TestMetadata("finalAndAbstract.kt")
            public void testFinalAndAbstract() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/finalAndAbstract.kt");
                doTest(fileName);
            }

            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/functions.kt");
                doTest(fileName);
            }

            @TestMetadata("localFun.kt")
            public void testLocalFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/localFun.kt");
                doTest(fileName);
            }

            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/platformStatic/property.kt");
                doTest(fileName);
            }
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    @InnerTestClasses({
            CallableReference.Function.class,
            CallableReference.Property.class,
    })
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CallableReference extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInCallableReference() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/callableReference"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("unused.kt")
        public void testUnused() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/unused.kt");
            doTest(fileName);
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Function extends AbstractJetDiagnosticsTestWithStdLib {
            @TestMetadata("abstractClassConstructors.kt")
            public void testAbstractClassConstructors() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/abstractClassConstructors.kt");
                doTest(fileName);
            }

            public void testAllFilesPresentInFunction() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/callableReference/function"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("ambiguityTopLevelVsTopLevel.kt")
            public void testAmbiguityTopLevelVsTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/ambiguityTopLevelVsTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("callableRefrenceOnNestedObject.kt")
            public void testCallableRefrenceOnNestedObject() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/callableRefrenceOnNestedObject.kt");
                doTest(fileName);
            }

            @TestMetadata("constructorFromClass.kt")
            public void testConstructorFromClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/constructorFromClass.kt");
                doTest(fileName);
            }

            @TestMetadata("constructorFromExtension.kt")
            public void testConstructorFromExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/constructorFromExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("constructorFromExtensionInClass.kt")
            public void testConstructorFromExtensionInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/constructorFromExtensionInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("constructorFromTopLevel.kt")
            public void testConstructorFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/constructorFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("differentPackageClass.kt")
            public void testDifferentPackageClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/differentPackageClass.kt");
                doTest(fileName);
            }

            @TestMetadata("differentPackageExtension.kt")
            public void testDifferentPackageExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/differentPackageExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("differentPackageTopLevel.kt")
            public void testDifferentPackageTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/differentPackageTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("empty.kt")
            public void testEmpty() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/empty.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionFromClass.kt")
            public void testExtensionFromClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/extensionFromClass.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionFromExtension.kt")
            public void testExtensionFromExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/extensionFromExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionFromExtensionInClass.kt")
            public void testExtensionFromExtensionInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/extensionFromExtensionInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionFromTopLevel.kt")
            public void testExtensionFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/extensionFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionInClassDisallowed.kt")
            public void testExtensionInClassDisallowed() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/extensionInClassDisallowed.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionOnNullable.kt")
            public void testExtensionOnNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/extensionOnNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("genericClassFromTopLevel.kt")
            public void testGenericClassFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/genericClassFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("importedInnerConstructor.kt")
            public void testImportedInnerConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/importedInnerConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("innerConstructorFromClass.kt")
            public void testInnerConstructorFromClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/innerConstructorFromClass.kt");
                doTest(fileName);
            }

            @TestMetadata("innerConstructorFromExtension.kt")
            public void testInnerConstructorFromExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/innerConstructorFromExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("innerConstructorFromTopLevel.kt")
            public void testInnerConstructorFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/innerConstructorFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("javaStaticMethod.kt")
            public void testJavaStaticMethod() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/javaStaticMethod.kt");
                doTest(fileName);
            }

            @TestMetadata("lhsNotAClass.kt")
            public void testLhsNotAClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/lhsNotAClass.kt");
                doTest(fileName);
            }

            @TestMetadata("localConstructor.kt")
            public void testLocalConstructor() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/localConstructor.kt");
                doTest(fileName);
            }

            @TestMetadata("localConstructorFromExtensionInLocalClass.kt")
            public void testLocalConstructorFromExtensionInLocalClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/localConstructorFromExtensionInLocalClass.kt");
                doTest(fileName);
            }

            @TestMetadata("localConstructorFromLocalClass.kt")
            public void testLocalConstructorFromLocalClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/localConstructorFromLocalClass.kt");
                doTest(fileName);
            }

            @TestMetadata("localConstructorFromLocalExtension.kt")
            public void testLocalConstructorFromLocalExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/localConstructorFromLocalExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("localNamedFun.kt")
            public void testLocalNamedFun() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/localNamedFun.kt");
                doTest(fileName);
            }

            @TestMetadata("localNamedFunFromExtensionInLocalClass.kt")
            public void testLocalNamedFunFromExtensionInLocalClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/localNamedFunFromExtensionInLocalClass.kt");
                doTest(fileName);
            }

            @TestMetadata("localNamedFunFromLocalClass.kt")
            public void testLocalNamedFunFromLocalClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/localNamedFunFromLocalClass.kt");
                doTest(fileName);
            }

            @TestMetadata("localNamedFunFromLocalExtension.kt")
            public void testLocalNamedFunFromLocalExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/localNamedFunFromLocalExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("longQualifiedName.kt")
            public void testLongQualifiedName() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/longQualifiedName.kt");
                doTest(fileName);
            }

            @TestMetadata("longQualifiedNameGeneric.kt")
            public void testLongQualifiedNameGeneric() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/longQualifiedNameGeneric.kt");
                doTest(fileName);
            }

            @TestMetadata("memberFromClass.kt")
            public void testMemberFromClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/memberFromClass.kt");
                doTest(fileName);
            }

            @TestMetadata("memberFromExtension.kt")
            public void testMemberFromExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/memberFromExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("memberFromExtensionInClass.kt")
            public void testMemberFromExtensionInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/memberFromExtensionInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("memberFromTopLevel.kt")
            public void testMemberFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/memberFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedConstructorFromClass.kt")
            public void testNestedConstructorFromClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/nestedConstructorFromClass.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedConstructorFromExtension.kt")
            public void testNestedConstructorFromExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/nestedConstructorFromExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("nestedConstructorFromTopLevel.kt")
            public void testNestedConstructorFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/nestedConstructorFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("noAmbiguityLocalVsTopLevel.kt")
            public void testNoAmbiguityLocalVsTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/noAmbiguityLocalVsTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("noAmbiguityMemberVsExtension.kt")
            public void testNoAmbiguityMemberVsExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/noAmbiguityMemberVsExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("noAmbiguityMemberVsTopLevel.kt")
            public void testNoAmbiguityMemberVsTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/noAmbiguityMemberVsTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("renameOnImport.kt")
            public void testRenameOnImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/renameOnImport.kt");
                doTest(fileName);
            }

            @TestMetadata("topLevelFromClass.kt")
            public void testTopLevelFromClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/topLevelFromClass.kt");
                doTest(fileName);
            }

            @TestMetadata("topLevelFromExtension.kt")
            public void testTopLevelFromExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/topLevelFromExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("topLevelFromExtensionInClass.kt")
            public void testTopLevelFromExtensionInClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/topLevelFromExtensionInClass.kt");
                doTest(fileName);
            }

            @TestMetadata("topLevelFromTopLevel.kt")
            public void testTopLevelFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/topLevelFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("unresolved.kt")
            public void testUnresolved() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/function/unresolved.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Property extends AbstractJetDiagnosticsTestWithStdLib {
            @TestMetadata("abstractPropertyViaSubclasses.kt")
            public void testAbstractPropertyViaSubclasses() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/abstractPropertyViaSubclasses.kt");
                doTest(fileName);
            }

            @TestMetadata("accessViaSubclass.kt")
            public void testAccessViaSubclass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/accessViaSubclass.kt");
                doTest(fileName);
            }

            public void testAllFilesPresentInProperty() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/callableReference/property"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("classFromClass.kt")
            public void testClassFromClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/classFromClass.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionFromClass.kt")
            public void testExtensionFromClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/extensionFromClass.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionFromTopLevel.kt")
            public void testExtensionFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/extensionFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("extensionPropertyOnNullable.kt")
            public void testExtensionPropertyOnNullable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/extensionPropertyOnNullable.kt");
                doTest(fileName);
            }

            @TestMetadata("genericClass.kt")
            public void testGenericClass() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/genericClass.kt");
                doTest(fileName);
            }

            @TestMetadata("javaInstanceField.kt")
            public void testJavaInstanceField() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/javaInstanceField.kt");
                doTest(fileName);
            }

            @TestMetadata("javaStaticFieldViaImport.kt")
            public void testJavaStaticFieldViaImport() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/javaStaticFieldViaImport.kt");
                doTest(fileName);
            }

            @TestMetadata("localVariable.kt")
            public void testLocalVariable() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/localVariable.kt");
                doTest(fileName);
            }

            @TestMetadata("memberFromExtension.kt")
            public void testMemberFromExtension() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/memberFromExtension.kt");
                doTest(fileName);
            }

            @TestMetadata("memberFromTopLevel.kt")
            public void testMemberFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/memberFromTopLevel.kt");
                doTest(fileName);
            }

            @TestMetadata("samePriorityForFunctionsAndProperties.kt")
            public void testSamePriorityForFunctionsAndProperties() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/samePriorityForFunctionsAndProperties.kt");
                doTest(fileName);
            }

            @TestMetadata("topLevelFromTopLevel.kt")
            public void testTopLevelFromTopLevel() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/callableReference/property/topLevelFromTopLevel.kt");
                doTest(fileName);
            }
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/classLiteral")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClassLiteral extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInClassLiteral() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/classLiteral"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("genericClasses.kt")
        public void testGenericClasses() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/classLiteral/genericClasses.kt");
            doTest(fileName);
        }

        @TestMetadata("nonClassesOnLHS.kt")
        public void testNonClassesOnLHS() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/classLiteral/nonClassesOnLHS.kt");
            doTest(fileName);
        }

        @TestMetadata("simpleClassLiteral.kt")
        public void testSimpleClassLiteral() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/classLiteral/simpleClassLiteral.kt");
            doTest(fileName);
        }

        @TestMetadata("unresolvedClass.kt")
        public void testUnresolvedClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/classLiteral/unresolvedClass.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DuplicateJvmSignature extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInDuplicateJvmSignature() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("delegatedProperty.kt")
        public void testDelegatedProperty() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/delegatedProperty.kt");
            doTest(fileName);
        }

        @TestMetadata("jvmOverloads.kt")
        public void testJvmOverloads() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/jvmOverloads.kt");
            doTest(fileName);
        }

        @TestMetadata("platformNames.kt")
        public void testPlatformNames() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/platformNames.kt");
            doTest(fileName);
        }

        @TestMetadata("platformNamesDuplicate.kt")
        public void testPlatformNamesDuplicate() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/platformNamesDuplicate.kt");
            doTest(fileName);
        }

        @TestMetadata("platformStaticInClassObject.kt")
        public void testPlatformStaticInClassObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/platformStaticInClassObject.kt");
            doTest(fileName);
        }

        @TestMetadata("platformStaticInObject.kt")
        public void testPlatformStaticInObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/platformStaticInObject.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/functionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionLiterals extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInFunctionLiterals() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/functionLiterals"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("pseudocodeMemoryOverhead.kt")
        public void testPseudocodeMemoryOverhead() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/functionLiterals/pseudocodeMemoryOverhead.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inference extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInInference() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/inference"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("arrayConstructor.kt")
        public void testArrayConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/arrayConstructor.kt");
            doTest(fileName);
        }

        @TestMetadata("kt1558.kt")
        public void testKt1558() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/kt1558.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/kotlinSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class KotlinSignature extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInKotlinSignature() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/kotlinSignature"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("constructorNamedArguments.kt")
        public void testConstructorNamedArguments() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/kotlinSignature/constructorNamedArguments.kt");
            doTest(fileName);
        }

        @TestMetadata("parameterNames.kt")
        public void testParameterNames() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/kotlinSignature/parameterNames.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/native")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Native extends AbstractJetDiagnosticsTestWithStdLib {
        @TestMetadata("abstract.kt")
        public void testAbstract() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/abstract.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInNative() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/native"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("body.kt")
        public void testBody() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/body.kt");
            doTest(fileName);
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/constructor.kt");
            doTest(fileName);
        }

        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/inline.kt");
            doTest(fileName);
        }

        @TestMetadata("noBody.kt")
        public void testNoBody() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/noBody.kt");
            doTest(fileName);
        }

        @TestMetadata("override.kt")
        public void testOverride() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/override.kt");
            doTest(fileName);
        }

        @TestMetadata("reified.kt")
        public void testReified() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/reified.kt");
            doTest(fileName);
        }

        @TestMetadata("trait.kt")
        public void testTrait() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/native/trait.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/reified")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Reified extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInReified() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/reified"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("arrayConstruction.kt")
        public void testArrayConstruction() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/reified/arrayConstruction.kt");
            doTest(fileName);
        }

        @TestMetadata("arrayOfNullsReified.kt")
        public void testArrayOfNullsReified() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/reified/arrayOfNullsReified.kt");
            doTest(fileName);
        }

        @TestMetadata("nonCallableReiefied.kt")
        public void testNonCallableReiefied() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/reified/nonCallableReiefied.kt");
            doTest(fileName);
        }

        @TestMetadata("reifiedNothingSubstitution.kt")
        public void testReifiedNothingSubstitution() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/reified/reifiedNothingSubstitution.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Resolve extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInResolve() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/resolve"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("kt4711.kt")
        public void testKt4711() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve/kt4711.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Varargs extends AbstractJetDiagnosticsTestWithStdLib {
        public void testAllFilesPresentInVarargs() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/diagnostics/testsWithStdLib/varargs"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("kt3213.kt")
        public void testKt3213() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs/kt3213.kt");
            doTest(fileName);
        }

        @TestMetadata("kt4172j.kt")
        public void testKt4172j() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs/kt4172j.kt");
            doTest(fileName);
        }

        @TestMetadata("kt5534.kt")
        public void testKt5534() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs/kt5534.kt");
            doTest(fileName);
        }
    }
}
