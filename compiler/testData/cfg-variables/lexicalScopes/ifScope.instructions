== foo ==
fun foo() {
    "before"
    if (true) {
        val a = 1
    }
    else {
        val b = 2
    }
    "after"
}
---------------------
L0:
  1 <START>                                                                   INIT: in: {} out: {}
  2 mark({ "before" if (true) { val a = 1 } else { val b = 2 } "after" })
    mark("before")
    r("before") -> <v0>
    mark(if (true) { val a = 1 } else { val b = 2 })
    r(true) -> <v1>
    jf(L2|<v1>)
  3 mark({ val a = 1 })
    v(val a = 1)                                                              INIT: in: {} out: {}
    r(1) -> <v2>                                                              INIT: in: {} out: {}
    w(a|<v2>)                                                                 INIT: in: {} out: {}
  2 jmp(L3)                                                                   INIT: in: {} out: {}
L2 [else branch]:
  3 mark({ val b = 2 })
    v(val b = 2)                                                              INIT: in: {} out: {}
    r(2) -> <v3>                                                              INIT: in: {} out: {}
    w(b|<v3>)                                                                 INIT: in: {} out: {}
L3 ['if' expression result]:
  2 merge(if (true) { val a = 1 } else { val b = 2 }|!<v4>, !<v5>) -> <v6>    INIT: in: {} out: {}
    mark("after")
    r("after") -> <v7>
L1:
  1 <END>
error:
    <ERROR>
sink:
    <SINK>                                                                                            USE: in: {} out: {}
=====================
