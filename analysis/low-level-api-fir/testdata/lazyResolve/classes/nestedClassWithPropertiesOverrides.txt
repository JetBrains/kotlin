
RAW_FIR:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [RAW_FIR] interface OV : R|kotlin/Any| {
        public? final? [RAW_FIR] val originalExpressions: A
            public? [RAW_FIR] [ContainingClassKey=OV] get(): A

        public? final? [RAW_FIR] class ResolveMe : OV {
            public? [RAW_FIR] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public? open? override [RAW_FIR] val originalExpressions: A
                public? [RAW_FIR] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

IMPORTS:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [RAW_FIR] interface OV : R|kotlin/Any| {
        public? final? [RAW_FIR] val originalExpressions: A
            public? [RAW_FIR] [ContainingClassKey=OV] get(): A

        public? final? [RAW_FIR] class ResolveMe : OV {
            public? [RAW_FIR] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public? open? override [RAW_FIR] val originalExpressions: A
                public? [RAW_FIR] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [RAW_FIR] interface OV : R|kotlin/Any| {
        public? final? [RAW_FIR] val originalExpressions: A
            public? [RAW_FIR] [ContainingClassKey=OV] get(): A

        public? final? [COMPILER_REQUIRED_ANNOTATIONS] class ResolveMe : OV {
            public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public? open? override [COMPILER_REQUIRED_ANNOTATIONS] val originalExpressions: A
                public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

COMPANION_GENERATION:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [RAW_FIR] interface OV : R|kotlin/Any| {
        public? final? [RAW_FIR] val originalExpressions: A
            public? [RAW_FIR] [ContainingClassKey=OV] get(): A

        public? final? [COMPANION_GENERATION] class ResolveMe : OV {
            public? [COMPANION_GENERATION] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public? open? override [COMPANION_GENERATION] val originalExpressions: A
                public? [COMPANION_GENERATION] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

SUPER_TYPES:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface OV : R|kotlin/Any| {
        public? final? [COMPILER_REQUIRED_ANNOTATIONS] val originalExpressions: A
            public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=OV] get(): A

        public? final? [SUPER_TYPES] class ResolveMe : R|OV| {
            public? [SUPER_TYPES] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public? open? override [SUPER_TYPES] val originalExpressions: A
                public? [SUPER_TYPES] [ContainingClassKey=ResolveMe] get(): A

        }

    }
    public? final? [RAW_FIR] class A : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

TYPES:
FILE: nestedClassWithPropertiesOverrides.kt
    public? final? [SUPER_TYPES] interface OV : R|kotlin/Any| {
        public? final? [SUPER_TYPES] val originalExpressions: A
            public? [SUPER_TYPES] [ContainingClassKey=OV] get(): A

        public? final? [TYPES] class ResolveMe : R|OV| {
            public? [TYPES] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public? open? override [TYPES] val originalExpressions: R|A|
                public? [TYPES] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] class A : R|kotlin/Any| {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

STATUS:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [SUPER_TYPES] interface OV : R|kotlin/Any| {
        public abstract [TYPES] val originalExpressions: R|A|
            public [TYPES] [ContainingClassKey=OV] get(): R|A|

        public final [STATUS] class ResolveMe : R|OV| {
            public [STATUS] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public final override [STATUS] val originalExpressions: R|A|
                public [STATUS] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] class A : R|kotlin/Any| {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [STATUS] interface OV : R|kotlin/Any| {
        public abstract [STATUS] val originalExpressions: R|A|
            public [STATUS] [ContainingClassKey=OV] get(): R|A|

        public final [ARGUMENTS_OF_ANNOTATIONS] class ResolveMe : R|OV| {
            public [ARGUMENTS_OF_ANNOTATIONS] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public final override [ARGUMENTS_OF_ANNOTATIONS] val originalExpressions: R|A|
                public [ARGUMENTS_OF_ANNOTATIONS] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] class A : R|kotlin/Any| {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

CONTRACTS:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [STATUS] interface OV : R|kotlin/Any| {
        public abstract [STATUS] val originalExpressions: R|A|
            public [STATUS] [ContainingClassKey=OV] get(): R|A|

        public final [CONTRACTS] class ResolveMe : R|OV| {
            public [CONTRACTS] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public final override [CONTRACTS] val originalExpressions: R|A|
                public [CONTRACTS] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] class A : R|kotlin/Any| {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [STATUS] interface OV : R|kotlin/Any| {
        public abstract [STATUS] val originalExpressions: R|A|
            public [STATUS] [ContainingClassKey=OV] get(): R|A|

        public final [IMPLICIT_TYPES_BODY_RESOLVE] class ResolveMe : R|OV| {
            public [IMPLICIT_TYPES_BODY_RESOLVE] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public final override [IMPLICIT_TYPES_BODY_RESOLVE] val originalExpressions: R|A|
                public [IMPLICIT_TYPES_BODY_RESOLVE] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] class A : R|kotlin/Any| {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [STATUS] interface OV : R|kotlin/Any| {
        public abstract [STATUS] val originalExpressions: R|A|
            public [STATUS] [ContainingClassKey=OV] get(): R|A|

        public final [ANNOTATIONS_ARGUMENTS_MAPPING] class ResolveMe : R|OV| {
            public [ANNOTATIONS_ARGUMENTS_MAPPING] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public final override [ANNOTATIONS_ARGUMENTS_MAPPING] val originalExpressions: R|A|
                public [ANNOTATIONS_ARGUMENTS_MAPPING] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] class A : R|kotlin/Any| {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [STATUS] interface OV : R|kotlin/Any| {
        public abstract [STATUS] val originalExpressions: R|A|
            public [STATUS] [ContainingClassKey=OV] get(): R|A|

        public final [EXPECT_ACTUAL_MATCHING] class ResolveMe : R|OV| {
            public [EXPECT_ACTUAL_MATCHING] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<<implicit>>()
            }

            public final override [EXPECT_ACTUAL_MATCHING] val originalExpressions: R|A|
                public [EXPECT_ACTUAL_MATCHING] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] class A : R|kotlin/Any| {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

BODY_RESOLVE:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [STATUS] interface OV : R|kotlin/Any| {
        public abstract [STATUS] val originalExpressions: R|A|
            public [STATUS] [ContainingClassKey=OV] get(): R|A|

        public final [BODY_RESOLVE] class ResolveMe : R|OV| {
            public [BODY_RESOLVE] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public final override [BODY_RESOLVE] val originalExpressions: R|A|
                public [BODY_RESOLVE] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] class A : R|kotlin/Any| {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }

FILE RAW TO BODY:
FILE: nestedClassWithPropertiesOverrides.kt
    public abstract [BODY_RESOLVE] interface OV : R|kotlin/Any| {
        public abstract [BODY_RESOLVE] val originalExpressions: R|A|
            public [BODY_RESOLVE] [ContainingClassKey=OV] get(): R|A|

        public final [BODY_RESOLVE] class ResolveMe : R|OV| {
            public [BODY_RESOLVE] [ContainingClassKey=ResolveMe] constructor(): R|OV.ResolveMe| {
                super<R|kotlin/Any|>()
            }

            public final override [BODY_RESOLVE] val originalExpressions: R|A|
                public [BODY_RESOLVE] [ContainingClassKey=ResolveMe] get(): R|A|

        }

    }
    public final [BODY_RESOLVE] class A : R|kotlin/Any| {
        public [BODY_RESOLVE] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
