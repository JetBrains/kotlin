package

public final class A</*0*/ T> {
    public constructor A</*0*/ T>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final inner class B</*0*/ F> /*captured type parameters: /*1*/ T*/ {
        public constructor B</*0*/ F>()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public final inner class C</*0*/ E> /*captured type parameters: /*1*/ F, /*2*/ T*/ {
            public constructor C</*0*/ E>()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public final inner class D /*captured type parameters: /*0*/ F, /*1*/ T*/ {
            public constructor D()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

            public final inner class Innermost</*0*/ X> /*captured type parameters: /*1*/ F, /*2*/ T*/ {
                public constructor Innermost</*0*/ X>()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
    }

    public final class Nested {
        public constructor Nested()
        public final val c: [ERROR : C]<kotlin.Int>?
        public final val d: [ERROR : D]?
        public final val innerMost: [ERROR : Innermost]<kotlin.String>?
        public final val x: [ERROR : B]<kotlin.String>?
        public final val y: [ERROR : C]<kotlin.String, kotlin.String>?
        public final val z: [ERROR : D]<kotlin.String>?
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
