//
// Source
// ------------------------------------------

import androidx.compose.runtime.*


open class Test {
    @Composable open fun foo(param: Int = remember { 0 }) {}
    @Composable open fun bar(param: Int = remember { 0 }): Int = param
}

class TestImpl : Test() {
    @Composable override fun foo(param: Int) {}
}

@Composable fun CallWithDefaults(test: Test) {
    test.foo()
    test.foo(0)
    test.bar()
    test.bar(0)
}

//
// Transformed IR
// ------------------------------------------

@StabilityInferred(parameters = 1)
open class Test {
  @Composable
  open fun foo(param: Int, %composer: Composer?, %changed: Int) {
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "C(foo):Test.kt")
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
    %composer.endReplaceGroup()
  }
  @Composable
  open fun bar(param: Int, %composer: Composer?, %changed: Int): Int {
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "C(bar):Test.kt")
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    val tmp0 = param
    if (isTraceInProgress()) {
      traceEventEnd()
    }
    %composer.endReplaceGroup()
    return tmp0
  }
  static val %stable: Int = 0
  class ComposeDefaultImpls {
    @Composable
    fun foo%default(param: Int, %this%: Test, %composer: Composer?, %changed: Int, %default: Int) {
      %composer = %composer.startRestartGroup(<>)
      sourceInformation(%composer, "C(foo%default)<rememb...>:Test.kt")
      val %dirty = %changed
      if (%default and 0b0001 != 0) {
        %dirty = %dirty or 0b0110
      } else if (%changed and 0b0110 == 0) {
        %dirty = %dirty or if (%composer.changed(param)) 0b0100 else 0b0010
      }
      if (%default and 0b0010 != 0) {
        %dirty = %dirty or 0b00110000
      } else if (%changed and 0b00110000 == 0) {
        %dirty = %dirty or if (%composer.changed(%this%)) 0b00100000 else 0b00010000
      }
      if (%dirty and 0b00010011 != 0b00010010 || !%composer.skipping) {
        if (%default and 0b0001 != 0) {
          param = <block>{
            sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
            val tmp0_group = %composer.cache(false) {
              0
            }
            sourceInformationMarkerEnd(%composer)
            tmp0_group
          }
        }
        if (isTraceInProgress()) {
          traceEventStart(<>, %dirty, -1, <>)
        }
        %this%.foo(param, %composer, 0b1110 and %dirty or 0b01110000 and %dirty)
        if (isTraceInProgress()) {
          traceEventEnd()
        }
      } else {
        %composer.skipToGroupEnd()
      }
      %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
        foo%default(param, %this%, %composer, updateChangedFlags(%changed or 0b0001), %default)
      }
    }
    @Composable
    fun bar%default(param: Int, %this%: Test, %composer: Composer?, %changed: Int, %default: Int): Int {
      sourceInformationMarkerStart(%composer, <>, "C(bar%default)<rememb...>:Test.kt")
      if (%default and 0b0001 != 0) {
        param = <block>{
          sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
          val tmp0_group = %composer.cache(false) {
            0
          }
          sourceInformationMarkerEnd(%composer)
          tmp0_group
        }
      }
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      %this%.bar(param, %composer, 0b1110 and %changed or 0b01110000 and %changed)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
      sourceInformationMarkerEnd(%composer)
    }
  }
}
@StabilityInferred(parameters = 1)
class TestImpl : Test {
  @Composable
  override fun foo(param: Int, %composer: Composer?, %changed: Int) {
    %composer.startReplaceGroup(<>)
    sourceInformation(%composer, "C(foo):Test.kt")
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
    %composer.endReplaceGroup()
  }
  static val %stable: Int = 0
}
@Composable
fun CallWithDefaults(test: Test, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(CallWithDefaults)<foo()>,<foo(0)>,<bar()>,<bar(0)>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(test)) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    foo%default(0, test, %composer, 0b01110000 and %dirty shl 0b0011, 0b0001)
    foo%default(0, test, %composer, 0b0110 or 0b01110000 and %dirty shl 0b0011, 0)
    bar%default(0, test, %composer, 0b01110000 and %dirty shl 0b0011, 0b0001)
    bar%default(0, test, %composer, 0b0110 or 0b01110000 and %dirty shl 0b0011, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    CallWithDefaults(test, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
