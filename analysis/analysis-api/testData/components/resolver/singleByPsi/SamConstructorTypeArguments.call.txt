KtNameReferenceExpression(18,28): 'Comparator'
  KaSuccessCallInfo:
    call = KaSimpleFunctionCall:
      argumentMapping = {
        { x, y -> 1 } -> (KaVariableSignature:
          name = function
          receiverType = null
          returnType = kotlin.Function2<ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin.Int, relevantFeature=JavaTypeParameterDefaultRepresentationWithDNN) kotlin.Int!, ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin.Int, relevantFeature=JavaTypeParameterDefaultRepresentationWithDNN) kotlin.Int!, kotlin.Int>
          symbol = function: kotlin.Function2<T!, T!, kotlin.Int>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = java.util.Comparator<ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin.Int, relevantFeature=JavaTypeParameterDefaultRepresentationWithDNN) kotlin.Int!>
          symbol = java/util/Comparator(function: kotlin.Function2<T!, T!, kotlin.Int>): java.util.Comparator<T>
          valueParameters = [
            KaVariableSignature:
              name = function
              receiverType = null
              returnType = kotlin.Function2<ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin.Int, relevantFeature=JavaTypeParameterDefaultRepresentationWithDNN) kotlin.Int!, ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin.Int, relevantFeature=JavaTypeParameterDefaultRepresentationWithDNN) kotlin.Int!, kotlin.Int>
              symbol = function: kotlin.Function2<T!, T!, kotlin.Int>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = java/util/Comparator
      typeArgumentsMapping = {
        T -> (ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin.Int, relevantFeature=JavaTypeParameterDefaultRepresentationWithDNN) kotlin.Int!)
      }