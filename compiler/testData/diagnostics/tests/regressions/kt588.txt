package

internal final class Test : java.lang.Thread {
    public constructor Test()
    invisible_fake final override /*1*/ /*fake_override*/ var blocker: [ERROR : Unresolved java classifier: Interruptible]!
    invisible_fake final override /*1*/ /*fake_override*/ val blockerLock: kotlin.Any!
    invisible_fake final override /*1*/ /*fake_override*/ var contextClassLoader: java.lang.ClassLoader!
    invisible_fake final override /*1*/ /*fake_override*/ var daemon: kotlin.Boolean
    invisible_fake final override /*1*/ /*fake_override*/ var eetop: kotlin.Long
    invisible_fake final override /*1*/ /*fake_override*/ var group: [ERROR : Unresolved java classifier: ThreadGroup]!
    invisible_fake final override /*1*/ /*fake_override*/ var inheritableThreadLocals: java.lang.ThreadLocal.ThreadLocalMap!
    invisible_fake final override /*1*/ /*fake_override*/ var inheritedAccessControlContext: [ERROR : Unresolved java classifier: AccessControlContext]!
    invisible_fake final override /*1*/ /*fake_override*/ var name: kotlin.CharArray!
    invisible_fake final override /*1*/ /*fake_override*/ var nativeParkEventPointer: kotlin.Long
    invisible_fake final override /*1*/ /*fake_override*/ var parkBlocker: kotlin.Any!
    invisible_fake final override /*1*/ /*fake_override*/ var priority: kotlin.Int
    invisible_fake final override /*1*/ /*fake_override*/ var single_step: kotlin.Boolean
    invisible_fake final override /*1*/ /*fake_override*/ var stackSize: kotlin.Long
    invisible_fake final override /*1*/ /*fake_override*/ var stillborn: kotlin.Boolean
    invisible_fake final override /*1*/ /*fake_override*/ var target: java.lang.Runnable!
    invisible_fake final override /*1*/ /*fake_override*/ var threadLocals: java.lang.ThreadLocal.ThreadLocalMap!
    invisible_fake final override /*1*/ /*fake_override*/ var threadQ: java.lang.Thread!
    invisible_fake final override /*1*/ /*fake_override*/ var threadStatus: kotlin.Int
    invisible_fake final override /*1*/ /*fake_override*/ var tid: kotlin.Long
    invisible_fake final override /*1*/ /*fake_override*/ var uncaughtExceptionHandler: java.lang.Thread.UncaughtExceptionHandler!
    invisible_fake open override /*1*/ /*fake_override*/ fun blockedOn(/*0*/ p0: [ERROR : Unresolved java classifier: Interruptible]!): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun checkAccess(): kotlin.Unit
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any!
    kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun countStackFrames(): kotlin.Int
    kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun destroy(): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun dispatchUncaughtException(/*0*/ p0: kotlin.Throwable!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    invisible_fake open override /*1*/ /*fake_override*/ fun exit(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun getContextClassLoader(): java.lang.ClassLoader!
    public open override /*1*/ /*fake_override*/ fun getId(): kotlin.Long
    public final override /*1*/ /*fake_override*/ fun getName(): kotlin.String!
    public final override /*1*/ /*fake_override*/ fun getPriority(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun getStackTrace(): kotlin.Array<(out) [ERROR : Unresolved java classifier: StackTraceElement]!>!
    public open override /*1*/ /*fake_override*/ fun getState(): java.lang.Thread.State!
    public final override /*1*/ /*fake_override*/ fun getThreadGroup(): [ERROR : Unresolved java classifier: ThreadGroup]!
    public open override /*1*/ /*fake_override*/ fun getUncaughtExceptionHandler(): java.lang.Thread.UncaughtExceptionHandler!
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    invisible_fake final override /*1*/ /*fake_override*/ fun init(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]!, /*1*/ p1: (() -> kotlin.Unit)!, /*2*/ p2: kotlin.String!, /*3*/ p3: kotlin.Long): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun init(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]!, /*1*/ p1: java.lang.Runnable!, /*2*/ p2: kotlin.String!, /*3*/ p3: kotlin.Long): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun interrupt(): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun interrupt0(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun isAlive(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun isDaemon(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun isInterrupted(): kotlin.Boolean
    invisible_fake open override /*1*/ /*fake_override*/ fun isInterrupted(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun join(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun join(/*0*/ p0: kotlin.Long): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun join(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
    kotlin.deprecated(value = "Deprecated in Java") public final override /*1*/ /*fake_override*/ fun resume(): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun resume0(): kotlin.Unit
    public open override /*1*/ fun run(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun setContextClassLoader(/*0*/ p0: java.lang.ClassLoader!): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setDaemon(/*0*/ p0: kotlin.Boolean): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setName(/*0*/ p0: kotlin.String!): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun setNativeName(/*0*/ p0: kotlin.String!): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setPriority(/*0*/ p0: kotlin.Int): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun setPriority0(/*0*/ p0: kotlin.Int): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun setUncaughtExceptionHandler(/*0*/ p0: ((java.lang.Thread!, kotlin.Throwable!) -> kotlin.Unit)!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun setUncaughtExceptionHandler(/*0*/ p0: java.lang.Thread.UncaughtExceptionHandler!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun start(): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun start0(): kotlin.Unit
    kotlin.deprecated(value = "Deprecated in Java") public final override /*1*/ /*fake_override*/ fun stop(): kotlin.Unit
    kotlin.deprecated(value = "Deprecated in Java") public final override /*1*/ /*fake_override*/ fun stop(/*0*/ p0: kotlin.Throwable!): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun stop0(/*0*/ p0: kotlin.Any!): kotlin.Unit
    kotlin.deprecated(value = "Deprecated in Java") public final override /*1*/ /*fake_override*/ fun suspend(): kotlin.Unit
    invisible_fake open override /*1*/ /*fake_override*/ fun suspend0(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        private constructor Companion()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        internal final fun init2(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
