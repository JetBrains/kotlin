FILE: parameterTypeWithContext.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun foo(a: R|kotlin/String|): R|kotlin/String| {
            ^foo R|<local>/a|
        }

    }
    context(ctx: R|A|)
    public final fun <A> implicit(): R|A| {
        ^implicit R|<local>/ctx|
    }
    context(a: R|@ContextFunctionTypeParams (A, kotlin/String) -> kotlin/String|)
    public final fun fun1(): R|kotlin/Unit| {
        R|<local>/a|.R|SubstitutionOverride<kotlin/Function2.invoke: R|kotlin/String|>|(R|/A.A|(), String(O))
    }
    context(a: R|@ContextFunctionTypeParams (A, kotlin/String) -> kotlin/String|)
    public final val prop1: R|() -> kotlin/String|
        public get(): R|() -> kotlin/String| {
            ^ fun <anonymous>(): R|kotlin/String| <inline=Unknown>  {
                ^ R|<local>/a|.R|SubstitutionOverride<kotlin/Function2.invoke: R|kotlin/String|>|(R|/A.A|(), String(K))
            }

        }
    public final val x: R|@ContextFunctionTypeParams (A, kotlin/String) -> kotlin/String| = fun <anonymous>(y: R|kotlin/String|): R|kotlin/String| <inline=Unknown>  {
        ^ R|/implicit|<R|A|>().R|/A.foo|(R|<local>/y|)
    }

        public get(): R|@ContextFunctionTypeParams (A, kotlin/String) -> kotlin/String|
    public final fun test(): R|kotlin/Unit| {
        R|kotlin/with|<R|@ContextFunctionTypeParams (A, kotlin/String) -> kotlin/String|, R|kotlin/Unit|>(R|/x|, <L> = with@fun R|@ContextFunctionTypeParams (A, kotlin/String) -> kotlin/String|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|/fun1|()
            R|/prop1|.R|SubstitutionOverride<kotlin/Function0.invoke: R|kotlin/String|>|()
        }
        )
    }
