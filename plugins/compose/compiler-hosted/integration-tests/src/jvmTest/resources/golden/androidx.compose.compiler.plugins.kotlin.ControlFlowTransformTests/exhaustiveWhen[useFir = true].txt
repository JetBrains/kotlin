//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun <T> Test(alpha: Alpha<T>): Float =
    when (alpha) {
        is Alpha.A -> 0f
        is Alpha.B -> 1f
    }

//
// Transformed IR
// ------------------------------------------

@Composable
fun <T> Test(alpha: Alpha<T>, %composer: Composer?, %changed: Int): Float {
  sourceInformationMarkerStart(%composer, <>, "C(Test)N(alpha):Test.kt")
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  val tmp0 = <block>{
    val tmp0_subject = alpha
    when {
      tmp0_subject is A<T> -> {
        0.0f
      }
      tmp0_subject is B<T> -> {
        1.0f
      }
      else -> {
        noWhenBranchMatchedException()
      }
    }
  }
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  sourceInformationMarkerEnd(%composer)
  return tmp0
}
