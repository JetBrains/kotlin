package jet

public trait Iterator<out T> {
  public fun next()  : T
  public val hasNext : Boolean
}

public abstract class ByteIterator() : Iterator<Byte> {
  public abstract open fun nextByte() : Byte

  public override fun next() : Byte
}

public abstract class ShortIterator() : Iterator<Short> {
  public abstract open fun nextShort() : Short

  public override fun next() : Short
}

public abstract class CharIterator() : Iterator<Char> {
  public abstract open fun nextChar()  : Char

  public override fun next() : Char
}

public abstract class IntIterator() : Iterator<Int> {
  public abstract open fun nextInt()  : Int

  public override fun next() : Int
}

public abstract class LongIterator() : Iterator<Long> {
  public abstract open fun nextLong()  : Long

  public override fun next() : Long
}

public abstract class FloatIterator() : Iterator<Float> {
  public abstract open fun nextFloat()  : Float

  public override fun next() : Float
}

public abstract class DoubleIterator() : Iterator<Double> {
  public abstract open fun nextDouble()  : Double

  public override fun next() : Double
}

abstract open public class BooleanIterator() : Iterator<Boolean> {
  public abstract open fun nextBoolean()  : Boolean

  public override fun next() : Boolean
}

public fun <T> Iterator<T>.iterator() : Iterator<T>

public fun ByteIterator.iterator() : ByteIterator

public fun ShortIterator.iterator() : ShortIterator

public fun CharIterator.iterator() : CharIterator

public fun IntIterator.iterator() : IntIterator

public fun BooleanIterator.iterator() : BooleanIterator

public fun DoubleIterator.iterator() : DoubleIterator

public fun FloatIterator.iterator() : FloatIterator

public fun LongIterator.iterator() : LongIterator

