/is_type_contract.kt:(121,142): info: Generated Viper text for unverifiableTypeCheck:
field pkg$kotlin$class_String$member_length: Ref

method global$fun_unverifiableTypeCheck$fun_take$NT_Int$return$T_Boolean(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
  ensures true ==>
    dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$unitType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  ret$0 := dom$RuntimeType$boolToRef(dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x),
    dom$RuntimeType$T_class_pkg$kotlin$global$class_String()))
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


/is_type_contract.kt:(186,215): warning: Cannot verify that if the function returns then x is Unit.

/is_type_contract.kt:(289,311): info: Generated Viper text for nullableNotNonNullable:
method global$fun_nullableNotNonNullable$fun_take$NT_Int$return$T_Unit(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
  ensures true ==>
    dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$intType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  ret$0 := dom$RuntimeType$unitValue()
  label label$ret$0
}

/is_type_contract.kt:(346,374): warning: Cannot verify that if the function returns then x is Int.
