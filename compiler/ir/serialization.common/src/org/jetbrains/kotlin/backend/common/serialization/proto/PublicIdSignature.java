// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature}
 */
public final class PublicIdSignature extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature)
    PublicIdSignatureOrBuilder {
  // Use PublicIdSignature.newBuilder() to construct.
  private PublicIdSignature(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private PublicIdSignature(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final PublicIdSignature defaultInstance;
  public static PublicIdSignature getDefaultInstance() {
    return defaultInstance;
  }

  public PublicIdSignature getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private PublicIdSignature(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              packageFqName_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            packageFqName_.add(input.readInt32());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
              packageFqName_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              packageFqName_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 16: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              declarationFqName_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            declarationFqName_.add(input.readInt32());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
              declarationFqName_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              declarationFqName_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 24: {
            bitField0_ |= 0x00000001;
            memberUniqId_ = input.readInt64();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000002;
            flags_ = input.readInt64();
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        packageFqName_ = java.util.Collections.unmodifiableList(packageFqName_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        declarationFqName_ = java.util.Collections.unmodifiableList(declarationFqName_);
      }
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<PublicIdSignature> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<PublicIdSignature>() {
    public PublicIdSignature parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new PublicIdSignature(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<PublicIdSignature> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 1;
  private java.util.List<java.lang.Integer> packageFqName_;
  /**
   * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
   */
  public java.util.List<java.lang.Integer>
      getPackageFqNameList() {
    return packageFqName_;
  }
  /**
   * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
   */
  public int getPackageFqNameCount() {
    return packageFqName_.size();
  }
  /**
   * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
   */
  public int getPackageFqName(int index) {
    return packageFqName_.get(index);
  }
  private int packageFqNameMemoizedSerializedSize = -1;

  public static final int DECLARATION_FQ_NAME_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Integer> declarationFqName_;
  /**
   * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
   */
  public java.util.List<java.lang.Integer>
      getDeclarationFqNameList() {
    return declarationFqName_;
  }
  /**
   * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
   */
  public int getDeclarationFqNameCount() {
    return declarationFqName_.size();
  }
  /**
   * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
   */
  public int getDeclarationFqName(int index) {
    return declarationFqName_.get(index);
  }
  private int declarationFqNameMemoizedSerializedSize = -1;

  public static final int MEMBER_UNIQ_ID_FIELD_NUMBER = 3;
  private long memberUniqId_;
  /**
   * <code>optional int64 member_uniq_id = 3;</code>
   */
  public boolean hasMemberUniqId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional int64 member_uniq_id = 3;</code>
   */
  public long getMemberUniqId() {
    return memberUniqId_;
  }

  public static final int FLAGS_FIELD_NUMBER = 4;
  private long flags_;
  /**
   * <code>optional int64 flags = 4 [default = 0];</code>
   */
  public boolean hasFlags() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional int64 flags = 4 [default = 0];</code>
   */
  public long getFlags() {
    return flags_;
  }

  private void initFields() {
    packageFqName_ = java.util.Collections.emptyList();
    declarationFqName_ = java.util.Collections.emptyList();
    memberUniqId_ = 0L;
    flags_ = 0L;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getPackageFqNameList().size() > 0) {
      output.writeRawVarint32(10);
      output.writeRawVarint32(packageFqNameMemoizedSerializedSize);
    }
    for (int i = 0; i < packageFqName_.size(); i++) {
      output.writeInt32NoTag(packageFqName_.get(i));
    }
    if (getDeclarationFqNameList().size() > 0) {
      output.writeRawVarint32(18);
      output.writeRawVarint32(declarationFqNameMemoizedSerializedSize);
    }
    for (int i = 0; i < declarationFqName_.size(); i++) {
      output.writeInt32NoTag(declarationFqName_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt64(3, memberUniqId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt64(4, flags_);
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < packageFqName_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(packageFqName_.get(i));
      }
      size += dataSize;
      if (!getPackageFqNameList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      packageFqNameMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < declarationFqName_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(declarationFqName_.get(i));
      }
      size += dataSize;
      if (!getDeclarationFqNameList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      declarationFqNameMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(3, memberUniqId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(4, flags_);
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature)
      org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignatureOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      packageFqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      declarationFqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      memberUniqId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000004);
      flags_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature result = new org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        packageFqName_ = java.util.Collections.unmodifiableList(packageFqName_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.packageFqName_ = packageFqName_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        declarationFqName_ = java.util.Collections.unmodifiableList(declarationFqName_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.declarationFqName_ = declarationFqName_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000001;
      }
      result.memberUniqId_ = memberUniqId_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000002;
      }
      result.flags_ = flags_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature.getDefaultInstance()) return this;
      if (!other.packageFqName_.isEmpty()) {
        if (packageFqName_.isEmpty()) {
          packageFqName_ = other.packageFqName_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensurePackageFqNameIsMutable();
          packageFqName_.addAll(other.packageFqName_);
        }
        
      }
      if (!other.declarationFqName_.isEmpty()) {
        if (declarationFqName_.isEmpty()) {
          declarationFqName_ = other.declarationFqName_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureDeclarationFqNameIsMutable();
          declarationFqName_.addAll(other.declarationFqName_);
        }
        
      }
      if (other.hasMemberUniqId()) {
        setMemberUniqId(other.getMemberUniqId());
      }
      if (other.hasFlags()) {
        setFlags(other.getFlags());
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<java.lang.Integer> packageFqName_ = java.util.Collections.emptyList();
    private void ensurePackageFqNameIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        packageFqName_ = new java.util.ArrayList<java.lang.Integer>(packageFqName_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getPackageFqNameList() {
      return java.util.Collections.unmodifiableList(packageFqName_);
    }
    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    public int getPackageFqNameCount() {
      return packageFqName_.size();
    }
    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    public int getPackageFqName(int index) {
      return packageFqName_.get(index);
    }
    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    public Builder setPackageFqName(
        int index, int value) {
      ensurePackageFqNameIsMutable();
      packageFqName_.set(index, value);
      
      return this;
    }
    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    public Builder addPackageFqName(int value) {
      ensurePackageFqNameIsMutable();
      packageFqName_.add(value);
      
      return this;
    }
    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    public Builder addAllPackageFqName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePackageFqNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, packageFqName_);
      
      return this;
    }
    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    public Builder clearPackageFqName() {
      packageFqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      
      return this;
    }

    private java.util.List<java.lang.Integer> declarationFqName_ = java.util.Collections.emptyList();
    private void ensureDeclarationFqNameIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        declarationFqName_ = new java.util.ArrayList<java.lang.Integer>(declarationFqName_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getDeclarationFqNameList() {
      return java.util.Collections.unmodifiableList(declarationFqName_);
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    public int getDeclarationFqNameCount() {
      return declarationFqName_.size();
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    public int getDeclarationFqName(int index) {
      return declarationFqName_.get(index);
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    public Builder setDeclarationFqName(
        int index, int value) {
      ensureDeclarationFqNameIsMutable();
      declarationFqName_.set(index, value);
      
      return this;
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    public Builder addDeclarationFqName(int value) {
      ensureDeclarationFqNameIsMutable();
      declarationFqName_.add(value);
      
      return this;
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    public Builder addAllDeclarationFqName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDeclarationFqNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, declarationFqName_);
      
      return this;
    }
    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    public Builder clearDeclarationFqName() {
      declarationFqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      
      return this;
    }

    private long memberUniqId_ ;
    /**
     * <code>optional int64 member_uniq_id = 3;</code>
     */
    public boolean hasMemberUniqId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 member_uniq_id = 3;</code>
     */
    public long getMemberUniqId() {
      return memberUniqId_;
    }
    /**
     * <code>optional int64 member_uniq_id = 3;</code>
     */
    public Builder setMemberUniqId(long value) {
      bitField0_ |= 0x00000004;
      memberUniqId_ = value;
      
      return this;
    }
    /**
     * <code>optional int64 member_uniq_id = 3;</code>
     */
    public Builder clearMemberUniqId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      memberUniqId_ = 0L;
      
      return this;
    }

    private long flags_ ;
    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    public long getFlags() {
      return flags_;
    }
    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    public Builder setFlags(long value) {
      bitField0_ |= 0x00000008;
      flags_ = value;
      
      return this;
    }
    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    public Builder clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000008);
      flags_ = 0L;
      
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature)
  }

  static {
    defaultInstance = new PublicIdSignature(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.PublicIdSignature)
}
