package

public fun foo(/*0*/ block: Scope<kotlin.Nothing>.() -> kotlin.Unit): kotlin.Unit
public fun main(): kotlin.Unit
public inline fun </*0*/ reified T> Scope<*>.nested(/*0*/ noinline block: Scope<T>.() -> kotlin.Unit): kotlin.Unit
public inline fun </*0*/ reified K> Scope<*>.nested2(/*0*/ noinline block: Scope<K>.() -> kotlin.Unit): kotlin.Unit

@kotlin.DslMarker public final annotation class Foo : kotlin.Annotation {
    public constructor Foo()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@Foo public interface Scope</*0*/ T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public abstract fun value(/*0*/ value: T): kotlin.Unit
}
