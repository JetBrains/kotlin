/smartcast.kt:(23,38): info: Generated Viper text for smartcastReturn:
method global$fun_smartcastReturn$fun_take$NT_Int$return$T_Int(local$n: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$n), dom$RuntimeType$nullable(dom$RuntimeType$intType()))
  if (!(local$n == dom$RuntimeType$nullValue())) {
    ret$0 := local$n
  } else {
    ret$0 := dom$RuntimeType$intToRef(0)}
  goto label$ret$0
  label label$ret$0
}

/smartcast.kt:(88,106): info: Generated Viper text for isNullOrEmptyWrong:
method global$fun_isNullOrEmptyWrong$fun_take$NT_class_pkg$kotlin$global$class_CharSequence$return$T_Boolean(local$seq: Ref)
  returns (ret$0: Ref)
  requires local$seq != dom$RuntimeType$nullValue() ==>
    acc(T_class_pkg$kotlin$global$class_CharSequence(local$seq), wildcard)
  ensures local$seq != dom$RuntimeType$nullValue() ==>
    acc(T_class_pkg$kotlin$global$class_CharSequence(local$seq), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$seq), dom$RuntimeType$nullable(dom$RuntimeType$T_class_pkg$kotlin$global$class_CharSequence()))
  if (local$seq == dom$RuntimeType$nullValue()) {
    var anonymous$0: Ref
    if (local$seq != dom$RuntimeType$nullValue()) {
      var anonymous$1: Ref
      anonymous$1 := pkg$kotlin$class_CharSequence$getter_length(local$seq)
      anonymous$0 := anonymous$1
    } else {
      anonymous$0 := dom$RuntimeType$nullValue()}
    ret$0 := dom$RuntimeType$boolToRef(anonymous$0 ==
      dom$RuntimeType$intToRef(0))
  } else {
    ret$0 := dom$RuntimeType$boolToRef(false)}
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Ref)
  requires acc(T_class_pkg$kotlin$global$class_CharSequence(this), wildcard)
  ensures acc(T_class_pkg$kotlin$global$class_CharSequence(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
