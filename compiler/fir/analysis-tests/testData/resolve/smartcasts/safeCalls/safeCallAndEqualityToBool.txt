FILE: safeCallAndEqualityToBool.kt
    public final fun R|kotlin/String|.check(): R|kotlin/Boolean| {
        ^check Boolean(true)
    }
    public final fun test_1(s: R|kotlin/String?|): R|kotlin/Unit| {
        when () {
            ==(R|<local>/s|?.R|/check|(), Boolean(true)) ->  {
                R|<local>/s|.R|kotlin/String.length|
            }
            else ->  {
                R|<local>/s|.<Inapplicable(WRONG_RECEIVER): [kotlin/String.length]>#
            }
        }

    }
    public final fun test_2(s: R|kotlin/String?|): R|kotlin/Unit| {
        when () {
            ==(R|<local>/s|?.R|/check|(), Boolean(false)) ->  {
                R|<local>/s|.R|kotlin/String.length|
            }
            else ->  {
                R|<local>/s|.<Inapplicable(WRONG_RECEIVER): [kotlin/String.length]>#
            }
        }

    }
    public final fun test_3(s: R|kotlin/String?|): R|kotlin/Unit| {
        when () {
            !=(R|<local>/s|?.R|/check|(), Boolean(true)) ->  {
                R|<local>/s|.<Inapplicable(WRONG_RECEIVER): [kotlin/String.length]>#
            }
            else ->  {
                R|<local>/s|.R|kotlin/String.length|
            }
        }

    }
    public final fun test_4(s: R|kotlin/String?|): R|kotlin/Unit| {
        when () {
            !=(R|<local>/s|?.R|/check|(), Boolean(false)) ->  {
                R|<local>/s|.<Inapplicable(WRONG_RECEIVER): [kotlin/String.length]>#
            }
            else ->  {
                R|<local>/s|.R|kotlin/String.length|
            }
        }

    }
