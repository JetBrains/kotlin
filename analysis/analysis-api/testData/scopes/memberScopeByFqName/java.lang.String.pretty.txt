private val value: kotlin.CharArray!

private open var hash: kotlin.Int

public/*package*/ open fun hash32(): kotlin.Int

private open var hash32: kotlin.Int

open val length: kotlin.Int

open fun isEmpty(): kotlin.Boolean

open fun codePointAt(index: kotlin.Int): kotlin.Int

open fun codePointBefore(index: kotlin.Int): kotlin.Int

open fun codePointCount(beginIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.Int

open fun offsetByCodePoints(index: kotlin.Int, codePointOffset: kotlin.Int): kotlin.Int

public/*package*/ open fun getChars(dst: kotlin.CharArray!, dstBegin: kotlin.Int)

open fun getChars(srcBegin: kotlin.Int, srcEnd: kotlin.Int, dst: kotlin.CharArray!, dstBegin: kotlin.Int)

@kotlin.Deprecated(message = "Deprecated in Java")
open fun getBytes(srcBegin: kotlin.Int, srcEnd: kotlin.Int, dst: kotlin.ByteArray!, dstBegin: kotlin.Int)

open fun getBytes(charsetName: kotlin.String!): kotlin.ByteArray!

open fun getBytes(charset: java.nio.charset.Charset!): kotlin.ByteArray!

open fun getBytes(): kotlin.ByteArray!

open operator fun equals(anObject: kotlin.Any?): kotlin.Boolean

open fun contentEquals(sb: java.lang.StringBuffer!): kotlin.Boolean

open fun contentEquals(cs: kotlin.CharSequence!): kotlin.Boolean

open fun equalsIgnoreCase(anotherString: kotlin.String!): kotlin.Boolean

open operator fun compareTo(anotherString: kotlin.String!): kotlin.Int

open fun compareToIgnoreCase(str: kotlin.String!): kotlin.Int

open fun regionMatches(toffset: kotlin.Int, other: kotlin.String!, ooffset: kotlin.Int, len: kotlin.Int): kotlin.Boolean

open fun regionMatches(ignoreCase: kotlin.Boolean, toffset: kotlin.Int, other: kotlin.String!, ooffset: kotlin.Int, len: kotlin.Int): kotlin.Boolean

open fun startsWith(prefix: kotlin.String!, toffset: kotlin.Int): kotlin.Boolean

open fun startsWith(prefix: kotlin.String!): kotlin.Boolean

open fun endsWith(suffix: kotlin.String!): kotlin.Boolean

open fun hashCode(): kotlin.Int

open fun indexOf(ch: kotlin.Int): kotlin.Int

open fun indexOf(ch: kotlin.Int, fromIndex: kotlin.Int): kotlin.Int

open fun indexOf(str: kotlin.String!): kotlin.Int

open fun indexOf(str: kotlin.String!, fromIndex: kotlin.Int): kotlin.Int

private open fun indexOfSupplementary(ch: kotlin.Int, fromIndex: kotlin.Int): kotlin.Int

open fun lastIndexOf(ch: kotlin.Int): kotlin.Int

open fun lastIndexOf(ch: kotlin.Int, fromIndex: kotlin.Int): kotlin.Int

open fun lastIndexOf(str: kotlin.String!): kotlin.Int

open fun lastIndexOf(str: kotlin.String!, fromIndex: kotlin.Int): kotlin.Int

private open fun lastIndexOfSupplementary(ch: kotlin.Int, fromIndex: kotlin.Int): kotlin.Int

open fun substring(beginIndex: kotlin.Int): kotlin.String!

open fun substring(beginIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String!

open fun subSequence(beginIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence

open fun concat(str: kotlin.String!): kotlin.String!

open fun replace(oldChar: kotlin.Char, newChar: kotlin.Char): kotlin.String!

open fun replace(target: kotlin.CharSequence!, replacement: kotlin.CharSequence!): kotlin.String!

open fun matches(regex: kotlin.String!): kotlin.Boolean

open operator fun contains(s: kotlin.CharSequence!): kotlin.Boolean

open fun replaceFirst(regex: kotlin.String!, replacement: kotlin.String!): kotlin.String!

open fun replaceAll(regex: kotlin.String!, replacement: kotlin.String!): kotlin.String!

open fun split(regex: kotlin.String!, limit: kotlin.Int): kotlin.Array<(out) kotlin.String!>!

open fun split(regex: kotlin.String!): kotlin.Array<(out) kotlin.String!>!

open fun toLowerCase(locale: java.util.Locale!): kotlin.String!

open fun toLowerCase(): kotlin.String!

open fun toUpperCase(locale: java.util.Locale!): kotlin.String!

open fun toUpperCase(): kotlin.String!

open fun trim(): kotlin.String!

open fun toString(): kotlin.String

open fun toCharArray(): kotlin.CharArray!

open fun intern(): kotlin.String!

open operator fun get(index: kotlin.Int): kotlin.Char

private open class CaseInsensitiveComparator : kotlin.Any, java.util.Comparator<kotlin.String!>, java.io.Serializable

constructor()

constructor(original: kotlin.String!)

constructor(value: kotlin.CharArray!)

constructor(value: kotlin.CharArray!, offset: kotlin.Int, count: kotlin.Int)

constructor(codePoints: kotlin.IntArray!, offset: kotlin.Int, count: kotlin.Int)

@kotlin.Deprecated(message = "Deprecated in Java")
constructor(ascii: kotlin.ByteArray!, hibyte: kotlin.Int, offset: kotlin.Int, count: kotlin.Int)

@kotlin.Deprecated(message = "Deprecated in Java")
constructor(ascii: kotlin.ByteArray!, hibyte: kotlin.Int)

constructor(bytes: kotlin.ByteArray!, offset: kotlin.Int, length: kotlin.Int, charsetName: kotlin.String!)

constructor(bytes: kotlin.ByteArray!, offset: kotlin.Int, length: kotlin.Int, charset: java.nio.charset.Charset!)

constructor(bytes: kotlin.ByteArray!, charsetName: kotlin.String!)

constructor(bytes: kotlin.ByteArray!, charset: java.nio.charset.Charset!)

constructor(bytes: kotlin.ByteArray!, offset: kotlin.Int, length: kotlin.Int)

constructor(bytes: kotlin.ByteArray!)

constructor(buffer: java.lang.StringBuffer!)

constructor(builder: java.lang.StringBuilder!)

public/*package*/ constructor(value: kotlin.CharArray!, share: kotlin.Boolean)

@kotlin.Deprecated(message = "Deprecated in Java")
public/*package*/ constructor(offset: kotlin.Int, count: kotlin.Int, value: kotlin.CharArray!)