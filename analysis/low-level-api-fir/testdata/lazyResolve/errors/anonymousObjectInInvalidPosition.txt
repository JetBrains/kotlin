
RAW_FIR:
FILE: anonymousObjectInInvalidPosition.kt
    private final? [RAW_FIR] val resolveMe: A = LAZY_EXPRESSION
        private [RAW_FIR] get(): A
    public? final? [RAW_FIR] interface A<[RAW_FIR] T> : R|kotlin/Any| {
        public? final? [RAW_FIR] fun x(): R|kotlin/Unit|

    }

IMPORTS:
FILE: anonymousObjectInInvalidPosition.kt
    private final? [RAW_FIR] val resolveMe: A = LAZY_EXPRESSION
        private [RAW_FIR] get(): A
    public? final? [RAW_FIR] interface A<[RAW_FIR] T> : R|kotlin/Any| {
        public? final? [RAW_FIR] fun x(): R|kotlin/Unit|

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: anonymousObjectInInvalidPosition.kt
    private final? [COMPILER_REQUIRED_ANNOTATIONS] val resolveMe: A = LAZY_EXPRESSION
        private [COMPILER_REQUIRED_ANNOTATIONS] get(): A
    public? final? [RAW_FIR] interface A<[RAW_FIR] T> : R|kotlin/Any| {
        public? final? [RAW_FIR] fun x(): R|kotlin/Unit|

    }

COMPANION_GENERATION:
FILE: anonymousObjectInInvalidPosition.kt
    private final? [COMPANION_GENERATION] val resolveMe: A = LAZY_EXPRESSION
        private [COMPANION_GENERATION] get(): A
    public? final? [RAW_FIR] interface A<[RAW_FIR] T> : R|kotlin/Any| {
        public? final? [RAW_FIR] fun x(): R|kotlin/Unit|

    }

SUPER_TYPES:
FILE: anonymousObjectInInvalidPosition.kt
    private final? [SUPER_TYPES] val resolveMe: A = LAZY_EXPRESSION
        private [SUPER_TYPES] get(): A
    public? final? [RAW_FIR] interface A<[RAW_FIR] T> : R|kotlin/Any| {
        public? final? [RAW_FIR] fun x(): R|kotlin/Unit|

    }

TYPES:
FILE: anonymousObjectInInvalidPosition.kt
    private final? [TYPES] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = LAZY_EXPRESSION
        private [TYPES] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface A<[COMPILER_REQUIRED_ANNOTATIONS] T> : R|kotlin/Any| {
        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun x(): R|kotlin/Unit|

    }

STATUS:
FILE: anonymousObjectInInvalidPosition.kt
    private final [STATUS] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = LAZY_EXPRESSION
        private [STATUS] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface A<[COMPILER_REQUIRED_ANNOTATIONS] T> : R|kotlin/Any| {
        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun x(): R|kotlin/Unit|

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: anonymousObjectInInvalidPosition.kt
    private final [ARGUMENTS_OF_ANNOTATIONS] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = LAZY_EXPRESSION
        private [ARGUMENTS_OF_ANNOTATIONS] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface A<[COMPILER_REQUIRED_ANNOTATIONS] T> : R|kotlin/Any| {
        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun x(): R|kotlin/Unit|

    }

CONTRACTS:
FILE: anonymousObjectInInvalidPosition.kt
    private final [CONTRACTS] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)<Unsupported LValue: NULL># = object : A<Int> {
        private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override [RAW_FIR] fun x(): R|kotlin/Unit| {
        }

    }

        private [CONTRACTS] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface A<[COMPILER_REQUIRED_ANNOTATIONS] T> : R|kotlin/Any| {
        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun x(): R|kotlin/Unit|

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: anonymousObjectInInvalidPosition.kt
    private final [IMPLICIT_TYPES_BODY_RESOLVE] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)<Unsupported LValue: NULL># = object : A<Int> {
        private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override [RAW_FIR] fun x(): R|kotlin/Unit| {
        }

    }

        private [IMPLICIT_TYPES_BODY_RESOLVE] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface A<[COMPILER_REQUIRED_ANNOTATIONS] T> : R|kotlin/Any| {
        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun x(): R|kotlin/Unit|

    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: anonymousObjectInInvalidPosition.kt
    private final [ANNOTATIONS_ARGUMENTS_MAPPING] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)<Unsupported LValue: NULL># = object : A<Int> {
        private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override [RAW_FIR] fun x(): R|kotlin/Unit| {
        }

    }

        private [ANNOTATIONS_ARGUMENTS_MAPPING] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface A<[COMPILER_REQUIRED_ANNOTATIONS] T> : R|kotlin/Any| {
        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun x(): R|kotlin/Unit|

    }

EXPECT_ACTUAL_MATCHING:
FILE: anonymousObjectInInvalidPosition.kt
    private final [EXPECT_ACTUAL_MATCHING] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)<Unsupported LValue: NULL># = object : A<Int> {
        private [RAW_FIR] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override [RAW_FIR] fun x(): R|kotlin/Unit| {
        }

    }

        private [EXPECT_ACTUAL_MATCHING] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface A<[COMPILER_REQUIRED_ANNOTATIONS] T> : R|kotlin/Any| {
        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun x(): R|kotlin/Unit|

    }

BODY_RESOLVE:
FILE: anonymousObjectInInvalidPosition.kt
    private final [BODY_RESOLVE] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)<Unsupported LValue: NULL># = object : R|A<kotlin/Int>| {
        private [BODY_RESOLVE] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public open override [BODY_RESOLVE] fun x(): R|kotlin/Unit| {
        }

    }

        private [BODY_RESOLVE] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public abstract [TYPES] interface A<[TYPES] T> : R|kotlin/Any| {
        public abstract [STATUS] fun x(): R|kotlin/Unit|

    }

FILE RAW TO BODY:
FILE: anonymousObjectInInvalidPosition.kt
    private final [BODY_RESOLVE] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)<Unsupported LValue: NULL># = object : R|A<kotlin/Int>| {
        private [BODY_RESOLVE] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public open override [BODY_RESOLVE] fun x(): R|kotlin/Unit| {
        }

    }

        private [BODY_RESOLVE] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public abstract [BODY_RESOLVE] interface A<[BODY_RESOLVE] T> : R|kotlin/Any| {
        public abstract [BODY_RESOLVE] fun x(): R|kotlin/Unit|

    }
