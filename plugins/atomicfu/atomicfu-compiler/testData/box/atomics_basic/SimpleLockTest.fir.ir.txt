FILE fqName:<root> fileName:/SimpleLockTest.kt
  CLASS CLASS name:SimpleLock modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.SimpleLock
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:_locked$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:_locked$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-_locked$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.SimpleLock
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:_locked$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-_locked$volatile> (): kotlin.Int declared in <root>.SimpleLock'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:_locked$volatile type:kotlin.Int visibility:private declared in <root>.SimpleLock' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.<get-_locked$volatile>' type=<root>.SimpleLock origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-_locked$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.SimpleLock
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:_locked$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-_locked$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.SimpleLock'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:_locked$volatile type:kotlin.Int visibility:private declared in <root>.SimpleLock' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.<set-_locked$volatile>' type=<root>.SimpleLock origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.SimpleLock.<set-_locked$volatile>' type=kotlin.Int origin=null
    CONSTRUCTOR visibility:public returnType:<root>.SimpleLock [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:SimpleLock modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.SimpleLock
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Int, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.SimpleLock.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit> declared in <root>.SimpleLock.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_0: T of kotlin.concurrent.atomicGetField declared in <root>.SimpleLock.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:withLock visibility:public modality:FINAL returnType:T of <root>.SimpleLock.withLock
      TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.SimpleLock
      VALUE_PARAMETER kind:Regular name:res index:1 type:T of <root>.SimpleLock.withLock
      BLOCK_BODY
        TRY type=kotlin.Nothing
          try: BLOCK type=kotlin.Nothing origin=null
            CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.SimpleLock' type=kotlin.Unit origin=null
              ARG <this>: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.withLock' type=<root>.SimpleLock origin=null
              ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=LAMBDA
                FUN ATOMICFU_GENERATED_FUNCTION name:<_locked$volatile-getter> visibility:local modality:FINAL returnType:kotlin.reflect.KMutableProperty0<kotlin.Int> [inline]
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='local final fun <_locked$volatile-getter> (): kotlin.reflect.KMutableProperty0<kotlin.Int> declared in <root>.SimpleLock.withLock'
                      PROPERTY_REFERENCE 'private final _locked$volatile: kotlin.Int declared in <root>.SimpleLock' field='FIELD ATOMICFU_GENERATED_FIELD name:_locked$volatile type:kotlin.Int visibility:private declared in <root>.SimpleLock' getter='private final fun <get-_locked$volatile> (): kotlin.Int declared in <root>.SimpleLock' setter='private final fun <set-_locked$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.SimpleLock' type=kotlin.reflect.KMutableProperty0<kotlin.Int> origin=null
                        ARG 1: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.withLock' type=<root>.SimpleLock origin=IMPLICIT_ARGUMENT
              ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
                FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                  VALUE_PARAMETER kind:Regular name:locked index:0 type:kotlin.Int
                  BLOCK_BODY
                    CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
                      ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: GET_VAR 'locked: kotlin.Int declared in <root>.SimpleLock.withLock.<anonymous>' type=kotlin.Int origin=null
                        ARG arg1: CONST Int type=kotlin.Int value=0
                    WHEN type=kotlin.Unit origin=IF
                      BRANCH
                        if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                          ARG <this>: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                            TYPE_ARG T: kotlin.Int
                            ARG <this>: PROPERTY_REFERENCE 'private final _locked$volatile: kotlin.Int declared in <root>.SimpleLock' field='FIELD ATOMICFU_GENERATED_FIELD name:_locked$volatile type:kotlin.Int visibility:private declared in <root>.SimpleLock' getter='private final fun <get-_locked$volatile> (): kotlin.Int declared in <root>.SimpleLock' setter='private final fun <set-_locked$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.SimpleLock' type=kotlin.reflect.KMutableProperty0<kotlin.Int> origin=null
                              ARG 1: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.withLock' type=<root>.SimpleLock origin=IMPLICIT_ARGUMENT
                            ARG expectedValue: CONST Int type=kotlin.Int value=0
                            ARG newValue: CONST Int type=kotlin.Int value=1
                        then: RETURN type=kotlin.Nothing from='local final fun <anonymous> (locked: kotlin.Int): kotlin.Unit declared in <root>.SimpleLock.withLock'
                          GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
                    RETURN type=kotlin.Nothing from='public final fun withLock <T> (res: T of <root>.SimpleLock.withLock): T of <root>.SimpleLock.withLock declared in <root>.SimpleLock'
                      GET_VAR 'res: T of <root>.SimpleLock.withLock declared in <root>.SimpleLock.withLock' type=T of <root>.SimpleLock.withLock origin=null
          finally: BLOCK type=kotlin.Unit origin=null
            CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final _locked$volatile: kotlin.Int declared in <root>.SimpleLock' field='FIELD ATOMICFU_GENERATED_FIELD name:_locked$volatile type:kotlin.Int visibility:private declared in <root>.SimpleLock' getter='private final fun <get-_locked$volatile> (): kotlin.Int declared in <root>.SimpleLock' setter='private final fun <set-_locked$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.SimpleLock' type=kotlin.reflect.KMutableProperty0<kotlin.Int> origin=null
                ARG 1: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.withLock' type=<root>.SimpleLock origin=IMPLICIT_ARGUMENT
              ARG newValue: CONST Int type=kotlin.Int value=0
  CLASS CLASS name:SimpleLockTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.SimpleLockTest
    CONSTRUCTOR visibility:public returnType:<root>.SimpleLockTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:SimpleLockTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:withLock visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.SimpleLockTest
      BLOCK_BODY
        VAR name:lock type:<root>.SimpleLock [val]
          CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.SimpleLock' type=<root>.SimpleLock origin=null
        VAR name:res type:kotlin.String [val]
          CALL 'public final fun withLock <T> (res: T of <root>.SimpleLock.withLock): T of <root>.SimpleLock.withLock declared in <root>.SimpleLock' type=kotlin.String origin=null
            TYPE_ARG T: kotlin.String
            ARG <this>: GET_VAR 'val lock: <root>.SimpleLock declared in <root>.SimpleLockTest.withLock' type=<root>.SimpleLock origin=null
            ARG res: CONST String type=kotlin.String value="OK"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="OK"
          ARG actual: GET_VAR 'val res: kotlin.String declared in <root>.SimpleLockTest.withLock' type=kotlin.String origin=null
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:testClass type:<root>.SimpleLockTest [val]
        CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.SimpleLockTest' type=<root>.SimpleLockTest origin=null
      CALL 'public final fun withLock (): kotlin.Unit declared in <root>.SimpleLockTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.SimpleLockTest declared in <root>.box' type=<root>.SimpleLockTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
