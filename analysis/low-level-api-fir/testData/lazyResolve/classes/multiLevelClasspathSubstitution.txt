RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] topmost.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(RAW_FIR)] class Topmost : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(RAW_FIR)] top.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(RAW_FIR)] middle.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(RAW_FIR)] class Middle : Top {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(RAW_FIR)] bottom.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class Bottom : Middle {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

IMPORTS:
FILE: [ResolvedTo(RAW_FIR)] topmost.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(RAW_FIR)] class Topmost : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(RAW_FIR)] top.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(RAW_FIR)] middle.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(RAW_FIR)] class Middle : Top {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(RAW_FIR)] class Bottom : Middle {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(RAW_FIR)] topmost.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(RAW_FIR)] class Topmost : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(RAW_FIR)] top.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(RAW_FIR)] middle.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(RAW_FIR)] class Middle : Top {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class Bottom : Middle {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(RAW_FIR)] topmost.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(RAW_FIR)] class Topmost : Base {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(RAW_FIR)] top.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(RAW_FIR)] middle.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(RAW_FIR)] class Middle : Top {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(RAW_FIR)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(COMPANION_GENERATION)] class Bottom : Middle {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Topmost : R|org/example/Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Middle : R|org/example/Top| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(SUPER_TYPES)] class Bottom : R|org/example/Middle| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Topmost : R|org/example/Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Middle : R|org/example/Top| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final? [ResolvedTo(TYPES)] class Bottom : R|org/example/Middle| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Topmost : R|org/example/Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Middle : R|org/example/Top| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final [ResolvedTo(STATUS)] class Bottom : R|org/example/Middle| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Topmost : R|org/example/Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Middle : R|org/example/Top| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class Bottom : R|org/example/Middle| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Topmost : R|org/example/Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Middle : R|org/example/Top| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final [ResolvedTo(CONTRACTS)] class Bottom : R|org/example/Middle| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Topmost : R|org/example/Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Middle : R|org/example/Top| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class Bottom : R|org/example/Middle| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Topmost : R|org/example/Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Middle : R|org/example/Top| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final [ResolvedTo(CONSTANT_EVALUATION)] class Bottom : R|org/example/Middle| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Topmost : R|org/example/Base| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Middle : R|org/example/Top| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<Top>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Base : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun bottom(): R|kotlin/Unit|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class Bottom : R|org/example/Middle| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            LAZY_super<Middle>
        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] topmost.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun topmost(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(STATUS)] class Topmost : R|org/example/Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Topmost] constructor(): R|org/example/Topmost| {
            LAZY_super<<implicit>>
        }

    }

FILE: [ResolvedTo(IMPORTS)] top.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun top(): R|kotlin/Unit|

    }

FILE: [ResolvedTo(IMPORTS)] middle.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun middle(): R|kotlin/Unit|

    }
    public abstract [ResolvedTo(STATUS)] class Middle : R|org/example/Top| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Middle] constructor(): R|org/example/Middle| {
            LAZY_super<R|org/example/Top|>
        }

    }

FILE: [ResolvedTo(IMPORTS)] bottom.kt
    public abstract [ResolvedTo(STATUS)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun bottom(): R|kotlin/Unit|

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Bottom : R|org/example/Middle| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            super<R|org/example/Middle|>()
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] bottom.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun bottom(): R|kotlin/Unit|

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Bottom : R|org/example/Middle| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Bottom] constructor(): R|org/example/Bottom| {
            super<R|org/example/Middle|>()
        }

    }
