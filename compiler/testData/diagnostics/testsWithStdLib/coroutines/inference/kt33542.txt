package

@kotlin.OptIn(markerClass = {kotlin.experimental.ExperimentalTypeInference::class}) public fun </*0*/ T> builder(/*0*/ @kotlin.BuilderInference block: In<T>.() -> kotlin.Unit): kotlin.Unit
public fun test(): kotlin.Unit
public suspend fun yield(): kotlin.Unit

public interface In</*0*/ in E> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract fun send(/*0*/ element: E): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class InImpl</*0*/ E> : In<E> {
    public constructor InImpl</*0*/ E>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ fun send(/*0*/ element: E): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
