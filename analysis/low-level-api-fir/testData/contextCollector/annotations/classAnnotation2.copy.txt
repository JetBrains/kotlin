Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Implicit receiver:
            FirRegularClassSymbol public final? companion object Companion : R|kotlin/Any|
                Type: pack.TopLevelClass.Companion
    Element 7
        Scope: FirNestedClassifierScopeImpl
            Classifiers:
                FirRegularClassSymbol public final? companion object Companion : R|kotlin/Any|
                FirRegularClassSymbol public final? class NestedClass : R|kotlin/Any|

FILE: [ResolvedTo(RAW_FIR)] classAnnotation2.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] constructor([ResolvedTo(RAW_FIR)] s: String): R|pack/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] val s: String = R|<local>/s|
            public? [ResolvedTo(RAW_FIR)] get(): String

    }
    public final? [ResolvedTo(RAW_FIR)] class TopLevelClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] constructor([ResolvedTo(RAW_FIR)] i: Int): R|pack/TopLevelClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] val i: Int = R|<local>/i|
            public? [ResolvedTo(RAW_FIR)] get(): Int

        @Anno[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] constructor([ResolvedTo(RAW_FIR)] d: Double): R|pack/TopLevelClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val d: Double = R|<local>/d|
                public? [ResolvedTo(RAW_FIR)] get(): Double

            public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
                private [ResolvedTo(RAW_FIR)] constructor(): R|pack/TopLevelClass.NestedClass.Companion| {
                    LAZY_super<R|kotlin/Any|>
                }

                public? final? const [ResolvedTo(RAW_FIR)] val CONSTANT: <implicit> = LAZY_EXPRESSION
                    public? [ResolvedTo(RAW_FIR)] get(): <implicit>

            }

        }

        public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(RAW_FIR)] constructor(): R|pack/TopLevelClass.Companion| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? const [ResolvedTo(RAW_FIR)] val CONSTANT: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        }

    }
