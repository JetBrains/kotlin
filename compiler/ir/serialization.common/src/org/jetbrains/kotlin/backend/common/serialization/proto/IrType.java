// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrType}
 */
public  final class IrType extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrType, IrType.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrType)
    IrTypeOrBuilder {
  private IrType() {
  }
  private int kindCase_ = 0;
  private java.lang.Object kind_;
  public enum KindCase {
    LEGACYSIMPLE(1),
    DYNAMIC(2),
    DNN(4),
    SIMPLE(5),
    KIND_NOT_SET(0);
    private final int value;
    private KindCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KindCase valueOf(int value) {
      return forNumber(value);
    }

    public static KindCase forNumber(int value) {
      switch (value) {
        case 1: return LEGACYSIMPLE;
        case 2: return DYNAMIC;
        case 4: return DNN;
        case 5: return SIMPLE;
        case 0: return KIND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public KindCase
  getKindCase() {
    return KindCase.forNumber(
        kindCase_);
  }

  private void clearKind() {
    kindCase_ = 0;
    kind_ = null;
  }

  public static final int LEGACYSIMPLE_FIELD_NUMBER = 1;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
   */
  @java.lang.Override
  public boolean hasLegacySimple() {
    return kindCase_ == 1;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy getLegacySimple() {
    if (kindCase_ == 1) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy) kind_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setLegacySimple(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy value) {
    value.getClass();  // minimal bytecode null check
    kind_ = value;
    kindCase_ = 1;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeLegacySimple(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy value) {
    value.getClass();  // minimal bytecode null check
    if (kindCase_ == 1 &&
        kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy.getDefaultInstance()) {
      kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy) kind_)
          .mergeFrom(value).buildPartial();
    } else {
      kind_ = value;
    }
    kindCase_ = 1;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
   */
  private void clearLegacySimple() {
    if (kindCase_ == 1) {
      kindCase_ = 0;
      kind_ = null;
    }
  }

  public static final int DYNAMIC_FIELD_NUMBER = 2;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
   */
  @java.lang.Override
  public boolean hasDynamic() {
    return kindCase_ == 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType getDynamic() {
    if (kindCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType) kind_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setDynamic(org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType value) {
    value.getClass();  // minimal bytecode null check
    kind_ = value;
    kindCase_ = 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeDynamic(org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType value) {
    value.getClass();  // minimal bytecode null check
    if (kindCase_ == 2 &&
        kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType.getDefaultInstance()) {
      kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType) kind_)
          .mergeFrom(value).buildPartial();
    } else {
      kind_ = value;
    }
    kindCase_ = 2;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
   */
  private void clearDynamic() {
    if (kindCase_ == 2) {
      kindCase_ = 0;
      kind_ = null;
    }
  }

  public static final int DNN_FIELD_NUMBER = 4;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
   */
  @java.lang.Override
  public boolean hasDnn() {
    return kindCase_ == 4;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType getDnn() {
    if (kindCase_ == 4) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType) kind_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setDnn(org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType value) {
    value.getClass();  // minimal bytecode null check
    kind_ = value;
    kindCase_ = 4;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeDnn(org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType value) {
    value.getClass();  // minimal bytecode null check
    if (kindCase_ == 4 &&
        kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType.getDefaultInstance()) {
      kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType) kind_)
          .mergeFrom(value).buildPartial();
    } else {
      kind_ = value;
    }
    kindCase_ = 4;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
   */
  private void clearDnn() {
    if (kindCase_ == 4) {
      kindCase_ = 0;
      kind_ = null;
    }
  }

  public static final int SIMPLE_FIELD_NUMBER = 5;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
   */
  @java.lang.Override
  public boolean hasSimple() {
    return kindCase_ == 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType getSimple() {
    if (kindCase_ == 5) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType) kind_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType.getDefaultInstance();
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setSimple(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType value) {
    value.getClass();  // minimal bytecode null check
    kind_ = value;
    kindCase_ = 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void mergeSimple(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType value) {
    value.getClass();  // minimal bytecode null check
    if (kindCase_ == 5 &&
        kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType.getDefaultInstance()) {
      kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType) kind_)
          .mergeFrom(value).buildPartial();
    } else {
      kind_ = value;
    }
    kindCase_ = 5;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
   */
  private void clearSimple() {
    if (kindCase_ == 5) {
      kindCase_ = 0;
      kind_ = null;
    }
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrType prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrType}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrType, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrType)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrType.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public KindCase
        getKindCase() {
      return instance.getKindCase();
    }

    public Builder clearKind() {
      copyOnWrite();
      instance.clearKind();
      return this;
    }


    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
     */
    @java.lang.Override
    public boolean hasLegacySimple() {
      return instance.hasLegacySimple();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy getLegacySimple() {
      return instance.getLegacySimple();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
     */
    public Builder setLegacySimple(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy value) {
      copyOnWrite();
      instance.setLegacySimple(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
     */
    public Builder setLegacySimple(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy.Builder builderForValue) {
      copyOnWrite();
      instance.setLegacySimple(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
     */
    public Builder mergeLegacySimple(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy value) {
      copyOnWrite();
      instance.mergeLegacySimple(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
     */
    public Builder clearLegacySimple() {
      copyOnWrite();
      instance.clearLegacySimple();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
     */
    @java.lang.Override
    public boolean hasDynamic() {
      return instance.hasDynamic();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType getDynamic() {
      return instance.getDynamic();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
     */
    public Builder setDynamic(org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType value) {
      copyOnWrite();
      instance.setDynamic(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
     */
    public Builder setDynamic(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType.Builder builderForValue) {
      copyOnWrite();
      instance.setDynamic(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
     */
    public Builder mergeDynamic(org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType value) {
      copyOnWrite();
      instance.mergeDynamic(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
     */
    public Builder clearDynamic() {
      copyOnWrite();
      instance.clearDynamic();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
     */
    @java.lang.Override
    public boolean hasDnn() {
      return instance.hasDnn();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType getDnn() {
      return instance.getDnn();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
     */
    public Builder setDnn(org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType value) {
      copyOnWrite();
      instance.setDnn(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
     */
    public Builder setDnn(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType.Builder builderForValue) {
      copyOnWrite();
      instance.setDnn(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
     */
    public Builder mergeDnn(org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType value) {
      copyOnWrite();
      instance.mergeDnn(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
     */
    public Builder clearDnn() {
      copyOnWrite();
      instance.clearDnn();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
     */
    @java.lang.Override
    public boolean hasSimple() {
      return instance.hasSimple();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType getSimple() {
      return instance.getSimple();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
     */
    public Builder setSimple(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType value) {
      copyOnWrite();
      instance.setSimple(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
     */
    public Builder setSimple(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType.Builder builderForValue) {
      copyOnWrite();
      instance.setSimple(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
     */
    public Builder mergeSimple(org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType value) {
      copyOnWrite();
      instance.mergeSimple(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
     */
    public Builder clearSimple() {
      copyOnWrite();
      instance.clearSimple();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrType)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrType();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "kind_",
            "kindCase_",
            org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType.class,
            org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType.class,
          };
          java.lang.String info =
              "\u0004\u0004\u0001\u0000\u0001\u0005\u0004\u0000\u0000\u0003\u0001\u043c\u0000\u0002" +
              "\u043c\u0000\u0004<\u0000\u0005\u043c\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrType.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrType>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrType)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrType DEFAULT_INSTANCE;
  static {
    IrType defaultInstance = new IrType();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrType.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrType> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrType> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
