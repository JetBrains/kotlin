RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public? final? [ResolvedTo(COMPANION_GENERATION)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public? final? [ResolvedTo(SUPER_TYPES)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


TYPES:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public? final? [ResolvedTo(TYPES)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


STATUS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public final [ResolvedTo(STATUS)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public final [ResolvedTo(CONTRACTS)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : UsedInterface {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                LAZY_super<<implicit>>
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(BODY_RESOLVE)] class Local : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Local] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=<local>/u] u: R|one/two/UsedClass|): R|<local>/Local| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val u: R|one/two/UsedClass| = R|<local>/u|
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Local] get(): R|one/two/UsedClass|

            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] resolveTypeFromLocalClassConstructorScript.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-resolveTypeFromLocalClassConstructorScript.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UnusedClass : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] interface UsedInterface : R|kotlin/Any| {
        }

        public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol one.two.<script-resolveTypeFromLocalClassConstructorScript.kts>, ScriptTopLevelDeclaration=true] class UsedClass : R|one/two/UsedInterface| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(BODY_RESOLVE)] class Local : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Local] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=<local>/u] u: R|one/two/UsedClass|): R|<local>/Local| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val u: R|one/two/UsedClass| = R|<local>/u|
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Local] get(): R|one/two/UsedClass|

            }

        }

