/inlining_captured.kt:(155,166): info: Generated Viper text for capture_arg:
method global$fun_capture_arg$fun_take$fun_take$T_Int$return$T_Int$return$T_Int(local$g: Ref)
  returns (ret$0: Ref)
  requires acc(local$g.special$function_object_call_counter, write)
  requires special$duplicable(local$g)
  ensures acc(local$g.special$function_object_call_counter, write)
  ensures old(local$g.special$function_object_call_counter) <=
    local$g.special$function_object_call_counter
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var anonymous$1: Ref
  var anonymous$2: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$g), dom$RuntimeType$functionType())
  anonymous$0 := dom$RuntimeType$intToRef(0)
  special$invoke_function_object(local$g)
  anonymous$2 := anonymous$1
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2), dom$RuntimeType$intType())
  ret$2 := anonymous$2
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(226,237): info: Generated Viper text for capture_var:
method global$fun_capture_var$fun_take$$return$T_Int() returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var local0$x: Ref
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  local0$x := dom$RuntimeType$intToRef(1)
  anonymous$0 := dom$RuntimeType$intToRef(0)
  ret$2 := special$plusInts(anonymous$0, local0$x)
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(297,315): info: Generated Viper text for capture_and_shadow:
method global$fun_capture_and_shadow$fun_take$T_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var local2$y: Ref
  var local2$x: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$intType())
  anonymous$0 := dom$RuntimeType$intToRef(0)
  local2$y := local$x
  local2$x := dom$RuntimeType$intToRef(1)
  ret$2 := special$plusInts(special$plusInts(anonymous$0, local2$x), local2$y)
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(518,535): info: Generated Viper text for capture_var_clash:
method global$fun_capture_var_clash$fun_take$T_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var local1$x: Ref
  var anonymous$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$intType())
  local1$x := dom$RuntimeType$intToRef(1)
  anonymous$0 := dom$RuntimeType$intToRef(0)
  ret$2 := special$timesInts(anonymous$0, local$x)
  goto label$ret$2
  label label$ret$2
  anonymous$1 := ret$2
  ret$1 := special$plusInts(anonymous$1, local1$x)
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(593,617): info: Generated Viper text for capture_and_shadow_clash:
method global$fun_capture_and_shadow_clash$fun_take$T_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var local1$x: Ref
  var anonymous$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var local2$y: Ref
  var local2$x: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$intType())
  local1$x := dom$RuntimeType$intToRef(1)
  anonymous$0 := dom$RuntimeType$intToRef(0)
  local2$y := local$x
  local2$x := dom$RuntimeType$intToRef(2)
  ret$2 := special$plusInts(special$plusInts(local2$x, local2$y), anonymous$0)
  goto label$ret$2
  label label$ret$2
  anonymous$1 := ret$2
  ret$1 := special$plusInts(anonymous$1, local1$x)
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(727,750): info: Generated Viper text for nested_lambda_shadowing:
method global$fun_nested_lambda_shadowing$fun_take$T_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var local1$x: Ref
  var anonymous$2: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var ret$3: Ref
  var local3$x: Ref
  var anonymous$3: Ref
  var ret$4: Ref
  var anonymous$1: Ref
  var local4$x: Ref
  var local2$y: Ref
  var local2$x: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$intType())
  local1$x := dom$RuntimeType$intToRef(1)
  anonymous$0 := dom$RuntimeType$intToRef(0)
  local3$x := dom$RuntimeType$intToRef(1)
  anonymous$1 := dom$RuntimeType$intToRef(0)
  local4$x := dom$RuntimeType$intToRef(3)
  ret$4 := special$plusInts(local4$x, anonymous$1)
  goto label$ret$4
  label label$ret$4
  anonymous$3 := ret$4
  ret$3 := special$plusInts(anonymous$3, local3$x)
  goto label$ret$3
  label label$ret$3
  local2$y := local$x
  local2$x := dom$RuntimeType$intToRef(4)
  ret$2 := special$plusInts(special$plusInts(local2$x, local2$y), anonymous$0)
  goto label$ret$2
  label label$ret$2
  anonymous$2 := ret$2
  ret$1 := special$plusInts(anonymous$2, local1$x)
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_captured.kt:(1025,1043): info: Generated Viper text for call_double_invoke:
method global$fun_call_double_invoke$fun_take$T_Int$return$T_Int(local$x: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var local2$x: Ref
  var ret$3: Ref
  var anonymous$1: Ref
  var local3$x: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$x), dom$RuntimeType$intType())
  anonymous$0 := dom$RuntimeType$intToRef(0)
  local2$x := anonymous$0
  ret$2 := local2$x
  goto label$ret$2
  label label$ret$2
  anonymous$1 := dom$RuntimeType$intToRef(1)
  local3$x := anonymous$1
  ret$3 := local3$x
  goto label$ret$3
  label label$ret$3
  ret$1 := ret$3
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}
