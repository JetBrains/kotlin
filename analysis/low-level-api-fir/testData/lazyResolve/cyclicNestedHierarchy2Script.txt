RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : D {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : C.CC {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : D {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : C.CC {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : D {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : C.CC {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : D {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(COMPANION_GENERATION)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : C.CC {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(CONTRACTS)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(CONSTANT_EVALUATION)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<D>
            }

            public open [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor(): R|D| {
                LAZY_super<C.CC>
            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public [ResolvedTo(STATUS)] [ContainingClassKey=C] constructor(): R|C| {
                LAZY_super<R|D|>
            }

            public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public [ResolvedTo(STATUS)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public open [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=D] constructor(): R|D| {
                super<R|C.CC|>()
            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] cyclicNestedHierarchy2Script.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-cyclicNestedHierarchy2Script.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class C : <ERROR TYPE REF: Loop in supertypes involving /C> {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=C] constructor(): R|C| {
                super<R|D|>()
            }

            public open [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class CC : <ERROR TYPE REF: Loop in supertypes involving /C.CC> {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=CC] constructor(): R|C.CC| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        public open [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-cyclicNestedHierarchy2Script.kts>] class D : <ERROR TYPE REF: Loop in supertypes involving /D> {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=D] constructor(): R|D| {
                super<R|C.CC|>()
            }

        }

