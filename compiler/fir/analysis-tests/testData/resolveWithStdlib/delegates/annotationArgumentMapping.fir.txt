FILE: annotationArgumentMapping.kt
    public final class FirAnnotationArgumentMappingBuilder : R|kotlin/Any| {
        public constructor(): R|FirAnnotationArgumentMappingBuilder| {
            super<R|kotlin/Any|>()
        }

        public final val mapping: R|kotlin/collections/MutableMap<kotlin/String, kotlin/String>| = R|kotlin/collections/mutableMapOf|<R|kotlin/String|, R|kotlin/String|>()
            public get(): R|kotlin/collections/MutableMap<kotlin/String, kotlin/String>|

        public final fun build(): R|FirAnnotationArgumentMapping| {
            ^build R|/FirAnnotationArgumentMapping.FirAnnotationArgumentMapping|(this@R|/FirAnnotationArgumentMappingBuilder|.R|/FirAnnotationArgumentMappingBuilder.mapping|)
        }

    }
    public final fun buildAnnotationArgumentMapping(init: R|FirAnnotationArgumentMappingBuilder.() -> kotlin/Unit|): R|FirAnnotationArgumentMapping|
        [R|Contract description]
         <
            CallsInPlace(init, EXACTLY_ONCE)
        >
     {
        [StubStatement]
        ^buildAnnotationArgumentMapping R|/FirAnnotationArgumentMappingBuilder.FirAnnotationArgumentMappingBuilder|().R|kotlin/apply|<R|FirAnnotationArgumentMappingBuilder|>(R|<local>/init|).R|/FirAnnotationArgumentMappingBuilder.build|()
    }
    public final class FirAnnotationArgumentMapping : R|kotlin/Any| {
        public constructor(mapping: R|kotlin/collections/Map<kotlin/String, kotlin/String>|): R|FirAnnotationArgumentMapping| {
            super<R|kotlin/Any|>()
        }

    }
    public final class ValueParameter : R|kotlin/Any| {
        public constructor(name: R|kotlin/String|): R|ValueParameter| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

    }
    public final class Argument : R|kotlin/Any| {
        public constructor(name: R|kotlin/String|): R|Argument| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

    }
    public final fun createArgumentMapping(valueParameters: R|kotlin/collections/List<ValueParameter>?|, arguments: R|kotlin/collections/List<Argument>|): R|FirAnnotationArgumentMapping| {
        ^createArgumentMapping R|/buildAnnotationArgumentMapping|(<L> = build@fun R|FirAnnotationArgumentMappingBuilder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline, kind=EXACTLY_ONCE>  {
            lval parameterByName: R|kotlin/collections/Map<kotlin/String, ValueParameter>?|by R|kotlin/lazy|<R|kotlin/collections/Map<kotlin/String, ValueParameter>?|>(<L> = lazy@fun <anonymous>(): R|kotlin/collections/Map<kotlin/String, ValueParameter>?| <inline=NoInline>  {
                lval valueParameters: R|kotlin/collections/List<ValueParameter>| = R|<local>/valueParameters| ?: ^@lazy Null(null)
                ^ R|<local>/valueParameters|.R|kotlin/collections/associateBy|<R|ValueParameter|, R|kotlin/String|>(<L> = associateBy@fun <anonymous>(it: R|ValueParameter|): R|kotlin/String| <inline=Inline, kind=UNKNOWN>  {
                    ^ R|<local>/it|.R|/ValueParameter.name|
                }
                )
            }
            )
            R|<local>/arguments|.R|kotlin/collections/mapNotNull|<R|Argument|, R|kotlin/Pair<kotlin/String, kotlin/String>|>(<L> = mapNotNull@fun <anonymous>(it: R|Argument|): R|kotlin/Pair<kotlin/String, kotlin/String>?| <inline=Inline, kind=UNKNOWN>  {
                lval name: R|kotlin/String| = R|<local>/it|.R|/Argument.name|
                lval value: R|kotlin/String| = R|<local>/parameterByName|?.{ $subj$.R|SubstitutionOverride<kotlin/collections/Map.get: R|ValueParameter?|>|(R|<local>/name|) }?.{ $subj$.R|/ValueParameter.name| } ?: ^@mapNotNull Null(null)
                ^ R|<local>/name|.R|kotlin/to|<R|kotlin/String|, R|kotlin/String|>(R|<local>/value|)
            }
            ).R|kotlin/collections/toMap|<R|kotlin/String|, R|kotlin/String|, R|kotlin/collections/MutableMap<kotlin/String, kotlin/String>|>(this@R|special/anonymous|.R|/FirAnnotationArgumentMappingBuilder.mapping|)
        }
        )
    }
