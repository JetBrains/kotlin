RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] statement.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-statement.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-statement.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-statement.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-statement.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(COMPANION_GENERATION)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-statement.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(SUPER_TYPES)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-statement.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(TYPES)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-statement.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(STATUS)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-statement.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-statement.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(CONTRACTS)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-statement.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-statement.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(CONSTANT_EVALUATION)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-statement.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] var version: String = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] get(): String
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Builder] set([ResolvedTo(RAW_FIR)] value: String): R|kotlin/Unit|

            public? final? [ResolvedTo(RAW_FIR)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(RAW_FIR)] action: ( Builder.() -> Unit )): <implicit> { LAZY_BLOCK }

        [ResolvedTo(ANNOTATION_ARGUMENTS)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-statement.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(CONTRACTS)] var version: R|kotlin/String| = LAZY_EXPRESSION
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Builder] set([ResolvedTo(CONTRACTS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(CONTRACTS)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        [ResolvedTo(BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] init {
            R|/build|(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun [ResolvedTo(BODY_RESOLVE)] R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
                this@R|special/anonymous|.R|/Builder.version| = String(123)
                local final [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|<local>/A| {
                        super<R|kotlin/Any|>()
                    }

                    public final [ResolvedTo(BODY_RESOLVE)] fun doo(): R|kotlin/Unit| {
                    }

                }

                this@R|special/anonymous|.R|/Builder.execute|()
            }
            )
        }

        public? final? [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] val builder: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] [ScriptTopLevelDeclaration=true] init {
            builder#.version# = String()
        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] statement.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-statement.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-statement.kts>, ScriptTopLevelDeclaration=true] class Builder : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] var version: R|kotlin/String| = String()
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(BODY_RESOLVE)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] fun build([ResolvedTo(BODY_RESOLVE)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        [ResolvedTo(BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] init {
            R|/build|(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun [ResolvedTo(BODY_RESOLVE)] R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
                this@R|special/anonymous|.R|/Builder.version| = String(123)
                local final [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|<local>/A| {
                        super<R|kotlin/Any|>()
                    }

                    public final [ResolvedTo(BODY_RESOLVE)] fun doo(): R|kotlin/Unit| {
                    }

                }

                this@R|special/anonymous|.R|/Builder.execute|()
            }
            )
        }

        public final [ResolvedTo(BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun [ResolvedTo(BODY_RESOLVE)] R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(BODY_RESOLVE)] get(): R|Builder|

        [ResolvedTo(BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] init {
            R|/builder|.R|/Builder.execute|()
        }

        [ResolvedTo(BODY_RESOLVE)] [ScriptTopLevelDeclaration=true] init {
            R|/builder|.R|/Builder.version| = String()
        }

