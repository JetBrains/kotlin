KtNameReferenceExpression(91,98): 'MyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) sealed class MyClass

KtCallExpression(101,107): 'TODO()'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(101,105): 'TODO'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in kotlin) inline fun TODO(): kotlin.Nothing

KtNameReferenceExpression(167,174): 'MyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in MyClass) constructor()

KtNameReferenceExpression(224,227): 'Int'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in kotlin) class Intprivate constructor : kotlin.Number(), kotlin.Comparable<kotlin.Int>, java.io.Serializable

KtNameReferenceExpression(254,261): 'MyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) sealed class MyClass

KtNameReferenceExpression(281,282): 'X'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in <local>: id) X

KtNameReferenceExpression(285,286): 'X'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in <local>: id) X

KtCallExpression(289,295): 'TODO()'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(289,293): 'TODO'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in kotlin) inline fun TODO(): kotlin.Nothing

KtNameReferenceExpression(301,308): 'MyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) sealed class MyClass

KtCallExpression(321,341): 'expectInt(MAX_VALUE)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(321,330): 'expectInt'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectInt(x: kotlin.Int)

KtNameReferenceExpression(331,340): 'MAX_VALUE'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in kotlin.Int.Companion) const val MAX_VALUE: kotlin.Int

KtCallExpression(347,365): 'expectMyClass(FOO)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(347,360): 'expectMyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectMyClass(x: MyClass)

KtNameReferenceExpression(361,364): 'FOO'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in MyClass.Companion) val FOO: MyClass

KtCallExpression(370,392): 'expectMyClass(id(FOO))'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(370,383): 'expectMyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectMyClass(x: MyClass)

KtCallExpression(384,391): 'id(FOO)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(384,386): 'id'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun <X> id(x: X): X

KtNameReferenceExpression(387,390): 'FOO'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in MyClass.Companion) val FOO: MyClass

KtCallExpression(398,430): 'expectMyClass(FOR_TYPE_MISMATCH)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(398,411): 'expectMyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectMyClass(x: MyClass)

KtNameReferenceExpression(412,429): 'FOR_TYPE_MISMATCH'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in MyClass.Companion) val FOR_TYPE_MISMATCH: kotlin.String

KtCallExpression(435,471): 'expectMyClass(id(FOR_TYPE_MISMATCH))'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(435,448): 'expectMyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectMyClass(x: MyClass)

KtCallExpression(449,470): 'id(FOR_TYPE_MISMATCH)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(449,451): 'id'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun <X> id(x: X): X

KtNameReferenceExpression(452,469): 'FOR_TYPE_MISMATCH'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in MyClass.Companion) val FOR_TYPE_MISMATCH: kotlin.String

KtCallExpression(477,495): 'expectMyClass(Bar)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(477,490): 'expectMyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectMyClass(x: MyClass)

KtNameReferenceExpression(491,494): 'Bar'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in MyClass) object Bar : MyClass()

KtCallExpression(500,522): 'expectMyClass(id(Bar))'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(500,513): 'expectMyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectMyClass(x: MyClass)

KtCallExpression(514,521): 'id(Bar)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(514,516): 'id'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun <X> id(x: X): X

KtNameReferenceExpression(517,520): 'Bar'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in MyClass) object Bar : MyClass()

KtCallExpression(528,558): 'expectMyClass(ForTypeMismatch)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(528,541): 'expectMyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectMyClass(x: MyClass)

KtNameReferenceExpression(542,557): 'ForTypeMismatch'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in MyClass) object ForTypeMismatch

KtCallExpression(563,597): 'expectMyClass(id(ForTypeMismatch))'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(563,576): 'expectMyClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun expectMyClass(x: MyClass)

KtCallExpression(577,596): 'id(ForTypeMismatch)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(577,579): 'id'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) fun <X> id(x: X): X

KtNameReferenceExpression(580,595): 'ForTypeMismatch'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in MyClass) object ForTypeMismatch

KtNameReferenceExpression(603,612): 'JavaClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in ROOT) open class JavaClass

KtCallExpression(613,638): 'expectJavaClass(INSTANCE)'
  KtInvokeFunctionReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      Nothing (Unresolved reference)

KtNameReferenceExpression(613,628): 'expectJavaClass'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: false
    symbols:
      (in JavaClass) open fun expectJavaClass(j: JavaClass!)

KtNameReferenceExpression(629,637): 'INSTANCE'
  KtSimpleNameReference:
    isImplicitReferenceToCompanion: false
    usesContextSensitiveResolution: true
    symbols:
      (in JavaClass) var INSTANCE: JavaClass!