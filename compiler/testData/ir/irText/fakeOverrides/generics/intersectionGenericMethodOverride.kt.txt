class A : Java1, Java2 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class B : Java1, Java2 {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun <T : Any?> bar(): T {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override fun <T : Any?> foo(a: T) {
  }

}

abstract class C : Java1, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class D : Java1, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun <T : Any?> bar(): T {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

  override fun <T : Any?> foo(a: T) {
  }

}

class E : Java1, Java2, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

}

class F : Java1, Java2, KotlinInterface {
  constructor() /* primary */ {
    super/*Java1*/()
    /* <init>() */

  }

  override fun <T : Any?> bar(): T {
    return CHECK_NOT_NULL<Nothing>(arg0 = null)
  }

}

interface KotlinInterface {
  abstract fun <T : Any?> bar(): T

  abstract fun <T : Any?> foo(a: T)

}

fun test(a: A, b: B, c: C, d: D, e: E, f: F) {
  val k: Int = a.bar<@FlexibleNullability Int?>() /*!! Int */
  val k3: Any = a.bar<@FlexibleNullability Any?>() /*!! Any */
  val k4: Nothing = a.bar<@FlexibleNullability Nothing?>() /*!! Nothing */
  a.foo<@FlexibleNullability Int?>(a = 1)
  a.foo<Nothing?>(a = null)
  a.foo<@FlexibleNullability Int?>(a = null)
  a.foo<@FlexibleNullability List<Nothing?>?>(a = listOf<Nothing?>(element = null))
  val k5: Int? = b.bar<Int?>()
  val k6: Any = b.bar<Any>()
  b.foo<Int>(a = 1)
  b.foo<Nothing?>(a = null)
  b.foo<Int?>(a = null)
  b.foo<List<Nothing?>>(a = listOf<Nothing?>(element = null))
  val k7: Int? = c.bar<Int?>()
  val k8: Any = c.bar<Any>()
  c.foo<@FlexibleNullability Int?>(a = 1)
  c.foo<Nothing?>(a = null)
  c.foo<@FlexibleNullability Int?>(a = null)
  c.foo<@FlexibleNullability List<Nothing?>?>(a = listOf<Nothing?>(element = null))
  val k9: Int? = d.bar<Int?>()
  val k10: Any = d.bar<Any>()
  d.foo<Int>(a = 1)
  d.foo<Nothing?>(a = null)
  d.foo<Int?>(a = null)
  d.foo<List<Nothing?>>(a = listOf<Nothing?>(element = null))
  val k11: Int? = e.bar<Int?>()
  e.foo<@FlexibleNullability Int?>(a = 1)
  e.foo<Nothing?>(a = null)
  val k12: Any? = f.bar<Any?>()
  f.foo<@FlexibleNullability Int?>(a = 1)
}
