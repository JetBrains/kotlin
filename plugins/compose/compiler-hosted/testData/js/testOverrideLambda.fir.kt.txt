// MODULE: lib
// FILE: module_lib_testOverrideLambda.kt

val Test$stableprop: Int
  field = 0

@StabilityInferred(parameters = 1)
class Test : ITest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  @Composable
  override fun test(lambda: Function0<Unit>, /* var */ $composer: Composer?, $changed: Int) {
    var $composer: Composer? = $composer
    { // BLOCK
      $composer = $composer.startRestartGroup(key = 1182334366)
      sourceInformation(composer = $composer, sourceInformation = "C(test):module_lib_testOverrideLambda.kt")
    }
    when {
      $composer.shouldExecute(parametersChanged = EQEQ(arg0 = $changed.and(other = 1), arg1 = 0).not(), flags = $changed.and(other = 1)) -> { // BLOCK
        when {
          isTraceInProgress() -> traceEventStart(key = 1182334366, dirty1 = $changed, dirty2 = -1, info = "Test.test (module_lib_testOverrideLambda.kt:12)")
        }
        println(message = "in test")
        when {
          isTraceInProgress() -> traceEventEnd()
        }
      }
      else -> $composer.skipToGroupEnd()
    }
    { // BLOCK
      val tmp_0: Test = <this>
      { // BLOCK
        val tmp_1: ScopeUpdateScope? = $composer.endRestartGroup()
        when {
          EQEQ(arg0 = tmp_1, arg1 = null) -> null
          else -> tmp_1.updateScope(block = local fun <anonymous>($composer: Composer?, $force: Int) {
            return tmp_0.test(lambda = lambda, $composer = $composer, $changed = updateChangedFlags(flags = $changed.or(other = 1)))
          }
)
        }
      }
    }
  }

}

interface ITest {
  @Composable
  abstract fun test(lambda: Function0<Unit>, /* var */ $composer: Composer?, $changed: Int)

}

@Deprecated(message = "Synthetic declaration generated by the Compose compiler. Please do not use.", level = DeprecationLevel.HIDDEN)
fun Test$stableprop_getter(): Int {
  return #Test$stable
}

// MODULE: main
// FILE: module_main_testOverrideLambda.kt

@Composable
fun Content(/* var */ $composer: Composer?, $changed: Int) {
  var $composer: Composer? = $composer
  { // BLOCK
    $composer = $composer.startRestartGroup(key = -519357155)
    sourceInformation(composer = $composer, sourceInformation = "C(Content)22@126L2,22@121L7:module_main_testOverrideLambda.kt")
  }
  when {
    $composer.shouldExecute(parametersChanged = EQEQ(arg0 = $changed, arg1 = 0).not(), flags = $changed.and(other = 1)) -> { // BLOCK
      when {
        isTraceInProgress() -> traceEventStart(key = -519357155, dirty1 = $changed, dirty2 = -1, info = "Content (module_main_testOverrideLambda.kt:21)")
      }
      Test().test(lambda = { // BLOCK
        sourceInformationMarkerStart(composer = $composer, key = -886018593, sourceInformation = "CC(remember):module_main_testOverrideLambda.kt#9igjgp")
        val tmp_0: Function0<Unit> = cache<Function0<Unit>>(/* <this> = $composer, */ invalid = false, block = local fun <anonymous>(): Function0<Unit> {
          return local fun <anonymous>() {
            return Unit
          }

        }
)
        sourceInformationMarkerEnd(composer = $composer)
        tmp_0
      }, $composer = $composer, $changed = 6.or(other = Test$stableprop_getter().shl(bitCount = 3)))
      when {
        isTraceInProgress() -> traceEventEnd()
      }
    }
    else -> $composer.skipToGroupEnd()
  }
  { // BLOCK
    { // BLOCK
      val tmp_1: ScopeUpdateScope? = $composer.endRestartGroup()
      when {
        EQEQ(arg0 = tmp_1, arg1 = null) -> null
        else -> tmp_1.updateScope(block = local fun <anonymous>($composer: Composer?, $force: Int) {
          return Content($composer = $composer, $changed = updateChangedFlags(flags = $changed.or(other = 1)))
        }
)
      }
    }
  }
}

fun box(): String {
  return "OK"
}

