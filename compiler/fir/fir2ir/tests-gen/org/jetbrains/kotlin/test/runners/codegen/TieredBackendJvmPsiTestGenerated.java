/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
public class TieredBackendJvmPsiTestGenerated extends AbstractTieredBackendJvmPsiTest {
  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests")
  @TestDataPath("$PROJECT_ROOT")
  public class Tests {
    @Test
    @TestMetadata("addTestForFalsePositiveDuplicateLabelInWhen.kt")
    public void testAddTestForFalsePositiveDuplicateLabelInWhen() {
      runTest("compiler/testData/diagnostics/tests/addTestForFalsePositiveDuplicateLabelInWhen.kt");
    }

    @Test
    @TestMetadata("alwaysRenderFullExpansions.kt")
    public void testAlwaysRenderFullExpansions() {
      runTest("compiler/testData/diagnostics/tests/alwaysRenderFullExpansions.kt");
    }

    @Test
    @TestMetadata("ambiguityWithVararg.kt")
    public void testAmbiguityWithVararg() {
      runTest("compiler/testData/diagnostics/tests/ambiguityWithVararg.kt");
    }

    @Test
    @TestMetadata("annotationArgumentWithAliasedArrayType.kt")
    public void testAnnotationArgumentWithAliasedArrayType() {
      runTest("compiler/testData/diagnostics/tests/annotationArgumentWithAliasedArrayType.kt");
    }

    @Test
    @TestMetadata("AnonymousInitializerVarAndConstructor.kt")
    public void testAnonymousInitializerVarAndConstructor() {
      runTest("compiler/testData/diagnostics/tests/AnonymousInitializerVarAndConstructor.kt");
    }

    @Test
    @TestMetadata("AssignToArrayElement.kt")
    public void testAssignToArrayElement() {
      runTest("compiler/testData/diagnostics/tests/AssignToArrayElement.kt");
    }

    @Test
    @TestMetadata("assignmentsAndSmartcastsToUnrelatedProperty.kt")
    public void testAssignmentsAndSmartcastsToUnrelatedProperty() {
      runTest("compiler/testData/diagnostics/tests/assignmentsAndSmartcastsToUnrelatedProperty.kt");
    }

    @Test
    @TestMetadata("breakLoopsBug.kt")
    public void testBreakLoopsBug() {
      runTest("compiler/testData/diagnostics/tests/breakLoopsBug.kt");
    }

    @Test
    @TestMetadata("breakLoopsBug2.kt")
    public void testBreakLoopsBug2() {
      runTest("compiler/testData/diagnostics/tests/breakLoopsBug2.kt");
    }

    @Test
    @TestMetadata("Builders.kt")
    public void testBuilders() {
      runTest("compiler/testData/diagnostics/tests/Builders.kt");
    }

    @Test
    @TestMetadata("callingSuspensionFunctionFromSuspendLambdas.kt")
    public void testCallingSuspensionFunctionFromSuspendLambdas() {
      runTest("compiler/testData/diagnostics/tests/callingSuspensionFunctionFromSuspendLambdas.kt");
    }

    @Test
    @TestMetadata("capturedTypesSubtyping.kt")
    public void testCapturedTypesSubtyping() {
      runTest("compiler/testData/diagnostics/tests/capturedTypesSubtyping.kt");
    }

    @Test
    @TestMetadata("comparingCallableReferencesWithInstanceOfJavaClass.kt")
    public void testComparingCallableReferencesWithInstanceOfJavaClass() {
      runTest("compiler/testData/diagnostics/tests/comparingCallableReferencesWithInstanceOfJavaClass.kt");
    }

    @Test
    @TestMetadata("comparisonOfGenericInterfaceWithGenericClass.kt")
    public void testComparisonOfGenericInterfaceWithGenericClass() {
      runTest("compiler/testData/diagnostics/tests/comparisonOfGenericInterfaceWithGenericClass.kt");
    }

    @Test
    @TestMetadata("compilerCrashInTypeParameterBoundsChecker.kt")
    public void testCompilerCrashInTypeParameterBoundsChecker() {
      runTest("compiler/testData/diagnostics/tests/compilerCrashInTypeParameterBoundsChecker.kt");
    }

    @Test
    @TestMetadata("compilerRequiredAnnotationAsTypealias.kt")
    public void testCompilerRequiredAnnotationAsTypealias() {
      runTest("compiler/testData/diagnostics/tests/compilerRequiredAnnotationAsTypealias.kt");
    }

    @Test
    @TestMetadata("confirmObsoleteAssignmentCanBeReplacedWithOperator.kt")
    public void testConfirmObsoleteAssignmentCanBeReplacedWithOperator() {
      runTest("compiler/testData/diagnostics/tests/confirmObsoleteAssignmentCanBeReplacedWithOperator.kt");
    }

    @Test
    @TestMetadata("confirmObsoleteTypealiasExpansionInconsistencies.kt")
    public void testConfirmObsoleteTypealiasExpansionInconsistencies() {
      runTest("compiler/testData/diagnostics/tests/confirmObsoleteTypealiasExpansionInconsistencies.kt");
    }

    @Test
    @TestMetadata("delegatedMemberHidesSupertypeOverride.kt")
    public void testDelegatedMemberHidesSupertypeOverride() {
      runTest("compiler/testData/diagnostics/tests/delegatedMemberHidesSupertypeOverride.kt");
    }

    @Test
    @TestMetadata("derivedIntersectionPropertyShadowsBaseClassField.kt")
    public void testDerivedIntersectionPropertyShadowsBaseClassField() {
      runTest("compiler/testData/diagnostics/tests/derivedIntersectionPropertyShadowsBaseClassField.kt");
    }

    @Test
    @TestMetadata("DiamondFunction.kt")
    public void testDiamondFunction() {
      runTest("compiler/testData/diagnostics/tests/DiamondFunction.kt");
    }

    @Test
    @TestMetadata("DiamondFunctionGeneric.kt")
    public void testDiamondFunctionGeneric() {
      runTest("compiler/testData/diagnostics/tests/DiamondFunctionGeneric.kt");
    }

    @Test
    @TestMetadata("DiamondProperty.kt")
    public void testDiamondProperty() {
      runTest("compiler/testData/diagnostics/tests/DiamondProperty.kt");
    }

    @Test
    @TestMetadata("dnnAsSuperTypeTypeArgument.kt")
    public void testDnnAsSuperTypeTypeArgument() {
      runTest("compiler/testData/diagnostics/tests/dnnAsSuperTypeTypeArgument.kt");
    }

    @Test
    @TestMetadata("Dollar.kt")
    public void testDollar() {
      runTest("compiler/testData/diagnostics/tests/Dollar.kt");
    }

    @Test
    @TestMetadata("duplicateDefaultValuesSubsumedIntersection.kt")
    public void testDuplicateDefaultValuesSubsumedIntersection() {
      runTest("compiler/testData/diagnostics/tests/duplicateDefaultValuesSubsumedIntersection.kt");
    }

    @Test
    @TestMetadata("duplicateDirrectOverriddenCallables.kt")
    public void testDuplicateDirrectOverriddenCallables() {
      runTest("compiler/testData/diagnostics/tests/duplicateDirrectOverriddenCallables.kt");
    }

    @Test
    @TestMetadata("duplicateParameterName.kt")
    public void testDuplicateParameterName() {
      runTest("compiler/testData/diagnostics/tests/duplicateParameterName.kt");
    }

    @Test
    @TestMetadata("duplicateParameterNameMinimized.kt")
    public void testDuplicateParameterNameMinimized() {
      runTest("compiler/testData/diagnostics/tests/duplicateParameterNameMinimized.kt");
    }

    @Test
    @TestMetadata("duplicateParameterNameSimplified.kt")
    public void testDuplicateParameterNameSimplified() {
      runTest("compiler/testData/diagnostics/tests/duplicateParameterNameSimplified.kt");
    }

    @Test
    @TestMetadata("EnabledMultiDollarInterpolation.kt")
    public void testEnabledMultiDollarInterpolation() {
      runTest("compiler/testData/diagnostics/tests/EnabledMultiDollarInterpolation.kt");
    }

    @Test
    @TestMetadata("equalityComparisonToSelf.kt")
    public void testEqualityComparisonToSelf() {
      runTest("compiler/testData/diagnostics/tests/equalityComparisonToSelf.kt");
    }

    @Test
    @TestMetadata("expressionsInQaSelectorsWithElvis.kt")
    public void testExpressionsInQaSelectorsWithElvis() {
      runTest("compiler/testData/diagnostics/tests/expressionsInQaSelectorsWithElvis.kt");
    }

    @Test
    @TestMetadata("extensionShadowedByMember.kt")
    public void testExtensionShadowedByMember() {
      runTest("compiler/testData/diagnostics/tests/extensionShadowedByMember.kt");
    }

    @Test
    @TestMetadata("extensionShadowedByMemberWithMpp.kt")
    public void testExtensionShadowedByMemberWithMpp() {
      runTest("compiler/testData/diagnostics/tests/extensionShadowedByMemberWithMpp.kt");
    }

    @Test
    @TestMetadata("falseNegativeDuplicateDefaultValues1.kt")
    public void testFalseNegativeDuplicateDefaultValues1() {
      runTest("compiler/testData/diagnostics/tests/falseNegativeDuplicateDefaultValues1.kt");
    }

    @Test
    @TestMetadata("falseNegativeDuplicateDefaultValues2.kt")
    public void testFalseNegativeDuplicateDefaultValues2() {
      runTest("compiler/testData/diagnostics/tests/falseNegativeDuplicateDefaultValues2.kt");
    }

    @Test
    @TestMetadata("falseNegativeDuplicateDefaultValues3.kt")
    public void testFalseNegativeDuplicateDefaultValues3() {
      runTest("compiler/testData/diagnostics/tests/falseNegativeDuplicateDefaultValues3.kt");
    }

    @Test
    @TestMetadata("falsePositiveRedundantVisibility.kt")
    public void testFalsePositiveRedundantVisibility() {
      runTest("compiler/testData/diagnostics/tests/falsePositiveRedundantVisibility.kt");
    }

    @Test
    @TestMetadata("fileDependencyRecursion.kt")
    public void testFileDependencyRecursion() {
      runTest("compiler/testData/diagnostics/tests/fileDependencyRecursion.kt");
    }

    @Test
    @TestMetadata("fixExpressionsInQaSelectors.kt")
    public void testFixExpressionsInQaSelectors() {
      runTest("compiler/testData/diagnostics/tests/fixExpressionsInQaSelectors.kt");
    }

    @Test
    @TestMetadata("fpRedundantProtected.kt")
    public void testFpRedundantProtected() {
      runTest("compiler/testData/diagnostics/tests/fpRedundantProtected.kt");
    }

    @Test
    @TestMetadata("implicitIntersection.kt")
    public void testImplicitIntersection() {
      runTest("compiler/testData/diagnostics/tests/implicitIntersection.kt");
    }

    @Test
    @TestMetadata("implicitNestedIntersection.kt")
    public void testImplicitNestedIntersection() {
      runTest("compiler/testData/diagnostics/tests/implicitNestedIntersection.kt");
    }

    @Test
    @TestMetadata("incDecInsideClasses.kt")
    public void testIncDecInsideClasses() {
      runTest("compiler/testData/diagnostics/tests/incDecInsideClasses.kt");
    }

    @Test
    @TestMetadata("incGenericExtensionProperty.kt")
    public void testIncGenericExtensionProperty() {
      runTest("compiler/testData/diagnostics/tests/incGenericExtensionProperty.kt");
    }

    @Test
    @TestMetadata("incrementDecrementOnFullyQualified.kt")
    public void testIncrementDecrementOnFullyQualified() {
      runTest("compiler/testData/diagnostics/tests/incrementDecrementOnFullyQualified.kt");
    }

    @Test
    @TestMetadata("InferNullabilityInThenBlock.kt")
    public void testInferNullabilityInThenBlock() {
      runTest("compiler/testData/diagnostics/tests/InferNullabilityInThenBlock.kt");
    }

    @Test
    @TestMetadata("intersectedVisibilitiesForAbstractPropertyAccessors.kt")
    public void testIntersectedVisibilitiesForAbstractPropertyAccessors() {
      runTest("compiler/testData/diagnostics/tests/intersectedVisibilitiesForAbstractPropertyAccessors.kt");
    }

    @Test
    @TestMetadata("intersectionWithMultipleDefaultsInJava.kt")
    public void testIntersectionWithMultipleDefaultsInJava() {
      runTest("compiler/testData/diagnostics/tests/intersectionWithMultipleDefaultsInJava.kt");
    }

    @Test
    @TestMetadata("intersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin.kt")
    public void testIntersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin() {
      runTest("compiler/testData/diagnostics/tests/intersectionWithMultipleDefaultsInJavaOverriddenByIntersectionInKotlin.kt");
    }

    @Test
    @TestMetadata("intersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed.kt")
    public void testIntersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed() {
      runTest("compiler/testData/diagnostics/tests/intersectionWithMultipleDefaultsInJavaWithAdditionalSymbolsAfterNonSubsumed.kt");
    }

    @Test
    @TestMetadata("k2IrParentIssue.kt")
    public void testK2IrParentIssue() {
      runTest("compiler/testData/diagnostics/tests/k2IrParentIssue.kt");
    }

    @Test
    @TestMetadata("kt11167.kt")
    public void testKt11167() {
      runTest("compiler/testData/diagnostics/tests/kt11167.kt");
    }

    @Test
    @TestMetadata("kt53.kt")
    public void testKt53() {
      runTest("compiler/testData/diagnostics/tests/kt53.kt");
    }

    @Test
    @TestMetadata("kt55666.kt")
    public void testKt55666() {
      runTest("compiler/testData/diagnostics/tests/kt55666.kt");
    }

    @Test
    @TestMetadata("kt56612.kt")
    public void testKt56612() {
      runTest("compiler/testData/diagnostics/tests/kt56612.kt");
    }

    @Test
    @TestMetadata("kt56665.kt")
    public void testKt56665() {
      runTest("compiler/testData/diagnostics/tests/kt56665.kt");
    }

    @Test
    @TestMetadata("kt57085.kt")
    public void testKt57085() {
      runTest("compiler/testData/diagnostics/tests/kt57085.kt");
    }

    @Test
    @TestMetadata("kt57175.kt")
    public void testKt57175() {
      runTest("compiler/testData/diagnostics/tests/kt57175.kt");
    }

    @Test
    @TestMetadata("kt57214.kt")
    public void testKt57214() {
      runTest("compiler/testData/diagnostics/tests/kt57214.kt");
    }

    @Test
    @TestMetadata("kt58583.kt")
    public void testKt58583() {
      runTest("compiler/testData/diagnostics/tests/kt58583.kt");
    }

    @Test
    @TestMetadata("labelNameClash.kt")
    public void testLabelNameClash() {
      runTest("compiler/testData/diagnostics/tests/labelNameClash.kt");
    }

    @Test
    @TestMetadata("LiteralAsResult.kt")
    public void testLiteralAsResult() {
      runTest("compiler/testData/diagnostics/tests/LiteralAsResult.kt");
    }

    @Test
    @TestMetadata("missingDependencyTypealias.kt")
    public void testMissingDependencyTypealias() {
      runTest("compiler/testData/diagnostics/tests/missingDependencyTypealias.kt");
    }

    @Test
    @TestMetadata("missingMultipleDefaultsOnTransitiveInheritance1.kt")
    public void testMissingMultipleDefaultsOnTransitiveInheritance1() {
      runTest("compiler/testData/diagnostics/tests/missingMultipleDefaultsOnTransitiveInheritance1.kt");
    }

    @Test
    @TestMetadata("multipleDefaultsIncorrectlyAllowed2.kt")
    public void testMultipleDefaultsIncorrectlyAllowed2() {
      runTest("compiler/testData/diagnostics/tests/multipleDefaultsIncorrectlyAllowed2.kt");
    }

    @Test
    @TestMetadata("noLibraryProvidersDuplication.kt")
    public void testNoLibraryProvidersDuplication() {
      runTest("compiler/testData/diagnostics/tests/noLibraryProvidersDuplication.kt");
    }

    @Test
    @TestMetadata("noLibraryProvidersDuplicationWithMpp.kt")
    public void testNoLibraryProvidersDuplicationWithMpp() {
      runTest("compiler/testData/diagnostics/tests/noLibraryProvidersDuplicationWithMpp.kt");
    }

    @Test
    @TestMetadata("noSymbolProvidersDuplicationInDiamond.kt")
    public void testNoSymbolProvidersDuplicationInDiamond() {
      runTest("compiler/testData/diagnostics/tests/noSymbolProvidersDuplicationInDiamond.kt");
    }

    @Test
    @TestMetadata("noUnusedOnDelegationWithProvider.kt")
    public void testNoUnusedOnDelegationWithProvider() {
      runTest("compiler/testData/diagnostics/tests/noUnusedOnDelegationWithProvider.kt");
    }

    @Test
    @TestMetadata("nonConstNotCall.kt")
    public void testNonConstNotCall() {
      runTest("compiler/testData/diagnostics/tests/nonConstNotCall.kt");
    }

    @Test
    @TestMetadata("obsoleteInsufficientDescription.kt")
    public void testObsoleteInsufficientDescription() {
      runTest("compiler/testData/diagnostics/tests/obsoleteInsufficientDescription.kt");
    }

    @Test
    @TestMetadata("OverrideFunctionWithParamDefaultValue.kt")
    public void testOverrideFunctionWithParamDefaultValue() {
      runTest("compiler/testData/diagnostics/tests/OverrideFunctionWithParamDefaultValue.kt");
    }

    @Test
    @TestMetadata("overrideNotNull_Fail.kt")
    public void testOverrideNotNull_Fail() {
      runTest("compiler/testData/diagnostics/tests/overrideNotNull_Fail.kt");
    }

    @Test
    @TestMetadata("overrideNotNull_Ok.kt")
    public void testOverrideNotNull_Ok() {
      runTest("compiler/testData/diagnostics/tests/overrideNotNull_Ok.kt");
    }

    @Test
    @TestMetadata("OverridenFunctionAndSpecifiedTypeParameter.kt")
    public void testOverridenFunctionAndSpecifiedTypeParameter() {
      runTest("compiler/testData/diagnostics/tests/OverridenFunctionAndSpecifiedTypeParameter.kt");
    }

    @Test
    @TestMetadata("parenthesesWithAssignmentOrSet.kt")
    public void testParenthesesWithAssignmentOrSet() {
      runTest("compiler/testData/diagnostics/tests/parenthesesWithAssignmentOrSet.kt");
    }

    @Test
    @TestMetadata("parenthesesWithIncrements.kt")
    public void testParenthesesWithIncrements() {
      runTest("compiler/testData/diagnostics/tests/parenthesesWithIncrements.kt");
    }

    @Test
    @TestMetadata("phantomIntersections.kt")
    public void testPhantomIntersections() {
      runTest("compiler/testData/diagnostics/tests/phantomIntersections.kt");
    }

    @Test
    @TestMetadata("plusAssignVsPrivateSetter.kt")
    public void testPlusAssignVsPrivateSetter() {
      runTest("compiler/testData/diagnostics/tests/plusAssignVsPrivateSetter.kt");
    }

    @Test
    @TestMetadata("prefixIncSmartCast.kt")
    public void testPrefixIncSmartCast() {
      runTest("compiler/testData/diagnostics/tests/prefixIncSmartCast.kt");
    }

    @Test
    @TestMetadata("properDefaultInitializationInTailrec.kt")
    public void testProperDefaultInitializationInTailrec() {
      runTest("compiler/testData/diagnostics/tests/properDefaultInitializationInTailrec.kt");
    }

    @Test
    @TestMetadata("rawCastToStarProjection_Fail.kt")
    public void testRawCastToStarProjection_Fail() {
      runTest("compiler/testData/diagnostics/tests/rawCastToStarProjection_Fail.kt");
    }

    @Test
    @TestMetadata("rawCastToStarProjection_Ok.kt")
    public void testRawCastToStarProjection_Ok() {
      runTest("compiler/testData/diagnostics/tests/rawCastToStarProjection_Ok.kt");
    }

    @Test
    @TestMetadata("RecursiveResolve.kt")
    public void testRecursiveResolve() {
      runTest("compiler/testData/diagnostics/tests/RecursiveResolve.kt");
    }

    @Test
    @TestMetadata("RecursiveTypeParameterEqualityCheck.kt")
    public void testRecursiveTypeParameterEqualityCheck() {
      runTest("compiler/testData/diagnostics/tests/RecursiveTypeParameterEqualityCheck.kt");
    }

    @Test
    @TestMetadata("redundantExplicitTypeWithIntegerLiterals.kt")
    public void testRedundantExplicitTypeWithIntegerLiterals() {
      runTest("compiler/testData/diagnostics/tests/redundantExplicitTypeWithIntegerLiterals.kt");
    }

    @Test
    @TestMetadata("ReserveYield.kt")
    public void testReserveYield() {
      runTest("compiler/testData/diagnostics/tests/ReserveYield.kt");
    }

    @Test
    @TestMetadata("ReserveYieldNoMore.kt")
    public void testReserveYieldNoMore() {
      runTest("compiler/testData/diagnostics/tests/ReserveYieldNoMore.kt");
    }

    @Test
    @TestMetadata("resolutionToTypealiasInsteadOfProperty.kt")
    public void testResolutionToTypealiasInsteadOfProperty() {
      runTest("compiler/testData/diagnostics/tests/resolutionToTypealiasInsteadOfProperty.kt");
    }

    @Test
    @TestMetadata("SafeCallInvoke.kt")
    public void testSafeCallInvoke() {
      runTest("compiler/testData/diagnostics/tests/SafeCallInvoke.kt");
    }

    @Test
    @TestMetadata("SafeCallNonNullReceiver2.kt")
    public void testSafeCallNonNullReceiver2() {
      runTest("compiler/testData/diagnostics/tests/SafeCallNonNullReceiver2.kt");
    }

    @Test
    @TestMetadata("ShiftFunctionTypes.kt")
    public void testShiftFunctionTypes() {
      runTest("compiler/testData/diagnostics/tests/ShiftFunctionTypes.kt");
    }

    @Test
    @TestMetadata("superQualifierTypeArgsInDelegatedConstructorCall.kt")
    public void testSuperQualifierTypeArgsInDelegatedConstructorCall() {
      runTest("compiler/testData/diagnostics/tests/superQualifierTypeArgsInDelegatedConstructorCall.kt");
    }

    @Test
    @TestMetadata("suppressInWhen.kt")
    public void testSuppressInWhen() {
      runTest("compiler/testData/diagnostics/tests/suppressInWhen.kt");
    }

    @Test
    @TestMetadata("suppressNamedArg.kt")
    public void testSuppressNamedArg() {
      runTest("compiler/testData/diagnostics/tests/suppressNamedArg.kt");
    }

    @Test
    @TestMetadata("suppressOnPlusAssign.kt")
    public void testSuppressOnPlusAssign() {
      runTest("compiler/testData/diagnostics/tests/suppressOnPlusAssign.kt");
    }

    @Test
    @TestMetadata("suspendFunAndPrivateJava.kt")
    public void testSuspendFunAndPrivateJava() {
      runTest("compiler/testData/diagnostics/tests/suspendFunAndPrivateJava.kt");
    }

    @Test
    @TestMetadata("syntheticSetFalsePositive.kt")
    public void testSyntheticSetFalsePositive() {
      runTest("compiler/testData/diagnostics/tests/syntheticSetFalsePositive.kt");
    }

    @Test
    @TestMetadata("tailRecBasic.kt")
    public void testTailRecBasic() {
      runTest("compiler/testData/diagnostics/tests/tailRecBasic.kt");
    }

    @Test
    @TestMetadata("tailRecInNestedScopes.kt")
    public void testTailRecInNestedScopes() {
      runTest("compiler/testData/diagnostics/tests/tailRecInNestedScopes.kt");
    }

    @Test
    @TestMetadata("tailRecInTry.kt")
    public void testTailRecInTry() {
      runTest("compiler/testData/diagnostics/tests/tailRecInTry.kt");
    }

    @Test
    @TestMetadata("tailRecOverridden.kt")
    public void testTailRecOverridden() {
      runTest("compiler/testData/diagnostics/tests/tailRecOverridden.kt");
    }

    @Test
    @TestMetadata("tailRecSingleton.kt")
    public void testTailRecSingleton() {
      runTest("compiler/testData/diagnostics/tests/tailRecSingleton.kt");
    }

    @Test
    @TestMetadata("tailRecWithDispatchReceiver.kt")
    public void testTailRecWithDispatchReceiver() {
      runTest("compiler/testData/diagnostics/tests/tailRecWithDispatchReceiver.kt");
    }

    @Test
    @TestMetadata("tailRecWithExtensionReceiver.kt")
    public void testTailRecWithExtensionReceiver() {
      runTest("compiler/testData/diagnostics/tests/tailRecWithExtensionReceiver.kt");
    }

    @Test
    @TestMetadata("tailRecursionComplex.kt")
    public void testTailRecursionComplex() {
      runTest("compiler/testData/diagnostics/tests/tailRecursionComplex.kt");
    }

    @Test
    @TestMetadata("tailrec.kt")
    public void testTailrec() {
      runTest("compiler/testData/diagnostics/tests/tailrec.kt");
    }

    @Test
    @TestMetadata("typealiasAnnotationWithFixedTypeArgument.kt")
    public void testTypealiasAnnotationWithFixedTypeArgument() {
      runTest("compiler/testData/diagnostics/tests/typealiasAnnotationWithFixedTypeArgument.kt");
    }

    @Test
    @TestMetadata("typealiasInAnnotationPrimitiveVararg.kt")
    public void testTypealiasInAnnotationPrimitiveVararg() {
      runTest("compiler/testData/diagnostics/tests/typealiasInAnnotationPrimitiveVararg.kt");
    }

    @Test
    @TestMetadata("typealiasedFunInterface.kt")
    public void testTypealiasedFunInterface() {
      runTest("compiler/testData/diagnostics/tests/typealiasedFunInterface.kt");
    }

    @Test
    @TestMetadata("unexpectedSafeCall.kt")
    public void testUnexpectedSafeCall() {
      runTest("compiler/testData/diagnostics/tests/unexpectedSafeCall.kt");
    }

    @Test
    @TestMetadata("UnitByDefaultForFunctionTypes.kt")
    public void testUnitByDefaultForFunctionTypes() {
      runTest("compiler/testData/diagnostics/tests/UnitByDefaultForFunctionTypes.kt");
    }

    @Test
    @TestMetadata("unnamedArgsInJavaAnnotations.kt")
    public void testUnnamedArgsInJavaAnnotations() {
      runTest("compiler/testData/diagnostics/tests/unnamedArgsInJavaAnnotations.kt");
    }

    @Test
    @TestMetadata("UnusedInDestructuring.kt")
    public void testUnusedInDestructuring() {
      runTest("compiler/testData/diagnostics/tests/UnusedInDestructuring.kt");
    }

    @Test
    @TestMetadata("unusedVariableOnRegularDelegatedProperty.kt")
    public void testUnusedVariableOnRegularDelegatedProperty() {
      runTest("compiler/testData/diagnostics/tests/unusedVariableOnRegularDelegatedProperty.kt");
    }

    @Test
    @TestMetadata("ValAndFunOverrideCompatibilityClash.kt")
    public void testValAndFunOverrideCompatibilityClash() {
      runTest("compiler/testData/diagnostics/tests/ValAndFunOverrideCompatibilityClash.kt");
    }

    @Test
    @TestMetadata("VarargTypes.kt")
    public void testVarargTypes() {
      runTest("compiler/testData/diagnostics/tests/VarargTypes.kt");
    }

    @Test
    @TestMetadata("whileConditionExpectedType.kt")
    public void testWhileConditionExpectedType() {
      runTest("compiler/testData/diagnostics/tests/whileConditionExpectedType.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Test
      @TestMetadata("AnnotatedConstructor.kt")
      public void testAnnotatedConstructor() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructor.kt");
      }

      @Test
      @TestMetadata("AnnotatedConstructorParams.kt")
      public void testAnnotatedConstructorParams() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedConstructorParams.kt");
      }

      @Test
      @TestMetadata("AnnotatedLocalObjectFun.kt")
      public void testAnnotatedLocalObjectFun() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLocalObjectFun.kt");
      }

      @Test
      @TestMetadata("AnnotatedLocalObjectProperty.kt")
      public void testAnnotatedLocalObjectProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLocalObjectProperty.kt");
      }

      @Test
      @TestMetadata("AnnotatedLoop.kt")
      public void testAnnotatedLoop() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedLoop.kt");
      }

      @Test
      @TestMetadata("AnnotatedResultType.kt")
      public void testAnnotatedResultType() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotatedResultType.kt");
      }

      @Test
      @TestMetadata("AnnotationAsDefaultParameter.kt")
      public void testAnnotationAsDefaultParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationAsDefaultParameter.kt");
      }

      @Test
      @TestMetadata("AnnotationOnObject.kt")
      public void testAnnotationOnObject() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationOnObject.kt");
      }

      @Test
      @TestMetadata("AnnotationsForClasses.kt")
      public void testAnnotationsForClasses() {
        runTest("compiler/testData/diagnostics/tests/annotations/AnnotationsForClasses.kt");
      }

      @Test
      @TestMetadata("annotationsOnDataClassCopy.kt")
      public void testAnnotationsOnDataClassCopy() {
        runTest("compiler/testData/diagnostics/tests/annotations/annotationsOnDataClassCopy.kt");
      }

      @Test
      @TestMetadata("blockLevelOnTheSameLineWarning.kt")
      public void testBlockLevelOnTheSameLineWarning() {
        runTest("compiler/testData/diagnostics/tests/annotations/blockLevelOnTheSameLineWarning.kt");
      }

      @Test
      @TestMetadata("constantFromOuterScopeAsAnnotaionParameter.kt")
      public void testConstantFromOuterScopeAsAnnotaionParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/constantFromOuterScopeAsAnnotaionParameter.kt");
      }

      @Test
      @TestMetadata("ConstructorCallAllowed.kt")
      public void testConstructorCallAllowed() {
        runTest("compiler/testData/diagnostics/tests/annotations/ConstructorCallAllowed.kt");
      }

      @Test
      @TestMetadata("contextReceiverAsFunctionImplicitReturnType.kt")
      public void testContextReceiverAsFunctionImplicitReturnType() {
        runTest("compiler/testData/diagnostics/tests/annotations/contextReceiverAsFunctionImplicitReturnType.kt");
      }

      @Test
      @TestMetadata("contextReceiverAsPropertyImplicitReturnType.kt")
      public void testContextReceiverAsPropertyImplicitReturnType() {
        runTest("compiler/testData/diagnostics/tests/annotations/contextReceiverAsPropertyImplicitReturnType.kt");
      }

      @Test
      @TestMetadata("contextReceiverOnClass.kt")
      public void testContextReceiverOnClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/contextReceiverOnClass.kt");
      }

      @Test
      @TestMetadata("contextReceiverOnFunction.kt")
      public void testContextReceiverOnFunction() {
        runTest("compiler/testData/diagnostics/tests/annotations/contextReceiverOnFunction.kt");
      }

      @Test
      @TestMetadata("contextReceiverOnProperty.kt")
      public void testContextReceiverOnProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/contextReceiverOnProperty.kt");
      }

      @Test
      @TestMetadata("cycleInParameters_array.kt")
      public void testCycleInParameters_array() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleInParameters_array.kt");
      }

      @Test
      @TestMetadata("cycleInParameters_before.kt")
      public void testCycleInParameters_before() {
        runTest("compiler/testData/diagnostics/tests/annotations/cycleInParameters_before.kt");
      }

      @Test
      @TestMetadata("Deprecated.kt")
      public void testDeprecated() {
        runTest("compiler/testData/diagnostics/tests/annotations/Deprecated.kt");
      }

      @Test
      @TestMetadata("DeprecatedInJavaDoc.kt")
      public void testDeprecatedInJavaDoc() {
        runTest("compiler/testData/diagnostics/tests/annotations/DeprecatedInJavaDoc.kt");
      }

      @Test
      @TestMetadata("DeprecationOnAny.kt")
      public void testDeprecationOnAny() {
        runTest("compiler/testData/diagnostics/tests/annotations/DeprecationOnAny.kt");
      }

      @Test
      @TestMetadata("functionParameterAsImplicitReturnType.kt")
      public void testFunctionParameterAsImplicitReturnType() {
        runTest("compiler/testData/diagnostics/tests/annotations/functionParameterAsImplicitReturnType.kt");
      }

      @Test
      @TestMetadata("javaAnnotationAndJavaClassWithIt.kt")
      public void testJavaAnnotationAndJavaClassWithIt() {
        runTest("compiler/testData/diagnostics/tests/annotations/javaAnnotationAndJavaClassWithIt.kt");
      }

      @Test
      @TestMetadata("JavaAnnotationConstructors.kt")
      public void testJavaAnnotationConstructors() {
        runTest("compiler/testData/diagnostics/tests/annotations/JavaAnnotationConstructors.kt");
      }

      @Test
      @TestMetadata("javaAnnotationWithClassArray.kt")
      public void testJavaAnnotationWithClassArray() {
        runTest("compiler/testData/diagnostics/tests/annotations/javaAnnotationWithClassArray.kt");
      }

      @Test
      @TestMetadata("javaAnnotationWithParameter.kt")
      public void testJavaAnnotationWithParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/javaAnnotationWithParameter.kt");
      }

      @Test
      @TestMetadata("localImplicitTypeUnavailable.kt")
      public void testLocalImplicitTypeUnavailable() {
        runTest("compiler/testData/diagnostics/tests/annotations/localImplicitTypeUnavailable.kt");
      }

      @Test
      @TestMetadata("nestedAnnotationOnOuterClassDeclaration.kt")
      public void testNestedAnnotationOnOuterClassDeclaration() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedAnnotationOnOuterClassDeclaration.kt");
      }

      @Test
      @TestMetadata("nestedClassAsAnnotationParameter.kt")
      public void testNestedClassAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedClassAsAnnotationParameter.kt");
      }

      @Test
      @TestMetadata("nestedObjectAsAnnotationParameter.kt")
      public void testNestedObjectAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/nestedObjectAsAnnotationParameter.kt");
      }

      @Test
      @TestMetadata("onExpression.kt")
      public void testOnExpression() {
        runTest("compiler/testData/diagnostics/tests/annotations/onExpression.kt");
      }

      @Test
      @TestMetadata("onFunctionParameter.kt")
      public void testOnFunctionParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/onFunctionParameter.kt");
      }

      @Test
      @TestMetadata("OptInWithArrayArgument.kt")
      public void testOptInWithArrayArgument() {
        runTest("compiler/testData/diagnostics/tests/annotations/OptInWithArrayArgument.kt");
      }

      @Test
      @TestMetadata("propagationAnnotationToLocalMemberFunction.kt")
      public void testPropagationAnnotationToLocalMemberFunction() {
        runTest("compiler/testData/diagnostics/tests/annotations/propagationAnnotationToLocalMemberFunction.kt");
      }

      @Test
      @TestMetadata("propagationBetweenLocalMemberProperties.kt")
      public void testPropagationBetweenLocalMemberProperties() {
        runTest("compiler/testData/diagnostics/tests/annotations/propagationBetweenLocalMemberProperties.kt");
      }

      @Test
      @TestMetadata("propagationFromLocalMemberFunctionAnnotation.kt")
      public void testPropagationFromLocalMemberFunctionAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/propagationFromLocalMemberFunctionAnnotation.kt");
      }

      @Test
      @TestMetadata("propagationToLocalMemberProperty.kt")
      public void testPropagationToLocalMemberProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/propagationToLocalMemberProperty.kt");
      }

      @Test
      @TestMetadata("qualifiedNestedClassAsAnnotationParameter.kt")
      public void testQualifiedNestedClassAsAnnotationParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/qualifiedNestedClassAsAnnotationParameter.kt");
      }

      @Test
      @TestMetadata("receiverAsFunctionImplicitType.kt")
      public void testReceiverAsFunctionImplicitType() {
        runTest("compiler/testData/diagnostics/tests/annotations/receiverAsFunctionImplicitType.kt");
      }

      @Test
      @TestMetadata("receiverAsPropertyImplicitType.kt")
      public void testReceiverAsPropertyImplicitType() {
        runTest("compiler/testData/diagnostics/tests/annotations/receiverAsPropertyImplicitType.kt");
      }

      @Test
      @TestMetadata("RecursivelyAnnotated.kt")
      public void testRecursivelyAnnotated() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotated.kt");
      }

      @Test
      @TestMetadata("RecursivelyAnnotatedGlobalProperty.kt")
      public void testRecursivelyAnnotatedGlobalProperty() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedGlobalProperty.kt");
      }

      @Test
      @TestMetadata("RecursivelyAnnotatedParameter.kt")
      public void testRecursivelyAnnotatedParameter() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameter.kt");
      }

      @Test
      @TestMetadata("RecursivelyAnnotatedParameterType.kt")
      public void testRecursivelyAnnotatedParameterType() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameterType.kt");
      }

      @Test
      @TestMetadata("RecursivelyAnnotatedParameterWithAt.kt")
      public void testRecursivelyAnnotatedParameterWithAt() {
        runTest("compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedParameterWithAt.kt");
      }

      @Test
      @TestMetadata("RetentionsOfAnnotationWithExpressionTarget_before.kt")
      public void testRetentionsOfAnnotationWithExpressionTarget_before() {
        runTest("compiler/testData/diagnostics/tests/annotations/RetentionsOfAnnotationWithExpressionTarget_before.kt");
      }

      @Test
      @TestMetadata("typeArgumentsInAnnotation.kt")
      public void testTypeArgumentsInAnnotation() {
        runTest("compiler/testData/diagnostics/tests/annotations/typeArgumentsInAnnotation.kt");
      }

      @Test
      @TestMetadata("typeParameterAnnotations.kt")
      public void testTypeParameterAnnotations() {
        runTest("compiler/testData/diagnostics/tests/annotations/typeParameterAnnotations.kt");
      }

      @Test
      @TestMetadata("typealiasWithAnnotatedAbstractClass.kt")
      public void testTypealiasWithAnnotatedAbstractClass() {
        runTest("compiler/testData/diagnostics/tests/annotations/typealiasWithAnnotatedAbstractClass.kt");
      }

      @Test
      @TestMetadata("wrongAnnotationTargetAnnotationOrder.kt")
      public void testWrongAnnotationTargetAnnotationOrder() {
        runTest("compiler/testData/diagnostics/tests/annotations/wrongAnnotationTargetAnnotationOrder.kt");
      }

      @Test
      @TestMetadata("wrongAnnotationTargetAnnotationOrderProperSyntax.kt")
      public void testWrongAnnotationTargetAnnotationOrderProperSyntax() {
        runTest("compiler/testData/diagnostics/tests/annotations/wrongAnnotationTargetAnnotationOrderProperSyntax.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/functionalTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class FunctionalTypes {
        @Test
        @TestMetadata("parameterName.kt")
        public void testParameterName() {
          runTest("compiler/testData/diagnostics/tests/annotations/functionalTypes/parameterName.kt");
        }

        @Test
        @TestMetadata("propagteAnyAnnotations.kt")
        public void testPropagteAnyAnnotations() {
          runTest("compiler/testData/diagnostics/tests/annotations/functionalTypes/propagteAnyAnnotations.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/options")
      @TestDataPath("$PROJECT_ROOT")
      public class Options {
        @Test
        @TestMetadata("annotationAsArg.kt")
        public void testAnnotationAsArg() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/annotationAsArg.kt");
        }

        @Test
        @TestMetadata("annotationAsArgComplex.kt")
        public void testAnnotationAsArgComplex() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/annotationAsArgComplex.kt");
        }

        @Test
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/assignment.kt");
        }

        @Test
        @TestMetadata("documented.kt")
        public void testDocumented() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/documented.kt");
        }

        @Test
        @TestMetadata("functionExpression.kt")
        public void testFunctionExpression() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/functionExpression.kt");
        }

        @Test
        @TestMetadata("javaDocumented.kt")
        public void testJavaDocumented() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/javaDocumented.kt");
        }

        @Test
        @TestMetadata("javaKotlinTargetRetention.kt")
        public void testJavaKotlinTargetRetention() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/javaKotlinTargetRetention.kt");
        }

        @Test
        @TestMetadata("javaKotlinTargetRetentionWithExplicitImport.kt")
        public void testJavaKotlinTargetRetentionWithExplicitImport() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/javaKotlinTargetRetentionWithExplicitImport.kt");
        }

        @Test
        @TestMetadata("javaretention.kt")
        public void testJavaretention() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/javaretention.kt");
        }

        @Test
        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/objectLiteral.kt");
        }

        @Test
        @TestMetadata("retention.kt")
        public void testRetention() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/retention.kt");
        }

        @Test
        @TestMetadata("target.kt")
        public void testTarget() {
          runTest("compiler/testData/diagnostics/tests/annotations/options/target.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/annotations/options/targets")
        @TestDataPath("$PROJECT_ROOT")
        public class Targets {
          @Test
          @TestMetadata("suppress.kt")
          public void testSuppress() {
            runTest("compiler/testData/diagnostics/tests/annotations/options/targets/suppress.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/parameters")
      @TestDataPath("$PROJECT_ROOT")
      public class Parameters {
        @Test
        @TestMetadata("char.kt")
        public void testChar() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/char.kt");
        }

        @Test
        @TestMetadata("double.kt")
        public void testDouble() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/double.kt");
        }

        @Test
        @TestMetadata("float.kt")
        public void testFloat() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/float.kt");
        }

        @Test
        @TestMetadata("long.kt")
        public void testLong() {
          runTest("compiler/testData/diagnostics/tests/annotations/parameters/long.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/annotations/parameters/expressions")
        @TestDataPath("$PROJECT_ROOT")
        public class Expressions {
          @Test
          @TestMetadata("andAnd.kt")
          public void testAndAnd() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/andAnd.kt");
          }

          @Test
          @TestMetadata("boolean.kt")
          public void testBoolean() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/boolean.kt");
          }

          @Test
          @TestMetadata("compositeCallBinary.kt")
          public void testCompositeCallBinary() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/compositeCallBinary.kt");
          }

          @Test
          @TestMetadata("double.kt")
          public void testDouble() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/double.kt");
          }

          @Test
          @TestMetadata("eqeq.kt")
          public void testEqeq() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/eqeq.kt");
          }

          @Test
          @TestMetadata("escapedString.kt")
          public void testEscapedString() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/escapedString.kt");
          }

          @Test
          @TestMetadata("float.kt")
          public void testFloat() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/float.kt");
          }

          @Test
          @TestMetadata("gteq.kt")
          public void testGteq() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/gteq.kt");
          }

          @Test
          @TestMetadata("long.kt")
          public void testLong() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/long.kt");
          }

          @Test
          @TestMetadata("lteq.kt")
          public void testLteq() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/lteq.kt");
          }

          @Test
          @TestMetadata("multilineString.kt")
          public void testMultilineString() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/multilineString.kt");
          }

          @Test
          @TestMetadata("noteq.kt")
          public void testNoteq() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/noteq.kt");
          }

          @Test
          @TestMetadata("orOr.kt")
          public void testOrOr() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/orOr.kt");
          }

          @Test
          @TestMetadata("simpleCallBinary.kt")
          public void testSimpleCallBinary() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/simpleCallBinary.kt");
          }

          @Test
          @TestMetadata("stringPlusInt.kt")
          public void testStringPlusInt() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/stringPlusInt.kt");
          }

          @Test
          @TestMetadata("unaryMinus.kt")
          public void testUnaryMinus() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/unaryMinus.kt");
          }

          @Test
          @TestMetadata("unaryPlus.kt")
          public void testUnaryPlus() {
            runTest("compiler/testData/diagnostics/tests/annotations/parameters/expressions/unaryPlus.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/rendering")
      @TestDataPath("$PROJECT_ROOT")
      public class Rendering {
        @Test
        @TestMetadata("differentNamesForParameter.kt")
        public void testDifferentNamesForParameter() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/differentNamesForParameter.kt");
        }

        @Test
        @TestMetadata("unusedValue.kt")
        public void testUnusedValue() {
          runTest("compiler/testData/diagnostics/tests/annotations/rendering/unusedValue.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/repeatable")
      @TestDataPath("$PROJECT_ROOT")
      public class Repeatable {
        @Test
        @TestMetadata("containerArguments_1_5.kt")
        public void testContainerArguments_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerArguments_1_5.kt");
        }

        @Test
        @TestMetadata("containerRetention_1_5.kt")
        public void testContainerRetention_1_5() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/containerRetention_1_5.kt");
        }

        @Test
        @TestMetadata("javaRepeatable_1_6.kt")
        public void testJavaRepeatable_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/javaRepeatable_1_6.kt");
        }

        @Test
        @TestMetadata("kotlinRepeatable_1_6.kt")
        public void testKotlinRepeatable_1_6() {
          runTest("compiler/testData/diagnostics/tests/annotations/repeatable/kotlinRepeatable_1_6.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/typeUse")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeUse {
        @Test
        @TestMetadata("implicitTypeWithInaccessibleAnnotation.kt")
        public void testImplicitTypeWithInaccessibleAnnotation() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/implicitTypeWithInaccessibleAnnotation.kt");
        }

        @Test
        @TestMetadata("kt19455.kt")
        public void testKt19455() {
          runTest("compiler/testData/diagnostics/tests/annotations/typeUse/kt19455.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget")
      @TestDataPath("$PROJECT_ROOT")
      public class WithUseSiteTarget {
        @Test
        @TestMetadata("propertyTargetOnEnumEntry_warning.kt")
        public void testPropertyTargetOnEnumEntry_warning() {
          runTest("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/propertyTargetOnEnumEntry_warning.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/backingField")
    @TestDataPath("$PROJECT_ROOT")
    public class BackingField {
      @Test
      @TestMetadata("CustomGetSet.kt")
      public void testCustomGetSet() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomGetSet.kt");
      }

      @Test
      @TestMetadata("CustomGetVal.kt")
      public void testCustomGetVal() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomGetVal.kt");
      }

      @Test
      @TestMetadata("CustomGetValGlobal.kt")
      public void testCustomGetValGlobal() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomGetValGlobal.kt");
      }

      @Test
      @TestMetadata("CustomGetVar.kt")
      public void testCustomGetVar() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomGetVar.kt");
      }

      @Test
      @TestMetadata("CustomSet.kt")
      public void testCustomSet() {
        runTest("compiler/testData/diagnostics/tests/backingField/CustomSet.kt");
      }

      @Test
      @TestMetadata("FieldAsParam.kt")
      public void testFieldAsParam() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldAsParam.kt");
      }

      @Test
      @TestMetadata("FieldAsProperty.kt")
      public void testFieldAsProperty() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldAsProperty.kt");
      }

      @Test
      @TestMetadata("FieldDerived.kt")
      public void testFieldDerived() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldDerived.kt");
      }

      @Test
      @TestMetadata("FieldInLocal.kt")
      public void testFieldInLocal() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldInLocal.kt");
      }

      @Test
      @TestMetadata("FieldOnVal.kt")
      public void testFieldOnVal() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldOnVal.kt");
      }

      @Test
      @TestMetadata("FieldOnVar.kt")
      public void testFieldOnVar() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldOnVar.kt");
      }

      @Test
      @TestMetadata("FieldShadow.kt")
      public void testFieldShadow() {
        runTest("compiler/testData/diagnostics/tests/backingField/FieldShadow.kt");
      }

      @Test
      @TestMetadata("kt782packageLevel.kt")
      public void testKt782packageLevel() {
        runTest("compiler/testData/diagnostics/tests/backingField/kt782packageLevel.kt");
      }

      @Test
      @TestMetadata("MustBeInitializedEffectivelyFinalOn.kt")
      public void testMustBeInitializedEffectivelyFinalOn() {
        runTest("compiler/testData/diagnostics/tests/backingField/MustBeInitializedEffectivelyFinalOn.kt");
      }

      @Test
      @TestMetadata("OpenValDeferredInitError_InFinalClass_EnableEffectivelyFinal.kt")
      public void testOpenValDeferredInitError_InFinalClass_EnableEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValDeferredInitError_InFinalClass_EnableEffectivelyFinal.kt");
      }

      @Test
      @TestMetadata("OpenValDeferredInitWarning_InFinalClass_DisableEffectivelyFinal.kt")
      public void testOpenValDeferredInitWarning_InFinalClass_DisableEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValDeferredInitWarning_InFinalClass_DisableEffectivelyFinal.kt");
      }

      @Test
      @TestMetadata("OpenValDeferredInitWarning_InFinalClass_EnableEffectivelyFinal.kt")
      public void testOpenValDeferredInitWarning_InFinalClass_EnableEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/backingField/OpenValDeferredInitWarning_InFinalClass_EnableEffectivelyFinal.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor")
      @TestDataPath("$PROJECT_ROOT")
      public class ProhibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor {
        @Test
        @TestMetadata("noPrimary_oneInheritedSecondary_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneInheritedSecondary_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneInheritedSecondary_mustBeInitializedWarning.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedWarning.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_mustBeInitializedWarning.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_openValError_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_openValError_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openValError_mustBeInitializedWarning.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_openValWarning_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_openValWarning_mustBeInitializedError() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openValWarning_mustBeInitializedError.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_openValWarning_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_openValWarning_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openValWarning_mustBeInitializedWarning.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_openVar_mustBeInitializedWarning.kt")
        public void testNoPrimary_oneSecondary_openVar_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openVar_mustBeInitializedWarning.kt");
        }

        @Test
        @TestMetadata("noPrimary_twoSecondary_mustBeInitializedWarning.kt")
        public void testNoPrimary_twoSecondary_mustBeInitializedWarning() {
          runTest("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_twoSecondary_mustBeInitializedWarning.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    public class CallableReference {
      @Test
      @TestMetadata("callableReferenceAssignmentToVar.kt")
      public void testCallableReferenceAssignmentToVar() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferenceAssignmentToVar.kt");
      }

      @Test
      @TestMetadata("callableReferenceInWhenExpression.kt")
      public void testCallableReferenceInWhenExpression() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferenceInWhenExpression.kt");
      }

      @Test
      @TestMetadata("callableReferenceWithMostSpecificGenericTypeParameter.kt")
      public void testCallableReferenceWithMostSpecificGenericTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferenceWithMostSpecificGenericTypeParameter.kt");
      }

      @Test
      @TestMetadata("callableReferencesToCompanionMembers.kt")
      public void testCallableReferencesToCompanionMembers() {
        runTest("compiler/testData/diagnostics/tests/callableReference/callableReferencesToCompanionMembers.kt");
      }

      @Test
      @TestMetadata("classVsPackage.kt")
      public void testClassVsPackage() {
        runTest("compiler/testData/diagnostics/tests/callableReference/classVsPackage.kt");
      }

      @Test
      @TestMetadata("compatibilityResolveWithVarargAndOperatorCall.kt")
      public void testCompatibilityResolveWithVarargAndOperatorCall() {
        runTest("compiler/testData/diagnostics/tests/callableReference/compatibilityResolveWithVarargAndOperatorCall.kt");
      }

      @Test
      @TestMetadata("correctCandidateWithCompatibilityForSeveralCandidates.kt")
      public void testCorrectCandidateWithCompatibilityForSeveralCandidates() {
        runTest("compiler/testData/diagnostics/tests/callableReference/correctCandidateWithCompatibilityForSeveralCandidates.kt");
      }

      @Test
      @TestMetadata("correctInfoAfterArrayLikeCall.kt")
      public void testCorrectInfoAfterArrayLikeCall() {
        runTest("compiler/testData/diagnostics/tests/callableReference/correctInfoAfterArrayLikeCall.kt");
      }

      @Test
      @TestMetadata("emptyLhs.kt")
      public void testEmptyLhs() {
        runTest("compiler/testData/diagnostics/tests/callableReference/emptyLhs.kt");
      }

      @Test
      @TestMetadata("functionReferenceWithDefaultValueAsOtherFunctionType.kt")
      public void testFunctionReferenceWithDefaultValueAsOtherFunctionType() {
        runTest("compiler/testData/diagnostics/tests/callableReference/functionReferenceWithDefaultValueAsOtherFunctionType.kt");
      }

      @Test
      @TestMetadata("functionReferenceWithDefaultValueAsOtherFunctionType_enabled.kt")
      public void testFunctionReferenceWithDefaultValueAsOtherFunctionType_enabled() {
        runTest("compiler/testData/diagnostics/tests/callableReference/functionReferenceWithDefaultValueAsOtherFunctionType_enabled.kt");
      }

      @Test
      @TestMetadata("genericCallWithReferenceAgainstVarargAndKFunction.kt")
      public void testGenericCallWithReferenceAgainstVarargAndKFunction() {
        runTest("compiler/testData/diagnostics/tests/callableReference/genericCallWithReferenceAgainstVarargAndKFunction.kt");
      }

      @Test
      @TestMetadata("kt15439_completeCall.kt")
      public void testKt15439_completeCall() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt15439_completeCall.kt");
      }

      @Test
      @TestMetadata("kt25433.kt")
      public void testKt25433() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt25433.kt");
      }

      @Test
      @TestMetadata("kt31981.kt")
      public void testKt31981() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt31981.kt");
      }

      @Test
      @TestMetadata("kt32256.kt")
      public void testKt32256() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt32256.kt");
      }

      @Test
      @TestMetadata("kt32267.kt")
      public void testKt32267() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt32267.kt");
      }

      @Test
      @TestMetadata("kt35105.kt")
      public void testKt35105() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt35105.kt");
      }

      @Test
      @TestMetadata("kt35959.kt")
      public void testKt35959() {
        runTest("compiler/testData/diagnostics/tests/callableReference/kt35959.kt");
      }

      @Test
      @TestMetadata("lambdaResult.kt")
      public void testLambdaResult() {
        runTest("compiler/testData/diagnostics/tests/callableReference/lambdaResult.kt");
      }

      @Test
      @TestMetadata("noAmbiguityWhenAllReferencesAreInapplicable.kt")
      public void testNoAmbiguityWhenAllReferencesAreInapplicable() {
        runTest("compiler/testData/diagnostics/tests/callableReference/noAmbiguityWhenAllReferencesAreInapplicable.kt");
      }

      @Test
      @TestMetadata("noCompatibilityResolveWithProressiveModeForNI.kt")
      public void testNoCompatibilityResolveWithProressiveModeForNI() {
        runTest("compiler/testData/diagnostics/tests/callableReference/noCompatibilityResolveWithProressiveModeForNI.kt");
      }

      @Test
      @TestMetadata("overloadResolutionWithDefaults.kt")
      public void testOverloadResolutionWithDefaults() {
        runTest("compiler/testData/diagnostics/tests/callableReference/overloadResolutionWithDefaults.kt");
      }

      @Test
      @TestMetadata("propertyOfNestedGenericClass.kt")
      public void testPropertyOfNestedGenericClass() {
        runTest("compiler/testData/diagnostics/tests/callableReference/propertyOfNestedGenericClass.kt");
      }

      @Test
      @TestMetadata("referenceAdaptationCompatibility.kt")
      public void testReferenceAdaptationCompatibility() {
        runTest("compiler/testData/diagnostics/tests/callableReference/referenceAdaptationCompatibility.kt");
      }

      @Test
      @TestMetadata("referenceInCycleInProperties.kt")
      public void testReferenceInCycleInProperties() {
        runTest("compiler/testData/diagnostics/tests/callableReference/referenceInCycleInProperties.kt");
      }

      @Test
      @TestMetadata("referenceToCompanionObjectMemberViaClassName.kt")
      public void testReferenceToCompanionObjectMemberViaClassName() {
        runTest("compiler/testData/diagnostics/tests/callableReference/referenceToCompanionObjectMemberViaClassName.kt");
      }

      @Test
      @TestMetadata("referenceToCompanionObjectMemberViaClassNameCompatibility.kt")
      public void testReferenceToCompanionObjectMemberViaClassNameCompatibility() {
        runTest("compiler/testData/diagnostics/tests/callableReference/referenceToCompanionObjectMemberViaClassNameCompatibility.kt");
      }

      @Test
      @TestMetadata("rewriteAtSliceOnGetOperator.kt")
      public void testRewriteAtSliceOnGetOperator() {
        runTest("compiler/testData/diagnostics/tests/callableReference/rewriteAtSliceOnGetOperator.kt");
      }

      @Test
      @TestMetadata("sam.kt")
      public void testSam() {
        runTest("compiler/testData/diagnostics/tests/callableReference/sam.kt");
      }

      @Test
      @TestMetadata("subtypeArgumentFromRHSForReference.kt")
      public void testSubtypeArgumentFromRHSForReference() {
        runTest("compiler/testData/diagnostics/tests/callableReference/subtypeArgumentFromRHSForReference.kt");
      }

      @Test
      @TestMetadata("suspendCallableReference.kt")
      public void testSuspendCallableReference() {
        runTest("compiler/testData/diagnostics/tests/callableReference/suspendCallableReference.kt");
      }

      @Test
      @TestMetadata("typealiases.kt")
      public void testTypealiases() {
        runTest("compiler/testData/diagnostics/tests/callableReference/typealiases.kt");
      }

      @Test
      @TestMetadata("unused.kt")
      public void testUnused() {
        runTest("compiler/testData/diagnostics/tests/callableReference/unused.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/adapted")
      @TestDataPath("$PROJECT_ROOT")
      public class Adapted {
        @Test
        @TestMetadata("adaptationInWhenWithMapOf.kt")
        public void testAdaptationInWhenWithMapOf() {
          runTest("compiler/testData/diagnostics/tests/callableReference/adapted/adaptationInWhenWithMapOf.kt");
        }

        @Test
        @TestMetadata("adaptationToOverridenWithoutDefault.kt")
        public void testAdaptationToOverridenWithoutDefault() {
          runTest("compiler/testData/diagnostics/tests/callableReference/adapted/adaptationToOverridenWithoutDefault.kt");
        }

        @Test
        @TestMetadata("simpleAdaptationOutsideOfCall.kt")
        public void testSimpleAdaptationOutsideOfCall() {
          runTest("compiler/testData/diagnostics/tests/callableReference/adapted/simpleAdaptationOutsideOfCall.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/bound")
      @TestDataPath("$PROJECT_ROOT")
      public class Bound {
        @Test
        @TestMetadata("classVsStarImportedCompanion.kt")
        public void testClassVsStarImportedCompanion() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/classVsStarImportedCompanion.kt");
        }

        @Test
        @TestMetadata("classVsStarImportedObject.kt")
        public void testClassVsStarImportedObject() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/classVsStarImportedObject.kt");
        }

        @Test
        @TestMetadata("controlFlow.kt")
        public void testControlFlow() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/controlFlow.kt");
        }

        @Test
        @TestMetadata("dataFlow.kt")
        public void testDataFlow() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/dataFlow.kt");
        }

        @Test
        @TestMetadata("expectedType.kt")
        public void testExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/expectedType.kt");
        }

        @Test
        @TestMetadata("syntheticExtensionOnLHS.kt")
        public void testSyntheticExtensionOnLHS() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/syntheticExtensionOnLHS.kt");
        }

        @Test
        @TestMetadata("valueOfTypeParameterType.kt")
        public void testValueOfTypeParameterType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/bound/valueOfTypeParameterType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/function")
      @TestDataPath("$PROJECT_ROOT")
      public class Function {
        @Test
        @TestMetadata("callableRefrenceOnNestedObject.kt")
        public void testCallableRefrenceOnNestedObject() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/callableRefrenceOnNestedObject.kt");
        }

        @Test
        @TestMetadata("constructorFromCompanion.kt")
        public void testConstructorFromCompanion() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/constructorFromCompanion.kt");
        }

        @Test
        @TestMetadata("extensionOnNullable.kt")
        public void testExtensionOnNullable() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/extensionOnNullable.kt");
        }

        @Test
        @TestMetadata("localConstructorFromLocalClass.kt")
        public void testLocalConstructorFromLocalClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromLocalClass.kt");
        }

        @Test
        @TestMetadata("noAmbiguityLocalVsTopLevel.kt")
        public void testNoAmbiguityLocalVsTopLevel() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityLocalVsTopLevel.kt");
        }

        @Test
        @TestMetadata("privateStaticAndPublicMember.kt")
        public void testPrivateStaticAndPublicMember() {
          runTest("compiler/testData/diagnostics/tests/callableReference/function/privateStaticAndPublicMember.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/generic")
      @TestDataPath("$PROJECT_ROOT")
      public class Generic {
        @Test
        @TestMetadata("argumentExpectedType.kt")
        public void testArgumentExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/argumentExpectedType.kt");
        }

        @Test
        @TestMetadata("kt10968.kt")
        public void testKt10968() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt10968.kt");
        }

        @Test
        @TestMetadata("kt11075.kt")
        public void testKt11075() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt11075.kt");
        }

        @Test
        @TestMetadata("kt12286.kt")
        public void testKt12286() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt12286.kt");
        }

        @Test
        @TestMetadata("kt35896.kt")
        public void testKt35896() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt35896.kt");
        }

        @Test
        @TestMetadata("kt7470.kt")
        public void testKt7470() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/kt7470.kt");
        }

        @Test
        @TestMetadata("localClassWithCapturedTypeParameters.kt")
        public void testLocalClassWithCapturedTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/localClassWithCapturedTypeParameters.kt");
        }

        @Test
        @TestMetadata("specialCalls.kt")
        public void testSpecialCalls() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/specialCalls.kt");
        }

        @Test
        @TestMetadata("withExpectedGenericJavaFunction.kt")
        public void testWithExpectedGenericJavaFunction() {
          runTest("compiler/testData/diagnostics/tests/callableReference/generic/withExpectedGenericJavaFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/property")
      @TestDataPath("$PROJECT_ROOT")
      public class Property {
        @Test
        @TestMetadata("classFromClass.kt")
        public void testClassFromClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/classFromClass.kt");
        }

        @Test
        @TestMetadata("extensionsSameName.kt")
        public void testExtensionsSameName() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/extensionsSameName.kt");
        }

        @Test
        @TestMetadata("kt7564.kt")
        public void testKt7564() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/kt7564.kt");
        }

        @Test
        @TestMetadata("mutablePropertyViaDelegation.kt")
        public void testMutablePropertyViaDelegation() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/mutablePropertyViaDelegation.kt");
        }

        @Test
        @TestMetadata("propertyFromAbstractSuperClass.kt")
        public void testPropertyFromAbstractSuperClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/propertyFromAbstractSuperClass.kt");
        }

        @Test
        @TestMetadata("protectedVarFromClass.kt")
        public void testProtectedVarFromClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/protectedVarFromClass.kt");
        }

        @Test
        @TestMetadata("returnTypeDependentOnGenericProperty.kt")
        public void testReturnTypeDependentOnGenericProperty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/property/returnTypeDependentOnGenericProperty.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/resolve")
      @TestDataPath("$PROJECT_ROOT")
      public class Resolve {
        @Test
        @TestMetadata("adaptedReferenceAgainstKCallable.kt")
        public void testAdaptedReferenceAgainstKCallable() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/adaptedReferenceAgainstKCallable.kt");
        }

        @Test
        @TestMetadata("applicableCallableReferenceFromDistantScope.kt")
        public void testApplicableCallableReferenceFromDistantScope() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/applicableCallableReferenceFromDistantScope.kt");
        }

        @Test
        @TestMetadata("byArgType.kt")
        public void testByArgType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/byArgType.kt");
        }

        @Test
        @TestMetadata("callableReferenceToVarargWithOverload.kt")
        public void testCallableReferenceToVarargWithOverload() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/callableReferenceToVarargWithOverload.kt");
        }

        @Test
        @TestMetadata("chooseMostSpecificCandidateUsingCandidateDescriptorNotReflectionType.kt")
        public void testChooseMostSpecificCandidateUsingCandidateDescriptorNotReflectionType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/chooseMostSpecificCandidateUsingCandidateDescriptorNotReflectionType.kt");
        }

        @Test
        @TestMetadata("chooseOuterCallBySingleCallableReference.kt")
        public void testChooseOuterCallBySingleCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/chooseOuterCallBySingleCallableReference.kt");
        }

        @Test
        @TestMetadata("commonSupertypeFromReturnTypesOfCallableReference.kt")
        public void testCommonSupertypeFromReturnTypesOfCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/commonSupertypeFromReturnTypesOfCallableReference.kt");
        }

        @Test
        @TestMetadata("constructor.kt")
        public void testConstructor() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/constructor.kt");
        }

        @Test
        @TestMetadata("eagerResolveOfSingleCallableReference.kt")
        public void testEagerResolveOfSingleCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/eagerResolveOfSingleCallableReference.kt");
        }

        @Test
        @TestMetadata("innerClassConstructorOnOuterClassInstance.kt")
        public void testInnerClassConstructorOnOuterClassInstance() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/innerClassConstructorOnOuterClassInstance.kt");
        }

        @Test
        @TestMetadata("kt10036.kt")
        public void testKt10036() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt10036.kt");
        }

        @Test
        @TestMetadata("kt10036_bound.kt")
        public void testKt10036_bound() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt10036_bound.kt");
        }

        @Test
        @TestMetadata("kt12338.kt")
        public void testKt12338() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt12338.kt");
        }

        @Test
        @TestMetadata("kt12751.kt")
        public void testKt12751() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt12751.kt");
        }

        @Test
        @TestMetadata("kt35887.kt")
        public void testKt35887() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt35887.kt");
        }

        @Test
        @TestMetadata("kt35920.kt")
        public void testKt35920() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt35920.kt");
        }

        @Test
        @TestMetadata("kt8596.kt")
        public void testKt8596() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt8596.kt");
        }

        @Test
        @TestMetadata("kt9601.kt")
        public void testKt9601() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/kt9601.kt");
        }

        @Test
        @TestMetadata("multipleOutersAndMultipleCallableReferences.kt")
        public void testMultipleOutersAndMultipleCallableReferences() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/multipleOutersAndMultipleCallableReferences.kt");
        }

        @Test
        @TestMetadata("nestedReferenceCallAgainstExpectedType.kt")
        public void testNestedReferenceCallAgainstExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/nestedReferenceCallAgainstExpectedType.kt");
        }

        @Test
        @TestMetadata("noAmbiguityBetweenTopLevelAndMemberProperty.kt")
        public void testNoAmbiguityBetweenTopLevelAndMemberProperty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/noAmbiguityBetweenTopLevelAndMemberProperty.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesOnCallableReference.kt")
        public void testOnlyInputTypesOnCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/onlyInputTypesOnCallableReference.kt");
        }

        @Test
        @TestMetadata("overloadsBound.kt")
        public void testOverloadsBound() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloadsBound.kt");
        }

        @Test
        @TestMetadata("overloadsMember.kt")
        public void testOverloadsMember() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/overloadsMember.kt");
        }

        @Test
        @TestMetadata("postponedResolveOfManyCallableReference.kt")
        public void testPostponedResolveOfManyCallableReference() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/postponedResolveOfManyCallableReference.kt");
        }

        @Test
        @TestMetadata("resolveEqualsOperatorWithAnyExpectedType.kt")
        public void testResolveEqualsOperatorWithAnyExpectedType() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/resolveEqualsOperatorWithAnyExpectedType.kt");
        }

        @Test
        @TestMetadata("resolveReferenceAgainstKFunctionAndKPrpoerty.kt")
        public void testResolveReferenceAgainstKFunctionAndKPrpoerty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/resolveReferenceAgainstKFunctionAndKPrpoerty.kt");
        }

        @Test
        @TestMetadata("resolveTwoReferencesAgainstGenerics.kt")
        public void testResolveTwoReferencesAgainstGenerics() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/resolveTwoReferencesAgainstGenerics.kt");
        }

        @Test
        @TestMetadata("valVsFun.kt")
        public void testValVsFun() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/valVsFun.kt");
        }

        @Test
        @TestMetadata("withVararg.kt")
        public void testWithVararg() {
          runTest("compiler/testData/diagnostics/tests/callableReference/resolve/withVararg.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/unsupported")
      @TestDataPath("$PROJECT_ROOT")
      public class Unsupported {
        @Test
        @TestMetadata("javaOverridesKotlinProperty.kt")
        public void testJavaOverridesKotlinProperty() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/javaOverridesKotlinProperty.kt");
        }

        @Test
        @TestMetadata("referenceToKotlinPropertyViaIntermediateJavaClass.kt")
        public void testReferenceToKotlinPropertyViaIntermediateJavaClass() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/referenceToKotlinPropertyViaIntermediateJavaClass.kt");
        }

        @Test
        @TestMetadata("syntheticPropertiesOnJavaAnnotation.kt")
        public void testSyntheticPropertiesOnJavaAnnotation() {
          runTest("compiler/testData/diagnostics/tests/callableReference/unsupported/syntheticPropertiesOnJavaAnnotation.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/cast")
    @TestDataPath("$PROJECT_ROOT")
    public class Cast {
      @Test
      @TestMetadata("AsArray.kt")
      public void testAsArray() {
        runTest("compiler/testData/diagnostics/tests/cast/AsArray.kt");
      }

      @Test
      @TestMetadata("AsErasedError.kt")
      public void testAsErasedError() {
        runTest("compiler/testData/diagnostics/tests/cast/AsErasedError.kt");
      }

      @Test
      @TestMetadata("AsErasedFine.kt")
      public void testAsErasedFine() {
        runTest("compiler/testData/diagnostics/tests/cast/AsErasedFine.kt");
      }

      @Test
      @TestMetadata("AsErasedStar.kt")
      public void testAsErasedStar() {
        runTest("compiler/testData/diagnostics/tests/cast/AsErasedStar.kt");
      }

      @Test
      @TestMetadata("AsErasedWarning.kt")
      public void testAsErasedWarning() {
        runTest("compiler/testData/diagnostics/tests/cast/AsErasedWarning.kt");
      }

      @Test
      @TestMetadata("AsInBlockWithReturnType.kt")
      public void testAsInBlockWithReturnType() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInBlockWithReturnType.kt");
      }

      @Test
      @TestMetadata("AsInCompoundAssignment.kt")
      public void testAsInCompoundAssignment() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInCompoundAssignment.kt");
      }

      @Test
      @TestMetadata("AsInExpressionBody.kt")
      public void testAsInExpressionBody() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInExpressionBody.kt");
      }

      @Test
      @TestMetadata("AsInPropertyAndPropertyAccessor.kt")
      public void testAsInPropertyAndPropertyAccessor() {
        runTest("compiler/testData/diagnostics/tests/cast/AsInPropertyAndPropertyAccessor.kt");
      }

      @Test
      @TestMetadata("AsNothing.kt")
      public void testAsNothing() {
        runTest("compiler/testData/diagnostics/tests/cast/AsNothing.kt");
      }

      @Test
      @TestMetadata("AsTypeAlias.kt")
      public void testAsTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/cast/AsTypeAlias.kt");
      }

      @Test
      @TestMetadata("AsWithOtherParameter.kt")
      public void testAsWithOtherParameter() {
        runTest("compiler/testData/diagnostics/tests/cast/AsWithOtherParameter.kt");
      }

      @Test
      @TestMetadata("checkCastToNullableType.kt")
      public void testCheckCastToNullableType() {
        runTest("compiler/testData/diagnostics/tests/cast/checkCastToNullableType.kt");
      }

      @Test
      @TestMetadata("constants.kt")
      public void testConstants() {
        runTest("compiler/testData/diagnostics/tests/cast/constants.kt");
      }

      @Test
      @TestMetadata("DowncastMap.kt")
      public void testDowncastMap() {
        runTest("compiler/testData/diagnostics/tests/cast/DowncastMap.kt");
      }

      @Test
      @TestMetadata("ExtensionAsNonExtension.kt")
      public void testExtensionAsNonExtension() {
        runTest("compiler/testData/diagnostics/tests/cast/ExtensionAsNonExtension.kt");
      }

      @Test
      @TestMetadata("FlexibleTargetType.kt")
      public void testFlexibleTargetType() {
        runTest("compiler/testData/diagnostics/tests/cast/FlexibleTargetType.kt");
      }

      @Test
      @TestMetadata("isAlwaysFalse.kt")
      public void testIsAlwaysFalse() {
        runTest("compiler/testData/diagnostics/tests/cast/isAlwaysFalse.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt")
      public void testIsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForDerivedWithOneSubstitutedAndOneSameGeneric.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowForExactSupertypeCheck.kt")
      public void testIsErasedAllowForExactSupertypeCheck() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForExactSupertypeCheck.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowForOverridenVarianceWithProjection.kt")
      public void testIsErasedAllowForOverridenVarianceWithProjection() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForOverridenVarianceWithProjection.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowForSupertypeCheckWithContrvariance.kt")
      public void testIsErasedAllowForSupertypeCheckWithContrvariance() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithContrvariance.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowForSupertypeCheckWithCovariance.kt")
      public void testIsErasedAllowForSupertypeCheckWithCovariance() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForSupertypeCheckWithCovariance.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt")
      public void testIsErasedAllowForTypeWithTwoSameTypeSubstitutions() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithTwoSameTypeSubstitutions.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowForTypeWithoutTypeArguments.kt")
      public void testIsErasedAllowForTypeWithoutTypeArguments() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithoutTypeArguments.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowFromOut.kt")
      public void testIsErasedAllowFromOut() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowFromOut2.kt")
      public void testIsErasedAllowFromOut2() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut2.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowFromOut3.kt")
      public void testIsErasedAllowFromOut3() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOut3.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowFromOutAtClass.kt")
      public void testIsErasedAllowFromOutAtClass() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowFromOutAtClass.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowParameterSubtype.kt")
      public void testIsErasedAllowParameterSubtype() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowParameterSubtype.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowSameClassParameter.kt")
      public void testIsErasedAllowSameClassParameter() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameClassParameter.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowSameParameterParameter.kt")
      public void testIsErasedAllowSameParameterParameter() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedAllowSameParameterParameter.kt");
      }

      @Test
      @TestMetadata("isErasedAnyAndStarred.kt")
      public void testIsErasedAnyAndStarred() {
        runTest("compiler/testData/diagnostics/tests/cast/isErasedAnyAndStarred.kt");
      }

      @Test
      @TestMetadata("IsErasedNonGeneric.kt")
      public void testIsErasedNonGeneric() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedNonGeneric.kt");
      }

      @Test
      @TestMetadata("IsErasedNullableTasT.kt")
      public void testIsErasedNullableTasT() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedNullableTasT.kt");
      }

      @Test
      @TestMetadata("IsErasedStar.kt")
      public void testIsErasedStar() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedStar.kt");
      }

      @Test
      @TestMetadata("isErasedTAndStarred.kt")
      public void testIsErasedTAndStarred() {
        runTest("compiler/testData/diagnostics/tests/cast/isErasedTAndStarred.kt");
      }

      @Test
      @TestMetadata("IsErasedTasT.kt")
      public void testIsErasedTasT() {
        runTest("compiler/testData/diagnostics/tests/cast/IsErasedTasT.kt");
      }

      @Test
      @TestMetadata("isErasedUnrelatedAndStarred.kt")
      public void testIsErasedUnrelatedAndStarred() {
        runTest("compiler/testData/diagnostics/tests/cast/isErasedUnrelatedAndStarred.kt");
      }

      @Test
      @TestMetadata("IsForTypeWithComplexUpperBound.kt")
      public void testIsForTypeWithComplexUpperBound() {
        runTest("compiler/testData/diagnostics/tests/cast/IsForTypeWithComplexUpperBound.kt");
      }

      @Test
      @TestMetadata("IsTraits.kt")
      public void testIsTraits() {
        runTest("compiler/testData/diagnostics/tests/cast/IsTraits.kt");
      }

      @Test
      @TestMetadata("IsWithCycleUpperBounds.kt")
      public void testIsWithCycleUpperBounds() {
        runTest("compiler/testData/diagnostics/tests/cast/IsWithCycleUpperBounds.kt");
      }

      @Test
      @TestMetadata("kt15161.kt")
      public void testKt15161() {
        runTest("compiler/testData/diagnostics/tests/cast/kt15161.kt");
      }

      @Test
      @TestMetadata("kt47685.kt")
      public void testKt47685() {
        runTest("compiler/testData/diagnostics/tests/cast/kt47685.kt");
      }

      @Test
      @TestMetadata("kt56629.kt")
      public void testKt56629() {
        runTest("compiler/testData/diagnostics/tests/cast/kt56629.kt");
      }

      @Test
      @TestMetadata("kt614.kt")
      public void testKt614() {
        runTest("compiler/testData/diagnostics/tests/cast/kt614.kt");
      }

      @Test
      @TestMetadata("nonUselessCastInLambda.kt")
      public void testNonUselessCastInLambda() {
        runTest("compiler/testData/diagnostics/tests/cast/nonUselessCastInLambda.kt");
      }

      @Test
      @TestMetadata("nothingAs.kt")
      public void testNothingAs() {
        runTest("compiler/testData/diagnostics/tests/cast/nothingAs.kt");
      }

      @Test
      @TestMetadata("NullableToNullable.kt")
      public void testNullableToNullable() {
        runTest("compiler/testData/diagnostics/tests/cast/NullableToNullable.kt");
      }

      @Test
      @TestMetadata("StableTypeForUselessCast.kt")
      public void testStableTypeForUselessCast() {
        runTest("compiler/testData/diagnostics/tests/cast/StableTypeForUselessCast.kt");
      }

      @Test
      @TestMetadata("usefulCastInGetOperator.kt")
      public void testUsefulCastInGetOperator() {
        runTest("compiler/testData/diagnostics/tests/cast/usefulCastInGetOperator.kt");
      }

      @Test
      @TestMetadata("usefulCastInMap.kt")
      public void testUsefulCastInMap() {
        runTest("compiler/testData/diagnostics/tests/cast/usefulCastInMap.kt");
      }

      @Test
      @TestMetadata("UselessSafeCast.kt")
      public void testUselessSafeCast() {
        runTest("compiler/testData/diagnostics/tests/cast/UselessSafeCast.kt");
      }

      @Test
      @TestMetadata("WhenWithExpression.kt")
      public void testWhenWithExpression() {
        runTest("compiler/testData/diagnostics/tests/cast/WhenWithExpression.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cast/bare")
      @TestDataPath("$PROJECT_ROOT")
      public class Bare {
        @Test
        @TestMetadata("EitherIs.kt")
        public void testEitherIs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/EitherIs.kt");
        }

        @Test
        @TestMetadata("EitherNotIs.kt")
        public void testEitherNotIs() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/EitherNotIs.kt");
        }

        @Test
        @TestMetadata("EitherWhen.kt")
        public void testEitherWhen() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/EitherWhen.kt");
        }

        @Test
        @TestMetadata("RedundantNullable.kt")
        public void testRedundantNullable() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/RedundantNullable.kt");
        }

        @Test
        @TestMetadata("SupertypeChain.kt")
        public void testSupertypeChain() {
          runTest("compiler/testData/diagnostics/tests/cast/bare/SupertypeChain.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds")
      @TestDataPath("$PROJECT_ROOT")
      public class NeverSucceeds {
        @Test
        @TestMetadata("CastToNotNullSuper.kt")
        public void testCastToNotNullSuper() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/CastToNotNullSuper.kt");
        }

        @Test
        @TestMetadata("DefinitelyNotNullTypes.kt")
        public void testDefinitelyNotNullTypes() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/DefinitelyNotNullTypes.kt");
        }

        @Test
        @TestMetadata("MappedDirect.kt")
        public void testMappedDirect() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedDirect.kt");
        }

        @Test
        @TestMetadata("NoGenericsUnrelated.kt")
        public void testNoGenericsUnrelated() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsUnrelated.kt");
        }

        @Test
        @TestMetadata("NullableExprToItsNonNullableGenericBaseClass.kt")
        public void testNullableExprToItsNonNullableGenericBaseClass() {
          runTest("compiler/testData/diagnostics/tests/cast/neverSucceeds/NullableExprToItsNonNullableGenericBaseClass.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/checkArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class CheckArguments {
      @Test
      @TestMetadata("kt17691WithEnabledFeature.kt")
      public void testKt17691WithEnabledFeature() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt17691WithEnabledFeature.kt");
      }

      @Test
      @TestMetadata("kt49276.kt")
      public void testKt49276() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt49276.kt");
      }

      @Test
      @TestMetadata("kt49276Disabled.kt")
      public void testKt49276Disabled() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt49276Disabled.kt");
      }

      @Test
      @TestMetadata("kt49276Error.kt")
      public void testKt49276Error() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt49276Error.kt");
      }

      @Test
      @TestMetadata("kt51062.kt")
      public void testKt51062() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt51062.kt");
      }

      @Test
      @TestMetadata("kt51062Error.kt")
      public void testKt51062Error() {
        runTest("compiler/testData/diagnostics/tests/checkArguments/kt51062Error.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/classLiteral")
    @TestDataPath("$PROJECT_ROOT")
    public class ClassLiteral {
      @Test
      @TestMetadata("classAndObjectLiteralType.kt")
      public void testClassAndObjectLiteralType() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/classAndObjectLiteralType.kt");
      }

      @Test
      @TestMetadata("integerValueType.kt")
      public void testIntegerValueType() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/integerValueType.kt");
      }

      @Test
      @TestMetadata("qualifiedClassLiteral.kt")
      public void testQualifiedClassLiteral() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/qualifiedClassLiteral.kt");
      }

      @Test
      @TestMetadata("simpleClassLiteral.kt")
      public void testSimpleClassLiteral() {
        runTest("compiler/testData/diagnostics/tests/classLiteral/simpleClassLiteral.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/classObjects")
    @TestDataPath("$PROJECT_ROOT")
    public class ClassObjects {
      @Test
      @TestMetadata("builtInClassObjects.kt")
      public void testBuiltInClassObjects() {
        runTest("compiler/testData/diagnostics/tests/classObjects/builtInClassObjects.kt");
      }

      @Test
      @TestMetadata("companionInInnerOfLocalClass.kt")
      public void testCompanionInInnerOfLocalClass() {
        runTest("compiler/testData/diagnostics/tests/classObjects/companionInInnerOfLocalClass.kt");
      }

      @Test
      @TestMetadata("companionInInnerOfObjectExpression.kt")
      public void testCompanionInInnerOfObjectExpression() {
        runTest("compiler/testData/diagnostics/tests/classObjects/companionInInnerOfObjectExpression.kt");
      }

      @Test
      @TestMetadata("importClassInClassObject.kt")
      public void testImportClassInClassObject() {
        runTest("compiler/testData/diagnostics/tests/classObjects/importClassInClassObject.kt");
      }

      @Test
      @TestMetadata("kt3866.kt")
      public void testKt3866() {
        runTest("compiler/testData/diagnostics/tests/classObjects/kt3866.kt");
      }

      @Test
      @TestMetadata("protectedFieldFromSuperCompanion_after.kt")
      public void testProtectedFieldFromSuperCompanion_after() {
        runTest("compiler/testData/diagnostics/tests/classObjects/protectedFieldFromSuperCompanion_after.kt");
      }

      @Test
      @TestMetadata("selfCallsInCompanionSuperConstructor_warning.kt")
      public void testSelfCallsInCompanionSuperConstructor_warning() {
        runTest("compiler/testData/diagnostics/tests/classObjects/selfCallsInCompanionSuperConstructor_warning.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstantEvaluator {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator/constant")
      @TestDataPath("$PROJECT_ROOT")
      public class Constant {
        @Test
        @TestMetadata("classObjectProperty.kt")
        public void testClassObjectProperty() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/classObjectProperty.kt");
        }

        @Test
        @TestMetadata("compareTo.kt")
        public void testCompareTo() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/compareTo.kt");
        }

        @Test
        @TestMetadata("divideByZero.kt")
        public void testDivideByZero() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/divideByZero.kt");
        }

        @Test
        @TestMetadata("equals.kt")
        public void testEquals() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/equals.kt");
        }

        @Test
        @TestMetadata("exceptionWhenEvaluate.kt")
        public void testExceptionWhenEvaluate() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/exceptionWhenEvaluate.kt");
        }

        @Test
        @TestMetadata("finalProperty.kt")
        public void testFinalProperty() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/finalProperty.kt");
        }

        @Test
        @TestMetadata("float.kt")
        public void testFloat() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/float.kt");
        }

        @Test
        @TestMetadata("invAsCompileTimeCall.kt")
        public void testInvAsCompileTimeCall() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/invAsCompileTimeCall.kt");
        }

        @Test
        @TestMetadata("localVal.kt")
        public void testLocalVal() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/localVal.kt");
        }

        @Test
        @TestMetadata("localVar.kt")
        public void testLocalVar() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/localVar.kt");
        }

        @Test
        @TestMetadata("nonFinalProperty.kt")
        public void testNonFinalProperty() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/nonFinalProperty.kt");
        }

        @Test
        @TestMetadata("objectProperty.kt")
        public void testObjectProperty() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/objectProperty.kt");
        }

        @Test
        @TestMetadata("strings.kt")
        public void testStrings() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/strings.kt");
        }

        @Test
        @TestMetadata("topLevelVal.kt")
        public void testTopLevelVal() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/topLevelVal.kt");
        }

        @Test
        @TestMetadata("topLevelVar.kt")
        public void testTopLevelVar() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/topLevelVar.kt");
        }

        @Test
        @TestMetadata("unaryMinusIndepWoExpType.kt")
        public void testUnaryMinusIndepWoExpType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/constant/unaryMinusIndepWoExpType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator/isPure")
      @TestDataPath("$PROJECT_ROOT")
      public class IsPure {
        @Test
        @TestMetadata("innerToType.kt")
        public void testInnerToType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/innerToType.kt");
        }

        @Test
        @TestMetadata("namedConstants.kt")
        public void testNamedConstants() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/namedConstants.kt");
        }

        @Test
        @TestMetadata("toType.kt")
        public void testToType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/toType.kt");
        }

        @Test
        @TestMetadata("unaryMinusIndepWoExpType.kt")
        public void testUnaryMinusIndepWoExpType() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/isPure/unaryMinusIndepWoExpType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant")
      @TestDataPath("$PROJECT_ROOT")
      public class UsesVariableAsConstant {
        @Test
        @TestMetadata("binaryTypes.kt")
        public void testBinaryTypes() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant/binaryTypes.kt");
        }

        @Test
        @TestMetadata("NamedConstants.kt")
        public void testNamedConstants() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant/NamedConstants.kt");
        }

        @Test
        @TestMetadata("OtherTypes.kt")
        public void testOtherTypes() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant/OtherTypes.kt");
        }

        @Test
        @TestMetadata("simpleTypes.kt")
        public void testSimpleTypes() {
          runTest("compiler/testData/diagnostics/tests/constantEvaluator/usesVariableAsConstant/simpleTypes.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/constructorConsistency")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstructorConsistency {
      @Test
      @TestMetadata("afterInitialization.kt")
      public void testAfterInitialization() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/afterInitialization.kt");
      }

      @Test
      @TestMetadata("aliencall.kt")
      public void testAliencall() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/aliencall.kt");
      }

      @Test
      @TestMetadata("assignment.kt")
      public void testAssignment() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/assignment.kt");
      }

      @Test
      @TestMetadata("backing.kt")
      public void testBacking() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/backing.kt");
      }

      @Test
      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/basic.kt");
      }

      @Test
      @TestMetadata("comparison.kt")
      public void testComparison() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/comparison.kt");
      }

      @Test
      @TestMetadata("delegate.kt")
      public void testDelegate() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/delegate.kt");
      }

      @Test
      @TestMetadata("derived.kt")
      public void testDerived() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/derived.kt");
      }

      @Test
      @TestMetadata("derivedProperty.kt")
      public void testDerivedProperty() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/derivedProperty.kt");
      }

      @Test
      @TestMetadata("getset.kt")
      public void testGetset() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/getset.kt");
      }

      @Test
      @TestMetadata("init.kt")
      public void testInit() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/init.kt");
      }

      @Test
      @TestMetadata("initializerWithSecondaryConstructor.kt")
      public void testInitializerWithSecondaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/initializerWithSecondaryConstructor.kt");
      }

      @Test
      @TestMetadata("initwithgetter.kt")
      public void testInitwithgetter() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/initwithgetter.kt");
      }

      @Test
      @TestMetadata("inspection.kt")
      public void testInspection() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/inspection.kt");
      }

      @Test
      @TestMetadata("lambdaInObject.kt")
      public void testLambdaInObject() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/lambdaInObject.kt");
      }

      @Test
      @TestMetadata("lateInit.kt")
      public void testLateInit() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/lateInit.kt");
      }

      @Test
      @TestMetadata("localObject.kt")
      public void testLocalObject() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/localObject.kt");
      }

      @Test
      @TestMetadata("multipleAreNull.kt")
      public void testMultipleAreNull() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/multipleAreNull.kt");
      }

      @Test
      @TestMetadata("nobacking.kt")
      public void testNobacking() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/nobacking.kt");
      }

      @Test
      @TestMetadata("open.kt")
      public void testOpen() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/open.kt");
      }

      @Test
      @TestMetadata("openProperty.kt")
      public void testOpenProperty() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/openProperty.kt");
      }

      @Test
      @TestMetadata("outer.kt")
      public void testOuter() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/outer.kt");
      }

      @Test
      @TestMetadata("parametersVsPropertiesFromPrimaryConstructor.kt")
      public void testParametersVsPropertiesFromPrimaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/parametersVsPropertiesFromPrimaryConstructor.kt");
      }

      @Test
      @TestMetadata("property.kt")
      public void testProperty() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/property.kt");
      }

      @Test
      @TestMetadata("propertyAccess.kt")
      public void testPropertyAccess() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/propertyAccess.kt");
      }

      @Test
      @TestMetadata("twoSecondaryConstructors.kt")
      public void testTwoSecondaryConstructors() {
        runTest("compiler/testData/diagnostics/tests/constructorConsistency/twoSecondaryConstructors.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @Test
      @TestMetadata("nonKotlinContractCall.kt")
      public void testNonKotlinContractCall() {
        runTest("compiler/testData/diagnostics/tests/contracts/nonKotlinContractCall.kt");
      }

      @Test
      @TestMetadata("nonKotlinContractCall2.kt")
      public void testNonKotlinContractCall2() {
        runTest("compiler/testData/diagnostics/tests/contracts/nonKotlinContractCall2.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/contracts/pos")
      @TestDataPath("$PROJECT_ROOT")
      public class Pos {
        @Test
        @TestMetadata("1.kt")
        public void test1() {
          runTest("compiler/testData/diagnostics/tests/contracts/pos/1.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis")
    @TestDataPath("$PROJECT_ROOT")
    public class ControlFlowAnalysis {
      @Test
      @TestMetadata("accessEnumEntryInLazy.kt")
      public void testAccessEnumEntryInLazy() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/accessEnumEntryInLazy.kt");
      }

      @Test
      @TestMetadata("assignedInFinally.kt")
      public void testAssignedInFinally() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInFinally.kt");
      }

      @Test
      @TestMetadata("assignedInIfElse.kt")
      public void testAssignedInIfElse() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInIfElse.kt");
      }

      @Test
      @TestMetadata("backingFieldInsideGetter_before.kt")
      public void testBackingFieldInsideGetter_before() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/backingFieldInsideGetter_before.kt");
      }

      @Test
      @TestMetadata("breakContinueInTryFinally.kt")
      public void testBreakContinueInTryFinally() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakContinueInTryFinally.kt");
      }

      @Test
      @TestMetadata("breakContinueInTryFinallyInLoop.kt")
      public void testBreakContinueInTryFinallyInLoop() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/breakContinueInTryFinallyInLoop.kt");
      }

      @Test
      @TestMetadata("checkInnerLocalDeclarations.kt")
      public void testCheckInnerLocalDeclarations() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/checkInnerLocalDeclarations.kt");
      }

      @Test
      @TestMetadata("delegatedConstructorArguments.kt")
      public void testDelegatedConstructorArguments() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/delegatedConstructorArguments.kt");
      }

      @Test
      @TestMetadata("delegatedConstructorOrder.kt")
      public void testDelegatedConstructorOrder() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/delegatedConstructorOrder.kt");
      }

      @Test
      @TestMetadata("infiniteLoops.kt")
      public void testInfiniteLoops() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/infiniteLoops.kt");
      }

      @Test
      @TestMetadata("initializationInLocalInnerClassWithSecondaryConstructor.kt")
      public void testInitializationInLocalInnerClassWithSecondaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalInnerClassWithSecondaryConstructor.kt");
      }

      @Test
      @TestMetadata("kt1001.kt")
      public void testKt1001() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1001.kt");
      }

      @Test
      @TestMetadata("kt1027.kt")
      public void testKt1027() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1027.kt");
      }

      @Test
      @TestMetadata("kt1066.kt")
      public void testKt1066() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1066.kt");
      }

      @Test
      @TestMetadata("kt10805.kt")
      public void testKt10805() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt10805.kt");
      }

      @Test
      @TestMetadata("kt1156.kt")
      public void testKt1156() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1156.kt");
      }

      @Test
      @TestMetadata("kt1189.kt")
      public void testKt1189() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1189.kt");
      }

      @Test
      @TestMetadata("kt1191.kt")
      public void testKt1191() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1191.kt");
      }

      @Test
      @TestMetadata("kt1219.1301.kt")
      public void testKt1219_1301() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1219.1301.kt");
      }

      @Test
      @TestMetadata("kt1977.kt")
      public void testKt1977() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1977.kt");
      }

      @Test
      @TestMetadata("kt2166_kt2103.kt")
      public void testKt2166_kt2103() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2166_kt2103.kt");
      }

      @Test
      @TestMetadata("kt2226.kt")
      public void testKt2226() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2226.kt");
      }

      @Test
      @TestMetadata("kt2972.kt")
      public void testKt2972() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2972.kt");
      }

      @Test
      @TestMetadata("kt3501.kt")
      public void testKt3501() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3501.kt");
      }

      @Test
      @TestMetadata("kt4126.kt")
      public void testKt4126() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4126.kt");
      }

      @Test
      @TestMetadata("kt510.kt")
      public void testKt510() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt510.kt");
      }

      @Test
      @TestMetadata("kt52131.kt")
      public void testKt52131() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt52131.kt");
      }

      @Test
      @TestMetadata("kt609.kt")
      public void testKt609() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt609.kt");
      }

      @Test
      @TestMetadata("kt610.kt")
      public void testKt610() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt610.kt");
      }

      @Test
      @TestMetadata("kt776.kt")
      public void testKt776() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/kt776.kt");
      }

      @Test
      @TestMetadata("localObjectInConstructor.kt")
      public void testLocalObjectInConstructor() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/localObjectInConstructor.kt");
      }

      @Test
      @TestMetadata("loopWithNonTrivialBooleanConst_error.kt")
      public void testLoopWithNonTrivialBooleanConst_error() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/loopWithNonTrivialBooleanConst_error.kt");
      }

      @Test
      @TestMetadata("loopWithNonTrivialBooleanConst_warning.kt")
      public void testLoopWithNonTrivialBooleanConst_warning() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/loopWithNonTrivialBooleanConst_warning.kt");
      }

      @Test
      @TestMetadata("mainWithWarningOnUnusedParam.kt")
      public void testMainWithWarningOnUnusedParam() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/mainWithWarningOnUnusedParam.kt");
      }

      @Test
      @TestMetadata("nestedTryFinally.kt")
      public void testNestedTryFinally() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nestedTryFinally.kt");
      }

      @Test
      @TestMetadata("nestedTryFinallyLambda.kt")
      public void testNestedTryFinallyLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nestedTryFinallyLambda.kt");
      }

      @Test
      @TestMetadata("nonLocalReturnUnreachable.kt")
      public void testNonLocalReturnUnreachable() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nonLocalReturnUnreachable.kt");
      }

      @Test
      @TestMetadata("nonLocalReturnWithFinally.kt")
      public void testNonLocalReturnWithFinally() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/nonLocalReturnWithFinally.kt");
      }

      @Test
      @TestMetadata("reassignmenGraphLoop.kt")
      public void testReassignmenGraphLoop() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmenGraphLoop.kt");
      }

      @Test
      @TestMetadata("reassignmentInLambda.kt")
      public void testReassignmentInLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInLambda.kt");
      }

      @Test
      @TestMetadata("reassignmentWithLambda.kt")
      public void testReassignmentWithLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentWithLambda.kt");
      }

      @Test
      @TestMetadata("safeCallAfterVariableInitialization.kt")
      public void testSafeCallAfterVariableInitialization() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/safeCallAfterVariableInitialization.kt");
      }

      @Test
      @TestMetadata("scopeOfAnonymousInitializer.kt")
      public void testScopeOfAnonymousInitializer() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/scopeOfAnonymousInitializer.kt");
      }

      @Test
      @TestMetadata("throwInLambda.kt")
      public void testThrowInLambda() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/throwInLambda.kt");
      }

      @Test
      @TestMetadata("tryWithAssignmentUsedInCatch.kt")
      public void testTryWithAssignmentUsedInCatch() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/tryWithAssignmentUsedInCatch.kt");
      }

      @Test
      @TestMetadata("unusedPropertyWithCustomAccessors.kt")
      public void testUnusedPropertyWithCustomAccessors() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unusedPropertyWithCustomAccessors.kt");
      }

      @Test
      @TestMetadata("varInitializationInIfInCycle.kt")
      public void testVarInitializationInIfInCycle() {
        runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/varInitializationInIfInCycle.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode")
      @TestDataPath("$PROJECT_ROOT")
      public class DeadCode {
        @Test
        @TestMetadata("commasAndWhitespaces.kt")
        public void testCommasAndWhitespaces() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/commasAndWhitespaces.kt");
        }

        @Test
        @TestMetadata("commentsInDeadCode.kt")
        public void testCommentsInDeadCode() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/commentsInDeadCode.kt");
        }

        @Test
        @TestMetadata("deadAnonymousObject.kt")
        public void testDeadAnonymousObject() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadAnonymousObject.kt");
        }

        @Test
        @TestMetadata("deadCallInInvokeCall.kt")
        public void testDeadCallInInvokeCall() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCallInInvokeCall.kt");
        }

        @Test
        @TestMetadata("deadCallInReceiver.kt")
        public void testDeadCallInReceiver() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCallInReceiver.kt");
        }

        @Test
        @TestMetadata("deadCodeFromDifferentSources.kt")
        public void testDeadCodeFromDifferentSources() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeFromDifferentSources.kt");
        }

        @Test
        @TestMetadata("deadCodeInArrayAccess.kt")
        public void testDeadCodeInArrayAccess() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInArrayAccess.kt");
        }

        @Test
        @TestMetadata("deadCodeInAssignment.kt")
        public void testDeadCodeInAssignment() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInAssignment.kt");
        }

        @Test
        @TestMetadata("deadCodeInBinaryExpressions.kt")
        public void testDeadCodeInBinaryExpressions() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInBinaryExpressions.kt");
        }

        @Test
        @TestMetadata("deadCodeInCalls.kt")
        public void testDeadCodeInCalls() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInCalls.kt");
        }

        @Test
        @TestMetadata("deadCodeInDeadCode.kt")
        public void testDeadCodeInDeadCode() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInDeadCode.kt");
        }

        @Test
        @TestMetadata("deadCodeInIf.kt")
        public void testDeadCodeInIf() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInIf.kt");
        }

        @Test
        @TestMetadata("deadCodeInInnerExpressions.kt")
        public void testDeadCodeInInnerExpressions() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInInnerExpressions.kt");
        }

        @Test
        @TestMetadata("deadCodeInLocalDeclarations.kt")
        public void testDeadCodeInLocalDeclarations() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInLocalDeclarations.kt");
        }

        @Test
        @TestMetadata("deadCodeInLoops.kt")
        public void testDeadCodeInLoops() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInLoops.kt");
        }

        @Test
        @TestMetadata("deadCodeInReturn.kt")
        public void testDeadCodeInReturn() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInReturn.kt");
        }

        @Test
        @TestMetadata("deadCodeInWhileFromBreak.kt")
        public void testDeadCodeInWhileFromBreak() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInWhileFromBreak.kt");
        }

        @Test
        @TestMetadata("deadLocalDeclaration.kt")
        public void testDeadLocalDeclaration() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadLocalDeclaration.kt");
        }

        @Test
        @TestMetadata("deadNestedDeclaration.kt")
        public void testDeadNestedDeclaration() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadNestedDeclaration.kt");
        }

        @Test
        @TestMetadata("deadPostponedLambda.kt")
        public void testDeadPostponedLambda() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadPostponedLambda.kt");
        }

        @Test
        @TestMetadata("expressionInUnitLiteral.kt")
        public void testExpressionInUnitLiteral() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/expressionInUnitLiteral.kt");
        }

        @Test
        @TestMetadata("kt2585_1.kt")
        public void testKt2585_1() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_1.kt");
        }

        @Test
        @TestMetadata("kt2585_2.kt")
        public void testKt2585_2() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_2.kt");
        }

        @Test
        @TestMetadata("kt2585_3.kt")
        public void testKt2585_3() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt2585_3.kt");
        }

        @Test
        @TestMetadata("kt3162tryAsInitializer.kt")
        public void testKt3162tryAsInitializer() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt3162tryAsInitializer.kt");
        }

        @Test
        @TestMetadata("kt5200DeadCodeInLambdas.kt")
        public void testKt5200DeadCodeInLambdas() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/kt5200DeadCodeInLambdas.kt");
        }

        @Test
        @TestMetadata("nonLocalJump.kt")
        public void testNonLocalJump() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/nonLocalJump.kt");
        }

        @Test
        @TestMetadata("returnInDeadLambda.kt")
        public void testReturnInDeadLambda() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/returnInDeadLambda.kt");
        }

        @Test
        @TestMetadata("smartCastAfterDeadCode.kt")
        public void testSmartCastAfterDeadCode() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/smartCastAfterDeadCode.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn")
      @TestDataPath("$PROJECT_ROOT")
      public class DefiniteReturn {
        @Test
        @TestMetadata("elvisOperator.kt")
        public void testElvisOperator() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/elvisOperator.kt");
        }

        @Test
        @TestMetadata("InlineReturn.kt")
        public void testInlineReturn() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/InlineReturn.kt");
        }

        @Test
        @TestMetadata("kt4034.kt")
        public void testKt4034() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt4034.kt");
        }

        @Test
        @TestMetadata("lambdaInTryFalsePositive.kt")
        public void testLambdaInTryFalsePositive() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/lambdaInTryFalsePositive.kt");
        }

        @Test
        @TestMetadata("returnAliasedUnitNotRequired.kt")
        public void testReturnAliasedUnitNotRequired() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/returnAliasedUnitNotRequired.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/postponed")
      @TestDataPath("$PROJECT_ROOT")
      public class Postponed {
        @Test
        @TestMetadata("postponedLambdaUnreachable.kt")
        public void testPostponedLambdaUnreachable() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/postponed/postponedLambdaUnreachable.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit")
      @TestDataPath("$PROJECT_ROOT")
      public class UnnecessaryLateinit {
        @Test
        @TestMetadata("lateinitRecursiveInLambda.kt")
        public void testLateinitRecursiveInLambda() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitRecursiveInLambda.kt");
        }

        @Test
        @TestMetadata("lateinitWithConstructor.kt")
        public void testLateinitWithConstructor() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithConstructor.kt");
        }

        @Test
        @TestMetadata("lateinitWithInit.kt")
        public void testLateinitWithInit() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithInit.kt");
        }

        @Test
        @TestMetadata("lateinitWithMultipleConstructors.kt")
        public void testLateinitWithMultipleConstructors() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithMultipleConstructors.kt");
        }

        @Test
        @TestMetadata("lateinitWithMultipleConstructorsAndDelegation.kt")
        public void testLateinitWithMultipleConstructorsAndDelegation() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithMultipleConstructorsAndDelegation.kt");
        }

        @Test
        @TestMetadata("lateinitWithPlusAssign.kt")
        public void testLateinitWithPlusAssign() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithPlusAssign.kt");
        }

        @Test
        @TestMetadata("lateinitWithPrimaryConstructorAndConstructor.kt")
        public void testLateinitWithPrimaryConstructorAndConstructor() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithPrimaryConstructorAndConstructor.kt");
        }

        @Test
        @TestMetadata("normalLateinit.kt")
        public void testNormalLateinit() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/normalLateinit.kt");
        }

        @Test
        @TestMetadata("normalLateinitWithTwoConstructors.kt")
        public void testNormalLateinitWithTwoConstructors() {
          runTest("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/normalLateinitWithTwoConstructors.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/controlStructures")
    @TestDataPath("$PROJECT_ROOT")
    public class ControlStructures {
      @Test
      @TestMetadata("breakToLabel.kt")
      public void testBreakToLabel() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/breakToLabel.kt");
      }

      @Test
      @TestMetadata("commonSupertypeOfT.kt")
      public void testCommonSupertypeOfT() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/commonSupertypeOfT.kt");
      }

      @Test
      @TestMetadata("ForWithoutBraces.kt")
      public void testForWithoutBraces() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ForWithoutBraces.kt");
      }

      @Test
      @TestMetadata("ifInResultOfLambda.kt")
      public void testIfInResultOfLambda() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/ifInResultOfLambda.kt");
      }

      @Test
      @TestMetadata("kt10322.kt")
      public void testKt10322() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt10322.kt");
      }

      @Test
      @TestMetadata("kt10706.kt")
      public void testKt10706() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt10706.kt");
      }

      @Test
      @TestMetadata("kt51711.kt")
      public void testKt51711() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/kt51711.kt");
      }

      @Test
      @TestMetadata("lambdasInExclExclAndElvis.kt")
      public void testLambdasInExclExclAndElvis() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/lambdasInExclExclAndElvis.kt");
      }

      @Test
      @TestMetadata("redundantLabel.kt")
      public void testRedundantLabel() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/redundantLabel.kt");
      }

      @Test
      @TestMetadata("specialConstructsWithNullableExpectedType.kt")
      public void testSpecialConstructsWithNullableExpectedType() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/specialConstructsWithNullableExpectedType.kt");
      }

      @Test
      @TestMetadata("whenInResultOfLambda.kt")
      public void testWhenInResultOfLambda() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/whenInResultOfLambda.kt");
      }

      @Test
      @TestMetadata("whenWithNothingTypedSubject.kt")
      public void testWhenWithNothingTypedSubject() {
        runTest("compiler/testData/diagnostics/tests/controlStructures/whenWithNothingTypedSubject.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    public class Coroutines {
      @Test
      @TestMetadata("inlineSuspendTypealias.kt")
      public void testInlineSuspendTypealias() {
        runTest("compiler/testData/diagnostics/tests/coroutines/inlineSuspendTypealias.kt");
      }

      @Test
      @TestMetadata("suspendInvokeInsideTry.kt")
      public void testSuspendInvokeInsideTry() {
        runTest("compiler/testData/diagnostics/tests/coroutines/suspendInvokeInsideTry.kt");
      }

      @Test
      @TestMetadata("suspendInvokeInsideWhen.kt")
      public void testSuspendInvokeInsideWhen() {
        runTest("compiler/testData/diagnostics/tests/coroutines/suspendInvokeInsideWhen.kt");
      }

      @Test
      @TestMetadata("suspendInvokeWithReceiver.kt")
      public void testSuspendInvokeWithReceiver() {
        runTest("compiler/testData/diagnostics/tests/coroutines/suspendInvokeWithReceiver.kt");
      }

      @Test
      @TestMetadata("suspendLambdaFromExpectedType.kt")
      public void testSuspendLambdaFromExpectedType() {
        runTest("compiler/testData/diagnostics/tests/coroutines/suspendLambdaFromExpectedType.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype")
      @TestDataPath("$PROJECT_ROOT")
      public class SuspendFunctionAsSupertype {
        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple")
        @TestDataPath("$PROJECT_ROOT")
        public class Simple {
          @Test
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/simple.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN")
        @TestDataPath("$PROJECT_ROOT")
        public class SuspendFunctionN {
          @Test
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/simple.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy")
    @TestDataPath("$PROJECT_ROOT")
    public class CyclicHierarchy {
      @Test
      @TestMetadata("javaJavaNested.kt")
      public void testJavaJavaNested() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/javaJavaNested.kt");
      }

      @Test
      @TestMetadata("nestedClassInSuperClassParameter.kt")
      public void testNestedClassInSuperClassParameter() {
        runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/nestedClassInSuperClassParameter.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion")
      @TestDataPath("$PROJECT_ROOT")
      public class WithCompanion {
        @Test
        @TestMetadata("everythingInOneScope_after.kt")
        public void testEverythingInOneScope_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/everythingInOneScope_after.kt");
        }

        @Test
        @TestMetadata("everythingInOneScope_before.kt")
        public void testEverythingInOneScope_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/everythingInOneScope_before.kt");
        }

        @Test
        @TestMetadata("onlyInterfaces_after.kt")
        public void testOnlyInterfaces_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/onlyInterfaces_after.kt");
        }

        @Test
        @TestMetadata("onlyInterfaces_before.kt")
        public void testOnlyInterfaces_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/onlyInterfaces_before.kt");
        }

        @Test
        @TestMetadata("typeIsLowEnough.kt")
        public void testTypeIsLowEnough() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/typeIsLowEnough.kt");
        }

        @Test
        @TestMetadata("withIrrelevantInterface_after.kt")
        public void testWithIrrelevantInterface_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withIrrelevantInterface_after.kt");
        }

        @Test
        @TestMetadata("withIrrelevantInterface_before.kt")
        public void testWithIrrelevantInterface_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withIrrelevantInterface_before.kt");
        }

        @Test
        @TestMetadata("withMembers_after.kt")
        public void testWithMembers_after() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withMembers_after.kt");
        }

        @Test
        @TestMetadata("withMembers_before.kt")
        public void testWithMembers_before() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withMembers_before.kt");
        }

        @Test
        @TestMetadata("withoutTypeReference.kt")
        public void testWithoutTypeReference() {
          runTest("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/withoutTypeReference.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataClassNonPublicConstructor")
    @TestDataPath("$PROJECT_ROOT")
    public class DataClassNonPublicConstructor {
      @Test
      @TestMetadata("deprecationPhase1_inlineFun_privateToThis.kt")
      public void testDeprecationPhase1_inlineFun_privateToThis() {
        runTest("compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase1_inlineFun_privateToThis.kt");
      }

      @Test
      @TestMetadata("deprecationPhase1_optOut.kt")
      public void testDeprecationPhase1_optOut() {
        runTest("compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase1_optOut.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class DataClasses {
      @Test
      @TestMetadata("componentNamedComponent1.kt")
      public void testComponentNamedComponent1() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/componentNamedComponent1.kt");
      }

      @Test
      @TestMetadata("copyOfPrivateClass.kt")
      public void testCopyOfPrivateClass() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/copyOfPrivateClass.kt");
      }

      @Test
      @TestMetadata("dataClassNotOverridingCopy.kt")
      public void testDataClassNotOverridingCopy() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataClassNotOverridingCopy.kt");
      }

      @Test
      @TestMetadata("dataObjectEnabled.kt")
      public void testDataObjectEnabled() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/dataObjectEnabled.kt");
      }

      @Test
      @TestMetadata("finalMembersInBaseClass.kt")
      public void testFinalMembersInBaseClass() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/finalMembersInBaseClass.kt");
      }

      @Test
      @TestMetadata("implementTraitWhichHasComponent1.kt")
      public void testImplementTraitWhichHasComponent1() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasComponent1.kt");
      }

      @Test
      @TestMetadata("propertyTypeCollision.kt")
      public void testPropertyTypeCollision() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/propertyTypeCollision.kt");
      }

      @Test
      @TestMetadata("propertyTypeCollisionAndAnnotations.kt")
      public void testPropertyTypeCollisionAndAnnotations() {
        runTest("compiler/testData/diagnostics/tests/dataClasses/propertyTypeCollisionAndAnnotations.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataFlow")
    @TestDataPath("$PROJECT_ROOT")
    public class DataFlow {
      @Test
      @TestMetadata("CalleeExpression.kt")
      public void testCalleeExpression() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/CalleeExpression.kt");
      }

      @Test
      @TestMetadata("MultipleBranchesInWhileLoopInInlinedLambda.kt")
      public void testMultipleBranchesInWhileLoopInInlinedLambda() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/MultipleBranchesInWhileLoopInInlinedLambda.kt");
      }

      @Test
      @TestMetadata("smartCastWithLambdaAndCallableReference.kt")
      public void testSmartCastWithLambdaAndCallableReference() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/smartCastWithLambdaAndCallableReference.kt");
      }

      @Test
      @TestMetadata("WhenSubject.kt")
      public void testWhenSubject() {
        runTest("compiler/testData/diagnostics/tests/dataFlow/WhenSubject.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment")
      @TestDataPath("$PROJECT_ROOT")
      public class Assignment {
        @Test
        @TestMetadata("kt6118.kt")
        public void testKt6118() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/kt6118.kt");
        }

        @Test
        @TestMetadata("when.kt")
        public void testWhen() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/assignment/when.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/local")
      @TestDataPath("$PROJECT_ROOT")
      public class Local {
        @Test
        @TestMetadata("kt2835.kt")
        public void testKt2835() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/kt2835.kt");
        }

        @Test
        @TestMetadata("LocalClassBase.kt")
        public void testLocalClassBase() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassBase.kt");
        }

        @Test
        @TestMetadata("LocalClassDefaultParameters.kt")
        public void testLocalClassDefaultParameters() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDefaultParameters.kt");
        }

        @Test
        @TestMetadata("LocalClassDelegatedProperties.kt")
        public void testLocalClassDelegatedProperties() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegatedProperties.kt");
        }

        @Test
        @TestMetadata("LocalClassDelegation.kt")
        public void testLocalClassDelegation() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassDelegation.kt");
        }

        @Test
        @TestMetadata("LocalClassFunctions.kt")
        public void testLocalClassFunctions() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassFunctions.kt");
        }

        @Test
        @TestMetadata("LocalClassInMemberOfLocalClass.kt")
        public void testLocalClassInMemberOfLocalClass() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInMemberOfLocalClass.kt");
        }

        @Test
        @TestMetadata("LocalClassInitializer.kt")
        public void testLocalClassInitializer() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassInitializer.kt");
        }

        @Test
        @TestMetadata("LocalClassProperty.kt")
        public void testLocalClassProperty() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalClassProperty.kt");
        }

        @Test
        @TestMetadata("LocalObject.kt")
        public void testLocalObject() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalObject.kt");
        }

        @Test
        @TestMetadata("LocalObjectDelegation.kt")
        public void testLocalObjectDelegation() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/LocalObjectDelegation.kt");
        }

        @Test
        @TestMetadata("NestedLocalClass.kt")
        public void testNestedLocalClass() {
          runTest("compiler/testData/diagnostics/tests/dataFlow/local/NestedLocalClass.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal")
    @TestDataPath("$PROJECT_ROOT")
    public class DataFlowInfoTraversal {
      @Test
      @TestMetadata("Assignment.kt")
      public void testAssignment() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Assignment.kt");
      }

      @Test
      @TestMetadata("AssignmentInInitializer.kt")
      public void testAssignmentInInitializer() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentInInitializer.kt");
      }

      @Test
      @TestMetadata("kt4332WhenBranches.kt")
      public void testKt4332WhenBranches() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt4332WhenBranches.kt");
      }

      @Test
      @TestMetadata("kt5155WhenBranches.kt")
      public void testKt5155WhenBranches() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt5155WhenBranches.kt");
      }

      @Test
      @TestMetadata("kt5182WhenBranches.kt")
      public void testKt5182WhenBranches() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/kt5182WhenBranches.kt");
      }

      @Test
      @TestMetadata("When.kt")
      public void testWhen() {
        runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/When.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts")
      @TestDataPath("$PROJECT_ROOT")
      public class Smartcasts {
        @Test
        @TestMetadata("SmartcastAmbiguitites.kt")
        public void testSmartcastAmbiguitites() {
          runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts/SmartcastAmbiguitites.kt");
        }

        @Test
        @TestMetadata("SmartcastsForStableIdentifiers.kt")
        public void testSmartcastsForStableIdentifiers() {
          runTest("compiler/testData/diagnostics/tests/dataFlowInfoTraversal/smartcasts/SmartcastsForStableIdentifiers.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks")
    @TestDataPath("$PROJECT_ROOT")
    public class DeclarationChecks {
      @Test
      @TestMetadata("anonymousFunUnusedLastExpressionInBlock.kt")
      public void testAnonymousFunUnusedLastExpressionInBlock() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/anonymousFunUnusedLastExpressionInBlock.kt");
      }

      @Test
      @TestMetadata("DataFlowInfoInMultiDecl.kt")
      public void testDataFlowInfoInMultiDecl() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/DataFlowInfoInMultiDecl.kt");
      }

      @Test
      @TestMetadata("kt2142.kt")
      public void testKt2142() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2142.kt");
      }

      @Test
      @TestMetadata("kt2643MultiDeclInControlFlow.kt")
      public void testKt2643MultiDeclInControlFlow() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/kt2643MultiDeclInControlFlow.kt");
      }

      @Test
      @TestMetadata("mappedFunctionNotImplemented.kt")
      public void testMappedFunctionNotImplemented() {
        runTest("compiler/testData/diagnostics/tests/declarationChecks/mappedFunctionNotImplemented.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations")
      @TestDataPath("$PROJECT_ROOT")
      public class DestructuringDeclarations {
        @Test
        @TestMetadata("DoubleDeclForLoop.kt")
        public void testDoubleDeclForLoop() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/DoubleDeclForLoop.kt");
        }

        @Test
        @TestMetadata("ForLoopWithExtensions.kt")
        public void testForLoopWithExtensions() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopWithExtensions.kt");
        }

        @Test
        @TestMetadata("ForWithExplicitTypes.kt")
        public void testForWithExplicitTypes() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForWithExplicitTypes.kt");
        }

        @Test
        @TestMetadata("kt2829.kt")
        public void testKt2829() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/kt2829.kt");
        }

        @Test
        @TestMetadata("lastDestructuringDeclarationInBlock.kt")
        public void testLastDestructuringDeclarationInBlock() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/lastDestructuringDeclarationInBlock.kt");
        }

        @Test
        @TestMetadata("SingleDeclForLoop.kt")
        public void testSingleDeclForLoop() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/SingleDeclForLoop.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction")
      @TestDataPath("$PROJECT_ROOT")
      public class FiniteBoundRestriction {
        @Test
        @TestMetadata("JavaSuperType.kt")
        public void testJavaSuperType() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/JavaSuperType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction")
      @TestDataPath("$PROJECT_ROOT")
      public class NonExpansiveInheritanceRestriction {
        @Test
        @TestMetadata("Comparable.kt")
        public void testComparable() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/Comparable.kt");
        }

        @Test
        @TestMetadata("JavaWithKotlin2.kt")
        public void testJavaWithKotlin2() {
          runTest("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/JavaWithKotlin2.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class DefaultArguments {
      @Test
      @TestMetadata("overrideWithoutDefaultButBaseWithDefaultAndKMP.kt")
      public void testOverrideWithoutDefaultButBaseWithDefaultAndKMP() {
        runTest("compiler/testData/diagnostics/tests/defaultArguments/overrideWithoutDefaultButBaseWithDefaultAndKMP.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegatedProperty {
      @Test
      @TestMetadata("absentErrorAboutInitializer.kt")
      public void testAbsentErrorAboutInitializer() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutInitializer.kt");
      }

      @Test
      @TestMetadata("absentErrorAboutType.kt")
      public void testAbsentErrorAboutType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/absentErrorAboutType.kt");
      }

      @Test
      @TestMetadata("defaultGetter.kt")
      public void testDefaultGetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/defaultGetter.kt");
      }

      @Test
      @TestMetadata("defaultSetter.kt")
      public void testDefaultSetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/defaultSetter.kt");
      }

      @Test
      @TestMetadata("delegatedPropertyOverridedInTrait.kt")
      public void testDelegatedPropertyOverridedInTrait() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTrait.kt");
      }

      @Test
      @TestMetadata("genericGetter.kt")
      public void testGenericGetter() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/genericGetter.kt");
      }

      @Test
      @TestMetadata("getterWithSubtype.kt")
      public void testGetterWithSubtype() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/getterWithSubtype.kt");
      }

      @Test
      @TestMetadata("localVariable.kt")
      public void testLocalVariable() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/localVariable.kt");
      }

      @Test
      @TestMetadata("localWithSmartCast.kt")
      public void testLocalWithSmartCast() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/localWithSmartCast.kt");
      }

      @Test
      @TestMetadata("noInferenceFromWrappedDelegate.kt")
      public void testNoInferenceFromWrappedDelegate() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/noInferenceFromWrappedDelegate.kt");
      }

      @Test
      @TestMetadata("noPreliminarySetterInferenceForImplicitlyTypedVar.kt")
      public void testNoPreliminarySetterInferenceForImplicitlyTypedVar() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/noPreliminarySetterInferenceForImplicitlyTypedVar.kt");
      }

      @Test
      @TestMetadata("setterWithSupertype.kt")
      public void testSetterWithSupertype() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/setterWithSupertype.kt");
      }

      @Test
      @TestMetadata("severalReceivers.kt")
      public void testSeveralReceivers() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/severalReceivers.kt");
      }

      @Test
      @TestMetadata("thisOfAnyType.kt")
      public void testThisOfAnyType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/thisOfAnyType.kt");
      }

      @Test
      @TestMetadata("useTypeParameterOfExtensionProperty_Disabled.kt")
      public void testUseTypeParameterOfExtensionProperty_Disabled() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/useTypeParameterOfExtensionProperty_Disabled.kt");
      }

      @Test
      @TestMetadata("wrongSetterReturnType.kt")
      public void testWrongSetterReturnType() {
        runTest("compiler/testData/diagnostics/tests/delegatedProperty/wrongSetterReturnType.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        @TestMetadata("annotatedAccessor.kt")
        public void testAnnotatedAccessor() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/annotatedAccessor.kt");
        }

        @Test
        @TestMetadata("callableReferenceArgumentInDelegatedExpression.kt")
        public void testCallableReferenceArgumentInDelegatedExpression() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/callableReferenceArgumentInDelegatedExpression.kt");
        }

        @Test
        @TestMetadata("decoratedLambda.kt")
        public void testDecoratedLambda() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/decoratedLambda.kt");
        }

        @Test
        @TestMetadata("delegateExpressionAsLambda.kt")
        public void testDelegateExpressionAsLambda() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/delegateExpressionAsLambda.kt");
        }

        @Test
        @TestMetadata("delegatedExpressionWithLabeledReturnInsideLambda.kt")
        public void testDelegatedExpressionWithLabeledReturnInsideLambda() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/delegatedExpressionWithLabeledReturnInsideLambda.kt");
        }

        @Test
        @TestMetadata("elvisInDelegated.kt")
        public void testElvisInDelegated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/elvisInDelegated.kt");
        }

        @Test
        @TestMetadata("extensionGet.kt")
        public void testExtensionGet() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionGet.kt");
        }

        @Test
        @TestMetadata("fullyCompleteDelegateWhenPossible.kt")
        public void testFullyCompleteDelegateWhenPossible() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/fullyCompleteDelegateWhenPossible.kt");
        }

        @Test
        @TestMetadata("ifInDelegated.kt")
        public void testIfInDelegated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/ifInDelegated.kt");
        }

        @Test
        @TestMetadata("kt41952.kt")
        public void testKt41952() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/kt41952.kt");
        }

        @Test
        @TestMetadata("labeledDelegatedExpression.kt")
        public void testLabeledDelegatedExpression() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/labeledDelegatedExpression.kt");
        }

        @Test
        @TestMetadata("lambdaWithMultipleReturns.kt")
        public void testLambdaWithMultipleReturns() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/lambdaWithMultipleReturns.kt");
        }

        @Test
        @TestMetadata("nestedPartiallyResolvedCalls.kt")
        public void testNestedPartiallyResolvedCalls() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/nestedPartiallyResolvedCalls.kt");
        }

        @Test
        @TestMetadata("nestedPartiallyResolvedCallsSimple.kt")
        public void testNestedPartiallyResolvedCallsSimple() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/nestedPartiallyResolvedCallsSimple.kt");
        }

        @Test
        @TestMetadata("notNullAssertionInLocalDelegated.kt")
        public void testNotNullAssertionInLocalDelegated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/notNullAssertionInLocalDelegated.kt");
        }

        @Test
        @TestMetadata("nothingTypeThisRef.kt")
        public void testNothingTypeThisRef() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/nothingTypeThisRef.kt");
        }

        @Test
        @TestMetadata("provideDelegateFixationResultContainsOtherInnerVariable.kt")
        public void testProvideDelegateFixationResultContainsOtherInnerVariable() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/provideDelegateFixationResultContainsOtherInnerVariable.kt");
        }

        @Test
        @TestMetadata("provideDelegateUsesOuterCS.kt")
        public void testProvideDelegateUsesOuterCS() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/provideDelegateUsesOuterCS.kt");
        }

        @Test
        @TestMetadata("resultTypeOfLambdaForConventionMethods.kt")
        public void testResultTypeOfLambdaForConventionMethods() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/resultTypeOfLambdaForConventionMethods.kt");
        }

        @Test
        @TestMetadata("tryInGenerated.kt")
        public void testTryInGenerated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/tryInGenerated.kt");
        }

        @Test
        @TestMetadata("typeOfLazyDelegatedPropertyWithObject.kt")
        public void testTypeOfLazyDelegatedPropertyWithObject() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/typeOfLazyDelegatedPropertyWithObject.kt");
        }

        @Test
        @TestMetadata("typeVariablesFlow.kt")
        public void testTypeVariablesFlow() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/typeVariablesFlow.kt");
        }

        @Test
        @TestMetadata("useExpectedType.kt")
        public void testUseExpectedType() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedType.kt");
        }

        @Test
        @TestMetadata("useExpectedTypeForVal.kt")
        public void testUseExpectedTypeForVal() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/inference/useExpectedTypeForVal.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate")
      @TestDataPath("$PROJECT_ROOT")
      public class ProvideDelegate {
        @Test
        @TestMetadata("commonCaseForInference.kt")
        public void testCommonCaseForInference() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/commonCaseForInference.kt");
        }

        @Test
        @TestMetadata("commonSupertype.kt")
        public void testCommonSupertype() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/commonSupertype.kt");
        }

        @Test
        @TestMetadata("genericProvideDelegate.kt")
        public void testGenericProvideDelegate() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/genericProvideDelegate.kt");
        }

        @Test
        @TestMetadata("hostAndReceiver3.kt")
        public void testHostAndReceiver3() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver3.kt");
        }

        @Test
        @TestMetadata("inferenceFromReceiver1.kt")
        public void testInferenceFromReceiver1() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/inferenceFromReceiver1.kt");
        }

        @Test
        @TestMetadata("inferenceFromReceiver2.kt")
        public void testInferenceFromReceiver2() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/inferenceFromReceiver2.kt");
        }

        @Test
        @TestMetadata("kt38714.kt")
        public void testKt38714() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/kt38714.kt");
        }

        @Test
        @TestMetadata("localDelegatedProperty.kt")
        public void testLocalDelegatedProperty() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/localDelegatedProperty.kt");
        }

        @Test
        @TestMetadata("notNullAssertionInLocalDelegated.kt")
        public void testNotNullAssertionInLocalDelegated() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/notNullAssertionInLocalDelegated.kt");
        }

        @Test
        @TestMetadata("onObject.kt")
        public void testOnObject() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/onObject.kt");
        }

        @Test
        @TestMetadata("overloadResolutionForSeveralProvideDelegates.kt")
        public void testOverloadResolutionForSeveralProvideDelegates() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/overloadResolutionForSeveralProvideDelegates.kt");
        }

        @Test
        @TestMetadata("provideDelegateResolutionWithStubTypes.kt")
        public void testProvideDelegateResolutionWithStubTypes() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateResolutionWithStubTypes.kt");
        }

        @Test
        @TestMetadata("provideDelegateResolutionWithStubTypesAndExtensionGetValue.kt")
        public void testProvideDelegateResolutionWithStubTypesAndExtensionGetValue() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateResolutionWithStubTypesAndExtensionGetValue.kt");
        }

        @Test
        @TestMetadata("setValue.kt")
        public void testSetValue() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/setValue.kt");
        }

        @Test
        @TestMetadata("simpleProvideDelegate.kt")
        public void testSimpleProvideDelegate() {
          runTest("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/simpleProvideDelegate.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/delegation")
    @TestDataPath("$PROJECT_ROOT")
    public class Delegation {
      @Test
      @TestMetadata("Delegation_DifferentGenerics_Intersection.kt")
      public void testDelegation_DifferentGenerics_Intersection() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics_Intersection.kt");
      }

      @Test
      @TestMetadata("Delegation_DifferentGenerics_MultipleDelegation.kt")
      public void testDelegation_DifferentGenerics_MultipleDelegation() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics_MultipleDelegation.kt");
      }

      @Test
      @TestMetadata("Delegation_DifferentGenerics_RawType.kt")
      public void testDelegation_DifferentGenerics_RawType() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics_RawType.kt");
      }

      @Test
      @TestMetadata("Delegation_GenericWithRawType.kt")
      public void testDelegation_GenericWithRawType() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_GenericWithRawType.kt");
      }

      @Test
      @TestMetadata("Delegation_Hierarchy.kt")
      public void testDelegation_Hierarchy() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_Hierarchy.kt");
      }

      @Test
      @TestMetadata("Delegation_ScopeInitializationOrder.kt")
      public void testDelegation_ScopeInitializationOrder() {
        runTest("compiler/testData/diagnostics/tests/delegation/Delegation_ScopeInitializationOrder.kt");
      }

      @Test
      @TestMetadata("kt8154.kt")
      public void testKt8154() {
        runTest("compiler/testData/diagnostics/tests/delegation/kt8154.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegation/clashes")
      @TestDataPath("$PROJECT_ROOT")
      public class Clashes {
        @Test
        @TestMetadata("delegateFieldWithAnnotationClash.kt")
        public void testDelegateFieldWithAnnotationClash() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/delegateFieldWithAnnotationClash.kt");
        }

        @Test
        @TestMetadata("nestedNameClash.kt")
        public void testNestedNameClash() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/nestedNameClash.kt");
        }

        @Test
        @TestMetadata("nestedNameClash2.kt")
        public void testNestedNameClash2() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/nestedNameClash2.kt");
        }

        @Test
        @TestMetadata("nestedNameClash3.kt")
        public void testNestedNameClash3() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/nestedNameClash3.kt");
        }

        @Test
        @TestMetadata("nestedNameClashAndAnnotations.kt")
        public void testNestedNameClashAndAnnotations() {
          runTest("compiler/testData/diagnostics/tests/delegation/clashes/nestedNameClashAndAnnotations.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride")
      @TestDataPath("$PROJECT_ROOT")
      public class MemberHidesSupertypeOverride {
        @Test
        @TestMetadata("abstractOverride.kt")
        public void testAbstractOverride() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/abstractOverride.kt");
        }

        @Test
        @TestMetadata("delegationToSubType.kt")
        public void testDelegationToSubType() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubType.kt");
        }

        @Test
        @TestMetadata("delegationToSubTypeProperty.kt")
        public void testDelegationToSubTypeProperty() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeProperty.kt");
        }

        @Test
        @TestMetadata("delegationToSubTypeWithOverride.kt")
        public void testDelegationToSubTypeWithOverride() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeWithOverride.kt");
        }

        @Test
        @TestMetadata("delegationToSubTypeWithOverrideProperty.kt")
        public void testDelegationToSubTypeWithOverrideProperty() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/delegationToSubTypeWithOverrideProperty.kt");
        }

        @Test
        @TestMetadata("explicitOverride.kt")
        public void testExplicitOverride() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/explicitOverride.kt");
        }

        @Test
        @TestMetadata("fakeOverrideInTheMiddle.kt")
        public void testFakeOverrideInTheMiddle() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/fakeOverrideInTheMiddle.kt");
        }

        @Test
        @TestMetadata("generic.kt")
        public void testGeneric() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/generic.kt");
        }

        @Test
        @TestMetadata("sameDelegationInHierarchy.kt")
        public void testSameDelegationInHierarchy() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/sameDelegationInHierarchy.kt");
        }

        @Test
        @TestMetadata("sameDelegationInHierarchy2.kt")
        public void testSameDelegationInHierarchy2() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/sameDelegationInHierarchy2.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simple.kt");
        }

        @Test
        @TestMetadata("simpleNoOverride.kt")
        public void testSimpleNoOverride() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simpleNoOverride.kt");
        }

        @Test
        @TestMetadata("simpleProp.kt")
        public void testSimpleProp() {
          runTest("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/simpleProp.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/deparenthesize")
    @TestDataPath("$PROJECT_ROOT")
    public class Deparenthesize {
      @Test
      @TestMetadata("annotatedSafeCall.kt")
      public void testAnnotatedSafeCall() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/annotatedSafeCall.kt");
      }

      @Test
      @TestMetadata("labeledSafeCall.kt")
      public void testLabeledSafeCall() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/labeledSafeCall.kt");
      }

      @Test
      @TestMetadata("multiParenthesizedSafeCall.kt")
      public void testMultiParenthesizedSafeCall() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/multiParenthesizedSafeCall.kt");
      }

      @Test
      @TestMetadata("parenthesizedSafeCall.kt")
      public void testParenthesizedSafeCall() {
        runTest("compiler/testData/diagnostics/tests/deparenthesize/parenthesizedSafeCall.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/deprecated")
    @TestDataPath("$PROJECT_ROOT")
    public class Deprecated {
      @Test
      @TestMetadata("annotationUsage.kt")
      public void testAnnotationUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/annotationUsage.kt");
      }

      @Test
      @TestMetadata("candidateBehindHiddenPropertyAccessors.kt")
      public void testCandidateBehindHiddenPropertyAccessors() {
        runTest("compiler/testData/diagnostics/tests/deprecated/candidateBehindHiddenPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("classWithCompanionObject.kt")
      public void testClassWithCompanionObject() {
        runTest("compiler/testData/diagnostics/tests/deprecated/classWithCompanionObject.kt");
      }

      @Test
      @TestMetadata("companionObjectUsage.kt")
      public void testCompanionObjectUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/companionObjectUsage.kt");
      }

      @Test
      @TestMetadata("componentUsage.kt")
      public void testComponentUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/componentUsage.kt");
      }

      @Test
      @TestMetadata("deprecatedCompanionAndClassReference.kt")
      public void testDeprecatedCompanionAndClassReference() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedCompanionAndClassReference.kt");
      }

      @Test
      @TestMetadata("deprecatedConstructor.kt")
      public void testDeprecatedConstructor() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedConstructor.kt");
      }

      @Test
      @TestMetadata("deprecatedConstructorProperty.kt")
      public void testDeprecatedConstructorProperty() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedConstructorProperty.kt");
      }

      @Test
      @TestMetadata("deprecatedEnumEntry.kt")
      public void testDeprecatedEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedEnumEntry.kt");
      }

      @Test
      @TestMetadata("deprecatedField.kt")
      public void testDeprecatedField() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedField.kt");
      }

      @Test
      @TestMetadata("deprecatedGenericType.kt")
      public void testDeprecatedGenericType() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedGenericType.kt");
      }

      @Test
      @TestMetadata("deprecatedHiddenOnCallableReferenceArgument.kt")
      public void testDeprecatedHiddenOnCallableReferenceArgument() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedHiddenOnCallableReferenceArgument.kt");
      }

      @Test
      @TestMetadata("deprecationWithComplexMessage.kt")
      public void testDeprecationWithComplexMessage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/deprecationWithComplexMessage.kt");
      }

      @Test
      @TestMetadata("duplicatedOverrideDeprecationOnProperty.kt")
      public void testDuplicatedOverrideDeprecationOnProperty() {
        runTest("compiler/testData/diagnostics/tests/deprecated/duplicatedOverrideDeprecationOnProperty.kt");
      }

      @Test
      @TestMetadata("functionUsage.kt")
      public void testFunctionUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/functionUsage.kt");
      }

      @Test
      @TestMetadata("genericConstructorUsage.kt")
      public void testGenericConstructorUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/genericConstructorUsage.kt");
      }

      @Test
      @TestMetadata("hiddenPropertyAccessors2.kt")
      public void testHiddenPropertyAccessors2() {
        runTest("compiler/testData/diagnostics/tests/deprecated/hiddenPropertyAccessors2.kt");
      }

      @Test
      @TestMetadata("importJavaSamInterface.kt")
      public void testImportJavaSamInterface() {
        runTest("compiler/testData/diagnostics/tests/deprecated/importJavaSamInterface.kt");
      }

      @Test
      @TestMetadata("imports.kt")
      public void testImports() {
        runTest("compiler/testData/diagnostics/tests/deprecated/imports.kt");
      }

      @Test
      @TestMetadata("iteratorUsage.kt")
      public void testIteratorUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/iteratorUsage.kt");
      }

      @Test
      @TestMetadata("javaDeprecatedInheritance.kt")
      public void testJavaDeprecatedInheritance() {
        runTest("compiler/testData/diagnostics/tests/deprecated/javaDeprecatedInheritance.kt");
      }

      @Test
      @TestMetadata("javaDeprecatedOnStaticMethod.kt")
      public void testJavaDeprecatedOnStaticMethod() {
        runTest("compiler/testData/diagnostics/tests/deprecated/javaDeprecatedOnStaticMethod.kt");
      }

      @Test
      @TestMetadata("javaDocDeprecated.kt")
      public void testJavaDocDeprecated() {
        runTest("compiler/testData/diagnostics/tests/deprecated/javaDocDeprecated.kt");
      }

      @Test
      @TestMetadata("objectUsage.kt")
      public void testObjectUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/objectUsage.kt");
      }

      @Test
      @TestMetadata("propertyUsage.kt")
      public void testPropertyUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/propertyUsage.kt");
      }

      @Test
      @TestMetadata("propertyUseSiteTargetedAnnotations.kt")
      public void testPropertyUseSiteTargetedAnnotations() {
        runTest("compiler/testData/diagnostics/tests/deprecated/propertyUseSiteTargetedAnnotations.kt");
      }

      @Test
      @TestMetadata("propertyWithInvoke.kt")
      public void testPropertyWithInvoke() {
        runTest("compiler/testData/diagnostics/tests/deprecated/propertyWithInvoke.kt");
      }

      @Test
      @TestMetadata("thisUsage.kt")
      public void testThisUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/thisUsage.kt");
      }

      @Test
      @TestMetadata("typeUsage.kt")
      public void testTypeUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typeUsage.kt");
      }

      @Test
      @TestMetadata("typealiasCompanionObject.kt")
      public void testTypealiasCompanionObject() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typealiasCompanionObject.kt");
      }

      @Test
      @TestMetadata("typealiasConstructor.kt")
      public void testTypealiasConstructor() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typealiasConstructor.kt");
      }

      @Test
      @TestMetadata("typealiasUsage.kt")
      public void testTypealiasUsage() {
        runTest("compiler/testData/diagnostics/tests/deprecated/typealiasUsage.kt");
      }

      @Test
      @TestMetadata("unusedImport.kt")
      public void testUnusedImport() {
        runTest("compiler/testData/diagnostics/tests/deprecated/unusedImport.kt");
      }

      @Test
      @TestMetadata("usageOnEnum.kt")
      public void testUsageOnEnum() {
        runTest("compiler/testData/diagnostics/tests/deprecated/usageOnEnum.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin")
      @TestDataPath("$PROJECT_ROOT")
      public class DeprecatedSinceKotlin {
        @Test
        @TestMetadata("deprecatedSinceKotlinHiddenOnReferenceArgument.kt")
        public void testDeprecatedSinceKotlinHiddenOnReferenceArgument() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/deprecatedSinceKotlinHiddenOnReferenceArgument.kt");
        }

        @Test
        @TestMetadata("messageFromDeprecatedAnnotation.kt")
        public void testMessageFromDeprecatedAnnotation() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/messageFromDeprecatedAnnotation.kt");
        }

        @Test
        @TestMetadata("warning.kt")
        public void testWarning() {
          runTest("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/warning.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/destructuring")
    @TestDataPath("$PROJECT_ROOT")
    public class Destructuring {
      @Test
      @TestMetadata("destructuringInInitializer.kt")
      public void testDestructuringInInitializer() {
        runTest("compiler/testData/diagnostics/tests/destructuring/destructuringInInitializer.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/enum")
    @TestDataPath("$PROJECT_ROOT")
    public class Enum {
      @Test
      @TestMetadata("AbstractOverrideInEnum.kt")
      public void testAbstractOverrideInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/AbstractOverrideInEnum.kt");
      }

      @Test
      @TestMetadata("classObjectInEnum.kt")
      public void testClassObjectInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/classObjectInEnum.kt");
      }

      @Test
      @TestMetadata("commonSupertype.kt")
      public void testCommonSupertype() {
        runTest("compiler/testData/diagnostics/tests/enum/commonSupertype.kt");
      }

      @Test
      @TestMetadata("emptyConstructor.kt")
      public void testEmptyConstructor() {
        runTest("compiler/testData/diagnostics/tests/enum/emptyConstructor.kt");
      }

      @Test
      @TestMetadata("entryShouldBeOfEnumType.kt")
      public void testEntryShouldBeOfEnumType() {
        runTest("compiler/testData/diagnostics/tests/enum/entryShouldBeOfEnumType.kt");
      }

      @Test
      @TestMetadata("enumIsAssignableToBuiltInEnum.kt")
      public void testEnumIsAssignableToBuiltInEnum() {
        runTest("compiler/testData/diagnostics/tests/enum/enumIsAssignableToBuiltInEnum.kt");
      }

      @Test
      @TestMetadata("enumStarImport.kt")
      public void testEnumStarImport() {
        runTest("compiler/testData/diagnostics/tests/enum/enumStarImport.kt");
      }

      @Test
      @TestMetadata("enumSubjectTypeCheck.kt")
      public void testEnumSubjectTypeCheck() {
        runTest("compiler/testData/diagnostics/tests/enum/enumSubjectTypeCheck.kt");
      }

      @Test
      @TestMetadata("EnumWOParenthesesConsistencyNestedScope.kt")
      public void testEnumWOParenthesesConsistencyNestedScope() {
        runTest("compiler/testData/diagnostics/tests/enum/EnumWOParenthesesConsistencyNestedScope.kt");
      }

      @Test
      @TestMetadata("EnumWOParenthesesConsistencyTopLevel.kt")
      public void testEnumWOParenthesesConsistencyTopLevel() {
        runTest("compiler/testData/diagnostics/tests/enum/EnumWOParenthesesConsistencyTopLevel.kt");
      }

      @Test
      @TestMetadata("extensionNamedAsEnumEntry.kt")
      public void testExtensionNamedAsEnumEntry() {
        runTest("compiler/testData/diagnostics/tests/enum/extensionNamedAsEnumEntry.kt");
      }

      @Test
      @TestMetadata("giantEnumWithConstructor.kt")
      public void testGiantEnumWithConstructor() {
        runTest("compiler/testData/diagnostics/tests/enum/giantEnumWithConstructor.kt");
      }

      @Test
      @TestMetadata("importEnumFromJava.kt")
      public void testImportEnumFromJava() {
        runTest("compiler/testData/diagnostics/tests/enum/importEnumFromJava.kt");
      }

      @Test
      @TestMetadata("inline.kt")
      public void testInline() {
        runTest("compiler/testData/diagnostics/tests/enum/inline.kt");
      }

      @Test
      @TestMetadata("javaEnumWithFuns.kt")
      public void testJavaEnumWithFuns() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithFuns.kt");
      }

      @Test
      @TestMetadata("javaEnumWithNameClashing.kt")
      public void testJavaEnumWithNameClashing() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithNameClashing.kt");
      }

      @Test
      @TestMetadata("javaEnumWithProperty.kt")
      public void testJavaEnumWithProperty() {
        runTest("compiler/testData/diagnostics/tests/enum/javaEnumWithProperty.kt");
      }

      @Test
      @TestMetadata("kt2834.kt")
      public void testKt2834() {
        runTest("compiler/testData/diagnostics/tests/enum/kt2834.kt");
      }

      @Test
      @TestMetadata("multipleConstructors.kt")
      public void testMultipleConstructors() {
        runTest("compiler/testData/diagnostics/tests/enum/multipleConstructors.kt");
      }

      @Test
      @TestMetadata("SecondaryConstructorCall.kt")
      public void testSecondaryConstructorCall() {
        runTest("compiler/testData/diagnostics/tests/enum/SecondaryConstructorCall.kt");
      }

      @Test
      @TestMetadata("starImportNestedClassAndEntries.kt")
      public void testStarImportNestedClassAndEntries() {
        runTest("compiler/testData/diagnostics/tests/enum/starImportNestedClassAndEntries.kt");
      }

      @Test
      @TestMetadata("valuesValueOfAndEntriesAccessibility.kt")
      public void testValuesValueOfAndEntriesAccessibility() {
        runTest("compiler/testData/diagnostics/tests/enum/valuesValueOfAndEntriesAccessibility.kt");
      }

      @Test
      @TestMetadata("wrongUnitializedEnumCompanion.kt")
      public void testWrongUnitializedEnumCompanion() {
        runTest("compiler/testData/diagnostics/tests/enum/wrongUnitializedEnumCompanion.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/enum/entries")
      @TestDataPath("$PROJECT_ROOT")
      public class Entries {
        @Test
        @TestMetadata("conflictingPropertyEntriesAndReference.kt")
        public void testConflictingPropertyEntriesAndReference() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/conflictingPropertyEntriesAndReference.kt");
        }

        @Test
        @TestMetadata("conflictingPropertyEntriesAndReferenceOn.kt")
        public void testConflictingPropertyEntriesAndReferenceOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/conflictingPropertyEntriesAndReferenceOn.kt");
        }

        @Test
        @TestMetadata("conflictingPropertyEntriesAndReferencePrioritized.kt")
        public void testConflictingPropertyEntriesAndReferencePrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/conflictingPropertyEntriesAndReferencePrioritized.kt");
        }

        @Test
        @TestMetadata("entriesPropertyAsExtensionClash.kt")
        public void testEntriesPropertyAsExtensionClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyAsExtensionClash.kt");
        }

        @Test
        @TestMetadata("entriesPropertyAsExtensionClashOn.kt")
        public void testEntriesPropertyAsExtensionClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyAsExtensionClashOn.kt");
        }

        @Test
        @TestMetadata("entriesPropertyAsExtensionClashPrioritized.kt")
        public void testEntriesPropertyAsExtensionClashPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyAsExtensionClashPrioritized.kt");
        }

        @Test
        @TestMetadata("entriesPropertyImport.kt")
        public void testEntriesPropertyImport() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImport.kt");
        }

        @Test
        @TestMetadata("entriesPropertyImportedClash.kt")
        public void testEntriesPropertyImportedClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImportedClash.kt");
        }

        @Test
        @TestMetadata("entriesPropertyImportedClashOn.kt")
        public void testEntriesPropertyImportedClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImportedClashOn.kt");
        }

        @Test
        @TestMetadata("entriesPropertyImportedClashPrioritized.kt")
        public void testEntriesPropertyImportedClashPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImportedClashPrioritized.kt");
        }

        @Test
        @TestMetadata("entriesPropertyWithJvmStaticClash.kt")
        public void testEntriesPropertyWithJvmStaticClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyWithJvmStaticClash.kt");
        }

        @Test
        @TestMetadata("entriesPropertyWithJvmStaticClashOn.kt")
        public void testEntriesPropertyWithJvmStaticClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyWithJvmStaticClashOn.kt");
        }

        @Test
        @TestMetadata("entriesPropertyWithJvmStaticClashPrioritized.kt")
        public void testEntriesPropertyWithJvmStaticClashPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/entriesPropertyWithJvmStaticClashPrioritized.kt");
        }

        @Test
        @TestMetadata("enumEntriesAmbiguity.kt")
        public void testEnumEntriesAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/enumEntriesAmbiguity.kt");
        }

        @Test
        @TestMetadata("genericEntriesPropertyClash.kt")
        public void testGenericEntriesPropertyClash() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/genericEntriesPropertyClash.kt");
        }

        @Test
        @TestMetadata("genericEntriesPropertyClashOn.kt")
        public void testGenericEntriesPropertyClashOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/genericEntriesPropertyClashOn.kt");
        }

        @Test
        @TestMetadata("javaEnumAdditionalCases.kt")
        public void testJavaEnumAdditionalCases() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/javaEnumAdditionalCases.kt");
        }

        @Test
        @TestMetadata("javaEnumEntriesAmbiguity.kt")
        public void testJavaEnumEntriesAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/javaEnumEntriesAmbiguity.kt");
        }

        @Test
        @TestMetadata("javaEnumEntriesAmbiguityOn.kt")
        public void testJavaEnumEntriesAmbiguityOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/javaEnumEntriesAmbiguityOn.kt");
        }

        @Test
        @TestMetadata("javaFakeEnumEntries.kt")
        public void testJavaFakeEnumEntries() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/javaFakeEnumEntries.kt");
        }

        @Test
        @TestMetadata("nameShadowingOfExternallyDefinedEntries.kt")
        public void testNameShadowingOfExternallyDefinedEntries() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/nameShadowingOfExternallyDefinedEntries.kt");
        }

        @Test
        @TestMetadata("nameShadowingOfExternallyDefinedEntriesOn.kt")
        public void testNameShadowingOfExternallyDefinedEntriesOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/nameShadowingOfExternallyDefinedEntriesOn.kt");
        }

        @Test
        @TestMetadata("primitiveReference.kt")
        public void testPrimitiveReference() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/primitiveReference.kt");
        }

        @Test
        @TestMetadata("redeclarationOfEnumEntriesNameWithIntrinsic.kt")
        public void testRedeclarationOfEnumEntriesNameWithIntrinsic() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/redeclarationOfEnumEntriesNameWithIntrinsic.kt");
        }

        @Test
        @TestMetadata("redeclarationOfEnumEntriesNameWithIntrinsicOn.kt")
        public void testRedeclarationOfEnumEntriesNameWithIntrinsicOn() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/redeclarationOfEnumEntriesNameWithIntrinsicOn.kt");
        }

        @Test
        @TestMetadata("referenceFalsePositiveWarnings.kt")
        public void testReferenceFalsePositiveWarnings() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/referenceFalsePositiveWarnings.kt");
        }

        @Test
        @TestMetadata("referenceFalsePositiveWarningsPrioritized.kt")
        public void testReferenceFalsePositiveWarningsPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/referenceFalsePositiveWarningsPrioritized.kt");
        }

        @Test
        @TestMetadata("toBeShadowed.kt")
        public void testToBeShadowed() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/toBeShadowed.kt");
        }

        @Test
        @TestMetadata("toBeShadowedPrioritized.kt")
        public void testToBeShadowedPrioritized() {
          runTest("compiler/testData/diagnostics/tests/enum/entries/toBeShadowedPrioritized.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/enum/inner")
      @TestDataPath("$PROJECT_ROOT")
      public class Inner {
        @Test
        @TestMetadata("existingClassObject.kt")
        public void testExistingClassObject() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/existingClassObject.kt");
        }

        @Test
        @TestMetadata("insideClass.kt")
        public void testInsideClass() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideClass.kt");
        }

        @Test
        @TestMetadata("insideClassObject.kt")
        public void testInsideClassObject() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideClassObject.kt");
        }

        @Test
        @TestMetadata("insideEnum.kt")
        public void testInsideEnum() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideEnum.kt");
        }

        @Test
        @TestMetadata("insideObject.kt")
        public void testInsideObject() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideObject.kt");
        }

        @Test
        @TestMetadata("insideTrait.kt")
        public void testInsideTrait() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/insideTrait.kt");
        }

        @Test
        @TestMetadata("redeclarationInClassObject.kt")
        public void testRedeclarationInClassObject() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/redeclarationInClassObject.kt");
        }

        @Test
        @TestMetadata("twoEnums.kt")
        public void testTwoEnums() {
          runTest("compiler/testData/diagnostics/tests/enum/inner/twoEnums.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/evaluate")
    @TestDataPath("$PROJECT_ROOT")
    public class Evaluate {
      @Test
      @TestMetadata("float.kt")
      public void testFloat() {
        runTest("compiler/testData/diagnostics/tests/evaluate/float.kt");
      }

      @Test
      @TestMetadata("floatLiteralOutOfRange.kt")
      public void testFloatLiteralOutOfRange() {
        runTest("compiler/testData/diagnostics/tests/evaluate/floatLiteralOutOfRange.kt");
      }

      @Test
      @TestMetadata("intOverflow.kt")
      public void testIntOverflow() {
        runTest("compiler/testData/diagnostics/tests/evaluate/intOverflow.kt");
      }

      @Test
      @TestMetadata("intOverflowWithJavaProperties.kt")
      public void testIntOverflowWithJavaProperties() {
        runTest("compiler/testData/diagnostics/tests/evaluate/intOverflowWithJavaProperties.kt");
      }

      @Test
      @TestMetadata("longOverflow.kt")
      public void testLongOverflow() {
        runTest("compiler/testData/diagnostics/tests/evaluate/longOverflow.kt");
      }

      @Test
      @TestMetadata("noOverflowWithZero.kt")
      public void testNoOverflowWithZero() {
        runTest("compiler/testData/diagnostics/tests/evaluate/noOverflowWithZero.kt");
      }

      @Test
      @TestMetadata("otherOverflow.kt")
      public void testOtherOverflow() {
        runTest("compiler/testData/diagnostics/tests/evaluate/otherOverflow.kt");
      }

      @Test
      @TestMetadata("qualifiedExpressions.kt")
      public void testQualifiedExpressions() {
        runTest("compiler/testData/diagnostics/tests/evaluate/qualifiedExpressions.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection")
    @TestDataPath("$PROJECT_ROOT")
    public class ExplicitDefinitelyNotNullableViaIntersection {
      @Test
      @TestMetadata("disabledFeature.kt")
      public void testDisabledFeature() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/disabledFeature.kt");
      }

      @Test
      @TestMetadata("kt59493.kt")
      public void testKt59493() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/kt59493.kt");
      }

      @Test
      @TestMetadata("starProjection.kt")
      public void testStarProjection() {
        runTest("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/starProjection.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/exposed")
    @TestDataPath("$PROJECT_ROOT")
    public class Exposed {
      @Test
      @TestMetadata("delegate.kt")
      public void testDelegate() {
        runTest("compiler/testData/diagnostics/tests/exposed/delegate.kt");
      }

      @Test
      @TestMetadata("implements.kt")
      public void testImplements() {
        runTest("compiler/testData/diagnostics/tests/exposed/implements.kt");
      }

      @Test
      @TestMetadata("inaccessibleType.kt")
      public void testInaccessibleType() {
        runTest("compiler/testData/diagnostics/tests/exposed/inaccessibleType.kt");
      }

      @Test
      @TestMetadata("internalAndProtected.kt")
      public void testInternalAndProtected() {
        runTest("compiler/testData/diagnostics/tests/exposed/internalAndProtected.kt");
      }

      @Test
      @TestMetadata("localFromInternal.kt")
      public void testLocalFromInternal() {
        runTest("compiler/testData/diagnostics/tests/exposed/localFromInternal.kt");
      }

      @Test
      @TestMetadata("localFromPrivate.kt")
      public void testLocalFromPrivate() {
        runTest("compiler/testData/diagnostics/tests/exposed/localFromPrivate.kt");
      }

      @Test
      @TestMetadata("nested.kt")
      public void testNested() {
        runTest("compiler/testData/diagnostics/tests/exposed/nested.kt");
      }

      @Test
      @TestMetadata("privateFromLocal.kt")
      public void testPrivateFromLocal() {
        runTest("compiler/testData/diagnostics/tests/exposed/privateFromLocal.kt");
      }

      @Test
      @TestMetadata("privatePropertyInPrivateConstructor.kt")
      public void testPrivatePropertyInPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/exposed/privatePropertyInPrivateConstructor.kt");
      }

      @Test
      @TestMetadata("propertyInConstructorOfPrivateClass.kt")
      public void testPropertyInConstructorOfPrivateClass() {
        runTest("compiler/testData/diagnostics/tests/exposed/propertyInConstructorOfPrivateClass.kt");
      }

      @Test
      @TestMetadata("propertyInPrivateConstructor.kt")
      public void testPropertyInPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/exposed/propertyInPrivateConstructor.kt");
      }

      @Test
      @TestMetadata("protectedJava.kt")
      public void testProtectedJava() {
        runTest("compiler/testData/diagnostics/tests/exposed/protectedJava.kt");
      }

      @Test
      @TestMetadata("protectedSameWay.kt")
      public void testProtectedSameWay() {
        runTest("compiler/testData/diagnostics/tests/exposed/protectedSameWay.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/expressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Expressions {
      @Test
      @TestMetadata("UnusedExpressionByLocation.kt")
      public void testUnusedExpressionByLocation() {
        runTest("compiler/testData/diagnostics/tests/expressions/UnusedExpressionByLocation.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/extensions")
    @TestDataPath("$PROJECT_ROOT")
    public class Extensions {
      @Test
      @TestMetadata("extensionPropertyVsParameter.kt")
      public void testExtensionPropertyVsParameter() {
        runTest("compiler/testData/diagnostics/tests/extensions/extensionPropertyVsParameter.kt");
      }

      @Test
      @TestMetadata("GenericIterator.kt")
      public void testGenericIterator() {
        runTest("compiler/testData/diagnostics/tests/extensions/GenericIterator.kt");
      }

      @Test
      @TestMetadata("kt2317.kt")
      public void testKt2317() {
        runTest("compiler/testData/diagnostics/tests/extensions/kt2317.kt");
      }

      @Test
      @TestMetadata("kt3470.kt")
      public void testKt3470() {
        runTest("compiler/testData/diagnostics/tests/extensions/kt3470.kt");
      }

      @Test
      @TestMetadata("kt819ExtensionProperties.kt")
      public void testKt819ExtensionProperties() {
        runTest("compiler/testData/diagnostics/tests/extensions/kt819ExtensionProperties.kt");
      }

      @Test
      @TestMetadata("object.kt")
      public void testObject() {
        runTest("compiler/testData/diagnostics/tests/extensions/object.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/extensions/contextReceivers")
      @TestDataPath("$PROJECT_ROOT")
      public class ContextReceivers {
        @Test
        @TestMetadata("contextKeywordWithElvis.kt")
        public void testContextKeywordWithElvis() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/contextKeywordWithElvis.kt");
        }

        @Test
        @TestMetadata("contextReceiverTypeParamsUsage.kt")
        public void testContextReceiverTypeParamsUsage() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/contextReceiverTypeParamsUsage.kt");
        }

        @Test
        @TestMetadata("functionalType.kt")
        public void testFunctionalType() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/functionalType.kt");
        }

        @Test
        @TestMetadata("labelFromFunctionName.kt")
        public void testLabelFromFunctionName() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/labelFromFunctionName.kt");
        }

        @Test
        @TestMetadata("lambdaReceiverFromContext.kt")
        public void testLambdaReceiverFromContext() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/lambdaReceiverFromContext.kt");
        }

        @Test
        @TestMetadata("lambdaReceiverFromContextWithSameFunctions.kt")
        public void testLambdaReceiverFromContextWithSameFunctions() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/lambdaReceiverFromContextWithSameFunctions.kt");
        }

        @Test
        @TestMetadata("nonConflicting.kt")
        public void testNonConflicting() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/nonConflicting.kt");
        }

        @Test
        @TestMetadata("overloadPriority.kt")
        public void testOverloadPriority() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/overloadPriority.kt");
        }

        @Test
        @TestMetadata("overloading.kt")
        public void testOverloading() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/overloading.kt");
        }

        @Test
        @TestMetadata("parameterizedContextualLambda.kt")
        public void testParameterizedContextualLambda() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/parameterizedContextualLambda.kt");
        }

        @Test
        @TestMetadata("plusMatrix.kt")
        public void testPlusMatrix() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/plusMatrix.kt");
        }

        @Test
        @TestMetadata("priorityInTower.kt")
        public void testPriorityInTower() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/priorityInTower.kt");
        }

        @Test
        @TestMetadata("thisIdentifierInfo.kt")
        public void testThisIdentifierInfo() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/thisIdentifierInfo.kt");
        }

        @Test
        @TestMetadata("thisWithReceiverLabelsClasses.kt")
        public void testThisWithReceiverLabelsClasses() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/thisWithReceiverLabelsClasses.kt");
        }

        @Test
        @TestMetadata("typeParameterAsContextReceiver.kt")
        public void testTypeParameterAsContextReceiver() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/typeParameterAsContextReceiver.kt");
        }

        @Test
        @TestMetadata("withAnnotations.kt")
        public void testWithAnnotations() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/withAnnotations.kt");
        }

        @Test
        @TestMetadata("withDelegatedProperty.kt")
        public void testWithDelegatedProperty() {
          runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/withDelegatedProperty.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP")
        @TestDataPath("$PROJECT_ROOT")
        public class FromKEEP {
          @Test
          @TestMetadata("canvas.kt")
          public void testCanvas() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/canvas.kt");
          }

          @Test
          @TestMetadata("clickHandler.kt")
          public void testClickHandler() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/clickHandler.kt");
          }

          @Test
          @TestMetadata("compareTo.kt")
          public void testCompareTo() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/compareTo.kt");
          }

          @Test
          @TestMetadata("decimateEveryEvenThird.kt")
          public void testDecimateEveryEvenThird() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/decimateEveryEvenThird.kt");
          }

          @Test
          @TestMetadata("functionalType.kt")
          public void testFunctionalType() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/functionalType.kt");
          }

          @Test
          @TestMetadata("json.kt")
          public void testJson() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/json.kt");
          }

          @Test
          @TestMetadata("loggingContext.kt")
          public void testLoggingContext() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/loggingContext.kt");
          }

          @Test
          @TestMetadata("transaction.kt")
          public void testTransaction() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/transaction.kt");
          }

          @Test
          @TestMetadata("userStorage.kt")
          public void testUserStorage() {
            runTest("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/userStorage.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/external")
    @TestDataPath("$PROJECT_ROOT")
    public class External {
      @Test
      @TestMetadata("noExternalModifierInheritance.kt")
      public void testNoExternalModifierInheritance() {
        runTest("compiler/testData/diagnostics/tests/external/noExternalModifierInheritance.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/fieldRename")
    @TestDataPath("$PROJECT_ROOT")
    public class FieldRename {
      @Test
      @TestMetadata("derivedClassPropertyShadowsBaseClassField.kt")
      public void testDerivedClassPropertyShadowsBaseClassField() {
        runTest("compiler/testData/diagnostics/tests/fieldRename/derivedClassPropertyShadowsBaseClassField.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/funInterface")
    @TestDataPath("$PROJECT_ROOT")
    public class FunInterface {
      @Test
      @TestMetadata("basicFunInterface.kt")
      public void testBasicFunInterface() {
        runTest("compiler/testData/diagnostics/tests/funInterface/basicFunInterface.kt");
      }

      @Test
      @TestMetadata("basicFunInterfaceConversion.kt")
      public void testBasicFunInterfaceConversion() {
        runTest("compiler/testData/diagnostics/tests/funInterface/basicFunInterfaceConversion.kt");
      }

      @Test
      @TestMetadata("funInterfaceSyntheticConstructors.kt")
      public void testFunInterfaceSyntheticConstructors() {
        runTest("compiler/testData/diagnostics/tests/funInterface/funInterfaceSyntheticConstructors.kt");
      }

      @Test
      @TestMetadata("noCompatibilityResolveForFunInterfaces.kt")
      public void testNoCompatibilityResolveForFunInterfaces() {
        runTest("compiler/testData/diagnostics/tests/funInterface/noCompatibilityResolveForFunInterfaces.kt");
      }

      @Test
      @TestMetadata("severalConversionsForFunInterface.kt")
      public void testSeveralConversionsForFunInterface() {
        runTest("compiler/testData/diagnostics/tests/funInterface/severalConversionsForFunInterface.kt");
      }

      @Test
      @TestMetadata("suspendFunInterfaceConversion.kt")
      public void testSuspendFunInterfaceConversion() {
        runTest("compiler/testData/diagnostics/tests/funInterface/suspendFunInterfaceConversion.kt");
      }

      @Test
      @TestMetadata("unitInContravariantPosition.kt")
      public void testUnitInContravariantPosition() {
        runTest("compiler/testData/diagnostics/tests/funInterface/unitInContravariantPosition.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/functionAsExpression")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionAsExpression {
      @Test
      @TestMetadata("DifficultInferenceForParameter.kt")
      public void testDifficultInferenceForParameter() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/DifficultInferenceForParameter.kt");
      }

      @Test
      @TestMetadata("NoOverloadError.kt")
      public void testNoOverloadError() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/NoOverloadError.kt");
      }

      @Test
      @TestMetadata("parameterAsReceiverInference.kt")
      public void testParameterAsReceiverInference() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/parameterAsReceiverInference.kt");
      }

      @Test
      @TestMetadata("ReturnAndLabels.kt")
      public void testReturnAndLabels() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/ReturnAndLabels.kt");
      }

      @Test
      @TestMetadata("WithOuterGeneric.kt")
      public void testWithOuterGeneric() {
        runTest("compiler/testData/diagnostics/tests/functionAsExpression/WithOuterGeneric.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionLiterals {
      @Test
      @TestMetadata("functionExpressionAsLastExpressionInBlock.kt")
      public void testFunctionExpressionAsLastExpressionInBlock() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/functionExpressionAsLastExpressionInBlock.kt");
      }

      @Test
      @TestMetadata("functionLiteralAsArgumentForFunction.kt")
      public void testFunctionLiteralAsArgumentForFunction() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralAsArgumentForFunction.kt");
      }

      @Test
      @TestMetadata("functionLiteralInIf.kt")
      public void testFunctionLiteralInIf() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/functionLiteralInIf.kt");
      }

      @Test
      @TestMetadata("genericFunctionalTypeOnRHSOfPlusAssign.kt")
      public void testGenericFunctionalTypeOnRHSOfPlusAssign() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/genericFunctionalTypeOnRHSOfPlusAssign.kt");
      }

      @Test
      @TestMetadata("kt2906.kt")
      public void testKt2906() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt2906.kt");
      }

      @Test
      @TestMetadata("kt3343.kt")
      public void testKt3343() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt3343.kt");
      }

      @Test
      @TestMetadata("kt4529.kt")
      public void testKt4529() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt4529.kt");
      }

      @Test
      @TestMetadata("kt51317.kt")
      public void testKt51317() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt51317.kt");
      }

      @Test
      @TestMetadata("kt6869.kt")
      public void testKt6869() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/kt6869.kt");
      }

      @Test
      @TestMetadata("lambdaInLambda2.kt")
      public void testLambdaInLambda2() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/lambdaInLambda2.kt");
      }

      @Test
      @TestMetadata("prematurelyAnalyzingLambdaWhileFixingTypeVariableForAnotherArgument.kt")
      public void testPrematurelyAnalyzingLambdaWhileFixingTypeVariableForAnotherArgument() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/prematurelyAnalyzingLambdaWhileFixingTypeVariableForAnotherArgument.kt");
      }

      @Test
      @TestMetadata("returnNull.kt")
      public void testReturnNull() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/returnNull.kt");
      }

      @Test
      @TestMetadata("returnNullWithReturn.kt")
      public void testReturnNullWithReturn() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/returnNullWithReturn.kt");
      }

      @Test
      @TestMetadata("unusedLiteral.kt")
      public void testUnusedLiteral() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteral.kt");
      }

      @Test
      @TestMetadata("unusedLiteralInsideUnitLiteral.kt")
      public void testUnusedLiteralInsideUnitLiteral() {
        runTest("compiler/testData/diagnostics/tests/functionLiterals/unusedLiteralInsideUnitLiteral.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/return")
      @TestDataPath("$PROJECT_ROOT")
      public class Return {
        @Test
        @TestMetadata("AutoLabels.kt")
        public void testAutoLabels() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabels.kt");
        }

        @Test
        @TestMetadata("IfInReturnedExpression.kt")
        public void testIfInReturnedExpression() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/IfInReturnedExpression.kt");
        }

        @Test
        @TestMetadata("IfWithoutElse.kt")
        public void testIfWithoutElse() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/IfWithoutElse.kt");
        }

        @Test
        @TestMetadata("kt66279.kt")
        public void testKt66279() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/kt66279.kt");
        }

        @Test
        @TestMetadata("LambdaWithParameter.kt")
        public void testLambdaWithParameter() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LambdaWithParameter.kt");
        }

        @Test
        @TestMetadata("LocalReturnNull.kt")
        public void testLocalReturnNull() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNull.kt");
        }

        @Test
        @TestMetadata("LocalReturnUnitWithBodyExpression.kt")
        public void testLocalReturnUnitWithBodyExpression() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnitWithBodyExpression.kt");
        }

        @Test
        @TestMetadata("LocalReturnWithExpectedType.kt")
        public void testLocalReturnWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithExpectedType.kt");
        }

        @Test
        @TestMetadata("LocalReturnWithExplicitUnit.kt")
        public void testLocalReturnWithExplicitUnit() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithExplicitUnit.kt");
        }

        @Test
        @TestMetadata("LocalReturnWithFlexibleUnitType.kt")
        public void testLocalReturnWithFlexibleUnitType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnWithFlexibleUnitType.kt");
        }

        @Test
        @TestMetadata("MultipleLocalUnitReturns.kt")
        public void testMultipleLocalUnitReturns() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/MultipleLocalUnitReturns.kt");
        }

        @Test
        @TestMetadata("NoCommonSystem.kt")
        public void testNoCommonSystem() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/NoCommonSystem.kt");
        }

        @Test
        @TestMetadata("SmartCast.kt")
        public void testSmartCast() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/SmartCast.kt");
        }

        @Test
        @TestMetadata("SmartCastWithExplicitType.kt")
        public void testSmartCastWithExplicitType() {
          runTest("compiler/testData/diagnostics/tests/functionLiterals/return/SmartCastWithExplicitType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/generics")
    @TestDataPath("$PROJECT_ROOT")
    public class Generics {
      @Test
      @TestMetadata("anonymousObjectSupertypeWithTypeParameterFromFunction.kt")
      public void testAnonymousObjectSupertypeWithTypeParameterFromFunction() {
        runTest("compiler/testData/diagnostics/tests/generics/anonymousObjectSupertypeWithTypeParameterFromFunction.kt");
      }

      @Test
      @TestMetadata("approximationOfBoundedProjection.kt")
      public void testApproximationOfBoundedProjection() {
        runTest("compiler/testData/diagnostics/tests/generics/approximationOfBoundedProjection.kt");
      }

      @Test
      @TestMetadata("approximationOfInProjection.kt")
      public void testApproximationOfInProjection() {
        runTest("compiler/testData/diagnostics/tests/generics/approximationOfInProjection.kt");
      }

      @Test
      @TestMetadata("commonSupertypeContravariant.kt")
      public void testCommonSupertypeContravariant() {
        runTest("compiler/testData/diagnostics/tests/generics/commonSupertypeContravariant.kt");
      }

      @Test
      @TestMetadata("commonSupertypeContravariant2.kt")
      public void testCommonSupertypeContravariant2() {
        runTest("compiler/testData/diagnostics/tests/generics/commonSupertypeContravariant2.kt");
      }

      @Test
      @TestMetadata("finalUpperBoundWithOverride.kt")
      public void testFinalUpperBoundWithOverride() {
        runTest("compiler/testData/diagnostics/tests/generics/finalUpperBoundWithOverride.kt");
      }

      @Test
      @TestMetadata("kt1575-Class.kt")
      public void testKt1575_Class() {
        runTest("compiler/testData/diagnostics/tests/generics/kt1575-Class.kt");
      }

      @Test
      @TestMetadata("kt1575-Function.kt")
      public void testKt1575_Function() {
        runTest("compiler/testData/diagnostics/tests/generics/kt1575-Function.kt");
      }

      @Test
      @TestMetadata("kt9203.kt")
      public void testKt9203() {
        runTest("compiler/testData/diagnostics/tests/generics/kt9203.kt");
      }

      @Test
      @TestMetadata("kt9203_1.kt")
      public void testKt9203_1() {
        runTest("compiler/testData/diagnostics/tests/generics/kt9203_1.kt");
      }

      @Test
      @TestMetadata("localClassTypeRefWithTypeParameterFromFunction.kt")
      public void testLocalClassTypeRefWithTypeParameterFromFunction() {
        runTest("compiler/testData/diagnostics/tests/generics/localClassTypeRefWithTypeParameterFromFunction.kt");
      }

      @Test
      @TestMetadata("noInconsistentTypeParameterBoundsWithDifferentProjectionKinds.kt")
      public void testNoInconsistentTypeParameterBoundsWithDifferentProjectionKinds() {
        runTest("compiler/testData/diagnostics/tests/generics/noInconsistentTypeParameterBoundsWithDifferentProjectionKinds.kt");
      }

      @Test
      @TestMetadata("noInconsistentTypeParameterBoundsWithStarProjections.kt")
      public void testNoInconsistentTypeParameterBoundsWithStarProjections() {
        runTest("compiler/testData/diagnostics/tests/generics/noInconsistentTypeParameterBoundsWithStarProjections.kt");
      }

      @Test
      @TestMetadata("nullableTypeParameterScope.kt")
      public void testNullableTypeParameterScope() {
        runTest("compiler/testData/diagnostics/tests/generics/nullableTypeParameterScope.kt");
      }

      @Test
      @TestMetadata("PseudoRawTypes.kt")
      public void testPseudoRawTypes() {
        runTest("compiler/testData/diagnostics/tests/generics/PseudoRawTypes.kt");
      }

      @Test
      @TestMetadata("recursive.kt")
      public void testRecursive() {
        runTest("compiler/testData/diagnostics/tests/generics/recursive.kt");
      }

      @Test
      @TestMetadata("resolveGenericBoundsBeforeSupertypes.kt")
      public void testResolveGenericBoundsBeforeSupertypes() {
        runTest("compiler/testData/diagnostics/tests/generics/resolveGenericBoundsBeforeSupertypes.kt");
      }

      @Test
      @TestMetadata("sameTypeParameterUse.kt")
      public void testSameTypeParameterUse() {
        runTest("compiler/testData/diagnostics/tests/generics/sameTypeParameterUse.kt");
      }

      @Test
      @TestMetadata("suppressVarianceConflict.kt")
      public void testSuppressVarianceConflict() {
        runTest("compiler/testData/diagnostics/tests/generics/suppressVarianceConflict.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/innerClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InnerClasses {
        @Test
        @TestMetadata("innerSuperCall.kt")
        public void testInnerSuperCall() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerSuperCall.kt");
        }

        @Test
        @TestMetadata("innerSuperCallSecondary.kt")
        public void testInnerSuperCallSecondary() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/innerSuperCallSecondary.kt");
        }

        @Test
        @TestMetadata("kt3357.kt")
        public void testKt3357() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt3357.kt");
        }

        @Test
        @TestMetadata("kt408.kt")
        public void testKt408() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt408.kt");
        }

        @Test
        @TestMetadata("kt6325.kt")
        public void testKt6325() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/kt6325.kt");
        }

        @Test
        @TestMetadata("noTypeVarianceConflictInNestedClass.kt")
        public void testNoTypeVarianceConflictInNestedClass() {
          runTest("compiler/testData/diagnostics/tests/generics/innerClasses/noTypeVarianceConflictInNestedClass.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments")
        @TestDataPath("$PROJECT_ROOT")
        public class ImplicitArguments {
          @Test
          @TestMetadata("fromOuterClassInObjectLiteral.kt")
          public void testFromOuterClassInObjectLiteral() {
            runTest("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromOuterClassInObjectLiteral.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope")
      @TestDataPath("$PROJECT_ROOT")
      public class MultipleBoundsMemberScope {
        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/simple.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/nullability")
      @TestDataPath("$PROJECT_ROOT")
      public class Nullability {
        @Test
        @TestMetadata("capturedTypeWithPlatformSupertype.kt")
        public void testCapturedTypeWithPlatformSupertype() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/capturedTypeWithPlatformSupertype.kt");
        }

        @Test
        @TestMetadata("correctSubstitutionForIncorporationConstraint.kt")
        public void testCorrectSubstitutionForIncorporationConstraint() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/correctSubstitutionForIncorporationConstraint.kt");
        }

        @Test
        @TestMetadata("inferNotNullTypeFromIntersectionOfNullableTypes.kt")
        public void testInferNotNullTypeFromIntersectionOfNullableTypes() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/inferNotNullTypeFromIntersectionOfNullableTypes.kt");
        }

        @Test
        @TestMetadata("kt25182.kt")
        public void testKt25182() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/kt25182.kt");
        }

        @Test
        @TestMetadata("notNullSmartcastOnIntersectionOfNullables.kt")
        public void testNotNullSmartcastOnIntersectionOfNullables() {
          runTest("compiler/testData/diagnostics/tests/generics/nullability/notNullSmartcastOnIntersectionOfNullables.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/projectionsScope")
      @TestDataPath("$PROJECT_ROOT")
      public class ProjectionsScope {
        @Test
        @TestMetadata("extensionResultSubstitution.kt")
        public void testExtensionResultSubstitution() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/extensionResultSubstitution.kt");
        }

        @Test
        @TestMetadata("iterateOnExtension.kt")
        public void testIterateOnExtension() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/iterateOnExtension.kt");
        }

        @Test
        @TestMetadata("kt8647.kt")
        public void testKt8647() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/kt8647.kt");
        }

        @Test
        @TestMetadata("recursiveUpperBoundStarOut.kt")
        public void testRecursiveUpperBoundStarOut() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/recursiveUpperBoundStarOut.kt");
        }

        @Test
        @TestMetadata("unsafeVarianceInAliasedFunctionalType.kt")
        public void testUnsafeVarianceInAliasedFunctionalType() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceInAliasedFunctionalType.kt");
        }

        @Test
        @TestMetadata("unsafeVarianceOnInputTypeOfFunctionalType.kt")
        public void testUnsafeVarianceOnInputTypeOfFunctionalType() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceOnInputTypeOfFunctionalType.kt");
        }

        @Test
        @TestMetadata("unsafeVarianceStar.kt")
        public void testUnsafeVarianceStar() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceStar.kt");
        }

        @Test
        @TestMetadata("unsafeVarianceWithRecursiveGenerics.kt")
        public void testUnsafeVarianceWithRecursiveGenerics() {
          runTest("compiler/testData/diagnostics/tests/generics/projectionsScope/unsafeVarianceWithRecursiveGenerics.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/starProjections")
      @TestDataPath("$PROJECT_ROOT")
      public class StarProjections {
        @Test
        @TestMetadata("checkBounds.kt")
        public void testCheckBounds() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/checkBounds.kt");
        }

        @Test
        @TestMetadata("collectionInheritedFromJava.kt")
        public void testCollectionInheritedFromJava() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/collectionInheritedFromJava.kt");
        }

        @Test
        @TestMetadata("foldRecursiveTypesToStarProjection.kt")
        public void testFoldRecursiveTypesToStarProjection() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/foldRecursiveTypesToStarProjection.kt");
        }

        @Test
        @TestMetadata("inheritedFromJava.kt")
        public void testInheritedFromJava() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/inheritedFromJava.kt");
        }

        @Test
        @TestMetadata("inheritedFromKotlin.kt")
        public void testInheritedFromKotlin() {
          runTest("compiler/testData/diagnostics/tests/generics/starProjections/inheritedFromKotlin.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified")
      @TestDataPath("$PROJECT_ROOT")
      public class TpAsReified {
        @Test
        @TestMetadata("GenericAsReifiedArgument.kt")
        public void testGenericAsReifiedArgument() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/GenericAsReifiedArgument.kt");
        }

        @Test
        @TestMetadata("InlineableReified.kt")
        public void testInlineableReified() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/InlineableReified.kt");
        }

        @Test
        @TestMetadata("ReifiedTypeAliasDisabled.kt")
        public void testReifiedTypeAliasDisabled() {
          runTest("compiler/testData/diagnostics/tests/generics/tpAsReified/ReifiedTypeAliasDisabled.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/varProjection")
      @TestDataPath("$PROJECT_ROOT")
      public class VarProjection {
        @Test
        @TestMetadata("setterProjectedOutPlusAssignDefined.kt")
        public void testSetterProjectedOutPlusAssignDefined() {
          runTest("compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutPlusAssignDefined.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/imports")
    @TestDataPath("$PROJECT_ROOT")
    public class Imports {
      @Test
      @TestMetadata("aliasedImportOfEnumConstructor.kt")
      public void testAliasedImportOfEnumConstructor() {
        runTest("compiler/testData/diagnostics/tests/imports/aliasedImportOfEnumConstructor.kt");
      }

      @Test
      @TestMetadata("AllUnderImportsLessPriority.kt")
      public void testAllUnderImportsLessPriority() {
        runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsLessPriority.kt");
      }

      @Test
      @TestMetadata("AllUnderImportsSamePriorityForFunction.kt")
      public void testAllUnderImportsSamePriorityForFunction() {
        runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsSamePriorityForFunction.kt");
      }

      @Test
      @TestMetadata("AllUnderImportsSamePriorityForProperty.kt")
      public void testAllUnderImportsSamePriorityForProperty() {
        runTest("compiler/testData/diagnostics/tests/imports/AllUnderImportsSamePriorityForProperty.kt");
      }

      @Test
      @TestMetadata("CurrentPackageAndAllUnderImport.kt")
      public void testCurrentPackageAndAllUnderImport() {
        runTest("compiler/testData/diagnostics/tests/imports/CurrentPackageAndAllUnderImport.kt");
      }

      @Test
      @TestMetadata("CurrentPackageAndExplicitImport.kt")
      public void testCurrentPackageAndExplicitImport() {
        runTest("compiler/testData/diagnostics/tests/imports/CurrentPackageAndExplicitImport.kt");
      }

      @Test
      @TestMetadata("DefaultImportsPriority.kt")
      public void testDefaultImportsPriority() {
        runTest("compiler/testData/diagnostics/tests/imports/DefaultImportsPriority.kt");
      }

      @Test
      @TestMetadata("ExplicitImportsUnambiguityForFunction.kt")
      public void testExplicitImportsUnambiguityForFunction() {
        runTest("compiler/testData/diagnostics/tests/imports/ExplicitImportsUnambiguityForFunction.kt");
      }

      @Test
      @TestMetadata("importFunctionWithAllUnderImport.kt")
      public void testImportFunctionWithAllUnderImport() {
        runTest("compiler/testData/diagnostics/tests/imports/importFunctionWithAllUnderImport.kt");
      }

      @Test
      @TestMetadata("importFunctionWithAllUnderImportAfterNamedImport.kt")
      public void testImportFunctionWithAllUnderImportAfterNamedImport() {
        runTest("compiler/testData/diagnostics/tests/imports/importFunctionWithAllUnderImportAfterNamedImport.kt");
      }

      @Test
      @TestMetadata("ImportFunctionWithPackageName.kt")
      public void testImportFunctionWithPackageName() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportFunctionWithPackageName.kt");
      }

      @Test
      @TestMetadata("ImportHidingDefinitionInTheSameFile.kt")
      public void testImportHidingDefinitionInTheSameFile() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportHidingDefinitionInTheSameFile.kt");
      }

      @Test
      @TestMetadata("ImportNestedWithDifferentName.kt")
      public void testImportNestedWithDifferentName() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportNestedWithDifferentName.kt");
      }

      @Test
      @TestMetadata("ImportObjectHidesCurrentPackage.kt")
      public void testImportObjectHidesCurrentPackage() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportObjectHidesCurrentPackage.kt");
      }

      @Test
      @TestMetadata("ImportResolutionOrder.kt")
      public void testImportResolutionOrder() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportResolutionOrder.kt");
      }

      @Test
      @TestMetadata("ImportStaticFunctionWithNonStaticSibling.kt")
      public void testImportStaticFunctionWithNonStaticSibling() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportStaticFunctionWithNonStaticSibling.kt");
      }

      @Test
      @TestMetadata("ImportTwoTimes.kt")
      public void testImportTwoTimes() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportTwoTimes.kt");
      }

      @Test
      @TestMetadata("ImportTwoTimesStar.kt")
      public void testImportTwoTimesStar() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportTwoTimesStar.kt");
      }

      @Test
      @TestMetadata("ImportsConflicting.kt")
      public void testImportsConflicting() {
        runTest("compiler/testData/diagnostics/tests/imports/ImportsConflicting.kt");
      }

      @Test
      @TestMetadata("InaccessiblePrivateInFile.kt")
      public void testInaccessiblePrivateInFile() {
        runTest("compiler/testData/diagnostics/tests/imports/InaccessiblePrivateInFile.kt");
      }

      @Test
      @TestMetadata("JavaPackageLocalClassNotImported.kt")
      public void testJavaPackageLocalClassNotImported() {
        runTest("compiler/testData/diagnostics/tests/imports/JavaPackageLocalClassNotImported.kt");
      }

      @Test
      @TestMetadata("OptionalAnnotationClasses.kt")
      public void testOptionalAnnotationClasses() {
        runTest("compiler/testData/diagnostics/tests/imports/OptionalAnnotationClasses.kt");
      }

      @Test
      @TestMetadata("PackageLocalClassNotImported.kt")
      public void testPackageLocalClassNotImported() {
        runTest("compiler/testData/diagnostics/tests/imports/PackageLocalClassNotImported.kt");
      }

      @Test
      @TestMetadata("PackageVsClass.kt")
      public void testPackageVsClass() {
        runTest("compiler/testData/diagnostics/tests/imports/PackageVsClass.kt");
      }

      @Test
      @TestMetadata("PrivateClassNotImported.kt")
      public void testPrivateClassNotImported() {
        runTest("compiler/testData/diagnostics/tests/imports/PrivateClassNotImported.kt");
      }

      @Test
      @TestMetadata("renamedImportInDifferentFile.kt")
      public void testRenamedImportInDifferentFile() {
        runTest("compiler/testData/diagnostics/tests/imports/renamedImportInDifferentFile.kt");
      }

      @Test
      @TestMetadata("RootPackage.kt")
      public void testRootPackage() {
        runTest("compiler/testData/diagnostics/tests/imports/RootPackage.kt");
      }

      @Test
      @TestMetadata("RootPackageImportsA.kt")
      public void testRootPackageImportsA() {
        runTest("compiler/testData/diagnostics/tests/imports/RootPackageImportsA.kt");
      }

      @Test
      @TestMetadata("RootPackageImportsB.kt")
      public void testRootPackageImportsB() {
        runTest("compiler/testData/diagnostics/tests/imports/RootPackageImportsB.kt");
      }

      @Test
      @TestMetadata("TopLevelClassVsPackage.kt")
      public void testTopLevelClassVsPackage() {
        runTest("compiler/testData/diagnostics/tests/imports/TopLevelClassVsPackage.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Test
      @TestMetadata("assertThatInNumerousIf.kt")
      public void testAssertThatInNumerousIf() {
        runTest("compiler/testData/diagnostics/tests/inference/assertThatInNumerousIf.kt");
      }

      @Test
      @TestMetadata("capturedInProjectedFlexibleType.kt")
      public void testCapturedInProjectedFlexibleType() {
        runTest("compiler/testData/diagnostics/tests/inference/capturedInProjectedFlexibleType.kt");
      }

      @Test
      @TestMetadata("capturedTypesInSelfType.kt")
      public void testCapturedTypesInSelfType() {
        runTest("compiler/testData/diagnostics/tests/inference/capturedTypesInSelfType.kt");
      }

      @Test
      @TestMetadata("checkNotNullWithNullableExpectedType.kt")
      public void testCheckNotNullWithNullableExpectedType() {
        runTest("compiler/testData/diagnostics/tests/inference/checkNotNullWithNullableExpectedType.kt");
      }

      @Test
      @TestMetadata("complexInferenceOnParentizedExpression.kt")
      public void testComplexInferenceOnParentizedExpression() {
        runTest("compiler/testData/diagnostics/tests/inference/complexInferenceOnParentizedExpression.kt");
      }

      @Test
      @TestMetadata("conflictingSubstitutions.kt")
      public void testConflictingSubstitutions() {
        runTest("compiler/testData/diagnostics/tests/inference/conflictingSubstitutions.kt");
      }

      @Test
      @TestMetadata("discardInapplicableCandidateWithNotSatisfyingSelfType.kt")
      public void testDiscardInapplicableCandidateWithNotSatisfyingSelfType() {
        runTest("compiler/testData/diagnostics/tests/inference/discardInapplicableCandidateWithNotSatisfyingSelfType.kt");
      }

      @Test
      @TestMetadata("dnnArgumentInferred.kt")
      public void testDnnArgumentInferred() {
        runTest("compiler/testData/diagnostics/tests/inference/dnnArgumentInferred.kt");
      }

      @Test
      @TestMetadata("elvisInsideWhen.kt")
      public void testElvisInsideWhen() {
        runTest("compiler/testData/diagnostics/tests/inference/elvisInsideWhen.kt");
      }

      @Test
      @TestMetadata("elvisWithNothingInRhs.kt")
      public void testElvisWithNothingInRhs() {
        runTest("compiler/testData/diagnostics/tests/inference/elvisWithNothingInRhs.kt");
      }

      @Test
      @TestMetadata("equalitySubstitutionInsideNonInvariantType.kt")
      public void testEqualitySubstitutionInsideNonInvariantType() {
        runTest("compiler/testData/diagnostics/tests/inference/equalitySubstitutionInsideNonInvariantType.kt");
      }

      @Test
      @TestMetadata("exclExclInference.kt")
      public void testExclExclInference() {
        runTest("compiler/testData/diagnostics/tests/inference/exclExclInference.kt");
      }

      @Test
      @TestMetadata("expectedTypeFromCastComplexExpression.kt")
      public void testExpectedTypeFromCastComplexExpression() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeFromCastComplexExpression.kt");
      }

      @Test
      @TestMetadata("expectedTypeFromCastParenthesized.kt")
      public void testExpectedTypeFromCastParenthesized() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeFromCastParenthesized.kt");
      }

      @Test
      @TestMetadata("expectedTypeWithGenerics.kt")
      public void testExpectedTypeWithGenerics() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeWithGenerics.kt");
      }

      @Test
      @TestMetadata("expectedTypeWithGenericsSafeCalls.kt")
      public void testExpectedTypeWithGenericsSafeCalls() {
        runTest("compiler/testData/diagnostics/tests/inference/expectedTypeWithGenericsSafeCalls.kt");
      }

      @Test
      @TestMetadata("findViewById.kt")
      public void testFindViewById() {
        runTest("compiler/testData/diagnostics/tests/inference/findViewById.kt");
      }

      @Test
      @TestMetadata("fixVariableToNothing.kt")
      public void testFixVariableToNothing() {
        runTest("compiler/testData/diagnostics/tests/inference/fixVariableToNothing.kt");
      }

      @Test
      @TestMetadata("fixationOrderForProperConstraints.kt")
      public void testFixationOrderForProperConstraints() {
        runTest("compiler/testData/diagnostics/tests/inference/fixationOrderForProperConstraints.kt");
      }

      @Test
      @TestMetadata("flexibleTypesAsUpperBound.kt")
      public void testFlexibleTypesAsUpperBound() {
        runTest("compiler/testData/diagnostics/tests/inference/flexibleTypesAsUpperBound.kt");
      }

      @Test
      @TestMetadata("genericAssignmentOperator.kt")
      public void testGenericAssignmentOperator() {
        runTest("compiler/testData/diagnostics/tests/inference/genericAssignmentOperator.kt");
      }

      @Test
      @TestMetadata("genericCallInThrow.kt")
      public void testGenericCallInThrow() {
        runTest("compiler/testData/diagnostics/tests/inference/genericCallInThrow.kt");
      }

      @Test
      @TestMetadata("genericOnJavaWildcardBoundedByRaw.kt")
      public void testGenericOnJavaWildcardBoundedByRaw() {
        runTest("compiler/testData/diagnostics/tests/inference/genericOnJavaWildcardBoundedByRaw.kt");
      }

      @Test
      @TestMetadata("genericWithUnmatchedNullabilityDelegate.kt")
      public void testGenericWithUnmatchedNullabilityDelegate() {
        runTest("compiler/testData/diagnostics/tests/inference/genericWithUnmatchedNullabilityDelegate.kt");
      }

      @Test
      @TestMetadata("genericsWithUnmatchedNullabilityNested.kt")
      public void testGenericsWithUnmatchedNullabilityNested() {
        runTest("compiler/testData/diagnostics/tests/inference/genericsWithUnmatchedNullabilityNested.kt");
      }

      @Test
      @TestMetadata("immutableArrayList.kt")
      public void testImmutableArrayList() {
        runTest("compiler/testData/diagnostics/tests/inference/immutableArrayList.kt");
      }

      @Test
      @TestMetadata("inferInFunctionLiterals.kt")
      public void testInferInFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/inference/inferInFunctionLiterals.kt");
      }

      @Test
      @TestMetadata("inferInFunctionLiteralsWithReturn.kt")
      public void testInferInFunctionLiteralsWithReturn() {
        runTest("compiler/testData/diagnostics/tests/inference/inferInFunctionLiteralsWithReturn.kt");
      }

      @Test
      @TestMetadata("inferenceForkRegression.kt")
      public void testInferenceForkRegression() {
        runTest("compiler/testData/diagnostics/tests/inference/inferenceForkRegression.kt");
      }

      @Test
      @TestMetadata("inferenceForkRegressionSimple.kt")
      public void testInferenceForkRegressionSimple() {
        runTest("compiler/testData/diagnostics/tests/inference/inferenceForkRegressionSimple.kt");
      }

      @Test
      @TestMetadata("intersectionTypeMultipleBoundsAsReceiver.kt")
      public void testIntersectionTypeMultipleBoundsAsReceiver() {
        runTest("compiler/testData/diagnostics/tests/inference/intersectionTypeMultipleBoundsAsReceiver.kt");
      }

      @Test
      @TestMetadata("intersectionTypeOnWhenCall.kt")
      public void testIntersectionTypeOnWhenCall() {
        runTest("compiler/testData/diagnostics/tests/inference/intersectionTypeOnWhenCall.kt");
      }

      @Test
      @TestMetadata("intersectionTypesWithContravariantTypes.kt")
      public void testIntersectionTypesWithContravariantTypes() {
        runTest("compiler/testData/diagnostics/tests/inference/intersectionTypesWithContravariantTypes.kt");
      }

      @Test
      @TestMetadata("intersectionWithEnum.kt")
      public void testIntersectionWithEnum() {
        runTest("compiler/testData/diagnostics/tests/inference/intersectionWithEnum.kt");
      }

      @Test
      @TestMetadata("knownTypeParameters.kt")
      public void testKnownTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/inference/knownTypeParameters.kt");
      }

      @Test
      @TestMetadata("kt28598.kt")
      public void testKt28598() {
        runTest("compiler/testData/diagnostics/tests/inference/kt28598.kt");
      }

      @Test
      @TestMetadata("kt3184.kt")
      public void testKt3184() {
        runTest("compiler/testData/diagnostics/tests/inference/kt3184.kt");
      }

      @Test
      @TestMetadata("kt32196.kt")
      public void testKt32196() {
        runTest("compiler/testData/diagnostics/tests/inference/kt32196.kt");
      }

      @Test
      @TestMetadata("kt32415.kt")
      public void testKt32415() {
        runTest("compiler/testData/diagnostics/tests/inference/kt32415.kt");
      }

      @Test
      @TestMetadata("kt32434.kt")
      public void testKt32434() {
        runTest("compiler/testData/diagnostics/tests/inference/kt32434.kt");
      }

      @Test
      @TestMetadata("kt32462.kt")
      public void testKt32462() {
        runTest("compiler/testData/diagnostics/tests/inference/kt32462.kt");
      }

      @Test
      @TestMetadata("kt33263.kt")
      public void testKt33263() {
        runTest("compiler/testData/diagnostics/tests/inference/kt33263.kt");
      }

      @Test
      @TestMetadata("kt35702.kt")
      public void testKt35702() {
        runTest("compiler/testData/diagnostics/tests/inference/kt35702.kt");
      }

      @Test
      @TestMetadata("kt36044.kt")
      public void testKt36044() {
        runTest("compiler/testData/diagnostics/tests/inference/kt36044.kt");
      }

      @Test
      @TestMetadata("kt36819.kt")
      public void testKt36819() {
        runTest("compiler/testData/diagnostics/tests/inference/kt36819.kt");
      }

      @Test
      @TestMetadata("kt37853.kt")
      public void testKt37853() {
        runTest("compiler/testData/diagnostics/tests/inference/kt37853.kt");
      }

      @Test
      @TestMetadata("kt47316.kt")
      public void testKt47316() {
        runTest("compiler/testData/diagnostics/tests/inference/kt47316.kt");
      }

      @Test
      @TestMetadata("kt53124.kt")
      public void testKt53124() {
        runTest("compiler/testData/diagnostics/tests/inference/kt53124.kt");
      }

      @Test
      @TestMetadata("kt619.kt")
      public void testKt619() {
        runTest("compiler/testData/diagnostics/tests/inference/kt619.kt");
      }

      @Test
      @TestMetadata("kt62609.kt")
      public void testKt62609() {
        runTest("compiler/testData/diagnostics/tests/inference/kt62609.kt");
      }

      @Test
      @TestMetadata("kt63982.kt")
      public void testKt63982() {
        runTest("compiler/testData/diagnostics/tests/inference/kt63982.kt");
      }

      @Test
      @TestMetadata("kt69159Simplified.kt")
      public void testKt69159Simplified() {
        runTest("compiler/testData/diagnostics/tests/inference/kt69159Simplified.kt");
      }

      @Test
      @TestMetadata("kt69159WithComparable.kt")
      public void testKt69159WithComparable() {
        runTest("compiler/testData/diagnostics/tests/inference/kt69159WithComparable.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentWithLabel.kt")
      public void testLambdaArgumentWithLabel() {
        runTest("compiler/testData/diagnostics/tests/inference/lambdaArgumentWithLabel.kt");
      }

      @Test
      @TestMetadata("lambdaParameterTypeInElvis.kt")
      public void testLambdaParameterTypeInElvis() {
        runTest("compiler/testData/diagnostics/tests/inference/lambdaParameterTypeInElvis.kt");
      }

      @Test
      @TestMetadata("localFunctionInsideIfBlock.kt")
      public void testLocalFunctionInsideIfBlock() {
        runTest("compiler/testData/diagnostics/tests/inference/localFunctionInsideIfBlock.kt");
      }

      @Test
      @TestMetadata("notFixedTopLevelLambdaParameter.kt")
      public void testNotFixedTopLevelLambdaParameter() {
        runTest("compiler/testData/diagnostics/tests/inference/notFixedTopLevelLambdaParameter.kt");
      }

      @Test
      @TestMetadata("nothingVsParameterBound.kt")
      public void testNothingVsParameterBound() {
        runTest("compiler/testData/diagnostics/tests/inference/nothingVsParameterBound.kt");
      }

      @Test
      @TestMetadata("nullableTypeArgumentWithNotNullUpperBound.kt")
      public void testNullableTypeArgumentWithNotNullUpperBound() {
        runTest("compiler/testData/diagnostics/tests/inference/nullableTypeArgumentWithNotNullUpperBound.kt");
      }

      @Test
      @TestMetadata("nullableUpperBound.kt")
      public void testNullableUpperBound() {
        runTest("compiler/testData/diagnostics/tests/inference/nullableUpperBound.kt");
      }

      @Test
      @TestMetadata("nullableVsDnnVariations.kt")
      public void testNullableVsDnnVariations() {
        runTest("compiler/testData/diagnostics/tests/inference/nullableVsDnnVariations.kt");
      }

      @Test
      @TestMetadata("onlyInputTypesWithMultilevelIncorporation.kt")
      public void testOnlyInputTypesWithMultilevelIncorporation() {
        runTest("compiler/testData/diagnostics/tests/inference/onlyInputTypesWithMultilevelIncorporation.kt");
      }

      @Test
      @TestMetadata("opposite.kt")
      public void testOpposite() {
        runTest("compiler/testData/diagnostics/tests/inference/opposite.kt");
      }

      @Test
      @TestMetadata("receiverTypeMismatch_withProper.kt")
      public void testReceiverTypeMismatch_withProper() {
        runTest("compiler/testData/diagnostics/tests/inference/receiverTypeMismatch_withProper.kt");
      }

      @Test
      @TestMetadata("receiverTypeMismatch_withoutProper.kt")
      public void testReceiverTypeMismatch_withoutProper() {
        runTest("compiler/testData/diagnostics/tests/inference/receiverTypeMismatch_withoutProper.kt");
      }

      @Test
      @TestMetadata("recursiveGenericExtensionReceiver.kt")
      public void testRecursiveGenericExtensionReceiver() {
        runTest("compiler/testData/diagnostics/tests/inference/recursiveGenericExtensionReceiver.kt");
      }

      @Test
      @TestMetadata("selectOfLambdaWithExtension.kt")
      public void testSelectOfLambdaWithExtension() {
        runTest("compiler/testData/diagnostics/tests/inference/selectOfLambdaWithExtension.kt");
      }

      @Test
      @TestMetadata("selectOfLambdaWithExtensionDisabled.kt")
      public void testSelectOfLambdaWithExtensionDisabled() {
        runTest("compiler/testData/diagnostics/tests/inference/selectOfLambdaWithExtensionDisabled.kt");
      }

      @Test
      @TestMetadata("selectOfLambdaWithExtensionEnabled.kt")
      public void testSelectOfLambdaWithExtensionEnabled() {
        runTest("compiler/testData/diagnostics/tests/inference/selectOfLambdaWithExtensionEnabled.kt");
      }

      @Test
      @TestMetadata("smartCastForkForExpectType.kt")
      public void testSmartCastForkForExpectType() {
        runTest("compiler/testData/diagnostics/tests/inference/smartCastForkForExpectType.kt");
      }

      @Test
      @TestMetadata("smartCastForkForExpectedTypeNested.kt")
      public void testSmartCastForkForExpectedTypeNested() {
        runTest("compiler/testData/diagnostics/tests/inference/smartCastForkForExpectedTypeNested.kt");
      }

      @Test
      @TestMetadata("specialCallsWithLambdas.kt")
      public void testSpecialCallsWithLambdas() {
        runTest("compiler/testData/diagnostics/tests/inference/specialCallsWithLambdas.kt");
      }

      @Test
      @TestMetadata("starApproximation.kt")
      public void testStarApproximation() {
        runTest("compiler/testData/diagnostics/tests/inference/starApproximation.kt");
      }

      @Test
      @TestMetadata("starApproximationBangBang.kt")
      public void testStarApproximationBangBang() {
        runTest("compiler/testData/diagnostics/tests/inference/starApproximationBangBang.kt");
      }

      @Test
      @TestMetadata("starApproximationFlexible.kt")
      public void testStarApproximationFlexible() {
        runTest("compiler/testData/diagnostics/tests/inference/starApproximationFlexible.kt");
      }

      @Test
      @TestMetadata("starApproximationFromDifferentTypeParameter.kt")
      public void testStarApproximationFromDifferentTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/inference/starApproximationFromDifferentTypeParameter.kt");
      }

      @Test
      @TestMetadata("stubTypeForSubtyping.kt")
      public void testStubTypeForSubtyping() {
        runTest("compiler/testData/diagnostics/tests/inference/stubTypeForSubtyping.kt");
      }

      @Test
      @TestMetadata("topLevelIntersection.kt")
      public void testTopLevelIntersection() {
        runTest("compiler/testData/diagnostics/tests/inference/topLevelIntersection.kt");
      }

      @Test
      @TestMetadata("tryNumberLowerBoundsBeforeUpperBounds.kt")
      public void testTryNumberLowerBoundsBeforeUpperBounds() {
        runTest("compiler/testData/diagnostics/tests/inference/tryNumberLowerBoundsBeforeUpperBounds.kt");
      }

      @Test
      @TestMetadata("typeParameterInConstructor.kt")
      public void testTypeParameterInConstructor() {
        runTest("compiler/testData/diagnostics/tests/inference/typeParameterInConstructor.kt");
      }

      @Test
      @TestMetadata("underscoredInEnumMap.kt")
      public void testUnderscoredInEnumMap() {
        runTest("compiler/testData/diagnostics/tests/inference/underscoredInEnumMap.kt");
      }

      @Test
      @TestMetadata("underscoredTypeArgument.kt")
      public void testUnderscoredTypeArgument() {
        runTest("compiler/testData/diagnostics/tests/inference/underscoredTypeArgument.kt");
      }

      @Test
      @TestMetadata("underscoredTypeArgumentInTypeAliasedConstructor.kt")
      public void testUnderscoredTypeArgumentInTypeAliasedConstructor() {
        runTest("compiler/testData/diagnostics/tests/inference/underscoredTypeArgumentInTypeAliasedConstructor.kt");
      }

      @Test
      @TestMetadata("underscoredTypeArgumentInTypeAliasedSamConstructor.kt")
      public void testUnderscoredTypeArgumentInTypeAliasedSamConstructor() {
        runTest("compiler/testData/diagnostics/tests/inference/underscoredTypeArgumentInTypeAliasedSamConstructor.kt");
      }

      @Test
      @TestMetadata("UnitUpperboundLambdaReturnType.kt")
      public void testUnitUpperboundLambdaReturnType() {
        runTest("compiler/testData/diagnostics/tests/inference/UnitUpperboundLambdaReturnType.kt");
      }

      @Test
      @TestMetadata("UnitUpperboundLambdaReturnTypeWithExplicitReturn.kt")
      public void testUnitUpperboundLambdaReturnTypeWithExplicitReturn() {
        runTest("compiler/testData/diagnostics/tests/inference/UnitUpperboundLambdaReturnTypeWithExplicitReturn.kt");
      }

      @Test
      @TestMetadata("unsoundness2.kt")
      public void testUnsoundness2() {
        runTest("compiler/testData/diagnostics/tests/inference/unsoundness2.kt");
      }

      @Test
      @TestMetadata("useFunctionLiteralsToInferType.kt")
      public void testUseFunctionLiteralsToInferType() {
        runTest("compiler/testData/diagnostics/tests/inference/useFunctionLiteralsToInferType.kt");
      }

      @Test
      @TestMetadata("violatingUpperBoundForSelfType.kt")
      public void testViolatingUpperBoundForSelfType() {
        runTest("compiler/testData/diagnostics/tests/inference/violatingUpperBoundForSelfType.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/callableReferences")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReferences {
        @Test
        @TestMetadata("conversionLastStatementInLambda.kt")
        public void testConversionLastStatementInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/callableReferences/conversionLastStatementInLambda.kt");
        }

        @Test
        @TestMetadata("conversionLastStatementInLambdaGeneric.kt")
        public void testConversionLastStatementInLambdaGeneric() {
          runTest("compiler/testData/diagnostics/tests/inference/callableReferences/conversionLastStatementInLambdaGeneric.kt");
        }

        @Test
        @TestMetadata("kt55931.kt")
        public void testKt55931() {
          runTest("compiler/testData/diagnostics/tests/inference/callableReferences/kt55931.kt");
        }

        @Test
        @TestMetadata("kt56227.kt")
        public void testKt56227() {
          runTest("compiler/testData/diagnostics/tests/inference/callableReferences/kt56227.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class CapturedTypes {
        @Test
        @TestMetadata("approximateBeforeFixation.kt")
        public void testApproximateBeforeFixation() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/approximateBeforeFixation.kt");
        }

        @Test
        @TestMetadata("approximationLeavesNonTrivialLowerBound.kt")
        public void testApproximationLeavesNonTrivialLowerBound() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/approximationLeavesNonTrivialLowerBound.kt");
        }

        @Test
        @TestMetadata("avoidCreatingUselessCapturedTypes.kt")
        public void testAvoidCreatingUselessCapturedTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/avoidCreatingUselessCapturedTypes.kt");
        }

        @Test
        @TestMetadata("captureFromNullableTypeInScope.kt")
        public void testCaptureFromNullableTypeInScope() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromNullableTypeInScope.kt");
        }

        @Test
        @TestMetadata("captureFromNullableTypeInScopeAny.kt")
        public void testCaptureFromNullableTypeInScopeAny() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromNullableTypeInScopeAny.kt");
        }

        @Test
        @TestMetadata("captureFromSubtyping.kt")
        public void testCaptureFromSubtyping() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromSubtyping.kt");
        }

        @Test
        @TestMetadata("captureFromTypeParameterUpperBound.kt")
        public void testCaptureFromTypeParameterUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromTypeParameterUpperBound.kt");
        }

        @Test
        @TestMetadata("capturedApproximationWithInproperUpperConstraint.kt")
        public void testCapturedApproximationWithInproperUpperConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedApproximationWithInproperUpperConstraint.kt");
        }

        @Test
        @TestMetadata("capturedAssignmentAfter.kt")
        public void testCapturedAssignmentAfter() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedAssignmentAfter.kt");
        }

        @Test
        @TestMetadata("capturedFlexibleIntersectionTypesWithDifferentBounds.kt")
        public void testCapturedFlexibleIntersectionTypesWithDifferentBounds() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedFlexibleIntersectionTypesWithDifferentBounds.kt");
        }

        @Test
        @TestMetadata("capturedFlexibleIntersectionTypesWithDifferentConstructors.kt")
        public void testCapturedFlexibleIntersectionTypesWithDifferentConstructors() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedFlexibleIntersectionTypesWithDifferentConstructors.kt");
        }

        @Test
        @TestMetadata("capturedForIncorporationEscapes.kt")
        public void testCapturedForIncorporationEscapes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedForIncorporationEscapes.kt");
        }

        @Test
        @TestMetadata("capturedInTypeInference.kt")
        public void testCapturedInTypeInference() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedInTypeInference.kt");
        }

        @Test
        @TestMetadata("capturedTypeWithInnerTypealias.kt")
        public void testCapturedTypeWithInnerTypealias() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeWithInnerTypealias.kt");
        }

        @Test
        @TestMetadata("capturedTypeWithTypeVariableSubtyping.kt")
        public void testCapturedTypeWithTypeVariableSubtyping() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeWithTypeVariableSubtyping.kt");
        }

        @Test
        @TestMetadata("capturedTypesSubstitutionIntoAbbreviation.kt")
        public void testCapturedTypesSubstitutionIntoAbbreviation() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypesSubstitutionIntoAbbreviation.kt");
        }

        @Test
        @TestMetadata("capturingFromArgumentOfFlexibleType.kt")
        public void testCapturingFromArgumentOfFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturingFromArgumentOfFlexibleType.kt");
        }

        @Test
        @TestMetadata("capturingOfDnn.kt")
        public void testCapturingOfDnn() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/capturingOfDnn.kt");
        }

        @Test
        @TestMetadata("differentCapturedTypes.kt")
        public void testDifferentCapturedTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/differentCapturedTypes.kt");
        }

        @Test
        @TestMetadata("dontCheckNewCapturedTypeSpecificChecksForOldOnes.kt")
        public void testDontCheckNewCapturedTypeSpecificChecksForOldOnes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/dontCheckNewCapturedTypeSpecificChecksForOldOnes.kt");
        }

        @Test
        @TestMetadata("expectedTypeHasCapturedStarArgument.kt")
        public void testExpectedTypeHasCapturedStarArgument() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/expectedTypeHasCapturedStarArgument.kt");
        }

        @Test
        @TestMetadata("genericWildcardUpperBound.kt")
        public void testGenericWildcardUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/genericWildcardUpperBound.kt");
        }

        @Test
        @TestMetadata("invokeCallWithCapturedReceiver.kt")
        public void testInvokeCallWithCapturedReceiver() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/invokeCallWithCapturedReceiver.kt");
        }

        @Test
        @TestMetadata("kt25302.kt")
        public void testKt25302() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt25302.kt");
        }

        @Test
        @TestMetadata("kt52782.kt")
        public void testKt52782() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt52782.kt");
        }

        @Test
        @TestMetadata("kt72177.kt")
        public void testKt72177() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/kt72177.kt");
        }

        @Test
        @TestMetadata("notApproximateWhenCopyDescriptors.kt")
        public void testNotApproximateWhenCopyDescriptors() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/notApproximateWhenCopyDescriptors.kt");
        }

        @Test
        @TestMetadata("propagateNullailityOnSupertypesWhenCaptureTypes.kt")
        public void testPropagateNullailityOnSupertypesWhenCaptureTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/propagateNullailityOnSupertypesWhenCaptureTypes.kt");
        }

        @Test
        @TestMetadata("starProjectionRegression.kt")
        public void testStarProjectionRegression() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/starProjectionRegression.kt");
        }

        @Test
        @TestMetadata("substituteCapturedTypesWithTypeVariables.kt")
        public void testSubstituteCapturedTypesWithTypeVariables() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/substituteCapturedTypesWithTypeVariables.kt");
        }

        @Test
        @TestMetadata("topLevelCapturingInsideReturnType.kt")
        public void testTopLevelCapturingInsideReturnType() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/topLevelCapturingInsideReturnType.kt");
        }

        @Test
        @TestMetadata("upperBoundOfCapturedInProjectionInOutPosition.kt")
        public void testUpperBoundOfCapturedInProjectionInOutPosition() {
          runTest("compiler/testData/diagnostics/tests/inference/capturedTypes/upperBoundOfCapturedInProjectionInOutPosition.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/coercionToUnit")
      @TestDataPath("$PROJECT_ROOT")
      public class CoercionToUnit {
        @Test
        @TestMetadata("afterBareReturn.kt")
        public void testAfterBareReturn() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/afterBareReturn.kt");
        }

        @Test
        @TestMetadata("coercionToUnitForLastLambdaInLambda.kt")
        public void testCoercionToUnitForLastLambdaInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionToUnitForLastLambdaInLambda.kt");
        }

        @Test
        @TestMetadata("coercionToUnitReference.kt")
        public void testCoercionToUnitReference() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionToUnitReference.kt");
        }

        @Test
        @TestMetadata("coercionWithExplicitTypeArgument.kt")
        public void testCoercionWithExplicitTypeArgument() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithExplicitTypeArgument.kt");
        }

        @Test
        @TestMetadata("coerctionToUnitForATypeWithUpperBound.kt")
        public void testCoerctionToUnitForATypeWithUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/coerctionToUnitForATypeWithUpperBound.kt");
        }

        @Test
        @TestMetadata("genericInApply.kt")
        public void testGenericInApply() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/genericInApply.kt");
        }

        @Test
        @TestMetadata("indirectCoercionWithExpectedType.kt")
        public void testIndirectCoercionWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/indirectCoercionWithExpectedType.kt");
        }

        @Test
        @TestMetadata("lambdaWithNullableUnitInElvis.kt")
        public void testLambdaWithNullableUnitInElvis() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/lambdaWithNullableUnitInElvis.kt");
        }

        @Test
        @TestMetadata("nestedLambda.kt")
        public void testNestedLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/nestedLambda.kt");
        }

        @Test
        @TestMetadata("nonPropagationOfCoercionToUnitInsideNestedLambda.kt")
        public void testNonPropagationOfCoercionToUnitInsideNestedLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/coercionToUnit/nonPropagationOfCoercionToUnitInsideNestedLambda.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/commonSystem")
      @TestDataPath("$PROJECT_ROOT")
      public class CommonSystem {
        @Test
        @TestMetadata("boundOnNullableVariable.kt")
        public void testBoundOnNullableVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/boundOnNullableVariable.kt");
        }

        @Test
        @TestMetadata("castToSubtype.kt")
        public void testCastToSubtype() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/castToSubtype.kt");
        }

        @Test
        @TestMetadata("dontCaptureTypeVariable.kt")
        public void testDontCaptureTypeVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/dontCaptureTypeVariable.kt");
        }

        @Test
        @TestMetadata("exactOnElvis.kt")
        public void testExactOnElvis() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/exactOnElvis.kt");
        }

        @Test
        @TestMetadata("fixVariablesInRightOrder.kt")
        public void testFixVariablesInRightOrder() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/fixVariablesInRightOrder.kt");
        }

        @Test
        @TestMetadata("genericCandidateInGenericClass.kt")
        public void testGenericCandidateInGenericClass() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/genericCandidateInGenericClass.kt");
        }

        @Test
        @TestMetadata("iltInsideSeveralCalls.kt")
        public void testIltInsideSeveralCalls() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/iltInsideSeveralCalls.kt");
        }

        @Test
        @TestMetadata("inferenceWithUpperBoundsInLambda.kt")
        public void testInferenceWithUpperBoundsInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/inferenceWithUpperBoundsInLambda.kt");
        }

        @Test
        @TestMetadata("kt30300.kt")
        public void testKt30300() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt30300.kt");
        }

        @Test
        @TestMetadata("kt31969.kt")
        public void testKt31969() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt31969.kt");
        }

        @Test
        @TestMetadata("kt32818.kt")
        public void testKt32818() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt32818.kt");
        }

        @Test
        @TestMetadata("kt33197.kt")
        public void testKt33197() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/kt33197.kt");
        }

        @Test
        @TestMetadata("lessSpecificTypeForArgumentCallWithExactAnnotation.kt")
        public void testLessSpecificTypeForArgumentCallWithExactAnnotation() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/lessSpecificTypeForArgumentCallWithExactAnnotation.kt");
        }

        @Test
        @TestMetadata("lessSpecificTypeForArgumentCallWithExactAnnotation_ni.kt")
        public void testLessSpecificTypeForArgumentCallWithExactAnnotation_ni() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/lessSpecificTypeForArgumentCallWithExactAnnotation_ni.kt");
        }

        @Test
        @TestMetadata("manyArgumentsForVararg.kt")
        public void testManyArgumentsForVararg() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/manyArgumentsForVararg.kt");
        }

        @Test
        @TestMetadata("nonFixedVariableFromBothBranches.kt")
        public void testNonFixedVariableFromBothBranches() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/nonFixedVariableFromBothBranches.kt");
        }

        @Test
        @TestMetadata("nonFixedVariableInsideFlexibleType.kt")
        public void testNonFixedVariableInsideFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/nonFixedVariableInsideFlexibleType.kt");
        }

        @Test
        @TestMetadata("outProjectedTypeToOutProjected.kt")
        public void testOutProjectedTypeToOutProjected() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/outProjectedTypeToOutProjected.kt");
        }

        @Test
        @TestMetadata("postponedCompletionWithExactAnnotation.kt")
        public void testPostponedCompletionWithExactAnnotation() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/postponedCompletionWithExactAnnotation.kt");
        }

        @Test
        @TestMetadata("postponedCompletionWithExactAnnotation_ni.kt")
        public void testPostponedCompletionWithExactAnnotation_ni() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/postponedCompletionWithExactAnnotation_ni.kt");
        }

        @Test
        @TestMetadata("selectFromTwoIncompatibleTypes.kt")
        public void testSelectFromTwoIncompatibleTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/selectFromTwoIncompatibleTypes.kt");
        }

        @Test
        @TestMetadata("selectIntegerValueTypeFromIf.kt")
        public void testSelectIntegerValueTypeFromIf() {
          runTest("compiler/testData/diagnostics/tests/inference/commonSystem/selectIntegerValueTypeFromIf.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/completion")
      @TestDataPath("$PROJECT_ROOT")
      public class Completion {
        @Test
        @TestMetadata("basic.kt")
        public void testBasic() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/basic.kt");
        }

        @Test
        @TestMetadata("definitelyNotNullType.kt")
        public void testDefinitelyNotNullType() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/definitelyNotNullType.kt");
        }

        @Test
        @TestMetadata("equalityConstraintUpstairs.kt")
        public void testEqualityConstraintUpstairs() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/equalityConstraintUpstairs.kt");
        }

        @Test
        @TestMetadata("flexibleType.kt")
        public void testFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/flexibleType.kt");
        }

        @Test
        @TestMetadata("inferLabeledElementTypeForLambdaInReturnInCatch.kt")
        public void testInferLabeledElementTypeForLambdaInReturnInCatch() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/inferLabeledElementTypeForLambdaInReturnInCatch.kt");
        }

        @Test
        @TestMetadata("intersectionType.kt")
        public void testIntersectionType() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/intersectionType.kt");
        }

        @Test
        @TestMetadata("kt36233.kt")
        public void testKt36233() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/kt36233.kt");
        }

        @Test
        @TestMetadata("nestedVariance.kt")
        public void testNestedVariance() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/nestedVariance.kt");
        }

        @Test
        @TestMetadata("partialForIlt.kt")
        public void testPartialForIlt() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/partialForIlt.kt");
        }

        @Test
        @TestMetadata("partialForIltWithNothing.kt")
        public void testPartialForIltWithNothing() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/partialForIltWithNothing.kt");
        }

        @Test
        @TestMetadata("transitiveConstraint.kt")
        public void testTransitiveConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/completion/transitiveConstraint.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class PostponedArgumentsAnalysis {
          @Test
          @TestMetadata("callableReferenceLambdaCombinationInsideCall.kt")
          public void testCallableReferenceLambdaCombinationInsideCall() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/callableReferenceLambdaCombinationInsideCall.kt");
          }

          @Test
          @TestMetadata("callableReferences.kt")
          public void testCallableReferences() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/callableReferences.kt");
          }

          @Test
          @TestMetadata("fixingVariableDuringAddingConstraintForFirstPosponedArgument.kt")
          public void testFixingVariableDuringAddingConstraintForFirstPosponedArgument() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/fixingVariableDuringAddingConstraintForFirstPosponedArgument.kt");
          }

          @Test
          @TestMetadata("lackOfDeepIncorporation.kt")
          public void testLackOfDeepIncorporation() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/lackOfDeepIncorporation.kt");
          }

          @Test
          @TestMetadata("lambdasInTryCatch.kt")
          public void testLambdasInTryCatch() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/lambdasInTryCatch.kt");
          }

          @Test
          @TestMetadata("takingExtensibilityFromDeclarationOfAnonymousFunction.kt")
          public void testTakingExtensibilityFromDeclarationOfAnonymousFunction() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/takingExtensibilityFromDeclarationOfAnonymousFunction.kt");
          }

          @Test
          @TestMetadata("wrongVariableFixationOrder.kt")
          public void testWrongVariableFixationOrder() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/wrongVariableFixationOrder.kt");
          }

          @Test
          @TestMetadata("wrongVariableFixationOrder2.kt")
          public void testWrongVariableFixationOrder2() {
            runTest("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/wrongVariableFixationOrder2.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/constraints")
      @TestDataPath("$PROJECT_ROOT")
      public class Constraints {
        @Test
        @TestMetadata("approximationWithDefNotNullInInvPositionDuringInference.kt")
        public void testApproximationWithDefNotNullInInvPositionDuringInference() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/approximationWithDefNotNullInInvPositionDuringInference.kt");
        }

        @Test
        @TestMetadata("complexDependencyWihtoutProperConstraints.kt")
        public void testComplexDependencyWihtoutProperConstraints() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/complexDependencyWihtoutProperConstraints.kt");
        }

        @Test
        @TestMetadata("definitelyNotNullTypeInvariantPosition.kt")
        public void testDefinitelyNotNullTypeInvariantPosition() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/definitelyNotNullTypeInvariantPosition.kt");
        }

        @Test
        @TestMetadata("earlyCompletionForCalls.kt")
        public void testEarlyCompletionForCalls() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/earlyCompletionForCalls.kt");
        }

        @Test
        @TestMetadata("fixTypeVariableWithNothingConstraintEarlierThanComplexVariable.kt")
        public void testFixTypeVariableWithNothingConstraintEarlierThanComplexVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/fixTypeVariableWithNothingConstraintEarlierThanComplexVariable.kt");
        }

        @Test
        @TestMetadata("inferTypeFromCapturedStarProjection.kt")
        public void testInferTypeFromCapturedStarProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/inferTypeFromCapturedStarProjection.kt");
        }

        @Test
        @TestMetadata("kt7351ConstraintFromUnitExpectedType.kt")
        public void testKt7351ConstraintFromUnitExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/kt7351ConstraintFromUnitExpectedType.kt");
        }

        @Test
        @TestMetadata("kt7433.kt")
        public void testKt7433() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/kt7433.kt");
        }

        @Test
        @TestMetadata("manyConstraintsDueToFlexibleRawTypes.kt")
        public void testManyConstraintsDueToFlexibleRawTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/manyConstraintsDueToFlexibleRawTypes.kt");
        }

        @Test
        @TestMetadata("manyConstraintsDueToRecursiveFlexibleTypesWithWildcards.kt")
        public void testManyConstraintsDueToRecursiveFlexibleTypesWithWildcards() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/manyConstraintsDueToRecursiveFlexibleTypesWithWildcards.kt");
        }

        @Test
        @TestMetadata("operationsOnIntegerValueTypes.kt")
        public void testOperationsOnIntegerValueTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/operationsOnIntegerValueTypes.kt");
        }

        @Test
        @TestMetadata("recursiveJavaTypeWithStarProjection.kt")
        public void testRecursiveJavaTypeWithStarProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/recursiveJavaTypeWithStarProjection.kt");
        }

        @Test
        @TestMetadata("remainConstraintContainingTypeWithoutProjection.kt")
        public void testRemainConstraintContainingTypeWithoutProjection() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/remainConstraintContainingTypeWithoutProjection.kt");
        }

        @Test
        @TestMetadata("returnLambdaFromLambda.kt")
        public void testReturnLambdaFromLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/returnLambdaFromLambda.kt");
        }

        @Test
        @TestMetadata("wrongApproximationWithDefNotNullTypesAndDelegates.kt")
        public void testWrongApproximationWithDefNotNullTypesAndDelegates() {
          runTest("compiler/testData/diagnostics/tests/inference/constraints/wrongApproximationWithDefNotNullTypesAndDelegates.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class EmptyIntersectionTypes {
        @Test
        @TestMetadata("compatibilityResolveWhenVariableHasComplexIntersectionType.kt")
        public void testCompatibilityResolveWhenVariableHasComplexIntersectionType() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/compatibilityResolveWhenVariableHasComplexIntersectionType.kt");
        }

        @Test
        @TestMetadata("contravariance.kt")
        public void testContravariance() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/contravariance.kt");
        }

        @Test
        @TestMetadata("covariance.kt")
        public void testCovariance() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/covariance.kt");
        }

        @Test
        @TestMetadata("emptyIntersectionOnIf.kt")
        public void testEmptyIntersectionOnIf() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/emptyIntersectionOnIf.kt");
        }

        @Test
        @TestMetadata("kt45461.kt")
        public void testKt45461() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461.kt");
        }

        @Test
        @TestMetadata("kt45461_10.kt")
        public void testKt45461_10() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_10.kt");
        }

        @Test
        @TestMetadata("kt45461_11.kt")
        public void testKt45461_11() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_11.kt");
        }

        @Test
        @TestMetadata("kt45461_12.kt")
        public void testKt45461_12() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_12.kt");
        }

        @Test
        @TestMetadata("kt45461_13.kt")
        public void testKt45461_13() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_13.kt");
        }

        @Test
        @TestMetadata("kt45461_14.kt")
        public void testKt45461_14() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_14.kt");
        }

        @Test
        @TestMetadata("kt45461_15.kt")
        public void testKt45461_15() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_15.kt");
        }

        @Test
        @TestMetadata("kt45461_16.kt")
        public void testKt45461_16() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_16.kt");
        }

        @Test
        @TestMetadata("kt45461_17.kt")
        public void testKt45461_17() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_17.kt");
        }

        @Test
        @TestMetadata("kt45461_18.kt")
        public void testKt45461_18() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_18.kt");
        }

        @Test
        @TestMetadata("kt45461_19.kt")
        public void testKt45461_19() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_19.kt");
        }

        @Test
        @TestMetadata("kt45461_2.kt")
        public void testKt45461_2() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_2.kt");
        }

        @Test
        @TestMetadata("kt45461_20.kt")
        public void testKt45461_20() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_20.kt");
        }

        @Test
        @TestMetadata("kt45461_21.kt")
        public void testKt45461_21() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_21.kt");
        }

        @Test
        @TestMetadata("kt45461_22.kt")
        public void testKt45461_22() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_22.kt");
        }

        @Test
        @TestMetadata("kt45461_23.kt")
        public void testKt45461_23() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_23.kt");
        }

        @Test
        @TestMetadata("kt45461_24.kt")
        public void testKt45461_24() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_24.kt");
        }

        @Test
        @TestMetadata("kt45461_26.kt")
        public void testKt45461_26() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_26.kt");
        }

        @Test
        @TestMetadata("kt45461_27.kt")
        public void testKt45461_27() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_27.kt");
        }

        @Test
        @TestMetadata("kt45461_28.kt")
        public void testKt45461_28() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_28.kt");
        }

        @Test
        @TestMetadata("kt45461_29.kt")
        public void testKt45461_29() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_29.kt");
        }

        @Test
        @TestMetadata("kt45461_3.kt")
        public void testKt45461_3() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_3.kt");
        }

        @Test
        @TestMetadata("kt45461_30.kt")
        public void testKt45461_30() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_30.kt");
        }

        @Test
        @TestMetadata("kt45461_31.kt")
        public void testKt45461_31() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_31.kt");
        }

        @Test
        @TestMetadata("kt45461_32.kt")
        public void testKt45461_32() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_32.kt");
        }

        @Test
        @TestMetadata("kt45461_33.kt")
        public void testKt45461_33() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_33.kt");
        }

        @Test
        @TestMetadata("kt45461_34.kt")
        public void testKt45461_34() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_34.kt");
        }

        @Test
        @TestMetadata("kt45461_35.kt")
        public void testKt45461_35() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_35.kt");
        }

        @Test
        @TestMetadata("kt45461_35_Enabled.kt")
        public void testKt45461_35_Enabled() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_35_Enabled.kt");
        }

        @Test
        @TestMetadata("kt45461_4.kt")
        public void testKt45461_4() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_4.kt");
        }

        @Test
        @TestMetadata("kt45461_5.kt")
        public void testKt45461_5() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_5.kt");
        }

        @Test
        @TestMetadata("kt45461_6.kt")
        public void testKt45461_6() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_6.kt");
        }

        @Test
        @TestMetadata("kt45461_7.kt")
        public void testKt45461_7() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_7.kt");
        }

        @Test
        @TestMetadata("kt45461_8.kt")
        public void testKt45461_8() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_8.kt");
        }

        @Test
        @TestMetadata("kt45461_9.kt")
        public void testKt45461_9() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_9.kt");
        }

        @Test
        @TestMetadata("kt48765.kt")
        public void testKt48765() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48765.kt");
        }

        @Test
        @TestMetadata("kt48935.kt")
        public void testKt48935() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935.kt");
        }

        @Test
        @TestMetadata("kt48935_2.kt")
        public void testKt48935_2() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_2.kt");
        }

        @Test
        @TestMetadata("kt48935_3.kt")
        public void testKt48935_3() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_3.kt");
        }

        @Test
        @TestMetadata("kt48935_4.kt")
        public void testKt48935_4() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_4.kt");
        }

        @Test
        @TestMetadata("kt48935_5.kt")
        public void testKt48935_5() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_5.kt");
        }

        @Test
        @TestMetadata("kt48935_6.kt")
        public void testKt48935_6() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48935_6.kt");
        }

        @Test
        @TestMetadata("kt48987.kt")
        public void testKt48987() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt48987.kt");
        }

        @Test
        @TestMetadata("kt49661.kt")
        public void testKt49661() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt49661.kt");
        }

        @Test
        @TestMetadata("kt51016.kt")
        public void testKt51016() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt51016.kt");
        }

        @Test
        @TestMetadata("kt52364.kt")
        public void testKt52364() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt52364.kt");
        }

        @Test
        @TestMetadata("kt54411.kt")
        public void testKt54411() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt54411.kt");
        }

        @Test
        @TestMetadata("nullableEmptyIntersection.kt")
        public void testNullableEmptyIntersection() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/nullableEmptyIntersection.kt");
        }

        @Test
        @TestMetadata("recursiveTypeParameters.kt")
        public void testRecursiveTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/recursiveTypeParameters.kt");
        }

        @Test
        @TestMetadata("selectFromCovariantAndContravariantTypes.kt")
        public void testSelectFromCovariantAndContravariantTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/selectFromCovariantAndContravariantTypes.kt");
        }

        @Test
        @TestMetadata("substitutingSuperTypes.kt")
        public void testSubstitutingSuperTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/substitutingSuperTypes.kt");
        }

        @Test
        @TestMetadata("substitutingSuperTypes2.kt")
        public void testSubstitutingSuperTypes2() {
          runTest("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/substitutingSuperTypes2.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/forks")
      @TestDataPath("$PROJECT_ROOT")
      public class Forks {
        @Test
        @TestMetadata("forkInWhen.kt")
        public void testForkInWhen() {
          runTest("compiler/testData/diagnostics/tests/inference/forks/forkInWhen.kt");
        }

        @Test
        @TestMetadata("nestedCallVariableFixation.kt")
        public void testNestedCallVariableFixation() {
          runTest("compiler/testData/diagnostics/tests/inference/forks/nestedCallVariableFixation.kt");
        }

        @Test
        @TestMetadata("nestedCallVariableFixationSimple.kt")
        public void testNestedCallVariableFixationSimple() {
          runTest("compiler/testData/diagnostics/tests/inference/forks/nestedCallVariableFixationSimple.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/incorporation")
      @TestDataPath("$PROJECT_ROOT")
      public class Incorporation {
        @Test
        @TestMetadata("allowBigIncorporatedConstraints.kt")
        public void testAllowBigIncorporatedConstraints() {
          runTest("compiler/testData/diagnostics/tests/inference/incorporation/allowBigIncorporatedConstraints.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class NestedCalls {
        @Test
        @TestMetadata("arrayAccess.kt")
        public void testArrayAccess() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/arrayAccess.kt");
        }

        @Test
        @TestMetadata("completeNestedCallsForArraySetExpression.kt")
        public void testCompleteNestedCallsForArraySetExpression() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsForArraySetExpression.kt");
        }

        @Test
        @TestMetadata("completeNestedCallsInference.kt")
        public void testCompleteNestedCallsInference() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedCallsInference.kt");
        }

        @Test
        @TestMetadata("completeNestedForVariableAsFunctionCall.kt")
        public void testCompleteNestedForVariableAsFunctionCall() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/completeNestedForVariableAsFunctionCall.kt");
        }

        @Test
        @TestMetadata("externalTypeParameter.kt")
        public void testExternalTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/externalTypeParameter.kt");
        }

        @Test
        @TestMetadata("kt3395.kt")
        public void testKt3395() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/kt3395.kt");
        }

        @Test
        @TestMetadata("makeNullableIfSafeCall.kt")
        public void testMakeNullableIfSafeCall() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/makeNullableIfSafeCall.kt");
        }

        @Test
        @TestMetadata("nontrivialCallExpression.kt")
        public void testNontrivialCallExpression() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/nontrivialCallExpression.kt");
        }

        @Test
        @TestMetadata("preferArgumentToNullability.kt")
        public void testPreferArgumentToNullability() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/preferArgumentToNullability.kt");
        }

        @Test
        @TestMetadata("preferNothingToBound.kt")
        public void testPreferNothingToBound() {
          runTest("compiler/testData/diagnostics/tests/inference/nestedCalls/preferNothingToBound.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/nothingType")
      @TestDataPath("$PROJECT_ROOT")
      public class NothingType {
        @Test
        @TestMetadata("complexDependancyOnVariableWithTrivialConstraint.kt")
        public void testComplexDependancyOnVariableWithTrivialConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/complexDependancyOnVariableWithTrivialConstraint.kt");
        }

        @Test
        @TestMetadata("discriminatedNothingAndSmartCast.kt")
        public void testDiscriminatedNothingAndSmartCast() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/discriminatedNothingAndSmartCast.kt");
        }

        @Test
        @TestMetadata("discriminatedNothingInsideComplexNestedCall.kt")
        public void testDiscriminatedNothingInsideComplexNestedCall() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/discriminatedNothingInsideComplexNestedCall.kt");
        }

        @Test
        @TestMetadata("generateConstraintWithInnerNothingType.kt")
        public void testGenerateConstraintWithInnerNothingType() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/generateConstraintWithInnerNothingType.kt");
        }

        @Test
        @TestMetadata("genericOverride.kt")
        public void testGenericOverride() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/genericOverride.kt");
        }

        @Test
        @TestMetadata("implicitNothingConstraintFromReturn.kt")
        public void testImplicitNothingConstraintFromReturn() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/implicitNothingConstraintFromReturn.kt");
        }

        @Test
        @TestMetadata("inferArgumentToNothingFromNullConstant.kt")
        public void testInferArgumentToNothingFromNullConstant() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/inferArgumentToNothingFromNullConstant.kt");
        }

        @Test
        @TestMetadata("inferenceWithRecursiveGenericsAndNothing.kt")
        public void testInferenceWithRecursiveGenericsAndNothing() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/inferenceWithRecursiveGenericsAndNothing.kt");
        }

        @Test
        @TestMetadata("kt24490.kt")
        public void testKt24490() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt24490.kt");
        }

        @Test
        @TestMetadata("kt32051.kt")
        public void testKt32051() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt32051.kt");
        }

        @Test
        @TestMetadata("kt32081.kt")
        public void testKt32081() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt32081.kt");
        }

        @Test
        @TestMetadata("kt32207.kt")
        public void testKt32207() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt32207.kt");
        }

        @Test
        @TestMetadata("kt32388.kt")
        public void testKt32388() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt32388.kt");
        }

        @Test
        @TestMetadata("kt56448.kt")
        public void testKt56448() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/kt56448.kt");
        }

        @Test
        @TestMetadata("lambdaNothingAndExpectedType.kt")
        public void testLambdaNothingAndExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/lambdaNothingAndExpectedType.kt");
        }

        @Test
        @TestMetadata("nestedLambdaInferenceWithIncorporationOfVariables.kt")
        public void testNestedLambdaInferenceWithIncorporationOfVariables() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/nestedLambdaInferenceWithIncorporationOfVariables.kt");
        }

        @Test
        @TestMetadata("nothingWithCallableReference.kt")
        public void testNothingWithCallableReference() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/nothingWithCallableReference.kt");
        }

        @Test
        @TestMetadata("nullableExpectedTypeFromVariable.kt")
        public void testNullableExpectedTypeFromVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/nullableExpectedTypeFromVariable.kt");
        }

        @Test
        @TestMetadata("platformNothingAsUsefulConstraint.kt")
        public void testPlatformNothingAsUsefulConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/platformNothingAsUsefulConstraint.kt");
        }

        @Test
        @TestMetadata("reifiedParameterWithRecursiveBound.kt")
        public void testReifiedParameterWithRecursiveBound() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/reifiedParameterWithRecursiveBound.kt");
        }

        @Test
        @TestMetadata("reportImplicitNothingOnlyForOwnTypeParameters.kt")
        public void testReportImplicitNothingOnlyForOwnTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/reportImplicitNothingOnlyForOwnTypeParameters.kt");
        }

        @Test
        @TestMetadata("selectWithNull.kt")
        public void testSelectWithNull() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/selectWithNull.kt");
        }

        @Test
        @TestMetadata("specialCallWithMaterializeAndExpectedType.kt")
        public void testSpecialCallWithMaterializeAndExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/nothingType/specialCallWithMaterializeAndExpectedType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/operators")
      @TestDataPath("$PROJECT_ROOT")
      public class Operators {
        @Test
        @TestMetadata("elvisWithExpectedType.kt")
        public void testElvisWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/inference/operators/elvisWithExpectedType.kt");
        }

        @Test
        @TestMetadata("elvisWithUnitExpectedTypeAndNonUnitLHS.kt")
        public void testElvisWithUnitExpectedTypeAndNonUnitLHS() {
          runTest("compiler/testData/diagnostics/tests/inference/operators/elvisWithUnitExpectedTypeAndNonUnitLHS.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla")
      @TestDataPath("$PROJECT_ROOT")
      public class Pcla {
        @Test
        @TestMetadata("assignmentUsingIncompletePCLACall.kt")
        public void testAssignmentUsingIncompletePCLACall() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/assignmentUsingIncompletePCLACall.kt");
        }

        @Test
        @TestMetadata("bothOuterAndProperConstraints.kt")
        public void testBothOuterAndProperConstraints() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/bothOuterAndProperConstraints.kt");
        }

        @Test
        @TestMetadata("builderPassedAsNamedArgument.kt")
        public void testBuilderPassedAsNamedArgument() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/builderPassedAsNamedArgument.kt");
        }

        @Test
        @TestMetadata("callableReferenceAsArgumentForTransaction.kt")
        public void testCallableReferenceAsArgumentForTransaction() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/callableReferenceAsArgumentForTransaction.kt");
        }

        @Test
        @TestMetadata("callableReferenceInsideInvokeCall.kt")
        public void testCallableReferenceInsideInvokeCall() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/callableReferenceInsideInvokeCall.kt");
        }

        @Test
        @TestMetadata("considerContractsOfIncompleteCalls.kt")
        public void testConsiderContractsOfIncompleteCalls() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/considerContractsOfIncompleteCalls.kt");
        }

        @Test
        @TestMetadata("contextReceivers.kt")
        public void testContextReceivers() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/contextReceivers.kt");
        }

        @Test
        @TestMetadata("elvisWithNothingRHS.kt")
        public void testElvisWithNothingRHS() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/elvisWithNothingRHS.kt");
        }

        @Test
        @TestMetadata("elvisWithReturnInLastStatementOfLastLambda.kt")
        public void testElvisWithReturnInLastStatementOfLastLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/elvisWithReturnInLastStatementOfLastLambda.kt");
        }

        @Test
        @TestMetadata("errorOnStubReceiver.kt")
        public void testErrorOnStubReceiver() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/errorOnStubReceiver.kt");
        }

        @Test
        @TestMetadata("fixingDependentVariablesForReceiversInitial.kt")
        public void testFixingDependentVariablesForReceiversInitial() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/fixingDependentVariablesForReceiversInitial.kt");
        }

        @Test
        @TestMetadata("fixingTVForLambadaWithShallowDependencyToOuter3.kt")
        public void testFixingTVForLambadaWithShallowDependencyToOuter3() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/fixingTVForLambadaWithShallowDependencyToOuter3.kt");
        }

        @Test
        @TestMetadata("incompleteCallInReturnArgumentsWithProperExpectType.kt")
        public void testIncompleteCallInReturnArgumentsWithProperExpectType() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/incompleteCallInReturnArgumentsWithProperExpectType.kt");
        }

        @Test
        @TestMetadata("invokeExtensionReceiverWithNotFixedVariables.kt")
        public void testInvokeExtensionReceiverWithNotFixedVariables() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/invokeExtensionReceiverWithNotFixedVariables.kt");
        }

        @Test
        @TestMetadata("invokeExtensionReceiverWithNotFixedVariablesInitial.kt")
        public void testInvokeExtensionReceiverWithNotFixedVariablesInitial() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/invokeExtensionReceiverWithNotFixedVariablesInitial.kt");
        }

        @Test
        @TestMetadata("kt69040.kt")
        public void testKt69040() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/kt69040.kt");
        }

        @Test
        @TestMetadata("labaledCall.kt")
        public void testLabaledCall() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/labaledCall.kt");
        }

        @Test
        @TestMetadata("lambdaBelongsToOuterCall.kt")
        public void testLambdaBelongsToOuterCall() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lambdaBelongsToOuterCall.kt");
        }

        @Test
        @TestMetadata("lambdaBelongsToOuterCallAdditionalFixedVariable.kt")
        public void testLambdaBelongsToOuterCallAdditionalFixedVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lambdaBelongsToOuterCallAdditionalFixedVariable.kt");
        }

        @Test
        @TestMetadata("lambdaBelongsToOuterCallUnitConstraint.kt")
        public void testLambdaBelongsToOuterCallUnitConstraint() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lambdaBelongsToOuterCallUnitConstraint.kt");
        }

        @Test
        @TestMetadata("lambdaParameterForBareType.kt")
        public void testLambdaParameterForBareType() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lambdaParameterForBareType.kt");
        }

        @Test
        @TestMetadata("lambdaParameterForBareTypeAs.kt")
        public void testLambdaParameterForBareTypeAs() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lambdaParameterForBareTypeAs.kt");
        }

        @Test
        @TestMetadata("lambdaParameterForBareTypeOnOuterTypeVariable.kt")
        public void testLambdaParameterForBareTypeOnOuterTypeVariable() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lambdaParameterForBareTypeOnOuterTypeVariable.kt");
        }

        @Test
        @TestMetadata("lambdaParameterForNonBareType.kt")
        public void testLambdaParameterForNonBareType() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lambdaParameterForNonBareType.kt");
        }

        @Test
        @TestMetadata("lambdaParameterTypeFixation.kt")
        public void testLambdaParameterTypeFixation() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lambdaParameterTypeFixation.kt");
        }

        @Test
        @TestMetadata("lastLambdaStatementWithFixedVariables.kt")
        public void testLastLambdaStatementWithFixedVariables() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/lastLambdaStatementWithFixedVariables.kt");
        }

        @Test
        @TestMetadata("manyArgsDifferentYields.kt")
        public void testManyArgsDifferentYields() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/manyArgsDifferentYields.kt");
        }

        @Test
        @TestMetadata("memberScopeOfCapturedTypeForPostponedCall.kt")
        public void testMemberScopeOfCapturedTypeForPostponedCall() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/memberScopeOfCapturedTypeForPostponedCall.kt");
        }

        @Test
        @TestMetadata("namedArgumentToBeResolved.kt")
        public void testNamedArgumentToBeResolved() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/namedArgumentToBeResolved.kt");
        }

        @Test
        @TestMetadata("namedArgumentTypeSubstitution.kt")
        public void testNamedArgumentTypeSubstitution() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/namedArgumentTypeSubstitution.kt");
        }

        @Test
        @TestMetadata("nestedLambdaWithLastLambdaContainingCall.kt")
        public void testNestedLambdaWithLastLambdaContainingCall() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/nestedLambdaWithLastLambdaContainingCall.kt");
        }

        @Test
        @TestMetadata("nestedLambdaWithNonLastYieldStatement.kt")
        public void testNestedLambdaWithNonLastYieldStatement() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/nestedLambdaWithNonLastYieldStatement.kt");
        }

        @Test
        @TestMetadata("nestedLambdasWithOverloadResolutionByReturnType.kt")
        public void testNestedLambdasWithOverloadResolutionByReturnType() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/nestedLambdasWithOverloadResolutionByReturnType.kt");
        }

        @Test
        @TestMetadata("newTvFromLamdaAreNotCountedAsProper.kt")
        public void testNewTvFromLamdaAreNotCountedAsProper() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/newTvFromLamdaAreNotCountedAsProper.kt");
        }

        @Test
        @TestMetadata("noBuilderInferenceRestrictionReceiverInconsistency.kt")
        public void testNoBuilderInferenceRestrictionReceiverInconsistency() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/noBuilderInferenceRestrictionReceiverInconsistency.kt");
        }

        @Test
        @TestMetadata("overloadResolutionByLambdaReturnTypeInsideBI.kt")
        public void testOverloadResolutionByLambdaReturnTypeInsideBI() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/overloadResolutionByLambdaReturnTypeInsideBI.kt");
        }

        @Test
        @TestMetadata("propertyInvokeInsidePCLALambda.kt")
        public void testPropertyInvokeInsidePCLALambda() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/propertyInvokeInsidePCLALambda.kt");
        }

        @Test
        @TestMetadata("propertySubstitution.kt")
        public void testPropertySubstitution() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/propertySubstitution.kt");
        }

        @Test
        @TestMetadata("simpleLambdaInCallWithAnotherLambdaWithBuilderInference.kt")
        public void testSimpleLambdaInCallWithAnotherLambdaWithBuilderInference() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/simpleLambdaInCallWithAnotherLambdaWithBuilderInference.kt");
        }

        @Test
        @TestMetadata("singleBranchConditionLastStatementInLambda.kt")
        public void testSingleBranchConditionLastStatementInLambda() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/singleBranchConditionLastStatementInLambda.kt");
        }

        @Test
        @TestMetadata("smartCastOnBuilderController.kt")
        public void testSmartCastOnBuilderController() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/smartCastOnBuilderController.kt");
        }

        @Test
        @TestMetadata("substitutedSyntheticPropertyUsage.kt")
        public void testSubstitutedSyntheticPropertyUsage() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/substitutedSyntheticPropertyUsage.kt");
        }

        @Test
        @TestMetadata("theSimplestBuilder.kt")
        public void testTheSimplestBuilder() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/theSimplestBuilder.kt");
        }

        @Test
        @TestMetadata("unitElvisLikeWithRun.kt")
        public void testUnitElvisLikeWithRun() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/unitElvisLikeWithRun.kt");
        }

        @Test
        @TestMetadata("unitElvisWithRun.kt")
        public void testUnitElvisWithRun() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/unitElvisWithRun.kt");
        }

        @Test
        @TestMetadata("whenWithPropertyHavingSomePCLACallsWithinInitializer.kt")
        public void testWhenWithPropertyHavingSomePCLACallsWithinInitializer() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/whenWithPropertyHavingSomePCLACallsWithinInitializer.kt");
        }

        @Test
        @TestMetadata("withoutAnnotationDisabledFeature.kt")
        public void testWithoutAnnotationDisabledFeature() {
          runTest("compiler/testData/diagnostics/tests/inference/pcla/withoutAnnotationDisabledFeature.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/additional")
        @TestDataPath("$PROJECT_ROOT")
        public class Additional {
          @Test
          @TestMetadata("BuildeeSupertypeAsTypeVariableSourceInClassifiers.kt")
          public void testBuildeeSupertypeAsTypeVariableSourceInClassifiers() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/additional/BuildeeSupertypeAsTypeVariableSourceInClassifiers.kt");
          }

          @Test
          @TestMetadata("BuildeeSupertypeAsTypeVariableSourceInFunctions.kt")
          public void testBuildeeSupertypeAsTypeVariableSourceInFunctions() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/additional/BuildeeSupertypeAsTypeVariableSourceInFunctions.kt");
          }

          @Test
          @TestMetadata("BuildeeSupertypeAsTypeVariableSourceInProperties.kt")
          public void testBuildeeSupertypeAsTypeVariableSourceInProperties() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/additional/BuildeeSupertypeAsTypeVariableSourceInProperties.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/csForks")
        @TestDataPath("$PROJECT_ROOT")
        public class CsForks {
          @Test
          @TestMetadata("postponingForksNecessary.kt")
          public void testPostponingForksNecessary() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/csForks/postponingForksNecessary.kt");
          }

          @Test
          @TestMetadata("postponingForksNecessaryWithLambda.kt")
          public void testPostponingForksNecessaryWithLambda() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/csForks/postponingForksNecessaryWithLambda.kt");
          }

          @Test
          @TestMetadata("relatedToOuterGreen.kt")
          public void testRelatedToOuterGreen() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/csForks/relatedToOuterGreen.kt");
          }

          @Test
          @TestMetadata("simpleGreen.kt")
          public void testSimpleGreen() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/csForks/simpleGreen.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand")
        @TestDataPath("$PROJECT_ROOT")
        public class FixationOnDemand {
          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/miscellaneous")
          @TestDataPath("$PROJECT_ROOT")
          public class Miscellaneous {
            @Test
            @TestMetadata("ResolutionToMemberOverExtension.kt")
            public void testResolutionToMemberOverExtension() {
              runTest("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/miscellaneous/ResolutionToMemberOverExtension.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms")
          @TestDataPath("$PROJECT_ROOT")
          public class SyntaxForms {
            @Test
            @TestMetadata("ReferenceEqualityExpression.kt")
            public void testReferenceEqualityExpression() {
              runTest("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/ReferenceEqualityExpression.kt");
            }

            @Test
            @TestMetadata("StringInterpolationExpression.kt")
            public void testStringInterpolationExpression() {
              runTest("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/StringInterpolationExpression.kt");
            }

            @Test
            @TestMetadata("ValueEqualityOperatorCall.kt")
            public void testValueEqualityOperatorCall() {
              runTest("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/ValueEqualityOperatorCall.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement")
        @TestDataPath("$PROJECT_ROOT")
        public class ForceLambdaCompletionFromReturnStatement {
          @Test
          @TestMetadata("earlyReturn20.kt")
          public void testEarlyReturn20() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement/earlyReturn20.kt");
          }

          @Test
          @TestMetadata("multiLambdas20.kt")
          public void testMultiLambdas20() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement/multiLambdas20.kt");
          }

          @Test
          @TestMetadata("noPostponedAtomForNestedLambda.kt")
          public void testNoPostponedAtomForNestedLambda() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement/noPostponedAtomForNestedLambda.kt");
          }

          @Test
          @TestMetadata("noPostponedAtomForNestedLambda20.kt")
          public void testNoPostponedAtomForNestedLambda20() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement/noPostponedAtomForNestedLambda20.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/issues")
        @TestDataPath("$PROJECT_ROOT")
        public class Issues {
          @Test
          @TestMetadata("kt43710.kt")
          public void testKt43710() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt43710.kt");
          }

          @Test
          @TestMetadata("kt47744.kt")
          public void testKt47744() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt47744.kt");
          }

          @Test
          @TestMetadata("kt48031.kt")
          public void testKt48031() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt48031.kt");
          }

          @Test
          @TestMetadata("kt49160a.kt")
          public void testKt49160a() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt49160a.kt");
          }

          @Test
          @TestMetadata("kt49160b.kt")
          public void testKt49160b() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt49160b.kt");
          }

          @Test
          @TestMetadata("kt49160c.kt")
          public void testKt49160c() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt49160c.kt");
          }

          @Test
          @TestMetadata("kt49160d.kt")
          public void testKt49160d() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt49160d.kt");
          }

          @Test
          @TestMetadata("kt49160e.kt")
          public void testKt49160e() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt49160e.kt");
          }

          @Test
          @TestMetadata("kt49285.kt")
          public void testKt49285() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt49285.kt");
          }

          @Test
          @TestMetadata("kt49829.kt")
          public void testKt49829() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt49829.kt");
          }

          @Test
          @TestMetadata("kt49829_noCast.kt")
          public void testKt49829_noCast() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt49829_noCast.kt");
          }

          @Test
          @TestMetadata("kt50453.kt")
          public void testKt50453() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt50453.kt");
          }

          @Test
          @TestMetadata("kt52757.kt")
          public void testKt52757() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt52757.kt");
          }

          @Test
          @TestMetadata("kt53109.kt")
          public void testKt53109() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt53109.kt");
          }

          @Test
          @TestMetadata("kt53422a.kt")
          public void testKt53422a() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt53422a.kt");
          }

          @Test
          @TestMetadata("kt53478.kt")
          public void testKt53478() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt53478.kt");
          }

          @Test
          @TestMetadata("kt53553.kt")
          public void testKt53553() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt53553.kt");
          }

          @Test
          @TestMetadata("kt53639.kt")
          public void testKt53639() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt53639.kt");
          }

          @Test
          @TestMetadata("kt53639Simple.kt")
          public void testKt53639Simple() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt53639Simple.kt");
          }

          @Test
          @TestMetadata("kt54400a.kt")
          public void testKt54400a() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt54400a.kt");
          }

          @Test
          @TestMetadata("kt54400b.kt")
          public void testKt54400b() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt54400b.kt");
          }

          @Test
          @TestMetadata("kt54400c.kt")
          public void testKt54400c() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt54400c.kt");
          }

          @Test
          @TestMetadata("kt54767a.kt")
          public void testKt54767a() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt54767a.kt");
          }

          @Test
          @TestMetadata("kt54767b.kt")
          public void testKt54767b() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt54767b.kt");
          }

          @Test
          @TestMetadata("kt55057.kt")
          public void testKt55057() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt55057.kt");
          }

          @Test
          @TestMetadata("kt57707.kt")
          public void testKt57707() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt57707.kt");
          }

          @Test
          @TestMetadata("kt57709.kt")
          public void testKt57709() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt57709.kt");
          }

          @Test
          @TestMetadata("kt57834.kt")
          public void testKt57834() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt57834.kt");
          }

          @Test
          @TestMetadata("kt59798.kt")
          public void testKt59798() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt59798.kt");
          }

          @Test
          @TestMetadata("kt60291a.kt")
          public void testKt60291a() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt60291a.kt");
          }

          @Test
          @TestMetadata("kt60291b.kt")
          public void testKt60291b() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt60291b.kt");
          }

          @Test
          @TestMetadata("kt60291c.kt")
          public void testKt60291c() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt60291c.kt");
          }

          @Test
          @TestMetadata("kt60447a.kt")
          public void testKt60447a() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt60447a.kt");
          }

          @Test
          @TestMetadata("kt60447b.kt")
          public void testKt60447b() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt60447b.kt");
          }

          @Test
          @TestMetadata("kt61310.kt")
          public void testKt61310() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt61310.kt");
          }

          @Test
          @TestMetadata("kt63733.kt")
          public void testKt63733() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt63733.kt");
          }

          @Test
          @TestMetadata("kt63840a.kt")
          public void testKt63840a() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt63840a.kt");
          }

          @Test
          @TestMetadata("kt63840b.kt")
          public void testKt63840b() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt63840b.kt");
          }

          @Test
          @TestMetadata("kt63840c.kt")
          public void testKt63840c() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt63840c.kt");
          }

          @Test
          @TestMetadata("kt64066.kt")
          public void testKt64066() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt64066.kt");
          }

          @Test
          @TestMetadata("kt64066disabled.kt")
          public void testKt64066disabled() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt64066disabled.kt");
          }

          @Test
          @TestMetadata("kt64222.kt")
          public void testKt64222() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt64222.kt");
          }

          @Test
          @TestMetadata("kt65300a.kt")
          public void testKt65300a() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300a.kt");
          }

          @Test
          @TestMetadata("kt65300b.kt")
          public void testKt65300b() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300b.kt");
          }

          @Test
          @TestMetadata("kt65300c.kt")
          public void testKt65300c() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300c.kt");
          }

          @Test
          @TestMetadata("kt65300d.kt")
          public void testKt65300d() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300d.kt");
          }

          @Test
          @TestMetadata("kt65300e.kt")
          public void testKt65300e() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300e.kt");
          }

          @Test
          @TestMetadata("kt65300f.kt")
          public void testKt65300f() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300f.kt");
          }

          @Test
          @TestMetadata("kt65300g.kt")
          public void testKt65300g() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300g.kt");
          }

          @Test
          @TestMetadata("kt65300h.kt")
          public void testKt65300h() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300h.kt");
          }

          @Test
          @TestMetadata("kt65300i.kt")
          public void testKt65300i() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300i.kt");
          }

          @Test
          @TestMetadata("kt65300j.kt")
          public void testKt65300j() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt65300j.kt");
          }

          @Test
          @TestMetadata("kt66229.kt")
          public void testKt66229() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt66229.kt");
          }

          @Test
          @TestMetadata("kt66243.kt")
          public void testKt66243() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt66243.kt");
          }

          @Test
          @TestMetadata("kt66272.kt")
          public void testKt66272() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt66272.kt");
          }

          @Test
          @TestMetadata("kt67875.kt")
          public void testKt67875() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt67875.kt");
          }

          @Test
          @TestMetadata("kt67993.kt")
          public void testKt67993() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt67993.kt");
          }

          @Test
          @TestMetadata("kt68889.kt")
          public void testKt68889() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt68889.kt");
          }

          @Test
          @TestMetadata("kt69170.kt")
          public void testKt69170() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt69170.kt");
          }

          @Test
          @TestMetadata("kt69170Original.kt")
          public void testKt69170Original() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt69170Original.kt");
          }

          @Test
          @TestMetadata("kt71662.kt")
          public void testKt71662() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt71662.kt");
          }

          @Test
          @TestMetadata("kt72238.kt")
          public void testKt72238() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt72238.kt");
          }

          @Test
          @TestMetadata("kt72272.kt")
          public void testKt72272() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/issues/kt72272.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter")
        @TestDataPath("$PROJECT_ROOT")
        public class OneParameter {
          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable")
          @TestDataPath("$PROJECT_ROOT")
          public class OneTypeVariable {
            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin")
            @TestDataPath("$PROJECT_ROOT")
            public class OneTypeInfoOrigin {
              @Test
              @TestMetadata("AnonymousFunctionArgumentAndBuildeeReceiver.kt")
              public void testAnonymousFunctionArgumentAndBuildeeReceiver() {
                runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/AnonymousFunctionArgumentAndBuildeeReceiver.kt");
              }

              @Nested
              @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts")
              @TestDataPath("$PROJECT_ROOT")
              public class SourceSinkFeedContexts {
                @Test
                @TestMetadata("ByAssignmentToALocalVariableMaterializeCase.kt")
                public void testByAssignmentToALocalVariableMaterializeCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ByAssignmentToALocalVariableMaterializeCase.kt");
                }

                @Test
                @TestMetadata("ByAssignmentToALocalVariableYieldCase.kt")
                public void testByAssignmentToALocalVariableYieldCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ByAssignmentToALocalVariableYieldCase.kt");
                }

                @Test
                @TestMetadata("InsideLocalClass.kt")
                public void testInsideLocalClass() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideLocalClass.kt");
                }

                @Test
                @TestMetadata("InsideNestedBuilderInferenceLambda.kt")
                public void testInsideNestedBuilderInferenceLambda() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/InsideNestedBuilderInferenceLambda.kt");
                }

                @Test
                @TestMetadata("ThroughDelegatedLocalVariableMaterializeCase.kt")
                public void testThroughDelegatedLocalVariableMaterializeCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughDelegatedLocalVariableMaterializeCase.kt");
                }

                @Test
                @TestMetadata("ThroughGenericFunctionCall.kt")
                public void testThroughGenericFunctionCall() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/sourceSinkFeedContexts/ThroughGenericFunctionCall.kt");
                }
              }

              @Nested
              @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes")
              @TestDataPath("$PROJECT_ROOT")
              public class TargetTypes {
                @Test
                @TestMetadata("NothingMaterializeCase.kt")
                public void testNothingMaterializeCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NothingMaterializeCase.kt");
                }

                @Test
                @TestMetadata("NullableNothingNullLiteralMaterializeCase.kt")
                public void testNullableNothingNullLiteralMaterializeCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/NullableNothingNullLiteralMaterializeCase.kt");
                }
              }

              @Nested
              @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks")
              @TestDataPath("$PROJECT_ROOT")
              public class TypeInfoSinks {
                @Test
                @TestMetadata("ExtensionFunctions.kt")
                public void testExtensionFunctions() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ExtensionFunctions.kt");
                }

                @Test
                @TestMetadata("ImmutableExtensionProperties.kt")
                public void testImmutableExtensionProperties() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ImmutableExtensionProperties.kt");
                }

                @Test
                @TestMetadata("ImmutableProperties.kt")
                public void testImmutableProperties() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ImmutableProperties.kt");
                }

                @Test
                @TestMetadata("MutableExtensionPropertiesMaterializeCase.kt")
                public void testMutableExtensionPropertiesMaterializeCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutableExtensionPropertiesMaterializeCase.kt");
                }

                @Test
                @TestMetadata("MutableExtensionPropertiesYieldCase.kt")
                public void testMutableExtensionPropertiesYieldCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutableExtensionPropertiesYieldCase.kt");
                }

                @Test
                @TestMetadata("MutablePropertiesMaterializeCase.kt")
                public void testMutablePropertiesMaterializeCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutablePropertiesMaterializeCase.kt");
                }

                @Test
                @TestMetadata("MutablePropertiesYieldCase.kt")
                public void testMutablePropertiesYieldCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/MutablePropertiesYieldCase.kt");
                }

                @Test
                @TestMetadata("ParametersOfBuilderArguments.kt")
                public void testParametersOfBuilderArguments() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ParametersOfBuilderArguments.kt");
                }

                @Test
                @TestMetadata("ReceiversOfBuilderArguments.kt")
                public void testReceiversOfBuilderArguments() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSinks/ReceiversOfBuilderArguments.kt");
                }
              }

              @Nested
              @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources")
              @TestDataPath("$PROJECT_ROOT")
              public class TypeInfoSources {
                @Test
                @TestMetadata("ExtensionFunctions.kt")
                public void testExtensionFunctions() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ExtensionFunctions.kt");
                }

                @Test
                @TestMetadata("ExtensionProperties.kt")
                public void testExtensionProperties() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ExtensionProperties.kt");
                }

                @Test
                @TestMetadata("ParametersOfBuilderArguments.kt")
                public void testParametersOfBuilderArguments() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ParametersOfBuilderArguments.kt");
                }

                @Test
                @TestMetadata("ReceiversOfBuilderArguments.kt")
                public void testReceiversOfBuilderArguments() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ReceiversOfBuilderArguments.kt");
                }

                @Test
                @TestMetadata("ReturnTypesOfBuilderParameters.kt")
                public void testReturnTypesOfBuilderParameters() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/ReturnTypesOfBuilderParameters.kt");
                }

                @Test
                @TestMetadata("UnitReturnTypeOfBuilderParametersExplicitReturnCase.kt")
                public void testUnitReturnTypeOfBuilderParametersExplicitReturnCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/UnitReturnTypeOfBuilderParametersExplicitReturnCase.kt");
                }

                @Test
                @TestMetadata("UnitReturnTypeOfBuilderParametersLastStatementReturnCase.kt")
                public void testUnitReturnTypeOfBuilderParametersLastStatementReturnCase() {
                  runTest("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/typeInfoSources/UnitReturnTypeOfBuilderParametersLastStatementReturnCase.kt");
                }
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/regresssions")
        @TestDataPath("$PROJECT_ROOT")
        public class Regresssions {
          @Test
          @TestMetadata("exponentialForksInCS.kt")
          public void testExponentialForksInCS() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/regresssions/exponentialForksInCS.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/stubTypes")
        @TestDataPath("$PROJECT_ROOT")
        public class StubTypes {
          @Test
          @TestMetadata("commonSuperType.kt")
          public void testCommonSuperType() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/stubTypes/commonSuperType.kt");
          }

          @Test
          @TestMetadata("commonSuperTypeContravariant.kt")
          public void testCommonSuperTypeContravariant() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/stubTypes/commonSuperTypeContravariant.kt");
          }

          @Test
          @TestMetadata("commonSuperTypeCovariant.kt")
          public void testCommonSuperTypeCovariant() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/stubTypes/commonSuperTypeCovariant.kt");
          }

          @Test
          @TestMetadata("commonSuperTypeNullable.kt")
          public void testCommonSuperTypeNullable() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/stubTypes/commonSuperTypeNullable.kt");
          }

          @Test
          @TestMetadata("intersect.kt")
          public void testIntersect() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/stubTypes/intersect.kt");
          }

          @Test
          @TestMetadata("nullability.kt")
          public void testNullability() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/stubTypes/nullability.kt");
          }

          @Test
          @TestMetadata("renderingStubTypes.kt")
          public void testRenderingStubTypes() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/stubTypes/renderingStubTypes.kt");
          }

          @Test
          @TestMetadata("simpleIntersection.kt")
          public void testSimpleIntersection() {
            runTest("compiler/testData/diagnostics/tests/inference/pcla/stubTypes/simpleIntersection.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/publicApproximation")
      @TestDataPath("$PROJECT_ROOT")
      public class PublicApproximation {
        @Test
        @TestMetadata("approximatedIntersectionMorePreciseThanBound.kt")
        public void testApproximatedIntersectionMorePreciseThanBound() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/approximatedIntersectionMorePreciseThanBound.kt");
        }

        @Test
        @TestMetadata("declarationTypes.kt")
        public void testDeclarationTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/declarationTypes.kt");
        }

        @Test
        @TestMetadata("intersectionAlternative.kt")
        public void testIntersectionAlternative() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/intersectionAlternative.kt");
        }

        @Test
        @TestMetadata("lambdaReturnArgumentCall.kt")
        public void testLambdaReturnArgumentCall() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/lambdaReturnArgumentCall.kt");
        }

        @Test
        @TestMetadata("lambdaReturnTypeApproximation.kt")
        public void testLambdaReturnTypeApproximation() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/lambdaReturnTypeApproximation.kt");
        }

        @Test
        @TestMetadata("localTypeNullability.kt")
        public void testLocalTypeNullability() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/localTypeNullability.kt");
        }

        @Test
        @TestMetadata("localTypeNullability_after.kt")
        public void testLocalTypeNullability_after() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/localTypeNullability_after.kt");
        }

        @Test
        @TestMetadata("localTypeNullability_before.kt")
        public void testLocalTypeNullability_before() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/localTypeNullability_before.kt");
        }

        @Test
        @TestMetadata("nonTrivialVariance.kt")
        public void testNonTrivialVariance() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/nonTrivialVariance.kt");
        }

        @Test
        @TestMetadata("parameterInBound.kt")
        public void testParameterInBound() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/parameterInBound.kt");
        }

        @Test
        @TestMetadata("projections.kt")
        public void testProjections() {
          runTest("compiler/testData/diagnostics/tests/inference/publicApproximation/projections.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class RecursiveTypes {
        @Test
        @TestMetadata("complexTypeUnwrapping.kt")
        public void testComplexTypeUnwrapping() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/complexTypeUnwrapping.kt");
        }

        @Test
        @TestMetadata("complexTypeUnwrapping2.kt")
        public void testComplexTypeUnwrapping2() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/complexTypeUnwrapping2.kt");
        }

        @Test
        @TestMetadata("multirecursion.kt")
        public void testMultirecursion() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/multirecursion.kt");
        }

        @Test
        @TestMetadata("nestedClassesWithSelfTypes.kt")
        public void testNestedClassesWithSelfTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/nestedClassesWithSelfTypes.kt");
        }

        @Test
        @TestMetadata("recursiveInIn.kt")
        public void testRecursiveInIn() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInIn.kt");
        }

        @Test
        @TestMetadata("recursiveInInv.kt")
        public void testRecursiveInInv() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInInv.kt");
        }

        @Test
        @TestMetadata("recursiveInOut.kt")
        public void testRecursiveInOut() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInOut.kt");
        }

        @Test
        @TestMetadata("recursiveInvIn.kt")
        public void testRecursiveInvIn() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInvIn.kt");
        }

        @Test
        @TestMetadata("recursiveInvOut.kt")
        public void testRecursiveInvOut() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveInvOut.kt");
        }

        @Test
        @TestMetadata("recursiveOutIn.kt")
        public void testRecursiveOutIn() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveOutIn.kt");
        }

        @Test
        @TestMetadata("recursiveOutInv.kt")
        public void testRecursiveOutInv() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveOutInv.kt");
        }

        @Test
        @TestMetadata("recursiveOutOut.kt")
        public void testRecursiveOutOut() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveOutOut.kt");
        }

        @Test
        @TestMetadata("recursiveTypeWithNonStarResult.kt")
        public void testRecursiveTypeWithNonStarResult() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveTypeWithNonStarResult.kt");
        }

        @Test
        @TestMetadata("recursiveTypes.kt")
        public void testRecursiveTypes() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/recursiveTypes.kt");
        }

        @Test
        @TestMetadata("twoTypeConstructors.kt")
        public void testTwoTypeConstructors() {
          runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/twoTypeConstructors.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes")
        @TestDataPath("$PROJECT_ROOT")
        public class SelfTypes {
          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes")
          @TestDataPath("$PROJECT_ROOT")
          public class EnabledInferenceOnSelfTypes {
            @Test
            @TestMetadata("basicInferenceForImplicitSelfType.kt")
            public void testBasicInferenceForImplicitSelfType() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/basicInferenceForImplicitSelfType.kt");
            }

            @Test
            @TestMetadata("enumExtensionFunction.kt")
            public void testEnumExtensionFunction() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/enumExtensionFunction.kt");
            }

            @Test
            @TestMetadata("overridingJKCases.kt")
            public void testOverridingJKCases() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/overridingJKCases.kt");
            }

            @Test
            @TestMetadata("recursiveTypeWithTwoTypeParams.kt")
            public void testRecursiveTypeWithTwoTypeParams() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/recursiveTypeWithTwoTypeParams.kt");
            }

            @Test
            @TestMetadata("whereAndWithCases.kt")
            public void testWhereAndWithCases() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/whereAndWithCases.kt");
            }

            @Test
            @TestMetadata("writerAppenderExampleRecursive.kt")
            public void testWriterAppenderExampleRecursive() {
              runTest("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/enabledInferenceOnSelfTypes/writerAppenderExampleRecursive.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/regressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Regressions {
        @Test
        @TestMetadata("compareBy.kt")
        public void testCompareBy() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/compareBy.kt");
        }

        @Test
        @TestMetadata("kt1358.kt")
        public void testKt1358() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt1358.kt");
        }

        @Test
        @TestMetadata("kt2320.kt")
        public void testKt2320() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2320.kt");
        }

        @Test
        @TestMetadata("kt2484.kt")
        public void testKt2484() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2484.kt");
        }

        @Test
        @TestMetadata("kt2514.kt")
        public void testKt2514() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2514.kt");
        }

        @Test
        @TestMetadata("kt2588.kt")
        public void testKt2588() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt2588.kt");
        }

        @Test
        @TestMetadata("kt3038.kt")
        public void testKt3038() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3038.kt");
        }

        @Test
        @TestMetadata("kt3150.kt")
        public void testKt3150() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3150.kt");
        }

        @Test
        @TestMetadata("kt3174.kt")
        public void testKt3174() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3174.kt");
        }

        @Test
        @TestMetadata("kt32106.kt")
        public void testKt32106() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt32106.kt");
        }

        @Test
        @TestMetadata("kt32250.kt")
        public void testKt32250() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt32250.kt");
        }

        @Test
        @TestMetadata("kt3344.kt")
        public void testKt3344() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3344.kt");
        }

        @Test
        @TestMetadata("kt3496.kt")
        public void testKt3496() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3496.kt");
        }

        @Test
        @TestMetadata("kt3559.kt")
        public void testKt3559() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt3559.kt");
        }

        @Test
        @TestMetadata("kt35844.kt")
        public void testKt35844() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt35844.kt");
        }

        @Test
        @TestMetadata("kt37043.kt")
        public void testKt37043() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt37043.kt");
        }

        @Test
        @TestMetadata("kt37043_2.kt")
        public void testKt37043_2() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt37043_2.kt");
        }

        @Test
        @TestMetadata("kt37419.kt")
        public void testKt37419() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt37419.kt");
        }

        @Test
        @TestMetadata("kt37650.kt")
        public void testKt37650() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt37650.kt");
        }

        @Test
        @TestMetadata("kt38549.kt")
        public void testKt38549() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt38549.kt");
        }

        @Test
        @TestMetadata("kt38691.kt")
        public void testKt38691() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt38691.kt");
        }

        @Test
        @TestMetadata("kt41386.kt")
        public void testKt41386() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt41386.kt");
        }

        @Test
        @TestMetadata("kt41394.kt")
        public void testKt41394() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt41394.kt");
        }

        @Test
        @TestMetadata("kt44440.kt")
        public void testKt44440() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt44440.kt");
        }

        @Test
        @TestMetadata("kt47941.kt")
        public void testKt47941() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt47941.kt");
        }

        @Test
        @TestMetadata("kt8132.kt")
        public void testKt8132() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt8132.kt");
        }

        @Test
        @TestMetadata("kt9461.kt")
        public void testKt9461() {
          runTest("compiler/testData/diagnostics/tests/inference/regressions/kt9461.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/substitutions")
      @TestDataPath("$PROJECT_ROOT")
      public class Substitutions {
        @Test
        @TestMetadata("delegationAndInference.kt")
        public void testDelegationAndInference() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/delegationAndInference.kt");
        }

        @Test
        @TestMetadata("kt32189returnTypeWithTypealiasSubtitution.kt")
        public void testKt32189returnTypeWithTypealiasSubtitution() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/kt32189returnTypeWithTypealiasSubtitution.kt");
        }

        @Test
        @TestMetadata("kt6081SubstituteIntoClassCorrectly.kt")
        public void testKt6081SubstituteIntoClassCorrectly() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/kt6081SubstituteIntoClassCorrectly.kt");
        }

        @Test
        @TestMetadata("substitutionOfTypeEnhancement.kt")
        public void testSubstitutionOfTypeEnhancement() {
          runTest("compiler/testData/diagnostics/tests/inference/substitutions/substitutionOfTypeEnhancement.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/upperBounds")
      @TestDataPath("$PROJECT_ROOT")
      public class UpperBounds {
        @Test
        @TestMetadata("kt2856.kt")
        public void testKt2856() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/kt2856.kt");
        }

        @Test
        @TestMetadata("nonNullUpperBound.kt")
        public void testNonNullUpperBound() {
          runTest("compiler/testData/diagnostics/tests/inference/upperBounds/nonNullUpperBound.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inline")
    @TestDataPath("$PROJECT_ROOT")
    public class Inline {
      @Test
      @TestMetadata("default.kt")
      public void testDefault() {
        runTest("compiler/testData/diagnostics/tests/inline/default.kt");
      }

      @Test
      @TestMetadata("inlineReified.kt")
      public void testInlineReified() {
        runTest("compiler/testData/diagnostics/tests/inline/inlineReified.kt");
      }

      @Test
      @TestMetadata("inlinedReturnInBranch.kt")
      public void testInlinedReturnInBranch() {
        runTest("compiler/testData/diagnostics/tests/inline/inlinedReturnInBranch.kt");
      }

      @Test
      @TestMetadata("publishedApiSubstitutionOverride.kt")
      public void testPublishedApiSubstitutionOverride() {
        runTest("compiler/testData/diagnostics/tests/inline/publishedApiSubstitutionOverride.kt");
      }

      @Test
      @TestMetadata("recursiveTypeInPrivateInlineFunction.kt")
      public void testRecursiveTypeInPrivateInlineFunction() {
        runTest("compiler/testData/diagnostics/tests/inline/recursiveTypeInPrivateInlineFunction.kt");
      }

      @Test
      @TestMetadata("valueClasses.kt")
      public void testValueClasses() {
        runTest("compiler/testData/diagnostics/tests/inline/valueClasses.kt");
      }

      @Test
      @TestMetadata("valueOfKFunctionTypeAsArgumentOfInlineFunction.kt")
      public void testValueOfKFunctionTypeAsArgumentOfInlineFunction() {
        runTest("compiler/testData/diagnostics/tests/inline/valueOfKFunctionTypeAsArgumentOfInlineFunction.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue")
      @TestDataPath("$PROJECT_ROOT")
      public class NonLocalBreakContinue {
        @Test
        @TestMetadata("inlineExtensionFunction.kt")
        public void testInlineExtensionFunction() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/inlineExtensionFunction.kt");
        }

        @Test
        @TestMetadata("lambdaWithReceiver.kt")
        public void testLambdaWithReceiver() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/lambdaWithReceiver.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns")
      @TestDataPath("$PROJECT_ROOT")
      public class NonLocalReturns {
        @Test
        @TestMetadata("explicitReturnType.kt")
        public void testExplicitReturnType() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/explicitReturnType.kt");
        }

        @Test
        @TestMetadata("fromOnlyLocal.kt")
        public void testFromOnlyLocal() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/fromOnlyLocal.kt");
        }

        @Test
        @TestMetadata("inlineLambda.kt")
        public void testInlineLambda() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/inlineLambda.kt");
        }

        @Test
        @TestMetadata("nestedNonLocals.kt")
        public void testNestedNonLocals() {
          runTest("compiler/testData/diagnostics/tests/inline/nonLocalReturns/nestedNonLocals.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember")
      @TestDataPath("$PROJECT_ROOT")
      public class NonPublicMember {
        @Test
        @TestMetadata("enumMemberInAnnotation.kt")
        public void testEnumMemberInAnnotation() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/enumMemberInAnnotation.kt");
        }

        @Test
        @TestMetadata("inAnnotation.kt")
        public void testInAnnotation() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inAnnotation.kt");
        }

        @Test
        @TestMetadata("inNonPublicInnerClass.kt")
        public void testInNonPublicInnerClass() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicInnerClass.kt");
        }

        @Test
        @TestMetadata("localClass.kt")
        public void testLocalClass() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass.kt");
        }

        @Test
        @TestMetadata("protectedInlineInsideInternal.kt")
        public void testProtectedInlineInsideInternal() {
          runTest("compiler/testData/diagnostics/tests/inline/nonPublicMember/protectedInlineInsideInternal.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions")
      @TestDataPath("$PROJECT_ROOT")
      public class UnaryExpressions {
        @Test
        @TestMetadata("notOnCall.kt")
        public void testNotOnCall() {
          runTest("compiler/testData/diagnostics/tests/inline/unaryExpressions/notOnCall.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
      @Test
      @TestMetadata("functionsJvmSignaturesConflictOnInheritance.kt")
      public void testFunctionsJvmSignaturesConflictOnInheritance() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/functionsJvmSignaturesConflictOnInheritance.kt");
      }

      @Test
      @TestMetadata("genericInlineClass.kt")
      public void testGenericInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/genericInlineClass.kt");
      }

      @Test
      @TestMetadata("inlineClassConstructorParameterWithDefaultValue.kt")
      public void testInlineClassConstructorParameterWithDefaultValue() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassConstructorParameterWithDefaultValue.kt");
      }

      @Test
      @TestMetadata("inlineClassDeprecated.kt")
      public void testInlineClassDeprecated() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassDeprecated.kt");
      }

      @Test
      @TestMetadata("inlineClassImplementsCollection.kt")
      public void testInlineClassImplementsCollection() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/inlineClassImplementsCollection.kt");
      }

      @Test
      @TestMetadata("presenceOfInitializerBlockInsideInlineClass.kt")
      public void testPresenceOfInitializerBlockInsideInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/presenceOfInitializerBlockInsideInlineClass.kt");
      }

      @Test
      @TestMetadata("presenceOfPublicPrimaryConstructorForInlineClass.kt")
      public void testPresenceOfPublicPrimaryConstructorForInlineClass() {
        runTest("compiler/testData/diagnostics/tests/inlineClasses/presenceOfPublicPrimaryConstructorForInlineClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inner")
    @TestDataPath("$PROJECT_ROOT")
    public class Inner {
      @Test
      @TestMetadata("callingOuterGenericClassConstructorWithSelfTypes.kt")
      public void testCallingOuterGenericClassConstructorWithSelfTypes() {
        runTest("compiler/testData/diagnostics/tests/inner/callingOuterGenericClassConstructorWithSelfTypes.kt");
      }

      @Test
      @TestMetadata("callingOuterGenericClassConstructorWithSelfTypesInitial.kt")
      public void testCallingOuterGenericClassConstructorWithSelfTypesInitial() {
        runTest("compiler/testData/diagnostics/tests/inner/callingOuterGenericClassConstructorWithSelfTypesInitial.kt");
      }

      @Test
      @TestMetadata("enumEntries.kt")
      public void testEnumEntries() {
        runTest("compiler/testData/diagnostics/tests/inner/enumEntries.kt");
      }

      @Test
      @TestMetadata("extensionLambdaInsideNestedClass.kt")
      public void testExtensionLambdaInsideNestedClass() {
        runTest("compiler/testData/diagnostics/tests/inner/extensionLambdaInsideNestedClass.kt");
      }

      @Test
      @TestMetadata("innerClassInEnumEntryClassMemberResolve.kt")
      public void testInnerClassInEnumEntryClassMemberResolve() {
        runTest("compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClassMemberResolve.kt");
      }

      @Test
      @TestMetadata("InnerClassNameClash.kt")
      public void testInnerClassNameClash() {
        runTest("compiler/testData/diagnostics/tests/inner/InnerClassNameClash.kt");
      }

      @Test
      @TestMetadata("innerClassesInStaticParameters.kt")
      public void testInnerClassesInStaticParameters() {
        runTest("compiler/testData/diagnostics/tests/inner/innerClassesInStaticParameters.kt");
      }

      @Test
      @TestMetadata("localClass.kt")
      public void testLocalClass() {
        runTest("compiler/testData/diagnostics/tests/inner/localClass.kt");
      }

      @Test
      @TestMetadata("localThisSuper.kt")
      public void testLocalThisSuper() {
        runTest("compiler/testData/diagnostics/tests/inner/localThisSuper.kt");
      }

      @Test
      @TestMetadata("nestedClassExtendsOuter.kt")
      public void testNestedClassExtendsOuter() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuter.kt");
      }

      @Test
      @TestMetadata("nestedClassExtendsOuterGeneric.kt")
      public void testNestedClassExtendsOuterGeneric() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassExtendsOuterGeneric.kt");
      }

      @Test
      @TestMetadata("nestedClassInObject.kt")
      public void testNestedClassInObject() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassInObject.kt");
      }

      @Test
      @TestMetadata("nestedClassTypeParameterNameCollision.kt")
      public void testNestedClassTypeParameterNameCollision() {
        runTest("compiler/testData/diagnostics/tests/inner/nestedClassTypeParameterNameCollision.kt");
      }

      @Test
      @TestMetadata("outerProtectedMember.kt")
      public void testOuterProtectedMember() {
        runTest("compiler/testData/diagnostics/tests/inner/outerProtectedMember.kt");
      }

      @Test
      @TestMetadata("resolvePackageClassInObjects.kt")
      public void testResolvePackageClassInObjects() {
        runTest("compiler/testData/diagnostics/tests/inner/resolvePackageClassInObjects.kt");
      }

      @Test
      @TestMetadata("selfAnnotationForClassObject.kt")
      public void testSelfAnnotationForClassObject() {
        runTest("compiler/testData/diagnostics/tests/inner/selfAnnotationForClassObject.kt");
      }

      @Test
      @TestMetadata("starProjectedInnerType.kt")
      public void testStarProjectedInnerType() {
        runTest("compiler/testData/diagnostics/tests/inner/starProjectedInnerType.kt");
      }

      @Test
      @TestMetadata("traits.kt")
      public void testTraits() {
        runTest("compiler/testData/diagnostics/tests/inner/traits.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression")
      @TestDataPath("$PROJECT_ROOT")
      public class QualifiedExpression {
        @Test
        @TestMetadata("classObjectOfNestedClass.kt")
        public void testClassObjectOfNestedClass() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/classObjectOfNestedClass.kt");
        }

        @Test
        @TestMetadata("dataLocalVariable.kt")
        public void testDataLocalVariable() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/dataLocalVariable.kt");
        }

        @Test
        @TestMetadata("enumConstant.kt")
        public void testEnumConstant() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/enumConstant.kt");
        }

        @Test
        @TestMetadata("importNestedClass.kt")
        public void testImportNestedClass() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/importNestedClass.kt");
        }

        @Test
        @TestMetadata("nestedClassInPackage.kt")
        public void testNestedClassInPackage() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedClassInPackage.kt");
        }

        @Test
        @TestMetadata("nestedEnumConstant.kt")
        public void testNestedEnumConstant() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedEnumConstant.kt");
        }

        @Test
        @TestMetadata("nestedObjects.kt")
        public void testNestedObjects() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/nestedObjects.kt");
        }

        @Test
        @TestMetadata("typePosition.kt")
        public void testTypePosition() {
          runTest("compiler/testData/diagnostics/tests/inner/qualifiedExpression/typePosition.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/integerLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class IntegerLiterals {
      @Test
      @TestMetadata("complexMapping.kt")
      public void testComplexMapping() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/complexMapping.kt");
      }

      @Test
      @TestMetadata("literalInCompletedGeneric.kt")
      public void testLiteralInCompletedGeneric() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/literalInCompletedGeneric.kt");
      }

      @Test
      @TestMetadata("literalsInInference.kt")
      public void testLiteralsInInference() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/literalsInInference.kt");
      }

      @Test
      @TestMetadata("sortedBy.kt")
      public void testSortedBy() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/sortedBy.kt");
      }

      @Test
      @TestMetadata("typealiasOnLong.kt")
      public void testTypealiasOnLong() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/typealiasOnLong.kt");
      }

      @Test
      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("compiler/testData/diagnostics/tests/integerLiterals/vararg.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/j+k")
    @TestDataPath("$PROJECT_ROOT")
    public class J_k {
      @Test
      @TestMetadata("annotationWithArgumentsMissingDependencies.kt")
      public void testAnnotationWithArgumentsMissingDependencies() {
        runTest("compiler/testData/diagnostics/tests/j+k/annotationWithArgumentsMissingDependencies.kt");
      }

      @Test
      @TestMetadata("annotationsInheritance.kt")
      public void testAnnotationsInheritance() {
        runTest("compiler/testData/diagnostics/tests/j+k/annotationsInheritance.kt");
      }

      @Test
      @TestMetadata("callableReferencesStaticMemberClash.kt")
      public void testCallableReferencesStaticMemberClash() {
        runTest("compiler/testData/diagnostics/tests/j+k/callableReferencesStaticMemberClash.kt");
      }

      @Test
      @TestMetadata("canDeclareIfSamAdapterIsInherited.kt")
      public void testCanDeclareIfSamAdapterIsInherited() {
        runTest("compiler/testData/diagnostics/tests/j+k/canDeclareIfSamAdapterIsInherited.kt");
      }

      @Test
      @TestMetadata("complexGenericOverride.kt")
      public void testComplexGenericOverride() {
        runTest("compiler/testData/diagnostics/tests/j+k/complexGenericOverride.kt");
      }

      @Test
      @TestMetadata("computeIfAbsentConcurrent.kt")
      public void testComputeIfAbsentConcurrent() {
        runTest("compiler/testData/diagnostics/tests/j+k/computeIfAbsentConcurrent.kt");
      }

      @Test
      @TestMetadata("contravariantIterable.kt")
      public void testContravariantIterable() {
        runTest("compiler/testData/diagnostics/tests/j+k/contravariantIterable.kt");
      }

      @Test
      @TestMetadata("defaultMethods.kt")
      public void testDefaultMethods() {
        runTest("compiler/testData/diagnostics/tests/j+k/defaultMethods.kt");
      }

      @Test
      @TestMetadata("defaultMethodsIndirectInheritance.kt")
      public void testDefaultMethodsIndirectInheritance() {
        runTest("compiler/testData/diagnostics/tests/j+k/defaultMethodsIndirectInheritance.kt");
      }

      @Test
      @TestMetadata("enumGetOrdinal.kt")
      public void testEnumGetOrdinal() {
        runTest("compiler/testData/diagnostics/tests/j+k/enumGetOrdinal.kt");
      }

      @Test
      @TestMetadata("exceptionMessage.kt")
      public void testExceptionMessage() {
        runTest("compiler/testData/diagnostics/tests/j+k/exceptionMessage.kt");
      }

      @Test
      @TestMetadata("fieldOverridesField.kt")
      public void testFieldOverridesField() {
        runTest("compiler/testData/diagnostics/tests/j+k/fieldOverridesField.kt");
      }

      @Test
      @TestMetadata("fieldOverridesNothing.kt")
      public void testFieldOverridesNothing() {
        runTest("compiler/testData/diagnostics/tests/j+k/fieldOverridesNothing.kt");
      }

      @Test
      @TestMetadata("fileJvmNameSameAsClass.kt")
      public void testFileJvmNameSameAsClass() {
        runTest("compiler/testData/diagnostics/tests/j+k/fileJvmNameSameAsClass.kt");
      }

      @Test
      @TestMetadata("flexibleNothing.kt")
      public void testFlexibleNothing() {
        runTest("compiler/testData/diagnostics/tests/j+k/flexibleNothing.kt");
      }

      @Test
      @TestMetadata("futureGetDnnRepresentation.kt")
      public void testFutureGetDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/j+k/futureGetDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("GenericsInSupertypes.kt")
      public void testGenericsInSupertypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/GenericsInSupertypes.kt");
      }

      @Test
      @TestMetadata("inheritAbstractSamAdapter.kt")
      public void testInheritAbstractSamAdapter() {
        runTest("compiler/testData/diagnostics/tests/j+k/inheritAbstractSamAdapter.kt");
      }

      @Test
      @TestMetadata("InheritedGenericFunction.kt")
      public void testInheritedGenericFunction() {
        runTest("compiler/testData/diagnostics/tests/j+k/InheritedGenericFunction.kt");
      }

      @Test
      @TestMetadata("InnerClassFromJava.kt")
      public void testInnerClassFromJava() {
        runTest("compiler/testData/diagnostics/tests/j+k/InnerClassFromJava.kt");
      }

      @Test
      @TestMetadata("innerLightClass.kt")
      public void testInnerLightClass() {
        runTest("compiler/testData/diagnostics/tests/j+k/innerLightClass.kt");
      }

      @Test
      @TestMetadata("integerNotNullable.kt")
      public void testIntegerNotNullable() {
        runTest("compiler/testData/diagnostics/tests/j+k/integerNotNullable.kt");
      }

      @Test
      @TestMetadata("internalClash2.kt")
      public void testInternalClash2() {
        runTest("compiler/testData/diagnostics/tests/j+k/internalClash2.kt");
      }

      @Test
      @TestMetadata("intersectionWithJavaVoidNothing.kt")
      public void testIntersectionWithJavaVoidNothing() {
        runTest("compiler/testData/diagnostics/tests/j+k/intersectionWithJavaVoidNothing.kt");
      }

      @Test
      @TestMetadata("javaStaticImport.kt")
      public void testJavaStaticImport() {
        runTest("compiler/testData/diagnostics/tests/j+k/javaStaticImport.kt");
      }

      @Test
      @TestMetadata("javaSupertypeNameDisambiguation.kt")
      public void testJavaSupertypeNameDisambiguation() {
        runTest("compiler/testData/diagnostics/tests/j+k/javaSupertypeNameDisambiguation.kt");
      }

      @Test
      @TestMetadata("jkjPrivateProperty.kt")
      public void testJkjPrivateProperty() {
        runTest("compiler/testData/diagnostics/tests/j+k/jkjPrivateProperty.kt");
      }

      @Test
      @TestMetadata("KJKInheritance.kt")
      public void testKJKInheritance() {
        runTest("compiler/testData/diagnostics/tests/j+k/KJKInheritance.kt");
      }

      @Test
      @TestMetadata("KJKInheritanceGeneric.kt")
      public void testKJKInheritanceGeneric() {
        runTest("compiler/testData/diagnostics/tests/j+k/KJKInheritanceGeneric.kt");
      }

      @Test
      @TestMetadata("kjkimplicitTypesCrash.kt")
      public void testKjkimplicitTypesCrash() {
        runTest("compiler/testData/diagnostics/tests/j+k/kjkimplicitTypesCrash.kt");
      }

      @Test
      @TestMetadata("kt1402.kt")
      public void testKt1402() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt1402.kt");
      }

      @Test
      @TestMetadata("kt1431.kt")
      public void testKt1431() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt1431.kt");
      }

      @Test
      @TestMetadata("kt1730_implementCharSequence.kt")
      public void testKt1730_implementCharSequence() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt1730_implementCharSequence.kt");
      }

      @Test
      @TestMetadata("kt2152.kt")
      public void testKt2152() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2152.kt");
      }

      @Test
      @TestMetadata("kt2606.kt")
      public void testKt2606() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2606.kt");
      }

      @Test
      @TestMetadata("kt2890.kt")
      public void testKt2890() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt2890.kt");
      }

      @Test
      @TestMetadata("kt3307.kt")
      public void testKt3307() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt3307.kt");
      }

      @Test
      @TestMetadata("kt3311.kt")
      public void testKt3311() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt3311.kt");
      }

      @Test
      @TestMetadata("kt60580.kt")
      public void testKt60580() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt60580.kt");
      }

      @Test
      @TestMetadata("kt62197.kt")
      public void testKt62197() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt62197.kt");
      }

      @Test
      @TestMetadata("kt7523.kt")
      public void testKt7523() {
        runTest("compiler/testData/diagnostics/tests/j+k/kt7523.kt");
      }

      @Test
      @TestMetadata("ktij24272.kt")
      public void testKtij24272() {
        runTest("compiler/testData/diagnostics/tests/j+k/ktij24272.kt");
      }

      @Test
      @TestMetadata("matchers.kt")
      public void testMatchers() {
        runTest("compiler/testData/diagnostics/tests/j+k/matchers.kt");
      }

      @Test
      @TestMetadata("mutableIterator.kt")
      public void testMutableIterator() {
        runTest("compiler/testData/diagnostics/tests/j+k/mutableIterator.kt");
      }

      @Test
      @TestMetadata("nullForOptionalOrElse.kt")
      public void testNullForOptionalOrElse() {
        runTest("compiler/testData/diagnostics/tests/j+k/nullForOptionalOrElse.kt");
      }

      @Test
      @TestMetadata("nullableRawTypeWithFlexibleArguments.kt")
      public void testNullableRawTypeWithFlexibleArguments() {
        runTest("compiler/testData/diagnostics/tests/j+k/nullableRawTypeWithFlexibleArguments.kt");
      }

      @Test
      @TestMetadata("overrideRawType.kt")
      public void testOverrideRawType() {
        runTest("compiler/testData/diagnostics/tests/j+k/overrideRawType.kt");
      }

      @Test
      @TestMetadata("OverrideVararg.kt")
      public void testOverrideVararg() {
        runTest("compiler/testData/diagnostics/tests/j+k/OverrideVararg.kt");
      }

      @Test
      @TestMetadata("overrideWithErasure.kt")
      public void testOverrideWithErasure() {
        runTest("compiler/testData/diagnostics/tests/j+k/overrideWithErasure.kt");
      }

      @Test
      @TestMetadata("overrideWithSamAndTypeParameter.kt")
      public void testOverrideWithSamAndTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/j+k/overrideWithSamAndTypeParameter.kt");
      }

      @Test
      @TestMetadata("overrideWithTypeParameterReverse.kt")
      public void testOverrideWithTypeParameterReverse() {
        runTest("compiler/testData/diagnostics/tests/j+k/overrideWithTypeParameterReverse.kt");
      }

      @Test
      @TestMetadata("overrideWithTypeParameterReverseAfter.kt")
      public void testOverrideWithTypeParameterReverseAfter() {
        runTest("compiler/testData/diagnostics/tests/j+k/overrideWithTypeParameterReverseAfter.kt");
      }

      @Test
      @TestMetadata("packagePrivateClassStaticMember.kt")
      public void testPackagePrivateClassStaticMember() {
        runTest("compiler/testData/diagnostics/tests/j+k/packagePrivateClassStaticMember.kt");
      }

      @Test
      @TestMetadata("privateFieldOverridesNothing.kt")
      public void testPrivateFieldOverridesNothing() {
        runTest("compiler/testData/diagnostics/tests/j+k/privateFieldOverridesNothing.kt");
      }

      @Test
      @TestMetadata("propagateFlexibleTypeToAnonymousFunction.kt")
      public void testPropagateFlexibleTypeToAnonymousFunction() {
        runTest("compiler/testData/diagnostics/tests/j+k/propagateFlexibleTypeToAnonymousFunction.kt");
      }

      @Test
      @TestMetadata("protectedStaticSamePackage.kt")
      public void testProtectedStaticSamePackage() {
        runTest("compiler/testData/diagnostics/tests/j+k/protectedStaticSamePackage.kt");
      }

      @Test
      @TestMetadata("rawOverride.kt")
      public void testRawOverride() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawOverride.kt");
      }

      @Test
      @TestMetadata("rawTypeCrash.kt")
      public void testRawTypeCrash() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawTypeCrash.kt");
      }

      @Test
      @TestMetadata("rawTypeScope.kt")
      public void testRawTypeScope() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawTypeScope.kt");
      }

      @Test
      @TestMetadata("rawTypesFromCapturedOriginal.kt")
      public void testRawTypesFromCapturedOriginal() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawTypesFromCapturedOriginal.kt");
      }

      @Test
      @TestMetadata("rawUpperBounds.kt")
      public void testRawUpperBounds() {
        runTest("compiler/testData/diagnostics/tests/j+k/rawUpperBounds.kt");
      }

      @Test
      @TestMetadata("recursiveRawUpperBound.kt")
      public void testRecursiveRawUpperBound() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursiveRawUpperBound.kt");
      }

      @Test
      @TestMetadata("recursiveSelfTypes.kt")
      public void testRecursiveSelfTypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/recursiveSelfTypes.kt");
      }

      @Test
      @TestMetadata("runnableOrCallable.kt")
      public void testRunnableOrCallable() {
        runTest("compiler/testData/diagnostics/tests/j+k/runnableOrCallable.kt");
      }

      @Test
      @TestMetadata("safeCallDefinitelyNotNull.kt")
      public void testSafeCallDefinitelyNotNull() {
        runTest("compiler/testData/diagnostics/tests/j+k/safeCallDefinitelyNotNull.kt");
      }

      @Test
      @TestMetadata("samInConstructorWithGenerics.kt")
      public void testSamInConstructorWithGenerics() {
        runTest("compiler/testData/diagnostics/tests/j+k/samInConstructorWithGenerics.kt");
      }

      @Test
      @TestMetadata("shadowingPrimitiveStaticField.kt")
      public void testShadowingPrimitiveStaticField() {
        runTest("compiler/testData/diagnostics/tests/j+k/shadowingPrimitiveStaticField.kt");
      }

      @Test
      @TestMetadata("Simple.kt")
      public void testSimple() {
        runTest("compiler/testData/diagnostics/tests/j+k/Simple.kt");
      }

      @Test
      @TestMetadata("specialBridges.kt")
      public void testSpecialBridges() {
        runTest("compiler/testData/diagnostics/tests/j+k/specialBridges.kt");
      }

      @Test
      @TestMetadata("staticImportViaInheritance.kt")
      public void testStaticImportViaInheritance() {
        runTest("compiler/testData/diagnostics/tests/j+k/staticImportViaInheritance.kt");
      }

      @Test
      @TestMetadata("StaticMembersFromSuperclasses.kt")
      public void testStaticMembersFromSuperclasses() {
        runTest("compiler/testData/diagnostics/tests/j+k/StaticMembersFromSuperclasses.kt");
      }

      @Test
      @TestMetadata("staticMethodInClass.kt")
      public void testStaticMethodInClass() {
        runTest("compiler/testData/diagnostics/tests/j+k/staticMethodInClass.kt");
      }

      @Test
      @TestMetadata("SupertypeArgumentsNullability-SpecialTypes.kt")
      public void testSupertypeArgumentsNullability_SpecialTypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-SpecialTypes.kt");
      }

      @Test
      @TestMetadata("SupertypeArgumentsNullability-UserTypes.kt")
      public void testSupertypeArgumentsNullability_UserTypes() {
        runTest("compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt");
      }

      @Test
      @TestMetadata("supertypeUsesNested.kt")
      public void testSupertypeUsesNested() {
        runTest("compiler/testData/diagnostics/tests/j+k/supertypeUsesNested.kt");
      }

      @Test
      @TestMetadata("syntheticAssignmentInLambdaExpressionBody.kt")
      public void testSyntheticAssignmentInLambdaExpressionBody() {
        runTest("compiler/testData/diagnostics/tests/j+k/syntheticAssignmentInLambdaExpressionBody.kt");
      }

      @Test
      @TestMetadata("syntheticPropertyOverridden.kt")
      public void testSyntheticPropertyOverridden() {
        runTest("compiler/testData/diagnostics/tests/j+k/syntheticPropertyOverridden.kt");
      }

      @Test
      @TestMetadata("throwableConstructor.kt")
      public void testThrowableConstructor() {
        runTest("compiler/testData/diagnostics/tests/j+k/throwableConstructor.kt");
      }

      @Test
      @TestMetadata("traitDefaultCall.kt")
      public void testTraitDefaultCall() {
        runTest("compiler/testData/diagnostics/tests/j+k/traitDefaultCall.kt");
      }

      @Test
      @TestMetadata("typeAliasWithSamConstructor.kt")
      public void testTypeAliasWithSamConstructor() {
        runTest("compiler/testData/diagnostics/tests/j+k/typeAliasWithSamConstructor.kt");
      }

      @Test
      @TestMetadata("typeFromJavaGenericDnnRepresentation.kt")
      public void testTypeFromJavaGenericDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/j+k/typeFromJavaGenericDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("UnboxingNulls.kt")
      public void testUnboxingNulls() {
        runTest("compiler/testData/diagnostics/tests/j+k/UnboxingNulls.kt");
      }

      @Test
      @TestMetadata("withTestConnection.kt")
      public void testWithTestConnection() {
        runTest("compiler/testData/diagnostics/tests/j+k/withTestConnection.kt");
      }

      @Test
      @TestMetadata("withTestConnection2.kt")
      public void testWithTestConnection2() {
        runTest("compiler/testData/diagnostics/tests/j+k/withTestConnection2.kt");
      }

      @Test
      @TestMetadata("withTestConnection3.kt")
      public void testWithTestConnection3() {
        runTest("compiler/testData/diagnostics/tests/j+k/withTestConnection3.kt");
      }

      @Test
      @TestMetadata("withTestConnection4.kt")
      public void testWithTestConnection4() {
        runTest("compiler/testData/diagnostics/tests/j+k/withTestConnection4.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/collectionOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class CollectionOverrides {
        @Test
        @TestMetadata("charAtAndOverloadWithoutExplicitOverride.kt")
        public void testCharAtAndOverloadWithoutExplicitOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/charAtAndOverloadWithoutExplicitOverride.kt");
        }

        @Test
        @TestMetadata("charBuffer.kt")
        public void testCharBuffer() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/charBuffer.kt");
        }

        @Test
        @TestMetadata("collectionStringImpl.kt")
        public void testCollectionStringImpl() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/collectionStringImpl.kt");
        }

        @Test
        @TestMetadata("getCharSequence.kt")
        public void testGetCharSequence() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/getCharSequence.kt");
        }

        @Test
        @TestMetadata("intersectionWithMappedSignature.kt")
        public void testIntersectionWithMappedSignature() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/intersectionWithMappedSignature.kt");
        }

        @Test
        @TestMetadata("irrelevantCharAtAbstract.kt")
        public void testIrrelevantCharAtAbstract() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantCharAtAbstract.kt");
        }

        @Test
        @TestMetadata("irrelevantImplCharSequence.kt")
        public void testIrrelevantImplCharSequence() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplCharSequence.kt");
        }

        @Test
        @TestMetadata("irrelevantMapGetAbstract.kt")
        public void testIrrelevantMapGetAbstract() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantMapGetAbstract.kt");
        }

        @Test
        @TestMetadata("mapGetOverride.kt")
        public void testMapGetOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/mapGetOverride.kt");
        }

        @Test
        @TestMetadata("mapMethodsImplementedInJava.kt")
        public void testMapMethodsImplementedInJava() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/mapMethodsImplementedInJava.kt");
        }

        @Test
        @TestMetadata("removeAt.kt")
        public void testRemoveAt() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/removeAt.kt");
        }

        @Test
        @TestMetadata("sizeFromKotlinOverriddenInJava.kt")
        public void testSizeFromKotlinOverriddenInJava() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/sizeFromKotlinOverriddenInJava.kt");
        }

        @Test
        @TestMetadata("twoInheritedContains.kt")
        public void testTwoInheritedContains() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/twoInheritedContains.kt");
        }

        @Test
        @TestMetadata("weirdCharBuffers.kt")
        public void testWeirdCharBuffers() {
          runTest("compiler/testData/diagnostics/tests/j+k/collectionOverrides/weirdCharBuffers.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/deprecations")
      @TestDataPath("$PROJECT_ROOT")
      public class Deprecations {
        @Test
        @TestMetadata("doNotMarkWriteIfGetterDeprecated.kt")
        public void testDoNotMarkWriteIfGetterDeprecated() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/doNotMarkWriteIfGetterDeprecated.kt");
        }

        @Test
        @TestMetadata("forFakeOverrides.kt")
        public void testForFakeOverrides() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/forFakeOverrides.kt");
        }

        @Test
        @TestMetadata("forMixedOverride.kt")
        public void testForMixedOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/forMixedOverride.kt");
        }

        @Test
        @TestMetadata("forOverrides.kt")
        public void testForOverrides() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/forOverrides.kt");
        }

        @Test
        @TestMetadata("hiddenJavaClass.kt")
        public void testHiddenJavaClass() {
          runTest("compiler/testData/diagnostics/tests/j+k/deprecations/hiddenJavaClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/genericConstructor")
      @TestDataPath("$PROJECT_ROOT")
      public class GenericConstructor {
        @Test
        @TestMetadata("selfTypes.kt")
        public void testSelfTypes() {
          runTest("compiler/testData/diagnostics/tests/j+k/genericConstructor/selfTypes.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/primitiveOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class PrimitiveOverrides {
        @Test
        @TestMetadata("kt11140.kt")
        public void testKt11140() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/kt11140.kt");
        }

        @Test
        @TestMetadata("removeAt.kt")
        public void testRemoveAt() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/removeAt.kt");
        }

        @Test
        @TestMetadata("specializedMap.kt")
        public void testSpecializedMap() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/specializedMap.kt");
        }

        @Test
        @TestMetadata("triangleWithFlexibleType.kt")
        public void testTriangleWithFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleType.kt");
        }

        @Test
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution.kt");
        }

        @Test
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution2.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution2() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution2.kt");
        }

        @Test
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution3.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution3() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution3.kt");
        }

        @Test
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution5.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution5() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution5.kt");
        }

        @Test
        @TestMetadata("triangleWithNullableType.kt")
        public void testTriangleWithNullableType() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithNullableType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/primitiveOverridesWithInlineClass")
      @TestDataPath("$PROJECT_ROOT")
      public class PrimitiveOverridesWithInlineClass {
        @Test
        @TestMetadata("inlineClassErasedToPrimitiveInt.kt")
        public void testInlineClassErasedToPrimitiveInt() {
          runTest("compiler/testData/diagnostics/tests/j+k/primitiveOverridesWithInlineClass/inlineClassErasedToPrimitiveInt.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/properties")
      @TestDataPath("$PROJECT_ROOT")
      public class Properties {
        @Test
        @TestMetadata("interface.kt")
        public void testInterface() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/interface.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinGetter_javaOrigin.kt")
        public void testSyntheticPropertyFromKotlinGetter_javaOrigin() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinGetter_javaOrigin.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinGetter_mixedOrigin_1.kt")
        public void testSyntheticPropertyFromKotlinGetter_mixedOrigin_1() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinGetter_mixedOrigin_1.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinGetter_mixedOrigin_2.kt")
        public void testSyntheticPropertyFromKotlinGetter_mixedOrigin_2() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinGetter_mixedOrigin_2.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlin_warning.kt")
        public void testSyntheticPropertyFromKotlin_warning() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlin_warning.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyThroughJava.kt")
        public void testSyntheticPropertyThroughJava() {
          runTest("compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyThroughJava.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/sam")
      @TestDataPath("$PROJECT_ROOT")
      public class Sam {
        @Test
        @TestMetadata("compatibilityResolveToOuterScopeForKotlinFunctions.kt")
        public void testCompatibilityResolveToOuterScopeForKotlinFunctions() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/compatibilityResolveToOuterScopeForKotlinFunctions.kt");
        }

        @Test
        @TestMetadata("conversionsWithNestedGenerics.kt")
        public void testConversionsWithNestedGenerics() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/conversionsWithNestedGenerics.kt");
        }

        @Test
        @TestMetadata("fakeOverrideFunctionForStaticSam.kt")
        public void testFakeOverrideFunctionForStaticSam() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/fakeOverrideFunctionForStaticSam.kt");
        }

        @Test
        @TestMetadata("inheritedStaticSam.kt")
        public void testInheritedStaticSam() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/inheritedStaticSam.kt");
        }

        @Test
        @TestMetadata("javaKotlinSamConflict.kt")
        public void testJavaKotlinSamConflict() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/javaKotlinSamConflict.kt");
        }

        @Test
        @TestMetadata("kt37920.kt")
        public void testKt37920() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/kt37920.kt");
        }

        @Test
        @TestMetadata("kt39630.kt")
        public void testKt39630() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/kt39630.kt");
        }

        @Test
        @TestMetadata("lambdaParameterRemainFlexible.kt")
        public void testLambdaParameterRemainFlexible() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/lambdaParameterRemainFlexible.kt");
        }

        @Test
        @TestMetadata("lambdaParameterRemainFlexibleRegularConstructor.kt")
        public void testLambdaParameterRemainFlexibleRegularConstructor() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/lambdaParameterRemainFlexibleRegularConstructor.kt");
        }

        @Test
        @TestMetadata("lambdaParameterRemainFlexibleRegularConstructorWithDnnRepresentation.kt")
        public void testLambdaParameterRemainFlexibleRegularConstructorWithDnnRepresentation() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/lambdaParameterRemainFlexibleRegularConstructorWithDnnRepresentation.kt");
        }

        @Test
        @TestMetadata("lambdaParameterRemainFlexibleWithDnnRepresentation.kt")
        public void testLambdaParameterRemainFlexibleWithDnnRepresentation() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/lambdaParameterRemainFlexibleWithDnnRepresentation.kt");
        }

        @Test
        @TestMetadata("recursiveSamsAndInvoke.kt")
        public void testRecursiveSamsAndInvoke() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/recursiveSamsAndInvoke.kt");
        }

        @Test
        @TestMetadata("runWithSamArgumentAndIfInside.kt")
        public void testRunWithSamArgumentAndIfInside() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/runWithSamArgumentAndIfInside.kt");
        }

        @Test
        @TestMetadata("samOnTypeParameter.kt")
        public void testSamOnTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/samOnTypeParameter.kt");
        }

        @Test
        @TestMetadata("staticSamFromImportWithStar.kt")
        public void testStaticSamFromImportWithStar() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/staticSamFromImportWithStar.kt");
        }

        @Test
        @TestMetadata("staticSamWithExplicitImport.kt")
        public void testStaticSamWithExplicitImport() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/staticSamWithExplicitImport.kt");
        }

        @Test
        @TestMetadata("typeInferenceOnSamAdapters.kt")
        public void testTypeInferenceOnSamAdapters() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/typeInferenceOnSamAdapters.kt");
        }

        @Test
        @TestMetadata("withDefaultMethods.kt")
        public void testWithDefaultMethods() {
          runTest("compiler/testData/diagnostics/tests/j+k/sam/withDefaultMethods.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/signatureAnnotations")
      @TestDataPath("$PROJECT_ROOT")
      public class SignatureAnnotations {
        @Test
        @TestMetadata("notNullVarargOverride.kt")
        public void testNotNullVarargOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/notNullVarargOverride.kt");
        }

        @Test
        @TestMetadata("nullableVarargOverride.kt")
        public void testNullableVarargOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/signatureAnnotations/nullableVarargOverride.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/specialBuiltIns")
      @TestDataPath("$PROJECT_ROOT")
      public class SpecialBuiltIns {
        @Test
        @TestMetadata("hashtableInheritance.kt")
        public void testHashtableInheritance() {
          runTest("compiler/testData/diagnostics/tests/j+k/specialBuiltIns/hashtableInheritance.kt");
        }

        @Test
        @TestMetadata("inheritanceThroughEmptyClass.kt")
        public void testInheritanceThroughEmptyClass() {
          runTest("compiler/testData/diagnostics/tests/j+k/specialBuiltIns/inheritanceThroughEmptyClass.kt");
        }

        @Test
        @TestMetadata("securityProvider.kt")
        public void testSecurityProvider() {
          runTest("compiler/testData/diagnostics/tests/j+k/specialBuiltIns/securityProvider.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/types")
      @TestDataPath("$PROJECT_ROOT")
      public class Types {
        @Test
        @TestMetadata("arrayList.kt")
        public void testArrayList() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/arrayList.kt");
        }

        @Test
        @TestMetadata("constantStaticStringField.kt")
        public void testConstantStaticStringField() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/constantStaticStringField.kt");
        }

        @Test
        @TestMetadata("newListMethodsNullabilityLinkedList20.kt")
        public void testNewListMethodsNullabilityLinkedList20() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/newListMethodsNullabilityLinkedList20.kt");
        }

        @Test
        @TestMetadata("newListMethodsNullabilityOverridesLinkedList20.kt")
        public void testNewListMethodsNullabilityOverridesLinkedList20() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/newListMethodsNullabilityOverridesLinkedList20.kt");
        }

        @Test
        @TestMetadata("returnCollection.kt")
        public void testReturnCollection() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/returnCollection.kt");
        }

        @Test
        @TestMetadata("shapeMismatchInCovariantPosition.kt")
        public void testShapeMismatchInCovariantPosition() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/shapeMismatchInCovariantPosition.kt");
        }

        @Test
        @TestMetadata("shapeMismatchInCovariantPositionGeneric.kt")
        public void testShapeMismatchInCovariantPositionGeneric() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/shapeMismatchInCovariantPositionGeneric.kt");
        }

        @Test
        @TestMetadata("typeParameter.kt")
        public void testTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/typeParameter.kt");
        }

        @Test
        @TestMetadata("upperBoundsCheckAgainstSelfTypeInJava.kt")
        public void testUpperBoundsCheckAgainstSelfTypeInJava() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/upperBoundsCheckAgainstSelfTypeInJava.kt");
        }

        @Test
        @TestMetadata("varargOverride.kt")
        public void testVarargOverride() {
          runTest("compiler/testData/diagnostics/tests/j+k/types/varargOverride.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/java8Overrides")
    @TestDataPath("$PROJECT_ROOT")
    public class Java8Overrides {
      @Test
      @TestMetadata("abstractFakeOverrideSuperCallOneMoreLevel.kt")
      public void testAbstractFakeOverrideSuperCallOneMoreLevel() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/abstractFakeOverrideSuperCallOneMoreLevel.kt");
      }

      @Test
      @TestMetadata("falseManyImplementations.kt")
      public void testFalseManyImplementations() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/falseManyImplementations.kt");
      }

      @Test
      @TestMetadata("notAMethodOfAny.kt")
      public void testNotAMethodOfAny() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/notAMethodOfAny.kt");
      }

      @Test
      @TestMetadata("singleRelevantDefault.kt")
      public void testSingleRelevantDefault() {
        runTest("compiler/testData/diagnostics/tests/java8Overrides/singleRelevantDefault.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/javac")
    @TestDataPath("$PROJECT_ROOT")
    public class Javac {
      @Test
      @TestMetadata("Annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/diagnostics/tests/javac/Annotations.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/fieldsResolution")
      @TestDataPath("$PROJECT_ROOT")
      public class FieldsResolution {
        @Test
        @TestMetadata("AsteriskStaticImportsAmbiguity.kt")
        public void testAsteriskStaticImportsAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/AsteriskStaticImportsAmbiguity.kt");
        }

        @Test
        @TestMetadata("BinaryInitializers.kt")
        public void testBinaryInitializers() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/BinaryInitializers.kt");
        }

        @Test
        @TestMetadata("ConstantByFqName.kt")
        public void testConstantByFqName() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/ConstantByFqName.kt");
        }

        @Test
        @TestMetadata("ConstantValues.kt")
        public void testConstantValues() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/ConstantValues.kt");
        }

        @Test
        @TestMetadata("ConstantValuesFromKtFile.kt")
        public void testConstantValuesFromKtFile() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/ConstantValuesFromKtFile.kt");
        }

        @Test
        @TestMetadata("FieldFromOuterClass.kt")
        public void testFieldFromOuterClass() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/FieldFromOuterClass.kt");
        }

        @Test
        @TestMetadata("InheritedField.kt")
        public void testInheritedField() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/InheritedField.kt");
        }

        @Test
        @TestMetadata("MultipleOuters.kt")
        public void testMultipleOuters() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/MultipleOuters.kt");
        }

        @Test
        @TestMetadata("ResolutionPriority.kt")
        public void testResolutionPriority() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/ResolutionPriority.kt");
        }

        @Test
        @TestMetadata("SameFieldInSupertypes.kt")
        public void testSameFieldInSupertypes() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/SameFieldInSupertypes.kt");
        }

        @Test
        @TestMetadata("StaticImport.kt")
        public void testStaticImport() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/StaticImport.kt");
        }

        @Test
        @TestMetadata("StaticImportsAmbiguity.kt")
        public void testStaticImportsAmbiguity() {
          runTest("compiler/testData/diagnostics/tests/javac/fieldsResolution/StaticImportsAmbiguity.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/imports")
      @TestDataPath("$PROJECT_ROOT")
      public class Imports {
        @Test
        @TestMetadata("AllUnderImportsLessPriority.kt")
        public void testAllUnderImportsLessPriority() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/AllUnderImportsLessPriority.kt");
        }

        @Test
        @TestMetadata("ClassImportsConflicting.kt")
        public void testClassImportsConflicting() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ClassImportsConflicting.kt");
        }

        @Test
        @TestMetadata("CurrentPackageAndAllUnderImport.kt")
        public void testCurrentPackageAndAllUnderImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/CurrentPackageAndAllUnderImport.kt");
        }

        @Test
        @TestMetadata("CurrentPackageAndExplicitImport.kt")
        public void testCurrentPackageAndExplicitImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/CurrentPackageAndExplicitImport.kt");
        }

        @Test
        @TestMetadata("CurrentPackageAndExplicitNestedImport.kt")
        public void testCurrentPackageAndExplicitNestedImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/CurrentPackageAndExplicitNestedImport.kt");
        }

        @Test
        @TestMetadata("CurrentPackageAndNestedAsteriskImport.kt")
        public void testCurrentPackageAndNestedAsteriskImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/CurrentPackageAndNestedAsteriskImport.kt");
        }

        @Test
        @TestMetadata("ImportGenericVsPackage.kt")
        public void testImportGenericVsPackage() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ImportGenericVsPackage.kt");
        }

        @Test
        @TestMetadata("ImportTwoTimes.kt")
        public void testImportTwoTimes() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ImportTwoTimes.kt");
        }

        @Test
        @TestMetadata("ImportTwoTimesStar.kt")
        public void testImportTwoTimesStar() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/ImportTwoTimesStar.kt");
        }

        @Test
        @TestMetadata("PackageExplicitAndStartImport.kt")
        public void testPackageExplicitAndStartImport() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/PackageExplicitAndStartImport.kt");
        }

        @Test
        @TestMetadata("TopLevelClassVsPackage.kt")
        public void testTopLevelClassVsPackage() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/TopLevelClassVsPackage.kt");
        }

        @Test
        @TestMetadata("TopLevelClassVsPackage2.kt")
        public void testTopLevelClassVsPackage2() {
          runTest("compiler/testData/diagnostics/tests/javac/imports/TopLevelClassVsPackage2.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/inheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class Inheritance {
        @Test
        @TestMetadata("IheritanceOfInner.kt")
        public void testIheritanceOfInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/IheritanceOfInner.kt");
        }

        @Test
        @TestMetadata("InheritanceWithKotlin.kt")
        public void testInheritanceWithKotlin() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritanceWithKotlin.kt");
        }

        @Test
        @TestMetadata("InheritanceWithKotlinClasses.kt")
        public void testInheritanceWithKotlinClasses() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritanceWithKotlinClasses.kt");
        }

        @Test
        @TestMetadata("InheritedInner.kt")
        public void testInheritedInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedInner.kt");
        }

        @Test
        @TestMetadata("InheritedInnerAndSupertypeWithSameName.kt")
        public void testInheritedInnerAndSupertypeWithSameName() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedInnerAndSupertypeWithSameName.kt");
        }

        @Test
        @TestMetadata("InheritedInnerUsageInInner.kt")
        public void testInheritedInnerUsageInInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedInnerUsageInInner.kt");
        }

        @Test
        @TestMetadata("InheritedKotlinInner.kt")
        public void testInheritedKotlinInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InheritedKotlinInner.kt");
        }

        @Test
        @TestMetadata("InnerAndInheritedInner.kt")
        public void testInnerAndInheritedInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/InnerAndInheritedInner.kt");
        }

        @Test
        @TestMetadata("ManyInheritedClasses.kt")
        public void testManyInheritedClasses() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/ManyInheritedClasses.kt");
        }

        @Test
        @TestMetadata("SameInnersInSupertypeAndSupertypesSupertype.kt")
        public void testSameInnersInSupertypeAndSupertypesSupertype() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/SameInnersInSupertypeAndSupertypesSupertype.kt");
        }

        @Test
        @TestMetadata("SuperTypeWithSameInner.kt")
        public void testSuperTypeWithSameInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/SuperTypeWithSameInner.kt");
        }

        @Test
        @TestMetadata("SupertypeInnerAndTypeParameterWithSameNames.kt")
        public void testSupertypeInnerAndTypeParameterWithSameNames() {
          runTest("compiler/testData/diagnostics/tests/javac/inheritance/SupertypeInnerAndTypeParameterWithSameNames.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/inners")
      @TestDataPath("$PROJECT_ROOT")
      public class Inners {
        @Test
        @TestMetadata("ComplexCase.kt")
        public void testComplexCase() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/ComplexCase.kt");
        }

        @Test
        @TestMetadata("ComplexCase2.kt")
        public void testComplexCase2() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/ComplexCase2.kt");
        }

        @Test
        @TestMetadata("CurrentPackageAndInner.kt")
        public void testCurrentPackageAndInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/CurrentPackageAndInner.kt");
        }

        @Test
        @TestMetadata("ImportThriceNestedClass.kt")
        public void testImportThriceNestedClass() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/ImportThriceNestedClass.kt");
        }

        @Test
        @TestMetadata("InnerInInner.kt")
        public void testInnerInInner() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/InnerInInner.kt");
        }

        @Test
        @TestMetadata("Nested.kt")
        public void testNested() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/Nested.kt");
        }

        @Test
        @TestMetadata("ThriceNestedClass.kt")
        public void testThriceNestedClass() {
          runTest("compiler/testData/diagnostics/tests/javac/inners/ThriceNestedClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/qualifiedExpression")
      @TestDataPath("$PROJECT_ROOT")
      public class QualifiedExpression {
        @Test
        @TestMetadata("PackageVsRootClass.kt")
        public void testPackageVsRootClass() {
          runTest("compiler/testData/diagnostics/tests/javac/qualifiedExpression/PackageVsRootClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/typeParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeParameters {
        @Test
        @TestMetadata("ComplexCase.kt")
        public void testComplexCase() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/ComplexCase.kt");
        }

        @Test
        @TestMetadata("InheritedInnerAndTypeParameterWithSameNames.kt")
        public void testInheritedInnerAndTypeParameterWithSameNames() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/InheritedInnerAndTypeParameterWithSameNames.kt");
        }

        @Test
        @TestMetadata("InnerWithTypeParameter.kt")
        public void testInnerWithTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/InnerWithTypeParameter.kt");
        }

        @Test
        @TestMetadata("NestedWithInner.kt")
        public void testNestedWithInner() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/NestedWithInner.kt");
        }

        @Test
        @TestMetadata("SeveralInnersWithTypeParameters.kt")
        public void testSeveralInnersWithTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/SeveralInnersWithTypeParameters.kt");
        }

        @Test
        @TestMetadata("TypeParametersInInnerAndOuterWithSameNames.kt")
        public void testTypeParametersInInnerAndOuterWithSameNames() {
          runTest("compiler/testData/diagnostics/tests/javac/typeParameters/TypeParametersInInnerAndOuterWithSameNames.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/labels")
    @TestDataPath("$PROJECT_ROOT")
    public class Labels {
      @Test
      @TestMetadata("automaticLabelFromInfixOperator.kt")
      public void testAutomaticLabelFromInfixOperator() {
        runTest("compiler/testData/diagnostics/tests/labels/automaticLabelFromInfixOperator.kt");
      }

      @Test
      @TestMetadata("kt1703.kt")
      public void testKt1703() {
        runTest("compiler/testData/diagnostics/tests/labels/kt1703.kt");
      }

      @Test
      @TestMetadata("kt3920.kt")
      public void testKt3920() {
        runTest("compiler/testData/diagnostics/tests/labels/kt3920.kt");
      }

      @Test
      @TestMetadata("kt3988.kt")
      public void testKt3988() {
        runTest("compiler/testData/diagnostics/tests/labels/kt3988.kt");
      }

      @Test
      @TestMetadata("kt4247.kt")
      public void testKt4247() {
        runTest("compiler/testData/diagnostics/tests/labels/kt4247.kt");
      }

      @Test
      @TestMetadata("kt4586.kt")
      public void testKt4586() {
        runTest("compiler/testData/diagnostics/tests/labels/kt4586.kt");
      }

      @Test
      @TestMetadata("kt4603.kt")
      public void testKt4603() {
        runTest("compiler/testData/diagnostics/tests/labels/kt4603.kt");
      }

      @Test
      @TestMetadata("kt591.kt")
      public void testKt591() {
        runTest("compiler/testData/diagnostics/tests/labels/kt591.kt");
      }

      @Test
      @TestMetadata("labelReferencesInsideObjectExpressions.kt")
      public void testLabelReferencesInsideObjectExpressions() {
        runTest("compiler/testData/diagnostics/tests/labels/labelReferencesInsideObjectExpressions.kt");
      }

      @Test
      @TestMetadata("labelToOuterLambda.kt")
      public void testLabelToOuterLambda() {
        runTest("compiler/testData/diagnostics/tests/labels/labelToOuterLambda.kt");
      }

      @Test
      @TestMetadata("labeledFunctionLiteral.kt")
      public void testLabeledFunctionLiteral() {
        runTest("compiler/testData/diagnostics/tests/labels/labeledFunctionLiteral.kt");
      }

      @Test
      @TestMetadata("qualifiedThisInExtensionProperty.kt")
      public void testQualifiedThisInExtensionProperty() {
        runTest("compiler/testData/diagnostics/tests/labels/qualifiedThisInExtensionProperty.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/lateinit")
    @TestDataPath("$PROJECT_ROOT")
    public class Lateinit {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/lateinit/local")
      @TestDataPath("$PROJECT_ROOT")
      public class Local {
        @Test
        @TestMetadata("localLateinit.kt")
        public void testLocalLateinit() {
          runTest("compiler/testData/diagnostics/tests/lateinit/local/localLateinit.kt");
        }

        @Test
        @TestMetadata("uninitialized.kt")
        public void testUninitialized() {
          runTest("compiler/testData/diagnostics/tests/lateinit/local/uninitialized.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/library")
    @TestDataPath("$PROJECT_ROOT")
    public class Library {
      @Test
      @TestMetadata("kt828.kt")
      public void testKt828() {
        runTest("compiler/testData/diagnostics/tests/library/kt828.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/metadata")
    @TestDataPath("$PROJECT_ROOT")
    public class Metadata {
      @Test
      @TestMetadata("exhaustiveExpectBoolean.kt")
      public void testExhaustiveExpectBoolean() {
        runTest("compiler/testData/diagnostics/tests/metadata/exhaustiveExpectBoolean.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    public class Modifiers {
      @Test
      @TestMetadata("openInInterface.kt")
      public void testOpenInInterface() {
        runTest("compiler/testData/diagnostics/tests/modifiers/openInInterface.kt");
      }

      @Test
      @TestMetadata("OpenInterface2.kt")
      public void testOpenInterface2() {
        runTest("compiler/testData/diagnostics/tests/modifiers/OpenInterface2.kt");
      }

      @Test
      @TestMetadata("redundantTargets.kt")
      public void testRedundantTargets() {
        runTest("compiler/testData/diagnostics/tests/modifiers/redundantTargets.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/modifiers/const")
      @TestDataPath("$PROJECT_ROOT")
      public class Const {
        @Test
        @TestMetadata("compare.kt")
        public void testCompare() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/compare.kt");
        }

        @Test
        @TestMetadata("enumConstName_after.kt")
        public void testEnumConstName_after() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/enumConstName_after.kt");
        }

        @Test
        @TestMetadata("fromJavaSubclass.kt")
        public void testFromJavaSubclass() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/fromJavaSubclass.kt");
        }

        @Test
        @TestMetadata("kt12248.kt")
        public void testKt12248() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kt12248.kt");
        }

        @Test
        @TestMetadata("kt15913.kt")
        public void testKt15913() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/kt15913.kt");
        }

        @Test
        @TestMetadata("noConstKt12248.kt")
        public void testNoConstKt12248() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/noConstKt12248.kt");
        }

        @Test
        @TestMetadata("stdlibConstFun.kt")
        public void testStdlibConstFun() {
          runTest("compiler/testData/diagnostics/tests/modifiers/const/stdlibConstFun.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/modifiers/operatorInfix")
      @TestDataPath("$PROJECT_ROOT")
      public class OperatorInfix {
        @Test
        @TestMetadata("Simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/modifiers/operatorInfix/Simple.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multimodule")
    @TestDataPath("$PROJECT_ROOT")
    public class Multimodule {
      @Test
      @TestMetadata("FalsePositiveInaccessibleGenericType.kt")
      public void testFalsePositiveInaccessibleGenericType() {
        runTest("compiler/testData/diagnostics/tests/multimodule/FalsePositiveInaccessibleGenericType.kt");
      }

      @Test
      @TestMetadata("InaccessibleGenericTypeVariousCases.kt")
      public void testInaccessibleGenericTypeVariousCases() {
        runTest("compiler/testData/diagnostics/tests/multimodule/InaccessibleGenericTypeVariousCases.kt");
      }

      @Test
      @TestMetadata("redundantElseInWhen.kt")
      public void testRedundantElseInWhen() {
        runTest("compiler/testData/diagnostics/tests/multimodule/redundantElseInWhen.kt");
      }

      @Test
      @TestMetadata("samWithSuspendFunctionFromAnotherModule.kt")
      public void testSamWithSuspendFunctionFromAnotherModule() {
        runTest("compiler/testData/diagnostics/tests/multimodule/samWithSuspendFunctionFromAnotherModule.kt");
      }

      @Test
      @TestMetadata("SupertypesWithInaccessibleTypeArguments.kt")
      public void testSupertypesWithInaccessibleTypeArguments() {
        runTest("compiler/testData/diagnostics/tests/multimodule/SupertypesWithInaccessibleTypeArguments.kt");
      }

      @Test
      @TestMetadata("varargConflict.kt")
      public void testVarargConflict() {
        runTest("compiler/testData/diagnostics/tests/multimodule/varargConflict.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateClass {
        @Test
        @TestMetadata("collectionMethodStub.kt")
        public void testCollectionMethodStub() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/collectionMethodStub.kt");
        }

        @Test
        @TestMetadata("differentGenericArguments.kt")
        public void testDifferentGenericArguments() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/differentGenericArguments.kt");
        }

        @Test
        @TestMetadata("duplicateClass.kt")
        public void testDuplicateClass() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateClass.kt");
        }

        @Test
        @TestMetadata("duplicateSuperClass.kt")
        public void testDuplicateSuperClass() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateSuperClass.kt");
        }

        @Test
        @TestMetadata("inTheSameModuleWithUsage.kt")
        public void testInTheSameModuleWithUsage() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/inTheSameModuleWithUsage.kt");
        }

        @Test
        @TestMetadata("inTheSameModuleWithUsageNoTypeAnnotation.kt")
        public void testInTheSameModuleWithUsageNoTypeAnnotation() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/inTheSameModuleWithUsageNoTypeAnnotation.kt");
        }

        @Test
        @TestMetadata("sameGenericArguments.kt")
        public void testSameGenericArguments() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateClass/sameGenericArguments.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateMethod {
        @Test
        @TestMetadata("classGenericsInParams.kt")
        public void testClassGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParams.kt");
        }

        @Test
        @TestMetadata("classGenericsInParamsBoundMismatch.kt")
        public void testClassGenericsInParamsBoundMismatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsBoundMismatch.kt");
        }

        @Test
        @TestMetadata("classGenericsInParamsNameMismatch.kt")
        public void testClassGenericsInParamsNameMismatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsNameMismatch.kt");
        }

        @Test
        @TestMetadata("classGenericsInReturnType.kt")
        public void testClassGenericsInReturnType() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInReturnType.kt");
        }

        @Test
        @TestMetadata("covariantReturnTypes.kt")
        public void testCovariantReturnTypes() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/covariantReturnTypes.kt");
        }

        @Test
        @TestMetadata("differenceInParamNames.kt")
        public void testDifferenceInParamNames() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differenceInParamNames.kt");
        }

        @Test
        @TestMetadata("differentNumberOfParams.kt")
        public void testDifferentNumberOfParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentNumberOfParams.kt");
        }

        @Test
        @TestMetadata("differentReturnTypes.kt")
        public void testDifferentReturnTypes() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentReturnTypes.kt");
        }

        @Test
        @TestMetadata("extensionMatch.kt")
        public void testExtensionMatch() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/extensionMatch.kt");
        }

        @Test
        @TestMetadata("functionGenericsInParams.kt")
        public void testFunctionGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParams.kt");
        }

        @Test
        @TestMetadata("functionGenericsInParamsEqNull.kt")
        public void testFunctionGenericsInParamsEqNull() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsEqNull.kt");
        }

        @Test
        @TestMetadata("functionGenericsInParamsNotIs.kt")
        public void testFunctionGenericsInParamsNotIs() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsNotIs.kt");
        }

        @Test
        @TestMetadata("functionGenericsInParamsReturnFooT.kt")
        public void testFunctionGenericsInParamsReturnFooT() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsReturnFooT.kt");
        }

        @Test
        @TestMetadata("functionGenericsInParamsReturnT.kt")
        public void testFunctionGenericsInParamsReturnT() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsReturnT.kt");
        }

        @Test
        @TestMetadata("noGenericsInParams.kt")
        public void testNoGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/noGenericsInParams.kt");
        }

        @Test
        @TestMetadata("noParams.kt")
        public void testNoParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/noParams.kt");
        }

        @Test
        @TestMetadata("sameGenericsInParams.kt")
        public void testSameGenericsInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/sameGenericsInParams.kt");
        }

        @Test
        @TestMetadata("simpleWithInheritance.kt")
        public void testSimpleWithInheritance() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/simpleWithInheritance.kt");
        }

        @Test
        @TestMetadata("sinceKotlin.kt")
        public void testSinceKotlin() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/sinceKotlin.kt");
        }

        @Test
        @TestMetadata("substitutedGenericInParams.kt")
        public void testSubstitutedGenericInParams() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateMethod/substitutedGenericInParams.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateSuper {
        @Test
        @TestMetadata("differentSuperTraits.kt")
        public void testDifferentSuperTraits() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/differentSuperTraits.kt");
        }

        @Test
        @TestMetadata("sameSuperTrait.kt")
        public void testSameSuperTrait() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTrait.kt");
        }

        @Test
        @TestMetadata("sameSuperTraitGenerics.kt")
        public void testSameSuperTraitGenerics() {
          runTest("compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTraitGenerics.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform")
    @TestDataPath("$PROJECT_ROOT")
    public class Multiplatform {
      @Test
      @TestMetadata("abstractEnumInIr.kt")
      public void testAbstractEnumInIr() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/abstractEnumInIr.kt");
      }

      @Test
      @TestMetadata("actualClassDelegationWithImplicitType.kt")
      public void testActualClassDelegationWithImplicitType() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassDelegationWithImplicitType.kt");
      }

      @Test
      @TestMetadata("actualDeprecated.kt")
      public void testActualDeprecated() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualDeprecated.kt");
      }

      @Test
      @TestMetadata("actualExternalInJs.kt")
      public void testActualExternalInJs() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualExternalInJs.kt");
      }

      @Test
      @TestMetadata("actualTypealiasToSpecialAnnotation_oldLanguageVersion.kt")
      public void testActualTypealiasToSpecialAnnotation_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToSpecialAnnotation_oldLanguageVersion.kt");
      }

      @Test
      @TestMetadata("annotationArgTypeAliasWithArray.kt")
      public void testAnnotationArgTypeAliasWithArray() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/annotationArgTypeAliasWithArray.kt");
      }

      @Test
      @TestMetadata("arraySortFixed.kt")
      public void testArraySortFixed() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/arraySortFixed.kt");
      }

      @Test
      @TestMetadata("callConflictsOnExpectAndActualWeaklyCompatible.kt")
      public void testCallConflictsOnExpectAndActualWeaklyCompatible() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/callConflictsOnExpectAndActualWeaklyCompatible.kt");
      }

      @Test
      @TestMetadata("changeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass.kt")
      public void testChangeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/changeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass.kt");
      }

      @Test
      @TestMetadata("changeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass.kt")
      public void testChangeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/changeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass.kt");
      }

      @Test
      @TestMetadata("collections.kt")
      public void testCollections() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/collections.kt");
      }

      @Test
      @TestMetadata("delegationToExpectInterfaceMixedWithInheritance.kt")
      public void testDelegationToExpectInterfaceMixedWithInheritance() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/delegationToExpectInterfaceMixedWithInheritance.kt");
      }

      @Test
      @TestMetadata("delegationToTypeParameterWithBond.kt")
      public void testDelegationToTypeParameterWithBond() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/delegationToTypeParameterWithBond.kt");
      }

      @Test
      @TestMetadata("dontDeprioritizeExpectFunIfShapeIsMoreSpecific.kt")
      public void testDontDeprioritizeExpectFunIfShapeIsMoreSpecific() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/dontDeprioritizeExpectFunIfShapeIsMoreSpecific.kt");
      }

      @Test
      @TestMetadata("expectAbstractToString.kt")
      public void testExpectAbstractToString() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectAbstractToString.kt");
      }

      @Test
      @TestMetadata("expectActualClassesAreInBetaWarning.kt")
      public void testExpectActualClassesAreInBetaWarning() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualClassesAreInBetaWarning.kt");
      }

      @Test
      @TestMetadata("expectActualClassesAreInBeta_suppressWarningWithLv.kt")
      public void testExpectActualClassesAreInBeta_suppressWarningWithLv() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectActualClassesAreInBeta_suppressWarningWithLv.kt");
      }

      @Test
      @TestMetadata("expectConstructors.kt")
      public void testExpectConstructors() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectConstructors.kt");
      }

      @Test
      @TestMetadata("expectExternal_oldLanguageVersion.kt")
      public void testExpectExternal_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectExternal_oldLanguageVersion.kt");
      }

      @Test
      @TestMetadata("expectObjectWithAbstractMember.kt")
      public void testExpectObjectWithAbstractMember() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectObjectWithAbstractMember.kt");
      }

      @Test
      @TestMetadata("expectOptInAnnotation_oldLanguageVersion.kt")
      public void testExpectOptInAnnotation_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectOptInAnnotation_oldLanguageVersion.kt");
      }

      @Test
      @TestMetadata("expectShouldBeJSExportable.kt")
      public void testExpectShouldBeJSExportable() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectShouldBeJSExportable.kt");
      }

      @Test
      @TestMetadata("expectTailrec_oldLanguageVersion.kt")
      public void testExpectTailrec_oldLanguageVersion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/expectTailrec_oldLanguageVersion.kt");
      }

      @Test
      @TestMetadata("extraNestedClassOnActualViaActualTypealias.kt")
      public void testExtraNestedClassOnActualViaActualTypealias() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/extraNestedClassOnActualViaActualTypealias.kt");
      }

      @Test
      @TestMetadata("implDelegatedMember.kt")
      public void testImplDelegatedMember() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implDelegatedMember.kt");
      }

      @Test
      @TestMetadata("implFakeOverride.kt")
      public void testImplFakeOverride() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/implFakeOverride.kt");
      }

      @Test
      @TestMetadata("incDecOperatorsInExpectClass.kt")
      public void testIncDecOperatorsInExpectClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/incDecOperatorsInExpectClass.kt");
      }

      @Test
      @TestMetadata("JsExternalTypeExtendsActualExternalType.kt")
      public void testJsExternalTypeExtendsActualExternalType() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/JsExternalTypeExtendsActualExternalType.kt");
      }

      @Test
      @TestMetadata("jvmOverloads.kt")
      public void testJvmOverloads() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/jvmOverloads.kt");
      }

      @Test
      @TestMetadata("kt58153.kt")
      public void testKt58153() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt58153.kt");
      }

      @Test
      @TestMetadata("kt60902.kt")
      public void testKt60902() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt60902.kt");
      }

      @Test
      @TestMetadata("kt63860.kt")
      public void testKt63860() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt63860.kt");
      }

      @Test
      @TestMetadata("kt63860_2.kt")
      public void testKt63860_2() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt63860_2.kt");
      }

      @Test
      @TestMetadata("kt64045.kt")
      public void testKt64045() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt64045.kt");
      }

      @Test
      @TestMetadata("kt64045_2.kt")
      public void testKt64045_2() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt64045_2.kt");
      }

      @Test
      @TestMetadata("kt64166.kt")
      public void testKt64166() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/kt64166.kt");
      }

      @Test
      @TestMetadata("namedArguments.kt")
      public void testNamedArguments() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/namedArguments.kt");
      }

      @Test
      @TestMetadata("nestedClassViaActualTypealias.kt")
      public void testNestedClassViaActualTypealias() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealias.kt");
      }

      @Test
      @TestMetadata("nestedClassViaActualTypealiasExpandInTypeParam.kt")
      public void testNestedClassViaActualTypealiasExpandInTypeParam() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasExpandInTypeParam.kt");
      }

      @Test
      @TestMetadata("overloadsWithPotentialRecursion.kt")
      public void testOverloadsWithPotentialRecursion() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/overloadsWithPotentialRecursion.kt");
      }

      @Test
      @TestMetadata("privateExpectFakeOverride.kt")
      public void testPrivateExpectFakeOverride() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/privateExpectFakeOverride.kt");
      }

      @Test
      @TestMetadata("privateExpectFakeOverride_incompatibleReturnType.kt")
      public void testPrivateExpectFakeOverride_incompatibleReturnType() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/privateExpectFakeOverride_incompatibleReturnType.kt");
      }

      @Test
      @TestMetadata("sealedClassWithPrivateConstructor.kt")
      public void testSealedClassWithPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedClassWithPrivateConstructor.kt");
      }

      @Test
      @TestMetadata("sealedTypeAlias.kt")
      public void testSealedTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedTypeAlias.kt");
      }

      @Test
      @TestMetadata("sealedTypeAliasTopLevel.kt")
      public void testSealedTypeAliasTopLevel() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/sealedTypeAliasTopLevel.kt");
      }

      @Test
      @TestMetadata("smartcastOnMemberPropertyFromCommonClass.kt")
      public void testSmartcastOnMemberPropertyFromCommonClass() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/smartcastOnMemberPropertyFromCommonClass.kt");
      }

      @Test
      @TestMetadata("supertypeActualizationWithAny.kt")
      public void testSupertypeActualizationWithAny() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/supertypeActualizationWithAny.kt");
      }

      @Test
      @TestMetadata("valueClassWithPrivateConstructor.kt")
      public void testValueClassWithPrivateConstructor() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/valueClassWithPrivateConstructor.kt");
      }

      @Test
      @TestMetadata("widerVisibility_expectIsEffectivelyFinal.kt")
      public void testWiderVisibility_expectIsEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal.kt");
      }

      @Test
      @TestMetadata("widerVisibility_expectIsEffectivelyFinal_fakeOverride.kt")
      public void testWiderVisibility_expectIsEffectivelyFinal_fakeOverride() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal_fakeOverride.kt");
      }

      @Test
      @TestMetadata("widerVisibility_expectSetterIsEffectivelyFinal.kt")
      public void testWiderVisibility_expectSetterIsEffectivelyFinal() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectSetterIsEffectivelyFinal.kt");
      }

      @Test
      @TestMetadata("widerVisibility_expectSetterIsEffectivelyFinal_fakeOverride.kt")
      public void testWiderVisibility_expectSetterIsEffectivelyFinal_fakeOverride() {
        runTest("compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectSetterIsEffectivelyFinal_fakeOverride.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect")
      @TestDataPath("$PROJECT_ROOT")
      public class ActualAnnotationsNotMatchExpect {
        @Test
        @TestMetadata("actualizePropertyByJavaField_supportedCase.kt")
        public void testActualizePropertyByJavaField_supportedCase() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualizePropertyByJavaField_supportedCase.kt");
        }

        @Test
        @TestMetadata("annotationArgumentsConstExpressions.kt")
        public void testAnnotationArgumentsConstExpressions() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsConstExpressions.kt");
        }

        @Test
        @TestMetadata("annotationArgumentsDefaults.kt")
        public void testAnnotationArgumentsDefaults() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsDefaults.kt");
        }

        @Test
        @TestMetadata("annotationArgumentsWithLazyResolve.kt")
        public void testAnnotationArgumentsWithLazyResolve() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsWithLazyResolve.kt");
        }

        @Test
        @TestMetadata("annotationMatching_oldLanguageVersion.kt")
        public void testAnnotationMatching_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationMatching_oldLanguageVersion.kt");
        }

        @Test
        @TestMetadata("annotationTarget.kt")
        public void testAnnotationTarget() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationTarget.kt");
        }

        @Test
        @TestMetadata("annotationTypeParameters.kt")
        public void testAnnotationTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationTypeParameters.kt");
        }

        @Test
        @TestMetadata("basicOnDeclaration.kt")
        public void testBasicOnDeclaration() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/basicOnDeclaration.kt");
        }

        @Test
        @TestMetadata("checkDiagnosticFullText.kt")
        public void testCheckDiagnosticFullText() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/checkDiagnosticFullText.kt");
        }

        @Test
        @TestMetadata("classScopeInnerClasses.kt")
        public void testClassScopeInnerClasses() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/classScopeInnerClasses.kt");
        }

        @Test
        @TestMetadata("compatibleOverrides.kt")
        public void testCompatibleOverrides() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/compatibleOverrides.kt");
        }

        @Test
        @TestMetadata("defaultValueParametersRendering.kt")
        public void testDefaultValueParametersRendering() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/defaultValueParametersRendering.kt");
        }

        @Test
        @TestMetadata("differentOrder.kt")
        public void testDifferentOrder() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/differentOrder.kt");
        }

        @Test
        @TestMetadata("fakeOverrides.kt")
        public void testFakeOverrides() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/fakeOverrides.kt");
        }

        @Test
        @TestMetadata("floatNumbersComparison.kt")
        public void testFloatNumbersComparison() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/floatNumbersComparison.kt");
        }

        @Test
        @TestMetadata("gettersAndSetters.kt")
        public void testGettersAndSetters() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/gettersAndSetters.kt");
        }

        @Test
        @TestMetadata("intrinsicConstEvaluation.kt")
        public void testIntrinsicConstEvaluation() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/intrinsicConstEvaluation.kt");
        }

        @Test
        @TestMetadata("kclassArgWithExpectClass.kt")
        public void testKclassArgWithExpectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/kclassArgWithExpectClass.kt");
        }

        @Test
        @TestMetadata("kotlinAnaloguesForJavaAnnotations.kt")
        public void testKotlinAnaloguesForJavaAnnotations() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/kotlinAnaloguesForJavaAnnotations.kt");
        }

        @Test
        @TestMetadata("nestedAnnotationClassViaActualTypeAlias.kt")
        public void testNestedAnnotationClassViaActualTypeAlias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/nestedAnnotationClassViaActualTypeAlias.kt");
        }

        @Test
        @TestMetadata("repeatableNoArg.kt")
        public void testRepeatableNoArg() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/repeatableNoArg.kt");
        }

        @Test
        @TestMetadata("repeatableWithArg.kt")
        public void testRepeatableWithArg() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/repeatableWithArg.kt");
        }

        @Test
        @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
        public void testSourceRetentionAnnotationsWhenTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/sourceRetentionAnnotationsWhenTypealias.kt");
        }

        @Test
        @TestMetadata("substitutionOverrideInTwoClasses.kt")
        public void testSubstitutionOverrideInTwoClasses() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/substitutionOverrideInTwoClasses.kt");
        }

        @Test
        @TestMetadata("twoActualTypealiasesToSameClass.kt")
        public void testTwoActualTypealiasesToSameClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/twoActualTypealiasesToSameClass.kt");
        }

        @Test
        @TestMetadata("typeUsageTypealiasInSuper.kt")
        public void testTypeUsageTypealiasInSuper() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageTypealiasInSuper.kt");
        }

        @Test
        @TestMetadata("typeUsageWithImplicitType.kt")
        public void testTypeUsageWithImplicitType() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageWithImplicitType.kt");
        }

        @Test
        @TestMetadata("typealias.kt")
        public void testTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealias.kt");
        }

        @Test
        @TestMetadata("typealiasToJavaLibrary.kt")
        public void testTypealiasToJavaLibrary() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToJavaLibrary.kt");
        }

        @Test
        @TestMetadata("typealiasToJavaWithAnnotationArgument.kt")
        public void testTypealiasToJavaWithAnnotationArgument() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToJavaWithAnnotationArgument.kt");
        }

        @Test
        @TestMetadata("typealiasToKtLibrary.kt")
        public void testTypealiasToKtLibrary() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToKtLibrary.kt");
        }

        @Test
        @TestMetadata("withAnnotationActualTypealias.kt")
        public void testWithAnnotationActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/withAnnotationActualTypealias.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class ActualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker {
        @Test
        @TestMetadata("actualTypealias.kt")
        public void testActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualTypealias.kt");
        }

        @Test
        @TestMetadata("actualizeFakeOverridePropertyToJavaMethod.kt")
        public void testActualizeFakeOverridePropertyToJavaMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizeFakeOverridePropertyToJavaMethod.kt");
        }

        @Test
        @TestMetadata("actualizePrimaryConstructorWithSecondaryConstructor.kt")
        public void testActualizePrimaryConstructorWithSecondaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizePrimaryConstructorWithSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("actualizeSecondaryConstructorWithPrimaryConstructor.kt")
        public void testActualizeSecondaryConstructorWithPrimaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizeSecondaryConstructorWithPrimaryConstructor.kt");
        }

        @Test
        @TestMetadata("changeClassTypeParameterNames.kt")
        public void testChangeClassTypeParameterNames() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeClassTypeParameterNames.kt");
        }

        @Test
        @TestMetadata("fakeOverrideChangedToRealOverride.kt")
        public void testFakeOverrideChangedToRealOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/fakeOverrideChangedToRealOverride.kt");
        }

        @Test
        @TestMetadata("finalClassIsActualizedByOpenClass.kt")
        public void testFinalClassIsActualizedByOpenClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/finalClassIsActualizedByOpenClass.kt");
        }

        @Test
        @TestMetadata("finalMethodIsActualizedByOpenMethod.kt")
        public void testFinalMethodIsActualizedByOpenMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/finalMethodIsActualizedByOpenMethod.kt");
        }

        @Test
        @TestMetadata("injectClass.kt")
        public void testInjectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectClass.kt");
        }

        @Test
        @TestMetadata("injectEmptySuperClass.kt")
        public void testInjectEmptySuperClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectEmptySuperClass.kt");
        }

        @Test
        @TestMetadata("injectExtensionReceiverOverload.kt")
        public void testInjectExtensionReceiverOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectExtensionReceiverOverload.kt");
        }

        @Test
        @TestMetadata("injectGenericUpperBoundOverload.kt")
        public void testInjectGenericUpperBoundOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectGenericUpperBoundOverload.kt");
        }

        @Test
        @TestMetadata("injectMethod_internalMethod.kt")
        public void testInjectMethod_internalMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_internalMethod.kt");
        }

        @Test
        @TestMetadata("injectMethod_privateMethod.kt")
        public void testInjectMethod_privateMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_privateMethod.kt");
        }

        @Test
        @TestMetadata("injectMethod_protectedMethod.kt")
        public void testInjectMethod_protectedMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_protectedMethod.kt");
        }

        @Test
        @TestMetadata("injectMethod_publicMethod.kt")
        public void testInjectMethod_publicMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_publicMethod.kt");
        }

        @Test
        @TestMetadata("injectMethod_publicMethodInJava.kt")
        public void testInjectMethod_publicMethodInJava() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_publicMethodInJava.kt");
        }

        @Test
        @TestMetadata("injectParameterOverload.kt")
        public void testInjectParameterOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectParameterOverload.kt");
        }

        @Test
        @TestMetadata("injectParameterOverloadWithGenerics.kt")
        public void testInjectParameterOverloadWithGenerics() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectParameterOverloadWithGenerics.kt");
        }

        @Test
        @TestMetadata("injectPrimaryConstructor.kt")
        public void testInjectPrimaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPrimaryConstructor.kt");
        }

        @Test
        @TestMetadata("injectPrivateProperty.kt")
        public void testInjectPrivateProperty() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPrivateProperty.kt");
        }

        @Test
        @TestMetadata("injectProperty.kt")
        public void testInjectProperty() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectProperty.kt");
        }

        @Test
        @TestMetadata("injectPropertyWithTheSameSignatureAsExistingFunction.kt")
        public void testInjectPropertyWithTheSameSignatureAsExistingFunction() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPropertyWithTheSameSignatureAsExistingFunction.kt");
        }

        @Test
        @TestMetadata("injectPublicFakeOverrideMethod.kt")
        public void testInjectPublicFakeOverrideMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPublicFakeOverrideMethod.kt");
        }

        @Test
        @TestMetadata("injectSecondaryConstructor.kt")
        public void testInjectSecondaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("injectSupertype_SupertypeIsExpectActualPair.kt")
        public void testInjectSupertype_SupertypeIsExpectActualPair() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSupertype_SupertypeIsExpectActualPair.kt");
        }

        @Test
        @TestMetadata("injectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride.kt")
        public void testInjectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride.kt");
        }

        @Test
        @TestMetadata("injectVarargParameterOverload.kt")
        public void testInjectVarargParameterOverload() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectVarargParameterOverload.kt");
        }

        @Test
        @TestMetadata("kt62027.kt")
        public void testKt62027() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/kt62027.kt");
        }

        @Test
        @TestMetadata("memberScopeMismatch_oldLanguageVersion.kt")
        public void testMemberScopeMismatch_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/memberScopeMismatch_oldLanguageVersion.kt");
        }

        @Test
        @TestMetadata("nestedExpectOpenClass.kt")
        public void testNestedExpectOpenClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/nestedExpectOpenClass.kt");
        }

        @Test
        @TestMetadata("overloadMethodInjectedInSuper.kt")
        public void testOverloadMethodInjectedInSuper() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/overloadMethodInjectedInSuper.kt");
        }

        @Test
        @TestMetadata("substitutedFakeOverrideChangedToRealOverride.kt")
        public void testSubstitutedFakeOverrideChangedToRealOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/substitutedFakeOverrideChangedToRealOverride.kt");
        }

        @Test
        @TestMetadata("superTypesAreTheSameModuloActualTypealias.kt")
        public void testSuperTypesAreTheSameModuloActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloActualTypealias.kt");
        }

        @Test
        @TestMetadata("superTypesAreTheSameModuloTypealias1.kt")
        public void testSuperTypesAreTheSameModuloTypealias1() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloTypealias1.kt");
        }

        @Test
        @TestMetadata("superTypesAreTheSameModuloTypealias2.kt")
        public void testSuperTypesAreTheSameModuloTypealias2() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloTypealias2.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper.kt")
        public void testSupertypeIsExpectActual_covariantOverrideOfInjectedFromSuper() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_injectMethod.kt")
        public void testSupertypeIsExpectActual_injectMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectMethod.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_injectSupertype.kt")
        public void testSupertypeIsExpectActual_injectSupertype() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectSupertype.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_simpleOverride.kt")
        public void testSupertypeIsExpectActual_simpleOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_simpleOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod.kt")
        public void testSupertypeIsExpectActual_supertypeIsActualTypealias_injectMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod.kt");
        }

        @Test
        @TestMetadata("supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride.kt")
        public void testSupertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments")
      @TestDataPath("$PROJECT_ROOT")
      public class DefaultArguments {
        @Test
        @TestMetadata("annotationArgumentEquality.kt")
        public void testAnnotationArgumentEquality() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationArgumentEquality.kt");
        }

        @Test
        @TestMetadata("annotationDefaultArgKclassWithNestedClassViaActualTypeAlias.kt")
        public void testAnnotationDefaultArgKclassWithNestedClassViaActualTypeAlias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationDefaultArgKclassWithNestedClassViaActualTypeAlias.kt");
        }

        @Test
        @TestMetadata("annotationsViaActualTypeAlias2.kt")
        public void testAnnotationsViaActualTypeAlias2() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias2.kt");
        }

        @Test
        @TestMetadata("expectAnnotationAndInlineClassWithDefaultValue.kt")
        public void testExpectAnnotationAndInlineClassWithDefaultValue() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectAnnotationAndInlineClassWithDefaultValue.kt");
        }

        @Test
        @TestMetadata("methodDefaultArgsViaActualTypealias_oldLanguageVersion.kt")
        public void testMethodDefaultArgsViaActualTypealias_oldLanguageVersion() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualTypealias_oldLanguageVersion.kt");
        }

        @Test
        @TestMetadata("nestedAnnotationClassViaActualTypealias.kt")
        public void testNestedAnnotationClassViaActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/nestedAnnotationClassViaActualTypealias.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride")
        @TestDataPath("$PROJECT_ROOT")
        public class MethodDefaultArgsViaActualFakeOverride {
          @Test
          @TestMetadata("constructor.kt")
          public void testConstructor() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/constructor.kt");
          }

          @Test
          @TestMetadata("disabledFeature.kt")
          public void testDisabledFeature() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/disabledFeature.kt");
          }

          @Test
          @TestMetadata("realOverride.kt")
          public void testRealOverride() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/realOverride.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization")
      @TestDataPath("$PROJECT_ROOT")
      public class DirectJavaActualization {
        @Test
        @TestMetadata("directJavaActualization_annotation.kt")
        public void testDirectJavaActualization_annotation() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_annotation.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_annotationOnlyOnExpect.kt")
        public void testDirectJavaActualization_annotationOnlyOnExpect() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_annotationOnlyOnExpect.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_enumWithFun.kt")
        public void testDirectJavaActualization_enumWithFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_enumWithFun.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_injectEmptySuperclass.kt")
        public void testDirectJavaActualization_injectEmptySuperclass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_injectEmptySuperclass.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_sealedClass.kt")
        public void testDirectJavaActualization_sealedClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_sealedClass.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_simple.kt")
        public void testDirectJavaActualization_simple() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_simple.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/enum")
      @TestDataPath("$PROJECT_ROOT")
      public class Enum {
        @Test
        @TestMetadata("additionalEntriesInImpl.kt")
        public void testAdditionalEntriesInImpl() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/additionalEntriesInImpl.kt");
        }

        @Test
        @TestMetadata("differentEntryOrder.kt")
        public void testDifferentEntryOrder() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/differentEntryOrder.kt");
        }

        @Test
        @TestMetadata("javaEnum.kt")
        public void testJavaEnum() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/javaEnum.kt");
        }

        @Test
        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/enum/simpleEnum.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness")
      @TestDataPath("$PROJECT_ROOT")
      public class Exhaustiveness {
        @Test
        @TestMetadata("expectSealedClassWithActualTypealias.kt")
        public void testExpectSealedClassWithActualTypealias() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassWithActualTypealias.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/generic")
      @TestDataPath("$PROJECT_ROOT")
      public class Generic {
        @Test
        @TestMetadata("functionTypeParameterBounds.kt")
        public void testFunctionTypeParameterBounds() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/generic/functionTypeParameterBounds.kt");
        }

        @Test
        @TestMetadata("genericMemberBounds.kt")
        public void testGenericMemberBounds() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/generic/genericMemberBounds.kt");
        }

        @Test
        @TestMetadata("membersInGenericClass.kt")
        public void testMembersInGenericClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/generic/membersInGenericClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/headerClass")
      @TestDataPath("$PROJECT_ROOT")
      public class HeaderClass {
        @Test
        @TestMetadata("classKinds.kt")
        public void testClassKinds() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/classKinds.kt");
        }

        @Test
        @TestMetadata("expectFinalActualOpen.kt")
        public void testExpectFinalActualOpen() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFinalActualOpen.kt");
        }

        @Test
        @TestMetadata("functionAndPropertyWithSameName.kt")
        public void testFunctionAndPropertyWithSameName() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/functionAndPropertyWithSameName.kt");
        }

        @Test
        @TestMetadata("headerClassMember.kt")
        public void testHeaderClassMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassMember.kt");
        }

        @Test
        @TestMetadata("implDataClass.kt")
        public void testImplDataClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/implDataClass.kt");
        }

        @Test
        @TestMetadata("implOpenClass.kt")
        public void testImplOpenClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/implOpenClass.kt");
        }

        @Test
        @TestMetadata("morePermissiveVisibilityOnActualViaTypeAlias_finalMember.kt")
        public void testMorePermissiveVisibilityOnActualViaTypeAlias_finalMember() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActualViaTypeAlias_finalMember.kt");
        }

        @Test
        @TestMetadata("simpleHeaderClass.kt")
        public void testSimpleHeaderClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/headerClass/simpleHeaderClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp")
      @TestDataPath("$PROJECT_ROOT")
      public class Hmpp {
        @Test
        @TestMetadata("actualizationToExpectClass.kt")
        public void testActualizationToExpectClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/actualizationToExpectClass.kt");
        }

        @Test
        @TestMetadata("actualizedInPlatformSession.kt")
        public void testActualizedInPlatformSession() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/actualizedInPlatformSession.kt");
        }

        @Test
        @TestMetadata("intermediateActualHasAdditionalSupertypes.kt")
        public void testIntermediateActualHasAdditionalSupertypes() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/intermediateActualHasAdditionalSupertypes.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/simple.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class MultiplatformCompositeAnalysis {
          @Test
          @TestMetadata("intermediateWithActualAndExpect.kt")
          public void testIntermediateWithActualAndExpect() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/intermediateWithActualAndExpect.kt");
          }

          @Test
          @TestMetadata("sealedInheritorsCorrectExpect.kt")
          public void testSealedInheritorsCorrectExpect() {
            runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsCorrectExpect.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching")
          @TestDataPath("$PROJECT_ROOT")
          public class AnnotationMatching {
            @Test
            @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
            public void testSourceRetentionAnnotationsWhenTypealias() {
              runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/sourceRetentionAnnotationsWhenTypealias.kt");
            }

            @Test
            @TestMetadata("typealiasedAnnotation.kt")
            public void testTypealiasedAnnotation() {
              runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAnnotation.kt");
            }

            @Test
            @TestMetadata("typealiasedAnnotationAsArgument.kt")
            public void testTypealiasedAnnotationAsArgument() {
              runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAnnotationAsArgument.kt");
            }

            @Test
            @TestMetadata("typealiasedAsKClassArg.kt")
            public void testTypealiasedAsKClassArg() {
              runTest("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAsKClassArg.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClasses {
        @Test
        @TestMetadata("jvmInlineExpectValueClass.kt")
        public void testJvmInlineExpectValueClass() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/inlineClasses/jvmInlineExpectValueClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/java")
      @TestDataPath("$PROJECT_ROOT")
      public class Java {
        @Test
        @TestMetadata("flexibleTypes.kt")
        public void testFlexibleTypes() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/flexibleTypes.kt");
        }

        @Test
        @TestMetadata("inheritedJavaMembers.kt")
        public void testInheritedJavaMembers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/inheritedJavaMembers.kt");
        }

        @Test
        @TestMetadata("parameterNames.kt")
        public void testParameterNames() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/parameterNames.kt");
        }

        @Test
        @TestMetadata("propertyAgainstFakeOverrideInJava.kt")
        public void testPropertyAgainstFakeOverrideInJava() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstFakeOverrideInJava.kt");
        }

        @Test
        @TestMetadata("propertyAgainstFakeOverrideOfJavaField.kt")
        public void testPropertyAgainstFakeOverrideOfJavaField() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstFakeOverrideOfJavaField.kt");
        }

        @Test
        @TestMetadata("propertyAgainstJavaMethod.kt")
        public void testPropertyAgainstJavaMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaMethod.kt");
        }

        @Test
        @TestMetadata("propertyAgainstJavaPrivateFieldAndPublicMethod.kt")
        public void testPropertyAgainstJavaPrivateFieldAndPublicMethod() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaPrivateFieldAndPublicMethod.kt");
        }

        @Test
        @TestMetadata("propertyAgainstJavaPublicFieldAndPublicGetter.kt")
        public void testPropertyAgainstJavaPublicFieldAndPublicGetter() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaPublicFieldAndPublicGetter.kt");
        }

        @Test
        @TestMetadata("propertyAgainstValInJavaWithExtraSetter.kt")
        public void testPropertyAgainstValInJavaWithExtraSetter() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstValInJavaWithExtraSetter.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/scopes")
      @TestDataPath("$PROJECT_ROOT")
      public class Scopes {
        @Test
        @TestMetadata("actualAbstractClassWithAdditionalMembers.kt")
        public void testActualAbstractClassWithAdditionalMembers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualAbstractClassWithAdditionalMembers.kt");
        }

        @Test
        @TestMetadata("actualFakeOverride.kt")
        public void testActualFakeOverride() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride.kt");
        }

        @Test
        @TestMetadata("actualFakeOverrideVirtual.kt")
        public void testActualFakeOverrideVirtual() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverrideVirtual.kt");
        }

        @Test
        @TestMetadata("actualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams.kt")
        public void testActualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams.kt");
        }

        @Test
        @TestMetadata("actualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams.kt")
        public void testActualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams.kt");
        }

        @Test
        @TestMetadata("actualFakeOverride_transitiveFakeOverrides_compatible.kt")
        public void testActualFakeOverride_transitiveFakeOverrides_compatible() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_transitiveFakeOverrides_compatible.kt");
        }

        @Test
        @TestMetadata("defaultParams_inheritanceByDelegation_negative.kt")
        public void testDefaultParams_inheritanceByDelegation_negative() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/defaultParams_inheritanceByDelegation_negative.kt");
        }

        @Test
        @TestMetadata("implicitActualFakeOverride_simple.kt")
        public void testImplicitActualFakeOverride_simple() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/implicitActualFakeOverride_simple.kt");
        }

        @Test
        @TestMetadata("multipleExpectInterfacesImplementation.kt")
        public void testMultipleExpectInterfacesImplementation() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/scopes/multipleExpectInterfacesImplementation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelFun")
      @TestDataPath("$PROJECT_ROOT")
      public class TopLevelFun {
        @Test
        @TestMetadata("callHeaderFun.kt")
        public void testCallHeaderFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callHeaderFun.kt");
        }

        @Test
        @TestMetadata("callableReferenceOnExpectFun.kt")
        public void testCallableReferenceOnExpectFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callableReferenceOnExpectFun.kt");
        }

        @Test
        @TestMetadata("functionModifiers.kt")
        public void testFunctionModifiers() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/functionModifiers.kt");
        }

        @Test
        @TestMetadata("implWithoutHeader.kt")
        public void testImplWithoutHeader() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implWithoutHeader.kt");
        }

        @Test
        @TestMetadata("simpleHeaderFun.kt")
        public void testSimpleHeaderFun() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelFun/simpleHeaderFun.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty")
      @TestDataPath("$PROJECT_ROOT")
      public class TopLevelProperty {
        @Test
        @TestMetadata("simpleHeaderVar.kt")
        public void testSimpleHeaderVar() {
          runTest("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/simpleHeaderVar.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/namedArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class NamedArguments {
      @Test
      @TestMetadata("allowForJavaAnnotation.kt")
      public void testAllowForJavaAnnotation() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/allowForJavaAnnotation.kt");
      }

      @Test
      @TestMetadata("differentNamesForTheSameParametersInSupertypesForLibraryDependency.kt")
      public void testDifferentNamesForTheSameParametersInSupertypesForLibraryDependency() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/differentNamesForTheSameParametersInSupertypesForLibraryDependency.kt");
      }

      @Test
      @TestMetadata("namedArgumentsInOverloads.kt")
      public void testNamedArgumentsInOverloads() {
        runTest("compiler/testData/diagnostics/tests/namedArguments/namedArgumentsInOverloads.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition")
      @TestDataPath("$PROJECT_ROOT")
      public class MixedNamedPosition {
        @Test
        @TestMetadata("throwableNamedArguments.kt")
        public void testThrowableNamedArguments() {
          runTest("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/throwableNamedArguments.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts")
    @TestDataPath("$PROJECT_ROOT")
    public class NullabilityAndSmartCasts {
      @Test
      @TestMetadata("dataFlowInfoAfterExclExcl.kt")
      public void testDataFlowInfoAfterExclExcl() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/dataFlowInfoAfterExclExcl.kt");
      }

      @Test
      @TestMetadata("equalityUnderNotNullCheck.kt")
      public void testEqualityUnderNotNullCheck() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/equalityUnderNotNullCheck.kt");
      }

      @Test
      @TestMetadata("kt1680.kt")
      public void testKt1680() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1680.kt");
      }

      @Test
      @TestMetadata("kt2109.kt")
      public void testKt2109() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2109.kt");
      }

      @Test
      @TestMetadata("kt2195.kt")
      public void testKt2195() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2195.kt");
      }

      @Test
      @TestMetadata("kt2212.kt")
      public void testKt2212() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2212.kt");
      }

      @Test
      @TestMetadata("kt2223.kt")
      public void testKt2223() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2223.kt");
      }

      @Test
      @TestMetadata("kt2336.kt")
      public void testKt2336() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2336.kt");
      }

      @Test
      @TestMetadata("kt244.kt")
      public void testKt244() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt244.kt");
      }

      @Test
      @TestMetadata("kt30734.kt")
      public void testKt30734() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt30734.kt");
      }

      @Test
      @TestMetadata("noSenselessNullOnNullableType.kt")
      public void testNoSenselessNullOnNullableType() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/noSenselessNullOnNullableType.kt");
      }

      @Test
      @TestMetadata("notnullTypesFromJavaWithSmartcast.kt")
      public void testNotnullTypesFromJavaWithSmartcast() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/notnullTypesFromJavaWithSmartcast.kt");
      }

      @Test
      @TestMetadata("NullableNothingIsExactlyNull.kt")
      public void testNullableNothingIsExactlyNull() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/NullableNothingIsExactlyNull.kt");
      }

      @Test
      @TestMetadata("PreferExtensionsOnNullableReceiver.kt")
      public void testPreferExtensionsOnNullableReceiver() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/PreferExtensionsOnNullableReceiver.kt");
      }

      @Test
      @TestMetadata("SenselessNullInWhen.kt")
      public void testSenselessNullInWhen() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/SenselessNullInWhen.kt");
      }

      @Test
      @TestMetadata("senslessComparisonWithNullOnTypeParameters.kt")
      public void testSenslessComparisonWithNullOnTypeParameters() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/senslessComparisonWithNullOnTypeParameters.kt");
      }

      @Test
      @TestMetadata("smartCastReceiverWithGenerics.kt")
      public void testSmartCastReceiverWithGenerics() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/smartCastReceiverWithGenerics.kt");
      }

      @Test
      @TestMetadata("smartCastsAndBooleanExpressions.kt")
      public void testSmartCastsAndBooleanExpressions() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/smartCastsAndBooleanExpressions.kt");
      }

      @Test
      @TestMetadata("unnecessaryNotNullAssertion.kt")
      public void testUnnecessaryNotNullAssertion() {
        runTest("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unnecessaryNotNullAssertion.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/nullableTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class NullableTypes {
      @Test
      @TestMetadata("baseWithNullableUpperBound.kt")
      public void testBaseWithNullableUpperBound() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/baseWithNullableUpperBound.kt");
      }

      @Test
      @TestMetadata("definitelyNotNullWithNullableBound.kt")
      public void testDefinitelyNotNullWithNullableBound() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/definitelyNotNullWithNullableBound.kt");
      }

      @Test
      @TestMetadata("elvisOnUnit.kt")
      public void testElvisOnUnit() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/elvisOnUnit.kt");
      }

      @Test
      @TestMetadata("redundantNullable.kt")
      public void testRedundantNullable() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/redundantNullable.kt");
      }

      @Test
      @TestMetadata("safeAccessOnUnit.kt")
      public void testSafeAccessOnUnit() {
        runTest("compiler/testData/diagnostics/tests/nullableTypes/safeAccessOnUnit.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/numbers")
    @TestDataPath("$PROJECT_ROOT")
    public class Numbers {
      @Test
      @TestMetadata("kt41679.kt")
      public void testKt41679() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt41679.kt");
      }

      @Test
      @TestMetadata("kt47447.kt")
      public void testKt47447() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt47447.kt");
      }

      @Test
      @TestMetadata("kt47729.kt")
      public void testKt47729() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt47729.kt");
      }

      @Test
      @TestMetadata("kt47729_parenthesis.kt")
      public void testKt47729_parenthesis() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt47729_parenthesis.kt");
      }

      @Test
      @TestMetadata("kt48361.kt")
      public void testKt48361() {
        runTest("compiler/testData/diagnostics/tests/numbers/kt48361.kt");
      }

      @Test
      @TestMetadata("numberAsUnionAndIntersection.kt")
      public void testNumberAsUnionAndIntersection() {
        runTest("compiler/testData/diagnostics/tests/numbers/numberAsUnionAndIntersection.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/objects")
    @TestDataPath("$PROJECT_ROOT")
    public class Objects {
      @Test
      @TestMetadata("kt2240.kt")
      public void testKt2240() {
        runTest("compiler/testData/diagnostics/tests/objects/kt2240.kt");
      }

      @Test
      @TestMetadata("objectInsideFun.kt")
      public void testObjectInsideFun() {
        runTest("compiler/testData/diagnostics/tests/objects/objectInsideFun.kt");
      }

      @Test
      @TestMetadata("OpenInObject.kt")
      public void testOpenInObject() {
        runTest("compiler/testData/diagnostics/tests/objects/OpenInObject.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/objects/kt21515")
      @TestDataPath("$PROJECT_ROOT")
      public class Kt21515 {
        @Test
        @TestMetadata("callableReferenceComplexCasesWithImportsOld.kt")
        public void testCallableReferenceComplexCasesWithImportsOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferenceComplexCasesWithImportsOld.kt");
        }

        @Test
        @TestMetadata("callableReferencesComplexCasesWithQualificationOld.kt")
        public void testCallableReferencesComplexCasesWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesComplexCasesWithQualificationOld.kt");
        }

        @Test
        @TestMetadata("callableReferencesWithQualificationNew.kt")
        public void testCallableReferencesWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesWithQualificationNew.kt");
        }

        @Test
        @TestMetadata("callableReferencesWithQualificationOld.kt")
        public void testCallableReferencesWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesWithQualificationOld.kt");
        }

        @Test
        @TestMetadata("classifierFromCompanionObjectWithQualificationNew.kt")
        public void testClassifierFromCompanionObjectWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectWithQualificationNew.kt");
        }

        @Test
        @TestMetadata("classifierFromCompanionObjectWithQualificationOld.kt")
        public void testClassifierFromCompanionObjectWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectWithQualificationOld.kt");
        }

        @Test
        @TestMetadata("classifierIsVisibleByTwoPaths.kt")
        public void testClassifierIsVisibleByTwoPaths() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/classifierIsVisibleByTwoPaths.kt");
        }

        @Test
        @TestMetadata("inheritedFromDeprecatedWithQualificationNew.kt")
        public void testInheritedFromDeprecatedWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedWithQualificationNew.kt");
        }

        @Test
        @TestMetadata("inheritedFromDeprecatedWithQualificationOld.kt")
        public void testInheritedFromDeprecatedWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedWithQualificationOld.kt");
        }

        @Test
        @TestMetadata("useDeprecatedConstructorWithQualificationNew.kt")
        public void testUseDeprecatedConstructorWithQualificationNew() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorWithQualificationNew.kt");
        }

        @Test
        @TestMetadata("useDeprecatedConstructorWithQualificationOld.kt")
        public void testUseDeprecatedConstructorWithQualificationOld() {
          runTest("compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorWithQualificationOld.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/operatorRem")
    @TestDataPath("$PROJECT_ROOT")
    public class OperatorRem {
      @Test
      @TestMetadata("operatorRem.kt")
      public void testOperatorRem() {
        runTest("compiler/testData/diagnostics/tests/operatorRem/operatorRem.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading")
    @TestDataPath("$PROJECT_ROOT")
    public class OperatorsOverloading {
      @Test
      @TestMetadata("AssignOperatorWithExtensionForAny.kt")
      public void testAssignOperatorWithExtensionForAny() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorWithExtensionForAny.kt");
      }

      @Test
      @TestMetadata("augmentedAssignForJavaSyntheticProperty.kt")
      public void testAugmentedAssignForJavaSyntheticProperty() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/augmentedAssignForJavaSyntheticProperty.kt");
      }

      @Test
      @TestMetadata("EqualsOperatorOverrideHierarchies.kt")
      public void testEqualsOperatorOverrideHierarchies() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/EqualsOperatorOverrideHierarchies.kt");
      }

      @Test
      @TestMetadata("implicitInvokeOnPropertyInItsInitializer2.kt")
      public void testImplicitInvokeOnPropertyInItsInitializer2() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/implicitInvokeOnPropertyInItsInitializer2.kt");
      }

      @Test
      @TestMetadata("incForAssignmentSmartCast.kt")
      public void testIncForAssignmentSmartCast() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/incForAssignmentSmartCast.kt");
      }

      @Test
      @TestMetadata("kt13349.kt")
      public void testKt13349() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt13349.kt");
      }

      @Test
      @TestMetadata("kt3450.kt")
      public void testKt3450() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt3450.kt");
      }

      @Test
      @TestMetadata("kt45503_1.kt")
      public void testKt45503_1() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt45503_1.kt");
      }

      @Test
      @TestMetadata("kt45503_2.kt")
      public void testKt45503_2() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt45503_2.kt");
      }

      @Test
      @TestMetadata("kt45503_3.kt")
      public void testKt45503_3() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/kt45503_3.kt");
      }

      @Test
      @TestMetadata("plusAssignOnVarAndCollections.kt")
      public void testPlusAssignOnVarAndCollections() {
        runTest("compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnVarAndCollections.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading/until")
      @TestDataPath("$PROJECT_ROOT")
      public class Until {
        @Test
        @TestMetadata("custom.kt")
        public void testCustom() {
          runTest("compiler/testData/diagnostics/tests/operatorsOverloading/until/custom.kt");
        }

        @Test
        @TestMetadata("customDefault.kt")
        public void testCustomDefault() {
          runTest("compiler/testData/diagnostics/tests/operatorsOverloading/until/customDefault.kt");
        }

        @Test
        @TestMetadata("customDisabled.kt")
        public void testCustomDisabled() {
          runTest("compiler/testData/diagnostics/tests/operatorsOverloading/until/customDisabled.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/operatorsOverloading/until/simple.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/overload")
    @TestDataPath("$PROJECT_ROOT")
    public class Overload {
      @Test
      @TestMetadata("disambiguateByNumberOfLambdaArgument.kt")
      public void testDisambiguateByNumberOfLambdaArgument() {
        runTest("compiler/testData/diagnostics/tests/overload/disambiguateByNumberOfLambdaArgument.kt");
      }

      @Test
      @TestMetadata("doubleWinsOverFloat.kt")
      public void testDoubleWinsOverFloat() {
        runTest("compiler/testData/diagnostics/tests/overload/doubleWinsOverFloat.kt");
      }

      @Test
      @TestMetadata("EmptyArgumentListInLambda.kt")
      public void testEmptyArgumentListInLambda() {
        runTest("compiler/testData/diagnostics/tests/overload/EmptyArgumentListInLambda.kt");
      }

      @Test
      @TestMetadata("ExtFunDifferentReceiver.kt")
      public void testExtFunDifferentReceiver() {
        runTest("compiler/testData/diagnostics/tests/overload/ExtFunDifferentReceiver.kt");
      }

      @Test
      @TestMetadata("FunNoConflictInDifferentPackages.kt")
      public void testFunNoConflictInDifferentPackages() {
        runTest("compiler/testData/diagnostics/tests/overload/FunNoConflictInDifferentPackages.kt");
      }

      @Test
      @TestMetadata("kt10939.kt")
      public void testKt10939() {
        runTest("compiler/testData/diagnostics/tests/overload/kt10939.kt");
      }

      @Test
      @TestMetadata("kt1998.kt")
      public void testKt1998() {
        runTest("compiler/testData/diagnostics/tests/overload/kt1998.kt");
      }

      @Test
      @TestMetadata("kt61168WithFix.kt")
      public void testKt61168WithFix() {
        runTest("compiler/testData/diagnostics/tests/overload/kt61168WithFix.kt");
      }

      @Test
      @TestMetadata("kt7068.kt")
      public void testKt7068() {
        runTest("compiler/testData/diagnostics/tests/overload/kt7068.kt");
      }

      @Test
      @TestMetadata("kt7068_2.kt")
      public void testKt7068_2() {
        runTest("compiler/testData/diagnostics/tests/overload/kt7068_2.kt");
      }

      @Test
      @TestMetadata("kt7440.kt")
      public void testKt7440() {
        runTest("compiler/testData/diagnostics/tests/overload/kt7440.kt");
      }

      @Test
      @TestMetadata("lambdasWithDifferentParameterNumber.kt")
      public void testLambdasWithDifferentParameterNumber() {
        runTest("compiler/testData/diagnostics/tests/overload/lambdasWithDifferentParameterNumber.kt");
      }

      @Test
      @TestMetadata("OverloadFunRegularAndExt.kt")
      public void testOverloadFunRegularAndExt() {
        runTest("compiler/testData/diagnostics/tests/overload/OverloadFunRegularAndExt.kt");
      }

      @Test
      @TestMetadata("OverloadVarAndFunInClass.kt")
      public void testOverloadVarAndFunInClass() {
        runTest("compiler/testData/diagnostics/tests/overload/OverloadVarAndFunInClass.kt");
      }

      @Test
      @TestMetadata("overloadsFromCurrentAndSuperClass.kt")
      public void testOverloadsFromCurrentAndSuperClass() {
        runTest("compiler/testData/diagnostics/tests/overload/overloadsFromCurrentAndSuperClass.kt");
      }

      @Test
      @TestMetadata("overloadsFromCurrentAndSuperClassWithReturnType.kt")
      public void testOverloadsFromCurrentAndSuperClassWithReturnType() {
        runTest("compiler/testData/diagnostics/tests/overload/overloadsFromCurrentAndSuperClassWithReturnType.kt");
      }

      @Test
      @TestMetadata("SyntheticAndNotSynthetic.kt")
      public void testSyntheticAndNotSynthetic() {
        runTest("compiler/testData/diagnostics/tests/overload/SyntheticAndNotSynthetic.kt");
      }

      @Test
      @TestMetadata("UnsubstitutedJavaGenetics.kt")
      public void testUnsubstitutedJavaGenetics() {
        runTest("compiler/testData/diagnostics/tests/overload/UnsubstitutedJavaGenetics.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden")
      @TestDataPath("$PROJECT_ROOT")
      public class NoConflictingOverloadsWithDeprecatedHidden {
        @Test
        @TestMetadata("ConflictingOverloadsValsDifferentTypeInClass.kt")
        public void testConflictingOverloadsValsDifferentTypeInClass() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConflictingOverloadsValsDifferentTypeInClass.kt");
        }

        @Test
        @TestMetadata("ConstructorVsFunOverload.kt")
        public void testConstructorVsFunOverload() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConstructorVsFunOverload.kt");
        }

        @Test
        @TestMetadata("FunctionsAndConstructorsInMemberScope.kt")
        public void testFunctionsAndConstructorsInMemberScope() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsAndConstructorsInMemberScope.kt");
        }

        @Test
        @TestMetadata("FunctionsAndConstructorsInPackage.kt")
        public void testFunctionsAndConstructorsInPackage() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsAndConstructorsInPackage.kt");
        }

        @Test
        @TestMetadata("FunctionsAndConstructorsOnTopLevel.kt")
        public void testFunctionsAndConstructorsOnTopLevel() {
          runTest("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/FunctionsAndConstructorsOnTopLevel.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/override")
    @TestDataPath("$PROJECT_ROOT")
    public class Override {
      @Test
      @TestMetadata("AbstractFunImplemented.kt")
      public void testAbstractFunImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractFunImplemented.kt");
      }

      @Test
      @TestMetadata("AbstractValImplemented.kt")
      public void testAbstractValImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractValImplemented.kt");
      }

      @Test
      @TestMetadata("AbstractVarImplemented.kt")
      public void testAbstractVarImplemented() {
        runTest("compiler/testData/diagnostics/tests/override/AbstractVarImplemented.kt");
      }

      @Test
      @TestMetadata("DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt")
      public void testDefaultParameterValues_NoErrorsWhenInheritingFromOneTypeTwice() {
        runTest("compiler/testData/diagnostics/tests/override/DefaultParameterValues-NoErrorsWhenInheritingFromOneTypeTwice.kt");
      }

      @Test
      @TestMetadata("DelegationFun.kt")
      public void testDelegationFun() {
        runTest("compiler/testData/diagnostics/tests/override/DelegationFun.kt");
      }

      @Test
      @TestMetadata("DelegationVal.kt")
      public void testDelegationVal() {
        runTest("compiler/testData/diagnostics/tests/override/DelegationVal.kt");
      }

      @Test
      @TestMetadata("DelegationVar.kt")
      public void testDelegationVar() {
        runTest("compiler/testData/diagnostics/tests/override/DelegationVar.kt");
      }

      @Test
      @TestMetadata("diamondWithDiagonal.kt")
      public void testDiamondWithDiagonal() {
        runTest("compiler/testData/diagnostics/tests/override/diamondWithDiagonal.kt");
      }

      @Test
      @TestMetadata("dnnOverridesFlexibleDnnRepresentation.kt")
      public void testDnnOverridesFlexibleDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/override/dnnOverridesFlexibleDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("EqualityOfIntersectionTypes.kt")
      public void testEqualityOfIntersectionTypes() {
        runTest("compiler/testData/diagnostics/tests/override/EqualityOfIntersectionTypes.kt");
      }

      @Test
      @TestMetadata("fakeEquals.kt")
      public void testFakeEquals() {
        runTest("compiler/testData/diagnostics/tests/override/fakeEquals.kt");
      }

      @Test
      @TestMetadata("FakeOverrideAbstractAndNonAbstractFun.kt")
      public void testFakeOverrideAbstractAndNonAbstractFun() {
        runTest("compiler/testData/diagnostics/tests/override/FakeOverrideAbstractAndNonAbstractFun.kt");
      }

      @Test
      @TestMetadata("InheritingJavaClassWithRawTypeInOverrideSignature.kt")
      public void testInheritingJavaClassWithRawTypeInOverrideSignature() {
        runTest("compiler/testData/diagnostics/tests/override/InheritingJavaClassWithRawTypeInOverrideSignature.kt");
      }

      @Test
      @TestMetadata("InternalPotentialOverride.kt")
      public void testInternalPotentialOverride() {
        runTest("compiler/testData/diagnostics/tests/override/InternalPotentialOverride.kt");
      }

      @Test
      @TestMetadata("intersectionOfAbstractAndOpen.kt")
      public void testIntersectionOfAbstractAndOpen() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOfAbstractAndOpen.kt");
      }

      @Test
      @TestMetadata("intersectionOfSubstitutedProperties.kt")
      public void testIntersectionOfSubstitutedProperties() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOfSubstitutedProperties.kt");
      }

      @Test
      @TestMetadata("intersectionOverrideWithProtectedAbstract.kt")
      public void testIntersectionOverrideWithProtectedAbstract() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOverrideWithProtectedAbstract.kt");
      }

      @Test
      @TestMetadata("intersectionOverrideWithSubsumedDifferentType.kt")
      public void testIntersectionOverrideWithSubsumedDifferentType() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOverrideWithSubsumedDifferentType.kt");
      }

      @Test
      @TestMetadata("intersectionOverridesIntersection.kt")
      public void testIntersectionOverridesIntersection() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionOverridesIntersection.kt");
      }

      @Test
      @TestMetadata("intersectionWithSubsumedWithSubstitution.kt")
      public void testIntersectionWithSubsumedWithSubstitution() {
        runTest("compiler/testData/diagnostics/tests/override/intersectionWithSubsumedWithSubstitution.kt");
      }

      @Test
      @TestMetadata("InvisiblePotentialOverride.kt")
      public void testInvisiblePotentialOverride() {
        runTest("compiler/testData/diagnostics/tests/override/InvisiblePotentialOverride.kt");
      }

      @Test
      @TestMetadata("kt53408.kt")
      public void testKt53408() {
        runTest("compiler/testData/diagnostics/tests/override/kt53408.kt");
      }

      @Test
      @TestMetadata("kt6014.kt")
      public void testKt6014() {
        runTest("compiler/testData/diagnostics/tests/override/kt6014.kt");
      }

      @Test
      @TestMetadata("kt880.kt")
      public void testKt880() {
        runTest("compiler/testData/diagnostics/tests/override/kt880.kt");
      }

      @Test
      @TestMetadata("kt8990.kt")
      public void testKt8990() {
        runTest("compiler/testData/diagnostics/tests/override/kt8990.kt");
      }

      @Test
      @TestMetadata("manyImplFromOneJavaInterfaceWithDelegation.kt")
      public void testManyImplFromOneJavaInterfaceWithDelegation() {
        runTest("compiler/testData/diagnostics/tests/override/manyImplFromOneJavaInterfaceWithDelegation.kt");
      }

      @Test
      @TestMetadata("MultipleDefaultParametersInSupertypesWithOverloads.kt")
      public void testMultipleDefaultParametersInSupertypesWithOverloads() {
        runTest("compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypesWithOverloads.kt");
      }

      @Test
      @TestMetadata("ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt")
      public void testParameterDefaultValues_DefaultValueFromOnlyOneSupertype() {
        runTest("compiler/testData/diagnostics/tests/override/ParameterDefaultValues-DefaultValueFromOnlyOneSupertype.kt");
      }

      @Test
      @TestMetadata("PropertyInConstructor.kt")
      public void testPropertyInConstructor() {
        runTest("compiler/testData/diagnostics/tests/override/PropertyInConstructor.kt");
      }

      @Test
      @TestMetadata("SuspiciousCase1.kt")
      public void testSuspiciousCase1() {
        runTest("compiler/testData/diagnostics/tests/override/SuspiciousCase1.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/clashesOnInheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class ClashesOnInheritance {
        @Test
        @TestMetadata("flexibleReturnType.kt")
        public void testFlexibleReturnType() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnType.kt");
        }

        @Test
        @TestMetadata("flexibleReturnTypeIn.kt")
        public void testFlexibleReturnTypeIn() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnTypeIn.kt");
        }

        @Test
        @TestMetadata("genericWithUpperBound.kt")
        public void testGenericWithUpperBound() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/genericWithUpperBound.kt");
        }

        @Test
        @TestMetadata("intersectionReturnTypeMismatchSubsumed.kt")
        public void testIntersectionReturnTypeMismatchSubsumed() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/intersectionReturnTypeMismatchSubsumed.kt");
        }

        @Test
        @TestMetadata("kt68546.kt")
        public void testKt68546() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt68546.kt");
        }

        @Test
        @TestMetadata("kt68626.kt")
        public void testKt68626() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt68626.kt");
        }

        @Test
        @TestMetadata("noFalsePositiveConflictingOverloadsOnSubstitution.kt")
        public void testNoFalsePositiveConflictingOverloadsOnSubstitution() {
          runTest("compiler/testData/diagnostics/tests/override/clashesOnInheritance/noFalsePositiveConflictingOverloadsOnSubstitution.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/derivedClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class DerivedClasses {
        @Test
        @TestMetadata("Constructor.kt")
        public void testConstructor() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/Constructor.kt");
        }

        @Test
        @TestMetadata("DelegatedConstructor.kt")
        public void testDelegatedConstructor() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/DelegatedConstructor.kt");
        }

        @Test
        @TestMetadata("EnumValues.kt")
        public void testEnumValues() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/EnumValues.kt");
        }

        @Test
        @TestMetadata("Instance.kt")
        public void testInstance() {
          runTest("compiler/testData/diagnostics/tests/override/derivedClasses/Instance.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/parameterNames")
      @TestDataPath("$PROJECT_ROOT")
      public class ParameterNames {
        @Test
        @TestMetadata("changeOnOverrideDiagnostic.kt")
        public void testChangeOnOverrideDiagnostic() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/changeOnOverrideDiagnostic.kt");
        }

        @Test
        @TestMetadata("differentNamesInSupertypesDiagnostic.kt")
        public void testDifferentNamesInSupertypesDiagnostic() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/differentNamesInSupertypesDiagnostic.kt");
        }

        @Test
        @TestMetadata("jjkHierarchy.kt")
        public void testJjkHierarchy() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/jjkHierarchy.kt");
        }

        @Test
        @TestMetadata("kjkHierarchy.kt")
        public void testKjkHierarchy() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/kjkHierarchy.kt");
        }

        @Test
        @TestMetadata("kjkWithSeveralSupers.kt")
        public void testKjkWithSeveralSupers() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/kjkWithSeveralSupers.kt");
        }

        @Test
        @TestMetadata("kotlinInheritsJava.kt")
        public void testKotlinInheritsJava() {
          runTest("compiler/testData/diagnostics/tests/override/parameterNames/kotlinInheritsJava.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/typeParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeParameters {
        @Test
        @TestMetadata("classAndTwoInterfaceBounds.kt")
        public void testClassAndTwoInterfaceBounds() {
          runTest("compiler/testData/diagnostics/tests/override/typeParameters/classAndTwoInterfaceBounds.kt");
        }

        @Test
        @TestMetadata("kt9850.kt")
        public void testKt9850() {
          runTest("compiler/testData/diagnostics/tests/override/typeParameters/kt9850.kt");
        }

        @Test
        @TestMetadata("simpleVisitorTwoAccepts.kt")
        public void testSimpleVisitorTwoAccepts() {
          runTest("compiler/testData/diagnostics/tests/override/typeParameters/simpleVisitorTwoAccepts.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/parenthesizedTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class ParenthesizedTypes {
      @Test
      @TestMetadata("annotationsOnNullableParenthesizedTypes.kt")
      public void testAnnotationsOnNullableParenthesizedTypes() {
        runTest("compiler/testData/diagnostics/tests/parenthesizedTypes/annotationsOnNullableParenthesizedTypes.kt");
      }

      @Test
      @TestMetadata("annotationsOnParenthesizedTypes.kt")
      public void testAnnotationsOnParenthesizedTypes() {
        runTest("compiler/testData/diagnostics/tests/parenthesizedTypes/annotationsOnParenthesizedTypes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/platformTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class PlatformTypes {
      @Test
      @TestMetadata("comparingWithWrongNullability.kt")
      public void testComparingWithWrongNullability() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/comparingWithWrongNullability.kt");
      }

      @Test
      @TestMetadata("comparingWithWrongNullabilityDnnRepresentation.kt")
      public void testComparingWithWrongNullabilityDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/comparingWithWrongNullabilityDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("delegateByComplexInheritance.kt")
      public void testDelegateByComplexInheritance() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/delegateByComplexInheritance.kt");
      }

      @Test
      @TestMetadata("elvis.kt")
      public void testElvis() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/elvis.kt");
      }

      @Test
      @TestMetadata("getParentOfType.kt")
      public void testGetParentOfType() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/getParentOfType.kt");
      }

      @Test
      @TestMetadata("kt50877.kt")
      public void testKt50877() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/kt50877.kt");
      }

      @Test
      @TestMetadata("methodTypeParameterDefaultBound.kt")
      public void testMethodTypeParameterDefaultBound() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/methodTypeParameterDefaultBound.kt");
      }

      @Test
      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/override.kt");
      }

      @Test
      @TestMetadata("propagateFlexibilityFromOtherConstraints.kt")
      public void testPropagateFlexibilityFromOtherConstraints() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/propagateFlexibilityFromOtherConstraints.kt");
      }

      @Test
      @TestMetadata("samAdapterInConstructor.kt")
      public void testSamAdapterInConstructor() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/samAdapterInConstructor.kt");
      }

      @Test
      @TestMetadata("samConstructor.kt")
      public void testSamConstructor() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/samConstructor.kt");
      }

      @Test
      @TestMetadata("starProjectionToFlexibleVariable.kt")
      public void testStarProjectionToFlexibleVariable() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/starProjectionToFlexibleVariable.kt");
      }

      @Test
      @TestMetadata("supertypeTypeArguments.kt")
      public void testSupertypeTypeArguments() {
        runTest("compiler/testData/diagnostics/tests/platformTypes/supertypeTypeArguments.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype")
      @TestDataPath("$PROJECT_ROOT")
      public class CommonSupertype {
        @Test
        @TestMetadata("collectionOrNull.kt")
        public void testCollectionOrNull() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/collectionOrNull.kt");
        }

        @Test
        @TestMetadata("inferenceWithBound.kt")
        public void testInferenceWithBound() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/inferenceWithBound.kt");
        }

        @Test
        @TestMetadata("recursiveGeneric.kt")
        public void testRecursiveGeneric() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/recursiveGeneric.kt");
        }

        @Test
        @TestMetadata("stringOrNull.kt")
        public void testStringOrNull() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/stringOrNull.kt");
        }

        @Test
        @TestMetadata("typeOfElvis.kt")
        public void testTypeOfElvis() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/commonSupertype/typeOfElvis.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation")
      @TestDataPath("$PROJECT_ROOT")
      public class GenericVarianceViolation {
        @Test
        @TestMetadata("inferenceFrom.kt")
        public void testInferenceFrom() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/inferenceFrom.kt");
        }

        @Test
        @TestMetadata("rawTypes.kt")
        public void testRawTypes() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/rawTypes.kt");
        }

        @Test
        @TestMetadata("userDefinedOut.kt")
        public void testUserDefinedOut() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/userDefinedOut.kt");
        }

        @Test
        @TestMetadata("wildcards.kt")
        public void testWildcards() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/wildcards.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall")
      @TestDataPath("$PROJECT_ROOT")
      public class MethodCall {
        @Test
        @TestMetadata("entrySet.kt")
        public void testEntrySet() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/entrySet.kt");
        }

        @Test
        @TestMetadata("flexibilityThroughTypeVariable.kt")
        public void testFlexibilityThroughTypeVariable() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/flexibilityThroughTypeVariable.kt");
        }

        @Test
        @TestMetadata("flexibilityThroughTypeVariableOut.kt")
        public void testFlexibilityThroughTypeVariableOut() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/flexibilityThroughTypeVariableOut.kt");
        }

        @Test
        @TestMetadata("genericsAndArrays.kt")
        public void testGenericsAndArrays() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/genericsAndArrays.kt");
        }

        @Test
        @TestMetadata("intArray.kt")
        public void testIntArray() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/intArray.kt");
        }

        @Test
        @TestMetadata("javaCollectionToKotlin.kt")
        public void testJavaCollectionToKotlin() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaCollectionToKotlin.kt");
        }

        @Test
        @TestMetadata("javaToJava.kt")
        public void testJavaToJava() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaToJava.kt");
        }

        @Test
        @TestMetadata("javaToKotlin.kt")
        public void testJavaToKotlin() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/javaToKotlin.kt");
        }

        @Test
        @TestMetadata("kotlinCollectionToJava.kt")
        public void testKotlinCollectionToJava() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/kotlinCollectionToJava.kt");
        }

        @Test
        @TestMetadata("kt27565.kt")
        public void testKt27565() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/kt27565.kt");
        }

        @Test
        @TestMetadata("list.kt")
        public void testList() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/list.kt");
        }

        @Test
        @TestMetadata("multipleExactBounds.kt")
        public void testMultipleExactBounds() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/multipleExactBounds.kt");
        }

        @Test
        @TestMetadata("multipleExactBoundsNullable.kt")
        public void testMultipleExactBoundsNullable() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/multipleExactBoundsNullable.kt");
        }

        @Test
        @TestMetadata("overloadingForSubclass.kt")
        public void testOverloadingForSubclass() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/overloadingForSubclass.kt");
        }

        @Test
        @TestMetadata("sam.kt")
        public void testSam() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/sam.kt");
        }

        @Test
        @TestMetadata("singletonDnnRepresentation.kt")
        public void testSingletonDnnRepresentation() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/singletonDnnRepresentation.kt");
        }

        @Test
        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/string.kt");
        }

        @Test
        @TestMetadata("visitor.kt")
        public void testVisitor() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/methodCall/visitor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class NotNullTypeParameter {
        @Test
        @TestMetadata("enhancementFromKotlin.kt")
        public void testEnhancementFromKotlin() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/enhancementFromKotlin.kt");
        }

        @Test
        @TestMetadata("noInheritanceReturnType.kt")
        public void testNoInheritanceReturnType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/noInheritanceReturnType.kt");
        }

        @Test
        @TestMetadata("onTypeProjection.kt")
        public void testOnTypeProjection() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/onTypeProjection.kt");
        }

        @Test
        @TestMetadata("supplier.kt")
        public void testSupplier() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/supplier.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings")
      @TestDataPath("$PROJECT_ROOT")
      public class NullabilityWarnings {
        @Test
        @TestMetadata("inferenceInConditionals.kt")
        public void testInferenceInConditionals() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/inferenceInConditionals.kt");
        }

        @Test
        @TestMetadata("noWarningOnDoubleElvis.kt")
        public void testNoWarningOnDoubleElvis() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/noWarningOnDoubleElvis.kt");
        }

        @Test
        @TestMetadata("notNullAfterSafeCall.kt")
        public void testNotNullAfterSafeCall() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAfterSafeCall.kt");
        }

        @Test
        @TestMetadata("notNullAssertion.kt")
        public void testNotNullAssertion() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAssertion.kt");
        }

        @Test
        @TestMetadata("notNullAssertionInCall.kt")
        public void testNotNullAssertionInCall() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullAssertionInCall.kt");
        }

        @Test
        @TestMetadata("notNullTypeMarkedWithNullableAnnotation.kt")
        public void testNotNullTypeMarkedWithNullableAnnotation() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/notNullTypeMarkedWithNullableAnnotation.kt");
        }

        @Test
        @TestMetadata("safeCall.kt")
        public void testSafeCall() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/safeCall.kt");
        }

        @Test
        @TestMetadata("senselessComparisonEquals.kt")
        public void testSenselessComparisonEquals() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/senselessComparisonEquals.kt");
        }

        @Test
        @TestMetadata("senselessComparisonIdentityEquals.kt")
        public void testSenselessComparisonIdentityEquals() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/senselessComparisonIdentityEquals.kt");
        }

        @Test
        @TestMetadata("uselessElvisInCall.kt")
        public void testUselessElvisInCall() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/uselessElvisInCall.kt");
        }

        @Test
        @TestMetadata("uselessElvisRightIsNull.kt")
        public void testUselessElvisRightIsNull() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/uselessElvisRightIsNull.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/rawTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class RawTypes {
        @Test
        @TestMetadata("dontSubstituteAnotherErasedRecursiveTypeArgumentAndNonRecursive.kt")
        public void testDontSubstituteAnotherErasedRecursiveTypeArgumentAndNonRecursive() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/dontSubstituteAnotherErasedRecursiveTypeArgumentAndNonRecursive.kt");
        }

        @Test
        @TestMetadata("dontSubstituteAnotherErasedTypeArgumentIfRecursive.kt")
        public void testDontSubstituteAnotherErasedTypeArgumentIfRecursive() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/dontSubstituteAnotherErasedTypeArgumentIfRecursive.kt");
        }

        @Test
        @TestMetadata("errorType.kt")
        public void testErrorType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/errorType.kt");
        }

        @Test
        @TestMetadata("genericInnerClass.kt")
        public void testGenericInnerClass() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/genericInnerClass.kt");
        }

        @Test
        @TestMetadata("interClassesRecursion.kt")
        public void testInterClassesRecursion() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/interClassesRecursion.kt");
        }

        @Test
        @TestMetadata("interdependentTypeParameters.kt")
        public void testInterdependentTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/interdependentTypeParameters.kt");
        }

        @Test
        @TestMetadata("interdependentTypeParametersFromKotlin.kt")
        public void testInterdependentTypeParametersFromKotlin() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/interdependentTypeParametersFromKotlin.kt");
        }

        @Test
        @TestMetadata("intermediateRecursion.kt")
        public void testIntermediateRecursion() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/intermediateRecursion.kt");
        }

        @Test
        @TestMetadata("kt47459.kt")
        public void testKt47459() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/kt47459.kt");
        }

        @Test
        @TestMetadata("lostRawTypeAfterElvis.kt")
        public void testLostRawTypeAfterElvis() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/lostRawTypeAfterElvis.kt");
        }

        @Test
        @TestMetadata("noTypeArgumentsForRawScopedMembers.kt")
        public void testNoTypeArgumentsForRawScopedMembers() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/noTypeArgumentsForRawScopedMembers.kt");
        }

        @Test
        @TestMetadata("nonProjectedInnerErasure.kt")
        public void testNonProjectedInnerErasure() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonProjectedInnerErasure.kt");
        }

        @Test
        @TestMetadata("nonRawArraysInRawType.kt")
        public void testNonRawArraysInRawType() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonRawArraysInRawType.kt");
        }

        @Test
        @TestMetadata("rawEnhancment.kt")
        public void testRawEnhancment() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawEnhancment.kt");
        }

        @Test
        @TestMetadata("rawSupertype.kt")
        public void testRawSupertype() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawSupertype.kt");
        }

        @Test
        @TestMetadata("rawTypeInUpperBound.kt")
        public void testRawTypeInUpperBound() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawTypeInUpperBound.kt");
        }

        @Test
        @TestMetadata("rawWithInProjection.kt")
        public void testRawWithInProjection() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawWithInProjection.kt");
        }

        @Test
        @TestMetadata("recursiveBound.kt")
        public void testRecursiveBound() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/recursiveBound.kt");
        }

        @Test
        @TestMetadata("samRaw.kt")
        public void testSamRaw() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/samRaw.kt");
        }

        @Test
        @TestMetadata("saveRawCapabilitiesAfterSubtitution.kt")
        public void testSaveRawCapabilitiesAfterSubtitution() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/saveRawCapabilitiesAfterSubtitution.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/simple.kt");
        }

        @Test
        @TestMetadata("smartCastToClassWithRawSupertype.kt")
        public void testSmartCastToClassWithRawSupertype() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/smartCastToClassWithRawSupertype.kt");
        }

        @Test
        @TestMetadata("starProjectionToRaw.kt")
        public void testStarProjectionToRaw() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/starProjectionToRaw.kt");
        }

        @Test
        @TestMetadata("substituteAnotherErasedTypeArgument.kt")
        public void testSubstituteAnotherErasedTypeArgument() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/substituteAnotherErasedTypeArgument.kt");
        }

        @Test
        @TestMetadata("substituteOtherErasedDeepTypeArguments.kt")
        public void testSubstituteOtherErasedDeepTypeArguments() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/substituteOtherErasedDeepTypeArguments.kt");
        }

        @Test
        @TestMetadata("substituteSeveralOtherErasedDependentTypeArguments.kt")
        public void testSubstituteSeveralOtherErasedDependentTypeArguments() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/substituteSeveralOtherErasedDependentTypeArguments.kt");
        }

        @Test
        @TestMetadata("substituteSeveralOtherErasedTypeArguments.kt")
        public void testSubstituteSeveralOtherErasedTypeArguments() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/substituteSeveralOtherErasedTypeArguments.kt");
        }

        @Test
        @TestMetadata("superTypeErasion.kt")
        public void testSuperTypeErasion() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/rawTypes/superTypeErasion.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeEnhancement {
        @Test
        @TestMetadata("buildFlexibleEnhancement.kt")
        public void testBuildFlexibleEnhancement() {
          runTest("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/buildFlexibleEnhancement.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/privateInFile")
    @TestDataPath("$PROJECT_ROOT")
    public class PrivateInFile {
      @Test
      @TestMetadata("kt12429.kt")
      public void testKt12429() {
        runTest("compiler/testData/diagnostics/tests/privateInFile/kt12429.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties {
      @Test
      @TestMetadata("constAnnotationCycle.kt")
      public void testConstAnnotationCycle() {
        runTest("compiler/testData/diagnostics/tests/properties/constAnnotationCycle.kt");
      }

      @Test
      @TestMetadata("getterTypeDiffersByAnnotation.kt")
      public void testGetterTypeDiffersByAnnotation() {
        runTest("compiler/testData/diagnostics/tests/properties/getterTypeDiffersByAnnotation.kt");
      }

      @Test
      @TestMetadata("inferPropertyTypeFromGetter.kt")
      public void testInferPropertyTypeFromGetter() {
        runTest("compiler/testData/diagnostics/tests/properties/inferPropertyTypeFromGetter.kt");
      }

      @Test
      @TestMetadata("kt56707.kt")
      public void testKt56707() {
        runTest("compiler/testData/diagnostics/tests/properties/kt56707.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/qualifiedExpression")
    @TestDataPath("$PROJECT_ROOT")
    public class QualifiedExpression {
      @Test
      @TestMetadata("JavaQualifier.kt")
      public void testJavaQualifier() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/JavaQualifier.kt");
      }

      @Test
      @TestMetadata("PackageVsRootClass.kt")
      public void testPackageVsRootClass() {
        runTest("compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsRootClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/rawTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class RawTypes {
      @Test
      @TestMetadata("rawTypeOverrides.kt")
      public void testRawTypeOverrides() {
        runTest("compiler/testData/diagnostics/tests/rawTypes/rawTypeOverrides.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/reassignment")
    @TestDataPath("$PROJECT_ROOT")
    public class Reassignment {
      @Test
      @TestMetadata("noifelse.kt")
      public void testNoifelse() {
        runTest("compiler/testData/diagnostics/tests/reassignment/noifelse.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/redeclarations")
    @TestDataPath("$PROJECT_ROOT")
    public class Redeclarations {
      @Test
      @TestMetadata("ClassifierRedeclaresLibPackage.kt")
      public void testClassifierRedeclaresLibPackage() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/ClassifierRedeclaresLibPackage.kt");
      }

      @Test
      @TestMetadata("NoRedeclarationForClassesInDefaultObject.kt")
      public void testNoRedeclarationForClassesInDefaultObject() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/NoRedeclarationForClassesInDefaultObject.kt");
      }

      @Test
      @TestMetadata("NoRedeclarationForEnumEntriesAndDefaultObjectMembers.kt")
      public void testNoRedeclarationForEnumEntriesAndDefaultObjectMembers() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/NoRedeclarationForEnumEntriesAndDefaultObjectMembers.kt");
      }

      @Test
      @TestMetadata("PackageRedeclaredByCallable.kt")
      public void testPackageRedeclaredByCallable() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/PackageRedeclaredByCallable.kt");
      }

      @Test
      @TestMetadata("PackageRedeclaredByClassInAnotherModule.kt")
      public void testPackageRedeclaredByClassInAnotherModule() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/PackageRedeclaredByClassInAnotherModule.kt");
      }

      @Test
      @TestMetadata("PackageRedeclaredByClassInFriendModule.kt")
      public void testPackageRedeclaredByClassInFriendModule() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/PackageRedeclaredByClassInFriendModule.kt");
      }

      @Test
      @TestMetadata("PackageRedeclaredByJavaClass.kt")
      public void testPackageRedeclaredByJavaClass() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/PackageRedeclaredByJavaClass.kt");
      }

      @Test
      @TestMetadata("PackageRedeclaresLibClass.kt")
      public void testPackageRedeclaresLibClass() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/PackageRedeclaresLibClass.kt");
      }

      @Test
      @TestMetadata("PropertyAndFunInClass.kt")
      public void testPropertyAndFunInClass() {
        runTest("compiler/testData/diagnostics/tests/redeclarations/PropertyAndFunInClass.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension")
      @TestDataPath("$PROJECT_ROOT")
      public class ShadowedExtension {
        @Test
        @TestMetadata("extensionFunShadowedByInnerClassConstructor.kt")
        public void testExtensionFunShadowedByInnerClassConstructor() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByInnerClassConstructor.kt");
        }

        @Test
        @TestMetadata("extensionFunShadowedByMemberFun.kt")
        public void testExtensionFunShadowedByMemberFun() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByMemberFun.kt");
        }

        @Test
        @TestMetadata("extensionFunShadowedByMemberPropertyWithInvoke.kt")
        public void testExtensionFunShadowedByMemberPropertyWithInvoke() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedByMemberPropertyWithInvoke.kt");
        }

        @Test
        @TestMetadata("extensionFunShadowedBySynthesizedMemberFun.kt")
        public void testExtensionFunShadowedBySynthesizedMemberFun() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunShadowedBySynthesizedMemberFun.kt");
        }

        @Test
        @TestMetadata("extensionFunVsMemberExtensionFun.kt")
        public void testExtensionFunVsMemberExtensionFun() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionFunVsMemberExtensionFun.kt");
        }

        @Test
        @TestMetadata("extensionOnNullableReceiver.kt")
        public void testExtensionOnNullableReceiver() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionOnNullableReceiver.kt");
        }

        @Test
        @TestMetadata("extensionPropertyShadowedByMemberProperty.kt")
        public void testExtensionPropertyShadowedByMemberProperty() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionPropertyShadowedByMemberProperty.kt");
        }

        @Test
        @TestMetadata("extensionShadowedByDelegatedMember.kt")
        public void testExtensionShadowedByDelegatedMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionShadowedByDelegatedMember.kt");
        }

        @Test
        @TestMetadata("extensionVsNonPublicMember.kt")
        public void testExtensionVsNonPublicMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionVsNonPublicMember.kt");
        }

        @Test
        @TestMetadata("infixExtensionVsNonInfixMember.kt")
        public void testInfixExtensionVsNonInfixMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/infixExtensionVsNonInfixMember.kt");
        }

        @Test
        @TestMetadata("localExtensionShadowedByMember.kt")
        public void testLocalExtensionShadowedByMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/localExtensionShadowedByMember.kt");
        }

        @Test
        @TestMetadata("memberExtensionShadowedByMember.kt")
        public void testMemberExtensionShadowedByMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/memberExtensionShadowedByMember.kt");
        }

        @Test
        @TestMetadata("operatorExtensionVsNonOperatorMember.kt")
        public void testOperatorExtensionVsNonOperatorMember() {
          runTest("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/operatorExtensionVsNonOperatorMember.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/regressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Regressions {
      @Test
      @TestMetadata("AmbiguityOnLazyTypeComputation.kt")
      public void testAmbiguityOnLazyTypeComputation() {
        runTest("compiler/testData/diagnostics/tests/regressions/AmbiguityOnLazyTypeComputation.kt");
      }

      @Test
      @TestMetadata("AssignmentsUnderOperators.kt")
      public void testAssignmentsUnderOperators() {
        runTest("compiler/testData/diagnostics/tests/regressions/AssignmentsUnderOperators.kt");
      }

      @Test
      @TestMetadata("delegationWithReceiver.kt")
      public void testDelegationWithReceiver() {
        runTest("compiler/testData/diagnostics/tests/regressions/delegationWithReceiver.kt");
      }

      @Test
      @TestMetadata("ea53340.kt")
      public void testEa53340() {
        runTest("compiler/testData/diagnostics/tests/regressions/ea53340.kt");
      }

      @Test
      @TestMetadata("ErrorsOnIbjectExpressionsAsParameters.kt")
      public void testErrorsOnIbjectExpressionsAsParameters() {
        runTest("compiler/testData/diagnostics/tests/regressions/ErrorsOnIbjectExpressionsAsParameters.kt");
      }

      @Test
      @TestMetadata("functionTypeFromTypeParameterType.kt")
      public void testFunctionTypeFromTypeParameterType() {
        runTest("compiler/testData/diagnostics/tests/regressions/functionTypeFromTypeParameterType.kt");
      }

      @Test
      @TestMetadata("intchar.kt")
      public void testIntchar() {
        runTest("compiler/testData/diagnostics/tests/regressions/intchar.kt");
      }

      @Test
      @TestMetadata("Jet121.kt")
      public void testJet121() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet121.kt");
      }

      @Test
      @TestMetadata("Jet124.kt")
      public void testJet124() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet124.kt");
      }

      @Test
      @TestMetadata("Jet169.kt")
      public void testJet169() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet169.kt");
      }

      @Test
      @TestMetadata("Jet17.kt")
      public void testJet17() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet17.kt");
      }

      @Test
      @TestMetadata("Jet183.kt")
      public void testJet183() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet183.kt");
      }

      @Test
      @TestMetadata("Jet183-1.kt")
      public void testJet183_1() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet183-1.kt");
      }

      @Test
      @TestMetadata("Jet67.kt")
      public void testJet67() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet67.kt");
      }

      @Test
      @TestMetadata("Jet68.kt")
      public void testJet68() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet68.kt");
      }

      @Test
      @TestMetadata("Jet69.kt")
      public void testJet69() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet69.kt");
      }

      @Test
      @TestMetadata("Jet72.kt")
      public void testJet72() {
        runTest("compiler/testData/diagnostics/tests/regressions/Jet72.kt");
      }

      @Test
      @TestMetadata("kt10824.kt")
      public void testKt10824() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt10824.kt");
      }

      @Test
      @TestMetadata("kt127.kt")
      public void testKt127() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt127.kt");
      }

      @Test
      @TestMetadata("kt128.kt")
      public void testKt128() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt128.kt");
      }

      @Test
      @TestMetadata("kt13954.kt")
      public void testKt13954() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt13954.kt");
      }

      @Test
      @TestMetadata("kt14740.kt")
      public void testKt14740() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt14740.kt");
      }

      @Test
      @TestMetadata("kt1550.kt")
      public void testKt1550() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt1550.kt");
      }

      @Test
      @TestMetadata("kt16086.kt")
      public void testKt16086() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt16086.kt");
      }

      @Test
      @TestMetadata("kt16086_2.kt")
      public void testKt16086_2() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt16086_2.kt");
      }

      @Test
      @TestMetadata("kt1639-JFrame.kt")
      public void testKt1639_JFrame() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt1639-JFrame.kt");
      }

      @Test
      @TestMetadata("kt1647.kt")
      public void testKt1647() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt1647.kt");
      }

      @Test
      @TestMetadata("kt174.kt")
      public void testKt174() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt174.kt");
      }

      @Test
      @TestMetadata("kt201.kt")
      public void testKt201() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt201.kt");
      }

      @Test
      @TestMetadata("kt2376.kt")
      public void testKt2376() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt2376.kt");
      }

      @Test
      @TestMetadata("kt258.kt")
      public void testKt258() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt258.kt");
      }

      @Test
      @TestMetadata("kt26.kt")
      public void testKt26() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt26.kt");
      }

      @Test
      @TestMetadata("kt26303.kt")
      public void testKt26303() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt26303.kt");
      }

      @Test
      @TestMetadata("kt26-1.kt")
      public void testKt26_1() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt26-1.kt");
      }

      @Test
      @TestMetadata("kt28001.kt")
      public void testKt28001() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt28001.kt");
      }

      @Test
      @TestMetadata("kt287.kt")
      public void testKt287() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt287.kt");
      }

      @Test
      @TestMetadata("kt306.kt")
      public void testKt306() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt306.kt");
      }

      @Test
      @TestMetadata("kt313.kt")
      public void testKt313() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt313.kt");
      }

      @Test
      @TestMetadata("kt316.kt")
      public void testKt316() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt316.kt");
      }

      @Test
      @TestMetadata("kt32507.kt")
      public void testKt32507() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt32507.kt");
      }

      @Test
      @TestMetadata("kt32836.kt")
      public void testKt32836() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt32836.kt");
      }

      @Test
      @TestMetadata("kt335.336.kt")
      public void testKt335_336() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt335.336.kt");
      }

      @Test
      @TestMetadata("kt337.kt")
      public void testKt337() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt337.kt");
      }

      @Test
      @TestMetadata("kt3535.kt")
      public void testKt3535() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt3535.kt");
      }

      @Test
      @TestMetadata("kt35626.kt")
      public void testKt35626() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt35626.kt");
      }

      @Test
      @TestMetadata("kt35626small.kt")
      public void testKt35626small() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt35626small.kt");
      }

      @Test
      @TestMetadata("kt35668.kt")
      public void testKt35668() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt35668.kt");
      }

      @Test
      @TestMetadata("kt3647.kt")
      public void testKt3647() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt3647.kt");
      }

      @Test
      @TestMetadata("kt3731.kt")
      public void testKt3731() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt3731.kt");
      }

      @Test
      @TestMetadata("kt385.109.441.kt")
      public void testKt385_109_441() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt385.109.441.kt");
      }

      @Test
      @TestMetadata("kt394.kt")
      public void testKt394() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt394.kt");
      }

      @Test
      @TestMetadata("kt439.kt")
      public void testKt439() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt439.kt");
      }

      @Test
      @TestMetadata("kt459.kt")
      public void testKt459() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt459.kt");
      }

      @Test
      @TestMetadata("kt469.kt")
      public void testKt469() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt469.kt");
      }

      @Test
      @TestMetadata("kt4693.kt")
      public void testKt4693() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt4693.kt");
      }

      @Test
      @TestMetadata("kt498.kt")
      public void testKt498() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt498.kt");
      }

      @Test
      @TestMetadata("kt524.kt")
      public void testKt524() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt524.kt");
      }

      @Test
      @TestMetadata("kt526UnresolvedReferenceInnerStatic.kt")
      public void testKt526UnresolvedReferenceInnerStatic() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt526UnresolvedReferenceInnerStatic.kt");
      }

      @Test
      @TestMetadata("kt5326.kt")
      public void testKt5326() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt5326.kt");
      }

      @Test
      @TestMetadata("kt549.kt")
      public void testKt549() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt549.kt");
      }

      @Test
      @TestMetadata("kt571.kt")
      public void testKt571() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt571.kt");
      }

      @Test
      @TestMetadata("kt575.kt")
      public void testKt575() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt575.kt");
      }

      @Test
      @TestMetadata("kt57845.kt")
      public void testKt57845() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt57845.kt");
      }

      @Test
      @TestMetadata("kt580.kt")
      public void testKt580() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt580.kt");
      }

      @Test
      @TestMetadata("kt588.kt")
      public void testKt588() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt588.kt");
      }

      @Test
      @TestMetadata("kt597.kt")
      public void testKt597() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt597.kt");
      }

      @Test
      @TestMetadata("kt600.kt")
      public void testKt600() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt600.kt");
      }

      @Test
      @TestMetadata("kt604.kt")
      public void testKt604() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt604.kt");
      }

      @Test
      @TestMetadata("kt630.kt")
      public void testKt630() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt630.kt");
      }

      @Test
      @TestMetadata("kt688.kt")
      public void testKt688() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt688.kt");
      }

      @Test
      @TestMetadata("kt691.kt")
      public void testKt691() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt691.kt");
      }

      @Test
      @TestMetadata("kt701.kt")
      public void testKt701() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt701.kt");
      }

      @Test
      @TestMetadata("kt716.kt")
      public void testKt716() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt716.kt");
      }

      @Test
      @TestMetadata("kt743.kt")
      public void testKt743() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt743.kt");
      }

      @Test
      @TestMetadata("kt750.kt")
      public void testKt750() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt750.kt");
      }

      @Test
      @TestMetadata("kt7804.kt")
      public void testKt7804() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt7804.kt");
      }

      @Test
      @TestMetadata("kt860.kt")
      public void testKt860() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt860.kt");
      }

      @Test
      @TestMetadata("kt9682.kt")
      public void testKt9682() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt9682.kt");
      }

      @Test
      @TestMetadata("kt9808.kt")
      public void testKt9808() {
        runTest("compiler/testData/diagnostics/tests/regressions/kt9808.kt");
      }

      @Test
      @TestMetadata("LocalClassReferenceChain.kt")
      public void testLocalClassReferenceChain() {
        runTest("compiler/testData/diagnostics/tests/regressions/LocalClassReferenceChain.kt");
      }

      @Test
      @TestMetadata("OverrideResolution.kt")
      public void testOverrideResolution() {
        runTest("compiler/testData/diagnostics/tests/regressions/OverrideResolution.kt");
      }

      @Test
      @TestMetadata("propertyWithExtensionTypeInvoke.kt")
      public void testPropertyWithExtensionTypeInvoke() {
        runTest("compiler/testData/diagnostics/tests/regressions/propertyWithExtensionTypeInvoke.kt");
      }

      @Test
      @TestMetadata("resolveSubclassOfList.kt")
      public void testResolveSubclassOfList() {
        runTest("compiler/testData/diagnostics/tests/regressions/resolveSubclassOfList.kt");
      }

      @Test
      @TestMetadata("SpecififcityByReceiver.kt")
      public void testSpecififcityByReceiver() {
        runTest("compiler/testData/diagnostics/tests/regressions/SpecififcityByReceiver.kt");
      }

      @Test
      @TestMetadata("testNestedSpecialCalls.kt")
      public void testTestNestedSpecialCalls() {
        runTest("compiler/testData/diagnostics/tests/regressions/testNestedSpecialCalls.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/regressions/kt7585")
      @TestDataPath("$PROJECT_ROOT")
      public class Kt7585 {
        @Test
        @TestMetadata("twoparents.kt")
        public void testTwoparents() {
          runTest("compiler/testData/diagnostics/tests/regressions/kt7585/twoparents.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/resolve")
    @TestDataPath("$PROJECT_ROOT")
    public class Resolve {
      @Test
      @TestMetadata("accessOnComplexProjectedReceiver.kt")
      public void testAccessOnComplexProjectedReceiver() {
        runTest("compiler/testData/diagnostics/tests/resolve/accessOnComplexProjectedReceiver.kt");
      }

      @Test
      @TestMetadata("anonymousObjectFromTopLevelMember.kt")
      public void testAnonymousObjectFromTopLevelMember() {
        runTest("compiler/testData/diagnostics/tests/resolve/anonymousObjectFromTopLevelMember.kt");
      }

      @Test
      @TestMetadata("callToProtectedOnSmartcast.kt")
      public void testCallToProtectedOnSmartcast() {
        runTest("compiler/testData/diagnostics/tests/resolve/callToProtectedOnSmartcast.kt");
      }

      @Test
      @TestMetadata("callableReferenceAgainstTypeVariable.kt")
      public void testCallableReferenceAgainstTypeVariable() {
        runTest("compiler/testData/diagnostics/tests/resolve/callableReferenceAgainstTypeVariable.kt");
      }

      @Test
      @TestMetadata("complexOrderAndImplicitTypes.kt")
      public void testComplexOrderAndImplicitTypes() {
        runTest("compiler/testData/diagnostics/tests/resolve/complexOrderAndImplicitTypes.kt");
      }

      @Test
      @TestMetadata("functionalConstraintDuringCompletion.kt")
      public void testFunctionalConstraintDuringCompletion() {
        runTest("compiler/testData/diagnostics/tests/resolve/functionalConstraintDuringCompletion.kt");
      }

      @Test
      @TestMetadata("implicitReceiverProperty.kt")
      public void testImplicitReceiverProperty() {
        runTest("compiler/testData/diagnostics/tests/resolve/implicitReceiverProperty.kt");
      }

      @Test
      @TestMetadata("inferenceInLinkedLambdasDependentOnExpectedType.kt")
      public void testInferenceInLinkedLambdasDependentOnExpectedType() {
        runTest("compiler/testData/diagnostics/tests/resolve/inferenceInLinkedLambdasDependentOnExpectedType.kt");
      }

      @Test
      @TestMetadata("kt36264.kt")
      public void testKt36264() {
        runTest("compiler/testData/diagnostics/tests/resolve/kt36264.kt");
      }

      @Test
      @TestMetadata("noStopOnReceiverUnstableSmartCast.kt")
      public void testNoStopOnReceiverUnstableSmartCast() {
        runTest("compiler/testData/diagnostics/tests/resolve/noStopOnReceiverUnstableSmartCast.kt");
      }

      @Test
      @TestMetadata("objectLiteralAsArgument.kt")
      public void testObjectLiteralAsArgument() {
        runTest("compiler/testData/diagnostics/tests/resolve/objectLiteralAsArgument.kt");
      }

      @Test
      @TestMetadata("resolveAnnotatedLambdaArgument.kt")
      public void testResolveAnnotatedLambdaArgument() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveAnnotatedLambdaArgument.kt");
      }

      @Test
      @TestMetadata("resolveToStarImportMemberInsteadOfBuiltin.kt")
      public void testResolveToStarImportMemberInsteadOfBuiltin() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveToStarImportMemberInsteadOfBuiltin.kt");
      }

      @Test
      @TestMetadata("resolveWithFunctionLiteralWithId.kt")
      public void testResolveWithFunctionLiteralWithId() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralWithId.kt");
      }

      @Test
      @TestMetadata("resolveWithFunctionLiterals.kt")
      public void testResolveWithFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiterals.kt");
      }

      @Test
      @TestMetadata("resolveWithFunctionLiteralsOverload.kt")
      public void testResolveWithFunctionLiteralsOverload() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithFunctionLiteralsOverload.kt");
      }

      @Test
      @TestMetadata("resolveWithGenerics.kt")
      public void testResolveWithGenerics() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithGenerics.kt");
      }

      @Test
      @TestMetadata("resolveWithSpecifiedFunctionLiteralWithId.kt")
      public void testResolveWithSpecifiedFunctionLiteralWithId() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithSpecifiedFunctionLiteralWithId.kt");
      }

      @Test
      @TestMetadata("resolveWithoutGenerics.kt")
      public void testResolveWithoutGenerics() {
        runTest("compiler/testData/diagnostics/tests/resolve/resolveWithoutGenerics.kt");
      }

      @Test
      @TestMetadata("smartcastToMoreSpecificProperty.kt")
      public void testSmartcastToMoreSpecificProperty() {
        runTest("compiler/testData/diagnostics/tests/resolve/smartcastToMoreSpecificProperty.kt");
      }

      @Test
      @TestMetadata("starProjectionAndFunctionType.kt")
      public void testStarProjectionAndFunctionType() {
        runTest("compiler/testData/diagnostics/tests/resolve/starProjectionAndFunctionType.kt");
      }

      @Test
      @TestMetadata("superInvoke.kt")
      public void testSuperInvoke() {
        runTest("compiler/testData/diagnostics/tests/resolve/superInvoke.kt");
      }

      @Test
      @TestMetadata("typeParameterInDefaultValueInLocalFunction.kt")
      public void testTypeParameterInDefaultValueInLocalFunction() {
        runTest("compiler/testData/diagnostics/tests/resolve/typeParameterInDefaultValueInLocalFunction.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/dslMarker")
      @TestDataPath("$PROJECT_ROOT")
      public class DslMarker {
        @Test
        @TestMetadata("kt29948.kt")
        public void testKt29948() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/kt29948.kt");
        }

        @Test
        @TestMetadata("kt31360.kt")
        public void testKt31360() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/kt31360.kt");
        }

        @Test
        @TestMetadata("kt46969.kt")
        public void testKt46969() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/kt46969.kt");
        }

        @Test
        @TestMetadata("markedReceiverWithCapturedTypeArgument.kt")
        public void testMarkedReceiverWithCapturedTypeArgument() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/markedReceiverWithCapturedTypeArgument.kt");
        }

        @Test
        @TestMetadata("noErrorInsideDelegatedConstructorCallOfAnonymousObject.kt")
        public void testNoErrorInsideDelegatedConstructorCallOfAnonymousObject() {
          runTest("compiler/testData/diagnostics/tests/resolve/dslMarker/noErrorInsideDelegatedConstructorCallOfAnonymousObject.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke")
      @TestDataPath("$PROJECT_ROOT")
      public class Invoke {
        @Test
        @TestMetadata("avoidTypeCheckerRecursion.kt")
        public void testAvoidTypeCheckerRecursion() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/avoidTypeCheckerRecursion.kt");
        }

        @Test
        @TestMetadata("closeInvokesFarVariable.kt")
        public void testCloseInvokesFarVariable() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/closeInvokesFarVariable.kt");
        }

        @Test
        @TestMetadata("closerVariableMatterMore.kt")
        public void testCloserVariableMatterMore() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/closerVariableMatterMore.kt");
        }

        @Test
        @TestMetadata("completePropertyBeforeInvoke.kt")
        public void testCompletePropertyBeforeInvoke() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/completePropertyBeforeInvoke.kt");
        }

        @Test
        @TestMetadata("extensionValueAsNonExtension.kt")
        public void testExtensionValueAsNonExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/extensionValueAsNonExtension.kt");
        }

        @Test
        @TestMetadata("implicitAndInvokeExtensionPriority.kt")
        public void testImplicitAndInvokeExtensionPriority() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/implicitAndInvokeExtensionPriority.kt");
        }

        @Test
        @TestMetadata("implicitInvoke.kt")
        public void testImplicitInvoke() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/implicitInvoke.kt");
        }

        @Test
        @TestMetadata("implicitPropertyType.kt")
        public void testImplicitPropertyType() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/implicitPropertyType.kt");
        }

        @Test
        @TestMetadata("invokeAsExtension.kt")
        public void testInvokeAsExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsExtension.kt");
        }

        @Test
        @TestMetadata("invokeAsMember.kt")
        public void testInvokeAsMember() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMember.kt");
        }

        @Test
        @TestMetadata("invokeAsMemberExtension.kt")
        public void testInvokeAsMemberExtension() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtension.kt");
        }

        @Test
        @TestMetadata("invokeCommonSystem.kt")
        public void testInvokeCommonSystem() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeCommonSystem.kt");
        }

        @Test
        @TestMetadata("invokeNonExtensionLambdaInContext.kt")
        public void testInvokeNonExtensionLambdaInContext() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/invokeNonExtensionLambdaInContext.kt");
        }

        @Test
        @TestMetadata("kt30695.kt")
        public void testKt30695() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt30695.kt");
        }

        @Test
        @TestMetadata("kt3772.kt")
        public void testKt3772() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt3772.kt");
        }

        @Test
        @TestMetadata("kt3833-invokeInsideNestedClass.kt")
        public void testKt3833_invokeInsideNestedClass() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt3833-invokeInsideNestedClass.kt");
        }

        @Test
        @TestMetadata("kt4321InvokeOnEnum.kt")
        public void testKt4321InvokeOnEnum() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt4321InvokeOnEnum.kt");
        }

        @Test
        @TestMetadata("kt51793.kt")
        public void testKt51793() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt51793.kt");
        }

        @Test
        @TestMetadata("kt51793Complex.kt")
        public void testKt51793Complex() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt51793Complex.kt");
        }

        @Test
        @TestMetadata("kt9517.kt")
        public void testKt9517() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/kt9517.kt");
        }

        @Test
        @TestMetadata("privateInvokeOwner.kt")
        public void testPrivateInvokeOwner() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/privateInvokeOwner.kt");
        }

        @Test
        @TestMetadata("valNamedInvoke.kt")
        public void testValNamedInvoke() {
          runTest("compiler/testData/diagnostics/tests/resolve/invoke/valNamedInvoke.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class NestedCalls {
        @Test
        @TestMetadata("analyzeArgsInFreeExpressionPosition.kt")
        public void testAnalyzeArgsInFreeExpressionPosition() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeArgsInFreeExpressionPosition.kt");
        }

        @Test
        @TestMetadata("argumentsInParentheses.kt")
        public void testArgumentsInParentheses() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/argumentsInParentheses.kt");
        }

        @Test
        @TestMetadata("kt7597.kt")
        public void testKt7597() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/kt7597.kt");
        }

        @Test
        @TestMetadata("twoTypeParameters.kt")
        public void testTwoTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/resolve/nestedCalls/twoTypeParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/overloadConflicts")
      @TestDataPath("$PROJECT_ROOT")
      public class OverloadConflicts {
        @Test
        @TestMetadata("equivalentCallsDifferentVisibility.kt")
        public void testEquivalentCallsDifferentVisibility() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/equivalentCallsDifferentVisibility.kt");
        }

        @Test
        @TestMetadata("extensionReceiverAndVarargs.kt")
        public void testExtensionReceiverAndVarargs() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/extensionReceiverAndVarargs.kt");
        }

        @Test
        @TestMetadata("filteringOutOverrides.kt")
        public void testFilteringOutOverrides() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/filteringOutOverrides.kt");
        }

        @Test
        @TestMetadata("kt10472.kt")
        public void testKt10472() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt10472.kt");
        }

        @Test
        @TestMetadata("kt10640.kt")
        public void testKt10640() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt10640.kt");
        }

        @Test
        @TestMetadata("kt37692.kt")
        public void testKt37692() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt37692.kt");
        }

        @Test
        @TestMetadata("kt55722.kt")
        public void testKt55722() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt55722.kt");
        }

        @Test
        @TestMetadata("kt55722Initial.kt")
        public void testKt55722Initial() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt55722Initial.kt");
        }

        @Test
        @TestMetadata("numberOfDefaults.kt")
        public void testNumberOfDefaults() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/numberOfDefaults.kt");
        }

        @Test
        @TestMetadata("overloadResolutionOnNullableContravariantParameter.kt")
        public void testOverloadResolutionOnNullableContravariantParameter() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/overloadResolutionOnNullableContravariantParameter.kt");
        }

        @Test
        @TestMetadata("varargWithMoreSpecificSignature.kt")
        public void testVarargWithMoreSpecificSignature() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargWithMoreSpecificSignature.kt");
        }

        @Test
        @TestMetadata("varargs.kt")
        public void testVarargs() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargs.kt");
        }

        @Test
        @TestMetadata("varargsWithRecursiveGenerics.kt")
        public void testVarargsWithRecursiveGenerics() {
          runTest("compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsWithRecursiveGenerics.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/priority")
      @TestDataPath("$PROJECT_ROOT")
      public class Priority {
        @Test
        @TestMetadata("extensionVsMember.kt")
        public void testExtensionVsMember() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/extensionVsMember.kt");
        }

        @Test
        @TestMetadata("kt9810.kt")
        public void testKt9810() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/kt9810.kt");
        }

        @Test
        @TestMetadata("memberWithHidesMemberAnnotationVsMemberWithout.kt")
        public void testMemberWithHidesMemberAnnotationVsMemberWithout() {
          runTest("compiler/testData/diagnostics/tests/resolve/priority/memberWithHidesMemberAnnotationVsMemberWithout.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions")
      @TestDataPath("$PROJECT_ROOT")
      public class SpecialConstructions {
        @Test
        @TestMetadata("exclExclAsCall.kt")
        public void testExclExclAsCall() {
          runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/exclExclAsCall.kt");
        }

        @Test
        @TestMetadata("multipleSuperClasses.kt")
        public void testMultipleSuperClasses() {
          runTest("compiler/testData/diagnostics/tests/resolve/specialConstructions/multipleSuperClasses.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/safeCalls")
    @TestDataPath("$PROJECT_ROOT")
    public class SafeCalls {
      @Test
      @TestMetadata("safeCallOnFlexibleTypeAlias.kt")
      public void testSafeCallOnFlexibleTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/safeCalls/safeCallOnFlexibleTypeAlias.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/samConversions")
    @TestDataPath("$PROJECT_ROOT")
    public class SamConversions {
      @Test
      @TestMetadata("conversionOnLambdaAsLastExpression.kt")
      public void testConversionOnLambdaAsLastExpression() {
        runTest("compiler/testData/diagnostics/tests/samConversions/conversionOnLambdaAsLastExpression.kt");
      }

      @Test
      @TestMetadata("implicitReturnType.kt")
      public void testImplicitReturnType() {
        runTest("compiler/testData/diagnostics/tests/samConversions/implicitReturnType.kt");
      }

      @Test
      @TestMetadata("kt17765.kt")
      public void testKt17765() {
        runTest("compiler/testData/diagnostics/tests/samConversions/kt17765.kt");
      }

      @Test
      @TestMetadata("kt50477.kt")
      public void testKt50477() {
        runTest("compiler/testData/diagnostics/tests/samConversions/kt50477.kt");
      }

      @Test
      @TestMetadata("multipleSamConversionConflictResolution.kt")
      public void testMultipleSamConversionConflictResolution() {
        runTest("compiler/testData/diagnostics/tests/samConversions/multipleSamConversionConflictResolution.kt");
      }

      @Test
      @TestMetadata("SAMAfterSubstitution.kt")
      public void testSAMAfterSubstitution() {
        runTest("compiler/testData/diagnostics/tests/samConversions/SAMAfterSubstitution.kt");
      }

      @Test
      @TestMetadata("SAMAfterSubstitutionKT.kt")
      public void testSAMAfterSubstitutionKT() {
        runTest("compiler/testData/diagnostics/tests/samConversions/SAMAfterSubstitutionKT.kt");
      }

      @Test
      @TestMetadata("samConversionToGeneric.kt")
      public void testSamConversionToGeneric() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionToGeneric.kt");
      }

      @Test
      @TestMetadata("samConversionWithCondition.kt")
      public void testSamConversionWithCondition() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionWithCondition.kt");
      }

      @Test
      @TestMetadata("samConversionWithConditionJava.kt")
      public void testSamConversionWithConditionJava() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionWithConditionJava.kt");
      }

      @Test
      @TestMetadata("samConversionWithJavaFlexibleTypeDnnRepresentation.kt")
      public void testSamConversionWithJavaFlexibleTypeDnnRepresentation() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionWithJavaFlexibleTypeDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("samConversionWithNamedArgumentAndIf.kt")
      public void testSamConversionWithNamedArgumentAndIf() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionWithNamedArgumentAndIf.kt");
      }

      @Test
      @TestMetadata("samConversionWithSafeCallAndInference.kt")
      public void testSamConversionWithSafeCallAndInference() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionWithSafeCallAndInference.kt");
      }

      @Test
      @TestMetadata("samConversionsWithSmartCasts.kt")
      public void testSamConversionsWithSmartCasts() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samConversionsWithSmartCasts.kt");
      }

      @Test
      @TestMetadata("samPriorityVsGeneric.kt")
      public void testSamPriorityVsGeneric() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samPriorityVsGeneric.kt");
      }

      @Test
      @TestMetadata("samPriorityVsGenericCompatibilityDisabled.kt")
      public void testSamPriorityVsGenericCompatibilityDisabled() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samPriorityVsGenericCompatibilityDisabled.kt");
      }

      @Test
      @TestMetadata("samPriorityVsGenericCompatibilityEnabled.kt")
      public void testSamPriorityVsGenericCompatibilityEnabled() {
        runTest("compiler/testData/diagnostics/tests/samConversions/samPriorityVsGenericCompatibilityEnabled.kt");
      }

      @Test
      @TestMetadata("sameCandidatesFromKotlinAndJavaInOneScope.kt")
      public void testSameCandidatesFromKotlinAndJavaInOneScope() {
        runTest("compiler/testData/diagnostics/tests/samConversions/sameCandidatesFromKotlinAndJavaInOneScope.kt");
      }

      @Test
      @TestMetadata("SimpleCorrect.kt")
      public void testSimpleCorrect() {
        runTest("compiler/testData/diagnostics/tests/samConversions/SimpleCorrect.kt");
      }

      @Test
      @TestMetadata("SimpleCorrectKT.kt")
      public void testSimpleCorrectKT() {
        runTest("compiler/testData/diagnostics/tests/samConversions/SimpleCorrectKT.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/scopes")
    @TestDataPath("$PROJECT_ROOT")
    public class Scopes {
      @Test
      @TestMetadata("AmbiguityBetweenRootAndPackage.kt")
      public void testAmbiguityBetweenRootAndPackage() {
        runTest("compiler/testData/diagnostics/tests/scopes/AmbiguityBetweenRootAndPackage.kt");
      }

      @Test
      @TestMetadata("genericVsNested.kt")
      public void testGenericVsNested() {
        runTest("compiler/testData/diagnostics/tests/scopes/genericVsNested.kt");
      }

      @Test
      @TestMetadata("implicitReceiverMemberVsParameter.kt")
      public void testImplicitReceiverMemberVsParameter() {
        runTest("compiler/testData/diagnostics/tests/scopes/implicitReceiverMemberVsParameter.kt");
      }

      @Test
      @TestMetadata("kt1078.kt")
      public void testKt1078() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1078.kt");
      }

      @Test
      @TestMetadata("kt1579.kt")
      public void testKt1579() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1579.kt");
      }

      @Test
      @TestMetadata("kt1579_map_entry.kt")
      public void testKt1579_map_entry() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1579_map_entry.kt");
      }

      @Test
      @TestMetadata("kt1580.kt")
      public void testKt1580() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1580.kt");
      }

      @Test
      @TestMetadata("kt1642.kt")
      public void testKt1642() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt1642.kt");
      }

      @Test
      @TestMetadata("kt2262.kt")
      public void testKt2262() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt2262.kt");
      }

      @Test
      @TestMetadata("kt587.kt")
      public void testKt587() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt587.kt");
      }

      @Test
      @TestMetadata("kt939.kt")
      public void testKt939() {
        runTest("compiler/testData/diagnostics/tests/scopes/kt939.kt");
      }

      @Test
      @TestMetadata("NoAmbiguityBetweenRootAndPackage.kt")
      public void testNoAmbiguityBetweenRootAndPackage() {
        runTest("compiler/testData/diagnostics/tests/scopes/NoAmbiguityBetweenRootAndPackage.kt");
      }

      @Test
      @TestMetadata("sameClassNameResolve.kt")
      public void testSameClassNameResolve() {
        runTest("compiler/testData/diagnostics/tests/scopes/sameClassNameResolve.kt");
      }

      @Test
      @TestMetadata("stopResolutionOnAmbiguity.kt")
      public void testStopResolutionOnAmbiguity() {
        runTest("compiler/testData/diagnostics/tests/scopes/stopResolutionOnAmbiguity.kt");
      }

      @Test
      @TestMetadata("visibleSetterFromSyntheticProperty.kt")
      public void testVisibleSetterFromSyntheticProperty() {
        runTest("compiler/testData/diagnostics/tests/scopes/visibleSetterFromSyntheticProperty.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/classHeader")
      @TestDataPath("$PROJECT_ROOT")
      public class ClassHeader {
        @Test
        @TestMetadata("companionNestedVsOuter.kt")
        public void testCompanionNestedVsOuter() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/companionNestedVsOuter.kt");
        }

        @Test
        @TestMetadata("simpleDelegation.kt")
        public void testSimpleDelegation() {
          runTest("compiler/testData/diagnostics/tests/scopes/classHeader/simpleDelegation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class Inheritance {
        @Test
        @TestMetadata("companionObjectsOrder.kt")
        public void testCompanionObjectsOrder() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/companionObjectsOrder.kt");
        }

        @Test
        @TestMetadata("kt3856.kt")
        public void testKt3856() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/kt3856.kt");
        }

        @Test
        @TestMetadata("severalCompanions.kt")
        public void testSeveralCompanions() {
          runTest("compiler/testData/diagnostics/tests/scopes/inheritance/severalCompanions.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance/statics")
        @TestDataPath("$PROJECT_ROOT")
        public class Statics {
          @Test
          @TestMetadata("overloadStatic.kt")
          public void testOverloadStatic() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/overloadStatic.kt");
          }

          @Test
          @TestMetadata("staticPropertyVsImport.kt")
          public void testStaticPropertyVsImport() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticPropertyVsImport.kt");
          }

          @Test
          @TestMetadata("staticVsCompanion.kt")
          public void testStaticVsCompanion() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsCompanion.kt");
          }

          @Test
          @TestMetadata("staticVsMember.kt")
          public void testStaticVsMember() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsMember.kt");
          }

          @Test
          @TestMetadata("staticVsOuter.kt")
          public void testStaticVsOuter() {
            runTest("compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticVsOuter.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/protectedVisibility")
      @TestDataPath("$PROJECT_ROOT")
      public class ProtectedVisibility {
        @Test
        @TestMetadata("constructorsInner.kt")
        public void testConstructorsInner() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/constructorsInner.kt");
        }

        @Test
        @TestMetadata("generic.kt")
        public void testGeneric() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/generic.kt");
        }

        @Test
        @TestMetadata("innerClassInJava.kt")
        public void testInnerClassInJava() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/innerClassInJava.kt");
        }

        @Test
        @TestMetadata("nonSuperCallConstructorJavaSamePackage.kt")
        public void testNonSuperCallConstructorJavaSamePackage() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructorJavaSamePackage.kt");
        }

        @Test
        @TestMetadata("protectedPropertyInPrimaryConstructor.kt")
        public void testProtectedPropertyInPrimaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/protectedPropertyInPrimaryConstructor.kt");
        }

        @Test
        @TestMetadata("smartcastOnExtensionReceiver.kt")
        public void testSmartcastOnExtensionReceiver() {
          runTest("compiler/testData/diagnostics/tests/scopes/protectedVisibility/smartcastOnExtensionReceiver.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/variantProjections")
      @TestDataPath("$PROJECT_ROOT")
      public class VariantProjections {
        @Test
        @TestMetadata("dataClassCopy.kt")
        public void testDataClassCopy() {
          runTest("compiler/testData/diagnostics/tests/scopes/variantProjections/dataClassCopy.kt");
        }

        @Test
        @TestMetadata("unsafeVarianceAndCovariantProjection.kt")
        public void testUnsafeVarianceAndCovariantProjection() {
          runTest("compiler/testData/diagnostics/tests/scopes/variantProjections/unsafeVarianceAndCovariantProjection.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/script")
    @TestDataPath("$PROJECT_ROOT")
    public class Script {
      @Test
      @TestMetadata("ComplexScript.kts")
      public void testComplexScript() {
        runTest("compiler/testData/diagnostics/tests/script/ComplexScript.kts");
      }

      @Test
      @TestMetadata("imports.kts")
      public void testImports() {
        runTest("compiler/testData/diagnostics/tests/script/imports.kts");
      }

      @Test
      @TestMetadata("innerClassWarning.kts")
      public void testInnerClassWarning() {
        runTest("compiler/testData/diagnostics/tests/script/innerClassWarning.kts");
      }

      @Test
      @TestMetadata("LateInit.kts")
      public void testLateInit() {
        runTest("compiler/testData/diagnostics/tests/script/LateInit.kts");
      }

      @Test
      @TestMetadata("PrivateVal.kts")
      public void testPrivateVal() {
        runTest("compiler/testData/diagnostics/tests/script/PrivateVal.kts");
      }

      @Test
      @TestMetadata("scriptDeclsShouldVisibleLocally.kts")
      public void testScriptDeclsShouldVisibleLocally() {
        runTest("compiler/testData/diagnostics/tests/script/scriptDeclsShouldVisibleLocally.kts");
      }

      @Test
      @TestMetadata("SimpleScript.kts")
      public void testSimpleScript() {
        runTest("compiler/testData/diagnostics/tests/script/SimpleScript.kts");
      }

      @Test
      @TestMetadata("SuppressAnnoInLastExpression.kts")
      public void testSuppressAnnoInLastExpression() {
        runTest("compiler/testData/diagnostics/tests/script/SuppressAnnoInLastExpression.kts");
      }

      @Test
      @TestMetadata("topLevelInlineFun.kts")
      public void testTopLevelInlineFun() {
        runTest("compiler/testData/diagnostics/tests/script/topLevelInlineFun.kts");
      }

      @Test
      @TestMetadata("topLevelVariable.kts")
      public void testTopLevelVariable() {
        runTest("compiler/testData/diagnostics/tests/script/topLevelVariable.kts");
      }

      @Test
      @TestMetadata("varInScript.kts")
      public void testVarInScript() {
        runTest("compiler/testData/diagnostics/tests/script/varInScript.kts");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/sealed")
    @TestDataPath("$PROJECT_ROOT")
    public class Sealed {
      @Test
      @TestMetadata("DoubleInner.kt")
      public void testDoubleInner() {
        runTest("compiler/testData/diagnostics/tests/sealed/DoubleInner.kt");
      }

      @Test
      @TestMetadata("ExhaustiveOnCaptured.kt")
      public void testExhaustiveOnCaptured() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveOnCaptured.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhen.kt")
      public void testExhaustiveWhen() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhen.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhenDoubleInner.kt")
      public void testExhaustiveWhenDoubleInner() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenDoubleInner.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhenNegated.kt")
      public void testExhaustiveWhenNegated() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenNegated.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhenNegatedTwice.kt")
      public void testExhaustiveWhenNegatedTwice() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenNegatedTwice.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhenOnNestedSealed.kt")
      public void testExhaustiveWhenOnNestedSealed() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenOnNestedSealed.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhenOnNullable.kt")
      public void testExhaustiveWhenOnNullable() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenOnNullable.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhenWithAdditionalMember.kt")
      public void testExhaustiveWhenWithAdditionalMember() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenWithAdditionalMember.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhenWithElse.kt")
      public void testExhaustiveWhenWithElse() {
        runTest("compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenWithElse.kt");
      }

      @Test
      @TestMetadata("internalTypeInConstructor.kt")
      public void testInternalTypeInConstructor() {
        runTest("compiler/testData/diagnostics/tests/sealed/internalTypeInConstructor.kt");
      }

      @Test
      @TestMetadata("kt44316.kt")
      public void testKt44316() {
        runTest("compiler/testData/diagnostics/tests/sealed/kt44316.kt");
      }

      @Test
      @TestMetadata("kt44861.kt")
      public void testKt44861() {
        runTest("compiler/testData/diagnostics/tests/sealed/kt44861.kt");
      }

      @Test
      @TestMetadata("NestedSealed.kt")
      public void testNestedSealed() {
        runTest("compiler/testData/diagnostics/tests/sealed/NestedSealed.kt");
      }

      @Test
      @TestMetadata("NestedSealedWithoutRestrictions.kt")
      public void testNestedSealedWithoutRestrictions() {
        runTest("compiler/testData/diagnostics/tests/sealed/NestedSealedWithoutRestrictions.kt");
      }

      @Test
      @TestMetadata("NotFinal.kt")
      public void testNotFinal() {
        runTest("compiler/testData/diagnostics/tests/sealed/NotFinal.kt");
      }

      @Test
      @TestMetadata("OperationWhen.kt")
      public void testOperationWhen() {
        runTest("compiler/testData/diagnostics/tests/sealed/OperationWhen.kt");
      }

      @Test
      @TestMetadata("RedundantAbstract.kt")
      public void testRedundantAbstract() {
        runTest("compiler/testData/diagnostics/tests/sealed/RedundantAbstract.kt");
      }

      @Test
      @TestMetadata("TreeWhen.kt")
      public void testTreeWhen() {
        runTest("compiler/testData/diagnostics/tests/sealed/TreeWhen.kt");
      }

      @Test
      @TestMetadata("TreeWhenFunctional.kt")
      public void testTreeWhenFunctional() {
        runTest("compiler/testData/diagnostics/tests/sealed/TreeWhenFunctional.kt");
      }

      @Test
      @TestMetadata("WithInterface.kt")
      public void testWithInterface() {
        runTest("compiler/testData/diagnostics/tests/sealed/WithInterface.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/sealed/interfaces")
      @TestDataPath("$PROJECT_ROOT")
      public class Interfaces {
        @Test
        @TestMetadata("simpleSealedInterface.kt")
        public void testSimpleSealedInterface() {
          runTest("compiler/testData/diagnostics/tests/sealed/interfaces/simpleSealedInterface.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors")
    @TestDataPath("$PROJECT_ROOT")
    public class SecondaryConstructors {
      @Test
      @TestMetadata("classInitializersWithoutPrimary.kt")
      public void testClassInitializersWithoutPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/classInitializersWithoutPrimary.kt");
      }

      @Test
      @TestMetadata("dataFlowInDelegationCall.kt")
      public void testDataFlowInDelegationCall() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/dataFlowInDelegationCall.kt");
      }

      @Test
      @TestMetadata("initializationFromOtherInstance.kt")
      public void testInitializationFromOtherInstance() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/initializationFromOtherInstance.kt");
      }

      @Test
      @TestMetadata("lambdaInDelegation.kt")
      public void testLambdaInDelegation() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/lambdaInDelegation.kt");
      }

      @Test
      @TestMetadata("noDefaultIfEmptySecondary.kt")
      public void testNoDefaultIfEmptySecondary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/noDefaultIfEmptySecondary.kt");
      }

      @Test
      @TestMetadata("noSupertypeInitWithSecondaryConstructors.kt")
      public void testNoSupertypeInitWithSecondaryConstructors() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/noSupertypeInitWithSecondaryConstructors.kt");
      }

      @Test
      @TestMetadata("varargsInDelegationCallToPrimary.kt")
      public void testVarargsInDelegationCallToPrimary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/varargsInDelegationCallToPrimary.kt");
      }

      @Test
      @TestMetadata("varargsInDelegationCallToSecondary.kt")
      public void testVarargsInDelegationCallToSecondary() {
        runTest("compiler/testData/diagnostics/tests/secondaryConstructors/varargsInDelegationCallToSecondary.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class HeaderCallChecker {
        @Test
        @TestMetadata("usingOuterInstance.kt")
        public void testUsingOuterInstance() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/usingOuterInstance.kt");
        }

        @Test
        @TestMetadata("usingOuterProperty.kt")
        public void testUsingOuterProperty() {
          runTest("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/usingOuterProperty.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/senselessComparison")
    @TestDataPath("$PROJECT_ROOT")
    public class SenselessComparison {
      @Test
      @TestMetadata("complexExpression.kt")
      public void testComplexExpression() {
        runTest("compiler/testData/diagnostics/tests/senselessComparison/complexExpression.kt");
      }

      @Test
      @TestMetadata("noExplicitType.kt")
      public void testNoExplicitType() {
        runTest("compiler/testData/diagnostics/tests/senselessComparison/noExplicitType.kt");
      }

      @Test
      @TestMetadata("parenthesized.kt")
      public void testParenthesized() {
        runTest("compiler/testData/diagnostics/tests/senselessComparison/parenthesized.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/shadowing")
    @TestDataPath("$PROJECT_ROOT")
    public class Shadowing {
      @Test
      @TestMetadata("noNameShadowingForSimpleParameters.kt")
      public void testNoNameShadowingForSimpleParameters() {
        runTest("compiler/testData/diagnostics/tests/shadowing/noNameShadowingForSimpleParameters.kt");
      }

      @Test
      @TestMetadata("ShadowLambdaParameter.kt")
      public void testShadowLambdaParameter() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowLambdaParameter.kt");
      }

      @Test
      @TestMetadata("ShadowMultiDeclarationWithFunParameter.kt")
      public void testShadowMultiDeclarationWithFunParameter() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowMultiDeclarationWithFunParameter.kt");
      }

      @Test
      @TestMetadata("ShadowParameterInFunctionBody.kt")
      public void testShadowParameterInFunctionBody() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInFunctionBody.kt");
      }

      @Test
      @TestMetadata("ShadowParameterInNestedBlockInFor.kt")
      public void testShadowParameterInNestedBlockInFor() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowParameterInNestedBlockInFor.kt");
      }

      @Test
      @TestMetadata("ShadowPropertyInClosure.kt")
      public void testShadowPropertyInClosure() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInClosure.kt");
      }

      @Test
      @TestMetadata("ShadowPropertyInFor.kt")
      public void testShadowPropertyInFor() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFor.kt");
      }

      @Test
      @TestMetadata("ShadowPropertyInFunction.kt")
      public void testShadowPropertyInFunction() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowPropertyInFunction.kt");
      }

      @Test
      @TestMetadata("ShadowVariableInFor.kt")
      public void testShadowVariableInFor() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInFor.kt");
      }

      @Test
      @TestMetadata("ShadowVariableInNestedBlock.kt")
      public void testShadowVariableInNestedBlock() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedBlock.kt");
      }

      @Test
      @TestMetadata("ShadowVariableInNestedClosure.kt")
      public void testShadowVariableInNestedClosure() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosure.kt");
      }

      @Test
      @TestMetadata("ShadowVariableInNestedClosureParam.kt")
      public void testShadowVariableInNestedClosureParam() {
        runTest("compiler/testData/diagnostics/tests/shadowing/ShadowVariableInNestedClosureParam.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/smartCasts")
    @TestDataPath("$PROJECT_ROOT")
    public class SmartCasts {
      @Test
      @TestMetadata("afterBinaryExpr.kt")
      public void testAfterBinaryExpr() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/afterBinaryExpr.kt");
      }

      @Test
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/annotations.kt");
      }

      @Test
      @TestMetadata("combineWithNoSelectorInfo.kt")
      public void testCombineWithNoSelectorInfo() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/combineWithNoSelectorInfo.kt");
      }

      @Test
      @TestMetadata("complexSealedContracts.kt")
      public void testComplexSealedContracts() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/complexSealedContracts.kt");
      }

      @Test
      @TestMetadata("dataFlowInfoForArguments.kt")
      public void testDataFlowInfoForArguments() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/dataFlowInfoForArguments.kt");
      }

      @Test
      @TestMetadata("doubleLambdaArgument.kt")
      public void testDoubleLambdaArgument() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/doubleLambdaArgument.kt");
      }

      @Test
      @TestMetadata("elvisExclExclMerge.kt")
      public void testElvisExclExclMerge() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/elvisExclExclMerge.kt");
      }

      @Test
      @TestMetadata("elvisRHS.kt")
      public void testElvisRHS() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/elvisRHS.kt");
      }

      @Test
      @TestMetadata("equals.kt")
      public void testEquals() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/equals.kt");
      }

      @Test
      @TestMetadata("explicitDefaultGetter.kt")
      public void testExplicitDefaultGetter() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/explicitDefaultGetter.kt");
      }

      @Test
      @TestMetadata("explicitTypeArguments.kt")
      public void testExplicitTypeArguments() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/explicitTypeArguments.kt");
      }

      @Test
      @TestMetadata("falseReceiverSmartCast.kt")
      public void testFalseReceiverSmartCast() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/falseReceiverSmartCast.kt");
      }

      @Test
      @TestMetadata("falseUnnecessaryCall.kt")
      public void testFalseUnnecessaryCall() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/falseUnnecessaryCall.kt");
      }

      @Test
      @TestMetadata("fieldInGetter.kt")
      public void testFieldInGetter() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/fieldInGetter.kt");
      }

      @Test
      @TestMetadata("genericIntersection.kt")
      public void testGenericIntersection() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/genericIntersection.kt");
      }

      @Test
      @TestMetadata("genericSet.kt")
      public void testGenericSet() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/genericSet.kt");
      }

      @Test
      @TestMetadata("ifCascadeExprNotNull.kt")
      public void testIfCascadeExprNotNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifCascadeExprNotNull.kt");
      }

      @Test
      @TestMetadata("ifExprInConditionNonNull.kt")
      public void testIfExprInConditionNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprInConditionNonNull.kt");
      }

      @Test
      @TestMetadata("ifExprInWhenSubjectNonNull.kt")
      public void testIfExprInWhenSubjectNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprInWhenSubjectNonNull.kt");
      }

      @Test
      @TestMetadata("ifExprNonNull.kt")
      public void testIfExprNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifExprNonNull.kt");
      }

      @Test
      @TestMetadata("ifWhenExprNonNull.kt")
      public void testIfWhenExprNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/ifWhenExprNonNull.kt");
      }

      @Test
      @TestMetadata("implicitReceiver.kt")
      public void testImplicitReceiver() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/implicitReceiver.kt");
      }

      @Test
      @TestMetadata("implicitToGrandSon.kt")
      public void testImplicitToGrandSon() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/implicitToGrandSon.kt");
      }

      @Test
      @TestMetadata("incrementAfterAssignment.kt")
      public void testIncrementAfterAssignment() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/incrementAfterAssignment.kt");
      }

      @Test
      @TestMetadata("kt10232.kt")
      public void testKt10232() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt10232.kt");
      }

      @Test
      @TestMetadata("kt10444.kt")
      public void testKt10444() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt10444.kt");
      }

      @Test
      @TestMetadata("kt10483.kt")
      public void testKt10483() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt10483.kt");
      }

      @Test
      @TestMetadata("kt1461.kt")
      public void testKt1461() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt1461.kt");
      }

      @Test
      @TestMetadata("kt27221.kt")
      public void testKt27221() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt27221.kt");
      }

      @Test
      @TestMetadata("kt27221_2.kt")
      public void testKt27221_2() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt27221_2.kt");
      }

      @Test
      @TestMetadata("kt27221_irrelevantClasses.kt")
      public void testKt27221_irrelevantClasses() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt27221_irrelevantClasses.kt");
      }

      @Test
      @TestMetadata("kt3224.kt")
      public void testKt3224() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3224.kt");
      }

      @Test
      @TestMetadata("kt32358_1.kt")
      public void testKt32358_1() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt32358_1.kt");
      }

      @Test
      @TestMetadata("kt32358_3.kt")
      public void testKt32358_3() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt32358_3.kt");
      }

      @Test
      @TestMetadata("kt3244.kt")
      public void testKt3244() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3244.kt");
      }

      @Test
      @TestMetadata("kt3572.kt")
      public void testKt3572() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3572.kt");
      }

      @Test
      @TestMetadata("kt3711.kt")
      public void testKt3711() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3711.kt");
      }

      @Test
      @TestMetadata("kt3993.kt")
      public void testKt3993() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt3993.kt");
      }

      @Test
      @TestMetadata("kt45814.kt")
      public void testKt45814() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt45814.kt");
      }

      @Test
      @TestMetadata("kt51460.kt")
      public void testKt51460() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt51460.kt");
      }

      @Test
      @TestMetadata("kt5427.kt")
      public void testKt5427() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt5427.kt");
      }

      @Test
      @TestMetadata("kt5455.kt")
      public void testKt5455() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt5455.kt");
      }

      @Test
      @TestMetadata("kt68970.kt")
      public void testKt68970() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt68970.kt");
      }

      @Test
      @TestMetadata("kt7561.kt")
      public void testKt7561() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/kt7561.kt");
      }

      @Test
      @TestMetadata("lambdaAndArgument.kt")
      public void testLambdaAndArgument() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaAndArgument.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentNoSubstitutedReturn.kt")
      public void testLambdaArgumentNoSubstitutedReturn() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentNoSubstitutedReturn.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentWithExpectedGenericType.kt")
      public void testLambdaArgumentWithExpectedGenericType() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithExpectedGenericType.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentWithoutType.kt")
      public void testLambdaArgumentWithoutType() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutType.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentWithoutTypeIf.kt")
      public void testLambdaArgumentWithoutTypeIf() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeIf.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentWithoutTypeIfMerge.kt")
      public void testLambdaArgumentWithoutTypeIfMerge() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeIfMerge.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentWithoutTypeWhen.kt")
      public void testLambdaArgumentWithoutTypeWhen() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithoutTypeWhen.kt");
      }

      @Test
      @TestMetadata("lambdaCall.kt")
      public void testLambdaCall() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaCall.kt");
      }

      @Test
      @TestMetadata("lambdaCallAnnotated.kt")
      public void testLambdaCallAnnotated() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaCallAnnotated.kt");
      }

      @Test
      @TestMetadata("lambdaDeclaresAndModifies.kt")
      public void testLambdaDeclaresAndModifies() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifies.kt");
      }

      @Test
      @TestMetadata("lambdaDeclaresAndModifiesInLoop.kt")
      public void testLambdaDeclaresAndModifiesInLoop() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesInLoop.kt");
      }

      @Test
      @TestMetadata("lambdaDeclaresAndModifiesInSecondary.kt")
      public void testLambdaDeclaresAndModifiesInSecondary() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesInSecondary.kt");
      }

      @Test
      @TestMetadata("lambdaDeclaresAndModifiesWithDirectEq.kt")
      public void testLambdaDeclaresAndModifiesWithDirectEq() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaDeclaresAndModifiesWithDirectEq.kt");
      }

      @Test
      @TestMetadata("lambdaUsesOwnerModifies.kt")
      public void testLambdaUsesOwnerModifies() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/lambdaUsesOwnerModifies.kt");
      }

      @Test
      @TestMetadata("localFunBetween.kt")
      public void testLocalFunBetween() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/localFunBetween.kt");
      }

      @Test
      @TestMetadata("multipleResolvedCalls.kt")
      public void testMultipleResolvedCalls() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/multipleResolvedCalls.kt");
      }

      @Test
      @TestMetadata("noUnnecessarySmartCastForReceiver.kt")
      public void testNoUnnecessarySmartCastForReceiver() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/noUnnecessarySmartCastForReceiver.kt");
      }

      @Test
      @TestMetadata("notNullorNotNull.kt")
      public void testNotNullorNotNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/notNullorNotNull.kt");
      }

      @Test
      @TestMetadata("qualifiedObjectAfterSmartCast.kt")
      public void testQualifiedObjectAfterSmartCast() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/qualifiedObjectAfterSmartCast.kt");
      }

      @Test
      @TestMetadata("safeAs.kt")
      public void testSafeAs() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/safeAs.kt");
      }

      @Test
      @TestMetadata("severalSmartCastsOnReified.kt")
      public void testSeveralSmartCastsOnReified() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/severalSmartCastsOnReified.kt");
      }

      @Test
      @TestMetadata("shortIfExprNotNull.kt")
      public void testShortIfExprNotNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/shortIfExprNotNull.kt");
      }

      @Test
      @TestMetadata("smartCastAndArgumentApproximation.kt")
      public void testSmartCastAndArgumentApproximation() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastAndArgumentApproximation.kt");
      }

      @Test
      @TestMetadata("smartCastOnElvis.kt")
      public void testSmartCastOnElvis() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnElvis.kt");
      }

      @Test
      @TestMetadata("smartCastOnIf.kt")
      public void testSmartCastOnIf() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnIf.kt");
      }

      @Test
      @TestMetadata("smartCastOnLastExpressionOfLambdaAfterNothing.kt")
      public void testSmartCastOnLastExpressionOfLambdaAfterNothing() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnLastExpressionOfLambdaAfterNothing.kt");
      }

      @Test
      @TestMetadata("smartCastOnObject.kt")
      public void testSmartCastOnObject() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartCastOnObject.kt");
      }

      @Test
      @TestMetadata("smartcastBetweenClassAndTypeParameter.kt")
      public void testSmartcastBetweenClassAndTypeParameter() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastBetweenClassAndTypeParameter.kt");
      }

      @Test
      @TestMetadata("smartcastInFriendModule.kt")
      public void testSmartcastInFriendModule() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastInFriendModule.kt");
      }

      @Test
      @TestMetadata("smartcastToAliasedFunctionalType.kt")
      public void testSmartcastToAliasedFunctionalType() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastToAliasedFunctionalType.kt");
      }

      @Test
      @TestMetadata("smartcastToStarProjection.kt")
      public void testSmartcastToStarProjection() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastToStarProjection.kt");
      }

      @Test
      @TestMetadata("smartcastWithComplexFlexibleType.kt")
      public void testSmartcastWithComplexFlexibleType() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/smartcastWithComplexFlexibleType.kt");
      }

      @Test
      @TestMetadata("syntheticAccessorOnSmartcastedReceiver.kt")
      public void testSyntheticAccessorOnSmartcastedReceiver() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/syntheticAccessorOnSmartcastedReceiver.kt");
      }

      @Test
      @TestMetadata("thisWithLabel.kt")
      public void testThisWithLabel() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/thisWithLabel.kt");
      }

      @Test
      @TestMetadata("thisWithLabelAsReceiverPart.kt")
      public void testThisWithLabelAsReceiverPart() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/thisWithLabelAsReceiverPart.kt");
      }

      @Test
      @TestMetadata("threeImplicitReceivers.kt")
      public void testThreeImplicitReceivers() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/threeImplicitReceivers.kt");
      }

      @Test
      @TestMetadata("twoImplicitReceivers.kt")
      public void testTwoImplicitReceivers() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/twoImplicitReceivers.kt");
      }

      @Test
      @TestMetadata("typeDegradation.kt")
      public void testTypeDegradation() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/typeDegradation.kt");
      }

      @Test
      @TestMetadata("typeParameterWithBounds.kt")
      public void testTypeParameterWithBounds() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/typeParameterWithBounds.kt");
      }

      @Test
      @TestMetadata("varChangedInInitializer.kt")
      public void testVarChangedInInitializer() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varChangedInInitializer.kt");
      }

      @Test
      @TestMetadata("varChangedInLocalInitializer.kt")
      public void testVarChangedInLocalInitializer() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varChangedInLocalInitializer.kt");
      }

      @Test
      @TestMetadata("varInAccessor.kt")
      public void testVarInAccessor() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInAccessor.kt");
      }

      @Test
      @TestMetadata("varInInitNoPrimary.kt")
      public void testVarInInitNoPrimary() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInInitNoPrimary.kt");
      }

      @Test
      @TestMetadata("varInInitializer.kt")
      public void testVarInInitializer() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInInitializer.kt");
      }

      @Test
      @TestMetadata("varInSecondaryConstructor.kt")
      public void testVarInSecondaryConstructor() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInSecondaryConstructor.kt");
      }

      @Test
      @TestMetadata("varInsideLocalFun.kt")
      public void testVarInsideLocalFun() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/varInsideLocalFun.kt");
      }

      @Test
      @TestMetadata("variableRedeclaration.kt")
      public void testVariableRedeclaration() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/variableRedeclaration.kt");
      }

      @Test
      @TestMetadata("whenExprNonNull.kt")
      public void testWhenExprNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/whenExprNonNull.kt");
      }

      @Test
      @TestMetadata("whenIfExprNonNull.kt")
      public void testWhenIfExprNonNull() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/whenIfExprNonNull.kt");
      }

      @Test
      @TestMetadata("whenSubjectImpossible.kt")
      public void testWhenSubjectImpossible() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/whenSubjectImpossible.kt");
      }

      @Test
      @TestMetadata("whenSubjectImpossibleJava.kt")
      public void testWhenSubjectImpossibleJava() {
        runTest("compiler/testData/diagnostics/tests/smartCasts/whenSubjectImpossibleJava.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/castchecks")
      @TestDataPath("$PROJECT_ROOT")
      public class Castchecks {
        @Test
        @TestMetadata("impossible.kt")
        public void testImpossible() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/impossible.kt");
        }

        @Test
        @TestMetadata("insideCall.kt")
        public void testInsideCall() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/insideCall.kt");
        }

        @Test
        @TestMetadata("kt64645.kt")
        public void testKt64645() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/kt64645.kt");
        }

        @Test
        @TestMetadata("smartCastOfNullableExpressionWithExpectedType.kt")
        public void testSmartCastOfNullableExpressionWithExpectedType() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/castchecks/smartCastOfNullableExpressionWithExpectedType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/elvis")
      @TestDataPath("$PROJECT_ROOT")
      public class Elvis {
        @Test
        @TestMetadata("basicOff.kt")
        public void testBasicOff() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/elvis/basicOff.kt");
        }

        @Test
        @TestMetadata("impossible.kt")
        public void testImpossible() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/elvis/impossible.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        @TestMetadata("dependentOnPrevArg.kt")
        public void testDependentOnPrevArg() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/dependentOnPrevArg.kt");
        }

        @Test
        @TestMetadata("kt1355.kt")
        public void testKt1355() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt1355.kt");
        }

        @Test
        @TestMetadata("kt25432.kt")
        public void testKt25432() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt25432.kt");
        }

        @Test
        @TestMetadata("kt2746.kt")
        public void testKt2746() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt2746.kt");
        }

        @Test
        @TestMetadata("kt2851.kt")
        public void testKt2851() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt2851.kt");
        }

        @Test
        @TestMetadata("kt29767.kt")
        public void testKt29767() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt29767.kt");
        }

        @Test
        @TestMetadata("kt4009.kt")
        public void testKt4009() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4009.kt");
        }

        @Test
        @TestMetadata("kt4403.kt")
        public void testKt4403() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4403.kt");
        }

        @Test
        @TestMetadata("kt4415.kt")
        public void testKt4415() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt4415.kt");
        }

        @Test
        @TestMetadata("kt6242.kt")
        public void testKt6242() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/kt6242.kt");
        }

        @Test
        @TestMetadata("smartCastOnReceiver.kt")
        public void testSmartCastOnReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/smartCastOnReceiver.kt");
        }

        @Test
        @TestMetadata("stabilityOfSmartcastsAgainstGenericFunctions.kt")
        public void testStabilityOfSmartcastsAgainstGenericFunctions() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/stabilityOfSmartcastsAgainstGenericFunctions.kt");
        }

        @Test
        @TestMetadata("unneededUnstableSmartcast.kt")
        public void testUnneededUnstableSmartcast() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/inference/unneededUnstableSmartcast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/intersectionScope")
      @TestDataPath("$PROJECT_ROOT")
      public class IntersectionScope {
        @Test
        @TestMetadata("capturedSpecificity.kt")
        public void testCapturedSpecificity() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/capturedSpecificity.kt");
        }

        @Test
        @TestMetadata("conflictTypeParameters.kt")
        public void testConflictTypeParameters() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/conflictTypeParameters.kt");
        }

        @Test
        @TestMetadata("intersectReturnType.kt")
        public void testIntersectReturnType() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/intersectReturnType.kt");
        }

        @Test
        @TestMetadata("moreSpecificSetter.kt")
        public void testMoreSpecificSetter() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/moreSpecificSetter.kt");
        }

        @Test
        @TestMetadata("moreSpecificVisibility.kt")
        public void testMoreSpecificVisibility() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/moreSpecificVisibility.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/intersectionScope/simple.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts")
      @TestDataPath("$PROJECT_ROOT")
      public class LambdasWithContracts {
        @Test
        @TestMetadata("lambdaWithCallInPlaceAndOperators.kt")
        public void testLambdaWithCallInPlaceAndOperators() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAndOperators.kt");
        }

        @Test
        @TestMetadata("lambdaWithImpliesContract.kt")
        public void testLambdaWithImpliesContract() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithImpliesContract.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/loops")
      @TestDataPath("$PROJECT_ROOT")
      public class Loops {
        @Test
        @TestMetadata("doWhile.kt")
        public void testDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhile.kt");
        }

        @Test
        @TestMetadata("doWhileBreak.kt")
        public void testDoWhileBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileBreak.kt");
        }

        @Test
        @TestMetadata("doWhileContinue.kt")
        public void testDoWhileContinue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileContinue.kt");
        }

        @Test
        @TestMetadata("doWhileInCondition.kt")
        public void testDoWhileInCondition() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileInCondition.kt");
        }

        @Test
        @TestMetadata("doWhileNull.kt")
        public void testDoWhileNull() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNull.kt");
        }

        @Test
        @TestMetadata("ifBlockInsideDoWhile.kt")
        public void testIfBlockInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifBlockInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("ifElseBlockInsideDoWhile.kt")
        public void testIfElseBlockInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifElseBlockInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("ifInsideDoWhile.kt")
        public void testIfInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/ifInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("nestedDoWhile.kt")
        public void testNestedDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedDoWhile.kt");
        }

        @Test
        @TestMetadata("nestedLoops.kt")
        public void testNestedLoops() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoops.kt");
        }

        @Test
        @TestMetadata("nestedLoopsShort.kt")
        public void testNestedLoopsShort() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsShort.kt");
        }

        @Test
        @TestMetadata("nestedLoopsWithBreak.kt")
        public void testNestedLoopsWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithBreak.kt");
        }

        @Test
        @TestMetadata("nestedLoopsWithLongContinue.kt")
        public void testNestedLoopsWithLongContinue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithLongContinue.kt");
        }

        @Test
        @TestMetadata("safeCallInsideDoWhile.kt")
        public void testSafeCallInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/safeCallInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("useInsideDoWhile.kt")
        public void testUseInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/useInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("whenReturnInsideWhileTrue.kt")
        public void testWhenReturnInsideWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whenReturnInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("whileInCondition.kt")
        public void testWhileInCondition() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileInCondition.kt");
        }

        @Test
        @TestMetadata("whileInConditionWithBreak.kt")
        public void testWhileInConditionWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileInConditionWithBreak.kt");
        }

        @Test
        @TestMetadata("whileNull.kt")
        public void testWhileNull() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileNull.kt");
        }

        @Test
        @TestMetadata("whileNullAssignToSomething.kt")
        public void testWhileNullAssignToSomething() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileNullAssignToSomething.kt");
        }

        @Test
        @TestMetadata("whileTrue.kt")
        public void testWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrue.kt");
        }

        @Test
        @TestMetadata("whileTrueReturn.kt")
        public void testWhileTrueReturn() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueReturn.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals")
      @TestDataPath("$PROJECT_ROOT")
      public class ObjectLiterals {
        @Test
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/assignment.kt");
        }

        @Test
        @TestMetadata("base.kt")
        public void testBase() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/base.kt");
        }

        @Test
        @TestMetadata("exclexcl.kt")
        public void testExclexcl() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexcl.kt");
        }

        @Test
        @TestMetadata("exclexclArgument.kt")
        public void testExclexclArgument() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexclArgument.kt");
        }

        @Test
        @TestMetadata("exclexclTwoArgument.kt")
        public void testExclexclTwoArgument() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/exclexclTwoArgument.kt");
        }

        @Test
        @TestMetadata("kt7110.kt")
        public void testKt7110() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/kt7110.kt");
        }

        @Test
        @TestMetadata("receiver.kt")
        public void testReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/objectLiterals/receiver.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals")
      @TestDataPath("$PROJECT_ROOT")
      public class PublicVals {
        @Test
        @TestMetadata("kt4409.kt")
        public void testKt4409() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/kt4409.kt");
        }

        @Test
        @TestMetadata("kt5502.kt")
        public void testKt5502() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/kt5502.kt");
        }

        @Test
        @TestMetadata("protected.kt")
        public void testProtected() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/protected.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/publicVals/simple.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls")
      @TestDataPath("$PROJECT_ROOT")
      public class Safecalls {
        @Test
        @TestMetadata("chainAndUse.kt")
        public void testChainAndUse() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainAndUse.kt");
        }

        @Test
        @TestMetadata("chainInChain.kt")
        public void testChainInChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/chainInChain.kt");
        }

        @Test
        @TestMetadata("childProperty.kt")
        public void testChildProperty() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/childProperty.kt");
        }

        @Test
        @TestMetadata("extension.kt")
        public void testExtension() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/extension.kt");
        }

        @Test
        @TestMetadata("extensionCall.kt")
        public void testExtensionCall() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/extensionCall.kt");
        }

        @Test
        @TestMetadata("falseArgument.kt")
        public void testFalseArgument() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseArgument.kt");
        }

        @Test
        @TestMetadata("falseChain.kt")
        public void testFalseChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseChain.kt");
        }

        @Test
        @TestMetadata("falseExtension.kt")
        public void testFalseExtension() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/falseExtension.kt");
        }

        @Test
        @TestMetadata("insideCall.kt")
        public void testInsideCall() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/insideCall.kt");
        }

        @Test
        @TestMetadata("longChain.kt")
        public void testLongChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/longChain.kt");
        }

        @Test
        @TestMetadata("nullableReceiverWithExclExcl.kt")
        public void testNullableReceiverWithExclExcl() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverWithExclExcl.kt");
        }

        @Test
        @TestMetadata("property.kt")
        public void testProperty() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/property.kt");
        }

        @Test
        @TestMetadata("propertyChain.kt")
        public void testPropertyChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/propertyChain.kt");
        }

        @Test
        @TestMetadata("receiver.kt")
        public void testReceiver() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiver.kt");
        }

        @Test
        @TestMetadata("receiverAndChain.kt")
        public void testReceiverAndChain() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/safecalls/receiverAndChain.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/variables")
      @TestDataPath("$PROJECT_ROOT")
      public class Variables {
        @Test
        @TestMetadata("accessorAndFunction.kt")
        public void testAccessorAndFunction() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/accessorAndFunction.kt");
        }

        @Test
        @TestMetadata("assignmentConversion.kt")
        public void testAssignmentConversion() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/assignmentConversion.kt");
        }

        @Test
        @TestMetadata("branchesBeforeAssignment.kt")
        public void testBranchesBeforeAssignment() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/branchesBeforeAssignment.kt");
        }

        @Test
        @TestMetadata("ifElseBlockInsideDoWhile.kt")
        public void testIfElseBlockInsideDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifElseBlockInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("ifNullAssignment.kt")
        public void testIfNullAssignment() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifNullAssignment.kt");
        }

        @Test
        @TestMetadata("ifVarIs.kt")
        public void testIfVarIs() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIs.kt");
        }

        @Test
        @TestMetadata("ifVarIsAnd.kt")
        public void testIfVarIsAnd() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIsAnd.kt");
        }

        @Test
        @TestMetadata("inPropertySam.kt")
        public void testInPropertySam() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/inPropertySam.kt");
        }

        @Test
        @TestMetadata("infix.kt")
        public void testInfix() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/infix.kt");
        }

        @Test
        @TestMetadata("kt7599.kt")
        public void testKt7599() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/kt7599.kt");
        }

        @Test
        @TestMetadata("propertyFromDependsOnModule.kt")
        public void testPropertyFromDependsOnModule() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertyFromDependsOnModule.kt");
        }

        @Test
        @TestMetadata("propertyNotNeeded.kt")
        public void testPropertyNotNeeded() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertyNotNeeded.kt");
        }

        @Test
        @TestMetadata("propertyOfLocalClass.kt")
        public void testPropertyOfLocalClass() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertyOfLocalClass.kt");
        }

        @Test
        @TestMetadata("propertySubtype.kt")
        public void testPropertySubtype() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtype.kt");
        }

        @Test
        @TestMetadata("propertySubtypeInMember.kt")
        public void testPropertySubtypeInMember() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtypeInMember.kt");
        }

        @Test
        @TestMetadata("propertySubtypeInMemberCheck.kt")
        public void testPropertySubtypeInMemberCheck() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/propertySubtypeInMemberCheck.kt");
        }

        @Test
        @TestMetadata("varAsUse.kt")
        public void testVarAsUse() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/varAsUse.kt");
        }

        @Test
        @TestMetadata("varNotChangedInLoop.kt")
        public void testVarNotChangedInLoop() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/varNotChangedInLoop.kt");
        }

        @Test
        @TestMetadata("whileWithBreak.kt")
        public void testWhileWithBreak() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/variables/whileWithBreak.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull")
      @TestDataPath("$PROJECT_ROOT")
      public class Varnotnull {
        @Test
        @TestMetadata("capturedInlineModifiedBefore.kt")
        public void testCapturedInlineModifiedBefore() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/capturedInlineModifiedBefore.kt");
        }

        @Test
        @TestMetadata("classDelegationDeprecated.kt")
        public void testClassDelegationDeprecated() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/classDelegationDeprecated.kt");
        }

        @Test
        @TestMetadata("equalityAndIdentity.kt")
        public void testEqualityAndIdentity() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/equalityAndIdentity.kt");
        }

        @Test
        @TestMetadata("ifVarNotNull.kt")
        public void testIfVarNotNull() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNotNull.kt");
        }

        @Test
        @TestMetadata("ifVarNotNullAnd.kt")
        public void testIfVarNotNullAnd() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNotNullAnd.kt");
        }

        @Test
        @TestMetadata("ifVarNullElse.kt")
        public void testIfVarNullElse() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNullElse.kt");
        }

        @Test
        @TestMetadata("ifVarNullReturn.kt")
        public void testIfVarNullReturn() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/ifVarNullReturn.kt");
        }

        @Test
        @TestMetadata("inference.kt")
        public void testInference() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/inference.kt");
        }

        @Test
        @TestMetadata("infix.kt")
        public void testInfix() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/infix.kt");
        }

        @Test
        @TestMetadata("iterations.kt")
        public void testIterations() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/iterations.kt");
        }

        @Test
        @TestMetadata("nestedDoWhile.kt")
        public void testNestedDoWhile() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedDoWhile.kt");
        }

        @Test
        @TestMetadata("nestedLoops.kt")
        public void testNestedLoops() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedLoops.kt");
        }

        @Test
        @TestMetadata("postfixNotnullClassIncrement.kt")
        public void testPostfixNotnullClassIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNotnullClassIncrement.kt");
        }

        @Test
        @TestMetadata("postfixNullableClassIncrement.kt")
        public void testPostfixNullableClassIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNullableClassIncrement.kt");
        }

        @Test
        @TestMetadata("prefixNotnullClassIncrement.kt")
        public void testPrefixNotnullClassIncrement() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNotnullClassIncrement.kt");
        }

        @Test
        @TestMetadata("setSameInTry.kt")
        public void testSetSameInTry() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/setSameInTry.kt");
        }

        @Test
        @TestMetadata("toFlexibleType.kt")
        public void testToFlexibleType() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/toFlexibleType.kt");
        }

        @Test
        @TestMetadata("unnecessary.kt")
        public void testUnnecessary() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessary.kt");
        }

        @Test
        @TestMetadata("unnecessaryWithBranch.kt")
        public void testUnnecessaryWithBranch() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessaryWithBranch.kt");
        }

        @Test
        @TestMetadata("varCapturedInInlineClosure.kt")
        public void testVarCapturedInInlineClosure() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInInlineClosure.kt");
        }

        @Test
        @TestMetadata("varCapturedInSafeClosure.kt")
        public void testVarCapturedInSafeClosure() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInSafeClosure.kt");
        }

        @Test
        @TestMetadata("varCheck.kt")
        public void testVarCheck() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCheck.kt");
        }

        @Test
        @TestMetadata("varNotChangedInLoop.kt")
        public void testVarNotChangedInLoop() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/varNotChangedInLoop.kt");
        }

        @Test
        @TestMetadata("whileTrue.kt")
        public void testWhileTrue() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrue.kt");
        }

        @Test
        @TestMetadata("whileTrueWithBracketSet.kt")
        public void testWhileTrueWithBracketSet() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrueWithBracketSet.kt");
        }

        @Test
        @TestMetadata("whileTrueWithBrackets.kt")
        public void testWhileTrueWithBrackets() {
          runTest("compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileTrueWithBrackets.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility")
    @TestDataPath("$PROJECT_ROOT")
    public class SourceCompatibility {
      @Test
      @TestMetadata("noBigFunctionTypes.kt")
      public void testNoBigFunctionTypes() {
        runTest("compiler/testData/diagnostics/tests/sourceCompatibility/noBigFunctionTypes.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion")
      @TestDataPath("$PROJECT_ROOT")
      public class ApiVersion {
        @Test
        @TestMetadata("sinceOldVersionIsOK.kt")
        public void testSinceOldVersionIsOK() {
          runTest("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/sinceOldVersionIsOK.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/substitutions")
    @TestDataPath("$PROJECT_ROOT")
    public class Substitutions {
      @Test
      @TestMetadata("kt4887.kt")
      public void testKt4887() {
        runTest("compiler/testData/diagnostics/tests/substitutions/kt4887.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/subtyping")
    @TestDataPath("$PROJECT_ROOT")
    public class Subtyping {
      @Test
      @TestMetadata("delegatedConstructor.kt")
      public void testDelegatedConstructor() {
        runTest("compiler/testData/diagnostics/tests/subtyping/delegatedConstructor.kt");
      }

      @Test
      @TestMetadata("extFunctionTypeAsSuperTypeRestrictionLifted.kt")
      public void testExtFunctionTypeAsSuperTypeRestrictionLifted() {
        runTest("compiler/testData/diagnostics/tests/subtyping/extFunctionTypeAsSuperTypeRestrictionLifted.kt");
      }

      @Test
      @TestMetadata("functionTypeAsSuperType.kt")
      public void testFunctionTypeAsSuperType() {
        runTest("compiler/testData/diagnostics/tests/subtyping/functionTypeAsSuperType.kt");
      }

      @Test
      @TestMetadata("invariantArgumentForTypeParameterWithMultipleBounds.kt")
      public void testInvariantArgumentForTypeParameterWithMultipleBounds() {
        runTest("compiler/testData/diagnostics/tests/subtyping/invariantArgumentForTypeParameterWithMultipleBounds.kt");
      }

      @Test
      @TestMetadata("kt2069.kt")
      public void testKt2069() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kt2069.kt");
      }

      @Test
      @TestMetadata("kt47148.kt")
      public void testKt47148() {
        runTest("compiler/testData/diagnostics/tests/subtyping/kt47148.kt");
      }

      @Test
      @TestMetadata("suspendExtFunctionTypeAsSuperTypeRestrictionLifted.kt")
      public void testSuspendExtFunctionTypeAsSuperTypeRestrictionLifted() {
        runTest("compiler/testData/diagnostics/tests/subtyping/suspendExtFunctionTypeAsSuperTypeRestrictionLifted.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/suppress")
    @TestDataPath("$PROJECT_ROOT")
    public class Suppress {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings")
      @TestDataPath("$PROJECT_ROOT")
      public class AllWarnings {
        @Test
        @TestMetadata("suppressWarningsOnAnonymousObjectInVariable.kt")
        public void testSuppressWarningsOnAnonymousObjectInVariable() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnAnonymousObjectInVariable.kt");
        }

        @Test
        @TestMetadata("suppressWarningsOnClassObject.kt")
        public void testSuppressWarningsOnClassObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClassObject.kt");
        }

        @Test
        @TestMetadata("suppressWarningsOnExpression.kt")
        public void testSuppressWarningsOnExpression() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnExpression.kt");
        }

        @Test
        @TestMetadata("suppressWarningsOnFile.kt")
        public void testSuppressWarningsOnFile() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnFile.kt");
        }

        @Test
        @TestMetadata("suppressWarningsOnFunction.kt")
        public void testSuppressWarningsOnFunction() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnFunction.kt");
        }

        @Test
        @TestMetadata("suppressWarningsOnObject.kt")
        public void testSuppressWarningsOnObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnObject.kt");
        }

        @Test
        @TestMetadata("suppressWarningsOnParameter.kt")
        public void testSuppressWarningsOnParameter() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnParameter.kt");
        }

        @Test
        @TestMetadata("suppressWarningsOnProperty.kt")
        public void testSuppressWarningsOnProperty() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnProperty.kt");
        }

        @Test
        @TestMetadata("suppressWarningsOnPropertyAccessor.kt")
        public void testSuppressWarningsOnPropertyAccessor() {
          runTest("compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnPropertyAccessor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/suppress/manyWarnings")
      @TestDataPath("$PROJECT_ROOT")
      public class ManyWarnings {
        @Test
        @TestMetadata("mixed.kt")
        public void testMixed() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/mixed.kt");
        }

        @Test
        @TestMetadata("onClass.kt")
        public void testOnClass() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClass.kt");
        }

        @Test
        @TestMetadata("onClassObject.kt")
        public void testOnClassObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onClassObject.kt");
        }

        @Test
        @TestMetadata("onExpression.kt")
        public void testOnExpression() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onExpression.kt");
        }

        @Test
        @TestMetadata("onFunction.kt")
        public void testOnFunction() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onFunction.kt");
        }

        @Test
        @TestMetadata("onObject.kt")
        public void testOnObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onObject.kt");
        }

        @Test
        @TestMetadata("onParameter.kt")
        public void testOnParameter() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onParameter.kt");
        }

        @Test
        @TestMetadata("onProperty.kt")
        public void testOnProperty() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onProperty.kt");
        }

        @Test
        @TestMetadata("onPropertyAccessor.kt")
        public void testOnPropertyAccessor() {
          runTest("compiler/testData/diagnostics/tests/suppress/manyWarnings/onPropertyAccessor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/suppress/oneWarning")
      @TestDataPath("$PROJECT_ROOT")
      public class OneWarning {
        @Test
        @TestMetadata("onBlockStatement.kt")
        public void testOnBlockStatement() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onBlockStatement.kt");
        }

        @Test
        @TestMetadata("onBlockStatementSameLine.kt")
        public void testOnBlockStatementSameLine() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onBlockStatementSameLine.kt");
        }

        @Test
        @TestMetadata("onClass.kt")
        public void testOnClass() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onClass.kt");
        }

        @Test
        @TestMetadata("onClassObject.kt")
        public void testOnClassObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onClassObject.kt");
        }

        @Test
        @TestMetadata("onExpression.kt")
        public void testOnExpression() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onExpression.kt");
        }

        @Test
        @TestMetadata("onFunction.kt")
        public void testOnFunction() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onFunction.kt");
        }

        @Test
        @TestMetadata("onLocalVariable.kt")
        public void testOnLocalVariable() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onLocalVariable.kt");
        }

        @Test
        @TestMetadata("onObject.kt")
        public void testOnObject() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onObject.kt");
        }

        @Test
        @TestMetadata("onParameter.kt")
        public void testOnParameter() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onParameter.kt");
        }

        @Test
        @TestMetadata("onProperty.kt")
        public void testOnProperty() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onProperty.kt");
        }

        @Test
        @TestMetadata("onPropertyAccessor.kt")
        public void testOnPropertyAccessor() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onPropertyAccessor.kt");
        }

        @Test
        @TestMetadata("onTypeParameter.kt")
        public void testOnTypeParameter() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/onTypeParameter.kt");
        }

        @Test
        @TestMetadata("optInDiagnosticOnPropertyGetter.kt")
        public void testOptInDiagnosticOnPropertyGetter() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/optInDiagnosticOnPropertyGetter.kt");
        }

        @Test
        @TestMetadata("suppressOnDeclarationItself.kt")
        public void testSuppressOnDeclarationItself() {
          runTest("compiler/testData/diagnostics/tests/suppress/oneWarning/suppressOnDeclarationItself.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/suspendConversion")
    @TestDataPath("$PROJECT_ROOT")
    public class SuspendConversion {
      @Test
      @TestMetadata("basicSuspendConversionGenerics.kt")
      public void testBasicSuspendConversionGenerics() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/basicSuspendConversionGenerics.kt");
      }

      @Test
      @TestMetadata("chainedFunSuspendConversionForSimpleExpression.kt")
      public void testChainedFunSuspendConversionForSimpleExpression() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/chainedFunSuspendConversionForSimpleExpression.kt");
      }

      @Test
      @TestMetadata("conversionInLastStatementOfWhenBranch.kt")
      public void testConversionInLastStatementOfWhenBranch() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/conversionInLastStatementOfWhenBranch.kt");
      }

      @Test
      @TestMetadata("implicitInvoke.kt")
      public void testImplicitInvoke() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/implicitInvoke.kt");
      }

      @Test
      @TestMetadata("implicitInvokeFromChildClass.kt")
      public void testImplicitInvokeFromChildClass() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/implicitInvokeFromChildClass.kt");
      }

      @Test
      @TestMetadata("inGenericArgument.kt")
      public void testInGenericArgument() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/inGenericArgument.kt");
      }

      @Test
      @TestMetadata("severalConversionsInOneCall.kt")
      public void testSeveralConversionsInOneCall() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/severalConversionsInOneCall.kt");
      }

      @Test
      @TestMetadata("suspendAndFunConversionInDisabledMode.kt")
      public void testSuspendAndFunConversionInDisabledMode() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendAndFunConversionInDisabledMode.kt");
      }

      @Test
      @TestMetadata("suspendConversionCompatibility.kt")
      public void testSuspendConversionCompatibility() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionCompatibility.kt");
      }

      @Test
      @TestMetadata("suspendConversionCompatibilityInDisabledMode.kt")
      public void testSuspendConversionCompatibilityInDisabledMode() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionCompatibilityInDisabledMode.kt");
      }

      @Test
      @TestMetadata("suspendConversionForLambdaList.kt")
      public void testSuspendConversionForLambdaList() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionForLambdaList.kt");
      }

      @Test
      @TestMetadata("suspendConversionOnVarargElements.kt")
      public void testSuspendConversionOnVarargElements() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionOnVarargElements.kt");
      }

      @Test
      @TestMetadata("suspendConversionWithFunInterfaces.kt")
      public void testSuspendConversionWithFunInterfaces() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionWithFunInterfaces.kt");
      }

      @Test
      @TestMetadata("suspendConversionWithReferenceAdaptation.kt")
      public void testSuspendConversionWithReferenceAdaptation() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendConversionWithReferenceAdaptation.kt");
      }

      @Test
      @TestMetadata("suspendFunctionExpectedTypeAndWhen.kt")
      public void testSuspendFunctionExpectedTypeAndWhen() {
        runTest("compiler/testData/diagnostics/tests/suspendConversion/suspendFunctionExpectedTypeAndWhen.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/syntax")
    @TestDataPath("$PROJECT_ROOT")
    public class Syntax {
      @Test
      @TestMetadata("complicatedLTGTE.kt")
      public void testComplicatedLTGTE() {
        runTest("compiler/testData/diagnostics/tests/syntax/complicatedLTGTE.kt");
      }

      @Test
      @TestMetadata("incorrectLTGTFallback.kt")
      public void testIncorrectLTGTFallback() {
        runTest("compiler/testData/diagnostics/tests/syntax/incorrectLTGTFallback.kt");
      }

      @Test
      @TestMetadata("legacyHeaderAndImplKeywordsInEnumDefinition.kt")
      public void testLegacyHeaderAndImplKeywordsInEnumDefinition() {
        runTest("compiler/testData/diagnostics/tests/syntax/legacyHeaderAndImplKeywordsInEnumDefinition.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions")
    @TestDataPath("$PROJECT_ROOT")
    public class SyntheticExtensions {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties")
      @TestDataPath("$PROJECT_ROOT")
      public class JavaProperties {
        @Test
        @TestMetadata("CompiledClass.kt")
        public void testCompiledClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/CompiledClass.kt");
        }

        @Test
        @TestMetadata("Deprecated.kt")
        public void testDeprecated() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Deprecated.kt");
        }

        @Test
        @TestMetadata("FromTwoBases.kt")
        public void testFromTwoBases() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FromTwoBases.kt");
        }

        @Test
        @TestMetadata("FullySupportedSyntheticJavaPropertyReference.kt")
        public void testFullySupportedSyntheticJavaPropertyReference() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FullySupportedSyntheticJavaPropertyReference.kt");
        }

        @Test
        @TestMetadata("GenericClass.kt")
        public void testGenericClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GenericClass.kt");
        }

        @Test
        @TestMetadata("GetterAndSetter.kt")
        public void testGetterAndSetter() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GetterAndSetter.kt");
        }

        @Test
        @TestMetadata("ImplicitReceiver.kt")
        public void testImplicitReceiver() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/ImplicitReceiver.kt");
        }

        @Test
        @TestMetadata("JavaOverridesKotlin.kt")
        public void testJavaOverridesKotlin() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/JavaOverridesKotlin.kt");
        }

        @Test
        @TestMetadata("KotlinOverridesJava3.kt")
        public void testKotlinOverridesJava3() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava3.kt");
        }

        @Test
        @TestMetadata("KotlinOverridesJava4.kt")
        public void testKotlinOverridesJava4() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava4.kt");
        }

        @Test
        @TestMetadata("KotlinOverridesJava5.kt")
        public void testKotlinOverridesJava5() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava5.kt");
        }

        @Test
        @TestMetadata("nonAsciiSecondChar.kt")
        public void testNonAsciiSecondChar() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/nonAsciiSecondChar.kt");
        }

        @Test
        @TestMetadata("OverrideOnlyGetterFromGenericJavaClass.kt")
        public void testOverrideOnlyGetterFromGenericJavaClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OverrideOnlyGetterFromGenericJavaClass.kt");
        }

        @Test
        @TestMetadata("SmartCast.kt")
        public void testSmartCast() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SmartCast.kt");
        }

        @Test
        @TestMetadata("SmartCastImplicitReceiver.kt")
        public void testSmartCastImplicitReceiver() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SmartCastImplicitReceiver.kt");
        }

        @Test
        @TestMetadata("TypeParameterReceiver.kt")
        public void testTypeParameterReceiver() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/TypeParameterReceiver.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters")
      @TestDataPath("$PROJECT_ROOT")
      public class SamAdapters {
        @Test
        @TestMetadata("Deprecated.kt")
        public void testDeprecated() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Deprecated.kt");
        }

        @Test
        @TestMetadata("GenericClass.kt")
        public void testGenericClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericClass.kt");
        }

        @Test
        @TestMetadata("GenericMethod.kt")
        public void testGenericMethod() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericMethod.kt");
        }

        @Test
        @TestMetadata("GenericMethodInGenericClass.kt")
        public void testGenericMethodInGenericClass() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/GenericMethodInGenericClass.kt");
        }

        @Test
        @TestMetadata("PassNull.kt")
        public void testPassNull() {
          runTest("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/PassNull.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/targetedBuiltIns")
    @TestDataPath("$PROJECT_ROOT")
    public class TargetedBuiltIns {
      @Test
      @TestMetadata("removeIf.kt")
      public void testRemoveIf() {
        runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/removeIf.kt");
      }

      @Test
      @TestMetadata("stream.kt")
      public void testStream() {
        runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/stream.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility")
      @TestDataPath("$PROJECT_ROOT")
      public class BackwardCompatibility {
        @Test
        @TestMetadata("derivedInterfaces.kt")
        public void testDerivedInterfaces() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/derivedInterfaces.kt");
        }

        @Test
        @TestMetadata("fillInStackTrace.kt")
        public void testFillInStackTrace() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/fillInStackTrace.kt");
        }

        @Test
        @TestMetadata("hashMapGetOrDefault.kt")
        public void testHashMapGetOrDefault() {
          runTest("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/hashMapGetOrDefault.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithExplicitApi")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithExplicitApi {
      @Test
      @TestMetadata("mustBeEffectivelyPublic.kt")
      public void testMustBeEffectivelyPublic() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/mustBeEffectivelyPublic.kt");
      }

      @Test
      @TestMetadata("noErrorsForMemebersInsideInternalDeclaration.kt")
      public void testNoErrorsForMemebersInsideInternalDeclaration() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitApi/noErrorsForMemebersInsideInternalDeclaration.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithExplicitReturnTypes {
      @Test
      @TestMetadata("mustBeEffectivelyPublic.kt")
      public void testMustBeEffectivelyPublic() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes/mustBeEffectivelyPublic.kt");
      }

      @Test
      @TestMetadata("noErrorsForMemebersInsideInternalDeclaration.kt")
      public void testNoErrorsForMemebersInsideInternalDeclaration() {
        runTest("compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes/noErrorsForMemebersInsideInternalDeclaration.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava17")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithJava17 {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmRecord {
        @Test
        @TestMetadata("javaRecordWithCanonicalConstructor.kt")
        public void testJavaRecordWithCanonicalConstructor() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/javaRecordWithCanonicalConstructor.kt");
        }

        @Test
        @TestMetadata("javaRecordWithExplicitComponent.kt")
        public void testJavaRecordWithExplicitComponent() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/javaRecordWithExplicitComponent.kt");
        }

        @Test
        @TestMetadata("javaRecordWithGeneric.kt")
        public void testJavaRecordWithGeneric() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/javaRecordWithGeneric.kt");
        }

        @Test
        @TestMetadata("simpleRecords.kt")
        public void testSimpleRecords() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/simpleRecords.kt");
        }

        @Test
        @TestMetadata("simpleRecordsWithSecondaryConstructor.kt")
        public void testSimpleRecordsWithSecondaryConstructor() {
          runTest("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/simpleRecordsWithSecondaryConstructor.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava21")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithJava21 {
      @Test
      @TestMetadata("changeInFirstOverloadResolution.kt")
      public void testChangeInFirstOverloadResolution() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/changeInFirstOverloadResolution.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullability20.kt")
      public void testNewListMethodsNullability20() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullability20.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityLinkedList20.kt")
      public void testNewListMethodsNullabilityLinkedList20() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityLinkedList20.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityOverrides20.kt")
      public void testNewListMethodsNullabilityOverrides20() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityOverrides20.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityOverridesLinkedList20.kt")
      public void testNewListMethodsNullabilityOverridesLinkedList20() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityOverridesLinkedList20.kt");
      }

      @Test
      @TestMetadata("noFalsePositiveAbstractToArray.kt")
      public void testNoFalsePositiveAbstractToArray() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/noFalsePositiveAbstractToArray.kt");
      }

      @Test
      @TestMetadata("otherHiddenInDeclaring.kt")
      public void testOtherHiddenInDeclaring() {
        runTest("compiler/testData/diagnostics/tests/testsWithJava21/otherHiddenInDeclaring.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper")
    @TestDataPath("$PROJECT_ROOT")
    public class ThisAndSuper {
      @Test
      @TestMetadata("aliasedSupertype.kt")
      public void testAliasedSupertype() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/aliasedSupertype.kt");
      }

      @Test
      @TestMetadata("ambigousLabelOnThis.kt")
      public void testAmbigousLabelOnThis() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/ambigousLabelOnThis.kt");
      }

      @Test
      @TestMetadata("considerAnonymousObjectsForSuperclassNotAccessibleFromInterface.kt")
      public void testConsiderAnonymousObjectsForSuperclassNotAccessibleFromInterface() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/considerAnonymousObjectsForSuperclassNotAccessibleFromInterface.kt");
      }

      @Test
      @TestMetadata("genericQualifiedSuperOverridden.kt")
      public void testGenericQualifiedSuperOverridden() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/genericQualifiedSuperOverridden.kt");
      }

      @Test
      @TestMetadata("qualifiedSuperOverridden.kt")
      public void testQualifiedSuperOverridden() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/qualifiedSuperOverridden.kt");
      }

      @Test
      @TestMetadata("QualifiedThisAsExtensionCallableExpressionBody.kt")
      public void testQualifiedThisAsExtensionCallableExpressionBody() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/QualifiedThisAsExtensionCallableExpressionBody.kt");
      }

      @Test
      @TestMetadata("traitSuperCall.kt")
      public void testTraitSuperCall() {
        runTest("compiler/testData/diagnostics/tests/thisAndSuper/traitSuperCall.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper")
      @TestDataPath("$PROJECT_ROOT")
      public class UnqualifiedSuper {
        @Test
        @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
        public void testUnqualifiedSuperWithDeeperHierarchies() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithDeeperHierarchies.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithGenerics.kt")
        public void testUnqualifiedSuperWithGenerics() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithGenerics.kt");
        }

        @Test
        @TestMetadata("withMethodOfAnyOverridenInInterface.kt")
        public void testWithMethodOfAnyOverridenInInterface() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodOfAnyOverridenInInterface.kt");
        }

        @Test
        @TestMetadata("withMethodsOfAny.kt")
        public void testWithMethodsOfAny() {
          runTest("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodsOfAny.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/typeParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeParameters {
      @Test
      @TestMetadata("companionPropertyAndTypeParameter2.kt")
      public void testCompanionPropertyAndTypeParameter2() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/companionPropertyAndTypeParameter2.kt");
      }

      @Test
      @TestMetadata("dontIntersectUpperBoundWithExpectedType.kt")
      public void testDontIntersectUpperBoundWithExpectedType() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/dontIntersectUpperBoundWithExpectedType.kt");
      }

      @Test
      @TestMetadata("dontLoseUpperNonExpectedTypeConstraints.kt")
      public void testDontLoseUpperNonExpectedTypeConstraints() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/dontLoseUpperNonExpectedTypeConstraints.kt");
      }

      @Test
      @TestMetadata("implicitNothingOfJavaCallAgainstNotNothingExpectedType.kt")
      public void testImplicitNothingOfJavaCallAgainstNotNothingExpectedType() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/implicitNothingOfJavaCallAgainstNotNothingExpectedType.kt");
      }

      @Test
      @TestMetadata("implicitNothingOnDelegates.kt")
      public void testImplicitNothingOnDelegates() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/implicitNothingOnDelegates.kt");
      }

      @Test
      @TestMetadata("kt42042.kt")
      public void testKt42042() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt42042.kt");
      }

      @Test
      @TestMetadata("kt42472.kt")
      public void testKt42472() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt42472.kt");
      }

      @Test
      @TestMetadata("kt46186withEmptyIntersections.kt")
      public void testKt46186withEmptyIntersections() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/kt46186withEmptyIntersections.kt");
      }

      @Test
      @TestMetadata("outerTypeParameterAsBound.kt")
      public void testOuterTypeParameterAsBound() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/outerTypeParameterAsBound.kt");
      }

      @Test
      @TestMetadata("outerTypeParameterAsSupertype.kt")
      public void testOuterTypeParameterAsSupertype() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/outerTypeParameterAsSupertype.kt");
      }

      @Test
      @TestMetadata("starProjectionInsteadOutCaptured.kt")
      public void testStarProjectionInsteadOutCaptured() {
        runTest("compiler/testData/diagnostics/tests/typeParameters/starProjectionInsteadOutCaptured.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/typealias")
    @TestDataPath("$PROJECT_ROOT")
    public class Typealias {
      @Test
      @TestMetadata("classReference.kt")
      public void testClassReference() {
        runTest("compiler/testData/diagnostics/tests/typealias/classReference.kt");
      }

      @Test
      @TestMetadata("enumEntryQualifier.kt")
      public void testEnumEntryQualifier() {
        runTest("compiler/testData/diagnostics/tests/typealias/enumEntryQualifier.kt");
      }

      @Test
      @TestMetadata("expansionDnnTypeArgument.kt")
      public void testExpansionDnnTypeArgument() {
        runTest("compiler/testData/diagnostics/tests/typealias/expansionDnnTypeArgument.kt");
      }

      @Test
      @TestMetadata("expansionWithinElvis.kt")
      public void testExpansionWithinElvis() {
        runTest("compiler/testData/diagnostics/tests/typealias/expansionWithinElvis.kt");
      }

      @Test
      @TestMetadata("flexibleTypeExpansion.kt")
      public void testFlexibleTypeExpansion() {
        runTest("compiler/testData/diagnostics/tests/typealias/flexibleTypeExpansion.kt");
      }

      @Test
      @TestMetadata("functionTypeInTypeAlias.kt")
      public void testFunctionTypeInTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/functionTypeInTypeAlias.kt");
      }

      @Test
      @TestMetadata("genericTypeAliasConstructor.kt")
      public void testGenericTypeAliasConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/genericTypeAliasConstructor.kt");
      }

      @Test
      @TestMetadata("genericTypeAliasObject.kt")
      public void testGenericTypeAliasObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/genericTypeAliasObject.kt");
      }

      @Test
      @TestMetadata("importForTypealiasObject.kt")
      public void testImportForTypealiasObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/importForTypealiasObject.kt");
      }

      @Test
      @TestMetadata("inGenerics.kt")
      public void testInGenerics() {
        runTest("compiler/testData/diagnostics/tests/typealias/inGenerics.kt");
      }

      @Test
      @TestMetadata("innerClassTypeAliasConstructorReference.kt")
      public void testInnerClassTypeAliasConstructorReference() {
        runTest("compiler/testData/diagnostics/tests/typealias/innerClassTypeAliasConstructorReference.kt");
      }

      @Test
      @TestMetadata("intToLongApproximationThroughTypeAlias.kt")
      public void testIntToLongApproximationThroughTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/intToLongApproximationThroughTypeAlias.kt");
      }

      @Test
      @TestMetadata("isAsWithTypeAlias.kt")
      public void testIsAsWithTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/isAsWithTypeAlias.kt");
      }

      @Test
      @TestMetadata("kt57065.kt")
      public void testKt57065() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt57065.kt");
      }

      @Test
      @TestMetadata("kt62099.kt")
      public void testKt62099() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt62099.kt");
      }

      @Test
      @TestMetadata("kt67628.kt")
      public void testKt67628() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt67628.kt");
      }

      @Test
      @TestMetadata("kt69227.kt")
      public void testKt69227() {
        runTest("compiler/testData/diagnostics/tests/typealias/kt69227.kt");
      }

      @Test
      @TestMetadata("methodReference.kt")
      public void testMethodReference() {
        runTest("compiler/testData/diagnostics/tests/typealias/methodReference.kt");
      }

      @Test
      @TestMetadata("parameterSubstitution.kt")
      public void testParameterSubstitution() {
        runTest("compiler/testData/diagnostics/tests/typealias/parameterSubstitution.kt");
      }

      @Test
      @TestMetadata("simpleTypeAlias.kt")
      public void testSimpleTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/simpleTypeAlias.kt");
      }

      @Test
      @TestMetadata("starProjectionInTypeAliasArgument.kt")
      public void testStarProjectionInTypeAliasArgument() {
        runTest("compiler/testData/diagnostics/tests/typealias/starProjectionInTypeAliasArgument.kt");
      }

      @Test
      @TestMetadata("typeAliasArgumentsInConstructor.kt")
      public void testTypeAliasArgumentsInConstructor() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasArgumentsInConstructor.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorInSuperCall.kt")
      public void testTypeAliasConstructorInSuperCall() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorInSuperCall.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorReturnType.kt")
      public void testTypeAliasConstructorReturnType() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorReturnType.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithNestedCalls2.kt")
      public void testTypeAliasConstructorTypeArgumentsInferenceWithNestedCalls2() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithNestedCalls2.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithPhantomTypes.kt")
      public void testTypeAliasConstructorTypeArgumentsInferenceWithPhantomTypes() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithPhantomTypes.kt");
      }

      @Test
      @TestMetadata("typeAliasInAnonymousObjectType.kt")
      public void testTypeAliasInAnonymousObjectType() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasInAnonymousObjectType.kt");
      }

      @Test
      @TestMetadata("typeAliasIsUsedAsATypeArgumentInOtherAlias.kt")
      public void testTypeAliasIsUsedAsATypeArgumentInOtherAlias() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasIsUsedAsATypeArgumentInOtherAlias.kt");
      }

      @Test
      @TestMetadata("typeAliasNotNull.kt")
      public void testTypeAliasNotNull() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasNotNull.kt");
      }

      @Test
      @TestMetadata("typeAliasObject.kt")
      public void testTypeAliasObject() {
        runTest("compiler/testData/diagnostics/tests/typealias/typeAliasObject.kt");
      }

      @Test
      @TestMetadata("typealiasRhsAnnotations.kt")
      public void testTypealiasRhsAnnotations() {
        runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsAnnotations.kt");
      }

      @Test
      @TestMetadata("typealiasRhsAnnotationsInArguments.kt")
      public void testTypealiasRhsAnnotationsInArguments() {
        runTest("compiler/testData/diagnostics/tests/typealias/typealiasRhsAnnotationsInArguments.kt");
      }

      @Test
      @TestMetadata("unusedTypeAliasParameter.kt")
      public void testUnusedTypeAliasParameter() {
        runTest("compiler/testData/diagnostics/tests/typealias/unusedTypeAliasParameter.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unitCoercion")
    @TestDataPath("$PROJECT_ROOT")
    public class UnitCoercion {
      @Test
      @TestMetadata("elvisRHSRemainsNullable.kt")
      public void testElvisRHSRemainsNullable() {
        runTest("compiler/testData/diagnostics/tests/unitCoercion/elvisRHSRemainsNullable.kt");
      }

      @Test
      @TestMetadata("elvisRHSRemainsNullableDisabledFeature.kt")
      public void testElvisRHSRemainsNullableDisabledFeature() {
        runTest("compiler/testData/diagnostics/tests/unitCoercion/elvisRHSRemainsNullableDisabledFeature.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unitConversion")
    @TestDataPath("$PROJECT_ROOT")
    public class UnitConversion {
      @Test
      @TestMetadata("noUnitConversionForGenericTypeFromArrow.kt")
      public void testNoUnitConversionForGenericTypeFromArrow() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/noUnitConversionForGenericTypeFromArrow.kt");
      }

      @Test
      @TestMetadata("noUnitConversionOnReturningGenericFunctionalType.kt")
      public void testNoUnitConversionOnReturningGenericFunctionalType() {
        runTest("compiler/testData/diagnostics/tests/unitConversion/noUnitConversionOnReturningGenericFunctionalType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unsignedTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class UnsignedTypes {
      @Test
      @TestMetadata("overloadResolutionOfBasicOperations.kt")
      public void testOverloadResolutionOfBasicOperations() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/overloadResolutionOfBasicOperations.kt");
      }

      @Test
      @TestMetadata("overloadsWithUnsignedAfter.kt")
      public void testOverloadsWithUnsignedAfter() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/overloadsWithUnsignedAfter.kt");
      }

      @Test
      @TestMetadata("unsignedLiteralsInsideConstVals.kt")
      public void testUnsignedLiteralsInsideConstVals() {
        runTest("compiler/testData/diagnostics/tests/unsignedTypes/unsignedLiteralsInsideConstVals.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/unsignedTypes/conversions")
      @TestDataPath("$PROJECT_ROOT")
      public class Conversions {
        @Test
        @TestMetadata("implicitIntegerCoercionNamedArg.kt")
        public void testImplicitIntegerCoercionNamedArg() {
          runTest("compiler/testData/diagnostics/tests/unsignedTypes/conversions/implicitIntegerCoercionNamedArg.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/valueClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class ValueClasses {
      @Test
      @TestMetadata("functionsJvmSignaturesConflictOnInheritance.kt")
      public void testFunctionsJvmSignaturesConflictOnInheritance() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/functionsJvmSignaturesConflictOnInheritance.kt");
      }

      @Test
      @TestMetadata("inefficientEqualsOverridingInMfvc.kt")
      public void testInefficientEqualsOverridingInMfvc() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/inefficientEqualsOverridingInMfvc.kt");
      }

      @Test
      @TestMetadata("presenceOfInitializerBlockInsideValueClass.kt")
      public void testPresenceOfInitializerBlockInsideValueClass() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/presenceOfInitializerBlockInsideValueClass.kt");
      }

      @Test
      @TestMetadata("presenceOfPublicPrimaryConstructorForValueClass.kt")
      public void testPresenceOfPublicPrimaryConstructorForValueClass() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/presenceOfPublicPrimaryConstructorForValueClass.kt");
      }

      @Test
      @TestMetadata("valueClassConstructorParameterWithDefaultValue.kt")
      public void testValueClassConstructorParameterWithDefaultValue() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassConstructorParameterWithDefaultValue.kt");
      }

      @Test
      @TestMetadata("valueClassImplementsCollection.kt")
      public void testValueClassImplementsCollection() {
        runTest("compiler/testData/diagnostics/tests/valueClasses/valueClassImplementsCollection.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/varargs")
    @TestDataPath("$PROJECT_ROOT")
    public class Varargs {
      @Test
      @TestMetadata("assignArrayToVararagInNamedFormWithInference.kt")
      public void testAssignArrayToVararagInNamedFormWithInference() {
        runTest("compiler/testData/diagnostics/tests/varargs/assignArrayToVararagInNamedFormWithInference.kt");
      }

      @Test
      @TestMetadata("kt10926.kt")
      public void testKt10926() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt10926.kt");
      }

      @Test
      @TestMetadata("kt10926EnabledFeature.kt")
      public void testKt10926EnabledFeature() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt10926EnabledFeature.kt");
      }

      @Test
      @TestMetadata("kt1781.kt")
      public void testKt1781() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt1781.kt");
      }

      @Test
      @TestMetadata("kt1835.kt")
      public void testKt1835() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt1835.kt");
      }

      @Test
      @TestMetadata("kt1838-param.kt")
      public void testKt1838_param() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt1838-param.kt");
      }

      @Test
      @TestMetadata("kt1838-val.kt")
      public void testKt1838_val() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt1838-val.kt");
      }

      @Test
      @TestMetadata("kt2163.kt")
      public void testKt2163() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt2163.kt");
      }

      @Test
      @TestMetadata("kt422.kt")
      public void testKt422() {
        runTest("compiler/testData/diagnostics/tests/varargs/kt422.kt");
      }

      @Test
      @TestMetadata("MoreSpecificVarargsOfEqualLength.kt")
      public void testMoreSpecificVarargsOfEqualLength() {
        runTest("compiler/testData/diagnostics/tests/varargs/MoreSpecificVarargsOfEqualLength.kt");
      }

      @Test
      @TestMetadata("namedVarargWithTypeAliasArgument.kt")
      public void testNamedVarargWithTypeAliasArgument() {
        runTest("compiler/testData/diagnostics/tests/varargs/namedVarargWithTypeAliasArgument.kt");
      }

      @Test
      @TestMetadata("NilaryVsVararg.kt")
      public void testNilaryVsVararg() {
        runTest("compiler/testData/diagnostics/tests/varargs/NilaryVsVararg.kt");
      }

      @Test
      @TestMetadata("UnaryVsVararg.kt")
      public void testUnaryVsVararg() {
        runTest("compiler/testData/diagnostics/tests/varargs/UnaryVsVararg.kt");
      }

      @Test
      @TestMetadata("varargIterator.kt")
      public void testVarargIterator() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargIterator.kt");
      }

      @Test
      @TestMetadata("varargsAndFunctionLiterals.kt")
      public void testVarargsAndFunctionLiterals() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargsAndFunctionLiterals.kt");
      }

      @Test
      @TestMetadata("varargsAndOut2.kt")
      public void testVarargsAndOut2() {
        runTest("compiler/testData/diagnostics/tests/varargs/varargsAndOut2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/variance")
    @TestDataPath("$PROJECT_ROOT")
    public class Variance {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/variance/privateToThis")
      @TestDataPath("$PROJECT_ROOT")
      public class PrivateToThis {
        @Test
        @TestMetadata("Abstract.kt")
        public void testAbstract() {
          runTest("compiler/testData/diagnostics/tests/variance/privateToThis/Abstract.kt");
        }

        @Test
        @TestMetadata("ValReassigned.kt")
        public void testValReassigned() {
          runTest("compiler/testData/diagnostics/tests/variance/privateToThis/ValReassigned.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/visibility")
    @TestDataPath("$PROJECT_ROOT")
    public class Visibility {
      @Test
      @TestMetadata("innerClassDelegatingConstructorCallToPrivate.kt")
      public void testInnerClassDelegatingConstructorCallToPrivate() {
        runTest("compiler/testData/diagnostics/tests/visibility/innerClassDelegatingConstructorCallToPrivate.kt");
      }

      @Test
      @TestMetadata("innerConstructorThroughSubclass.kt")
      public void testInnerConstructorThroughSubclass() {
        runTest("compiler/testData/diagnostics/tests/visibility/innerConstructorThroughSubclass.kt");
      }

      @Test
      @TestMetadata("invisiblePrivateThroughSubClassSmartCast.kt")
      public void testInvisiblePrivateThroughSubClassSmartCast() {
        runTest("compiler/testData/diagnostics/tests/visibility/invisiblePrivateThroughSubClassSmartCast.kt");
      }

      @Test
      @TestMetadata("kt56283.kt")
      public void testKt56283() {
        runTest("compiler/testData/diagnostics/tests/visibility/kt56283.kt");
      }

      @Test
      @TestMetadata("kt63434.kt")
      public void testKt63434() {
        runTest("compiler/testData/diagnostics/tests/visibility/kt63434.kt");
      }

      @Test
      @TestMetadata("notOverridingInternal.kt")
      public void testNotOverridingInternal() {
        runTest("compiler/testData/diagnostics/tests/visibility/notOverridingInternal.kt");
      }

      @Test
      @TestMetadata("notOverridingPackagePrivate.kt")
      public void testNotOverridingPackagePrivate() {
        runTest("compiler/testData/diagnostics/tests/visibility/notOverridingPackagePrivate.kt");
      }

      @Test
      @TestMetadata("overrideOfMemberInPackagePrivateClass.kt")
      public void testOverrideOfMemberInPackagePrivateClass() {
        runTest("compiler/testData/diagnostics/tests/visibility/overrideOfMemberInPackagePrivateClass.kt");
      }

      @Test
      @TestMetadata("packagePrivateStatic.kt")
      public void testPackagePrivateStatic() {
        runTest("compiler/testData/diagnostics/tests/visibility/packagePrivateStatic.kt");
      }

      @Test
      @TestMetadata("packagePrivateStaticViaTypeAlias.kt")
      public void testPackagePrivateStaticViaTypeAlias() {
        runTest("compiler/testData/diagnostics/tests/visibility/packagePrivateStaticViaTypeAlias.kt");
      }

      @Test
      @TestMetadata("privateFromInAnonymousObject.kt")
      public void testPrivateFromInAnonymousObject() {
        runTest("compiler/testData/diagnostics/tests/visibility/privateFromInAnonymousObject.kt");
      }

      @Test
      @TestMetadata("privateToThisK1Crash.kt")
      public void testPrivateToThisK1Crash() {
        runTest("compiler/testData/diagnostics/tests/visibility/privateToThisK1Crash.kt");
      }

      @Test
      @TestMetadata("protectedInternal.kt")
      public void testProtectedInternal() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedInternal.kt");
      }

      @Test
      @TestMetadata("protectedVisibilityAndSmartcast_fakeOverride.kt")
      public void testProtectedVisibilityAndSmartcast_fakeOverride() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedVisibilityAndSmartcast_fakeOverride.kt");
      }

      @Test
      @TestMetadata("protectedVisibilityAndSmartcast_noOverride.kt")
      public void testProtectedVisibilityAndSmartcast_noOverride() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedVisibilityAndSmartcast_noOverride.kt");
      }

      @Test
      @TestMetadata("protectedVisibilityAndSmartcast_overrideSameType.kt")
      public void testProtectedVisibilityAndSmartcast_overrideSameType() {
        runTest("compiler/testData/diagnostics/tests/visibility/protectedVisibilityAndSmartcast_overrideSameType.kt");
      }

      @Test
      @TestMetadata("smartCastAndSuppressedVisibility.kt")
      public void testSmartCastAndSuppressedVisibility() {
        runTest("compiler/testData/diagnostics/tests/visibility/smartCastAndSuppressedVisibility.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/warningsForBreakingChanges")
    @TestDataPath("$PROJECT_ROOT")
    public class WarningsForBreakingChanges {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class CapturedTypes {
        @Test
        @TestMetadata("noWarningAfterSmartcast.kt")
        public void testNoWarningAfterSmartcast() {
          runTest("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes/noWarningAfterSmartcast.kt");
        }

        @Test
        @TestMetadata("noWarningOnSAMAdaption.kt")
        public void testNoWarningOnSAMAdaption() {
          runTest("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes/noWarningOnSAMAdaption.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When {
      @Test
      @TestMetadata("BranchFalseBypass.kt")
      public void testBranchFalseBypass() {
        runTest("compiler/testData/diagnostics/tests/when/BranchFalseBypass.kt");
      }

      @Test
      @TestMetadata("BranchFalseBypassElse.kt")
      public void testBranchFalseBypassElse() {
        runTest("compiler/testData/diagnostics/tests/when/BranchFalseBypassElse.kt");
      }

      @Test
      @TestMetadata("ElseOnNullableEnumWithSmartCast.kt")
      public void testElseOnNullableEnumWithSmartCast() {
        runTest("compiler/testData/diagnostics/tests/when/ElseOnNullableEnumWithSmartCast.kt");
      }

      @Test
      @TestMetadata("ExhaustiveBoolean.kt")
      public void testExhaustiveBoolean() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBoolean.kt");
      }

      @Test
      @TestMetadata("ExhaustiveBooleanBrackets.kt")
      public void testExhaustiveBooleanBrackets() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanBrackets.kt");
      }

      @Test
      @TestMetadata("ExhaustiveBooleanNullable.kt")
      public void testExhaustiveBooleanNullable() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBooleanNullable.kt");
      }

      @Test
      @TestMetadata("ExhaustiveBreakContinue.kt")
      public void testExhaustiveBreakContinue() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveBreakContinue.kt");
      }

      @Test
      @TestMetadata("ExhaustiveInitialization.kt")
      public void testExhaustiveInitialization() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveInitialization.kt");
      }

      @Test
      @TestMetadata("ExhaustiveNoInitialization.kt")
      public void testExhaustiveNoInitialization() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveNoInitialization.kt");
      }

      @Test
      @TestMetadata("ExhaustiveNullable.kt")
      public void testExhaustiveNullable() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveNullable.kt");
      }

      @Test
      @TestMetadata("ExhaustiveNullableSelfType.kt")
      public void testExhaustiveNullableSelfType() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveNullableSelfType.kt");
      }

      @Test
      @TestMetadata("ExhaustiveOnTypeParameterWithSealedClassUpperBound.kt")
      public void testExhaustiveOnTypeParameterWithSealedClassUpperBound() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveOnTypeParameterWithSealedClassUpperBound.kt");
      }

      @Test
      @TestMetadata("ExhaustiveOnTypeParameterWithSealedInterfaceUpperBound.kt")
      public void testExhaustiveOnTypeParameterWithSealedInterfaceUpperBound() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveOnTypeParameterWithSealedInterfaceUpperBound.kt");
      }

      @Test
      @TestMetadata("ExhaustivePlatformBoolean.kt")
      public void testExhaustivePlatformBoolean() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformBoolean.kt");
      }

      @Test
      @TestMetadata("ExhaustivePlatformEnum.kt")
      public void testExhaustivePlatformEnum() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnum.kt");
      }

      @Test
      @TestMetadata("ExhaustivePlatformEnumAnnotated.kt")
      public void testExhaustivePlatformEnumAnnotated() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumAnnotated.kt");
      }

      @Test
      @TestMetadata("ExhaustivePlatformEnumElse.kt")
      public void testExhaustivePlatformEnumElse() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumElse.kt");
      }

      @Test
      @TestMetadata("ExhaustivePlatformEnumNull.kt")
      public void testExhaustivePlatformEnumNull() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumNull.kt");
      }

      @Test
      @TestMetadata("ExhaustivePlatformEnumStatement.kt")
      public void testExhaustivePlatformEnumStatement() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustivePlatformEnumStatement.kt");
      }

      @Test
      @TestMetadata("ExhaustiveReturn.kt")
      public void testExhaustiveReturn() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveReturn.kt");
      }

      @Test
      @TestMetadata("ExhaustiveReturnThrow.kt")
      public void testExhaustiveReturnThrow() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveReturnThrow.kt");
      }

      @Test
      @TestMetadata("ExhaustiveSmartcastBoolean.kt")
      public void testExhaustiveSmartcastBoolean() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveSmartcastBoolean.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWithNullabilityCheck.kt")
      public void testExhaustiveWithNullabilityCheck() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheck.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWithNullabilityCheckBefore.kt")
      public void testExhaustiveWithNullabilityCheckBefore() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBefore.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWithNullabilityCheckBoolean.kt")
      public void testExhaustiveWithNullabilityCheckBoolean() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBoolean.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWithNullabilityCheckElse.kt")
      public void testExhaustiveWithNullabilityCheckElse() {
        runTest("compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckElse.kt");
      }

      @Test
      @TestMetadata("extractingEntireCall.kt")
      public void testExtractingEntireCall() {
        runTest("compiler/testData/diagnostics/tests/when/extractingEntireCall.kt");
      }

      @Test
      @TestMetadata("kt10809.kt")
      public void testKt10809() {
        runTest("compiler/testData/diagnostics/tests/when/kt10809.kt");
      }

      @Test
      @TestMetadata("kt10811.kt")
      public void testKt10811() {
        runTest("compiler/testData/diagnostics/tests/when/kt10811.kt");
      }

      @Test
      @TestMetadata("kt48653_before.kt")
      public void testKt48653_before() {
        runTest("compiler/testData/diagnostics/tests/when/kt48653_before.kt");
      }

      @Test
      @TestMetadata("NoElseReturnedCoercionToUnit.kt")
      public void testNoElseReturnedCoercionToUnit() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseReturnedCoercionToUnit.kt");
      }

      @Test
      @TestMetadata("NoElseWhenStatement.kt")
      public void testNoElseWhenStatement() {
        runTest("compiler/testData/diagnostics/tests/when/NoElseWhenStatement.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveAfterSmartcast.kt")
      public void testNonExhaustiveAfterSmartcast() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveAfterSmartcast.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWarningElse.kt")
      public void testNonExhaustiveWarningElse() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningElse.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWarningFalse.kt")
      public void testNonExhaustiveWarningFalse() {
        runTest("compiler/testData/diagnostics/tests/when/NonExhaustiveWarningFalse.kt");
      }

      @Test
      @TestMetadata("nonExhaustiveWhenStatement_1_5.kt")
      public void testNonExhaustiveWhenStatement_1_5() {
        runTest("compiler/testData/diagnostics/tests/when/nonExhaustiveWhenStatement_1_5.kt");
      }

      @Test
      @TestMetadata("nonExhaustiveWhenStatement_1_6.kt")
      public void testNonExhaustiveWhenStatement_1_6() {
        runTest("compiler/testData/diagnostics/tests/when/nonExhaustiveWhenStatement_1_6.kt");
      }

      @Test
      @TestMetadata("PropertyNotInitialized.kt")
      public void testPropertyNotInitialized() {
        runTest("compiler/testData/diagnostics/tests/when/PropertyNotInitialized.kt");
      }

      @Test
      @TestMetadata("RedundantElse.kt")
      public void testRedundantElse() {
        runTest("compiler/testData/diagnostics/tests/when/RedundantElse.kt");
      }

      @Test
      @TestMetadata("TypeParameterWarning.kt")
      public void testTypeParameterWarning() {
        runTest("compiler/testData/diagnostics/tests/when/TypeParameterWarning.kt");
      }

      @Test
      @TestMetadata("whenOnClass.kt")
      public void testWhenOnClass() {
        runTest("compiler/testData/diagnostics/tests/when/whenOnClass.kt");
      }

      @Test
      @TestMetadata("whenOverEnumWithSameNameAsEntry.kt")
      public void testWhenOverEnumWithSameNameAsEntry() {
        runTest("compiler/testData/diagnostics/tests/when/whenOverEnumWithSameNameAsEntry.kt");
      }

      @Test
      @TestMetadata("WhenTypeDisjunctions.kt")
      public void testWhenTypeDisjunctions() {
        runTest("compiler/testData/diagnostics/tests/when/WhenTypeDisjunctions.kt");
      }

      @Test
      @TestMetadata("whenWithNothingAndLambdas.kt")
      public void testWhenWithNothingAndLambdas() {
        runTest("compiler/testData/diagnostics/tests/when/whenWithNothingAndLambdas.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/when/guard")
      @TestDataPath("$PROJECT_ROOT")
      public class Guard {
        @Test
        @TestMetadata("earlyJumps.kt")
        public void testEarlyJumps() {
          runTest("compiler/testData/diagnostics/tests/when/guard/earlyJumps.kt");
        }

        @Test
        @TestMetadata("lambda.kt")
        public void testLambda() {
          runTest("compiler/testData/diagnostics/tests/when/guard/lambda.kt");
        }

        @Test
        @TestMetadata("thisInSubject.kt")
        public void testThisInSubject() {
          runTest("compiler/testData/diagnostics/tests/when/guard/thisInSubject.kt");
        }

        @Test
        @TestMetadata("whenWithNamedSubject.kt")
        public void testWhenWithNamedSubject() {
          runTest("compiler/testData/diagnostics/tests/when/guard/whenWithNamedSubject.kt");
        }

        @Test
        @TestMetadata("whenWithSealed.kt")
        public void testWhenWithSealed() {
          runTest("compiler/testData/diagnostics/tests/when/guard/whenWithSealed.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/when/withSubjectVariable")
      @TestDataPath("$PROJECT_ROOT")
      public class WithSubjectVariable {
        @Test
        @TestMetadata("nestedWhenWithSubject.kt")
        public void testNestedWhenWithSubject() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/nestedWhenWithSubject.kt");
        }

        @Test
        @TestMetadata("shadowingOtherVariable.kt")
        public void testShadowingOtherVariable() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/shadowingOtherVariable.kt");
        }

        @Test
        @TestMetadata("softModifierName.kt")
        public void testSoftModifierName() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/softModifierName.kt");
        }

        @Test
        @TestMetadata("subjectVariableInIsPattern.kt")
        public void testSubjectVariableInIsPattern() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/subjectVariableInIsPattern.kt");
        }

        @Test
        @TestMetadata("unusedWhenSubjectVariable.kt")
        public void testUnusedWhenSubjectVariable() {
          runTest("compiler/testData/diagnostics/tests/when/withSubjectVariable/unusedWhenSubjectVariable.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/testsWithStdLib")
  @TestDataPath("$PROJECT_ROOT")
  public class TestsWithStdLib {
    @Test
    @TestMetadata("ambiguityWithUnsignedSpecificity.kt")
    public void testAmbiguityWithUnsignedSpecificity() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/ambiguityWithUnsignedSpecificity.kt");
    }

    @Test
    @TestMetadata("assignedInSynchronized.kt")
    public void testAssignedInSynchronized() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/assignedInSynchronized.kt");
    }

    @Test
    @TestMetadata("buildLazyValueForMap.kt")
    public void testBuildLazyValueForMap() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/buildLazyValueForMap.kt");
    }

    @Test
    @TestMetadata("compileTimeUnsignedArray.kt")
    public void testCompileTimeUnsignedArray() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/compileTimeUnsignedArray.kt");
    }

    @Test
    @TestMetadata("elvisOnUnitInLet.kt")
    public void testElvisOnUnitInLet() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/elvisOnUnitInLet.kt");
    }

    @Test
    @TestMetadata("enumEntryInitialization.kt")
    public void testEnumEntryInitialization() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/enumEntryInitialization.kt");
    }

    @Test
    @TestMetadata("exitProcess.kt")
    public void testExitProcess() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/exitProcess.kt");
    }

    @Test
    @TestMetadata("genericContainer.kt")
    public void testGenericContainer() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/genericContainer.kt");
    }

    @Test
    @TestMetadata("greater.kt")
    public void testGreater() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/greater.kt");
    }

    @Test
    @TestMetadata("ifElseJavaList.kt")
    public void testIfElseJavaList() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/ifElseJavaList.kt");
    }

    @Test
    @TestMetadata("implicitCastToAny.kt")
    public void testImplicitCastToAny() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/implicitCastToAny.kt");
    }

    @Test
    @TestMetadata("implicitNothingInDelegate.kt")
    public void testImplicitNothingInDelegate() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/implicitNothingInDelegate.kt");
    }

    @Test
    @TestMetadata("kt55503_2.kt")
    public void testKt55503_2() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt55503_2.kt");
    }

    @Test
    @TestMetadata("kt8050.kt")
    public void testKt8050() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt8050.kt");
    }

    @Test
    @TestMetadata("kt9985.kt")
    public void testKt9985() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/kt9985.kt");
    }

    @Test
    @TestMetadata("overrideWithFunctionalType.kt")
    public void testOverrideWithFunctionalType() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/overrideWithFunctionalType.kt");
    }

    @Test
    @TestMetadata("pairReference.kt")
    public void testPairReference() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/pairReference.kt");
    }

    @Test
    @TestMetadata("pureReifiable.kt")
    public void testPureReifiable() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/pureReifiable.kt");
    }

    @Test
    @TestMetadata("pureReifiableArrayOperations.kt")
    public void testPureReifiableArrayOperations() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/pureReifiableArrayOperations.kt");
    }

    @Test
    @TestMetadata("shadowingInDestructuring.kt")
    public void testShadowingInDestructuring() {
      runTest("compiler/testData/diagnostics/testsWithStdLib/shadowingInDestructuring.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Test
      @TestMetadata("annotationsTargetingLateinitAccessors.kt")
      public void testAnnotationsTargetingLateinitAccessors() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationsTargetingLateinitAccessors.kt");
      }

      @Test
      @TestMetadata("annotationsTargetingNonExistentAccessor.kt")
      public void testAnnotationsTargetingNonExistentAccessor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationsTargetingNonExistentAccessor.kt");
      }

      @Test
      @TestMetadata("ClassObjectAnnotatedWithItsKClass.kt")
      public void testClassObjectAnnotatedWithItsKClass() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/ClassObjectAnnotatedWithItsKClass.kt");
      }

      @Test
      @TestMetadata("dontPropagateExact.kt")
      public void testDontPropagateExact() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/dontPropagateExact.kt");
      }

      @Test
      @TestMetadata("SynchronizedOnInterfaceCompanionMember.kt")
      public void testSynchronizedOnInterfaceCompanionMember() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/SynchronizedOnInterfaceCompanionMember.kt");
      }

      @Test
      @TestMetadata("targetuse.kt")
      public void testTargetuse() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/targetuse.kt");
      }

      @Test
      @TestMetadata("throwsByStarWinsBuiltin.kt")
      public void testThrowsByStarWinsBuiltin() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/throwsByStarWinsBuiltin.kt");
      }

      @Test
      @TestMetadata("TransientOnDelegate.kt")
      public void testTransientOnDelegate() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/TransientOnDelegate.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationApplicability {
        @Test
        @TestMetadata("multifileClassPart.kt")
        public void testMultifileClassPart() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/multifileClassPart.kt");
        }

        @Test
        @TestMetadata("multifileClassPartWithJavaAnnotation.kt")
        public void testMultifileClassPartWithJavaAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/multifileClassPartWithJavaAnnotation.kt");
        }

        @Test
        @TestMetadata("onPropertyAnnotation.kt")
        public void testOnPropertyAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/onPropertyAnnotation.kt");
        }

        @Test
        @TestMetadata("suppressOnFunctionReference.kt")
        public void testSuppressOnFunctionReference() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/suppressOnFunctionReference.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationParameters {
        @Test
        @TestMetadata("orderWithValue.kt")
        public void testOrderWithValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/orderWithValue.kt");
        }

        @Test
        @TestMetadata("orderWithoutValue.kt")
        public void testOrderWithoutValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/orderWithoutValue.kt");
        }

        @Test
        @TestMetadata("valueArrayOnly.kt")
        public void testValueArrayOnly() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayOnly.kt");
        }

        @Test
        @TestMetadata("valueArrayWithDefault.kt")
        public void testValueArrayWithDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayWithDefault.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class JavaAnnotationsWithKClassParameter {
        @Test
        @TestMetadata("annotationAsArgument.kt")
        public void testAnnotationAsArgument() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/annotationAsArgument.kt");
        }

        @Test
        @TestMetadata("arg.kt")
        public void testArg() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/arg.kt");
        }

        @Test
        @TestMetadata("argAndOtherDefault.kt")
        public void testArgAndOtherDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argAndOtherDefault.kt");
        }

        @Test
        @TestMetadata("argArray.kt")
        public void testArgArray() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argArray.kt");
        }

        @Test
        @TestMetadata("argWithDefault.kt")
        public void testArgWithDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argWithDefault.kt");
        }

        @Test
        @TestMetadata("argWithDefaultAndOther.kt")
        public void testArgWithDefaultAndOther() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/argWithDefaultAndOther.kt");
        }

        @Test
        @TestMetadata("twoArgs.kt")
        public void testTwoArgs() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/twoArgs.kt");
        }

        @Test
        @TestMetadata("value.kt")
        public void testValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/value.kt");
        }

        @Test
        @TestMetadata("valueAndOtherDefault.kt")
        public void testValueAndOtherDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueAndOtherDefault.kt");
        }

        @Test
        @TestMetadata("valueArray.kt")
        public void testValueArray() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueArray.kt");
        }

        @Test
        @TestMetadata("valueWithDefault.kt")
        public void testValueWithDefault() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueWithDefault.kt");
        }

        @Test
        @TestMetadata("valueWithDefaultAndOther.kt")
        public void testValueWithDefaultAndOther() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/javaAnnotationsWithKClassParameter/valueWithDefaultAndOther.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmDefault {
        @Test
        @TestMetadata("generic.kt")
        public void testGeneric() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/generic.kt");
        }

        @Test
        @TestMetadata("jvmDefaults.kt")
        public void testJvmDefaults() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaults.kt");
        }

        @Test
        @TestMetadata("jvmDefaultsWithJava.kt")
        public void testJvmDefaultsWithJava() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultsWithJava.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/allCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        public class AllCompatibility {
          @Test
          @TestMetadata("specialization.kt")
          public void testSpecialization() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/allCompatibility/specialization.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithoutCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        public class JvmDefaultWithoutCompatibility {
          @Test
          @TestMetadata("target8.kt")
          public void testTarget8() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithoutCompatibility/target8.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmField {
        @Test
        @TestMetadata("inSingleFileFacade.kt")
        public void testInSingleFileFacade() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/inSingleFileFacade.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmOverloads {
        @Test
        @TestMetadata("JvmOverloadWithNoDefaults.kt")
        public void testJvmOverloadWithNoDefaults() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/JvmOverloadWithNoDefaults.kt");
        }

        @Test
        @TestMetadata("jvmOverloadsOnMangledFunctions.kt")
        public void testJvmOverloadsOnMangledFunctions() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnMangledFunctions.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmSpecialFunctions")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmSpecialFunctions {
        @Test
        @TestMetadata("apiVersionIsAtLeastHasConstArguments.kt")
        public void testApiVersionIsAtLeastHasConstArguments() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmSpecialFunctions/apiVersionIsAtLeastHasConstArguments.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmStatic {
        @Test
        @TestMetadata("mainInObject.kt")
        public void testMainInObject() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/mainInObject.kt");
        }

        @Test
        @TestMetadata("privateCompanionObject.kt")
        public void testPrivateCompanionObject() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/privateCompanionObject.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass")
      @TestDataPath("$PROJECT_ROOT")
      public class KClass {
        @Test
        @TestMetadata("kClassOutArrayInAnnotationsOutVariance.kt")
        public void testKClassOutArrayInAnnotationsOutVariance() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassOutArrayInAnnotationsOutVariance.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument")
      @TestDataPath("$PROJECT_ROOT")
      public class ProhibitPositionedArgument {
        @Test
        @TestMetadata("kotlinAnnotation.kt")
        public void testKotlinAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/kotlinAnnotation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired")
      @TestDataPath("$PROJECT_ROOT")
      public class SubclassOptInRequired {
        @Test
        @TestMetadata("CorrectApplicability.kt")
        public void testCorrectApplicability() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/CorrectApplicability.kt");
        }

        @Test
        @TestMetadata("DiagnosticCustomMessage_warning.kt")
        public void testDiagnosticCustomMessage_warning() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/DiagnosticCustomMessage_warning.kt");
        }

        @Test
        @TestMetadata("DiagnosticDefaultMessage_warning.kt")
        public void testDiagnosticDefaultMessage_warning() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/DiagnosticDefaultMessage_warning.kt");
        }

        @Test
        @TestMetadata("InnerClasses.kt")
        public void testInnerClasses() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/InnerClasses.kt");
        }

        @Test
        @TestMetadata("NestedClasses.kt")
        public void testNestedClasses() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/NestedClasses.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/assert")
    @TestDataPath("$PROJECT_ROOT")
    public class Assert {
      @Test
      @TestMetadata("cast.kt")
      public void testCast() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/assert/cast.kt");
      }

      @Test
      @TestMetadata("safeCall.kt")
      public void testSafeCall() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/assert/safeCall.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/cast")
    @TestDataPath("$PROJECT_ROOT")
    public class Cast {
      @Test
      @TestMetadata("IsReified.kt")
      public void testIsReified() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/cast/IsReified.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @Test
      @TestMetadata("complexConditionWithSafeCall.kt")
      public void testComplexConditionWithSafeCall() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/complexConditionWithSafeCall.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow")
      @TestDataPath("$PROJECT_ROOT")
      public class Controlflow {
        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining")
        @TestDataPath("$PROJECT_ROOT")
        public class FlowInlining {
          @Test
          @TestMetadata("complexTryWithTryInFinally.kt")
          public void testComplexTryWithTryInFinally() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/complexTryWithTryInFinally.kt");
          }

          @Test
          @TestMetadata("expressionBody.kt")
          public void testExpressionBody() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/expressionBody.kt");
          }

          @Test
          @TestMetadata("implicitCastToAnyInReturnType.kt")
          public void testImplicitCastToAnyInReturnType() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/implicitCastToAnyInReturnType.kt");
          }

          @Test
          @TestMetadata("inlinedLambdaAlwaysThrows.kt")
          public void testInlinedLambdaAlwaysThrows() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/inlinedLambdaAlwaysThrows.kt");
          }

          @Test
          @TestMetadata("irrelevantUnknownClosure.kt")
          public void testIrrelevantUnknownClosure() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/irrelevantUnknownClosure.kt");
          }

          @Test
          @TestMetadata("nonLocalReturn.kt")
          public void testNonLocalReturn() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/nonLocalReturn.kt");
          }

          @Test
          @TestMetadata("unreachableCode.kt")
          public void testUnreachableCode() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/unreachableCode.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization")
        @TestDataPath("$PROJECT_ROOT")
        public class Initialization {
          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce")
          @TestDataPath("$PROJECT_ROOT")
          public class ExactlyOnce {
            @Test
            @TestMetadata("varDefiniteInitalization.kt")
            public void testVarDefiniteInitalization() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/varDefiniteInitalization.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl")
      @TestDataPath("$PROJECT_ROOT")
      public class Dsl {
        @Test
        @TestMetadata("callUsualContractFunction.kt")
        public void testCallUsualContractFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/callUsualContractFunction.kt");
        }

        @Test
        @TestMetadata("fqnContractFunction.kt")
        public void testFqnContractFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/fqnContractFunction.kt");
        }

        @Test
        @TestMetadata("rewriteAtSliceFunctor.kt")
        public void testRewriteAtSliceFunctor() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/rewriteAtSliceFunctor.kt");
        }

        @Test
        @TestMetadata("useBeforeDeclaration.kt")
        public void testUseBeforeDeclaration() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/useBeforeDeclaration.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors")
        @TestDataPath("$PROJECT_ROOT")
        public class Errors {
          @Test
          @TestMetadata("recursiveContractCustomContractFunction.kt")
          public void testRecursiveContractCustomContractFunction() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/recursiveContractCustomContractFunction.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib")
      @TestDataPath("$PROJECT_ROOT")
      public class FromStdlib {
        @Test
        @TestMetadata("check.kt")
        public void testCheck() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/check.kt");
        }

        @Test
        @TestMetadata("kt45243.kt")
        public void testKt45243() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/kt45243.kt");
        }

        @Test
        @TestMetadata("require.kt")
        public void testRequire() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/require.kt");
        }

        @Test
        @TestMetadata("synchronize.kt")
        public void testSynchronize() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/synchronize.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax")
      @TestDataPath("$PROJECT_ROOT")
      public class NewSyntax {
        @Test
        @TestMetadata("complexContractDescription.kt")
        public void testComplexContractDescription() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax/complexContractDescription.kt");
        }

        @Test
        @TestMetadata("onelineFunctionsContractDescription.kt")
        public void testOnelineFunctionsContractDescription() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax/onelineFunctionsContractDescription.kt");
        }

        @Test
        @TestMetadata("simpleFunctionsContractDescription.kt")
        public void testSimpleFunctionsContractDescription() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax/simpleFunctionsContractDescription.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts")
      @TestDataPath("$PROJECT_ROOT")
      public class Smartcasts {
        @Test
        @TestMetadata("callWithDefaultValue.kt")
        public void testCallWithDefaultValue() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/callWithDefaultValue.kt");
        }

        @Test
        @TestMetadata("contractWithDeepGenerics.kt")
        public void testContractWithDeepGenerics() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/contractWithDeepGenerics.kt");
        }

        @Test
        @TestMetadata("contractsOnMembers.kt")
        public void testContractsOnMembers() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/contractsOnMembers.kt");
        }

        @Test
        @TestMetadata("externalArguments.kt")
        public void testExternalArguments() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/externalArguments.kt");
        }

        @Test
        @TestMetadata("functionInCompanion.kt")
        public void testFunctionInCompanion() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/functionInCompanion.kt");
        }

        @Test
        @TestMetadata("reifiedGeneric.kt")
        public void testReifiedGeneric() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/reifiedGeneric.kt");
        }

        @Test
        @TestMetadata("smartcastOnReceiverInComplexCondition.kt")
        public void testSmartcastOnReceiverInComplexCondition() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/smartcastOnReceiverInComplexCondition.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when")
        @TestDataPath("$PROJECT_ROOT")
        public class When {
          @Test
          @TestMetadata("kt36818.kt")
          public void testKt36818() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when/kt36818.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    public class Coroutines {
      @Test
      @TestMetadata("allowNullOperatorsForResult_1_4.kt")
      public void testAllowNullOperatorsForResult_1_4() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/allowNullOperatorsForResult_1_4.kt");
      }

      @Test
      @TestMetadata("allowResultInReturnTypeWithFlag.kt")
      public void testAllowResultInReturnTypeWithFlag() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/allowResultInReturnTypeWithFlag.kt");
      }

      @Test
      @TestMetadata("basicBuildListBuildMap.kt")
      public void testBasicBuildListBuildMap() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/basicBuildListBuildMap.kt");
      }

      @Test
      @TestMetadata("callableReferences.kt")
      public void testCallableReferences() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReferences.kt");
      }

      @Test
      @TestMetadata("disallowResultInReturnType.kt")
      public void testDisallowResultInReturnType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/disallowResultInReturnType.kt");
      }

      @Test
      @TestMetadata("kt38179.kt")
      public void testKt38179() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt38179.kt");
      }

      @Test
      @TestMetadata("kt41430.kt")
      public void testKt41430() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/kt41430.kt");
      }

      @Test
      @TestMetadata("suspendApplicability.kt")
      public void testSuspendApplicability() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendApplicability.kt");
      }

      @Test
      @TestMetadata("suspendDestructuring.kt")
      public void testSuspendDestructuring() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendDestructuring.kt");
      }

      @Test
      @TestMetadata("suspendLambda.kt")
      public void testSuspendLambda() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendLambda.kt");
      }

      @Test
      @TestMetadata("usageOfResultTypeWithNullableOperators.kt")
      public void testUsageOfResultTypeWithNullableOperators() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/usageOfResultTypeWithNullableOperators.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReference {
        @Test
        @TestMetadata("bigArity.kt")
        public void testBigArity() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference/bigArity.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        @TestMetadata("applyInsideCoroutine.kt")
        public void testApplyInsideCoroutine() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/applyInsideCoroutine.kt");
        }

        @Test
        @TestMetadata("builderInferenceForMaterializeWithExpectedType.kt")
        public void testBuilderInferenceForMaterializeWithExpectedType() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/builderInferenceForMaterializeWithExpectedType.kt");
        }

        @Test
        @TestMetadata("callableReferenceAndCoercionToUnit.kt")
        public void testCallableReferenceAndCoercionToUnit() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/callableReferenceAndCoercionToUnit.kt");
        }

        @Test
        @TestMetadata("chainCallWithExtensionExplicitTypes.kt")
        public void testChainCallWithExtensionExplicitTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/chainCallWithExtensionExplicitTypes.kt");
        }

        @Test
        @TestMetadata("coroutineInferenceWithCapturedTypeVariable.kt")
        public void testCoroutineInferenceWithCapturedTypeVariable() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/coroutineInferenceWithCapturedTypeVariable.kt");
        }

        @Test
        @TestMetadata("correctMember.kt")
        public void testCorrectMember() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/correctMember.kt");
        }

        @Test
        @TestMetadata("doubleColonExpressionToClassWithParameters.kt")
        public void testDoubleColonExpressionToClassWithParameters() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/doubleColonExpressionToClassWithParameters.kt");
        }

        @Test
        @TestMetadata("elvisOperatorAgainstFlexibleType.kt")
        public void testElvisOperatorAgainstFlexibleType() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/elvisOperatorAgainstFlexibleType.kt");
        }

        @Test
        @TestMetadata("expectedSomeTypesOnNormalSelector.kt")
        public void testExpectedSomeTypesOnNormalSelector() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/expectedSomeTypesOnNormalSelector.kt");
        }

        @Test
        @TestMetadata("extensionPriority.kt")
        public void testExtensionPriority() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionPriority.kt");
        }

        @Test
        @TestMetadata("extensionSuspend.kt")
        public void testExtensionSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionSuspend.kt");
        }

        @Test
        @TestMetadata("extensionsWithNonValuableConstraints_1_2.kt")
        public void testExtensionsWithNonValuableConstraints_1_2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionsWithNonValuableConstraints_1_2.kt");
        }

        @Test
        @TestMetadata("inferenceFromMethodInsideLocalVariable.kt")
        public void testInferenceFromMethodInsideLocalVariable() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/inferenceFromMethodInsideLocalVariable.kt");
        }

        @Test
        @TestMetadata("kt15516.kt")
        public void testKt15516() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt15516.kt");
        }

        @Test
        @TestMetadata("kt32097.kt")
        public void testKt32097() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt32097.kt");
        }

        @Test
        @TestMetadata("kt32203.kt")
        public void testKt32203() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt32203.kt");
        }

        @Test
        @TestMetadata("kt32271.kt")
        public void testKt32271() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt32271.kt");
        }

        @Test
        @TestMetadata("kt35306.kt")
        public void testKt35306() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt35306.kt");
        }

        @Test
        @TestMetadata("kt36202.kt")
        public void testKt36202() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt36202.kt");
        }

        @Test
        @TestMetadata("kt36220.kt")
        public void testKt36220() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt36220.kt");
        }

        @Test
        @TestMetadata("kt38420.kt")
        public void testKt38420() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt38420.kt");
        }

        @Test
        @TestMetadata("kt38667.kt")
        public void testKt38667() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt38667.kt");
        }

        @Test
        @TestMetadata("kt38667Simplified.kt")
        public void testKt38667Simplified() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt38667Simplified.kt");
        }

        @Test
        @TestMetadata("kt38766.kt")
        public void testKt38766() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt38766.kt");
        }

        @Test
        @TestMetadata("kt41164.kt")
        public void testKt41164() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt41164.kt");
        }

        @Test
        @TestMetadata("kt41308.kt")
        public void testKt41308() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt41308.kt");
        }

        @Test
        @TestMetadata("kt41396.kt")
        public void testKt41396() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt41396.kt");
        }

        @Test
        @TestMetadata("nestedLambdaInferenceWithListMap.kt")
        public void testNestedLambdaInferenceWithListMap() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/nestedLambdaInferenceWithListMap.kt");
        }

        @Test
        @TestMetadata("nestedSuspendCallInsideLambda.kt")
        public void testNestedSuspendCallInsideLambda() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/nestedSuspendCallInsideLambda.kt");
        }

        @Test
        @TestMetadata("qualifiedResolvedExpressionInsideBuilderInference.kt")
        public void testQualifiedResolvedExpressionInsideBuilderInference() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/qualifiedResolvedExpressionInsideBuilderInference.kt");
        }

        @Test
        @TestMetadata("recursiveGenerators.kt")
        public void testRecursiveGenerators() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/recursiveGenerators.kt");
        }

        @Test
        @TestMetadata("recursiveGenerators2.kt")
        public void testRecursiveGenerators2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/recursiveGenerators2.kt");
        }

        @Test
        @TestMetadata("returnTypeInference.kt")
        public void testReturnTypeInference() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/returnTypeInference.kt");
        }

        @Test
        @TestMetadata("returnTypeInference2.kt")
        public void testReturnTypeInference2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/returnTypeInference2.kt");
        }

        @Test
        @TestMetadata("severalCandidatesWithDifferentVisibility.kt")
        public void testSeveralCandidatesWithDifferentVisibility() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/severalCandidatesWithDifferentVisibility.kt");
        }

        @Test
        @TestMetadata("simpleGenerator.kt")
        public void testSimpleGenerator() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/simpleGenerator.kt");
        }

        @Test
        @TestMetadata("stubCallOnReceiver.kt")
        public void testStubCallOnReceiver() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/stubCallOnReceiver.kt");
        }

        @Test
        @TestMetadata("stubCallOnVariable.kt")
        public void testStubCallOnVariable() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/stubCallOnVariable.kt");
        }

        @Test
        @TestMetadata("suspendConversionBetweenFunInterfaces.kt")
        public void testSuspendConversionBetweenFunInterfaces() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/suspendConversionBetweenFunInterfaces.kt");
        }

        @Test
        @TestMetadata("twoReceiversInScope.kt")
        public void testTwoReceiversInScope() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/twoReceiversInScope.kt");
        }

        @Test
        @TestMetadata("typeFromReceiver.kt")
        public void testTypeFromReceiver() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/typeFromReceiver.kt");
        }

        @Test
        @TestMetadata("variableCallInsideBuilderFunction.kt")
        public void testVariableCallInsideBuilderFunction() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/variableCallInsideBuilderFunction.kt");
        }

        @Test
        @TestMetadata("variableOfAFunctionTypeCall.kt")
        public void testVariableOfAFunctionTypeCall() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/variableOfAFunctionTypeCall.kt");
        }

        @Test
        @TestMetadata("withParameter.kt")
        public void testWithParameter() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/withParameter.kt");
        }

        @Test
        @TestMetadata("withUninferredParameter.kt")
        public void testWithUninferredParameter() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/withUninferredParameter.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineCrossinline {
        @Test
        @TestMetadata("inlineSuspendOfNoinlineSuspend.kt")
        public void testInlineSuspendOfNoinlineSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfNoinlineSuspend.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/release")
      @TestDataPath("$PROJECT_ROOT")
      public class Release {
        @Test
        @TestMetadata("suspend.kt")
        public void testSuspend() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/release/suspend.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension")
      @TestDataPath("$PROJECT_ROOT")
      public class RestrictSuspension {
        @Test
        @TestMetadata("allMembersAllowed.kt")
        public void testAllMembersAllowed() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/allMembersAllowed.kt");
        }

        @Test
        @TestMetadata("callableReference.kt")
        public void testCallableReference() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/callableReference.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType")
      @TestDataPath("$PROJECT_ROOT")
      public class SuspendFunctionType {
        @Test
        @TestMetadata("inference1.kt")
        public void testInference1() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inference1.kt");
        }

        @Test
        @TestMetadata("inference2.kt")
        public void testInference2() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inference2.kt");
        }

        @Test
        @TestMetadata("inference3.kt")
        public void testInference3() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inference3.kt");
        }

        @Test
        @TestMetadata("inference4.kt")
        public void testInference4() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inference4.kt");
        }

        @Test
        @TestMetadata("lambdaInValInitializer.kt")
        public void testLambdaInValInitializer() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/lambdaInValInitializer.kt");
        }

        @Test
        @TestMetadata("noValueParameters.kt")
        public void testNoValueParameters() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/noValueParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class TailCalls {
        @Test
        @TestMetadata("forbidden.kt")
        public void testForbidden() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/forbidden.kt");
        }

        @Test
        @TestMetadata("localFunctions.kt")
        public void testLocalFunctions() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/localFunctions.kt");
        }

        @Test
        @TestMetadata("nothingTypedSuspendFunction_1_3.kt")
        public void testNothingTypedSuspendFunction_1_3() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/nothingTypedSuspendFunction_1_3.kt");
        }

        @Test
        @TestMetadata("recursive.kt")
        public void testRecursive() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/recursive.kt");
        }

        @Test
        @TestMetadata("tryCatch.kt")
        public void testTryCatch() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/tryCatch.kt");
        }

        @Test
        @TestMetadata("valid.kt")
        public void testValid() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/coroutines/tailCalls/valid.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/delegateInference")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegateInference {
      @Test
      @TestMetadata("ifWithCallableReferenceInLazy.kt")
      public void testIfWithCallableReferenceInLazy() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/delegateInference/ifWithCallableReferenceInLazy.kt");
      }

      @Test
      @TestMetadata("resolveGetValueWithWholeDelegate.kt")
      public void testResolveGetValueWithWholeDelegate() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/delegateInference/resolveGetValueWithWholeDelegate.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/deprecated")
    @TestDataPath("$PROJECT_ROOT")
    public class Deprecated {
      @Test
      @TestMetadata("noDeprecationOnReadBytes.kt")
      public void testNoDeprecationOnReadBytes() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/deprecated/noDeprecationOnReadBytes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature")
    @TestDataPath("$PROJECT_ROOT")
    public class DuplicateJvmSignature {
      @Test
      @TestMetadata("delegatedProperty.kt")
      public void testDelegatedProperty() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/delegatedProperty.kt");
      }

      @Test
      @TestMetadata("jvmNames.kt")
      public void testJvmNames() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/jvmNames.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/statics")
      @TestDataPath("$PROJECT_ROOT")
      public class Statics {
        @Test
        @TestMetadata("kotlinMembersVsJavaNonVisibleStatics.kt")
        public void testKotlinMembersVsJavaNonVisibleStatics() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/duplicateJvmSignature/statics/kotlinMembersVsJavaNonVisibleStatics.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/experimental")
    @TestDataPath("$PROJECT_ROOT")
    public class Experimental {
      @Test
      @TestMetadata("bodyUsages.kt")
      public void testBodyUsages() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/bodyUsages.kt");
      }

      @Test
      @TestMetadata("bodyUsagesAndInline.kt")
      public void testBodyUsagesAndInline() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/bodyUsagesAndInline.kt");
      }

      @Test
      @TestMetadata("classMembers.kt")
      public void testClassMembers() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/classMembers.kt");
      }

      @Test
      @TestMetadata("classMembersOverlyExperimental.kt")
      public void testClassMembersOverlyExperimental() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/classMembersOverlyExperimental.kt");
      }

      @Test
      @TestMetadata("constVal.kt")
      public void testConstVal() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/constVal.kt");
      }

      @Test
      @TestMetadata("deeplyNestedClass.kt")
      public void testDeeplyNestedClass() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/deeplyNestedClass.kt");
      }

      @Test
      @TestMetadata("delegatedConstructorCall.kt")
      public void testDelegatedConstructorCall() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/delegatedConstructorCall.kt");
      }

      @Test
      @TestMetadata("experimentalAfterRelease.kt")
      public void testExperimentalAfterRelease() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/experimentalAfterRelease.kt");
      }

      @Test
      @TestMetadata("experimentalAnnotationOnConstructorProperty.kt")
      public void testExperimentalAnnotationOnConstructorProperty() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/experimentalAnnotationOnConstructorProperty.kt");
      }

      @Test
      @TestMetadata("fileOptInSuppressesOverride.kt")
      public void testFileOptInSuppressesOverride() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/fileOptInSuppressesOverride.kt");
      }

      @Test
      @TestMetadata("fullFqNameUsage.kt")
      public void testFullFqNameUsage() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/fullFqNameUsage.kt");
      }

      @Test
      @TestMetadata("importStatement.kt")
      public void testImportStatement() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/importStatement.kt");
      }

      @Test
      @TestMetadata("importStatement2.kt")
      public void testImportStatement2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/importStatement2.kt");
      }

      @Test
      @TestMetadata("incorrectUseExperimental.kt")
      public void testIncorrectUseExperimental() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/incorrectUseExperimental.kt");
      }

      @Test
      @TestMetadata("noRetentionAfter.kt")
      public void testNoRetentionAfter() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/noRetentionAfter.kt");
      }

      @Test
      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/override.kt");
      }

      @Test
      @TestMetadata("overrideDifferentExperimentalities.kt")
      public void testOverrideDifferentExperimentalities() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/overrideDifferentExperimentalities.kt");
      }

      @Test
      @TestMetadata("overrideInAnonymousObject.kt")
      public void testOverrideInAnonymousObject() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/overrideInAnonymousObject.kt");
      }

      @Test
      @TestMetadata("overrideInPrimaryConstructor.kt")
      public void testOverrideInPrimaryConstructor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/overrideInPrimaryConstructor.kt");
      }

      @Test
      @TestMetadata("scripts.kts")
      public void testScripts() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/scripts.kts");
      }

      @Test
      @TestMetadata("topLevel.kt")
      public void testTopLevel() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/topLevel.kt");
      }

      @Test
      @TestMetadata("useExperimentalOnFile.kt")
      public void testUseExperimentalOnFile() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalOnFile.kt");
      }

      @Test
      @TestMetadata("useExperimentalOnFileWithVeryExperimentalMarker.kt")
      public void testUseExperimentalOnFileWithVeryExperimentalMarker() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalOnFileWithVeryExperimentalMarker.kt");
      }

      @Test
      @TestMetadata("useExperimentalOnStatement.kt")
      public void testUseExperimentalOnStatement() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalOnStatement.kt");
      }

      @Test
      @TestMetadata("useExperimentalOnWholeModule.kt")
      public void testUseExperimentalOnWholeModule() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalOnWholeModule.kt");
      }

      @Test
      @TestMetadata("useExperimentalTargets.kt")
      public void testUseExperimentalTargets() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalTargets.kt");
      }

      @Test
      @TestMetadata("useExperimentalWithSeveralAnnotations.kt")
      public void testUseExperimentalWithSeveralAnnotations() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/experimental/useExperimentalWithSeveralAnnotations.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/factoryPattern")
    @TestDataPath("$PROJECT_ROOT")
    public class FactoryPattern {
      @Test
      @TestMetadata("independentResolutionInLambda.kt")
      public void testIndependentResolutionInLambda() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/independentResolutionInLambda.kt");
      }

      @Test
      @TestMetadata("multipleOverloads_1.kt")
      public void testMultipleOverloads_1() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/multipleOverloads_1.kt");
      }

      @Test
      @TestMetadata("multipleOverloads_2.kt")
      public void testMultipleOverloads_2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/multipleOverloads_2.kt");
      }

      @Test
      @TestMetadata("multipleOverloads_3.kt")
      public void testMultipleOverloads_3() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/multipleOverloads_3.kt");
      }

      @Test
      @TestMetadata("referenceWithTheSameNameAsContainingProperty.kt")
      public void testReferenceWithTheSameNameAsContainingProperty() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/referenceWithTheSameNameAsContainingProperty.kt");
      }

      @Test
      @TestMetadata("resolutionInOldInference.kt")
      public void testResolutionInOldInference() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/factoryPattern/resolutionInOldInference.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop")
    @TestDataPath("$PROJECT_ROOT")
    public class ForInArrayLoop {
      @Test
      @TestMetadata("capturedRangeVariableAssignmentBefore13.kt")
      public void testCapturedRangeVariableAssignmentBefore13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/capturedRangeVariableAssignmentBefore13.kt");
      }

      @Test
      @TestMetadata("forInFieldUpdatedInLoopBodyBefore13.kt")
      public void testForInFieldUpdatedInLoopBodyBefore13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/forInFieldUpdatedInLoopBodyBefore13.kt");
      }

      @Test
      @TestMetadata("rangeLocalDelegatedPropertyAssignmentBefore13.kt")
      public void testRangeLocalDelegatedPropertyAssignmentBefore13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/rangeLocalDelegatedPropertyAssignmentBefore13.kt");
      }

      @Test
      @TestMetadata("rangeVariableAssignment13.kt")
      public void testRangeVariableAssignment13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/rangeVariableAssignment13.kt");
      }

      @Test
      @TestMetadata("rangeVariableAssignmentBefore13.kt")
      public void testRangeVariableAssignmentBefore13() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/forInArrayLoop/rangeVariableAssignmentBefore13.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Test
      @TestMetadata("expectedSetForLambdaParameter.kt")
      public void testExpectedSetForLambdaParameter() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/expectedSetForLambdaParameter.kt");
      }

      @Test
      @TestMetadata("expectedSetForLambdaParameter2.kt")
      public void testExpectedSetForLambdaParameter2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/expectedSetForLambdaParameter2.kt");
      }

      @Test
      @TestMetadata("integerLiterals.kt")
      public void testIntegerLiterals() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/integerLiterals.kt");
      }

      @Test
      @TestMetadata("intersectDfiTypesBeforeCapturing.kt")
      public void testIntersectDfiTypesBeforeCapturing() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/intersectDfiTypesBeforeCapturing.kt");
      }

      @Test
      @TestMetadata("intersectionInputType.kt")
      public void testIntersectionInputType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/intersectionInputType.kt");
      }

      @Test
      @TestMetadata("kt12008.kt")
      public void testKt12008() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt12008.kt");
      }

      @Test
      @TestMetadata("kt27772.kt")
      public void testKt27772() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt27772.kt");
      }

      @Test
      @TestMetadata("kt30292.kt")
      public void testKt30292() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt30292.kt");
      }

      @Test
      @TestMetadata("kt32345.kt")
      public void testKt32345() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt32345.kt");
      }

      @Test
      @TestMetadata("kt35847.kt")
      public void testKt35847() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt35847.kt");
      }

      @Test
      @TestMetadata("kt36249.kt")
      public void testKt36249() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt36249.kt");
      }

      @Test
      @TestMetadata("kt37627.kt")
      public void testKt37627() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt37627.kt");
      }

      @Test
      @TestMetadata("kt38143.kt")
      public void testKt38143() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt38143.kt");
      }

      @Test
      @TestMetadata("kt38737.kt")
      public void testKt38737() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt38737.kt");
      }

      @Test
      @TestMetadata("kt38801.kt")
      public void testKt38801() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/kt38801.kt");
      }

      @Test
      @TestMetadata("mapNotNullWithElvis.kt")
      public void testMapNotNullWithElvis() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/mapNotNullWithElvis.kt");
      }

      @Test
      @TestMetadata("plusAssignOnArrayList.kt")
      public void testPlusAssignOnArrayList() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/plusAssignOnArrayList.kt");
      }

      @Test
      @TestMetadata("recursiveFlexibleAssertions.kt")
      public void testRecursiveFlexibleAssertions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inference/recursiveFlexibleAssertions.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationsForResolve {
        @Test
        @TestMetadata("checkLowPriorityIsResolvedSuccessfully.kt")
        public void testCheckLowPriorityIsResolvedSuccessfully() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/checkLowPriorityIsResolvedSuccessfully.kt");
        }

        @Test
        @TestMetadata("exactAnnotation.kt")
        public void testExactAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/exactAnnotation.kt");
        }

        @Test
        @TestMetadata("internalAnnotationsOnTypes.kt")
        public void testInternalAnnotationsOnTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/internalAnnotationsOnTypes.kt");
        }

        @Test
        @TestMetadata("kt35210.kt")
        public void testKt35210() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/kt35210.kt");
        }

        @Test
        @TestMetadata("lowPriorityTopLevelValAndObject.kt")
        public void testLowPriorityTopLevelValAndObject() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/lowPriorityTopLevelValAndObject.kt");
        }

        @Test
        @TestMetadata("moreOnlyInputTypes.kt")
        public void testMoreOnlyInputTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/moreOnlyInputTypes.kt");
        }

        @Test
        @TestMetadata("onlyInputTypeAndJava.kt")
        public void testOnlyInputTypeAndJava() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypeAndJava.kt");
        }

        @Test
        @TestMetadata("onlyInputTypeRecursiveBoundAndProjections.kt")
        public void testOnlyInputTypeRecursiveBoundAndProjections() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypeRecursiveBoundAndProjections.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesAndClassLiterals.kt")
        public void testOnlyInputTypesAndClassLiterals() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesAndClassLiterals.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesAnnotationWithPlatformTypes.kt")
        public void testOnlyInputTypesAnnotationWithPlatformTypes() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesAnnotationWithPlatformTypes.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesUpperBound.kt")
        public void testOnlyInputTypesUpperBound() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesUpperBound.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesWithVarargs.kt")
        public void testOnlyInputTypesWithVarargs() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesWithVarargs.kt");
        }

        @Test
        @TestMetadata("propagationOfNoInferAnnotation.kt")
        public void testPropagationOfNoInferAnnotation() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/propagationOfNoInferAnnotation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/completion")
      @TestDataPath("$PROJECT_ROOT")
      public class Completion {
        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class PostponedArgumentsAnalysis {
          @Test
          @TestMetadata("complexInterdependentInputOutputTypes.kt")
          public void testComplexInterdependentInputOutputTypes() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/complexInterdependentInputOutputTypes.kt");
          }

          @Test
          @TestMetadata("deepLambdas.kt")
          public void testDeepLambdas() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/deepLambdas.kt");
          }

          @Test
          @TestMetadata("fixIndependentVariables.kt")
          public void testFixIndependentVariables() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/fixIndependentVariables.kt");
          }

          @Test
          @TestMetadata("fixInputTypeToMoreSpecificType.kt")
          public void testFixInputTypeToMoreSpecificType() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/fixInputTypeToMoreSpecificType.kt");
          }

          @Test
          @TestMetadata("fixReceiverToMoreSpecificType.kt")
          public void testFixReceiverToMoreSpecificType() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/fixReceiverToMoreSpecificType.kt");
          }

          @Test
          @TestMetadata("kt38799.kt")
          public void testKt38799() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/kt38799.kt");
          }

          @Test
          @TestMetadata("manyArguments.kt")
          public void testManyArguments() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/manyArguments.kt");
          }

          @Test
          @TestMetadata("moreSpecificOutputType.kt")
          public void testMoreSpecificOutputType() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/moreSpecificOutputType.kt");
          }

          @Test
          @TestMetadata("rerunStagesAfterFixationInFullMode.kt")
          public void testRerunStagesAfterFixationInFullMode() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/rerunStagesAfterFixationInFullMode.kt");
          }

          @Test
          @TestMetadata("rerunStagesAfterFixationInPartialMode.kt")
          public void testRerunStagesAfterFixationInPartialMode() {
            runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/rerunStagesAfterFixationInPartialMode.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance")
          @TestDataPath("$PROJECT_ROOT")
          public class Performance {
            @Test
            @TestMetadata("reuseBuiltFunctionalTypesForIdLambdas.kt")
            public void testReuseBuiltFunctionalTypesForIdLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForIdLambdas.kt");
            }

            @Test
            @TestMetadata("reuseBuiltFunctionalTypesForLambdas.kt")
            public void testReuseBuiltFunctionalTypesForLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForLambdas.kt");
            }

            @Test
            @TestMetadata("reuseBuiltFunctionalTypesForPairOfLambdas.kt")
            public void testReuseBuiltFunctionalTypesForPairOfLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForPairOfLambdas.kt");
            }

            @Test
            @TestMetadata("reuseBuiltFunctionalTypesForPairsOfDeepLambdas.kt")
            public void testReuseBuiltFunctionalTypesForPairsOfDeepLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForPairsOfDeepLambdas.kt");
            }

            @Test
            @TestMetadata("reuseBuiltFunctionalTypesForPairsOfDeepMixedLambdas.kt")
            public void testReuseBuiltFunctionalTypesForPairsOfDeepMixedLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForPairsOfDeepMixedLambdas.kt");
            }

            @Test
            @TestMetadata("reuseBuiltFunctionalTypesForPairsOfIdLambdas.kt")
            public void testReuseBuiltFunctionalTypesForPairsOfIdLambdas() {
              runTest("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/performance/reuseBuiltFunctionalTypesForPairsOfIdLambdas.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/delegates")
      @TestDataPath("$PROJECT_ROOT")
      public class Delegates {
        @Test
        @TestMetadata("kt31219.kt")
        public void testKt31219() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/delegates/kt31219.kt");
        }

        @Test
        @TestMetadata("kt31679.kt")
        public void testKt31679() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/delegates/kt31679.kt");
        }

        @Test
        @TestMetadata("kt32249.kt")
        public void testKt32249() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/delegates/kt32249.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/nothingType")
      @TestDataPath("$PROJECT_ROOT")
      public class NothingType {
        @Test
        @TestMetadata("dontInferToNullableNothingInDelegates.kt")
        public void testDontInferToNullableNothingInDelegates() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/nothingType/dontInferToNullableNothingInDelegates.kt");
        }

        @Test
        @TestMetadata("dontSpreadWarningToNotReturningNothingSubResolvedAtoms.kt")
        public void testDontSpreadWarningToNotReturningNothingSubResolvedAtoms() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/nothingType/dontSpreadWarningToNotReturningNothingSubResolvedAtoms.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/performance")
      @TestDataPath("$PROJECT_ROOT")
      public class Performance {
        @Test
        @TestMetadata("kt41644.kt")
        public void testKt41644() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/performance/kt41644.kt");
        }

        @Test
        @TestMetadata("kt41741.kt")
        public void testKt41741() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/performance/kt41741.kt");
        }

        @Test
        @TestMetadata("kt42195.kt")
        public void testKt42195() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/inference/performance/kt42195.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inline")
    @TestDataPath("$PROJECT_ROOT")
    public class Inline {
      @Test
      @TestMetadata("synchronizedOnInline.kt")
      public void testSynchronizedOnInline() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/inline/synchronizedOnInline.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/java")
    @TestDataPath("$PROJECT_ROOT")
    public class Java {
      @Test
      @TestMetadata("assertThatOnMap.kt")
      public void testAssertThatOnMap() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/assertThatOnMap.kt");
      }

      @Test
      @TestMetadata("functionN.kt")
      public void testFunctionN() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/functionN.kt");
      }

      @Test
      @TestMetadata("intersectFlexibleAndMutable.kt")
      public void testIntersectFlexibleAndMutable() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/intersectFlexibleAndMutable.kt");
      }

      @Test
      @TestMetadata("patternCompileCallableReference.kt")
      public void testPatternCompileCallableReference() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/java/patternCompileCallableReference.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/kt7585")
    @TestDataPath("$PROJECT_ROOT")
    public class Kt7585 {
      @Test
      @TestMetadata("delegate.kt")
      public void testDelegate() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/kt7585/delegate.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/native")
    @TestDataPath("$PROJECT_ROOT")
    public class Native {
      @Test
      @TestMetadata("noBody.kt")
      public void testNoBody() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/noBody.kt");
      }

      @Test
      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/native/override.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/pcla")
    @TestDataPath("$PROJECT_ROOT")
    public class Pcla {
      @Test
      @TestMetadata("buildListToUpperBoundInLazy.kt")
      public void testBuildListToUpperBoundInLazy() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/buildListToUpperBoundInLazy.kt");
      }

      @Test
      @TestMetadata("buildListToUpperBoundInLazyForbidden.kt")
      public void testBuildListToUpperBoundInLazyForbidden() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/buildListToUpperBoundInLazyForbidden.kt");
      }

      @Test
      @TestMetadata("completeIrrelevantCalls.kt")
      public void testCompleteIrrelevantCalls() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/completeIrrelevantCalls.kt");
      }

      @Test
      @TestMetadata("inconsistentTypeInference.kt")
      public void testInconsistentTypeInference() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/inconsistentTypeInference.kt");
      }

      @Test
      @TestMetadata("inconsistentTypeInference2.kt")
      public void testInconsistentTypeInference2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/inconsistentTypeInference2.kt");
      }

      @Test
      @TestMetadata("inconsistentTypeInference_noReporting.kt")
      public void testInconsistentTypeInference_noReporting() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/inconsistentTypeInference_noReporting.kt");
      }

      @Test
      @TestMetadata("incorrectCalls.kt")
      public void testIncorrectCalls() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/incorrectCalls.kt");
      }

      @Test
      @TestMetadata("incorrectCallsWithRestrictions.kt")
      public void testIncorrectCallsWithRestrictions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/incorrectCallsWithRestrictions.kt");
      }

      @Test
      @TestMetadata("inferenceFromLambdaReturnStatement.kt")
      public void testInferenceFromLambdaReturnStatement() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/inferenceFromLambdaReturnStatement.kt");
      }

      @Test
      @TestMetadata("inferenceFromLambdaReturnType.kt")
      public void testInferenceFromLambdaReturnType() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/inferenceFromLambdaReturnType.kt");
      }

      @Test
      @TestMetadata("k2StubTypeLeak.kt")
      public void testK2StubTypeLeak() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/k2StubTypeLeak.kt");
      }

      @Test
      @TestMetadata("resolveUsualCallWithBuilderInference.kt")
      public void testResolveUsualCallWithBuilderInference() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/resolveUsualCallWithBuilderInference.kt");
      }

      @Test
      @TestMetadata("resolveUsualCallWithBuilderInferenceWithRestrictions.kt")
      public void testResolveUsualCallWithBuilderInferenceWithRestrictions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/resolveUsualCallWithBuilderInferenceWithRestrictions.kt");
      }

      @Test
      @TestMetadata("useInferenceInformationFromExtension.kt")
      public void testUseInferenceInformationFromExtension() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/useInferenceInformationFromExtension.kt");
      }

      @Test
      @TestMetadata("useInferenceInformationFromExtensionWithRestrictions.kt")
      public void testUseInferenceInformationFromExtensionWithRestrictions() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/pcla/useInferenceInformationFromExtensionWithRestrictions.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection")
    @TestDataPath("$PROJECT_ROOT")
    public class PurelyImplementedCollection {
      @Test
      @TestMetadata("invalidFqName.kt")
      public void testInvalidFqName() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/invalidFqName.kt");
      }

      @Test
      @TestMetadata("wrongTypeParametersCount.kt")
      public void testWrongTypeParametersCount() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/wrongTypeParametersCount.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/reflection")
    @TestDataPath("$PROJECT_ROOT")
    public class Reflection {
      @Test
      @TestMetadata("classArrayInAnnotation.kt")
      public void testClassArrayInAnnotation() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reflection/classArrayInAnnotation.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/regression")
    @TestDataPath("$PROJECT_ROOT")
    public class Regression {
      @Test
      @TestMetadata("ea63992.kt")
      public void testEa63992() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/ea63992.kt");
      }

      @Test
      @TestMetadata("kt26806.kt")
      public void testKt26806() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt26806.kt");
      }

      @Test
      @TestMetadata("kt37554.kt")
      public void testKt37554() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt37554.kt");
      }

      @Test
      @TestMetadata("kt37706.kt")
      public void testKt37706() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt37706.kt");
      }

      @Test
      @TestMetadata("kt37735.kt")
      public void testKt37735() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt37735.kt");
      }

      @Test
      @TestMetadata("kt-37497.kt")
      public void testKt_37497() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/regression/kt-37497.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/reified")
    @TestDataPath("$PROJECT_ROOT")
    public class Reified {
      @Test
      @TestMetadata("nonCallableReiefied.kt")
      public void testNonCallableReiefied() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/reified/nonCallableReiefied.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve")
    @TestDataPath("$PROJECT_ROOT")
    public class Resolve {
      @Test
      @TestMetadata("javaPackageMembers.kt")
      public void testJavaPackageMembers() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/javaPackageMembers.kt");
      }

      @Test
      @TestMetadata("kt10103.kt")
      public void testKt10103() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/kt10103.kt");
      }

      @Test
      @TestMetadata("kt10732a.kt")
      public void testKt10732a() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/kt10732a.kt");
      }

      @Test
      @TestMetadata("samConstructorVsFun.kt")
      public void testSamConstructorVsFun() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/samConstructorVsFun.kt");
      }

      @Test
      @TestMetadata("sameNameClassesFromSupertypes.kt")
      public void testSameNameClassesFromSupertypes() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/sameNameClassesFromSupertypes.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences")
      @TestDataPath("$PROJECT_ROOT")
      public class AmbiguousTypeReferences {
        @Test
        @TestMetadata("callableReferenceCase.kt")
        public void testCallableReferenceCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/callableReferenceCase.kt");
        }

        @Test
        @TestMetadata("callableReferenceUnboundCase.kt")
        public void testCallableReferenceUnboundCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/callableReferenceUnboundCase.kt");
        }

        @Test
        @TestMetadata("classLiteralCase.kt")
        public void testClassLiteralCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/classLiteralCase.kt");
        }

        @Test
        @TestMetadata("companionVsStaticScope.kt")
        public void testCompanionVsStaticScope() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/companionVsStaticScope.kt");
        }

        @Test
        @TestMetadata("constructorCase.kt")
        public void testConstructorCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorCase.kt");
        }

        @Test
        @TestMetadata("constructorCaseSpace.kt")
        public void testConstructorCaseSpace() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorCaseSpace.kt");
        }

        @Test
        @TestMetadata("constructorVsCompanionMember.kt")
        public void testConstructorVsCompanionMember() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorVsCompanionMember.kt");
        }

        @Test
        @TestMetadata("constructorVsTopLevel.kt")
        public void testConstructorVsTopLevel() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorVsTopLevel.kt");
        }

        @Test
        @TestMetadata("qualifierEnumEntryOrCompanionMemberCase.kt")
        public void testQualifierEnumEntryOrCompanionMemberCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierEnumEntryOrCompanionMemberCase.kt");
        }

        @Test
        @TestMetadata("qualifierStaticObjectOrCompanionMemberCase.kt")
        public void testQualifierStaticObjectOrCompanionMemberCase() {
          runTest("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierStaticObjectOrCompanionMemberCase.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/smartcasts")
    @TestDataPath("$PROJECT_ROOT")
    public class Smartcasts {
      @Test
      @TestMetadata("forEachSafe.kt")
      public void testForEachSafe() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/forEachSafe.kt");
      }

      @Test
      @TestMetadata("kt10463.kt")
      public void testKt10463() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/kt10463.kt");
      }

      @Test
      @TestMetadata("lazyDeclaresAndModifies.kt")
      public void testLazyDeclaresAndModifies() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/lazyDeclaresAndModifies.kt");
      }

      @Test
      @TestMetadata("letStable.kt")
      public void testLetStable() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letStable.kt");
      }

      @Test
      @TestMetadata("letUsesOwnReceiver.kt")
      public void testLetUsesOwnReceiver() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/letUsesOwnReceiver.kt");
      }

      @Test
      @TestMetadata("listOfGeneric.kt")
      public void testListOfGeneric() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/listOfGeneric.kt");
      }

      @Test
      @TestMetadata("whileLoopNotNull.kt")
      public void testWhileLoopNotNull() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/smartcasts/whileLoopNotNull.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/streams")
    @TestDataPath("$PROJECT_ROOT")
    public class Streams {
      @Test
      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/streams/basic.kt");
      }

      @Test
      @TestMetadata("wrongNullability.kt")
      public void testWrongNullability() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/streams/wrongNullability.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/trailingComma")
    @TestDataPath("$PROJECT_ROOT")
    public class TrailingComma {
      @Test
      @TestMetadata("multiVariableDeclarationWithEnabledFeature.kt")
      public void testMultiVariableDeclarationWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/multiVariableDeclarationWithEnabledFeature.kt");
      }

      @Test
      @TestMetadata("typeArgumentsWithEnabledFeature.kt")
      public void testTypeArgumentsWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/typeArgumentsWithEnabledFeature.kt");
      }

      @Test
      @TestMetadata("typeParametersWithEnabledFeature.kt")
      public void testTypeParametersWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/typeParametersWithEnabledFeature.kt");
      }

      @Test
      @TestMetadata("valueArgumentsWithEnabledFeature.kt")
      public void testValueArgumentsWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/valueArgumentsWithEnabledFeature.kt");
      }

      @Test
      @TestMetadata("valueParametersWithEnabledFeature.kt")
      public void testValueParametersWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/valueParametersWithEnabledFeature.kt");
      }

      @Test
      @TestMetadata("whenEntryWithEnabledFeature.kt")
      public void testWhenEntryWithEnabledFeature() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/trailingComma/whenEntryWithEnabledFeature.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tryCatch")
    @TestDataPath("$PROJECT_ROOT")
    public class TryCatch {
      @Test
      @TestMetadata("falseNegativeSmartcasts.kt")
      public void testFalseNegativeSmartcasts() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/tryCatch/falseNegativeSmartcasts.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/typealias")
    @TestDataPath("$PROJECT_ROOT")
    public class Typealias {
      @Test
      @TestMetadata("exceptionTypeAliases.kt")
      public void testExceptionTypeAliases() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/exceptionTypeAliases.kt");
      }

      @Test
      @TestMetadata("hashMapTypeAlias.kt")
      public void testHashMapTypeAlias() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/hashMapTypeAlias.kt");
      }

      @Test
      @TestMetadata("nothingTypeAlias.kt")
      public void testNothingTypeAlias() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/nothingTypeAlias.kt");
      }

      @Test
      @TestMetadata("typeAliasSamAdapterConstructors.kt")
      public void testTypeAliasSamAdapterConstructors() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/typeAliasSamAdapterConstructors.kt");
      }

      @Test
      @TestMetadata("typeAliasSamAdapterConstructors2.kt")
      public void testTypeAliasSamAdapterConstructors2() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/typealias/typeAliasSamAdapterConstructors2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs")
    @TestDataPath("$PROJECT_ROOT")
    public class Varargs {
      @Test
      @TestMetadata("kt4172j.kt")
      public void testKt4172j() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/varargs/kt4172j.kt");
      }

      @Test
      @TestMetadata("kt5534.kt")
      public void testKt5534() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/varargs/kt5534.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When {
      @Test
      @TestMetadata("kt10807.kt")
      public void testKt10807() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/when/kt10807.kt");
      }

      @Test
      @TestMetadata("noTypeArgumentsInConstructor.kt")
      public void testNoTypeArgumentsInConstructor() {
        runTest("compiler/testData/diagnostics/testsWithStdLib/when/noTypeArgumentsInConstructor.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/fir/analysis-tests/testData/resolve")
  @TestDataPath("$PROJECT_ROOT")
  public class Resolve {
    @Test
    @TestMetadata("accessJavaFromKotlinViaImport.kt")
    public void testAccessJavaFromKotlinViaImport() {
      runTest("compiler/fir/analysis-tests/testData/resolve/accessJavaFromKotlinViaImport.kt");
    }

    @Test
    @TestMetadata("accessJavaFromKotlinViaStaticImport.kt")
    public void testAccessJavaFromKotlinViaStaticImport() {
      runTest("compiler/fir/analysis-tests/testData/resolve/accessJavaFromKotlinViaStaticImport.kt");
    }

    @Test
    @TestMetadata("accessJavaFromKotlinViaStaticImport2.kt")
    public void testAccessJavaFromKotlinViaStaticImport2() {
      runTest("compiler/fir/analysis-tests/testData/resolve/accessJavaFromKotlinViaStaticImport2.kt");
    }

    @Test
    @TestMetadata("accessJavaFromKotlinViaStaticImportAndPermits.kt")
    public void testAccessJavaFromKotlinViaStaticImportAndPermits() {
      runTest("compiler/fir/analysis-tests/testData/resolve/accessJavaFromKotlinViaStaticImportAndPermits.kt");
    }

    @Test
    @TestMetadata("accessJavaFromKotlinViaStaticImportWithoutPermits.kt")
    public void testAccessJavaFromKotlinViaStaticImportWithoutPermits() {
      runTest("compiler/fir/analysis-tests/testData/resolve/accessJavaFromKotlinViaStaticImportWithoutPermits.kt");
    }

    @Test
    @TestMetadata("bareTypes.kt")
    public void testBareTypes() {
      runTest("compiler/fir/analysis-tests/testData/resolve/bareTypes.kt");
    }

    @Test
    @TestMetadata("bareTypes2.kt")
    public void testBareTypes2() {
      runTest("compiler/fir/analysis-tests/testData/resolve/bareTypes2.kt");
    }

    @Test
    @TestMetadata("bareTypesWithFlexibleArguments.kt")
    public void testBareTypesWithFlexibleArguments() {
      runTest("compiler/fir/analysis-tests/testData/resolve/bareTypesWithFlexibleArguments.kt");
    }

    @Test
    @TestMetadata("classCallInLambda.kt")
    public void testClassCallInLambda() {
      runTest("compiler/fir/analysis-tests/testData/resolve/classCallInLambda.kt");
    }

    @Test
    @TestMetadata("companion.kt")
    public void testCompanion() {
      runTest("compiler/fir/analysis-tests/testData/resolve/companion.kt");
    }

    @Test
    @TestMetadata("companionAccessInEnum.kt")
    public void testCompanionAccessInEnum() {
      runTest("compiler/fir/analysis-tests/testData/resolve/companionAccessInEnum.kt");
    }

    @Test
    @TestMetadata("companionObjectCall.kt")
    public void testCompanionObjectCall() {
      runTest("compiler/fir/analysis-tests/testData/resolve/companionObjectCall.kt");
    }

    @Test
    @TestMetadata("companionUsesNested.kt")
    public void testCompanionUsesNested() {
      runTest("compiler/fir/analysis-tests/testData/resolve/companionUsesNested.kt");
    }

    @Test
    @TestMetadata("copy.kt")
    public void testCopy() {
      runTest("compiler/fir/analysis-tests/testData/resolve/copy.kt");
    }

    @Test
    @TestMetadata("defaultParametersInheritedToJava.kt")
    public void testDefaultParametersInheritedToJava() {
      runTest("compiler/fir/analysis-tests/testData/resolve/defaultParametersInheritedToJava.kt");
    }

    @Test
    @TestMetadata("definitelyNotNullAmbiguity.kt")
    public void testDefinitelyNotNullAmbiguity() {
      runTest("compiler/fir/analysis-tests/testData/resolve/definitelyNotNullAmbiguity.kt");
    }

    @Test
    @TestMetadata("delegatedSuperType.kt")
    public void testDelegatedSuperType() {
      runTest("compiler/fir/analysis-tests/testData/resolve/delegatedSuperType.kt");
    }

    @Test
    @TestMetadata("delegatingConstructorsAndTypeAliases.kt")
    public void testDelegatingConstructorsAndTypeAliases() {
      runTest("compiler/fir/analysis-tests/testData/resolve/delegatingConstructorsAndTypeAliases.kt");
    }

    @Test
    @TestMetadata("derivedClass.kt")
    public void testDerivedClass() {
      runTest("compiler/fir/analysis-tests/testData/resolve/derivedClass.kt");
    }

    @Test
    @TestMetadata("elvisReturnSimple.kt")
    public void testElvisReturnSimple() {
      runTest("compiler/fir/analysis-tests/testData/resolve/elvisReturnSimple.kt");
    }

    @Test
    @TestMetadata("enumWithCompanion.kt")
    public void testEnumWithCompanion() {
      runTest("compiler/fir/analysis-tests/testData/resolve/enumWithCompanion.kt");
    }

    @Test
    @TestMetadata("extension.kt")
    public void testExtension() {
      runTest("compiler/fir/analysis-tests/testData/resolve/extension.kt");
    }

    @Test
    @TestMetadata("F.kt")
    public void testF() {
      runTest("compiler/fir/analysis-tests/testData/resolve/F.kt");
    }

    @Test
    @TestMetadata("falseOperatorAssignmentWithBooleanNot.kt")
    public void testFalseOperatorAssignmentWithBooleanNot() {
      runTest("compiler/fir/analysis-tests/testData/resolve/falseOperatorAssignmentWithBooleanNot.kt");
    }

    @Test
    @TestMetadata("falseRedundantConversionMethodOnThisProperty.kt")
    public void testFalseRedundantConversionMethodOnThisProperty() {
      runTest("compiler/fir/analysis-tests/testData/resolve/falseRedundantConversionMethodOnThisProperty.kt");
    }

    @Test
    @TestMetadata("fib.kt")
    public void testFib() {
      runTest("compiler/fir/analysis-tests/testData/resolve/fib.kt");
    }

    @Test
    @TestMetadata("flexibleCapturedType.kt")
    public void testFlexibleCapturedType() {
      runTest("compiler/fir/analysis-tests/testData/resolve/flexibleCapturedType.kt");
    }

    @Test
    @TestMetadata("ft.kt")
    public void testFt() {
      runTest("compiler/fir/analysis-tests/testData/resolve/ft.kt");
    }

    @Test
    @TestMetadata("functionTypeAlias.kt")
    public void testFunctionTypeAlias() {
      runTest("compiler/fir/analysis-tests/testData/resolve/functionTypeAlias.kt");
    }

    @Test
    @TestMetadata("genericConstructors.kt")
    public void testGenericConstructors() {
      runTest("compiler/fir/analysis-tests/testData/resolve/genericConstructors.kt");
    }

    @Test
    @TestMetadata("genericFunctions.kt")
    public void testGenericFunctions() {
      runTest("compiler/fir/analysis-tests/testData/resolve/genericFunctions.kt");
    }

    @Test
    @TestMetadata("genericReceiverPropertyOverride.kt")
    public void testGenericReceiverPropertyOverride() {
      runTest("compiler/fir/analysis-tests/testData/resolve/genericReceiverPropertyOverride.kt");
    }

    @Test
    @TestMetadata("implicitTypeFromOtherModule.kt")
    public void testImplicitTypeFromOtherModule() {
      runTest("compiler/fir/analysis-tests/testData/resolve/implicitTypeFromOtherModule.kt");
    }

    @Test
    @TestMetadata("implicitTypeInFakeOverride.kt")
    public void testImplicitTypeInFakeOverride() {
      runTest("compiler/fir/analysis-tests/testData/resolve/implicitTypeInFakeOverride.kt");
    }

    @Test
    @TestMetadata("implicitTypeIntersectionOverrideFromOtherModule.kt")
    public void testImplicitTypeIntersectionOverrideFromOtherModule() {
      runTest("compiler/fir/analysis-tests/testData/resolve/implicitTypeIntersectionOverrideFromOtherModule.kt");
    }

    @Test
    @TestMetadata("implicitTypeSubstituteOverrideFromOtherModule.kt")
    public void testImplicitTypeSubstituteOverrideFromOtherModule() {
      runTest("compiler/fir/analysis-tests/testData/resolve/implicitTypeSubstituteOverrideFromOtherModule.kt");
    }

    @Test
    @TestMetadata("implicitTypeSubstituteOverrideInNestedClassFromOtherModule.kt")
    public void testImplicitTypeSubstituteOverrideInNestedClassFromOtherModule() {
      runTest("compiler/fir/analysis-tests/testData/resolve/implicitTypeSubstituteOverrideInNestedClassFromOtherModule.kt");
    }

    @Test
    @TestMetadata("implicitTypeWithTypeBound.kt")
    public void testImplicitTypeWithTypeBound() {
      runTest("compiler/fir/analysis-tests/testData/resolve/implicitTypeWithTypeBound.kt");
    }

    @Test
    @TestMetadata("inherentlyImportedTypeFromOtherModule.kt")
    public void testInherentlyImportedTypeFromOtherModule() {
      runTest("compiler/fir/analysis-tests/testData/resolve/inherentlyImportedTypeFromOtherModule.kt");
    }

    @Test
    @TestMetadata("inherentlyImportedTypeFromOtherModule2.kt")
    public void testInherentlyImportedTypeFromOtherModule2() {
      runTest("compiler/fir/analysis-tests/testData/resolve/inherentlyImportedTypeFromOtherModule2.kt");
    }

    @Test
    @TestMetadata("inherentlyImportedTypeFromOtherModule3.kt")
    public void testInherentlyImportedTypeFromOtherModule3() {
      runTest("compiler/fir/analysis-tests/testData/resolve/inherentlyImportedTypeFromOtherModule3.kt");
    }

    @Test
    @TestMetadata("intersectionScope.kt")
    public void testIntersectionScope() {
      runTest("compiler/fir/analysis-tests/testData/resolve/intersectionScope.kt");
    }

    @Test
    @TestMetadata("invokeInWhenSubjectVariableInitializer.kt")
    public void testInvokeInWhenSubjectVariableInitializer() {
      runTest("compiler/fir/analysis-tests/testData/resolve/invokeInWhenSubjectVariableInitializer.kt");
    }

    @Test
    @TestMetadata("invokeOfLambdaWithReceiver.kt")
    public void testInvokeOfLambdaWithReceiver() {
      runTest("compiler/fir/analysis-tests/testData/resolve/invokeOfLambdaWithReceiver.kt");
    }

    @Test
    @TestMetadata("javaFieldVsAccessor.kt")
    public void testJavaFieldVsAccessor() {
      runTest("compiler/fir/analysis-tests/testData/resolve/javaFieldVsAccessor.kt");
    }

    @Test
    @TestMetadata("javaStaticScopeInheritance.kt")
    public void testJavaStaticScopeInheritance() {
      runTest("compiler/fir/analysis-tests/testData/resolve/javaStaticScopeInheritance.kt");
    }

    @Test
    @TestMetadata("kt41990.kt")
    public void testKt41990() {
      runTest("compiler/fir/analysis-tests/testData/resolve/kt41990.kt");
    }

    @Test
    @TestMetadata("labelAndReceiverForInfix.kt")
    public void testLabelAndReceiverForInfix() {
      runTest("compiler/fir/analysis-tests/testData/resolve/labelAndReceiverForInfix.kt");
    }

    @Test
    @TestMetadata("labeledReturnFromNotLabeledUnnamedFunction.kt")
    public void testLabeledReturnFromNotLabeledUnnamedFunction() {
      runTest("compiler/fir/analysis-tests/testData/resolve/labeledReturnFromNotLabeledUnnamedFunction.kt");
    }

    @Test
    @TestMetadata("lambdaInLhsOfTypeOperatorCall.kt")
    public void testLambdaInLhsOfTypeOperatorCall() {
      runTest("compiler/fir/analysis-tests/testData/resolve/lambdaInLhsOfTypeOperatorCall.kt");
    }

    @Test
    @TestMetadata("localFunctionsHiding.kt")
    public void testLocalFunctionsHiding() {
      runTest("compiler/fir/analysis-tests/testData/resolve/localFunctionsHiding.kt");
    }

    @Test
    @TestMetadata("localObject.kt")
    public void testLocalObject() {
      runTest("compiler/fir/analysis-tests/testData/resolve/localObject.kt");
    }

    @Test
    @TestMetadata("nestedClass.kt")
    public void testNestedClass() {
      runTest("compiler/fir/analysis-tests/testData/resolve/nestedClass.kt");
    }

    @Test
    @TestMetadata("nestedClassNameClash.kt")
    public void testNestedClassNameClash() {
      runTest("compiler/fir/analysis-tests/testData/resolve/nestedClassNameClash.kt");
    }

    @Test
    @TestMetadata("NestedOfAliasedType.kt")
    public void testNestedOfAliasedType() {
      runTest("compiler/fir/analysis-tests/testData/resolve/NestedOfAliasedType.kt");
    }

    @Test
    @TestMetadata("nestedReturnType.kt")
    public void testNestedReturnType() {
      runTest("compiler/fir/analysis-tests/testData/resolve/nestedReturnType.kt");
    }

    @Test
    @TestMetadata("NestedSuperType.kt")
    public void testNestedSuperType() {
      runTest("compiler/fir/analysis-tests/testData/resolve/NestedSuperType.kt");
    }

    @Test
    @TestMetadata("offOrderMultiBoundGenericOverride.kt")
    public void testOffOrderMultiBoundGenericOverride() {
      runTest("compiler/fir/analysis-tests/testData/resolve/offOrderMultiBoundGenericOverride.kt");
    }

    @Test
    @TestMetadata("privateSubclassAsTypeArgInParentClass.kt")
    public void testPrivateSubclassAsTypeArgInParentClass() {
      runTest("compiler/fir/analysis-tests/testData/resolve/privateSubclassAsTypeArgInParentClass.kt");
    }

    @Test
    @TestMetadata("problems2.kt")
    public void testProblems2() {
      runTest("compiler/fir/analysis-tests/testData/resolve/problems2.kt");
    }

    @Test
    @TestMetadata("propertyFromJavaPlusAssign.kt")
    public void testPropertyFromJavaPlusAssign() {
      runTest("compiler/fir/analysis-tests/testData/resolve/propertyFromJavaPlusAssign.kt");
    }

    @Test
    @TestMetadata("rawTypeSam.kt")
    public void testRawTypeSam() {
      runTest("compiler/fir/analysis-tests/testData/resolve/rawTypeSam.kt");
    }

    @Test
    @TestMetadata("recursiveCallOnWhenWithSealedClass.kt")
    public void testRecursiveCallOnWhenWithSealedClass() {
      runTest("compiler/fir/analysis-tests/testData/resolve/recursiveCallOnWhenWithSealedClass.kt");
    }

    @Test
    @TestMetadata("reifiedTypeOverload.kt")
    public void testReifiedTypeOverload() {
      runTest("compiler/fir/analysis-tests/testData/resolve/reifiedTypeOverload.kt");
    }

    @Test
    @TestMetadata("signatureEnhancementCycleTypeBound.kt")
    public void testSignatureEnhancementCycleTypeBound() {
      runTest("compiler/fir/analysis-tests/testData/resolve/signatureEnhancementCycleTypeBound.kt");
    }

    @Test
    @TestMetadata("signatureEnhancementOuterClassBoundsToInner.kt")
    public void testSignatureEnhancementOuterClassBoundsToInner() {
      runTest("compiler/fir/analysis-tests/testData/resolve/signatureEnhancementOuterClassBoundsToInner.kt");
    }

    @Test
    @TestMetadata("simpleTypeAlias.kt")
    public void testSimpleTypeAlias() {
      runTest("compiler/fir/analysis-tests/testData/resolve/simpleTypeAlias.kt");
    }

    @Test
    @TestMetadata("spreadOperator.kt")
    public void testSpreadOperator() {
      runTest("compiler/fir/analysis-tests/testData/resolve/spreadOperator.kt");
    }

    @Test
    @TestMetadata("statusResolveForTypealiasAsSuperClass.kt")
    public void testStatusResolveForTypealiasAsSuperClass() {
      runTest("compiler/fir/analysis-tests/testData/resolve/statusResolveForTypealiasAsSuperClass.kt");
    }

    @Test
    @TestMetadata("syntheticsVsNormalProperties.kt")
    public void testSyntheticsVsNormalProperties() {
      runTest("compiler/fir/analysis-tests/testData/resolve/syntheticsVsNormalProperties.kt");
    }

    @Test
    @TestMetadata("treeSet.kt")
    public void testTreeSet() {
      runTest("compiler/fir/analysis-tests/testData/resolve/treeSet.kt");
    }

    @Test
    @TestMetadata("trueNegativeOperatorAssignmentOnPropertyFromClass.kt")
    public void testTrueNegativeOperatorAssignmentOnPropertyFromClass() {
      runTest("compiler/fir/analysis-tests/testData/resolve/trueNegativeOperatorAssignmentOnPropertyFromClass.kt");
    }

    @Test
    @TestMetadata("TwoDeclarationsInSameFile.kt")
    public void testTwoDeclarationsInSameFile() {
      runTest("compiler/fir/analysis-tests/testData/resolve/TwoDeclarationsInSameFile.kt");
    }

    @Test
    @TestMetadata("typeAliasWithGeneric.kt")
    public void testTypeAliasWithGeneric() {
      runTest("compiler/fir/analysis-tests/testData/resolve/typeAliasWithGeneric.kt");
    }

    @Test
    @TestMetadata("typeFromGetter.kt")
    public void testTypeFromGetter() {
      runTest("compiler/fir/analysis-tests/testData/resolve/typeFromGetter.kt");
    }

    @Test
    @TestMetadata("typeParameterInBoundsLocalFunction.kt")
    public void testTypeParameterInBoundsLocalFunction() {
      runTest("compiler/fir/analysis-tests/testData/resolve/typeParameterInBoundsLocalFunction.kt");
    }

    @Test
    @TestMetadata("typeParameterInPropertyReceiver.kt")
    public void testTypeParameterInPropertyReceiver() {
      runTest("compiler/fir/analysis-tests/testData/resolve/typeParameterInPropertyReceiver.kt");
    }

    @Test
    @TestMetadata("typesInLocalFunctions.kt")
    public void testTypesInLocalFunctions() {
      runTest("compiler/fir/analysis-tests/testData/resolve/typesInLocalFunctions.kt");
    }

    @Test
    @TestMetadata("unitTypeFromOtherModule.kt")
    public void testUnitTypeFromOtherModule() {
      runTest("compiler/fir/analysis-tests/testData/resolve/unitTypeFromOtherModule.kt");
    }

    @Test
    @TestMetadata("unitTypeSubstituteOverrideInNestedClassFromOtherModule.kt")
    public void testUnitTypeSubstituteOverrideInNestedClassFromOtherModule() {
      runTest("compiler/fir/analysis-tests/testData/resolve/unitTypeSubstituteOverrideInNestedClassFromOtherModule.kt");
    }

    @Test
    @TestMetadata("varargInPrimaryConstructor.kt")
    public void testVarargInPrimaryConstructor() {
      runTest("compiler/fir/analysis-tests/testData/resolve/varargInPrimaryConstructor.kt");
    }

    @Test
    @TestMetadata("visibleVsInvisibleQualifier.kt")
    public void testVisibleVsInvisibleQualifier() {
      runTest("compiler/fir/analysis-tests/testData/resolve/visibleVsInvisibleQualifier.kt");
    }

    @Test
    @TestMetadata("whenAsReceiver.kt")
    public void testWhenAsReceiver() {
      runTest("compiler/fir/analysis-tests/testData/resolve/whenAsReceiver.kt");
    }

    @Test
    @TestMetadata("whenInference.kt")
    public void testWhenInference() {
      runTest("compiler/fir/analysis-tests/testData/resolve/whenInference.kt");
    }

    @Test
    @TestMetadata("whenWithWhenAsStatement.kt")
    public void testWhenWithWhenAsStatement() {
      runTest("compiler/fir/analysis-tests/testData/resolve/whenWithWhenAsStatement.kt");
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Test
      @TestMetadata("kindaCompilerRequiredNestedAnnotation.kt")
      public void testKindaCompilerRequiredNestedAnnotation() {
        runTest("compiler/fir/analysis-tests/testData/resolve/annotations/kindaCompilerRequiredNestedAnnotation.kt");
      }

      @Test
      @TestMetadata("kt43936.kt")
      public void testKt43936() {
        runTest("compiler/fir/analysis-tests/testData/resolve/annotations/kt43936.kt");
      }

      @Test
      @TestMetadata("kt54478.kt")
      public void testKt54478() {
        runTest("compiler/fir/analysis-tests/testData/resolve/annotations/kt54478.kt");
      }

      @Test
      @TestMetadata("kt55286.kt")
      public void testKt55286() {
        runTest("compiler/fir/analysis-tests/testData/resolve/annotations/kt55286.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/arguments")
    @TestDataPath("$PROJECT_ROOT")
    public class Arguments {
      @Test
      @TestMetadata("definetelyNotNullForTypeParameter.kt")
      public void testDefinetelyNotNullForTypeParameter() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/definetelyNotNullForTypeParameter.kt");
      }

      @Test
      @TestMetadata("extensionLambdaInDefaultArgument.kt")
      public void testExtensionLambdaInDefaultArgument() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/extensionLambdaInDefaultArgument.kt");
      }

      @Test
      @TestMetadata("incorrectFunctionalType.kt")
      public void testIncorrectFunctionalType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/incorrectFunctionalType.kt");
      }

      @Test
      @TestMetadata("integerOverloads.kt")
      public void testIntegerOverloads() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/integerOverloads.kt");
      }

      @Test
      @TestMetadata("invoke.kt")
      public void testInvoke() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/invoke.kt");
      }

      @Test
      @TestMetadata("kt41940.kt")
      public void testKt41940() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/kt41940.kt");
      }

      @Test
      @TestMetadata("lambdaInLambda2.kt")
      public void testLambdaInLambda2() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/lambdaInLambda2.kt");
      }

      @Test
      @TestMetadata("namedArrayInAnnotation.kt")
      public void testNamedArrayInAnnotation() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/namedArrayInAnnotation.kt");
      }

      @Test
      @TestMetadata("nestedClassInAnnotationArgument.kt")
      public void testNestedClassInAnnotationArgument() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/nestedClassInAnnotationArgument.kt");
      }

      @Test
      @TestMetadata("nullForDifferentProjections.kt")
      public void testNullForDifferentProjections() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/nullForDifferentProjections.kt");
      }

      @Test
      @TestMetadata("overloadByReceiver.kt")
      public void testOverloadByReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/overloadByReceiver.kt");
      }

      @Test
      @TestMetadata("overloadWithDefault.kt")
      public void testOverloadWithDefault() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/overloadWithDefault.kt");
      }

      @Test
      @TestMetadata("setWithTrailingLambda.kt")
      public void testSetWithTrailingLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/setWithTrailingLambda.kt");
      }

      @Test
      @TestMetadata("stringTemplates.kt")
      public void testStringTemplates() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/stringTemplates.kt");
      }

      @Test
      @TestMetadata("tryInLambda.kt")
      public void testTryInLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/tryInLambda.kt");
      }

      @Test
      @TestMetadata("typeMismatchOnExpectedJavaMap.kt")
      public void testTypeMismatchOnExpectedJavaMap() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/typeMismatchOnExpectedJavaMap.kt");
      }

      @Test
      @TestMetadata("untouchedReturnInIf.kt")
      public void testUntouchedReturnInIf() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/untouchedReturnInIf.kt");
      }

      @Test
      @TestMetadata("varargFromJava.kt")
      public void testVarargFromJava() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/varargFromJava.kt");
      }

      @Test
      @TestMetadata("varargOfLambdasWithReceiver.kt")
      public void testVarargOfLambdasWithReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/varargOfLambdasWithReceiver.kt");
      }

      @Test
      @TestMetadata("varargProjection.kt")
      public void testVarargProjection() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arguments/varargProjection.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/arrays")
    @TestDataPath("$PROJECT_ROOT")
    public class Arrays {
      @Test
      @TestMetadata("arraySet.kt")
      public void testArraySet() {
        runTest("compiler/fir/analysis-tests/testData/resolve/arrays/arraySet.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/builtins")
    @TestDataPath("$PROJECT_ROOT")
    public class Builtins {
      @Test
      @TestMetadata("lists.kt")
      public void testLists() {
        runTest("compiler/fir/analysis-tests/testData/resolve/builtins/lists.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/callResolution")
    @TestDataPath("$PROJECT_ROOT")
    public class CallResolution {
      @Test
      @TestMetadata("chooseOverloadByShapeOfLambda.kt")
      public void testChooseOverloadByShapeOfLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/chooseOverloadByShapeOfLambda.kt");
      }

      @Test
      @TestMetadata("companionInvoke.kt")
      public void testCompanionInvoke() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/companionInvoke.kt");
      }

      @Test
      @TestMetadata("companionVsSuperStatic.kt")
      public void testCompanionVsSuperStatic() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/companionVsSuperStatic.kt");
      }

      @Test
      @TestMetadata("debugExpressionType.kt")
      public void testDebugExpressionType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/debugExpressionType.kt");
      }

      @Test
      @TestMetadata("debugInfoCall.kt")
      public void testDebugInfoCall() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/debugInfoCall.kt");
      }

      @Test
      @TestMetadata("extensionInvokeAfterSafeCall.kt")
      public void testExtensionInvokeAfterSafeCall() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/extensionInvokeAfterSafeCall.kt");
      }

      @Test
      @TestMetadata("incorrectPlusOperatorFromJava.kt")
      public void testIncorrectPlusOperatorFromJava() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/incorrectPlusOperatorFromJava.kt");
      }

      @Test
      @TestMetadata("invokeAmbiguity.kt")
      public void testInvokeAmbiguity() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/invokeAmbiguity.kt");
      }

      @Test
      @TestMetadata("invokeWithReceiverAndArgument.kt")
      public void testInvokeWithReceiverAndArgument() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/invokeWithReceiverAndArgument.kt");
      }

      @Test
      @TestMetadata("kt37056.kt")
      public void testKt37056() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/kt37056.kt");
      }

      @Test
      @TestMetadata("objectInvoke.kt")
      public void testObjectInvoke() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/objectInvoke.kt");
      }

      @Test
      @TestMetadata("overloadsWithGenericAndGenericLambda.kt")
      public void testOverloadsWithGenericAndGenericLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/overloadsWithGenericAndGenericLambda.kt");
      }

      @Test
      @TestMetadata("referenceToNestedClass.kt")
      public void testReferenceToNestedClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/referenceToNestedClass.kt");
      }

      @Test
      @TestMetadata("safeCallOnTypeAlias.kt")
      public void testSafeCallOnTypeAlias() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/safeCallOnTypeAlias.kt");
      }

      @Test
      @TestMetadata("superAny.kt")
      public void testSuperAny() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/superAny.kt");
      }

      @Test
      @TestMetadata("suspendCOnversionForReceiver.kt")
      public void testSuspendCOnversionForReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/suspendCOnversionForReceiver.kt");
      }

      @Test
      @TestMetadata("twoLocalLambdasWithSameName.kt")
      public void testTwoLocalLambdasWithSameName() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/twoLocalLambdasWithSameName.kt");
      }

      @Test
      @TestMetadata("typeAliasWithNotNullBound.kt")
      public void testTypeAliasWithNotNullBound() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/typeAliasWithNotNullBound.kt");
      }

      @Test
      @TestMetadata("uselessMultipleBounds.kt")
      public void testUselessMultipleBounds() {
        runTest("compiler/fir/analysis-tests/testData/resolve/callResolution/uselessMultipleBounds.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/cfa")
    @TestDataPath("$PROJECT_ROOT")
    public class Cfa {
      @Test
      @TestMetadata("initializationInTry.kt")
      public void testInitializationInTry() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfa/initializationInTry.kt");
      }

      @Test
      @TestMetadata("kt53819.kt")
      public void testKt53819() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfa/kt53819.kt");
      }

      @Test
      @TestMetadata("smartcastOnThisDuringClassInitialization.kt")
      public void testSmartcastOnThisDuringClassInitialization() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfa/smartcastOnThisDuringClassInitialization.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/cfg")
    @TestDataPath("$PROJECT_ROOT")
    public class Cfg {
      @Test
      @TestMetadata("annotatedLocalClass.kt")
      public void testAnnotatedLocalClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/annotatedLocalClass.kt");
      }

      @Test
      @TestMetadata("anonymousObjectInUnreachableCode.kt")
      public void testAnonymousObjectInUnreachableCode() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/anonymousObjectInUnreachableCode.kt");
      }

      @Test
      @TestMetadata("binaryOperations.kt")
      public void testBinaryOperations() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/binaryOperations.kt");
      }

      @Test
      @TestMetadata("booleanOperatorsWithConsts.kt")
      public void testBooleanOperatorsWithConsts() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/booleanOperatorsWithConsts.kt");
      }

      @Test
      @TestMetadata("complex.kt")
      public void testComplex() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/complex.kt");
      }

      @Test
      @TestMetadata("defaultArguments.kt")
      public void testDefaultArguments() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/defaultArguments.kt");
      }

      @Test
      @TestMetadata("emptyWhen.kt")
      public void testEmptyWhen() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/emptyWhen.kt");
      }

      @Test
      @TestMetadata("initBlock.kt")
      public void testInitBlock() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/initBlock.kt");
      }

      @Test
      @TestMetadata("initBlockAndInPlaceLambda.kt")
      public void testInitBlockAndInPlaceLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/initBlockAndInPlaceLambda.kt");
      }

      @Test
      @TestMetadata("inplaceLambdaInControlFlowExpressions.kt")
      public void testInplaceLambdaInControlFlowExpressions() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/inplaceLambdaInControlFlowExpressions.kt");
      }

      @Test
      @TestMetadata("lambdaAsReturnOfLambda.kt")
      public void testLambdaAsReturnOfLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/lambdaAsReturnOfLambda.kt");
      }

      @Test
      @TestMetadata("lambdaReturningObject.kt")
      public void testLambdaReturningObject() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/lambdaReturningObject.kt");
      }

      @Test
      @TestMetadata("lambdas.kt")
      public void testLambdas() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/lambdas.kt");
      }

      @Test
      @TestMetadata("loops.kt")
      public void testLoops() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/loops.kt");
      }

      @Test
      @TestMetadata("nestedClass.kt")
      public void testNestedClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/nestedClass.kt");
      }

      @Test
      @TestMetadata("postponedLambdaInConstructor.kt")
      public void testPostponedLambdaInConstructor() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/postponedLambdaInConstructor.kt");
      }

      @Test
      @TestMetadata("postponedLambdas.kt")
      public void testPostponedLambdas() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/postponedLambdas.kt");
      }

      @Test
      @TestMetadata("returnValuesFromLambda.kt")
      public void testReturnValuesFromLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/returnValuesFromLambda.kt");
      }

      @Test
      @TestMetadata("safeCalls.kt")
      public void testSafeCalls() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/safeCalls.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/simple.kt");
      }

      @Test
      @TestMetadata("tryCatch.kt")
      public void testTryCatch() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/tryCatch.kt");
      }

      @Test
      @TestMetadata("variableInitializedInTryBlock.kt")
      public void testVariableInitializedInTryBlock() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/variableInitializedInTryBlock.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/fir/analysis-tests/testData/resolve/cfg/when.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/checkers")
    @TestDataPath("$PROJECT_ROOT")
    public class Checkers {
      @Test
      @TestMetadata("importAnnotationWithRequiresOptIn.kt")
      public void testImportAnnotationWithRequiresOptIn() {
        runTest("compiler/fir/analysis-tests/testData/resolve/checkers/importAnnotationWithRequiresOptIn.kt");
      }

      @Test
      @TestMetadata("redundantNullCheckOnAsCast.kt")
      public void testRedundantNullCheckOnAsCast() {
        runTest("compiler/fir/analysis-tests/testData/resolve/checkers/redundantNullCheckOnAsCast.kt");
      }

      @Test
      @TestMetadata("unsuccessfullCastToStartProjectedType.kt")
      public void testUnsuccessfullCastToStartProjectedType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/checkers/unsuccessfullCastToStartProjectedType.kt");
      }

      @Test
      @TestMetadata("uselessCastLeadsToRecursiveProblem.kt")
      public void testUselessCastLeadsToRecursiveProblem() {
        runTest("compiler/fir/analysis-tests/testData/resolve/checkers/uselessCastLeadsToRecursiveProblem.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/constVal")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstVal {
      @Test
      @TestMetadata("constValWithTypealiasType.kt")
      public void testConstValWithTypealiasType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/constVal/constValWithTypealiasType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/constructors")
    @TestDataPath("$PROJECT_ROOT")
    public class Constructors {
      @Test
      @TestMetadata("noSuperCallInSupertypes.kt")
      public void testNoSuperCallInSupertypes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/constructors/noSuperCallInSupertypes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/contextParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class ContextParameters {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics")
      @TestDataPath("$PROJECT_ROOT")
      public class Diagnostics {
        @Test
        @TestMetadata("subtyping.kt")
        public void testSubtyping() {
          runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/subtyping.kt");
        }

        @Nested
        @TestMetadata("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages")
        @TestDataPath("$PROJECT_ROOT")
        public class DeclarationAndUsages {
          @Test
          @TestMetadata("contextParameterIsNotInlined.kt")
          public void testContextParameterIsNotInlined() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/contextParameterIsNotInlined.kt");
          }

          @Test
          @TestMetadata("contextParameterToDefaultArgument.kt")
          public void testContextParameterToDefaultArgument() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/contextParameterToDefaultArgument.kt");
          }

          @Test
          @TestMetadata("inFunctionDeclaration.kt")
          public void testInFunctionDeclaration() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/inFunctionDeclaration.kt");
          }

          @Test
          @TestMetadata("inFunctionalType.kt")
          public void testInFunctionalType() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/inFunctionalType.kt");
          }

          @Test
          @TestMetadata("inPropertyDeclaration.kt")
          public void testInPropertyDeclaration() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/inPropertyDeclaration.kt");
          }

          @Test
          @TestMetadata("moreThenOneContext.kt")
          public void testMoreThenOneContext() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/moreThenOneContext.kt");
          }

          @Test
          @TestMetadata("parameterType.kt")
          public void testParameterType() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/parameterType.kt");
          }

          @Test
          @TestMetadata("parameterTypeWithContext.kt")
          public void testParameterTypeWithContext() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/parameterTypeWithContext.kt");
          }

          @Test
          @TestMetadata("propertyWithContextAndContextType.kt")
          public void testPropertyWithContextAndContextType() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/propertyWithContextAndContextType.kt");
          }

          @Test
          @TestMetadata("visibilityOfContextTypeOnProperty.kt")
          public void testVisibilityOfContextTypeOnProperty() {
            runTest("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/visibilityOfContextTypeOnProperty.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @Test
      @TestMetadata("contractFromOtherModule.kt")
      public void testContractFromOtherModule() {
        runTest("compiler/fir/analysis-tests/testData/resolve/contracts/contractFromOtherModule.kt");
      }

      @Test
      @TestMetadata("contractFromOtherModule_samePackage.kt")
      public void testContractFromOtherModule_samePackage() {
        runTest("compiler/fir/analysis-tests/testData/resolve/contracts/contractFromOtherModule_samePackage.kt");
      }

      @Test
      @TestMetadata("contractOnInfixFunction.kt")
      public void testContractOnInfixFunction() {
        runTest("compiler/fir/analysis-tests/testData/resolve/contracts/contractOnInfixFunction.kt");
      }

      @Test
      @TestMetadata("exctlyOnceCallBetweenUnrelatedLambdas.kt")
      public void testExctlyOnceCallBetweenUnrelatedLambdas() {
        runTest("compiler/fir/analysis-tests/testData/resolve/contracts/exctlyOnceCallBetweenUnrelatedLambdas.kt");
      }

      @Test
      @TestMetadata("genericContract.kt")
      public void testGenericContract() {
        runTest("compiler/fir/analysis-tests/testData/resolve/contracts/genericContract.kt");
      }

      @Test
      @TestMetadata("inPlaceAfterVararg.kt")
      public void testInPlaceAfterVararg() {
        runTest("compiler/fir/analysis-tests/testData/resolve/contracts/inPlaceAfterVararg.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/delegates")
    @TestDataPath("$PROJECT_ROOT")
    public class Delegates {
      @Test
      @TestMetadata("callOnThisInDelegateExpression.kt")
      public void testCallOnThisInDelegateExpression() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/callOnThisInDelegateExpression.kt");
      }

      @Test
      @TestMetadata("delegateInference.kt")
      public void testDelegateInference() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/delegateInference.kt");
      }

      @Test
      @TestMetadata("delegateWithArgInference.kt")
      public void testDelegateWithArgInference() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/delegateWithArgInference.kt");
      }

      @Test
      @TestMetadata("delegateWithLambda.kt")
      public void testDelegateWithLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/delegateWithLambda.kt");
      }

      @Test
      @TestMetadata("extensionGenericGetValue.kt")
      public void testExtensionGenericGetValue() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/extensionGenericGetValue.kt");
      }

      @Test
      @TestMetadata("extensionGetValueWithTypeVariableAsReceiver.kt")
      public void testExtensionGetValueWithTypeVariableAsReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/extensionGetValueWithTypeVariableAsReceiver.kt");
      }

      @Test
      @TestMetadata("kt41982.kt")
      public void testKt41982() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/kt41982.kt");
      }

      @Test
      @TestMetadata("provideDelegate.kt")
      public void testProvideDelegate() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/provideDelegate.kt");
      }

      @Test
      @TestMetadata("receiverInference.kt")
      public void testReceiverInference() {
        runTest("compiler/fir/analysis-tests/testData/resolve/delegates/receiverInference.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    public class Diagnostics {
      @Test
      @TestMetadata("conflictingOverloads2.kt")
      public void testConflictingOverloads2() {
        runTest("compiler/fir/analysis-tests/testData/resolve/diagnostics/conflictingOverloads2.kt");
      }

      @Test
      @TestMetadata("javaInheritsPrivateJavaClass.kt")
      public void testJavaInheritsPrivateJavaClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/diagnostics/javaInheritsPrivateJavaClass.kt");
      }

      @Test
      @TestMetadata("redundantModifier.kt")
      public void testRedundantModifier() {
        runTest("compiler/fir/analysis-tests/testData/resolve/diagnostics/redundantModifier.kt");
      }

      @Test
      @TestMetadata("someOverridesTest.kt")
      public void testSomeOverridesTest() {
        runTest("compiler/fir/analysis-tests/testData/resolve/diagnostics/someOverridesTest.kt");
      }

      @Test
      @TestMetadata("superCallWithDelegation.kt")
      public void testSuperCallWithDelegation() {
        runTest("compiler/fir/analysis-tests/testData/resolve/diagnostics/superCallWithDelegation.kt");
      }

      @Test
      @TestMetadata("testIllegalAnnotationClass.kt")
      public void testTestIllegalAnnotationClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/diagnostics/testIllegalAnnotationClass.kt");
      }

      @Test
      @TestMetadata("unusedAnonymLambdaParam.kt")
      public void testUnusedAnonymLambdaParam() {
        runTest("compiler/fir/analysis-tests/testData/resolve/diagnostics/unusedAnonymLambdaParam.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/exhaustiveness")
    @TestDataPath("$PROJECT_ROOT")
    public class Exhaustiveness {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/negative")
      @TestDataPath("$PROJECT_ROOT")
      public class Negative {
        @Test
        @TestMetadata("nonExhaustiveWhenWithoutCoercionToUnit.kt")
        public void testNonExhaustiveWhenWithoutCoercionToUnit() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/negative/nonExhaustiveWhenWithoutCoercionToUnit.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive")
      @TestDataPath("$PROJECT_ROOT")
      public class Positive {
        @Test
        @TestMetadata("annotatedBranch.kt")
        public void testAnnotatedBranch() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/annotatedBranch.kt");
        }

        @Test
        @TestMetadata("exhaustiveWhenAndDNNType.kt")
        public void testExhaustiveWhenAndDNNType() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveWhenAndDNNType.kt");
        }

        @Test
        @TestMetadata("exhaustiveWhenAndFlexibleType.kt")
        public void testExhaustiveWhenAndFlexibleType() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveWhenAndFlexibleType.kt");
        }

        @Test
        @TestMetadata("exhaustiveness_sealedObject.kt")
        public void testExhaustiveness_sealedObject() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveness_sealedObject.kt");
        }

        @Test
        @TestMetadata("nestedIfInLambda.kt")
        public void testNestedIfInLambda() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/nestedIfInLambda.kt");
        }

        @Test
        @TestMetadata("nonExhaustiveWhenWithCoercionToUnit.kt")
        public void testNonExhaustiveWhenWithCoercionToUnit() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/nonExhaustiveWhenWithCoercionToUnit.kt");
        }

        @Test
        @TestMetadata("sameBranchMultipleConditions.kt")
        public void testSameBranchMultipleConditions() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/sameBranchMultipleConditions.kt");
        }

        @Test
        @TestMetadata("smartcastToExhaustiveInterface.kt")
        public void testSmartcastToExhaustiveInterface() {
          runTest("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/smartcastToExhaustiveInterface.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/expresssions")
    @TestDataPath("$PROJECT_ROOT")
    public class Expresssions {
      @Test
      @TestMetadata("blockLocalScopes.kt")
      public void testBlockLocalScopes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/blockLocalScopes.kt");
      }

      @Test
      @TestMetadata("companionExtension.kt")
      public void testCompanionExtension() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/companionExtension.kt");
      }

      @Test
      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/constructor.kt");
      }

      @Test
      @TestMetadata("dispatchReceiver.kt")
      public void testDispatchReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/dispatchReceiver.kt");
      }

      @Test
      @TestMetadata("enumValues.kt")
      public void testEnumValues() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/enumValues.kt");
      }

      @Test
      @TestMetadata("extensionPropertyInLambda.kt")
      public void testExtensionPropertyInLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/extensionPropertyInLambda.kt");
      }

      @Test
      @TestMetadata("genericDiagnostic.kt")
      public void testGenericDiagnostic() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/genericDiagnostic.kt");
      }

      @Test
      @TestMetadata("genericPropertyAccess.kt")
      public void testGenericPropertyAccess() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/genericPropertyAccess.kt");
      }

      @Test
      @TestMetadata("genericUsedInFunction.kt")
      public void testGenericUsedInFunction() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/genericUsedInFunction.kt");
      }

      @Test
      @TestMetadata("innerWithSuperCompanion.kt")
      public void testInnerWithSuperCompanion() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/innerWithSuperCompanion.kt");
      }

      @Test
      @TestMetadata("javaFieldCallable.kt")
      public void testJavaFieldCallable() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/javaFieldCallable.kt");
      }

      @Test
      @TestMetadata("lambda.kt")
      public void testLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/lambda.kt");
      }

      @Test
      @TestMetadata("lambdaWithReceiver.kt")
      public void testLambdaWithReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/lambdaWithReceiver.kt");
      }

      @Test
      @TestMetadata("localClassAccessesContainingClass.kt")
      public void testLocalClassAccessesContainingClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/localClassAccessesContainingClass.kt");
      }

      @Test
      @TestMetadata("localConstructor.kt")
      public void testLocalConstructor() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/localConstructor.kt");
      }

      @Test
      @TestMetadata("localExtension.kt")
      public void testLocalExtension() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/localExtension.kt");
      }

      @Test
      @TestMetadata("localImplicitBodies.kt")
      public void testLocalImplicitBodies() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/localImplicitBodies.kt");
      }

      @Test
      @TestMetadata("localInnerClass.kt")
      public void testLocalInnerClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/localInnerClass.kt");
      }

      @Test
      @TestMetadata("localScopes.kt")
      public void testLocalScopes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/localScopes.kt");
      }

      @Test
      @TestMetadata("localTypes.kt")
      public void testLocalTypes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/localTypes.kt");
      }

      @Test
      @TestMetadata("localWithBooleanNot.kt")
      public void testLocalWithBooleanNot() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/localWithBooleanNot.kt");
      }

      @Test
      @TestMetadata("memberExtension.kt")
      public void testMemberExtension() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/memberExtension.kt");
      }

      @Test
      @TestMetadata("nestedConstructorCallable.kt")
      public void testNestedConstructorCallable() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/nestedConstructorCallable.kt");
      }

      @Test
      @TestMetadata("objectOverrideCallViaImport.kt")
      public void testObjectOverrideCallViaImport() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/objectOverrideCallViaImport.kt");
      }

      @Test
      @TestMetadata("objects.kt")
      public void testObjects() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/objects.kt");
      }

      @Test
      @TestMetadata("outerMemberAccesses.kt")
      public void testOuterMemberAccesses() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/outerMemberAccesses.kt");
      }

      @Test
      @TestMetadata("outerObject.kt")
      public void testOuterObject() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/outerObject.kt");
      }

      @Test
      @TestMetadata("overriddenJavaGetter.kt")
      public void testOverriddenJavaGetter() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/overriddenJavaGetter.kt");
      }

      @Test
      @TestMetadata("plusWithAssignSmartCast.kt")
      public void testPlusWithAssignSmartCast() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/plusWithAssignSmartCast.kt");
      }

      @Test
      @TestMetadata("qualifiedExpressions.kt")
      public void testQualifiedExpressions() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/qualifiedExpressions.kt");
      }

      @Test
      @TestMetadata("qualifierPriority.kt")
      public void testQualifierPriority() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/qualifierPriority.kt");
      }

      @Test
      @TestMetadata("sameReceiver.kt")
      public void testSameReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/sameReceiver.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/simple.kt");
      }

      @Test
      @TestMetadata("syntheticInImplicitBody.kt")
      public void testSyntheticInImplicitBody() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/syntheticInImplicitBody.kt");
      }

      @Test
      @TestMetadata("this.kt")
      public void testThis() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/this.kt");
      }

      @Test
      @TestMetadata("topExtensionVsOuterMember.kt")
      public void testTopExtensionVsOuterMember() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/topExtensionVsOuterMember.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructor.kt")
      public void testTypeAliasConstructor() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/typeAliasConstructor.kt");
      }

      @Test
      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/vararg.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/when.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/expresssions/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        @TestMetadata("id.kt")
        public void testId() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/inference/id.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke")
      @TestDataPath("$PROJECT_ROOT")
      public class Invoke {
        @Test
        @TestMetadata("doubleBrackets.kt")
        public void testDoubleBrackets() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/doubleBrackets.kt");
        }

        @Test
        @TestMetadata("explicitReceiver.kt")
        public void testExplicitReceiver() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/explicitReceiver.kt");
        }

        @Test
        @TestMetadata("extension.kt")
        public void testExtension() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/extension.kt");
        }

        @Test
        @TestMetadata("extensionOnObject.kt")
        public void testExtensionOnObject() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/extensionOnObject.kt");
        }

        @Test
        @TestMetadata("extensionSafeCall.kt")
        public void testExtensionSafeCall() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/extensionSafeCall.kt");
        }

        @Test
        @TestMetadata("inBrackets.kt")
        public void testInBrackets() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/inBrackets.kt");
        }

        @Test
        @TestMetadata("incorrectInvokeReceiver.kt")
        public void testIncorrectInvokeReceiver() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/incorrectInvokeReceiver.kt");
        }

        @Test
        @TestMetadata("propertyFromParameter.kt")
        public void testPropertyFromParameter() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/propertyFromParameter.kt");
        }

        @Test
        @TestMetadata("propertyWithExtensionType.kt")
        public void testPropertyWithExtensionType() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/propertyWithExtensionType.kt");
        }

        @Test
        @TestMetadata("safeCallsWithImplicitInvoke.kt")
        public void testSafeCallsWithImplicitInvoke() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/safeCallsWithImplicitInvoke.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/simple.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/expresssions/operators")
      @TestDataPath("$PROJECT_ROOT")
      public class Operators {
        @Test
        @TestMetadata("plus.kt")
        public void testPlus() {
          runTest("compiler/fir/analysis-tests/testData/resolve/expresssions/operators/plus.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers")
    @TestDataPath("$PROJECT_ROOT")
    public class ExtraCheckers {
      @Test
      @TestMetadata("ArrayEqualityCanBeReplacedWithEquals.kt")
      public void testArrayEqualityCanBeReplacedWithEquals() {
        runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/ArrayEqualityCanBeReplacedWithEquals.kt");
      }

      @Test
      @TestMetadata("kt69190.kt")
      public void testKt69190() {
        runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/kt69190.kt");
      }

      @Test
      @TestMetadata("RedundantExplicitTypeChecker.kt")
      public void testRedundantExplicitTypeChecker() {
        runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantExplicitTypeChecker.kt");
      }

      @Test
      @TestMetadata("RedundantSingleExpressionStringTemplateChecker.kt")
      public void testRedundantSingleExpressionStringTemplateChecker() {
        runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantSingleExpressionStringTemplateChecker.kt");
      }

      @Test
      @TestMetadata("RedundantVisibilityDueToOverride.kt")
      public void testRedundantVisibilityDueToOverride() {
        runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantVisibilityDueToOverride.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment")
      @TestDataPath("$PROJECT_ROOT")
      public class CanBeReplacedWithOperatorAssignment {
        @Test
        @TestMetadata("BasicTest.kt")
        public void testBasicTest() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/BasicTest.kt");
        }

        @Test
        @TestMetadata("ComplexExpression.kt")
        public void testComplexExpression() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/ComplexExpression.kt");
        }

        @Test
        @TestMetadata("flexibleTypeBug.kt")
        public void testFlexibleTypeBug() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/flexibleTypeBug.kt");
        }

        @Test
        @TestMetadata("illegalMultipleOperators.kt")
        public void testIllegalMultipleOperators() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/illegalMultipleOperators.kt");
        }

        @Test
        @TestMetadata("illegalMultipleOperatorsMiddle.kt")
        public void testIllegalMultipleOperatorsMiddle() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/illegalMultipleOperatorsMiddle.kt");
        }

        @Test
        @TestMetadata("invalidSubtraction.kt")
        public void testInvalidSubtraction() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/invalidSubtraction.kt");
        }

        @Test
        @TestMetadata("list.kt")
        public void testList() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/list.kt");
        }

        @Test
        @TestMetadata("logicOperators.kt")
        public void testLogicOperators() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/logicOperators.kt");
        }

        @Test
        @TestMetadata("multipleOperators.kt")
        public void testMultipleOperators() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/multipleOperators.kt");
        }

        @Test
        @TestMetadata("multipleOperatorsRightSideRepeat.kt")
        public void testMultipleOperatorsRightSideRepeat() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/multipleOperatorsRightSideRepeat.kt");
        }

        @Test
        @TestMetadata("nonCommutativeRepeat.kt")
        public void testNonCommutativeRepeat() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/nonCommutativeRepeat.kt");
        }

        @Test
        @TestMetadata("nonRepeatingAssignment.kt")
        public void testNonRepeatingAssignment() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/nonRepeatingAssignment.kt");
        }

        @Test
        @TestMetadata("OperatorAssignment.kt")
        public void testOperatorAssignment() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/OperatorAssignment.kt");
        }

        @Test
        @TestMetadata("plusAssignConflict.kt")
        public void testPlusAssignConflict() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/plusAssignConflict.kt");
        }

        @Test
        @TestMetadata("rightSideRepeat.kt")
        public void testRightSideRepeat() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/rightSideRepeat.kt");
        }

        @Test
        @TestMetadata("simpleAssign.kt")
        public void testSimpleAssign() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/simpleAssign.kt");
        }

        @Test
        @TestMetadata("validAddition.kt")
        public void testValidAddition() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/validAddition.kt");
        }

        @Test
        @TestMetadata("validSubtraction.kt")
        public void testValidSubtraction() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/validSubtraction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers/emptyRangeChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class EmptyRangeChecker {
        @Test
        @TestMetadata("NoWarning.kt")
        public void testNoWarning() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/emptyRangeChecker/NoWarning.kt");
        }

        @Test
        @TestMetadata("Warning.kt")
        public void testWarning() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/emptyRangeChecker/Warning.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod")
      @TestDataPath("$PROJECT_ROOT")
      public class RedundantCallOfConversionMethod {
        @Test
        @TestMetadata("booleanToInt.kt")
        public void testBooleanToInt() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/booleanToInt.kt");
        }

        @Test
        @TestMetadata("byte.kt")
        public void testByte() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/byte.kt");
        }

        @Test
        @TestMetadata("char.kt")
        public void testChar() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/char.kt");
        }

        @Test
        @TestMetadata("double.kt")
        public void testDouble() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/double.kt");
        }

        @Test
        @TestMetadata("float.kt")
        public void testFloat() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/float.kt");
        }

        @Test
        @TestMetadata("int.kt")
        public void testInt() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/int.kt");
        }

        @Test
        @TestMetadata("long.kt")
        public void testLong() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/long.kt");
        }

        @Test
        @TestMetadata("nullable.kt")
        public void testNullable() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/nullable.kt");
        }

        @Test
        @TestMetadata("nullable2.kt")
        public void testNullable2() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/nullable2.kt");
        }

        @Test
        @TestMetadata("safeString.kt")
        public void testSafeString() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/safeString.kt");
        }

        @Test
        @TestMetadata("safeString2.kt")
        public void testSafeString2() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/safeString2.kt");
        }

        @Test
        @TestMetadata("short.kt")
        public void testShort() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/short.kt");
        }

        @Test
        @TestMetadata("string.kt")
        public void testString() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/string.kt");
        }

        @Test
        @TestMetadata("StringTemplate.kt")
        public void testStringTemplate() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/StringTemplate.kt");
        }

        @Test
        @TestMetadata("toOtherType.kt")
        public void testToOtherType() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/toOtherType.kt");
        }

        @Test
        @TestMetadata("uByte.kt")
        public void testUByte() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/uByte.kt");
        }

        @Test
        @TestMetadata("uInt.kt")
        public void testUInt() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/uInt.kt");
        }

        @Test
        @TestMetadata("uLong.kt")
        public void testULong() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/uLong.kt");
        }

        @Test
        @TestMetadata("uShort.kt")
        public void testUShort() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/uShort.kt");
        }

        @Test
        @TestMetadata("variable.kt")
        public void testVariable() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantCallOfConversionMethod/variable.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused")
      @TestDataPath("$PROJECT_ROOT")
      public class Unused {
        @Test
        @TestMetadata("classProperty.kt")
        public void testClassProperty() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/classProperty.kt");
        }

        @Test
        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invoke.kt");
        }

        @Test
        @TestMetadata("invokeCustomTypeExt.kt")
        public void testInvokeCustomTypeExt() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeCustomTypeExt.kt");
        }

        @Test
        @TestMetadata("invokeCustomTypeMember.kt")
        public void testInvokeCustomTypeMember() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeCustomTypeMember.kt");
        }

        @Test
        @TestMetadata("invokeKFunction.kt")
        public void testInvokeKFunction() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeKFunction.kt");
        }

        @Test
        @TestMetadata("invokeKFunctionFromMethodReference.kt")
        public void testInvokeKFunctionFromMethodReference() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeKFunctionFromMethodReference.kt");
        }

        @Test
        @TestMetadata("invokeKSuspendFunction.kt")
        public void testInvokeKSuspendFunction() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeKSuspendFunction.kt");
        }

        @Test
        @TestMetadata("invokeOverload1.kt")
        public void testInvokeOverload1() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeOverload1.kt");
        }

        @Test
        @TestMetadata("invokeOverload2.kt")
        public void testInvokeOverload2() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeOverload2.kt");
        }

        @Test
        @TestMetadata("invokeSuspend.kt")
        public void testInvokeSuspend() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeSuspend.kt");
        }

        @Test
        @TestMetadata("invokeWithExtensionReceiver.kt")
        public void testInvokeWithExtensionReceiver() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/invokeWithExtensionReceiver.kt");
        }

        @Test
        @TestMetadata("lambda.kt")
        public void testLambda() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/lambda.kt");
        }

        @Test
        @TestMetadata("localVariable.kt")
        public void testLocalVariable() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/localVariable.kt");
        }

        @Test
        @TestMetadata("localVariableInSecondaryConstructor.kt")
        public void testLocalVariableInSecondaryConstructor() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/localVariableInSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("manyLocalVariables.kt")
        public void testManyLocalVariables() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/manyLocalVariables.kt");
        }

        @Test
        @TestMetadata("valueIsNeverRead.kt")
        public void testValueIsNeverRead() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/valueIsNeverRead.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class UselessCallOnNotNullChecker {
        @Test
        @TestMetadata("Basic.kt")
        public void testBasic() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/Basic.kt");
        }

        @Test
        @TestMetadata("isNullOrEmptyFromJava.kt")
        public void testIsNullOrEmptyFromJava() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/isNullOrEmptyFromJava.kt");
        }

        @Test
        @TestMetadata("NotNullType.kt")
        public void testNotNullType() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/NotNullType.kt");
        }

        @Test
        @TestMetadata("NotNullTypeChain.kt")
        public void testNotNullTypeChain() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/NotNullTypeChain.kt");
        }

        @Test
        @TestMetadata("NullOrBlankSafe.kt")
        public void testNullOrBlankSafe() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/NullOrBlankSafe.kt");
        }

        @Test
        @TestMetadata("NullOrEmpty.kt")
        public void testNullOrEmpty() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/NullOrEmpty.kt");
        }

        @Test
        @TestMetadata("NullOrEmptyFake.kt")
        public void testNullOrEmptyFake() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/NullOrEmptyFake.kt");
        }

        @Test
        @TestMetadata("NullOrEmptySafe.kt")
        public void testNullOrEmptySafe() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/NullOrEmptySafe.kt");
        }

        @Test
        @TestMetadata("OrEmptyFake.kt")
        public void testOrEmptyFake() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/OrEmptyFake.kt");
        }

        @Test
        @TestMetadata("SafeCall.kt")
        public void testSafeCall() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/SafeCall.kt");
        }

        @Test
        @TestMetadata("Sequence.kt")
        public void testSequence() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/Sequence.kt");
        }

        @Test
        @TestMetadata("String.kt")
        public void testString() {
          runTest("compiler/fir/analysis-tests/testData/resolve/extraCheckers/UselessCallOnNotNullChecker/String.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/fromBuilder")
    @TestDataPath("$PROJECT_ROOT")
    public class FromBuilder {
      @Test
      @TestMetadata("complexTypes.kt")
      public void testComplexTypes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/fromBuilder/complexTypes.kt");
      }

      @Test
      @TestMetadata("noPrimaryConstructor.kt")
      public void testNoPrimaryConstructor() {
        runTest("compiler/fir/analysis-tests/testData/resolve/fromBuilder/noPrimaryConstructor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Test
      @TestMetadata("callableReferenceOnInstance.kt")
      public void testCallableReferenceOnInstance() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/callableReferenceOnInstance.kt");
      }

      @Test
      @TestMetadata("callableReferenceToLocalClass.kt")
      public void testCallableReferenceToLocalClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/callableReferenceToLocalClass.kt");
      }

      @Test
      @TestMetadata("callableReferencesAndDefaultParameters.kt")
      public void testCallableReferencesAndDefaultParameters() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/callableReferencesAndDefaultParameters.kt");
      }

      @Test
      @TestMetadata("capturedTypeForJavaTypeParameter.kt")
      public void testCapturedTypeForJavaTypeParameter() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/capturedTypeForJavaTypeParameter.kt");
      }

      @Test
      @TestMetadata("coercionToUnitWithEarlyReturn.kt")
      public void testCoercionToUnitWithEarlyReturn() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/coercionToUnitWithEarlyReturn.kt");
      }

      @Test
      @TestMetadata("definitelyNotNullIntersectionType.kt")
      public void testDefinitelyNotNullIntersectionType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/definitelyNotNullIntersectionType.kt");
      }

      @Test
      @TestMetadata("dnnThrowJavaCall.kt")
      public void testDnnThrowJavaCall() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/dnnThrowJavaCall.kt");
      }

      @Test
      @TestMetadata("elvisAndUnit.kt")
      public void testElvisAndUnit() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/elvisAndUnit.kt");
      }

      @Test
      @TestMetadata("extensionCallableReferences.kt")
      public void testExtensionCallableReferences() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/extensionCallableReferences.kt");
      }

      @Test
      @TestMetadata("integerLiteralAsComparable.kt")
      public void testIntegerLiteralAsComparable() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/integerLiteralAsComparable.kt");
      }

      @Test
      @TestMetadata("javaCollector.kt")
      public void testJavaCollector() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/javaCollector.kt");
      }

      @Test
      @TestMetadata("kt41989.kt")
      public void testKt41989() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/kt41989.kt");
      }

      @Test
      @TestMetadata("kt53494.kt")
      public void testKt53494() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/kt53494.kt");
      }

      @Test
      @TestMetadata("kt54990.kt")
      public void testKt54990() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/kt54990.kt");
      }

      @Test
      @TestMetadata("lambdaAsReturnStatementOfLambda.kt")
      public void testLambdaAsReturnStatementOfLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/lambdaAsReturnStatementOfLambda.kt");
      }

      @Test
      @TestMetadata("lambdaInElvis.kt")
      public void testLambdaInElvis() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/lambdaInElvis.kt");
      }

      @Test
      @TestMetadata("lambdaWithoutExpectedType.kt")
      public void testLambdaWithoutExpectedType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/lambdaWithoutExpectedType.kt");
      }

      @Test
      @TestMetadata("lambdasReturns.kt")
      public void testLambdasReturns() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/lambdasReturns.kt");
      }

      @Test
      @TestMetadata("nestedExtensionFunctionType.kt")
      public void testNestedExtensionFunctionType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/nestedExtensionFunctionType.kt");
      }

      @Test
      @TestMetadata("nestedLambdas.kt")
      public void testNestedLambdas() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/nestedLambdas.kt");
      }

      @Test
      @TestMetadata("noEnhancementOnFinalStaticConstFields.kt")
      public void testNoEnhancementOnFinalStaticConstFields() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/noEnhancementOnFinalStaticConstFields.kt");
      }

      @Test
      @TestMetadata("onlyInputTypesCapturedTypeWithRecursiveBounds.kt")
      public void testOnlyInputTypesCapturedTypeWithRecursiveBounds() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/onlyInputTypesCapturedTypeWithRecursiveBounds.kt");
      }

      @Test
      @TestMetadata("onlyInputTypesCapturedTypeWithRecursiveBoundsAfter.kt")
      public void testOnlyInputTypesCapturedTypeWithRecursiveBoundsAfter() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/onlyInputTypesCapturedTypeWithRecursiveBoundsAfter.kt");
      }

      @Test
      @TestMetadata("postfixPrefixIncrementDecrement.kt")
      public void testPostfixPrefixIncrementDecrement() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/postfixPrefixIncrementDecrement.kt");
      }

      @Test
      @TestMetadata("recursiveSelfTypes.kt")
      public void testRecursiveSelfTypes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/recursiveSelfTypes.kt");
      }

      @Test
      @TestMetadata("selfTypeFromJava.kt")
      public void testSelfTypeFromJava() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/selfTypeFromJava.kt");
      }

      @Test
      @TestMetadata("simpleCapturedTypes.kt")
      public void testSimpleCapturedTypes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/simpleCapturedTypes.kt");
      }

      @Test
      @TestMetadata("typeDepthForTypeAlias.kt")
      public void testTypeDepthForTypeAlias() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/typeDepthForTypeAlias.kt");
      }

      @Test
      @TestMetadata("unitUpperBound.kt")
      public void testUnitUpperBound() {
        runTest("compiler/fir/analysis-tests/testData/resolve/inference/unitUpperBound.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/inference/pcla")
      @TestDataPath("$PROJECT_ROOT")
      public class Pcla {
        @Test
        @TestMetadata("ifInBuildMap.kt")
        public void testIfInBuildMap() {
          runTest("compiler/fir/analysis-tests/testData/resolve/inference/pcla/ifInBuildMap.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/innerClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InnerClasses {
      @Test
      @TestMetadata("innerTypeFromSuperClassInBody.kt")
      public void testInnerTypeFromSuperClassInBody() {
        runTest("compiler/fir/analysis-tests/testData/resolve/innerClasses/innerTypeFromSuperClassInBody.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/localClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class LocalClasses {
      @Test
      @TestMetadata("anonObject.kt")
      public void testAnonObject() {
        runTest("compiler/fir/analysis-tests/testData/resolve/localClasses/anonObject.kt");
      }

      @Test
      @TestMetadata("anonymousInAnonymous.kt")
      public void testAnonymousInAnonymous() {
        runTest("compiler/fir/analysis-tests/testData/resolve/localClasses/anonymousInAnonymous.kt");
      }

      @Test
      @TestMetadata("implicitInAnonymous.kt")
      public void testImplicitInAnonymous() {
        runTest("compiler/fir/analysis-tests/testData/resolve/localClasses/implicitInAnonymous.kt");
      }

      @Test
      @TestMetadata("implicitInLocalClasses.kt")
      public void testImplicitInLocalClasses() {
        runTest("compiler/fir/analysis-tests/testData/resolve/localClasses/implicitInLocalClasses.kt");
      }

      @Test
      @TestMetadata("lambdaWithAnonymousObject.kt")
      public void testLambdaWithAnonymousObject() {
        runTest("compiler/fir/analysis-tests/testData/resolve/localClasses/lambdaWithAnonymousObject.kt");
      }

      @Test
      @TestMetadata("overrideInLocal.kt")
      public void testOverrideInLocal() {
        runTest("compiler/fir/analysis-tests/testData/resolve/localClasses/overrideInLocal.kt");
      }

      @Test
      @TestMetadata("typesFromSuperClasses.kt")
      public void testTypesFromSuperClasses() {
        runTest("compiler/fir/analysis-tests/testData/resolve/localClasses/typesFromSuperClasses.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/multifile")
    @TestDataPath("$PROJECT_ROOT")
    public class Multifile {
      @Test
      @TestMetadata("importFromObject.kt")
      public void testImportFromObject() {
        runTest("compiler/fir/analysis-tests/testData/resolve/multifile/importFromObject.kt");
      }

      @Test
      @TestMetadata("NestedSuperType.kt")
      public void testNestedSuperType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/multifile/NestedSuperType.kt");
      }

      @Test
      @TestMetadata("simpleAliasedImport.kt")
      public void testSimpleAliasedImport() {
        runTest("compiler/fir/analysis-tests/testData/resolve/multifile/simpleAliasedImport.kt");
      }

      @Test
      @TestMetadata("simpleImport.kt")
      public void testSimpleImport() {
        runTest("compiler/fir/analysis-tests/testData/resolve/multifile/simpleImport.kt");
      }

      @Test
      @TestMetadata("simpleImportNested.kt")
      public void testSimpleImportNested() {
        runTest("compiler/fir/analysis-tests/testData/resolve/multifile/simpleImportNested.kt");
      }

      @Test
      @TestMetadata("simpleImportOuter.kt")
      public void testSimpleImportOuter() {
        runTest("compiler/fir/analysis-tests/testData/resolve/multifile/simpleImportOuter.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/nestedTypeAliases")
    @TestDataPath("$PROJECT_ROOT")
    public class NestedTypeAliases {
      @Test
      @TestMetadata("nestedTypeAliasWithInnerRHS.kt")
      public void testNestedTypeAliasWithInnerRHS() {
        runTest("compiler/fir/analysis-tests/testData/resolve/nestedTypeAliases/nestedTypeAliasWithInnerRHS.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/fir/analysis-tests/testData/resolve/nestedTypeAliases/simple.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/overrides")
    @TestDataPath("$PROJECT_ROOT")
    public class Overrides {
      @Test
      @TestMetadata("generics.kt")
      public void testGenerics() {
        runTest("compiler/fir/analysis-tests/testData/resolve/overrides/generics.kt");
      }

      @Test
      @TestMetadata("sameValueParametersDifferentReceiver.kt")
      public void testSameValueParametersDifferentReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolve/overrides/sameValueParametersDifferentReceiver.kt");
      }

      @Test
      @TestMetadata("simpleFakeOverride.kt")
      public void testSimpleFakeOverride() {
        runTest("compiler/fir/analysis-tests/testData/resolve/overrides/simpleFakeOverride.kt");
      }

      @Test
      @TestMetadata("supertypeGenerics.kt")
      public void testSupertypeGenerics() {
        runTest("compiler/fir/analysis-tests/testData/resolve/overrides/supertypeGenerics.kt");
      }

      @Test
      @TestMetadata("three.kt")
      public void testThree() {
        runTest("compiler/fir/analysis-tests/testData/resolve/overrides/three.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/problems")
    @TestDataPath("$PROJECT_ROOT")
    public class Problems {
      @Test
      @TestMetadata("complexLambdaWithTypeVariableAsExpectedType.kt")
      public void testComplexLambdaWithTypeVariableAsExpectedType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/complexLambdaWithTypeVariableAsExpectedType.kt");
      }

      @Test
      @TestMetadata("defaultParametersFromDifferentScopes.kt")
      public void testDefaultParametersFromDifferentScopes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/defaultParametersFromDifferentScopes.kt");
      }

      @Test
      @TestMetadata("doubleGenericDiamond.kt")
      public void testDoubleGenericDiamond() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/doubleGenericDiamond.kt");
      }

      @Test
      @TestMetadata("expectConstructor.kt")
      public void testExpectConstructor() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/expectConstructor.kt");
      }

      @Test
      @TestMetadata("fakeTypeMismatchOnExtensionReference.kt")
      public void testFakeTypeMismatchOnExtensionReference() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/fakeTypeMismatchOnExtensionReference.kt");
      }

      @Test
      @TestMetadata("falseIntersection.kt")
      public void testFalseIntersection() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/falseIntersection.kt");
      }

      @Test
      @TestMetadata("flexibleTypeVarAgainstNull.kt")
      public void testFlexibleTypeVarAgainstNull() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/flexibleTypeVarAgainstNull.kt");
      }

      @Test
      @TestMetadata("innerClassHierarchy.kt")
      public void testInnerClassHierarchy() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/innerClassHierarchy.kt");
      }

      @Test
      @TestMetadata("javaClassWithEmptyAnnotationName.kt")
      public void testJavaClassWithEmptyAnnotationName() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/javaClassWithEmptyAnnotationName.kt");
      }

      @Test
      @TestMetadata("kt42346.kt")
      public void testKt42346() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/kt42346.kt");
      }

      @Test
      @TestMetadata("questionableSmartCast.kt")
      public void testQuestionableSmartCast() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/questionableSmartCast.kt");
      }

      @Test
      @TestMetadata("recursiveNamedAnnotation.kt")
      public void testRecursiveNamedAnnotation() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/recursiveNamedAnnotation.kt");
      }

      @Test
      @TestMetadata("safeCallInvoke.kt")
      public void testSafeCallInvoke() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/safeCallInvoke.kt");
      }

      @Test
      @TestMetadata("symbolsAndDescriptors.kt")
      public void testSymbolsAndDescriptors() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/symbolsAndDescriptors.kt");
      }

      @Test
      @TestMetadata("transform.kt")
      public void testTransform() {
        runTest("compiler/fir/analysis-tests/testData/resolve/problems/transform.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties {
      @Test
      @TestMetadata("getterWithEarlyReturn.kt")
      public void testGetterWithEarlyReturn() {
        runTest("compiler/fir/analysis-tests/testData/resolve/properties/getterWithEarlyReturn.kt");
      }

      @Test
      @TestMetadata("lazyValWithElvisToNothingInside.kt")
      public void testLazyValWithElvisToNothingInside() {
        runTest("compiler/fir/analysis-tests/testData/resolve/properties/lazyValWithElvisToNothingInside.kt");
      }

      @Test
      @TestMetadata("noBackingFieldForExtension.kt")
      public void testNoBackingFieldForExtension() {
        runTest("compiler/fir/analysis-tests/testData/resolve/properties/noBackingFieldForExtension.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/propertyVsField")
    @TestDataPath("$PROJECT_ROOT")
    public class PropertyVsField {
      @Test
      @TestMetadata("fieldPropertyShadow.kt")
      public void testFieldPropertyShadow() {
        runTest("compiler/fir/analysis-tests/testData/resolve/propertyVsField/fieldPropertyShadow.kt");
      }

      @Test
      @TestMetadata("javaFieldAndKotlinPropertyReferenceFromInner.kt")
      public void testJavaFieldAndKotlinPropertyReferenceFromInner() {
        runTest("compiler/fir/analysis-tests/testData/resolve/propertyVsField/javaFieldAndKotlinPropertyReferenceFromInner.kt");
      }

      @Test
      @TestMetadata("propertyAndTwoFields.kt")
      public void testPropertyAndTwoFields() {
        runTest("compiler/fir/analysis-tests/testData/resolve/propertyVsField/propertyAndTwoFields.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/references")
    @TestDataPath("$PROJECT_ROOT")
    public class References {
      @Test
      @TestMetadata("integerLiteralInLhs.kt")
      public void testIntegerLiteralInLhs() {
        runTest("compiler/fir/analysis-tests/testData/resolve/references/integerLiteralInLhs.kt");
      }

      @Test
      @TestMetadata("mutablePropertyGenericButNotCapturedType.kt")
      public void testMutablePropertyGenericButNotCapturedType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/references/mutablePropertyGenericButNotCapturedType.kt");
      }

      @Test
      @TestMetadata("mutablePropertyWithCapturedType.kt")
      public void testMutablePropertyWithCapturedType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/references/mutablePropertyWithCapturedType.kt");
      }

      @Test
      @TestMetadata("referenceToSyntheticJavaPropertyWithProjection.kt")
      public void testReferenceToSyntheticJavaPropertyWithProjection() {
        runTest("compiler/fir/analysis-tests/testData/resolve/references/referenceToSyntheticJavaPropertyWithProjection.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/fir/analysis-tests/testData/resolve/references/simple.kt");
      }

      @Test
      @TestMetadata("superMember.kt")
      public void testSuperMember() {
        runTest("compiler/fir/analysis-tests/testData/resolve/references/superMember.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/samConstructors")
    @TestDataPath("$PROJECT_ROOT")
    public class SamConstructors {
      @Test
      @TestMetadata("funInterfaceConstructorReference.kt")
      public void testFunInterfaceConstructorReference() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConstructors/funInterfaceConstructorReference.kt");
      }

      @Test
      @TestMetadata("kotlinSam.kt")
      public void testKotlinSam() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConstructors/kotlinSam.kt");
      }

      @Test
      @TestMetadata("runnable.kt")
      public void testRunnable() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConstructors/runnable.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConstructors/simple.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/samConversions")
    @TestDataPath("$PROJECT_ROOT")
    public class SamConversions {
      @Test
      @TestMetadata("nothingVararg.kt")
      public void testNothingVararg() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConversions/nothingVararg.kt");
      }

      @Test
      @TestMetadata("runnable.kt")
      public void testRunnable() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConversions/runnable.kt");
      }

      @Test
      @TestMetadata("samConversionInConstructorCall.kt")
      public void testSamConversionInConstructorCall() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConversions/samConversionInConstructorCall.kt");
      }

      @Test
      @TestMetadata("samSupertype.kt")
      public void testSamSupertype() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConversions/samSupertype.kt");
      }

      @Test
      @TestMetadata("samSupertypeWithOverride.kt")
      public void testSamSupertypeWithOverride() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConversions/samSupertypeWithOverride.kt");
      }

      @Test
      @TestMetadata("samVsLambda.kt")
      public void testSamVsLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConversions/samVsLambda.kt");
      }

      @Test
      @TestMetadata("samWithEquals.kt")
      public void testSamWithEquals() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConversions/samWithEquals.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/fir/analysis-tests/testData/resolve/samConversions/simple.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/scopes")
    @TestDataPath("$PROJECT_ROOT")
    public class Scopes {
      @Test
      @TestMetadata("delegatedDataClass.kt")
      public void testDelegatedDataClass() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/delegatedDataClass.kt");
      }

      @Test
      @TestMetadata("explicitOverrideOfTwoMembers.kt")
      public void testExplicitOverrideOfTwoMembers() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/explicitOverrideOfTwoMembers.kt");
      }

      @Test
      @TestMetadata("explicitOverrideOfTwoMembers_java.kt")
      public void testExplicitOverrideOfTwoMembers_java() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/explicitOverrideOfTwoMembers_java.kt");
      }

      @Test
      @TestMetadata("getterOverrideAndKotlinProperty.kt")
      public void testGetterOverrideAndKotlinProperty() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/getterOverrideAndKotlinProperty.kt");
      }

      @Test
      @TestMetadata("intersectionOverrideOfTwoMembers.kt")
      public void testIntersectionOverrideOfTwoMembers() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/intersectionOverrideOfTwoMembers.kt");
      }

      @Test
      @TestMetadata("intersectionOverrideOfTwoMembers_java.kt")
      public void testIntersectionOverrideOfTwoMembers_java() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/intersectionOverrideOfTwoMembers_java.kt");
      }

      @Test
      @TestMetadata("javaFunctionAndKotlinPropertyFromDifferentSupertypes.kt")
      public void testJavaFunctionAndKotlinPropertyFromDifferentSupertypes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/javaFunctionAndKotlinPropertyFromDifferentSupertypes.kt");
      }

      @Test
      @TestMetadata("noIntersectionOverrideOfTwoMembers.kt")
      public void testNoIntersectionOverrideOfTwoMembers() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/noIntersectionOverrideOfTwoMembers.kt");
      }

      @Test
      @TestMetadata("noIntersectionOverrideOfTwoMembers_java.kt")
      public void testNoIntersectionOverrideOfTwoMembers_java() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/noIntersectionOverrideOfTwoMembers_java.kt");
      }

      @Test
      @TestMetadata("publicJavaAndPrivateKotlinVar.kt")
      public void testPublicJavaAndPrivateKotlinVar() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/publicJavaAndPrivateKotlinVar.kt");
      }

      @Test
      @TestMetadata("singleIntersectionOverride.kt")
      public void testSingleIntersectionOverride() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/singleIntersectionOverride.kt");
      }

      @Test
      @TestMetadata("specialFunctionInJava_3.kt")
      public void testSpecialFunctionInJava_3() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/specialFunctionInJava_3.kt");
      }

      @Test
      @TestMetadata("specialFunctionInJava_4.kt")
      public void testSpecialFunctionInJava_4() {
        runTest("compiler/fir/analysis-tests/testData/resolve/scopes/specialFunctionInJava_4.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts")
    @TestDataPath("$PROJECT_ROOT")
    public class Smartcasts {
      @Test
      @TestMetadata("incorrectSmartcastToNothing.kt")
      public void testIncorrectSmartcastToNothing() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/incorrectSmartcastToNothing.kt");
      }

      @Test
      @TestMetadata("kt10240.kt")
      public void testKt10240() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/kt10240.kt");
      }

      @Test
      @TestMetadata("kt37327.kt")
      public void testKt37327() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/kt37327.kt");
      }

      @Test
      @TestMetadata("kt39000.kt")
      public void testKt39000() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/kt39000.kt");
      }

      @Test
      @TestMetadata("kt50788.kt")
      public void testKt50788() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/kt50788.kt");
      }

      @Test
      @TestMetadata("literalInWhenSubject.kt")
      public void testLiteralInWhenSubject() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/literalInWhenSubject.kt");
      }

      @Test
      @TestMetadata("longElvisChain.kt")
      public void testLongElvisChain() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/longElvisChain.kt");
      }

      @Test
      @TestMetadata("multipleCasts.kt")
      public void testMultipleCasts() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/multipleCasts.kt");
      }

      @Test
      @TestMetadata("smartCastInInit.kt")
      public void testSmartCastInInit() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/smartCastInInit.kt");
      }

      @Test
      @TestMetadata("smartcastInByClause.kt")
      public void testSmartcastInByClause() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastInByClause.kt");
      }

      @Test
      @TestMetadata("smartcastOnFunctionalType.kt")
      public void testSmartcastOnFunctionalType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastOnFunctionalType.kt");
      }

      @Test
      @TestMetadata("smartcastOnImplicitReceiverOfCallableReference.kt")
      public void testSmartcastOnImplicitReceiverOfCallableReference() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastOnImplicitReceiverOfCallableReference.kt");
      }

      @Test
      @TestMetadata("smartcastToStarProjectedType.kt")
      public void testSmartcastToStarProjectedType() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastToStarProjectedType.kt");
      }

      @Test
      @TestMetadata("smartcastToTypeParameter.kt")
      public void testSmartcastToTypeParameter() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastToTypeParameter.kt");
      }

      @Test
      @TestMetadata("smartcastedField.kt")
      public void testSmartcastedField() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastedField.kt");
      }

      @Test
      @TestMetadata("typeOfLambdaWithSmartcast.kt")
      public void testTypeOfLambdaWithSmartcast() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/typeOfLambdaWithSmartcast.kt");
      }

      @Test
      @TestMetadata("unstableSmartcastAndAmbiguity.kt")
      public void testUnstableSmartcastAndAmbiguity() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/unstableSmartcastAndAmbiguity.kt");
      }

      @Test
      @TestMetadata("valCapturedInLambda.kt")
      public void testValCapturedInLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/valCapturedInLambda.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/boundSmartcasts")
      @TestDataPath("$PROJECT_ROOT")
      public class BoundSmartcasts {
        @Test
        @TestMetadata("boundSmartcastWithProjection.kt")
        public void testBoundSmartcastWithProjection() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/boundSmartcasts/boundSmartcastWithProjection.kt");
        }

        @Test
        @TestMetadata("functionCallBound.kt")
        public void testFunctionCallBound() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/boundSmartcasts/functionCallBound.kt");
        }

        @Test
        @TestMetadata("thisAssignment.kt")
        public void testThisAssignment() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/boundSmartcasts/thisAssignment.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures")
      @TestDataPath("$PROJECT_ROOT")
      public class ControlStructures {
        @Test
        @TestMetadata("earlyReturnInNonExhaustiveWhen.kt")
        public void testEarlyReturnInNonExhaustiveWhen() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures/earlyReturnInNonExhaustiveWhen.kt");
        }

        @Test
        @TestMetadata("elvis.kt")
        public void testElvis() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures/elvis.kt");
        }

        @Test
        @TestMetadata("returnFromWhen.kt")
        public void testReturnFromWhen() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures/returnFromWhen.kt");
        }

        @Test
        @TestMetadata("smartcastFromArgument.kt")
        public void testSmartcastFromArgument() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures/smartcastFromArgument.kt");
        }

        @Test
        @TestMetadata("when.kt")
        public void testWhen() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures/when.kt");
        }

        @Test
        @TestMetadata("whenSubjectExpression.kt")
        public void testWhenSubjectExpression() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures/whenSubjectExpression.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/lambdas")
      @TestDataPath("$PROJECT_ROOT")
      public class Lambdas {
        @Test
        @TestMetadata("smartcastOnLambda.kt")
        public void testSmartcastOnLambda() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/lambdas/smartcastOnLambda.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/loops")
      @TestDataPath("$PROJECT_ROOT")
      public class Loops {
        @Test
        @TestMetadata("dataFlowInfoFromWhileCondition.kt")
        public void testDataFlowInfoFromWhileCondition() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/loops/dataFlowInfoFromWhileCondition.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/problems")
      @TestDataPath("$PROJECT_ROOT")
      public class Problems {
        @Test
        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/problems/invoke.kt");
        }

        @Test
        @TestMetadata("smartcastToStarProjectedSubclass.kt")
        public void testSmartcastToStarProjectedSubclass() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/problems/smartcastToStarProjectedSubclass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/receivers")
      @TestDataPath("$PROJECT_ROOT")
      public class Receivers {
        @Test
        @TestMetadata("implicitReceiverAsWhenSubject.kt")
        public void testImplicitReceiverAsWhenSubject() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/receivers/implicitReceiverAsWhenSubject.kt");
        }

        @Test
        @TestMetadata("smartCastingExplicitReceiver.kt")
        public void testSmartCastingExplicitReceiver() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/receivers/smartCastingExplicitReceiver.kt");
        }

        @Test
        @TestMetadata("thisOfExtensionProperty.kt")
        public void testThisOfExtensionProperty() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/receivers/thisOfExtensionProperty.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/safeCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class SafeCalls {
        @Test
        @TestMetadata("boundSafeCallAndIsCheck.kt")
        public void testBoundSafeCallAndIsCheck() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/safeCalls/boundSafeCallAndIsCheck.kt");
        }

        @Test
        @TestMetadata("complexIfWithOr.kt")
        public void testComplexIfWithOr() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/safeCalls/complexIfWithOr.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/stability")
      @TestDataPath("$PROJECT_ROOT")
      public class Stability {
        @Test
        @TestMetadata("overridenOpenVal.kt")
        public void testOverridenOpenVal() {
          runTest("compiler/fir/analysis-tests/testData/resolve/smartcasts/stability/overridenOpenVal.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/stdlib")
    @TestDataPath("$PROJECT_ROOT")
    public class Stdlib {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/stdlib/j+k")
      @TestDataPath("$PROJECT_ROOT")
      public class J_k {
        @Test
        @TestMetadata("ArrayInGenericArguments.kt")
        public void testArrayInGenericArguments() {
          runTest("compiler/fir/analysis-tests/testData/resolve/stdlib/j+k/ArrayInGenericArguments.kt");
        }

        @Test
        @TestMetadata("flexibleWildcard.kt")
        public void testFlexibleWildcard() {
          runTest("compiler/fir/analysis-tests/testData/resolve/stdlib/j+k/flexibleWildcard.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/suppress")
    @TestDataPath("$PROJECT_ROOT")
    public class Suppress {
      @Test
      @TestMetadata("allWarnings.kt")
      public void testAllWarnings() {
        runTest("compiler/fir/analysis-tests/testData/resolve/suppress/allWarnings.kt");
      }

      @Test
      @TestMetadata("multipleWarnings.kt")
      public void testMultipleWarnings() {
        runTest("compiler/fir/analysis-tests/testData/resolve/suppress/multipleWarnings.kt");
      }

      @Test
      @TestMetadata("singleError.kt")
      public void testSingleError() {
        runTest("compiler/fir/analysis-tests/testData/resolve/suppress/singleError.kt");
      }

      @Test
      @TestMetadata("singleWarning.kt")
      public void testSingleWarning() {
        runTest("compiler/fir/analysis-tests/testData/resolve/suppress/singleWarning.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/typeParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeParameters {
      @Test
      @TestMetadata("kt38288.kt")
      public void testKt38288() {
        runTest("compiler/fir/analysis-tests/testData/resolve/typeParameters/kt38288.kt");
      }

      @Test
      @TestMetadata("starProjectionForMultipleBounds.kt")
      public void testStarProjectionForMultipleBounds() {
        runTest("compiler/fir/analysis-tests/testData/resolve/typeParameters/starProjectionForMultipleBounds.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/types")
    @TestDataPath("$PROJECT_ROOT")
    public class Types {
      @Test
      @TestMetadata("bareWithDnnArg.kt")
      public void testBareWithDnnArg() {
        runTest("compiler/fir/analysis-tests/testData/resolve/types/bareWithDnnArg.kt");
      }

      @Test
      @TestMetadata("bareWithFlexibleArg.kt")
      public void testBareWithFlexibleArg() {
        runTest("compiler/fir/analysis-tests/testData/resolve/types/bareWithFlexibleArg.kt");
      }

      @Test
      @TestMetadata("typeAliasInArguments.kt")
      public void testTypeAliasInArguments() {
        runTest("compiler/fir/analysis-tests/testData/resolve/types/typeAliasInArguments.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum")
    @TestDataPath("$PROJECT_ROOT")
    public class UnqualifiedEnum {
      @Test
      @TestMetadata("correctJava.kt")
      public void testCorrectJava() {
        runTest("compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum/correctJava.kt");
      }

      @Test
      @TestMetadata("nested.kt")
      public void testNested() {
        runTest("compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum/nested.kt");
      }

      @Test
      @TestMetadata("typeAlias.kt")
      public void testTypeAlias() {
        runTest("compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum/typeAlias.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/vfir")
    @TestDataPath("$PROJECT_ROOT")
    public class Vfir {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/vfir/expressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Expressions {
        @Test
        @TestMetadata("for.kt")
        public void testFor() {
          runTest("compiler/fir/analysis-tests/testData/resolve/vfir/expressions/for.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/visibility")
    @TestDataPath("$PROJECT_ROOT")
    public class Visibility {
      @Test
      @TestMetadata("intersectionOverrideWithImplicitTypes.kt")
      public void testIntersectionOverrideWithImplicitTypes() {
        runTest("compiler/fir/analysis-tests/testData/resolve/visibility/intersectionOverrideWithImplicitTypes.kt");
      }

      @Test
      @TestMetadata("kotlinJavaKotlinHierarchy.kt")
      public void testKotlinJavaKotlinHierarchy() {
        runTest("compiler/fir/analysis-tests/testData/resolve/visibility/kotlinJavaKotlinHierarchy.kt");
      }

      @Test
      @TestMetadata("privateAliasInSamePackage.kt")
      public void testPrivateAliasInSamePackage() {
        runTest("compiler/fir/analysis-tests/testData/resolve/visibility/privateAliasInSamePackage.kt");
      }

      @Test
      @TestMetadata("protectedAnnotationClassFromJava.kt")
      public void testProtectedAnnotationClassFromJava() {
        runTest("compiler/fir/analysis-tests/testData/resolve/visibility/protectedAnnotationClassFromJava.kt");
      }

      @Test
      @TestMetadata("superAccessToJavaField.kt")
      public void testSuperAccessToJavaField() {
        runTest("compiler/fir/analysis-tests/testData/resolve/visibility/superAccessToJavaField.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib")
  @TestDataPath("$PROJECT_ROOT")
  public class ResolveWithStdlib {
    @Test
    @TestMetadata("addAllOnJavaCollection.kt")
    public void testAddAllOnJavaCollection() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/addAllOnJavaCollection.kt");
    }

    @Test
    @TestMetadata("arrayFilterCapturedType.kt")
    public void testArrayFilterCapturedType() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/arrayFilterCapturedType.kt");
    }

    @Test
    @TestMetadata("arrayFirstOrNull.kt")
    public void testArrayFirstOrNull() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/arrayFirstOrNull.kt");
    }

    @Test
    @TestMetadata("arrayInLocal.kt")
    public void testArrayInLocal() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/arrayInLocal.kt");
    }

    @Test
    @TestMetadata("backingField.kt")
    public void testBackingField() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/backingField.kt");
    }

    @Test
    @TestMetadata("castForFunctionsWithDifferentArities.kt")
    public void testCastForFunctionsWithDifferentArities() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/castForFunctionsWithDifferentArities.kt");
    }

    @Test
    @TestMetadata("classLiteralForParameter.kt")
    public void testClassLiteralForParameter() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/classLiteralForParameter.kt");
    }

    @Test
    @TestMetadata("cloneArray.kt")
    public void testCloneArray() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/cloneArray.kt");
    }

    @Test
    @TestMetadata("companionLoad.kt")
    public void testCompanionLoad() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/companionLoad.kt");
    }

    @Test
    @TestMetadata("complexPostponedCfg.kt")
    public void testComplexPostponedCfg() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/complexPostponedCfg.kt");
    }

    @Test
    @TestMetadata("components.kt")
    public void testComponents() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/components.kt");
    }

    @Test
    @TestMetadata("concurrent.kt")
    public void testConcurrent() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/concurrent.kt");
    }

    @Test
    @TestMetadata("concurrentMapOfAliases.kt")
    public void testConcurrentMapOfAliases() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/concurrentMapOfAliases.kt");
    }

    @Test
    @TestMetadata("emptyArray.kt")
    public void testEmptyArray() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/emptyArray.kt");
    }

    @Test
    @TestMetadata("enumValuesDeserialized.kt")
    public void testEnumValuesDeserialized() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/enumValuesDeserialized.kt");
    }

    @Test
    @TestMetadata("exception.kt")
    public void testException() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/exception.kt");
    }

    @Test
    @TestMetadata("factoryFunctionOverloads.kt")
    public void testFactoryFunctionOverloads() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/factoryFunctionOverloads.kt");
    }

    @Test
    @TestMetadata("fillInStackTrace.kt")
    public void testFillInStackTrace() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/fillInStackTrace.kt");
    }

    @Test
    @TestMetadata("functionAndFunctionN.kt")
    public void testFunctionAndFunctionN() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/functionAndFunctionN.kt");
    }

    @Test
    @TestMetadata("getOnKProperty.kt")
    public void testGetOnKProperty() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/getOnKProperty.kt");
    }

    @Test
    @TestMetadata("getOrPutAmbiguity.kt")
    public void testGetOrPutAmbiguity() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/getOrPutAmbiguity.kt");
    }

    @Test
    @TestMetadata("hashMapTypeAlias.kt")
    public void testHashMapTypeAlias() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/hashMapTypeAlias.kt");
    }

    @Test
    @TestMetadata("hashSet.kt")
    public void testHashSet() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/hashSet.kt");
    }

    @Test
    @TestMetadata("hashTableWithForEach.kt")
    public void testHashTableWithForEach() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/hashTableWithForEach.kt");
    }

    @Test
    @TestMetadata("helloWorld.kt")
    public void testHelloWorld() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/helloWorld.kt");
    }

    @Test
    @TestMetadata("implicitReceiverOrder.kt")
    public void testImplicitReceiverOrder() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/implicitReceiverOrder.kt");
    }

    @Test
    @TestMetadata("inapplicableRemoveAll.kt")
    public void testInapplicableRemoveAll() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inapplicableRemoveAll.kt");
    }

    @Test
    @TestMetadata("intersectRawAndMutable.kt")
    public void testIntersectRawAndMutable() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intersectRawAndMutable.kt");
    }

    @Test
    @TestMetadata("javaEnumSynthetic.kt")
    public void testJavaEnumSynthetic() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/javaEnumSynthetic.kt");
    }

    @Test
    @TestMetadata("javaLangComparator.kt")
    public void testJavaLangComparator() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/javaLangComparator.kt");
    }

    @Test
    @TestMetadata("kotlinComparatorAlias.kt")
    public void testKotlinComparatorAlias() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/kotlinComparatorAlias.kt");
    }

    @Test
    @TestMetadata("lowPriorityInResolution.kt")
    public void testLowPriorityInResolution() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/lowPriorityInResolution.kt");
    }

    @Test
    @TestMetadata("mapList.kt")
    public void testMapList() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/mapList.kt");
    }

    @Test
    @TestMetadata("multipleImplicitReceivers.kt")
    public void testMultipleImplicitReceivers() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/multipleImplicitReceivers.kt");
    }

    @Test
    @TestMetadata("noneWithForEach.kt")
    public void testNoneWithForEach() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/noneWithForEach.kt");
    }

    @Test
    @TestMetadata("nullableTypeParameter.kt")
    public void testNullableTypeParameter() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/nullableTypeParameter.kt");
    }

    @Test
    @TestMetadata("plusAssignNullable.kt")
    public void testPlusAssignNullable() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/plusAssignNullable.kt");
    }

    @Test
    @TestMetadata("rangeTo.kt")
    public void testRangeTo() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/rangeTo.kt");
    }

    @Test
    @TestMetadata("recursiveBug.kt")
    public void testRecursiveBug() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/recursiveBug.kt");
    }

    @Test
    @TestMetadata("reflectionClass.kt")
    public void testReflectionClass() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/reflectionClass.kt");
    }

    @Test
    @TestMetadata("removeIf.kt")
    public void testRemoveIf() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/removeIf.kt");
    }

    @Test
    @TestMetadata("removeOnAbstractMap.kt")
    public void testRemoveOnAbstractMap() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/removeOnAbstractMap.kt");
    }

    @Test
    @TestMetadata("runOnIntegerLiteral.kt")
    public void testRunOnIntegerLiteral() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/runOnIntegerLiteral.kt");
    }

    @Test
    @TestMetadata("samForComparator.kt")
    public void testSamForComparator() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/samForComparator.kt");
    }

    @Test
    @TestMetadata("simpleLazy.kt")
    public void testSimpleLazy() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/simpleLazy.kt");
    }

    @Test
    @TestMetadata("stringConstructors.kt")
    public void testStringConstructors() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/stringConstructors.kt");
    }

    @Test
    @TestMetadata("toSortedMapWithComparator.kt")
    public void testToSortedMapWithComparator() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/toSortedMapWithComparator.kt");
    }

    @Test
    @TestMetadata("typeAliasDeserialization.kt")
    public void testTypeAliasDeserialization() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/typeAliasDeserialization.kt");
    }

    @Test
    @TestMetadata("typeAliasWithForEach.kt")
    public void testTypeAliasWithForEach() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/typeAliasWithForEach.kt");
    }

    @Test
    @TestMetadata("typeParameterDerived.kt")
    public void testTypeParameterDerived() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/typeParameterDerived.kt");
    }

    @Test
    @TestMetadata("unaryOperators.kt")
    public void testUnaryOperators() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/unaryOperators.kt");
    }

    @Test
    @TestMetadata("whenAsLambdaReturnStatement.kt")
    public void testWhenAsLambdaReturnStatement() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/whenAsLambdaReturnStatement.kt");
    }

    @Test
    @TestMetadata("withInInitializer.kt")
    public void testWithInInitializer() {
      runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/withInInitializer.kt");
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Test
      @TestMetadata("annotationUseSites.kt")
      public void testAnnotationUseSites() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/annotations/annotationUseSites.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences")
    @TestDataPath("$PROJECT_ROOT")
    public class CallableReferences {
      @Test
      @TestMetadata("coercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/coercionToUnit.kt");
      }

      @Test
      @TestMetadata("constructors.kt")
      public void testConstructors() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/constructors.kt");
      }

      @Test
      @TestMetadata("differentLevels.kt")
      public void testDifferentLevels() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/differentLevels.kt");
      }

      @Test
      @TestMetadata("extensionReceiverInference.kt")
      public void testExtensionReceiverInference() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/extensionReceiverInference.kt");
      }

      @Test
      @TestMetadata("genericInReceiver.kt")
      public void testGenericInReceiver() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/genericInReceiver.kt");
      }

      @Test
      @TestMetadata("inferenceFromCallableReferenceType.kt")
      public void testInferenceFromCallableReferenceType() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/inferenceFromCallableReferenceType.kt");
      }

      @Test
      @TestMetadata("inferenceFromExpectedType.kt")
      public void testInferenceFromExpectedType() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/inferenceFromExpectedType.kt");
      }

      @Test
      @TestMetadata("manyCandidatesInference.kt")
      public void testManyCandidatesInference() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/manyCandidatesInference.kt");
      }

      @Test
      @TestMetadata("manyInnerCandidates.kt")
      public void testManyInnerCandidates() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/manyInnerCandidates.kt");
      }

      @Test
      @TestMetadata("manyInnerManyOuterCandidates.kt")
      public void testManyInnerManyOuterCandidates() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/manyInnerManyOuterCandidates.kt");
      }

      @Test
      @TestMetadata("manyOuterCandidates.kt")
      public void testManyOuterCandidates() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/manyOuterCandidates.kt");
      }

      @Test
      @TestMetadata("properties.kt")
      public void testProperties() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/properties.kt");
      }

      @Test
      @TestMetadata("varProperties.kt")
      public void testVarProperties() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/varProperties.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests")
      @TestDataPath("$PROJECT_ROOT")
      public class FromBasicDiagnosticTests {
        @Test
        @TestMetadata("applicableCallableReferenceFromDistantScope.kt")
        public void testApplicableCallableReferenceFromDistantScope() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/applicableCallableReferenceFromDistantScope.kt");
        }

        @Test
        @TestMetadata("commonSupertypeFromReturnTypesOfCallableReference.kt")
        public void testCommonSupertypeFromReturnTypesOfCallableReference() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/commonSupertypeFromReturnTypesOfCallableReference.kt");
        }

        @Test
        @TestMetadata("eagerResolveOfSingleCallableReference.kt")
        public void testEagerResolveOfSingleCallableReference() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/eagerResolveOfSingleCallableReference.kt");
        }

        @Test
        @TestMetadata("multipleOutersAndMultipleCallableReferences.kt")
        public void testMultipleOutersAndMultipleCallableReferences() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/multipleOutersAndMultipleCallableReferences.kt");
        }

        @Test
        @TestMetadata("noAmbiguityBetweenTopLevelAndMemberProperty.kt")
        public void testNoAmbiguityBetweenTopLevelAndMemberProperty() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/noAmbiguityBetweenTopLevelAndMemberProperty.kt");
        }

        @Test
        @TestMetadata("overloadsBound.kt")
        public void testOverloadsBound() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/overloadsBound.kt");
        }

        @Test
        @TestMetadata("postponedResolveOfManyCallableReference.kt")
        public void testPostponedResolveOfManyCallableReference() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/postponedResolveOfManyCallableReference.kt");
        }

        @Test
        @TestMetadata("withGenericFun.kt")
        public void testWithGenericFun() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/withGenericFun.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromLibrary")
      @TestDataPath("$PROJECT_ROOT")
      public class FromLibrary {
        @Test
        @TestMetadata("callsInPlace.kt")
        public void testCallsInPlace() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromLibrary/callsInPlace.kt");
        }

        @Test
        @TestMetadata("suspendCallsInPlace.kt")
        public void testSuspendCallsInPlace() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromLibrary/suspendCallsInPlace.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource")
      @TestDataPath("$PROJECT_ROOT")
      public class FromSource {
        @Nested
        @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad")
        @TestDataPath("$PROJECT_ROOT")
        public class Bad {
          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace")
          @TestDataPath("$PROJECT_ROOT")
          public class CallsInPlace {
            @Test
            @TestMetadata("coercedInvocationKind.kt")
            public void testCoercedInvocationKind() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace/coercedInvocationKind.kt");
            }

            @Test
            @TestMetadata("inAnonymousObject.kt")
            public void testInAnonymousObject() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace/inAnonymousObject.kt");
            }

            @Test
            @TestMetadata("inLocalClass.kt")
            public void testInLocalClass() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace/inLocalClass.kt");
            }

            @Test
            @TestMetadata("inLocalFunction.kt")
            public void testInLocalFunction() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace/inLocalFunction.kt");
            }

            @Test
            @TestMetadata("toLocalVariables.kt")
            public void testToLocalVariables() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace/toLocalVariables.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/returnsImplies")
          @TestDataPath("$PROJECT_ROOT")
          public class ReturnsImplies {
            @Test
            @TestMetadata("notNull.kt")
            public void testNotNull() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/returnsImplies/notNull.kt");
            }

            @Test
            @TestMetadata("redundantConditions.kt")
            public void testRedundantConditions() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/returnsImplies/redundantConditions.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good")
        @TestDataPath("$PROJECT_ROOT")
        public class Good {
          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace")
          @TestDataPath("$PROJECT_ROOT")
          public class CallsInPlace {
            @Test
            @TestMetadata("contractsUsage.kt")
            public void testContractsUsage() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/contractsUsage.kt");
            }

            @Test
            @TestMetadata("exactlyOnce.kt")
            public void testExactlyOnce() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/exactlyOnce.kt");
            }

            @Test
            @TestMetadata("flow.kt")
            public void testFlow() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/flow.kt");
            }

            @Test
            @TestMetadata("inPlaceLambda.kt")
            public void testInPlaceLambda() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/inPlaceLambda.kt");
            }

            @Test
            @TestMetadata("infiniteLoop.kt")
            public void testInfiniteLoop() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/infiniteLoop.kt");
            }

            @Test
            @TestMetadata("namedArgument.kt")
            public void testNamedArgument() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/namedArgument.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/simple.kt");
            }

            @Test
            @TestMetadata("tryFinally.kt")
            public void testTryFinally() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/tryFinally.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies")
          @TestDataPath("$PROJECT_ROOT")
          public class ReturnsImplies {
            @Test
            @TestMetadata("conditionLogic.kt")
            public void testConditionLogic() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/conditionLogic.kt");
            }

            @Test
            @TestMetadata("inapplicable.kt")
            public void testInapplicable() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/inapplicable.kt");
            }

            @Test
            @TestMetadata("namedArguments.kt")
            public void testNamedArguments() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/namedArguments.kt");
            }

            @Test
            @TestMetadata("notNull.kt")
            public void testNotNull() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/notNull.kt");
            }

            @Test
            @TestMetadata("safeCall.kt")
            public void testSafeCall() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/safeCall.kt");
            }

            @Test
            @TestMetadata("trickyCases.kt")
            public void testTrickyCases() {
              runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/trickyCases.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/variousContracts")
          @TestDataPath("$PROJECT_ROOT")
          public class VariousContracts {
            @Nested
            @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/variousContracts/newSyntax")
            @TestDataPath("$PROJECT_ROOT")
            public class NewSyntax {
              @Test
              @TestMetadata("functionsWithContract.kt")
              public void testFunctionsWithContract() {
                runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/variousContracts/newSyntax/functionsWithContract.kt");
              }
            }
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates")
    @TestDataPath("$PROJECT_ROOT")
    public class Delegates {
      @Test
      @TestMetadata("annotationArgumentMapping.kt")
      public void testAnnotationArgumentMapping() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/annotationArgumentMapping.kt");
      }

      @Test
      @TestMetadata("anonymousInDelegate.kt")
      public void testAnonymousInDelegate() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/anonymousInDelegate.kt");
      }

      @Test
      @TestMetadata("delegateTypeMismatch.kt")
      public void testDelegateTypeMismatch() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/delegateTypeMismatch.kt");
      }

      @Test
      @TestMetadata("delegateWithAnonymousObject.kt")
      public void testDelegateWithAnonymousObject() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/delegateWithAnonymousObject.kt");
      }

      @Test
      @TestMetadata("getClassLet.kt")
      public void testGetClassLet() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/getClassLet.kt");
      }

      @Test
      @TestMetadata("kt41917.kt")
      public void testKt41917() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/kt41917.kt");
      }

      @Test
      @TestMetadata("mapValuesLazy.kt")
      public void testMapValuesLazy() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/mapValuesLazy.kt");
      }

      @Test
      @TestMetadata("nullableTypeDelegate.kt")
      public void testNullableTypeDelegate() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/nullableTypeDelegate.kt");
      }

      @Test
      @TestMetadata("propertyWithFunctionalType.kt")
      public void testPropertyWithFunctionalType() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/propertyWithFunctionalType.kt");
      }

      @Test
      @TestMetadata("sequentialLazy.kt")
      public void testSequentialLazy() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/sequentialLazy.kt");
      }

      @Test
      @TestMetadata("simpleDelegateProvider.kt")
      public void testSimpleDelegateProvider() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/simpleDelegateProvider.kt");
      }

      @Test
      @TestMetadata("simpleDelegatedToMap.kt")
      public void testSimpleDelegatedToMap() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/delegates/simpleDelegatedToMap.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    public class Diagnostics {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/diagnostics/initializerTypeMismatchChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class InitializerTypeMismatchChecker {
        @Test
        @TestMetadata("functionType.kt")
        public void testFunctionType() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/diagnostics/initializerTypeMismatchChecker/functionType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Test
      @TestMetadata("builderInferenceAndCoercionToUnit.kt")
      public void testBuilderInferenceAndCoercionToUnit() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/builderInferenceAndCoercionToUnit.kt");
      }

      @Test
      @TestMetadata("complexConstraintSystem.kt")
      public void testComplexConstraintSystem() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/complexConstraintSystem.kt");
      }

      @Test
      @TestMetadata("flexibleTypeInSystem.kt")
      public void testFlexibleTypeInSystem() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/flexibleTypeInSystem.kt");
      }

      @Test
      @TestMetadata("ifElvisReturn.kt")
      public void testIfElvisReturn() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/ifElvisReturn.kt");
      }

      @Test
      @TestMetadata("plusAssignWithLambdaInRhs.kt")
      public void testPlusAssignWithLambdaInRhs() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/plusAssignWithLambdaInRhs.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/problems")
      @TestDataPath("$PROJECT_ROOT")
      public class Problems {
        @Test
        @TestMetadata("buildList.kt")
        public void testBuildList() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/problems/buildList.kt");
        }

        @Test
        @TestMetadata("buildListLazy.kt")
        public void testBuildListLazy() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/problems/buildListLazy.kt");
        }

        @Test
        @TestMetadata("buildSetWithVisitor.kt")
        public void testBuildSetWithVisitor() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/problems/buildSetWithVisitor.kt");
        }

        @Test
        @TestMetadata("expectedType.kt")
        public void testExpectedType() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/problems/expectedType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij")
    @TestDataPath("$PROJECT_ROOT")
    public class Intellij {
      @Test
      @TestMetadata("accessInSetter.kt")
      public void testAccessInSetter() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/accessInSetter.kt");
      }

      @Test
      @TestMetadata("baseIntrospector.kt")
      public void testBaseIntrospector() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/baseIntrospector.kt");
      }

      @Test
      @TestMetadata("DailyAggregatedDoubleFactor.kt")
      public void testDailyAggregatedDoubleFactor() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/DailyAggregatedDoubleFactor.kt");
      }

      @Test
      @TestMetadata("defaultParameterFromBase.kt")
      public void testDefaultParameterFromBase() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/defaultParameterFromBase.kt");
      }

      @Test
      @TestMetadata("EnumWithToString.kt")
      public void testEnumWithToString() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/EnumWithToString.kt");
      }

      @Test
      @TestMetadata("hideBySeverity.kt")
      public void testHideBySeverity() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/hideBySeverity.kt");
      }

      @Test
      @TestMetadata("IntersectionWithJavaString.kt")
      public void testIntersectionWithJavaString() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/IntersectionWithJavaString.kt");
      }

      @Test
      @TestMetadata("ParentOfType.kt")
      public void testParentOfType() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/ParentOfType.kt");
      }

      @Test
      @TestMetadata("PersistentStateComponent.kt")
      public void testPersistentStateComponent() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/PersistentStateComponent.kt");
      }

      @Test
      @TestMetadata("typeAliasAmbiguity.kt")
      public void testTypeAliasAmbiguity() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/typeAliasAmbiguity.kt");
      }

      @Test
      @TestMetadata("UastPatterns.kt")
      public void testUastPatterns() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/UastPatterns.kt");
      }

      @Test
      @TestMetadata("WithSpeedSearch.kt")
      public void testWithSpeedSearch() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/WithSpeedSearch.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k")
    @TestDataPath("$PROJECT_ROOT")
    public class J_k {
      @Test
      @TestMetadata("BasicWithAnnotatedJava.kt")
      public void testBasicWithAnnotatedJava() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/BasicWithAnnotatedJava.kt");
      }

      @Test
      @TestMetadata("BasicWithAnnotatedOverriddenJava.kt")
      public void testBasicWithAnnotatedOverriddenJava() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/BasicWithAnnotatedOverriddenJava.kt");
      }

      @Test
      @TestMetadata("BasicWithJava.kt")
      public void testBasicWithJava() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/BasicWithJava.kt");
      }

      @Test
      @TestMetadata("BasicWithJavaFakeOverride.kt")
      public void testBasicWithJavaFakeOverride() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/BasicWithJavaFakeOverride.kt");
      }

      @Test
      @TestMetadata("BasicWithPrimitiveJava.kt")
      public void testBasicWithPrimitiveJava() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/BasicWithPrimitiveJava.kt");
      }

      @Test
      @TestMetadata("capturedFlexible.kt")
      public void testCapturedFlexible() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/capturedFlexible.kt");
      }

      @Test
      @TestMetadata("complexFlexibleInference.kt")
      public void testComplexFlexibleInference() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/complexFlexibleInference.kt");
      }

      @Test
      @TestMetadata("FieldAccessFromDerived.kt")
      public void testFieldAccessFromDerived() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/FieldAccessFromDerived.kt");
      }

      @Test
      @TestMetadata("FieldAndGetter.kt")
      public void testFieldAndGetter() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/FieldAndGetter.kt");
      }

      @Test
      @TestMetadata("fieldOverride.kt")
      public void testFieldOverride() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/fieldOverride.kt");
      }

      @Test
      @TestMetadata("FieldSubstitution.kt")
      public void testFieldSubstitution() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/FieldSubstitution.kt");
      }

      @Test
      @TestMetadata("FlexiblePrimitiveOverloading.kt")
      public void testFlexiblePrimitiveOverloading() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/FlexiblePrimitiveOverloading.kt");
      }

      @Test
      @TestMetadata("flexibleTypeAliases.kt")
      public void testFlexibleTypeAliases() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/flexibleTypeAliases.kt");
      }

      @Test
      @TestMetadata("FunctionTypeInJava.kt")
      public void testFunctionTypeInJava() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/FunctionTypeInJava.kt");
      }

      @Test
      @TestMetadata("IntersectionTypesProblem.kt")
      public void testIntersectionTypesProblem() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/IntersectionTypesProblem.kt");
      }

      @Test
      @TestMetadata("JavaGetPrefixConflict.kt")
      public void testJavaGetPrefixConflict() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/JavaGetPrefixConflict.kt");
      }

      @Test
      @TestMetadata("JavaInheritsKotlinDerived.kt")
      public void testJavaInheritsKotlinDerived() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/JavaInheritsKotlinDerived.kt");
      }

      @Test
      @TestMetadata("JavaInheritsKotlinExtension.kt")
      public void testJavaInheritsKotlinExtension() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/JavaInheritsKotlinExtension.kt");
      }

      @Test
      @TestMetadata("JavaInheritsKotlinProperty.kt")
      public void testJavaInheritsKotlinProperty() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/JavaInheritsKotlinProperty.kt");
      }

      @Test
      @TestMetadata("JavaInheritsRawKotlin.kt")
      public void testJavaInheritsRawKotlin() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/JavaInheritsRawKotlin.kt");
      }

      @Test
      @TestMetadata("JavaSyntheticProperty.kt")
      public void testJavaSyntheticProperty() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/JavaSyntheticProperty.kt");
      }

      @Test
      @TestMetadata("KJKComplexHierarchy.kt")
      public void testKJKComplexHierarchy() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/KJKComplexHierarchy.kt");
      }

      @Test
      @TestMetadata("KJKInheritance.kt")
      public void testKJKInheritance() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/KJKInheritance.kt");
      }

      @Test
      @TestMetadata("KJKInheritanceGeneric.kt")
      public void testKJKInheritanceGeneric() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/KJKInheritanceGeneric.kt");
      }

      @Test
      @TestMetadata("kt39076.kt")
      public void testKt39076() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/kt39076.kt");
      }

      @Test
      @TestMetadata("LoggerInstance.kt")
      public void testLoggerInstance() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/LoggerInstance.kt");
      }

      @Test
      @TestMetadata("MapCompute.kt")
      public void testMapCompute() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/MapCompute.kt");
      }

      @Test
      @TestMetadata("MapEntry.kt")
      public void testMapEntry() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/MapEntry.kt");
      }

      @Test
      @TestMetadata("mapMerge.kt")
      public void testMapMerge() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/mapMerge.kt");
      }

      @Test
      @TestMetadata("MyIterable.kt")
      public void testMyIterable() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/MyIterable.kt");
      }

      @Test
      @TestMetadata("MyMap.kt")
      public void testMyMap() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/MyMap.kt");
      }

      @Test
      @TestMetadata("outerInnerClasses.kt")
      public void testOuterInnerClasses() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/outerInnerClasses.kt");
      }

      @Test
      @TestMetadata("RawType.kt")
      public void testRawType() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/RawType.kt");
      }

      @Test
      @TestMetadata("serializableString.kt")
      public void testSerializableString() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/serializableString.kt");
      }

      @Test
      @TestMetadata("smartSet.kt")
      public void testSmartSet() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/smartSet.kt");
      }

      @Test
      @TestMetadata("StaticClassConstructorFromBaseClass.kt")
      public void testStaticClassConstructorFromBaseClass() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/StaticClassConstructorFromBaseClass.kt");
      }

      @Test
      @TestMetadata("StaticFromBaseClass.kt")
      public void testStaticFromBaseClass() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/StaticFromBaseClass.kt");
      }

      @Test
      @TestMetadata("StaticGenericMethod.kt")
      public void testStaticGenericMethod() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/StaticGenericMethod.kt");
      }

      @Test
      @TestMetadata("SyntheticAfterFiltering.kt")
      public void testSyntheticAfterFiltering() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/SyntheticAfterFiltering.kt");
      }

      @Test
      @TestMetadata("SyntheticWithForEach.kt")
      public void testSyntheticWithForEach() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/SyntheticWithForEach.kt");
      }

      @Test
      @TestMetadata("typeParameterUse.kt")
      public void testTypeParameterUse() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/typeParameterUse.kt");
      }

      @Test
      @TestMetadata("UsingObject.kt")
      public void testUsingObject() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/UsingObject.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/multiModule")
    @TestDataPath("$PROJECT_ROOT")
    public class MultiModule {
      @Test
      @TestMetadata("Basic.kt")
      public void testBasic() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/multiModule/Basic.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems")
    @TestDataPath("$PROJECT_ROOT")
    public class Problems {
      @Test
      @TestMetadata("AbstractToolConfig.kt")
      public void testAbstractToolConfig() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/AbstractToolConfig.kt");
      }

      @Test
      @TestMetadata("capturedTypeInEquality.kt")
      public void testCapturedTypeInEquality() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/capturedTypeInEquality.kt");
      }

      @Test
      @TestMetadata("classCastWithRawKotlinType.kt")
      public void testClassCastWithRawKotlinType() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/classCastWithRawKotlinType.kt");
      }

      @Test
      @TestMetadata("DeepCopyIrTree.kt")
      public void testDeepCopyIrTree() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/DeepCopyIrTree.kt");
      }

      @Test
      @TestMetadata("definitelyNotNullCast.kt")
      public void testDefinitelyNotNullCast() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/definitelyNotNullCast.kt");
      }

      @Test
      @TestMetadata("exceptionInRepeatedAnnotation.kt")
      public void testExceptionInRepeatedAnnotation() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/exceptionInRepeatedAnnotation.kt");
      }

      @Test
      @TestMetadata("falseSamConversion.kt")
      public void testFalseSamConversion() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/falseSamConversion.kt");
      }

      @Test
      @TestMetadata("FieldAnnotationWithClasses.kt")
      public void testFieldAnnotationWithClasses() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/FieldAnnotationWithClasses.kt");
      }

      @Test
      @TestMetadata("immutableName.kt")
      public void testImmutableName() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/immutableName.kt");
      }

      @Test
      @TestMetadata("invokePriority.kt")
      public void testInvokePriority() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/invokePriority.kt");
      }

      @Test
      @TestMetadata("isAncestor.kt")
      public void testIsAncestor() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/isAncestor.kt");
      }

      @Test
      @TestMetadata("localScopesInAnonymousObject.kt")
      public void testLocalScopesInAnonymousObject() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/localScopesInAnonymousObject.kt");
      }

      @Test
      @TestMetadata("malformedRawTypes.kt")
      public void testMalformedRawTypes() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/malformedRawTypes.kt");
      }

      @Test
      @TestMetadata("NamedParameterInConcurrentMap.kt")
      public void testNamedParameterInConcurrentMap() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/NamedParameterInConcurrentMap.kt");
      }

      @Test
      @TestMetadata("overriddenFunctionReturningUnit.kt")
      public void testOverriddenFunctionReturningUnit() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/overriddenFunctionReturningUnit.kt");
      }

      @Test
      @TestMetadata("overriddenFunctionReturningUnit2.kt")
      public void testOverriddenFunctionReturningUnit2() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/overriddenFunctionReturningUnit2.kt");
      }

      @Test
      @TestMetadata("receiverResolutionInLambda.kt")
      public void testReceiverResolutionInLambda() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/receiverResolutionInLambda.kt");
      }

      @Test
      @TestMetadata("resolveToLocalFromCallSite.kt")
      public void testResolveToLocalFromCallSite() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/resolveToLocalFromCallSite.kt");
      }

      @Test
      @TestMetadata("selfReferenceToCompanionObject.kt")
      public void testSelfReferenceToCompanionObject() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/selfReferenceToCompanionObject.kt");
      }

      @Test
      @TestMetadata("SpecialCallsWithLambdas.kt")
      public void testSpecialCallsWithLambdas() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/SpecialCallsWithLambdas.kt");
      }

      @Test
      @TestMetadata("TypesEligibleForSimpleVisit.kt")
      public void testTypesEligibleForSimpleVisit() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/TypesEligibleForSimpleVisit.kt");
      }

      @Test
      @TestMetadata("valueOfOrNull.kt")
      public void testValueOfOrNull() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/valueOfOrNull.kt");
      }

      @Test
      @TestMetadata("weakHashMap.kt")
      public void testWeakHashMap() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/weakHashMap.kt");
      }

      @Test
      @TestMetadata("WithValidityAssertion.kt")
      public void testWithValidityAssertion() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/WithValidityAssertion.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField")
      @TestDataPath("$PROJECT_ROOT")
      public class BackingField {
        @Test
        @TestMetadata("backingFieldWithSmartTypeParameters.kt")
        public void testBackingFieldWithSmartTypeParameters() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/backingFieldWithSmartTypeParameters.kt");
        }

        @Test
        @TestMetadata("filePrivateBackingFieldAccess.kt")
        public void testFilePrivateBackingFieldAccess() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/filePrivateBackingFieldAccess.kt");
        }

        @Test
        @TestMetadata("redundantExplicitBackingField.kt")
        public void testRedundantExplicitBackingField() {
          runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/redundantExplicitBackingField.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/reinitializations")
    @TestDataPath("$PROJECT_ROOT")
    public class Reinitializations {
      @Test
      @TestMetadata("constructorVarWrite.kt")
      public void testConstructorVarWrite() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/reinitializations/constructorVarWrite.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/smartcasts")
    @TestDataPath("$PROJECT_ROOT")
    public class Smartcasts {
      @Test
      @TestMetadata("assertIs.kt")
      public void testAssertIs() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/smartcasts/assertIs.kt");
      }

      @Test
      @TestMetadata("tryWithLambdaInside.kt")
      public void testTryWithLambdaInside() {
        runTest("compiler/fir/analysis-tests/testData/resolveWithStdlib/smartcasts/tryWithLambdaInside.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/fir/analysis-tests/testData/resolveFreezesIDE")
  @TestDataPath("$PROJECT_ROOT")
  public class ResolveFreezesIDE {
    @Test
    @TestMetadata("kt69995.nkt")
    public void testKt69995() {
      runTest("compiler/fir/analysis-tests/testData/resolveFreezesIDE/kt69995.nkt");
    }

    @Test
    @TestMetadata("manyCapturedTypes.nkt")
    public void testManyCapturedTypes() {
      runTest("compiler/fir/analysis-tests/testData/resolveFreezesIDE/manyCapturedTypes.nkt");
    }
  }
}
