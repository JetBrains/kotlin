RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class MyClass : Base<Base<Int>> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<Base<Int>>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] class MyClass : Base<Base<Int>> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<Base<Int>>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class MyClass : Base<Base<Int>> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<Base<Int>>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(COMPANION_GENERATION)] class MyClass : Base<Base<Int>> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<Base<Int>>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<R|second/Base<kotlin/Int>|>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(TYPES)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<R|second/Base<kotlin/Int>|>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(STATUS)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<R|second/Base<kotlin/Int>|>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<R|second/Base<kotlin/Int>|>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(CONTRACTS)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<R|second/Base<kotlin/Int>|>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<R|second/Base<kotlin/Int>|>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(CONSTANT_EVALUATION)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<R|second/Base<kotlin/Int>|>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            LAZY_super<Base<R|second/Base<kotlin/Int>|>>
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(STATUS)] class Base<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Base] constructor<[ResolvedTo(STATUS)] T>(): R|second/Base<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            super<R|second/Base<second/Base<kotlin/Int>>|>()
        }

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] superTypeCallNestedNameClash.kt
    public open [ResolvedTo(BODY_RESOLVE)] class Base<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Base] constructor<[ResolvedTo(BODY_RESOLVE)] T>(): R|second/Base<T>| {
            super<R|kotlin/Any|>()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
            super<R|second/Base<second/Base<kotlin/Int>>|>()
        }

        public open [ResolvedTo(BODY_RESOLVE)] class Base<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Base] constructor<[ResolvedTo(BODY_RESOLVE)] T>(): R|second/MyClass.Base<T>| {
                super<R|kotlin/Any|>()
            }

        }

    }
