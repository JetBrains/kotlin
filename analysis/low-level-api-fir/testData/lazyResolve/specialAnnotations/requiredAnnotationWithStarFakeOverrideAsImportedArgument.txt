RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](foo#) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](foo#) public final? [ResolvedTo(COMPANION_GENERATION)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](foo#) public final? [ResolvedTo(SUPER_TYPES)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[Types](foo#) public final? [ResolvedTo(TYPES)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[Types](foo#) public final [ResolvedTo(STATUS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[Types](foo#) public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[Types](foo#) public final [ResolvedTo(CONTRACTS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[Types](foo#) public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public final? [ResolvedTo(RAW_FIR)] interface MyInterface<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] val foo: T?
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyInterface] get(): T? { LAZY_BLOCK }

    }
    public final? [ResolvedTo(RAW_FIR)] object MyObject : MyInterface<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[Types](foo#) public final [ResolvedTo(CONSTANT_EVALUATION)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public abstract [ResolvedTo(STATUS)] interface MyInterface<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(CONTRACTS)] val foo: R|T?|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=MyInterface] get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] object MyObject : R|myPack/MyInterface<kotlin/Int>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|myPack/MyObject|.R|SubstitutionOverride<myPack/MyObject.foo: R|kotlin/Int?|>|)) public final [ResolvedTo(ANNOTATION_ARGUMENTS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public abstract [ResolvedTo(STATUS)] interface MyInterface<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public open [ResolvedTo(CONTRACTS)] val foo: R|T?|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=MyInterface] get(): R|T?| { LAZY_BLOCK }

    }
    public final [ResolvedTo(STATUS)] object MyObject : R|myPack/MyInterface<kotlin/Int>| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            LAZY_super<<implicit>>
        }

    }
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|myPack/MyObject|.R|SubstitutionOverride<myPack/MyObject.foo: R|kotlin/Int?|>|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            super<R|kotlin/Any|>()
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] requiredAnnotationWithStarFakeOverrideAsImportedArgument.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface MyInterface<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
        public open [ResolvedTo(BODY_RESOLVE)] val foo: R|T?|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyInterface] get(): R|T?| {
                ^ Null(null)
            }

    }
    public final [ResolvedTo(BODY_RESOLVE)] object MyObject : R|myPack/MyInterface<kotlin/Int>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyObject] constructor(): R|myPack/MyObject| {
            super<R|kotlin/Any|>()
        }

    }
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|myPack/MyObject|.R|SubstitutionOverride<myPack/MyObject.foo: R|kotlin/Int?|>|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyAnnotation] constructor(): R|myPack/MyAnnotation| {
            super<R|kotlin/Any|>()
        }

    }
