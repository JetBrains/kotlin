/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.kotlin.ide.konan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.jetbrains.kotlin.ide.konan.psi.NativeDefinitionsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>NativeDefinitions.flex</tt>
 */
class NativeDefinitionsLexer implements FlexLexer, NativeDefinitionsTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_PLATFORM = 2;
  public static final int WAITING_VALUE = 4;
  public static final int CODE_END = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 13296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\0\1\24\3\0\1\24\71\0\1\25\1\0\1\26\1\27\1\30"+
    "\1\31\2\27\16\0\1\32\1\20\1\33\1\34\2\0\1\35\11\0\1\36\21\0\1\35\1\37\23\0"+
    "\1\27\1\40\3\0\1\24\1\41\1\40\4\0\1\42\1\40\4\0\1\36\1\43\1\27\3\0\2\44\1"+
    "\27\1\30\1\45\1\0\1\44\11\0\1\25\14\0\1\46\1\36\1\0\1\47\1\0\1\50\1\27\1\42"+
    "\7\0\1\51\14\0\1\26\1\27\6\0\1\52\1\23\5\0\1\52\2\27\3\0\1\2\10\27\1\47\1"+
    "\30\6\27\1\53\2\0\1\24\14\0\1\54\1\0\2\40\1\55\1\50\1\56\2\0\1\47\1\57\1\60"+
    "\1\50\1\61\1\42\1\62\1\54\1\0\1\2\1\45\1\55\1\63\1\56\2\0\1\47\1\64\1\65\1"+
    "\63\1\66\1\41\1\67\1\70\1\0\1\52\1\27\1\55\1\36\1\35\2\0\1\47\1\71\1\60\1"+
    "\36\1\72\1\73\1\27\1\54\1\0\1\41\1\27\1\55\1\50\1\56\2\0\1\47\1\71\1\60\1"+
    "\50\1\66\1\70\1\62\1\54\1\0\1\41\1\27\1\74\1\75\1\76\1\77\1\100\1\75\1\0\1"+
    "\25\1\75\1\76\1\101\1\27\1\70\1\0\1\27\1\41\1\55\1\32\1\47\2\0\1\47\1\46\1"+
    "\102\1\32\1\76\1\103\1\26\1\54\1\0\2\27\1\74\1\32\1\47\2\0\1\47\1\46\1\60"+
    "\1\32\1\76\1\103\1\33\1\54\1\0\1\104\1\27\1\74\1\32\1\47\4\0\1\51\1\32\1\105"+
    "\1\42\1\27\1\54\1\0\1\27\1\37\1\74\1\0\1\24\1\37\2\0\1\35\1\106\1\24\1\107"+
    "\1\110\1\0\2\27\1\111\1\27\1\40\6\0\1\63\1\0\1\24\1\0\1\26\4\27\1\112\1\113"+
    "\1\53\1\40\1\114\1\74\1\0\1\72\1\110\1\52\1\0\1\60\4\27\1\73\2\27\1\26\1\0"+
    "\1\26\1\115\1\116\1\0\1\40\3\0\1\30\1\40\1\0\1\32\2\0\1\40\3\0\1\30\1\33\7"+
    "\27\11\0\1\26\11\0\1\52\4\0\1\36\1\22\5\0\1\117\51\0\1\76\1\24\1\76\5\0\1"+
    "\76\4\0\1\76\1\24\1\76\1\0\1\24\7\0\1\76\10\0\1\51\4\27\2\0\2\27\12\0\1\30"+
    "\1\27\1\40\114\0\1\50\2\0\1\40\2\0\1\44\11\0\1\75\1\73\1\27\1\0\1\32\1\30"+
    "\1\27\2\0\1\30\1\27\2\0\1\2\1\27\1\0\1\32\1\120\1\27\12\0\1\121\1\122\1\0"+
    "\1\26\3\27\1\122\1\0\1\26\13\0\1\27\5\0\1\44\10\0\1\52\1\27\3\0\1\30\1\0\1"+
    "\2\1\0\1\2\1\70\4\0\1\52\1\30\1\27\5\0\1\2\3\0\1\26\1\0\1\26\4\27\3\0\1\2"+
    "\7\0\1\24\3\0\1\50\1\0\1\26\1\0\1\26\1\42\13\27\11\0\1\2\1\0\1\26\1\27\1\123"+
    "\1\2\1\27\16\0\1\2\1\27\7\0\1\27\1\0\1\102\5\0\1\52\12\27\1\117\3\0\1\24\1"+
    "\27\34\0\1\24\2\27\1\53\42\0\2\52\4\0\2\52\1\0\1\124\3\0\1\52\6\0\1\32\1\110"+
    "\1\125\1\30\1\54\1\2\1\0\1\30\1\125\1\30\1\27\1\123\3\27\1\126\1\27\1\42\1"+
    "\73\1\27\1\127\1\27\1\30\1\37\1\41\1\42\2\27\1\0\1\30\3\0\1\44\2\27\1\0\1"+
    "\30\1\130\1\0\1\73\1\27\1\107\1\37\1\106\1\131\1\31\1\132\1\0\1\60\1\133\1"+
    "\134\2\27\5\0\1\73\116\27\5\0\1\24\5\0\1\24\20\0\1\30\1\123\1\2\1\27\4\0\1"+
    "\36\1\22\7\0\1\42\1\27\1\42\2\0\1\24\1\27\10\24\4\0\5\27\1\42\72\27\1\133"+
    "\3\27\1\40\1\0\1\131\1\30\1\40\11\0\1\24\1\135\1\40\12\0\1\117\1\133\4\0\1"+
    "\52\1\40\12\0\1\24\2\27\3\0\1\44\6\27\170\0\1\52\11\27\71\0\1\30\6\27\21\0"+
    "\1\30\10\27\5\0\1\52\41\0\1\30\3\0\1\2\2\27\6\0\1\53\1\36\3\0\1\42\12\0\1"+
    "\26\3\27\1\42\1\0\1\37\14\0\1\61\1\2\1\27\1\0\1\44\11\27\6\0\2\27\1\73\6\0"+
    "\1\2\1\27\10\0\1\30\1\27\1\0\1\26\3\0\1\45\5\0\1\52\4\0\1\2\1\27\3\0\1\30"+
    "\10\0\1\73\1\42\1\0\1\26\4\27\6\0\1\24\1\27\1\0\1\52\1\0\1\26\2\0\1\24\1\111"+
    "\10\0\1\44\2\27\1\122\2\0\1\136\1\27\3\137\1\27\2\24\22\27\5\0\1\140\1\0\1"+
    "\26\64\0\1\2\1\27\2\0\1\24\1\123\5\0\1\2\40\27\55\0\1\52\15\0\1\26\4\27\1"+
    "\24\1\27\1\123\1\133\1\0\1\47\1\24\1\110\1\141\15\0\1\26\3\27\1\123\54\0\1"+
    "\52\2\27\10\0\1\37\6\0\5\27\1\0\1\30\2\0\2\27\1\24\1\27\1\100\2\27\1\133\3"+
    "\27\1\41\1\32\20\0\1\50\1\127\1\27\1\0\1\26\1\40\2\0\1\63\1\40\2\0\1\44\1"+
    "\70\12\0\1\24\3\37\1\142\1\143\2\27\1\144\1\0\1\46\2\0\1\24\2\0\1\145\1\0"+
    "\1\52\1\0\1\52\4\27\17\0\1\44\10\27\6\0\1\30\20\27\1\22\20\27\3\0\1\30\6\0"+
    "\1\73\5\27\3\0\1\24\2\27\3\0\1\44\6\27\3\0\1\52\4\0\1\2\1\0\1\131\5\27\23"+
    "\0\1\52\1\0\1\26\52\27\1\52\1\47\4\0\1\36\1\146\2\0\1\52\25\27\2\0\1\52\1"+
    "\27\3\0\1\26\10\27\7\0\1\70\10\27\1\147\1\53\1\46\1\40\2\0\1\2\1\63\4\27\3"+
    "\0\1\30\20\27\6\0\1\52\1\27\2\0\1\52\1\27\2\0\1\44\21\27\11\0\1\73\66\27\10"+
    "\0\1\24\3\27\1\70\1\0\2\27\7\0\1\150\2\27\3\0\1\73\1\0\1\26\6\0\1\32\1\0\10"+
    "\27\10\0\1\30\1\27\1\0\1\26\24\27\7\0\1\27\1\0\1\26\46\27\55\0\1\24\22\27"+
    "\14\0\1\44\63\27\5\0\1\24\72\27\7\0\1\73\130\27\10\0\1\30\1\27\5\0\1\24\1"+
    "\27\1\42\2\0\14\27\1\26\153\27\1\133\1\102\2\0\1\51\1\2\3\27\1\20\22\27\1"+
    "\142\67\27\12\0\1\32\10\0\1\32\1\151\1\152\1\0\1\153\1\46\7\0\1\36\1\51\2"+
    "\32\3\0\1\154\1\110\1\37\1\47\51\0\1\52\3\0\1\47\2\0\1\117\3\0\1\117\2\0\1"+
    "\32\3\0\1\32\2\0\1\24\3\0\1\24\3\0\1\47\3\0\1\47\2\0\1\117\1\54\6\0\1\46\3"+
    "\0\1\112\1\40\1\117\1\155\1\107\1\156\1\112\1\124\1\112\2\117\1\67\1\0\1\35"+
    "\1\0\1\2\1\55\1\35\1\0\1\2\50\27\32\0\1\24\5\27\106\0\1\30\1\27\33\0\1\52"+
    "\74\27\1\41\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 888 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\4\1\2\1\1\1\5\1\3\6\7\4\0\1\14\1\15\1\0\1\15\1\7\10\0\1\16\1\12\1"+
    "\0\2\7\1\61\1\60\1\63\1\7\1\62\3\7\1\6\2\0\1\6\3\0\2\7\1\42\1\36\1\56\1\52"+
    "\2\7\1\40\2\7\1\54\1\51\1\7\1\27\1\46\1\7\1\65\1\53\7\7\1\0\1\13\2\0\1\57"+
    "\1\0\1\34\1\35\1\17\1\32\1\25\1\64\1\37\1\43\1\23\1\7\1\44\1\24\1\21\1\33"+
    "\1\20\1\22\1\7\1\26\1\31\1\30\1\50\1\11\1\55\1\47\1\45\1\41\4\0\6\7\1\10\2"+
    "\7\2\0\4\7\4\0\1\7\2\0\1\7\7\0\1\7\4\0\1\7\5\0\7\7\1\0\2\7\4\0\4\7\16\0\5"+
    "\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\13"+
    "\7\1\0\1\7\2\0\6\7\1\0\7\7\1\0\1\7\15\0\1\7\1\0\2\7\1\0\2\7\1\0\4\7\10\0\1"+
    "\7\4\0\4\7\1\0\4\7\1\0\13\7\2\0\4\7\2\0\11\7\6\0\10\7\2\0\2\7\1\0\3\7\1\0"+
    "\4\7\2\0\6\7\1\0\1\7\3\0\4\7\2\0\5\7\2\0\4\7\5\0\2\7\1\0\4\7\4\0\2\7\1\0\2"+
    "\7\1\0\2\7\1\0\2\7\2\0\1\7\1\0\3\7\2\0\3\7\3\0\4\7\1\0\1\7\7\0\3\7\1\0\2\7"+
    "\1\0\5\7\1\0\3\7\2\0\1\7\11\0\2\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\3\0\1\7\6\0\3\7\3\0\3\7\5\0\2\7\2\0\2\7\5\0\1\7\1\0\5\7\1"+
    "\0\4\7\1\0\1\7\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\5\0\2\7\1\0\1\7\2\0\2\7\1\0"+
    "\1\7\2\0\1\7\3\0\3\7\1\0\1\7\1\0\1\7\5\0\1\7\1\0\1\7\1\0\1\7\4\0\5\7\1\0\5"+
    "\7\1\0\2\7\4\0\4\7\3\0\1\7\3\0\3\7\5\0\5\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\0\2\7\2\1\5\7\5\0\1\7\4\0\1\7\3\0\3\7\1\0\5\7\2\0\1\7\1\0\4\7\1"+
    "\0\1\7\5\0\5\7\4\0\1\7\2\0\2\7\2\0\3\7\2\0\5\7\2\0\6\7\1\0\3\7\1\0\2\7\2\0"+
    "\2\7\1\0\2\7\1\0\2\7\2\0\3\7\3\0\2\7\3\0\2\7\2\0\3\7\4\0\3\7\1\0\2\7\1\0\2"+
    "\7\3\0\1\7\2\0\5\7\1\0\2\7\1\0\3\7\2\0\1\7\4\0\1\7\2\0\2\7\2\0\4\7\1\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\0\4\7\2\0\1\7\1\0\1\7\5\0\1\7\1\0\1\7\1\0\3\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\2\4\1\5\1\4\1\5"+
    "\1\6\12\2\1\7\1\5\2\10\1\4\1\5\1\1"+
    "\1\4\1\0\15\2\10\11\1\0\1\10\21\2\11\11"+
    "\3\12\20\2\1\13\3\11\1\14\3\11\1\15\1\11"+
    "\20\2\10\11\1\16\3\2\1\17\14\2\2\11\1\20"+
    "\3\11\1\21\1\22\1\23\2\11\1\2\1\24\1\25"+
    "\11\2\1\26\2\2\1\27\1\2\1\11\1\30\6\11"+
    "\1\31\3\2\1\32\13\2\4\11\1\33\3\11\1\34"+
    "\17\2\1\35\10\11\1\2\1\36\1\2\1\37\13\2"+
    "\1\40\1\41\1\42\1\43\2\11\1\44\1\11\7\2"+
    "\1\45\5\2\3\11\1\46\1\47\11\2\1\50\4\11"+
    "\11\2\1\11\1\51\3\11\1\52\6\2\1\53\1\2"+
    "\2\11\1\54\1\55\4\2\1\56\2\2\1\57\1\11"+
    "\6\2\1\60\1\61\1\2\1\62\6\2\1\63\14\2"+
    "\1\64\4\2\1\65\11\2\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u01e6"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\242\0\u0252"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u05b2\0\u0a8c\0\u0ac2"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\330\0\u01e6\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u08dc\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u08dc\0\u154e\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a"+
    "\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca"+
    "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u08dc\0\u08dc"+
    "\0\u1fa4\0\u1fda\0\u2010\0\330\0\330\0\u2046\0\u207c\0\u20b2"+
    "\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\330\0\u222c"+
    "\0\u2262\0\330\0\u2298\0\u22ce\0\u08dc\0\u2304\0\u233a\0\u2370"+
    "\0\u23a6\0\u23dc\0\u2412\0\u08dc\0\u2448\0\u247e\0\u24b4\0\330"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u08dc"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\u08dc\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8"+
    "\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\330\0\u2dfc\0\330"+
    "\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac"+
    "\0\u2fe2\0\u3018\0\u304e\0\u08dc\0\u08dc\0\u08dc\0\u08dc\0\u3084"+
    "\0\u30ba\0\u08dc\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe"+
    "\0\u3234\0\u326a\0\330\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378"+
    "\0\u33ae\0\u33e4\0\u341a\0\330\0\330\0\u3450\0\u3486\0\u34bc"+
    "\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\330\0\u3636"+
    "\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6"+
    "\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u08dc\0\u392a\0\u3960"+
    "\0\u3996\0\330\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada"+
    "\0\330\0\u3b10\0\u3b46\0\u3b7c\0\u08dc\0\u08dc\0\u3bb2\0\u3be8"+
    "\0\u3c1e\0\u3c54\0\330\0\u3c8a\0\u3cc0\0\u08dc\0\u3cf6\0\u3d2c"+
    "\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u08dc\0\330\0\u3e70"+
    "\0\330\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\330"+
    "\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164"+
    "\0\u419a\0\u41d0\0\u4206\0\u423c\0\330\0\u4272\0\u42a8\0\u42de"+
    "\0\u4314\0\330\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458"+
    "\0\u448e\0\u44c4\0\u44fa\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\5\1\6"+
    "\1\13\1\12\1\14\1\10\1\15\1\16\1\17\1\5"+
    "\1\20\1\21\1\5\1\22\1\23\3\5\1\24\1\25"+
    "\1\26\7\5\1\27\22\5\1\12\3\7\1\10\1\11"+
    "\1\30\1\12\1\7\1\10\1\31\1\12\1\10\50\12"+
    "\1\0\1\32\1\33\1\7\1\33\1\34\1\11\2\32"+
    "\1\33\1\34\1\32\1\35\1\10\51\32\4\36\2\37"+
    "\3\36\1\37\2\36\1\37\51\36\2\5\5\0\3\5"+
    "\1\0\1\40\1\0\52\5\1\6\4\7\1\0\1\5"+
    "\2\6\1\0\1\40\1\7\51\5\1\0\5\7\2\0"+
    "\2\7\2\0\1\7\55\0\2\10\3\0\1\10\2\0"+
    "\1\10\52\0\3\7\2\11\2\0\1\7\1\11\2\0"+
    "\1\11\137\0\2\5\2\0\2\10\1\0\2\5\1\13"+
    "\1\0\1\40\1\10\51\5\14\0\1\5\51\0\2\15"+
    "\2\0\62\15\2\5\5\0\3\5\1\0\1\40\1\0"+
    "\1\5\1\41\51\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\42\47\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\43\47\5\5\0\3\5\1\0\1\40\1\0"+
    "\17\5\1\44\33\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\45\10\5\1\46\33\5\5\0\3\5\1\0"+
    "\1\40\1\0\16\5\1\47\13\5\1\50\20\5\5\0"+
    "\3\5\1\0\1\40\1\0\13\5\1\51\37\5\5\0"+
    "\3\5\1\0\1\40\1\0\6\5\1\52\1\5\1\53"+
    "\42\5\5\0\3\5\1\0\1\40\1\0\3\5\1\54"+
    "\47\5\5\0\3\5\1\0\1\40\1\0\10\5\1\55"+
    "\40\5\7\0\3\56\5\0\1\56\1\57\1\60\1\56"+
    "\1\61\1\62\7\56\1\63\12\56\1\64\5\56\1\65"+
    "\10\56\2\32\1\0\2\32\1\0\5\32\1\66\53\32"+
    "\1\33\1\7\2\33\1\7\2\32\2\33\1\32\1\66"+
    "\1\33\53\32\1\0\1\32\1\34\1\10\3\32\1\34"+
    "\1\32\1\66\1\34\54\32\1\67\62\32\66\36\2\5"+
    "\5\0\3\5\1\0\1\40\1\0\1\5\1\70\51\5"+
    "\5\0\3\5\1\0\1\40\1\0\4\5\1\71\46\5"+
    "\5\0\3\5\1\0\1\40\1\0\15\5\1\72\35\5"+
    "\5\0\3\5\1\0\1\40\1\0\2\5\1\73\50\5"+
    "\5\0\3\5\1\0\1\40\1\0\16\5\1\74\1\5"+
    "\1\75\32\5\5\0\3\5\1\0\1\40\1\0\16\5"+
    "\1\76\34\5\5\0\3\5\1\0\1\40\1\0\13\5"+
    "\1\77\37\5\5\0\3\5\1\0\1\40\1\0\2\5"+
    "\1\100\2\5\1\101\45\5\5\0\3\5\1\0\1\40"+
    "\1\0\11\5\1\102\5\5\1\103\33\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\104\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\5\5\1\105\45\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\106\17\5\1\107\14\5"+
    "\5\0\3\5\1\0\1\40\1\0\17\5\1\110\31\5"+
    "\7\0\3\56\5\0\47\56\7\0\3\56\5\0\12\56"+
    "\1\111\34\56\7\0\3\56\5\0\4\56\1\112\10\56"+
    "\1\113\31\56\7\0\3\56\5\0\1\56\1\114\45\56"+
    "\7\0\3\56\5\0\4\56\1\115\42\56\7\0\3\56"+
    "\5\0\7\56\1\116\4\56\1\117\32\56\7\0\3\56"+
    "\5\0\43\56\1\120\3\56\7\0\3\56\5\0\15\56"+
    "\1\121\31\56\5\32\1\0\5\32\1\66\52\32\1\5"+
    "\1\122\1\123\1\124\1\0\1\123\1\0\1\5\1\122"+
    "\1\5\1\0\1\40\1\0\53\5\5\0\3\5\1\0"+
    "\1\40\1\0\5\5\1\125\45\5\5\0\3\5\1\0"+
    "\1\40\1\0\33\5\1\126\17\5\5\0\3\5\1\0"+
    "\1\40\1\0\27\5\1\127\23\5\5\0\3\5\1\0"+
    "\1\40\1\0\27\5\1\130\23\5\5\0\3\5\1\0"+
    "\1\40\1\0\11\5\1\131\41\5\5\0\3\5\1\0"+
    "\1\40\1\0\22\5\1\132\30\5\5\0\3\5\1\0"+
    "\1\40\1\0\11\5\1\133\41\5\5\0\3\5\1\0"+
    "\1\40\1\0\7\5\1\134\43\5\5\0\3\5\1\0"+
    "\1\40\1\0\3\5\1\135\47\5\5\0\3\5\1\0"+
    "\1\40\1\0\6\5\1\136\44\5\5\0\3\5\1\0"+
    "\1\40\1\0\13\5\1\137\37\5\5\0\3\5\1\0"+
    "\1\40\1\0\17\5\1\140\33\5\5\0\3\5\1\0"+
    "\1\40\1\0\10\5\1\141\42\5\5\0\3\5\1\0"+
    "\1\40\1\0\36\5\1\142\14\5\5\0\3\5\1\0"+
    "\1\40\1\0\13\5\1\143\37\5\5\0\3\5\1\0"+
    "\1\40\1\0\15\5\1\144\33\5\7\0\3\56\5\0"+
    "\30\56\1\145\16\56\7\0\3\56\5\0\3\56\1\146"+
    "\10\56\1\147\32\56\7\0\3\56\5\0\1\150\46\56"+
    "\7\0\3\56\5\0\12\56\1\151\34\56\7\0\3\56"+
    "\5\0\14\56\1\152\32\56\7\0\3\56\5\0\2\56"+
    "\1\153\44\56\7\0\3\56\5\0\13\56\1\154\33\56"+
    "\7\0\3\56\5\0\44\56\1\155\2\56\7\0\3\56"+
    "\5\0\12\56\1\156\34\56\2\0\1\123\63\0\2\5"+
    "\5\0\3\5\1\0\1\40\1\0\6\5\1\157\44\5"+
    "\5\0\3\5\1\0\1\40\1\0\7\5\1\160\43\5"+
    "\5\0\3\5\1\0\1\40\1\0\17\5\1\161\33\5"+
    "\5\0\3\5\1\0\1\40\1\0\10\5\1\162\42\5"+
    "\5\0\3\5\1\0\1\40\1\0\17\5\1\163\33\5"+
    "\5\0\3\5\1\0\1\40\1\0\33\5\1\164\17\5"+
    "\5\0\3\5\1\0\1\40\1\0\30\5\1\165\22\5"+
    "\5\0\3\5\1\0\1\40\1\0\33\5\1\166\17\5"+
    "\5\0\3\5\1\0\1\40\1\0\11\5\1\167\41\5"+
    "\5\0\3\5\1\0\1\40\1\0\2\5\1\170\50\5"+
    "\5\0\3\5\1\0\1\40\1\0\6\5\1\171\44\5"+
    "\5\0\3\5\1\0\1\40\1\0\20\5\1\172\32\5"+
    "\5\0\3\5\1\0\1\40\1\0\16\5\1\173\34\5"+
    "\5\0\3\5\1\0\1\40\1\0\13\5\1\174\37\5"+
    "\5\0\3\5\1\0\1\40\1\0\11\5\1\175\41\5"+
    "\5\0\3\5\1\0\1\40\1\0\10\5\1\176\40\5"+
    "\7\0\3\56\5\0\12\56\1\177\34\56\7\0\3\56"+
    "\5\0\20\56\1\200\26\56\7\0\3\56\5\0\1\56"+
    "\1\201\45\56\7\0\3\56\5\0\40\56\1\202\6\56"+
    "\7\0\3\56\5\0\31\56\1\203\15\56\7\0\3\56"+
    "\5\0\41\56\1\204\1\56\1\205\3\56\7\0\3\56"+
    "\5\0\7\56\1\206\37\56\7\0\3\56\5\0\2\56"+
    "\1\207\44\56\2\5\5\0\3\5\1\0\1\40\1\0"+
    "\7\5\1\210\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\211\42\5\5\0\3\5\1\0\1\40\1\0"+
    "\22\5\1\212\30\5\5\0\3\5\1\0\1\40\1\0"+
    "\11\5\1\213\41\5\5\0\3\5\1\0\1\40\1\0"+
    "\11\5\1\214\41\5\5\0\3\5\1\0\1\40\1\0"+
    "\17\5\1\215\33\5\5\0\3\5\1\0\1\40\1\0"+
    "\31\5\1\216\21\5\5\0\3\5\1\0\1\40\1\0"+
    "\15\5\1\217\35\5\5\0\3\5\1\0\1\40\1\0"+
    "\13\5\1\220\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\13\5\1\221\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\2\5\1\222\50\5\5\0\3\5\1\0\1\40\1\0"+
    "\7\5\1\223\43\5\5\0\3\5\1\0\1\40\1\0"+
    "\15\5\1\224\35\5\5\0\3\5\1\0\1\40\1\0"+
    "\11\5\1\225\41\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\226\44\5\5\0\3\5\1\0\1\40\1\0"+
    "\11\5\1\227\37\5\7\0\3\56\5\0\6\56\1\230"+
    "\32\56\1\231\5\56\7\0\3\56\5\0\36\56\1\232"+
    "\10\56\7\0\3\56\5\0\12\56\1\233\34\56\7\0"+
    "\3\56\5\0\15\56\1\234\12\56\1\235\16\56\7\0"+
    "\3\56\5\0\30\56\1\236\16\56\7\0\3\56\5\0"+
    "\42\56\1\237\4\56\7\0\3\56\5\0\44\56\1\240"+
    "\2\56\7\0\3\56\5\0\1\56\1\241\45\56\7\0"+
    "\3\56\5\0\41\56\1\242\5\56\2\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\243\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\244\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\245\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\12\5\1\246\40\5\5\0\3\5"+
    "\1\0\1\40\1\0\30\5\1\247\22\5\5\0\3\5"+
    "\1\0\1\40\1\0\22\5\1\250\30\5\5\0\3\5"+
    "\1\0\1\40\1\0\3\5\1\251\47\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\252\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\35\5\1\253\15\5\5\0\3\5"+
    "\1\0\1\40\1\0\41\5\1\254\11\5\5\0\3\5"+
    "\1\0\1\40\1\0\37\5\1\255\13\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\256\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\257\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\260\44\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\261\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\262\20\5\1\263\13\5"+
    "\7\0\3\56\5\0\5\56\1\264\41\56\7\0\3\56"+
    "\5\0\42\56\1\265\4\56\7\0\3\56\5\0\40\56"+
    "\1\266\6\56\7\0\3\56\5\0\40\56\1\267\6\56"+
    "\7\0\3\56\5\0\7\56\1\270\37\56\7\0\3\56"+
    "\5\0\43\56\1\271\3\56\7\0\3\56\5\0\40\56"+
    "\1\272\6\56\7\0\3\56\5\0\4\56\1\273\42\56"+
    "\7\0\3\56\5\0\42\56\1\274\4\56\2\5\5\0"+
    "\3\5\1\0\1\40\1\0\11\5\1\275\41\5\5\0"+
    "\3\5\1\0\1\40\1\0\5\5\1\276\45\5\5\0"+
    "\3\5\1\0\1\40\1\0\31\5\1\277\21\5\5\0"+
    "\3\5\1\0\1\40\1\0\10\5\1\300\42\5\5\0"+
    "\3\5\1\0\1\40\1\0\6\5\1\301\44\5\5\0"+
    "\3\5\1\0\1\40\1\0\15\5\1\302\3\5\1\303"+
    "\14\5\1\304\14\5\5\0\3\5\1\0\1\40\1\0"+
    "\3\5\1\305\47\5\5\0\3\5\1\0\1\40\1\0"+
    "\16\5\1\306\34\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\307\44\5\5\0\3\5\1\0\1\40\1\0"+
    "\21\5\1\310\31\5\5\0\3\5\1\0\1\40\1\0"+
    "\2\5\1\311\50\5\5\0\3\5\1\0\1\40\1\0"+
    "\22\5\1\312\30\5\5\0\3\5\1\0\1\40\1\0"+
    "\6\5\1\313\42\5\7\0\3\56\5\0\41\56\1\314"+
    "\5\56\7\0\3\56\5\0\30\56\1\315\16\56\7\0"+
    "\3\56\5\0\30\56\1\316\16\56\7\0\3\56\5\0"+
    "\2\56\1\317\44\56\7\0\3\56\5\0\44\56\1\320"+
    "\2\56\7\0\3\56\5\0\2\56\1\321\12\56\1\322"+
    "\12\56\1\323\16\56\7\0\3\56\5\0\13\56\1\324"+
    "\33\56\2\5\5\0\3\5\1\0\1\40\1\0\12\5"+
    "\1\325\40\5\5\0\3\5\1\0\1\40\1\0\13\5"+
    "\1\326\37\5\5\0\3\5\1\0\1\40\1\0\17\5"+
    "\1\327\33\5\5\0\3\5\1\0\1\40\1\0\16\5"+
    "\1\330\34\5\5\0\3\5\1\0\1\40\1\0\34\5"+
    "\1\331\1\332\15\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\333\42\5\5\0\3\5\1\0\1\40\1\0"+
    "\30\5\1\334\22\5\5\0\3\5\1\0\1\40\1\0"+
    "\11\5\1\335\41\5\5\0\3\5\1\0\1\40\1\0"+
    "\33\5\1\336\17\5\5\0\3\5\1\0\1\40\1\0"+
    "\20\5\1\337\32\5\5\0\3\5\1\0\1\40\1\0"+
    "\10\5\1\340\42\5\5\0\3\5\1\0\1\40\1\0"+
    "\13\5\1\341\37\5\5\0\3\5\1\0\1\40\1\0"+
    "\25\5\1\342\25\5\5\0\3\5\1\0\1\40\1\0"+
    "\7\5\1\343\41\5\7\0\3\56\5\0\42\56\1\344"+
    "\4\56\7\0\3\56\5\0\43\56\1\345\3\56\7\0"+
    "\3\56\5\0\43\56\1\346\3\56\7\0\3\56\5\0"+
    "\41\56\1\347\1\56\1\350\3\56\7\0\3\56\5\0"+
    "\4\56\1\351\42\56\7\0\3\56\5\0\7\56\1\352"+
    "\37\56\7\0\3\56\5\0\43\56\1\353\3\56\7\0"+
    "\3\56\5\0\40\56\1\354\6\56\2\5\5\0\3\5"+
    "\1\0\1\40\1\0\5\5\1\355\45\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\356\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\357\37\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\360\37\5\5\0\3\5"+
    "\1\0\1\40\1\0\17\5\1\361\33\5\5\0\3\5"+
    "\1\0\1\40\1\0\33\5\1\362\17\5\5\0\3\5"+
    "\1\0\1\40\1\0\5\5\1\363\45\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\364\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\40\5\1\365\12\5\5\0\3\5"+
    "\1\0\1\40\1\0\4\5\1\366\46\5\5\0\3\5"+
    "\1\0\1\40\1\0\11\5\1\367\41\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\370\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\41\5\1\371\11\5\5\0\3\5"+
    "\1\0\1\40\1\0\3\5\1\372\47\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\373\35\5\7\0\3\56"+
    "\5\0\44\56\1\374\2\56\7\0\3\56\5\0\44\56"+
    "\1\375\2\56\7\0\3\56\5\0\42\56\1\376\4\56"+
    "\7\0\3\56\5\0\44\56\1\377\2\56\7\0\3\56"+
    "\5\0\3\56\1\u0100\43\56\7\0\3\56\5\0\2\56"+
    "\1\u0101\44\56\7\0\3\56\5\0\44\56\1\u0102\2\56"+
    "\7\0\3\56\5\0\15\56\1\u0103\31\56\2\5\5\0"+
    "\3\5\1\0\1\40\1\0\13\5\1\u0104\37\5\5\0"+
    "\3\5\1\0\1\40\1\0\26\5\1\u0105\24\5\5\0"+
    "\3\5\1\0\1\40\1\0\2\5\1\u0106\50\5\5\0"+
    "\3\5\1\0\1\40\1\0\16\5\1\u0107\34\5\5\0"+
    "\3\5\1\0\1\40\1\0\10\5\1\u0108\42\5\5\0"+
    "\3\5\1\0\1\40\1\0\13\5\1\u0109\37\5\5\0"+
    "\3\5\1\0\1\40\1\0\17\5\1\u010a\33\5\5\0"+
    "\3\5\1\0\1\40\1\0\14\5\1\u010b\36\5\5\0"+
    "\3\5\1\0\1\40\1\0\17\5\1\u010c\33\5\5\0"+
    "\3\5\1\0\1\40\1\0\6\5\1\u010d\44\5\5\0"+
    "\3\5\1\0\1\40\1\0\16\5\1\u010e\34\5\5\0"+
    "\3\5\1\0\1\40\1\0\16\5\1\u010f\34\5\5\0"+
    "\3\5\1\0\1\40\1\0\10\5\1\u0110\40\5\7\0"+
    "\3\56\5\0\12\56\1\u0111\34\56\7\0\3\56\5\0"+
    "\41\56\1\u0112\5\56\7\0\3\56\5\0\7\56\1\u0113"+
    "\37\56\2\5\5\0\3\5\1\0\1\40\1\0\14\5"+
    "\1\u0114\36\5\5\0\3\5\1\0\1\40\1\0\14\5"+
    "\1\u0115\36\5\5\0\3\5\1\0\1\40\1\0\11\5"+
    "\1\u0116\41\5\5\0\3\5\1\0\1\40\1\0\2\5"+
    "\1\u0117\50\5\5\0\3\5\1\0\1\40\1\0\16\5"+
    "\1\u0118\34\5\5\0\3\5\1\0\1\40\1\0\10\5"+
    "\1\u0119\42\5\5\0\3\5\1\0\1\40\1\0\11\5"+
    "\1\u011a\41\5\5\0\3\5\1\0\1\40\1\0\11\5"+
    "\1\u011b\41\5\5\0\3\5\1\0\1\40\1\0\22\5"+
    "\1\u011c\30\5\5\0\3\5\1\0\1\40\1\0\33\5"+
    "\1\u011d\17\5\5\0\2\5\1\u011e\1\0\1\40\1\0"+
    "\53\5\5\0\3\5\1\0\1\40\1\0\11\5\1\u011f"+
    "\37\5\7\0\3\56\5\0\6\56\1\u0120\32\56\1\u0121"+
    "\5\56\7\0\3\56\5\0\42\56\1\u0122\4\56\7\0"+
    "\3\56\5\0\2\56\1\u0123\44\56\2\5\5\0\3\5"+
    "\1\0\1\40\1\0\3\5\1\u0124\47\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\u0125\37\5\5\0\3\5"+
    "\1\0\1\40\1\0\15\5\1\u0126\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\4\5\1\u0127\46\5\5\0\3\5"+
    "\1\0\1\40\1\0\15\5\1\u0128\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\u0129\44\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\u012a\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\4\5\1\u012b\46\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\u012c\40\5\7\0\3\56"+
    "\5\0\5\56\1\u012d\41\56\7\0\3\56\5\0\42\56"+
    "\1\u012e\4\56\7\0\3\56\5\0\40\56\1\u012f\6\56"+
    "\7\0\3\56\5\0\41\56\1\u0130\1\56\1\u0131\3\56"+
    "\2\5\5\0\3\5\1\0\1\40\1\0\14\5\1\u0132"+
    "\36\5\5\0\3\5\1\0\1\40\1\0\6\5\1\u0133"+
    "\44\5\5\0\3\5\1\0\1\40\1\0\10\5\1\u0134"+
    "\42\5\5\0\3\5\1\0\1\40\1\0\37\5\1\u0135"+
    "\13\5\5\0\3\5\1\0\1\40\1\0\21\5\1\u0136"+
    "\31\5\5\0\3\5\1\0\1\40\1\0\10\5\1\u0137"+
    "\42\5\5\0\3\5\1\0\1\40\1\0\17\5\1\u0138"+
    "\33\5\5\0\3\5\1\0\1\40\1\0\14\5\1\u0139"+
    "\36\5\5\0\3\5\1\0\1\40\1\0\11\5\1\u013a"+
    "\37\5\7\0\3\56\5\0\41\56\1\u013b\5\56\7\0"+
    "\3\56\5\0\24\56\1\u013c\22\56\7\0\3\56\5\0"+
    "\42\56\1\u013d\4\56\7\0\3\56\5\0\44\56\1\u013e"+
    "\2\56\2\5\5\0\3\5\1\0\1\40\1\0\3\5"+
    "\1\u013f\47\5\5\0\3\5\1\0\1\40\1\0\16\5"+
    "\1\u0140\34\5\5\0\3\5\1\0\1\40\1\0\6\5"+
    "\1\u0141\44\5\5\0\3\5\1\0\1\40\1\0\10\5"+
    "\1\u0142\42\5\5\0\3\5\1\0\1\40\1\0\14\5"+
    "\1\u0143\36\5\5\0\3\5\1\0\1\40\1\0\13\5"+
    "\1\u0144\37\5\5\0\3\5\1\0\1\40\1\0\14\5"+
    "\1\u0145\34\5\7\0\3\56\5\0\42\56\1\u0146\4\56"+
    "\7\0\3\56\5\0\45\56\1\u0147\1\56\2\5\5\0"+
    "\3\5\1\0\1\40\1\0\16\5\1\u0148\34\5\5\0"+
    "\3\5\1\0\1\40\1\0\13\5\1\u0149\37\5\5\0"+
    "\3\5\1\0\1\40\1\0\20\5\1\u014a\32\5\5\0"+
    "\3\5\1\0\1\40\1\0\2\5\1\u014b\50\5\5\0"+
    "\3\5\1\0\1\40\1\0\10\5\1\u014c\42\5\5\0"+
    "\3\5\1\0\1\40\1\0\6\5\1\u014d\42\5\7\0"+
    "\3\56\5\0\3\56\1\u014e\43\56\2\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\u014f\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\34\5\1\u0150\16\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\u0151\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\7\5\1\u0152\43\5\5\0\3\5"+
    "\1\0\1\40\1\0\15\5\1\u0153\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\3\5\1\u0154\47\5\5\0\3\5"+
    "\1\0\1\40\1\0\3\5\1\u0155\47\5\5\0\3\5"+
    "\1\0\1\40\1\0\17\5\1\u0156\33\5\5\0\3\5"+
    "\1\0\1\40\1\0\23\5\1\u0157\27\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\u0158\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\15\5\1\u0159\35\5\5\0\3\5"+
    "\1\0\1\40\1\0\11\5\1\u015a\41\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\u015b\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\33\5\1\u015c\17\5\5\0\3\5"+
    "\1\0\1\40\1\0\17\5\1\u015d\33\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\u015e\44\5\5\0\3\5"+
    "\1\0\1\40\1\0\7\5\1\u015f\43\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\u0160\37\5\5\0\3\5"+
    "\1\0\1\40\1\0\13\5\1\u0161\37\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\u0162\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\u0163\44\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\u0164\44\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\u0165\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\3\5\1\u0166\47\5\5\0\3\5"+
    "\1\0\1\40\1\0\17\5\1\u0167\33\5\5\0\3\5"+
    "\1\0\1\40\1\0\16\5\1\u0168\34\5\5\0\3\5"+
    "\1\0\1\40\1\0\7\5\1\u0169\43\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\u016a\36\5\5\0\3\5"+
    "\1\0\1\40\1\0\6\5\1\u016b\44\5\5\0\3\5"+
    "\1\0\1\40\1\0\24\5\1\u016c\26\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\u016d\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\11\5\1\u016e\41\5\5\0\3\5"+
    "\1\0\1\40\1\0\25\5\1\u016f\25\5\5\0\3\5"+
    "\1\0\1\40\1\0\26\5\1\u0170\24\5\5\0\3\5"+
    "\1\0\1\40\1\0\10\5\1\u0171\42\5\5\0\3\5"+
    "\1\0\1\40\1\0\2\5\1\u0172\50\5\5\0\3\5"+
    "\1\0\1\40\1\0\27\5\1\u0173\23\5\5\0\3\5"+
    "\1\0\1\40\1\0\14\5\1\u0174\34\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\6\1\1\11\15\1\1\11\7\1\1\0\25\1"+
    "\1\0\34\1\1\11\u0121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NativeDefinitionsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CODE_CHARS;
            } 
            // fall through
          case 55: break;
          case 2: 
            { yybegin(WAITING_PLATFORM); return UNKNOWN_KEY;
            } 
            // fall through
          case 56: break;
          case 3: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 57: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 58: break;
          case 5: 
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 59: break;
          case 6: 
            { return COMMENT;
            } 
            // fall through
          case 60: break;
          case 7: 
            { yybegin(WAITING_VALUE); return SEPARATOR;
            } 
            // fall through
          case 61: break;
          case 8: 
            { yybegin(YYINITIAL); return VALUE;
            } 
            // fall through
          case 62: break;
          case 9: 
            { return UNKNOWN_PLATFORM;
            } 
            // fall through
          case 63: break;
          case 10: 
            { yybegin(CODE_END); return DELIM;
            } 
            // fall through
          case 64: break;
          case 11: 
            { return OSX;
            } 
            // fall through
          case 65: break;
          case 12: 
            { return IOS;
            } 
            // fall through
          case 66: break;
          case 13: 
            { return X64;
            } 
            // fall through
          case 67: break;
          case 14: 
            { return WASM;
            } 
            // fall through
          case 68: break;
          case 15: 
            { yybegin(WAITING_PLATFORM); return LINKER;
            } 
            // fall through
          case 69: break;
          case 16: 
            { return MINGW;
            } 
            // fall through
          case 70: break;
          case 17: 
            { return LINUX;
            } 
            // fall through
          case 71: break;
          case 18: 
            { return ARM32;
            } 
            // fall through
          case 72: break;
          case 19: 
            { return ARM64;
            } 
            // fall through
          case 73: break;
          case 20: 
            { yybegin(WAITING_PLATFORM); return MODULES;
            } 
            // fall through
          case 74: break;
          case 21: 
            { yybegin(WAITING_PLATFORM); return PACKAGE;
            } 
            // fall through
          case 75: break;
          case 22: 
            { yybegin(WAITING_PLATFORM); return DEPENDS;
            } 
            // fall through
          case 76: break;
          case 23: 
            { yybegin(WAITING_PLATFORM); return HEADERS;
            } 
            // fall through
          case 77: break;
          case 24: 
            { return MIPS32;
            } 
            // fall through
          case 78: break;
          case 25: 
            { return WASM32;
            } 
            // fall through
          case 79: break;
          case 26: 
            { yybegin(WAITING_PLATFORM); return LANGUAGE;
            } 
            // fall through
          case 80: break;
          case 27: 
            { return IOS_X64;
            } 
            // fall through
          case 81: break;
          case 28: 
            { return ANDROID;
            } 
            // fall through
          case 82: break;
          case 29: 
            { return MIPSEL32;
            } 
            // fall through
          case 83: break;
          case 30: 
            { yybegin(WAITING_PLATFORM); return LINKER_OPTS;
            } 
            // fall through
          case 84: break;
          case 31: 
            { yybegin(WAITING_PLATFORM); return ENTRY_POINT;
            } 
            // fall through
          case 85: break;
          case 32: 
            { return MINGW_X64;
            } 
            // fall through
          case 86: break;
          case 33: 
            { return MACOS_X64;
            } 
            // fall through
          case 87: break;
          case 34: 
            { return IOS_ARM32;
            } 
            // fall through
          case 88: break;
          case 35: 
            { return IOS_ARM64;
            } 
            // fall through
          case 89: break;
          case 36: 
            { return LINUX_X64;
            } 
            // fall through
          case 90: break;
          case 37: 
            { yybegin(WAITING_PLATFORM); return STRICT_ENUMS;
            } 
            // fall through
          case 91: break;
          case 38: 
            { yybegin(WAITING_PLATFORM); return COMPILER_OPTS;
            } 
            // fall through
          case 92: break;
          case 39: 
            { yybegin(WAITING_PLATFORM); return LIBRARY_PATHS;
            } 
            // fall through
          case 93: break;
          case 40: 
            { yybegin(WAITING_PLATFORM); return HEADER_FILTER;
            } 
            // fall through
          case 94: break;
          case 41: 
            { return LINUX_MIPS32;
            } 
            // fall through
          case 95: break;
          case 42: 
            { yybegin(WAITING_PLATFORM); return EXCLUDED_MACROS;
            } 
            // fall through
          case 96: break;
          case 43: 
            { yybegin(WAITING_PLATFORM); return NON_STRICT_ENUMS;
            } 
            // fall through
          case 97: break;
          case 44: 
            { return ANDROID_ARM32;
            } 
            // fall through
          case 98: break;
          case 45: 
            { return ANDROID_ARM64;
            } 
            // fall through
          case 99: break;
          case 46: 
            { yybegin(WAITING_PLATFORM); return STATIC_LIBRARIES;
            } 
            // fall through
          case 100: break;
          case 47: 
            { return LINUX_MIPSEL32;
            } 
            // fall through
          case 101: break;
          case 48: 
            { return LINUX_ARM32_HFP;
            } 
            // fall through
          case 102: break;
          case 49: 
            { yybegin(WAITING_PLATFORM); return EXCLUDED_FUNCTIONS;
            } 
            // fall through
          case 103: break;
          case 50: 
            { yybegin(WAITING_PLATFORM); return EXCLUDE_SYSTEM_LIBS;
            } 
            // fall through
          case 104: break;
          case 51: 
            { yybegin(WAITING_PLATFORM); return NO_STRING_CONVERSION;
            } 
            // fall through
          case 105: break;
          case 52: 
            { yybegin(WAITING_PLATFORM); return EXCLUDE_DEPENDENT_MODULES;
            } 
            // fall through
          case 106: break;
          case 53: 
            { yybegin(WAITING_PLATFORM); return EXPORT_FORWARD_DECLARATIONS;
            } 
            // fall through
          case 107: break;
          case 54: 
            { yybegin(WAITING_PLATFORM); return DISABLE_DESIGNATED_INITIALIZER_CHECKS;
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
