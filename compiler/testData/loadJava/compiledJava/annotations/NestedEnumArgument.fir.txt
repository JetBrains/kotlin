public open class NestedEnumArgument : R|kotlin/Any| {
    @R|test/NestedEnumArgument.Anno|(value = R|test/NestedEnumArgument.E.FIRST|()) public/*package*/ open fun foo(): R|kotlin/Unit|

    public constructor(): R|test/NestedEnumArgument|

    public final annotation class Anno : R|kotlin/Annotation| {
        public constructor(value: R|test/NestedEnumArgument.E|): R|test/NestedEnumArgument.Anno|

    }
    public final enum class E : R|kotlin/Enum<test/NestedEnumArgument.E!>| {
        public final static enum entry FIRST: R|@EnhancedNullability test/NestedEnumArgument.E|
        public final static fun values(): R|kotlin/Array<test/NestedEnumArgument.E>| {
        }

        public final static fun valueOf(value: R|kotlin/String|): R|test/NestedEnumArgument.E| {
        }

        public final static val entries: R|kotlin/enums/EnumEntries<test/NestedEnumArgument.E>|
            public get(): R|kotlin/enums/EnumEntries<test/NestedEnumArgument.E>|

    }
}
