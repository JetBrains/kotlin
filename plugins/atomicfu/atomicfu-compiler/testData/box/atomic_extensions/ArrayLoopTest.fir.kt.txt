class ArrayLoopTest {
  private val SIZE: Int
    field = 10
    private get

  private val intArr: AtomicIntArray
    field = AtomicIntArray(size = 10)
    private get(): AtomicIntArray {
      return <this>.#intArr
    }

  private val longArr: AtomicLongArray
    field = AtomicLongArray(size = 10)
    private get(): AtomicLongArray {
      return <this>.#longArr
    }

  private val boolArr: AtomicIntArray
    field = AtomicIntArray(size = 10)
    private get(): AtomicIntArray {
      return <this>.#boolArr
    }

  private val refArr: AtomicArray<T>
    field = AtomicArray<Any?>(array = arrayOfNulls<Any?>(size = 10))
    private get(): AtomicArray<T> {
      return <this>.#refArr
    }

  class Box {
    val n: Int
      field = n
      get

    constructor(n: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_0: T = handler$atomicfu.get(index = index$atomicfu)
      val tmp_1: R = action$atomicfu.invoke(p1 = tmp_0)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_0, newValue = tmp_1) -> return tmp_0
      }
    }
  }

  private inline fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Boolean, Boolean>): Boolean {
    while (true) { // BLOCK
      val tmp_2: Boolean = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1)
      val tmp_3: R = action$atomicfu.invoke(p1 = tmp_2)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = when {
          tmp_2 -> 1
          else -> 0
        }, newValue = when {
          tmp_3 -> 1
          else -> 0
        }) -> return tmp_2
      }
    }
  }

  private inline fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Int, Int>): Int {
    while (true) { // BLOCK
      val tmp_4: Int = handler$atomicfu.get(index = index$atomicfu)
      val tmp_5: R = action$atomicfu.invoke(p1 = tmp_4)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_4, newValue = tmp_5) -> return tmp_4
      }
    }
  }

  private inline fun getAndUpdate$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, action$atomicfu: Function1<Long, Long>): Long {
    while (true) { // BLOCK
      val tmp_6: Long = handler$atomicfu.get(index = index$atomicfu)
      val tmp_7: R = action$atomicfu.invoke(p1 = tmp_6)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_6, newValue = tmp_7) -> return tmp_6
      }
    }
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_8: T = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_8)
    }
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Boolean, Unit>) {
    while (true) { // BLOCK
      val tmp_9: Boolean = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1)
      action$atomicfu.invoke(p1 = tmp_9)
    }
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_10: Int = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_10)
    }
  }

  private inline fun loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, action$atomicfu: Function1<Long, Unit>) {
    while (true) { // BLOCK
      val tmp_11: Long = handler$atomicfu.get(index = index$atomicfu)
      action$atomicfu.invoke(p1 = tmp_11)
    }
  }

  private inline fun update$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, action$atomicfu: Function1<Any?, Any?>) {
    while (true) { // BLOCK
      val tmp_12: T = handler$atomicfu.get(index = index$atomicfu)
      val tmp_13: R = action$atomicfu.invoke(p1 = tmp_12)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_12, newValue = tmp_13) -> return Unit
      }
    }
  }

  private inline fun update$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Boolean, Boolean>) {
    while (true) { // BLOCK
      val tmp_14: Boolean = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1)
      val tmp_15: R = action$atomicfu.invoke(p1 = tmp_14)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = when {
          tmp_14 -> 1
          else -> 0
        }, newValue = when {
          tmp_15 -> 1
          else -> 0
        }) -> return Unit
      }
    }
  }

  private inline fun update$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Int, Int>) {
    while (true) { // BLOCK
      val tmp_16: Int = handler$atomicfu.get(index = index$atomicfu)
      val tmp_17: R = action$atomicfu.invoke(p1 = tmp_16)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_16, newValue = tmp_17) -> return Unit
      }
    }
  }

  private inline fun update$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, action$atomicfu: Function1<Long, Long>) {
    while (true) { // BLOCK
      val tmp_18: Long = handler$atomicfu.get(index = index$atomicfu)
      val tmp_19: R = action$atomicfu.invoke(p1 = tmp_18)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_18, newValue = tmp_19) -> return Unit
      }
    }
  }

  private inline fun updateAndGet$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_20: T = handler$atomicfu.get(index = index$atomicfu)
      val tmp_21: R = action$atomicfu.invoke(p1 = tmp_20)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_20, newValue = tmp_21) -> return tmp_21
      }
    }
  }

  private inline fun updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Boolean, Boolean>): Boolean {
    while (true) { // BLOCK
      val tmp_22: Boolean = EQEQ(arg0 = handler$atomicfu.get(index = index$atomicfu), arg1 = 1)
      val tmp_23: R = action$atomicfu.invoke(p1 = tmp_22)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = when {
          tmp_22 -> 1
          else -> 0
        }, newValue = when {
          tmp_23 -> 1
          else -> 0
        }) -> return tmp_23
      }
    }
  }

  private inline fun updateAndGet$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu: AtomicIntArray, index$atomicfu: Int, action$atomicfu: Function1<Int, Int>): Int {
    while (true) { // BLOCK
      val tmp_24: Int = handler$atomicfu.get(index = index$atomicfu)
      val tmp_25: R = action$atomicfu.invoke(p1 = tmp_24)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_24, newValue = tmp_25) -> return tmp_25
      }
    }
  }

  private inline fun updateAndGet$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu: AtomicLongArray, index$atomicfu: Int, action$atomicfu: Function1<Long, Long>): Long {
    while (true) { // BLOCK
      val tmp_26: Long = handler$atomicfu.get(index = index$atomicfu)
      val tmp_27: R = action$atomicfu.invoke(p1 = tmp_26)
      when {
        handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = tmp_26, newValue = tmp_27) -> return tmp_27
      }
    }
  }

  private fun action(cur: Box?): Box? {
    return { // BLOCK
      val tmp_28: Box? = cur
      when {
        EQEQ(arg0 = tmp_28, arg1 = null) -> null
        else -> let<Box, Box>(/* <this> = tmp_28, */ block = local fun <anonymous>(it: Box): Box {
          return Box(n = cur.<get-n>().times(other = 10))
        }
)
      }
    }
  }

  fun atomicBooleanArrLoopTest(): Boolean {
    <this>.<get-boolArr>().set(index = 0, newValue = when {
      false -> 1
      else -> 0
    })
    <this>.loop$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-boolArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(value: Boolean) {
      when {
        when {
          value.not() -> <this>.<get-boolArr>().compareAndSet(index = 0, expectedValue = when {
            value -> 1
            else -> 0
          }, newValue = when {
            true -> 1
            else -> 0
          })
          else -> false
        } -> { // BLOCK
          assertEquals<Boolean>(expected = true, actual = EQEQ(arg0 = <this>.<get-boolArr>().get(index = 0), arg1 = 1) as Boolean)
          return EQEQ(arg0 = <this>.<get-boolArr>().get(index = 0), arg1 = 1) as Boolean
        }
      }
    }
)
  }

  fun atomicBooleanArrUpdateTest() {
    assertTrue(actual = <this>.atomicBooleanArrLoopTest())
    <this>.update$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-boolArr>(), index$atomicfu = 5, action$atomicfu = local fun <anonymous>(it: Boolean): Boolean {
      return true
    }
)
    assertEquals<Boolean>(expected = true, actual = EQEQ(arg0 = <this>.<get-boolArr>().get(index = 5), arg1 = 1) as Boolean)
    assertTrue(actual = EQEQ(arg0 = <this>.<get-boolArr>().get(index = 5), arg1 = 1) as Boolean)
    assertFalse(actual = <this>.updateAndGet$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-boolArr>(), index$atomicfu = 5, action$atomicfu = local fun <anonymous>(it: Boolean): Boolean {
      return false
    }
))
    assertFalse(actual = EQEQ(arg0 = <this>.<get-boolArr>().get(index = 5), arg1 = 1) as Boolean)
    <this>.<get-boolArr>().set(index = 5, newValue = when {
      false -> 1
      else -> 0
    })
    assertFalse(actual = <this>.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-boolArr>(), index$atomicfu = 5, action$atomicfu = local fun <anonymous>(it: Boolean): Boolean {
      return true
    }
))
    assertTrue(actual = EQEQ(arg0 = <this>.<get-boolArr>().get(index = 5), arg1 = 1) as Boolean)
    assertTrue(actual = <this>.getAndUpdate$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu = <this>.<get-boolArr>(), index$atomicfu = 5, action$atomicfu = local fun <anonymous>(cur: Boolean): Boolean {
      assertTrue(actual = cur)
      return false
    }
))
    assertFalse(actual = EQEQ(arg0 = <this>.<get-boolArr>().get(index = 5), arg1 = 1) as Boolean)
  }

  fun atomicIntArrLoopTest(): Int {
    <this>.<get-intArr>().set(index = 0, newValue = 0)
    <this>.loop$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(value: Int) {
      when {
        <this>.<get-intArr>().compareAndSet(index = 0, expectedValue = value, newValue = value.plus(other = 10)) -> { // BLOCK
          assertEquals<Int>(expected = value.plus(other = 10), actual = <this>.<get-intArr>().get(index = 0) as Int)
          return <this>.<get-intArr>().get(index = 0) as Int
        }
      }
    }
)
  }

  fun atomicIntArrUpdateTest() {
    assertEquals<Int>(expected = 10, actual = <this>.atomicIntArrLoopTest())
    <this>.<get-intArr>().set(index = 5, newValue = 10)
    <this>.update$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 5, action$atomicfu = local fun <anonymous>(value: Int): Int {
      val newValue: Int = value.plus(other = 1000)
      return when {
        greaterOrEqual(arg0 = newValue, arg1 = 0) -> 2147483647
        else -> newValue
      }
    }
)
    assertEquals<Int>(expected = 2147483647, actual = <this>.<get-intArr>().get(index = 5) as Int)
    <this>.<get-intArr>().set(index = 6, newValue = 10)
    val res1: Int = <this>.updateAndGet$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 6, action$atomicfu = local fun <anonymous>(value: Int): Int {
      return when {
        greaterOrEqual(arg0 = value, arg1 = 0) -> 2147483647
        else -> value
      }
    }
)
    assertEquals<Int>(expected = 2147483647, actual = res1)
    <this>.<get-intArr>().set(index = 7, newValue = 50)
    assertEquals<Int>(expected = 50, actual = <this>.getAndUpdate$atomicfu$ATOMIC_ARRAY$Int(handler$atomicfu = <this>.<get-intArr>(), index$atomicfu = 7, action$atomicfu = local fun <anonymous>(value: Int): Int {
      assertEquals<Int>(expected = 50, actual = value)
      return when {
        greaterOrEqual(arg0 = value, arg1 = 0) -> 2147483647
        else -> value
      }
    }
))
    assertEquals<Int>(expected = 2147483647, actual = <this>.<get-intArr>().get(index = 7) as Int)
  }

  fun atomicLongArrLoopTest(): Long {
    <this>.<get-longArr>().set(index = 0, newValue = 0L)
    <this>.loop$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(value: Long) {
      when {
        <this>.<get-longArr>().compareAndSet(index = 0, expectedValue = value, newValue = value.plus(other = 10)) -> { // BLOCK
          assertEquals<Long>(expected = value.plus(other = 10), actual = <this>.<get-longArr>().get(index = 0) as Long)
          return <this>.<get-longArr>().get(index = 0) as Long
        }
      }
    }
)
  }

  fun atomicLongArrUpdateTest() {
    assertEquals<Long>(expected = 10L, actual = <this>.atomicLongArrLoopTest())
    <this>.<get-longArr>().set(index = 5, newValue = 0L)
    <this>.update$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 5, action$atomicfu = local fun <anonymous>(cur: Long): Long {
      val newValue: Long = cur.plus(other = 1000)
      return when {
        greaterOrEqual(arg0 = newValue, arg1 = 0L) -> 9223372036854775807L
        else -> newValue
      }
    }
)
    assertEquals<Long>(expected = 9223372036854775807L, actual = <this>.<get-longArr>().get(index = 5) as Long)
    <this>.<get-longArr>().set(index = 6, newValue = 10L)
    val res2: Long = <this>.updateAndGet$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 6, action$atomicfu = local fun <anonymous>(cur: Long): Long {
      return when {
        greaterOrEqual(arg0 = cur, arg1 = 0L) -> 9223372036854775807L
        else -> cur
      }
    }
)
    assertEquals<Long>(expected = 9223372036854775807L, actual = res2)
    <this>.<get-longArr>().set(index = 7, newValue = 50L)
    assertEquals<Long>(expected = 50L, actual = <this>.getAndUpdate$atomicfu$ATOMIC_ARRAY$Long(handler$atomicfu = <this>.<get-longArr>(), index$atomicfu = 7, action$atomicfu = local fun <anonymous>(cur: Long): Long {
      assertEquals<Long>(expected = 50L, actual = cur)
      return when {
        greaterOrEqual(arg0 = cur, arg1 = 0L) -> 9223372036854775807L
        else -> cur
      }
    }
))
    assertEquals<Long>(expected = 9223372036854775807L, actual = <this>.<get-longArr>().get(index = 7) as Long)
  }

  fun atomicRefArrLoopTest(): Box? {
    <this>.<get-refArr>().set(index = 0, newValue = Box(n = 888))
    <this>.loop$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(value: Box?) {
      when {
        <this>.<get-refArr>().compareAndSet(index = 0, expectedValue = value, newValue = Box(n = 777)) -> { // BLOCK
          assertEquals<Int>(expected = 777, actual = CHECK_NOT_NULL<Box>(arg0 = <this>.<get-refArr>().get(index = 0) as Any?).<get-n>())
          return <this>.<get-refArr>().get(index = 0) as Any?
        }
      }
    }
)
  }

  fun atomicRefArrUpdateTest() {
    assertEquals<Int?>(expected = 777, actual = { // BLOCK
      val tmp_29: Box? = <this>.atomicRefArrLoopTest()
      when {
        EQEQ(arg0 = tmp_29, arg1 = null) -> null
        else -> tmp_29.<get-n>()
      }
    })
    <this>.<get-refArr>().set(index = 0, newValue = Box(n = 5))
    <this>.update$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(cur: Box?): Box? {
      return { // BLOCK
        val tmp_30: Box? = cur
        when {
          EQEQ(arg0 = tmp_30, arg1 = null) -> null
          else -> let<Box, Box>(/* <this> = tmp_30, */ block = local fun <anonymous>(it: Box): Box {
            return Box(n = cur.<get-n>().times(other = 10))
          }
)
        }
      }
    }
)
    assertEquals<Int>(expected = CHECK_NOT_NULL<Box>(arg0 = <this>.<get-refArr>().get(index = 0) as Any?).<get-n>(), actual = 50)
    <this>.<get-refArr>().set(index = 0, newValue = Box(n = 5))
    assertEquals<Int>(expected = CHECK_NOT_NULL<Box>(arg0 = <this>.updateAndGet$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(cur: Box?): Box? {
      return <this>.action(cur = cur)
    }
)).<get-n>(), actual = 50)
    <this>.<get-refArr>().set(index = 0, newValue = Box(n = 5))
    assertEquals<Int>(expected = CHECK_NOT_NULL<Box>(arg0 = <this>.getAndUpdate$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu = <this>.<get-refArr>(), index$atomicfu = 0, action$atomicfu = local fun <anonymous>(cur: Box?): Box? {
      return <this>.action(cur = cur)
    }
)).<get-n>(), actual = 5)
    assertEquals<Int>(expected = CHECK_NOT_NULL<Box>(arg0 = <this>.<get-refArr>().get(index = 0) as Any?).<get-n>(), actual = 50)
  }

}

fun box(): String {
  val testClass: ArrayLoopTest = ArrayLoopTest()
  testClass.atomicIntArrUpdateTest()
  testClass.atomicIntArrUpdateTest()
  testClass.atomicBooleanArrUpdateTest()
  testClass.atomicRefArrUpdateTest()
  return "OK"
}
