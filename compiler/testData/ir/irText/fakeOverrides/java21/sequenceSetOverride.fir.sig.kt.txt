// CHECK:
//   Mangled name: A
//   Public signature: /A|null[0]
abstract class A : LinkedHashSet<Int> {
  // CHECK:
  //   Mangled name: A#<init>(){}
  //   Public signature: /A.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: A#add(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /A.add|7559962077055454748[0]
  //   Public signature debug description: add(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun add(p0: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#addAll(kotlin.collections.Collection<out|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /A.addAll|-8388196230555083661[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<out|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun addAll(p0: @EnhancedNullability Collection<out @EnhancedNullability Int>): Boolean

  // CHECK:
  //   Mangled name: A#addFirst(kotlin.Int?){}
  //   Public signature: /A.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: A#addLast(kotlin.Int?){}
  //   Public signature: /A.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: A#clear(){}
  //   Public signature: /A.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: A#clone(){}kotlin.Any{EnhancedNullability}
  //   Public signature: /A.clone|178802004086941196[0]
  //   Public signature debug description: clone(){}kotlin.Any{EnhancedNullability}
  /* fake */ override fun clone(): @EnhancedNullability Any

  // CHECK JVM_IR:
  //   Mangled name: A#contains(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /A.contains|3736388240191289860[0]
  //   Public signature debug description: contains(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun contains(p0: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#containsAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /A.containsAll|-6765067201579764726[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun containsAll(p0: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#equals(kotlin.Any?{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /A.equals|4126616015386471185[0]
  //   Public signature debug description: equals(kotlin.Any?{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun equals(p0: @EnhancedNullability Any?): Boolean

  // CHECK:
  //   Mangled name: A#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /A.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: A#getFirst(){}kotlin.Int?
  //   Public signature: /A.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: A#getLast(){}kotlin.Int?
  //   Public signature: /A.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: A#hashCode(){}kotlin.Int
  //   Public signature: /A.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: A#isEmpty(){}kotlin.Boolean
  //   Public signature: /A.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#iterator(){}kotlin.collections.MutableIterator<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /A.iterator|115627760567581658[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override operator fun iterator(): @EnhancedNullability MutableIterator<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: A#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /A.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: A#remove(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /A.remove|2933193249427016334[0]
  //   Public signature debug description: remove(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun remove(p0: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#removeAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /A.removeAll|-5493620261823900507[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun removeAll(p0: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#removeFirst(){}kotlin.Int?
  //   Public signature: /A.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: A#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /A.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#removeLast(){}kotlin.Int?
  //   Public signature: /A.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: A#retainAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /A.retainAll|-3550913358824719637[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun retainAll(p0: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: A#reversed(){}java.util.SequencedSet<kotlin.Int?>?
  //   Public signature: /A.reversed|687960305119769538[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int?>?
  /* fake */ override fun reversed(): SequencedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: A#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /A.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: A#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /A.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: A#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /A.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: A#toArray(kotlin.Array<out|0:0?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /A.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: A#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /A.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: A#toString(){}kotlin.String{EnhancedNullability}
  //   Public signature: /A.toString|7581629773206850948[0]
  //   Public signature debug description: toString(){}kotlin.String{EnhancedNullability}
  /* fake */ override fun toString(): @EnhancedNullability String

  // CHECK:
  //   Mangled name: A{}size
  //   Public signature: /A.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: A#<get-size>(){}kotlin.Int
    //   Public signature: /A.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: B
//   Public signature: /B|null[0]
abstract class B : LinkedHashSet<Int> {
  // CHECK:
  //   Mangled name: B{}size
  //   Public signature: /B.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: B#<get-size>(){}kotlin.Int
    //   Public signature: /B.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: B#<init>(kotlin.Int){}
  //   Public signature: /B.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(size: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: B#add(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /B.add|7559962077055454748[0]
  //   Public signature debug description: add(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun add(p0: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#addAll(kotlin.collections.Collection<out|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /B.addAll|-8388196230555083661[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<out|kotlin.Int{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun addAll(p0: @EnhancedNullability Collection<out @EnhancedNullability Int>): Boolean

  // CHECK:
  //   Mangled name: B#addLast(kotlin.Int?){}
  //   Public signature: /B.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: B#clear(){}
  //   Public signature: /B.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: B#clone(){}kotlin.Any{EnhancedNullability}
  //   Public signature: /B.clone|178802004086941196[0]
  //   Public signature debug description: clone(){}kotlin.Any{EnhancedNullability}
  /* fake */ override fun clone(): @EnhancedNullability Any

  // CHECK JVM_IR:
  //   Mangled name: B#contains(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /B.contains|3736388240191289860[0]
  //   Public signature debug description: contains(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun contains(p0: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#containsAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /B.containsAll|-6765067201579764726[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun containsAll(p0: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#equals(kotlin.Any?{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /B.equals|4126616015386471185[0]
  //   Public signature debug description: equals(kotlin.Any?{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override operator fun equals(p0: @EnhancedNullability Any?): Boolean

  // CHECK:
  //   Mangled name: B#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /B.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: B#getFirst(){}kotlin.Int?
  //   Public signature: /B.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: B#getLast(){}kotlin.Int?
  //   Public signature: /B.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: B#hashCode(){}kotlin.Int
  //   Public signature: /B.hashCode|-8048879360829830756[0]
  //   Public signature debug description: hashCode(){}kotlin.Int
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: B#isEmpty(){}kotlin.Boolean
  //   Public signature: /B.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#iterator(){}kotlin.collections.MutableIterator<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /B.iterator|115627760567581658[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override operator fun iterator(): @EnhancedNullability MutableIterator<@EnhancedNullability Int>

  // CHECK JVM_IR:
  //   Mangled name: B#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /B.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: B#remove(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /B.remove|2933193249427016334[0]
  //   Public signature debug description: remove(kotlin.Int{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun remove(p0: @EnhancedNullability Int): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#removeAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /B.removeAll|-5493620261823900507[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun removeAll(p0: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#removeFirst(){}kotlin.Int?
  //   Public signature: /B.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: B#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /B.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#removeLast(){}kotlin.Int?
  //   Public signature: /B.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: B#retainAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  //   Public signature: /B.retainAll|-3550913358824719637[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int{EnhancedNullability}>){}kotlin.Boolean
  /* fake */ override fun retainAll(p0: Collection<@EnhancedNullability Int>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: B#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /B.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: B#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /B.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: B#toArray(){}kotlin.Array<out|kotlin.Any?>?
  //   Public signature: /B.toArray|-8468800257910341540[0]
  //   Public signature debug description: toArray(){}kotlin.Array<out|kotlin.Any?>?
  /* fake */ override fun toArray(): Array<out Any?>?

  // CHECK JVM_IR:
  //   Mangled name: B#toArray(kotlin.Array<out|0:0?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /B.toArray|-7248906015406159030[0]
  //   Public signature debug description: toArray(kotlin.Array<out|0:0?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: Array<out T?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: B#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /B.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: B#toString(){}kotlin.String{EnhancedNullability}
  //   Public signature: /B.toString|7581629773206850948[0]
  //   Public signature debug description: toString(){}kotlin.String{EnhancedNullability}
  /* fake */ override fun toString(): @EnhancedNullability String

  // CHECK:
  //   Mangled name: B#addFirst(kotlin.Int?){}
  //   Public signature: /B.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  override fun addFirst(e: Int?): Unit

  // CHECK JVM_IR:
  //   Mangled name: B#reversed(){}java.util.LinkedHashSet<kotlin.Int>
  //   Public signature: /B.reversed|3766013119794934162[0]
  //   Public signature debug description: reversed(){}java.util.LinkedHashSet<kotlin.Int>
  override fun reversed(): LinkedHashSet<Int>

}

// CHECK:
//   Mangled name: C
//   Public signature: /C|null[0]
abstract class C : Java1 {
  // CHECK:
  //   Mangled name: C#<init>(){}
  //   Public signature: /C.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: C#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /C.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /C.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: C#addFirst(kotlin.Int?){}
  //   Public signature: /C.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: C#addLast(kotlin.Int?){}
  //   Public signature: /C.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: C#clear(){}
  //   Public signature: /C.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: C#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /C.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /C.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: C#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /C.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: C#getFirst(){}kotlin.Int?
  //   Public signature: /C.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: C#getLast(){}kotlin.Int?
  //   Public signature: /C.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: C#isEmpty(){}kotlin.Boolean
  //   Public signature: /C.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /C.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: C#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /C.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: C#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /C.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /C.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#removeFirst(){}kotlin.Int?
  //   Public signature: /C.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: C#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /C.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#removeLast(){}kotlin.Int?
  //   Public signature: /C.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: C#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /C.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: C#reversed(){}java.util.SequencedSet<kotlin.Int?>?
  //   Public signature: /C.reversed|687960305119769538[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int?>?
  abstract /* fake */ override fun reversed(): SequencedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: C#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /C.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: C#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /C.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: C#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /C.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK:
  //   Mangled name: C{}size
  //   Public signature: /C.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: C#<get-size>(){}kotlin.Int
    //   Public signature: /C.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: D
//   Public signature: /D|null[0]
abstract class D : Java1 {
  // CHECK:
  //   Mangled name: D{}size
  //   Public signature: /D.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: D#<get-size>(){}kotlin.Int
    //   Public signature: /D.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: D#<init>(kotlin.Int){}
  //   Public signature: /D.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(size: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: D#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /D.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /D.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: D#addFirst(kotlin.Int?){}
  //   Public signature: /D.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: D#addLast(kotlin.Int?){}
  //   Public signature: /D.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: D#clear(){}
  //   Public signature: /D.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: D#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /D.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /D.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: D#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /D.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: D#getLast(){}kotlin.Int?
  //   Public signature: /D.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: D#isEmpty(){}kotlin.Boolean
  //   Public signature: /D.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /D.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: D#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /D.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: D#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /D.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /D.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#removeFirst(){}kotlin.Int?
  //   Public signature: /D.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: D#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /D.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#removeLast(){}kotlin.Int?
  //   Public signature: /D.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: D#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /D.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: D#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /D.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: D#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /D.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: D#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /D.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: D#getFirst(){}kotlin.Int
  //   Public signature: /D.getFirst|-3582553967177118624[0]
  //   Public signature debug description: getFirst(){}kotlin.Int
  override fun getFirst(): Int

  // CHECK JVM_IR:
  //   Mangled name: D#reversed(){}java.util.SequencedSet<kotlin.Int>
  //   Public signature: /D.reversed|-4413749268436593978[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int>
  override fun reversed(): SequencedSet<Int>

}

// CHECK:
//   Mangled name: E
//   Public signature: /E|null[0]
abstract class E : Java1, Java2 {
  // CHECK:
  //   Mangled name: E#<init>(){}
  //   Public signature: /E.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: E#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /E.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /E.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: E#addFirst(kotlin.Int?){}
  //   Public signature: /E.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: E#addLast(kotlin.Int?){}
  //   Public signature: /E.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: E#clear(){}
  //   Public signature: /E.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: E#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /E.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /E.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: E#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /E.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: E#getFirst(){}kotlin.Int?
  //   Public signature: /E.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: E#getLast(){}kotlin.Int?
  //   Public signature: /E.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: E#isEmpty(){}kotlin.Boolean
  //   Public signature: /E.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /E.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: E#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /E.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: E#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /E.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /E.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#removeFirst(){}kotlin.Int?
  //   Public signature: /E.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: E#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /E.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#removeLast(){}kotlin.Int?
  //   Public signature: /E.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: E#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /E.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: E#reversed(){}java.util.SequencedSet<kotlin.Int?>?
  //   Public signature: /E.reversed|687960305119769538[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int?>?
  abstract /* fake */ override fun reversed(): SequencedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: E#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /E.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: E#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /E.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: E#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /E.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK:
  //   Mangled name: E{}size
  //   Public signature: /E.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: E#<get-size>(){}kotlin.Int
    //   Public signature: /E.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: F
//   Public signature: /F|null[0]
abstract class F : Java1, Java2 {
  // CHECK:
  //   Mangled name: F{}size
  //   Public signature: /F.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: F#<get-size>(){}kotlin.Int
    //   Public signature: /F.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: F#<init>(kotlin.Int){}
  //   Public signature: /F.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(size: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: F#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /F.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /F.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: F#addFirst(kotlin.Int?){}
  //   Public signature: /F.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: F#addLast(kotlin.Int?){}
  //   Public signature: /F.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: F#clear(){}
  //   Public signature: /F.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: F#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /F.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /F.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: F#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /F.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: F#getFirst(){}kotlin.Int?
  //   Public signature: /F.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: F#getLast(){}kotlin.Int?
  //   Public signature: /F.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: F#isEmpty(){}kotlin.Boolean
  //   Public signature: /F.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /F.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: F#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /F.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: F#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /F.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /F.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#removeFirst(){}kotlin.Int?
  //   Public signature: /F.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: F#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /F.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#removeLast(){}kotlin.Int?
  //   Public signature: /F.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: F#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /F.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: F#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /F.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: F#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /F.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: F#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /F.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: F#reversed(){}java.util.SequencedSet<kotlin.Int>
  //   Public signature: /F.reversed|-4413749268436593978[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int>
  override fun reversed(): SequencedSet<Int>

}

// CHECK:
//   Mangled name: G
//   Public signature: /G|null[0]
abstract class G : Java2, KotlinInterface {
  // CHECK:
  //   Mangled name: G#<init>(){}
  //   Public signature: /G.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: G#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /G.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /G.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: G#addFirst(kotlin.Int?){}
  //   Public signature: /G.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: G#addLast(kotlin.Int?){}
  //   Public signature: /G.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: G#clear(){}
  //   Public signature: /G.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: G#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /G.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /G.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: G#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /G.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: G#getFirst(){}kotlin.Int?
  //   Public signature: /G.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: G#getLast(){}kotlin.Int?
  //   Public signature: /G.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: G#isEmpty(){}kotlin.Boolean
  //   Public signature: /G.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /G.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: G#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /G.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: G#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /G.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /G.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#removeFirst(){}kotlin.Int?
  //   Public signature: /G.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: G#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /G.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#removeLast(){}kotlin.Int?
  //   Public signature: /G.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: G#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /G.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: G#reversed(){}java.util.SequencedSet<kotlin.Int?>?
  //   Public signature: /G.reversed|687960305119769538[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int?>?
  abstract /* fake */ override fun reversed(): SequencedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: G#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /G.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: G#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /G.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: G#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /G.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK:
  //   Mangled name: G{}size
  //   Public signature: /G.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: G#<get-size>(){}kotlin.Int
    //   Public signature: /G.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: H
//   Public signature: /H|null[0]
abstract class H : Java2, KotlinInterface {
  // CHECK:
  //   Mangled name: H{}size
  //   Public signature: /H.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: H#<get-size>(){}kotlin.Int
    //   Public signature: /H.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    override get

  // CHECK:
  //   Mangled name: H#<init>(kotlin.Int){}
  //   Public signature: /H.<init>|-5182794243525578284[0]
  //   Public signature debug description: <init>(kotlin.Int){}
  constructor(size: Int) /* primary */

  // CHECK JVM_IR:
  //   Mangled name: H#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /H.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /H.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: H#addFirst(kotlin.Int?){}
  //   Public signature: /H.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: H#addLast(kotlin.Int?){}
  //   Public signature: /H.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: H#clear(){}
  //   Public signature: /H.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: H#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /H.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /H.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: H#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /H.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: H#getFirst(){}kotlin.Int?
  //   Public signature: /H.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: H#getLast(){}kotlin.Int?
  //   Public signature: /H.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: H#isEmpty(){}kotlin.Boolean
  //   Public signature: /H.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /H.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: H#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /H.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: H#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /H.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /H.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#removeFirst(){}kotlin.Int?
  //   Public signature: /H.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: H#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /H.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#removeLast(){}kotlin.Int?
  //   Public signature: /H.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: H#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /H.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: H#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /H.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: H#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /H.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: H#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /H.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: H#reversed(){}java.util.SequencedSet<kotlin.Int>
  //   Public signature: /H.reversed|-4413749268436593978[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int>
  override fun reversed(): SequencedSet<Int>

}

// CHECK:
//   Mangled name: I
//   Public signature: /I|null[0]
abstract class I : Java3 {
  // CHECK:
  //   Mangled name: I#<init>(){}
  //   Public signature: /I.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: I#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /I.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /I.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: I#addFirst(kotlin.Int?){}
  //   Public signature: /I.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: I#addLast(kotlin.Int?){}
  //   Public signature: /I.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: I#clear(){}
  //   Public signature: /I.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: I#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /I.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /I.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: I#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /I.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: I#getFirst(){}kotlin.Int?
  //   Public signature: /I.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: I#getLast(){}kotlin.Int?
  //   Public signature: /I.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: I#isEmpty(){}kotlin.Boolean
  //   Public signature: /I.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /I.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: I#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /I.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: I#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /I.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /I.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#removeFirst(){}kotlin.Int?
  //   Public signature: /I.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: I#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /I.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#removeLast(){}kotlin.Int?
  //   Public signature: /I.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: I#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /I.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: I#reversed(){}java.util.SequencedSet<kotlin.Int?>?
  //   Public signature: /I.reversed|687960305119769538[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int?>?
  @Override
  /* fake */ override fun reversed(): SequencedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: I#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /I.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: I#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /I.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: I#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /I.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK:
  //   Mangled name: I{}size
  //   Public signature: /I.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: I#<get-size>(){}kotlin.Int
    //   Public signature: /I.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: J
//   Public signature: /J|null[0]
abstract class J : Java3 {
  // CHECK:
  //   Mangled name: J#<init>(){}
  //   Public signature: /J.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: J#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /J.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /J.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: J#addFirst(kotlin.Int?){}
  //   Public signature: /J.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: J#addLast(kotlin.Int?){}
  //   Public signature: /J.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: J#clear(){}
  //   Public signature: /J.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: J#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /J.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /J.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: J#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /J.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: J#getFirst(){}kotlin.Int?
  //   Public signature: /J.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: J#getLast(){}kotlin.Int?
  //   Public signature: /J.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: J#isEmpty(){}kotlin.Boolean
  //   Public signature: /J.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /J.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: J#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /J.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: J#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /J.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /J.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#removeFirst(){}kotlin.Int?
  //   Public signature: /J.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: J#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /J.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#removeLast(){}kotlin.Int?
  //   Public signature: /J.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: J#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /J.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: J#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /J.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: J#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /J.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: J#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /J.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK JVM_IR:
  //   Mangled name: J#reversed(){}java.util.SequencedSet<kotlin.Int>
  //   Public signature: /J.reversed|-4413749268436593978[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int>
  override fun reversed(): SequencedSet<Int>

  // CHECK:
  //   Mangled name: J{}size
  //   Public signature: /J.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: J#<get-size>(){}kotlin.Int
    //   Public signature: /J.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: KotlinInterface
//   Public signature: /KotlinInterface|null[0]
interface KotlinInterface : SequencedSet<Int> {
  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#add(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /KotlinInterface.add|4431728113375961098[0]
  //   Public signature debug description: add(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun add(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /KotlinInterface.addAll|-1888139159157516243[0]
  //   Public signature debug description: addAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun addAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: KotlinInterface#addFirst(kotlin.Int?){}
  //   Public signature: /KotlinInterface.addFirst|-2173470440078379794[0]
  //   Public signature debug description: addFirst(kotlin.Int?){}
  /* fake */ override fun addFirst(p0: Int?): Unit

  // CHECK:
  //   Mangled name: KotlinInterface#addLast(kotlin.Int?){}
  //   Public signature: /KotlinInterface.addLast|-5644727607669257675[0]
  //   Public signature debug description: addLast(kotlin.Int?){}
  /* fake */ override fun addLast(p0: Int?): Unit

  // CHECK:
  //   Mangled name: KotlinInterface#clear(){}
  //   Public signature: /KotlinInterface.clear|-6446868449915108923[0]
  //   Public signature debug description: clear(){}
  abstract /* fake */ override fun clear(): Unit

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#contains(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /KotlinInterface.contains|-8196452098964035048[0]
  //   Public signature debug description: contains(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override operator fun contains(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /KotlinInterface.containsAll|1478304594638728547[0]
  //   Public signature debug description: containsAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun containsAll(elements: Collection<Int?>): Boolean

  // CHECK:
  //   Mangled name: KotlinInterface#forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  //   Public signature: /KotlinInterface.forEach|5766969768772302175[0]
  //   Public signature debug description: forEach(java.util.function.Consumer<in|kotlin.Int?>?){}
  /* fake */ override fun forEach(p0: Consumer<in Int?>?): Unit

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#getFirst(){}kotlin.Int?
  //   Public signature: /KotlinInterface.getFirst|-7242180087307551226[0]
  //   Public signature debug description: getFirst(){}kotlin.Int?
  /* fake */ override fun getFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#getLast(){}kotlin.Int?
  //   Public signature: /KotlinInterface.getLast|9162126560290473313[0]
  //   Public signature debug description: getLast(){}kotlin.Int?
  /* fake */ override fun getLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#isEmpty(){}kotlin.Boolean
  //   Public signature: /KotlinInterface.isEmpty|-626562167393617703[0]
  //   Public signature debug description: isEmpty(){}kotlin.Boolean
  abstract /* fake */ override fun isEmpty(): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  //   Public signature: /KotlinInterface.iterator|7348807180272176918[0]
  //   Public signature debug description: iterator(){}kotlin.collections.MutableIterator<kotlin.Int?>
  abstract /* fake */ override operator fun iterator(): MutableIterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /KotlinInterface.parallelStream|-8395108522211591010[0]
  //   Public signature debug description: parallelStream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun parallelStream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#remove(kotlin.Int?){}kotlin.Boolean
  //   Public signature: /KotlinInterface.remove|-1581589590417291461[0]
  //   Public signature debug description: remove(kotlin.Int?){}kotlin.Boolean
  abstract /* fake */ override fun remove(element: Int?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /KotlinInterface.removeAll|-1419204743558010628[0]
  //   Public signature debug description: removeAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun removeAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#removeFirst(){}kotlin.Int?
  //   Public signature: /KotlinInterface.removeFirst|2188100118001713249[0]
  //   Public signature debug description: removeFirst(){}kotlin.Int?
  /* fake */ override fun removeFirst(): Int?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  //   Public signature: /KotlinInterface.removeIf|-6050971756324174635[0]
  //   Public signature debug description: removeIf(java.util.function.Predicate<in|kotlin.Int?{EnhancedNullability}>{EnhancedNullability}){}kotlin.Boolean
  /* fake */ override fun removeIf(p0: @EnhancedNullability Predicate<in @EnhancedNullability Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#removeLast(){}kotlin.Int?
  //   Public signature: /KotlinInterface.removeLast|-8509429199438418208[0]
  //   Public signature debug description: removeLast(){}kotlin.Int?
  /* fake */ override fun removeLast(): Int?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  //   Public signature: /KotlinInterface.retainAll|806199027664005128[0]
  //   Public signature debug description: retainAll(kotlin.collections.Collection<kotlin.Int?>){}kotlin.Boolean
  abstract /* fake */ override fun retainAll(elements: Collection<Int?>): Boolean

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#reversed(){}java.util.SequencedSet<kotlin.Int?>?
  //   Public signature: /KotlinInterface.reversed|687960305119769538[0]
  //   Public signature debug description: reversed(){}java.util.SequencedSet<kotlin.Int?>?
  abstract /* fake */ override fun reversed(): SequencedSet<Int?>?

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  //   Public signature: /KotlinInterface.spliterator|-3709449862893660489[0]
  //   Public signature debug description: spliterator(){}java.util.Spliterator<kotlin.Int?>{EnhancedNullability}
  /* fake */ override fun spliterator(): @EnhancedNullability Spliterator<Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  //   Public signature: /KotlinInterface.stream|1565529915260485250[0]
  //   Public signature debug description: stream(){}java.util.stream.Stream<kotlin.Int?{EnhancedNullability}>{EnhancedNullability}
  /* fake */ override fun stream(): @EnhancedNullability Stream<@EnhancedNullability Int?>

  // CHECK JVM_IR:
  //   Mangled name: KotlinInterface#toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  //   Public signature: /KotlinInterface.toArray|-1022881482544918047[0]
  //   Public signature debug description: toArray(java.util.function.IntFunction<kotlin.Array<out|0:0?>?>?){0ยง<kotlin.Any?>}kotlin.Array<out|0:0?>?
  /* fake */ override fun <T : Any?> toArray(p0: IntFunction<Array<out T?>?>?): Array<out T?>?

  // CHECK:
  //   Mangled name: KotlinInterface{}size
  //   Public signature: /KotlinInterface.size|-6253659984320132064[0]
  //   Public signature debug description: {}size
  abstract /* fake */ override val size: Int
    // CHECK JVM_IR:
    //   Mangled name: KotlinInterface#<get-size>(){}kotlin.Int
    //   Public signature: /KotlinInterface.size.<get-size>|-3941649985161900780[0]
    //   Public signature debug description: <get-size>(){}kotlin.Int
    abstract /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: #test(A;B;C;D;E;F;G;H;I;J){}
//   Public signature: /test|-6013363711736718138[0]
//   Public signature debug description: test(A;B;C;D;E;F;G;H;I;J){}
fun test(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J): Unit
