package

public/*package*/ /*synthesized*/ fun JSuper1(/*0*/ function: (kotlin.Int) -> kotlin.Unit): JSuper1
public/*package*/ /*synthesized*/ fun JSuper2(/*0*/ function: (kotlin.Int) -> kotlin.Unit): JSuper2
public/*package*/ /*synthesized*/ fun Sub1(/*0*/ function: (kotlin.Int) -> kotlin.Unit): Sub1
public/*package*/ /*synthesized*/ fun Sub2(/*0*/ function: (kotlin.Int) -> kotlin.Unit): Sub2
public/*package*/ /*synthesized*/ fun Sub3(/*0*/ function: (kotlin.Int) -> kotlin.Unit): Sub3

public/*package*/ interface JSuper1 {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun foo(/*0*/ jsuper1Name: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public/*package*/ interface JSuper2 {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun foo(/*0*/ jsuper2Name: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal interface KSuper {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    internal abstract fun foo(/*0*/ ksuperName: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public/*package*/ interface Sub1 : KSuper, JSuper1, JSuper2 {
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    java.lang.Override() public abstract override /*3*/ fun foo(/*0*/ ksuperName: kotlin.Int): kotlin.Unit
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

public/*package*/ interface Sub2 : JSuper1, KSuper, JSuper2 {
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    java.lang.Override() public abstract override /*3*/ fun foo(/*0*/ ksuperName: kotlin.Int): kotlin.Unit
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

public/*package*/ interface Sub3 : JSuper1, JSuper2, KSuper {
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    java.lang.Override() public abstract override /*3*/ fun foo(/*0*/ ksuperName: kotlin.Int): kotlin.Unit
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class SubSub1 : Sub1 {
    public constructor SubSub1()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ fun foo(/*0*/ ksuperName: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class SubSub2 : Sub2 {
    public constructor SubSub2()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ fun foo(/*0*/ ksuperName: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class SubSub3 : Sub3 {
    public constructor SubSub3()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ fun foo(/*0*/ ksuperName: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
