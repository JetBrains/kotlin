RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @Target[Unresolved](LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](ANNOTATION_CLASS#) public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](ANNOTATION_CLASS#) public final? [ResolvedTo(COMPANION_GENERATION)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](ANNOTATION_CLASS#) public final? [ResolvedTo(SUPER_TYPES)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[Types](ANNOTATION_CLASS#) public final? [ResolvedTo(TYPES)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[Types](ANNOTATION_CLASS#) public final [ResolvedTo(STATUS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[Types](ANNOTATION_CLASS#) public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[Types](ANNOTATION_CLASS#) public final [ResolvedTo(CONTRACTS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[Types](ANNOTATION_CLASS#) public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(RAW_FIR)] typealias MyTypeAlias = AnnotationTarget
    @R|kotlin/annotation/Target|[Types](ANNOTATION_CLASS#) public final [ResolvedTo(CONSTANT_EVALUATION)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(SUPER_TYPES)] typealias MyTypeAlias = R|kotlin/annotation/AnnotationTarget|
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(R|kotlin/annotation/AnnotationTarget.ANNOTATION_CLASS|)) public final [ResolvedTo(ANNOTATION_ARGUMENTS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(SUPER_TYPES)] typealias MyTypeAlias = R|kotlin/annotation/AnnotationTarget|
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(R|kotlin/annotation/AnnotationTarget.ANNOTATION_CLASS|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            super<R|kotlin/Any|>()
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] requiredAnnotationWithStarTypealiasedImportedArgument.kt
    public final [ResolvedTo(BODY_RESOLVE)] typealias MyTypeAlias = R|kotlin/annotation/AnnotationTarget|
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(R|kotlin/annotation/AnnotationTarget.ANNOTATION_CLASS|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyAnnotation] constructor(): R|testPack/MyAnnotation| {
            super<R|kotlin/Any|>()
        }

    }
