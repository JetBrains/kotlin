FILE: callsInPlace.kt
    public final fun test(): R|kotlin/Unit| {
        lval x: R|kotlin/Int|
        R|kotlin/run|<R|kotlin/Unit|>(<L> = run@fun <anonymous>(): R|kotlin/Unit| <kind=EXACTLY_ONCE>  {
            R|<local>/x| = Int(1)
        }
        )
        R|<local>/x|.R|kotlin/Int.inc|()
    }
    public final fun test_2(): R|kotlin/Unit| {
        R|kotlin/repeat|(Int(10), <L> = repeat@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Unit| <kind=UNKNOWN>  {
            ^ String(test_2)
        }
        )
    }
    public final fun test_3(): R|kotlin/Unit| {
        R|kotlin/repeat|(action = repeat@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Unit| <kind=UNKNOWN>  {
            ^ String(test_3)
        }
        , times = Int(10))
    }
    public final fun test_4(): R|kotlin/Unit| {
        Int(1).R|kotlin/takeUnless|<R|kotlin/Int|>(<L> = takeUnless@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Boolean| <kind=EXACTLY_ONCE>  {
            String(test_4)
            ^ CMP(>, R|<local>/it|.R|kotlin/Int.compareTo|(Int(0)))
        }
        )
    }
    public final fun test_5(): R|kotlin/Unit| {
        Int(1).R|kotlin/takeUnless|<R|kotlin/Int|>(predicate = takeUnless@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Boolean| <kind=EXACTLY_ONCE>  {
            String(test_5)
            ^ CMP(>, R|<local>/it|.R|kotlin/Int.compareTo|(Int(0)))
        }
        )
    }
    public final inline fun myRun(block1: R|() -> kotlin/Unit|, block2: R|() -> kotlin/Unit|): R|kotlin/Unit| {
        R|<local>/block1|.R|FakeOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
        R|<local>/block2|.R|FakeOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
    }
    public final fun test_6(): R|kotlin/Unit| {
        R|/myRun|(myRun@fun <anonymous>(): R|kotlin/Unit| <kind=UNKNOWN>  {
            ^ String(test_6_1)
        }
        , <L> = myRun@fun <anonymous>(): R|kotlin/Unit| <kind=UNKNOWN>  {
            ^ String(test_6_2)
        }
        )
    }
    public final fun test_7(): R|kotlin/Unit| {
        R|/myRun|(block2 = myRun@fun <anonymous>(): R|kotlin/Unit| <kind=UNKNOWN>  {
            ^ String(test_7_2)
        }
        , block1 = myRun@fun <anonymous>(): R|kotlin/Unit| <kind=UNKNOWN>  {
            ^ String(test_7_1)
        }
        )
    }
    public final fun myDummyRun(block: R|() -> kotlin/Unit|): R|kotlin/Unit| {
        R|<local>/block|.R|FakeOverride<kotlin/Function0.invoke: R|kotlin/Unit|>|()
    }
    public final fun test_8(): R|kotlin/Unit| {
        R|/myDummyRun|(<L> = myDummyRun@fun <anonymous>(): R|kotlin/Unit| {
            ^ String(test_8)
        }
        )
    }
