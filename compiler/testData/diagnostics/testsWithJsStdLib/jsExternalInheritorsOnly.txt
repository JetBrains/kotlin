package

public final class ClassXY : ExternalInterfaceX {
    public constructor ClassXY()
    public open override /*1*/ val x: kotlin.String = "X"
    public final val y: kotlin.String = "Y"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class ClassXY2 : ExternalInterfaceX, ExternalOpenClassX {
    public constructor ClassXY2()
    public final override /*2*/ /*fake_override*/ val x: kotlin.String
    public final val y: kotlin.String = "Y"
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class ClassXYZ : ExternalInterfaceXY {
    public constructor ClassXYZ()
    public open override /*1*/ val x: kotlin.String = "X"
    public open override /*1*/ val y: kotlin.String = "Y"
    public final val z: kotlin.String = "Z"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class ClassXZ : ExternalOpenClassX {
    public constructor ClassXZ()
    public final override /*1*/ /*fake_override*/ val x: kotlin.String
    public final val z: kotlin.String = "Z"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class ClassXZY : ExternalOpenClassXZ {
    public constructor ClassXZY()
    public final override /*1*/ /*fake_override*/ val x: kotlin.String
    public final val y: kotlin.String = "Y"
    public final override /*1*/ /*fake_override*/ val z: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final external class ExternalClassNameSpace {
    public constructor ExternalClassNameSpace()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    @kotlin.OptIn(markerClass = {kotlin.ExperimentalStdlibApi::class}) @kotlin.js.JsExternalInheritorsOnly public interface NestedInterfaceX {
        public abstract val x: kotlin.String
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface NestedInterfaceXY : ExternalClassNameSpace.NestedInterfaceX {
        public abstract override /*1*/ /*fake_override*/ val x: kotlin.String
        public abstract val y: kotlin.String
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public final external class ExternalClassXY : ExternalInterfaceX {
    public constructor ExternalClassXY()
    public open override /*1*/ val x: kotlin.String
    public final val y: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final external class ExternalClassXY2 : ExternalInterfaceX, ExternalOpenClassX {
    public constructor ExternalClassXY2()
    public final override /*2*/ /*fake_override*/ val x: kotlin.String
    public final val y: kotlin.String
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
}

public final external class ExternalClassXYZ : ExternalInterfaceXY {
    public constructor ExternalClassXYZ()
    public open override /*1*/ val x: kotlin.String
    public open override /*1*/ val y: kotlin.String
    public final val z: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.OptIn(markerClass = {kotlin.ExperimentalStdlibApi::class}) @kotlin.js.JsExternalInheritorsOnly public external interface ExternalInterfaceX {
    public abstract val x: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external interface ExternalInterfaceXY : ExternalInterfaceX {
    public abstract override /*1*/ /*fake_override*/ val x: kotlin.String
    public abstract val y: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external interface ExternalInterfaceXY2 : ExternalClassNameSpace.NestedInterfaceX {
    public abstract override /*1*/ /*fake_override*/ val x: kotlin.String
    public abstract val y: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external interface ExternalInterfaceXYZ2 : ExternalClassNameSpace.NestedInterfaceXY {
    public abstract override /*1*/ /*fake_override*/ val x: kotlin.String
    public abstract override /*1*/ /*fake_override*/ val y: kotlin.String
    public abstract val z: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external object ExternalObjectXY : ExternalInterfaceX {
    private constructor ExternalObjectXY()
    public open override /*1*/ val x: kotlin.String
    public final val y: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external object ExternalObjectXYZ : ExternalInterfaceXY {
    private constructor ExternalObjectXYZ()
    public open override /*1*/ val x: kotlin.String
    public open override /*1*/ val y: kotlin.String
    public final val z: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public external object ExternalObjectXZ : ExternalOpenClassX {
    private constructor ExternalObjectXZ()
    public final override /*1*/ /*fake_override*/ val x: kotlin.String
    public final val z: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.OptIn(markerClass = {kotlin.ExperimentalStdlibApi::class}) @kotlin.js.JsExternalInheritorsOnly public open external class ExternalOpenClassX {
    public constructor ExternalOpenClassX()
    public final val x: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open external class ExternalOpenClassXZ : ExternalOpenClassX {
    public constructor ExternalOpenClassXZ()
    public final override /*1*/ /*fake_override*/ val x: kotlin.String
    public final val z: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface InterfaceXY : ExternalInterfaceX {
    public abstract override /*1*/ /*fake_override*/ val x: kotlin.String
    public abstract val y: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface InterfaceXY2 : ExternalClassNameSpace.NestedInterfaceX {
    public abstract override /*1*/ /*fake_override*/ val x: kotlin.String
    public abstract val y: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface InterfaceXYZ : ExternalInterfaceXY {
    public abstract override /*1*/ /*fake_override*/ val x: kotlin.String
    public abstract override /*1*/ /*fake_override*/ val y: kotlin.String
    public abstract val z: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface InterfaceXYZ2 : ExternalClassNameSpace.NestedInterfaceXY {
    public abstract override /*1*/ /*fake_override*/ val x: kotlin.String
    public abstract override /*1*/ /*fake_override*/ val y: kotlin.String
    public abstract val z: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object ObjectXY : ExternalInterfaceX {
    private constructor ObjectXY()
    public open override /*1*/ val x: kotlin.String = "X"
    public final val y: kotlin.String = "Y"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object ObjectXYZ : ExternalInterfaceXY {
    private constructor ObjectXYZ()
    public open override /*1*/ val x: kotlin.String = "X"
    public open override /*1*/ val y: kotlin.String = "Y"
    public final val z: kotlin.String = "Z"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object ObjectXZ : ExternalOpenClassX {
    private constructor ObjectXZ()
    public final override /*1*/ /*fake_override*/ val x: kotlin.String
    public final val z: kotlin.String = "Z"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

