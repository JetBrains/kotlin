package

public val useX1: X.() -> kotlin.Unit
public val useX2: FunctionType /* = X.() -> kotlin.Unit */
public fun a(/*0*/ block: A.() -> kotlin.Unit): kotlin.Unit
public fun test(): kotlin.Unit
public fun x(/*0*/ block: X.() -> kotlin.Unit): kotlin.Unit

@MyDsl public final class A {
    public constructor A()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.DslMarker public final annotation class MyDsl : kotlin.Annotation {
    public constructor MyDsl()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@MyDsl public final class X {
    public constructor X()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
public typealias FunctionType = X.() -> kotlin.Unit
