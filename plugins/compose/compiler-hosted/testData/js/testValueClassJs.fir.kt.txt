// MODULE: lib
// FILE: Test.kt

value class Test {
  val i: Int
    field = i
    get

  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun default(): Test {
      return Test(i = 0)
    }

  }

  private constructor(i: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override operator fun equals(other: Any?): Boolean {
    when {
      other !is Test -> return false
    }
    val tmp_0: Test = other /*as Test */
    when {
      EQEQ(arg0 = <this>.#i, arg1 = tmp_0.#i).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#i.hashCode()
  }

  override fun toString(): String {
    return "Test(" + "i=" + <this>.#i + ")"
  }

}

@Composable
fun Content(/* var */ test: Test, /* var */ $composer: Composer?, $changed: Int, $default: Int) {
  var test: Test = test
  var $composer: Composer? = $composer
  { // BLOCK
    $composer = $composer.startRestartGroup(key = 1970342417)
    sourceInformation(composer = $composer, sourceInformation = "C(Content)P(0:Test):Test.kt")
  }
  val $dirty: Int = $changed
  when {
    $composer.shouldExecute(parametersChanged = EQEQ(arg0 = $dirty.and(other = 1), arg1 = 0).not(), flags = $dirty.and(other = 1)) -> { // BLOCK
      $composer.startDefaults()
      when {
        when {
          EQEQ(arg0 = $changed.and(other = 1), arg1 = 0) -> true
          else -> $composer.<get-defaultsInvalid>()
        } -> // COMPOSITE {
        when {
          EQEQ(arg0 = $default.and(other = 1), arg1 = 0).not() -> { // BLOCK
            test = Companion.default()
            $dirty = $dirty.and(other = -15)
          }
        }
        // }
        else -> { // BLOCK
          $composer.skipToGroupEnd()
          when {
            EQEQ(arg0 = $default.and(other = 1), arg1 = 0).not() -> $dirty = $dirty.and(other = -15)
          }
        }
      }
      $composer.endDefaults()
      when {
        isTraceInProgress() -> traceEventStart(key = 1970342417, dirty1 = $dirty, dirty2 = -1, info = "Content (Test.kt:12)")
      }
      when {
        isTraceInProgress() -> traceEventEnd()
      }
    }
    else -> $composer.skipToGroupEnd()
  }
  { // BLOCK
    { // BLOCK
      val tmp_1: ScopeUpdateScope? = $composer.endRestartGroup()
      when {
        EQEQ(arg0 = tmp_1, arg1 = null) -> null
        else -> tmp_1.updateScope(block = local fun <anonymous>($composer: Composer?, $force: Int) {
          return Content(test = test, $composer = $composer, $changed = updateChangedFlags(flags = $changed.or(other = 1)), $default = $default)
        }
)
      }
    }
  }
}

@Composable
@Deprecated(message = "Binary compatibility stub for default parameters", level = DeprecationLevel.HIDDEN)
fun Content(/* var */ test: Test?, /* var */ $composer: Composer?, $changed: Int, $default: Int) {
  var test: Test? = test
  var $composer: Composer? = $composer
  return Content(test = { // BLOCK
    val tmp_2: Test? = test
    when {
      EQEQ(arg0 = tmp_2, arg1 = null).not() -> tmp_2
      else -> // COMPOSITE {
      Test(i = 0)
      // }
    }
  }, $composer = $composer, $changed = $changed, $default = $default)
}

// MODULE: main
// FILE: main.kt

@Composable
fun Test(/* var */ $composer: Composer?, $changed: Int) {
  var $composer: Composer? = $composer
  { // BLOCK
    $composer = $composer.startRestartGroup(key = -1205517295)
    sourceInformation(composer = $composer, sourceInformation = "C(Test)19@125L9:main.kt")
  }
  when {
    $composer.shouldExecute(parametersChanged = EQEQ(arg0 = $changed, arg1 = 0).not(), flags = $changed.and(other = 1)) -> { // BLOCK
      when {
        isTraceInProgress() -> traceEventStart(key = -1205517295, dirty1 = $changed, dirty2 = -1, info = "Test (main.kt:18)")
      }
      Content(test = // COMPOSITE {
      null
      // }, $composer = $composer, $changed = 0, $default = 1)
      when {
        isTraceInProgress() -> traceEventEnd()
      }
    }
    else -> $composer.skipToGroupEnd()
  }
  { // BLOCK
    { // BLOCK
      val tmp_0: ScopeUpdateScope? = $composer.endRestartGroup()
      when {
        EQEQ(arg0 = tmp_0, arg1 = null) -> null
        else -> tmp_0.updateScope(block = local fun <anonymous>($composer: Composer?, $force: Int) {
          return Test($composer = $composer, $changed = updateChangedFlags(flags = $changed.or(other = 1)))
        }
)
      }
    }
  }
}

fun box(): String {
  return "OK"
}

