/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See native/swift/sir/tree-generator/Readme.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.sir.visitors

import org.jetbrains.kotlin.sir.*

/**
 * Auto-generated by [org.jetbrains.kotlin.sir.tree.generator.printer.VisitorVoidPrinter]
 */
abstract class SirVisitorVoid : SirVisitor<Unit, Nothing?>() {

    final override fun visitElement(element: SirElement, data: Nothing?) {
        visitElement(element)
    }

    open fun visitElement(element: SirElement) {
    }

    final override fun visitDeclarationContainer(declarationContainer: SirDeclarationContainer, data: Nothing?) {
        visitDeclarationContainer(declarationContainer)
    }

    open fun visitDeclarationContainer(declarationContainer: SirDeclarationContainer) {
        visitElement(declarationContainer)
    }

    final override fun visitMutableDeclarationContainer(mutableDeclarationContainer: SirMutableDeclarationContainer, data: Nothing?) {
        visitMutableDeclarationContainer(mutableDeclarationContainer)
    }

    open fun visitMutableDeclarationContainer(mutableDeclarationContainer: SirMutableDeclarationContainer) {
        visitElement(mutableDeclarationContainer)
    }

    final override fun visitModule(module: SirModule, data: Nothing?) {
        visitModule(module)
    }

    open fun visitModule(module: SirModule) {
        visitElement(module)
    }

    final override fun visitDeclaration(declaration: SirDeclaration, data: Nothing?) {
        visitDeclaration(declaration)
    }

    open fun visitDeclaration(declaration: SirDeclaration) {
        visitElement(declaration)
    }

    final override fun visitExtension(extension: SirExtension, data: Nothing?) {
        visitExtension(extension)
    }

    open fun visitExtension(extension: SirExtension) {
        visitDeclaration(extension)
    }

    final override fun visitNamedDeclaration(declaration: SirNamedDeclaration, data: Nothing?) {
        visitNamedDeclaration(declaration)
    }

    open fun visitNamedDeclaration(declaration: SirNamedDeclaration) {
        visitDeclaration(declaration)
    }

    final override fun visitEnum(enum: SirEnum, data: Nothing?) {
        visitEnum(enum)
    }

    open fun visitEnum(enum: SirEnum) {
        visitNamedDeclaration(enum)
    }

    final override fun visitStruct(struct: SirStruct, data: Nothing?) {
        visitStruct(struct)
    }

    open fun visitStruct(struct: SirStruct) {
        visitNamedDeclaration(struct)
    }

    final override fun visitClass(klass: SirClass, data: Nothing?) {
        visitClass(klass)
    }

    open fun visitClass(klass: SirClass) {
        visitNamedDeclaration(klass)
    }

    final override fun visitCallable(callable: SirCallable, data: Nothing?) {
        visitCallable(callable)
    }

    open fun visitCallable(callable: SirCallable) {
        visitDeclaration(callable)
    }

    final override fun visitInit(init: SirInit, data: Nothing?) {
        visitInit(init)
    }

    open fun visitInit(init: SirInit) {
        visitCallable(init)
    }

    final override fun visitFunction(function: SirFunction, data: Nothing?) {
        visitFunction(function)
    }

    open fun visitFunction(function: SirFunction) {
        visitCallable(function)
    }

    final override fun visitAccessor(accessor: SirAccessor, data: Nothing?) {
        visitAccessor(accessor)
    }

    open fun visitAccessor(accessor: SirAccessor) {
        visitCallable(accessor)
    }

    final override fun visitGetter(getter: SirGetter, data: Nothing?) {
        visitGetter(getter)
    }

    open fun visitGetter(getter: SirGetter) {
        visitAccessor(getter)
    }

    final override fun visitSetter(setter: SirSetter, data: Nothing?) {
        visitSetter(setter)
    }

    open fun visitSetter(setter: SirSetter) {
        visitAccessor(setter)
    }

    final override fun visitVariable(variable: SirVariable, data: Nothing?) {
        visitVariable(variable)
    }

    open fun visitVariable(variable: SirVariable) {
        visitDeclaration(variable)
    }

    final override fun visitImport(import: SirImport, data: Nothing?) {
        visitImport(import)
    }

    open fun visitImport(import: SirImport) {
        visitDeclaration(import)
    }
}
