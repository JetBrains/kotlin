package

public fun box(): kotlin.String
public fun </*0*/ T> T.id(): T

package j {

    public open class J {
        public constructor J()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public open fun test(/*0*/ pp: j.PP!): kotlin.String!
    }

    public/*package*/ interface PP {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public abstract fun test(): kotlin.String!
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public open class PPImpl : j.PP {
        public constructor PPImpl()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        @java.lang.Override public open override /*1*/ fun test(): kotlin.String!
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
