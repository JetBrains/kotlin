/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.frontend.api.symbols;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/idea-frontend-fir/testData/symbolsByPsi")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class SymbolsByPsiBuildingTestGenerated extends AbstractSymbolsByPsiBuildingTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInSymbolsByPsi() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/idea-frontend-fir/testData/symbolsByPsi"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @TestMetadata("class.kt")
    public void testClass() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbolsByPsi/class.kt");
    }

    @TestMetadata("classMembes.kt")
    public void testClassMembes() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbolsByPsi/classMembes.kt");
    }

    @TestMetadata("classWithTypeParams.kt")
    public void testClassWithTypeParams() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbolsByPsi/classWithTypeParams.kt");
    }

    @TestMetadata("extensionFunction.kt")
    public void testExtensionFunction() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbolsByPsi/extensionFunction.kt");
    }

    @TestMetadata("function.kt")
    public void testFunction() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbolsByPsi/function.kt");
    }

    @TestMetadata("functionWithTypeParams.kt")
    public void testFunctionWithTypeParams() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbolsByPsi/functionWithTypeParams.kt");
    }

    @TestMetadata("implicitReturn.kt")
    public void testImplicitReturn() throws Exception {
        runTest("idea/idea-frontend-fir/testData/symbolsByPsi/implicitReturn.kt");
    }
}
