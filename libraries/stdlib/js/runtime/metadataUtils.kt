/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */
package kotlin.js

// There was a problem with per-module compilation (KT-55758) when the top-level state (globalInterfaceId) was reinitialized during stdlib module initialization
// As a result we miss already incremented globalInterfaceId and had the same interfaceIds in two different modules
// So, to keep the state consistent it was moved into the variable without initializer and function
@Suppress("MUST_BE_INITIALIZED")
private var globalInterfaceId: dynamic

private fun generateInterfaceId(): Int {
    if (globalInterfaceId === VOID) {
        globalInterfaceId = 0
    }
    globalInterfaceId = globalInterfaceId.unsafeCast<Int>() + 1
    return globalInterfaceId.unsafeCast<Int>()
}

@Suppress("MUST_BE_INITIALIZED")
private var globalAssociatedObjectId: dynamic

/**
 * Calls to this function are only emitted when compiling incrementally.
 */
@Suppress("unused") // Usages are generated by the compiler
internal fun nextAssociatedObjectId(): Int {
    if (globalAssociatedObjectId === VOID) {
        globalAssociatedObjectId = 0
    }
    globalAssociatedObjectId = globalAssociatedObjectId.unsafeCast<Int>() + 1
    return globalAssociatedObjectId.unsafeCast<Int>()
}

internal const val METADATA_KIND_INTERFACE = "interface"
internal const val METADATA_KIND_OBJECT = "object"
internal const val METADATA_KIND_CLASS = "class"

@Deprecated(level = DeprecationLevel.HIDDEN, message = "TODO: Remove this after bootstrap advance")
internal fun initMetadataFor(
    kind: String,
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadataWithDynamicInterfaceMask(
        kind,
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects
    )
}

private fun initMetadataWithDynamicInterfaceMask(
    kind: String,
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadata(
        kind,
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects,
        getInterfaceMask = ::implement,
    )
}

private fun initMetadataWithStaticInterfaceMask(
    kind: String,
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<Int>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadata(
        kind,
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects,
        getInterfaceMask = { it.toBitMask() },
    )
}

private inline fun <Interfaces : Any> initMetadata(
    kind: String,
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Interfaces?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic,
    getInterfaceMask: (Interfaces) -> BitMask,
) {
    if (parent != null) {
        js("""
          ctor.prototype = Object.create(parent.prototype)
          ctor.prototype.constructor = ctor;
        """)
    }

    val metadata = createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity)
    ctor.`$metadata$` = metadata
    if (interfaces != null) {
        val receiver = if (metadata.iid != VOID) ctor else ctor.prototype
        receiver.`$imask$` = getInterfaceMask(interfaces)
    }
}

@Deprecated(level = DeprecationLevel.HIDDEN, message = "TODO: Remove this after bootstrap advance")
internal fun initMetadataForClass(
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadataForClassWithDynamicInterfaceMask(
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects
    )
}

internal fun initMetadataForClassWithDynamicInterfaceMask(
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadataWithDynamicInterfaceMask(
        METADATA_KIND_CLASS,
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects,
    )
}

internal fun initMetadataForClassWithStaticInterfaceMask(
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadataWithStaticInterfaceMask(
        METADATA_KIND_CLASS,
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects,
    )
}

@Deprecated(level = DeprecationLevel.HIDDEN, message = "TODO: Remove this after bootstrap advance")
internal fun initMetadataForObject(
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadataForObjectWithDynamicInterfaceMask(
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects
    )
}

internal fun initMetadataForObjectWithDynamicInterfaceMask(
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadataWithDynamicInterfaceMask(
        METADATA_KIND_OBJECT,
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects
    )
}

@Suppress("unused") // usages are generated by the compiler
internal fun initMetadataForObjectWithStaticInterfaceMask(
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<Int>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadataWithStaticInterfaceMask(
        METADATA_KIND_OBJECT,
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects
    )
}

// We only emit metadata for interfaces when the interface mask is generated dynamically, so
// this function doesn't need the "dynamic" and "static" versions.
@Suppress("unused") // usages are generated by the compiler
internal fun initMetadataForInterface(
    ctor: Ctor,
    name: String?,
    defaultConstructor: dynamic,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
    associatedObjectKey: Number?,
    associatedObjects: dynamic
) {
    initMetadataWithDynamicInterfaceMask(
        METADATA_KIND_INTERFACE,
        ctor,
        name,
        defaultConstructor,
        parent,
        interfaces,
        suspendArity,
        associatedObjectKey,
        associatedObjects
    )
}

internal external interface InterfaceIdMetadata {
    val name: String
    val associatedObjects: dynamic
}

// The metadata of interfaces that were used in reflection at least once
@Suppress("MUST_BE_INITIALIZED")
private var interfaceIdMetadata: dynamic

@Suppress("unused") // usages are generated by the compiler
internal fun initMetadataForInterfaceId(id: Int, name: String, associatedObjects: dynamic) {
    if (interfaceIdMetadata === VOID) {
        interfaceIdMetadata = js("{}")
    }
    interfaceIdMetadata[id] = js(
        """
        {
            name: name,
            associatedObjects: associatedObjects
        }
        """
    )
}

internal fun getInterfaceIdMetadata(interfaceId: Int): InterfaceIdMetadata? {
    if (interfaceIdMetadata == null) return null
    return interfaceIdMetadata[interfaceId]
}

@Deprecated(level = DeprecationLevel.HIDDEN, message = "TODO: Remove this after bootstrap advance")
internal fun initMetadataForLambda(ctor: Ctor, parent: Ctor?, interfaces: Array<dynamic>?, suspendArity: Array<Int>?) {
    initMetadataForLambdaWithDynamicInterfaceMask(ctor, parent, interfaces, suspendArity)
}

internal fun initMetadataForLambdaWithDynamicInterfaceMask(
    ctor: Ctor,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
) {
    initMetadataForClassWithDynamicInterfaceMask(ctor, "Lambda", VOID, parent, interfaces, suspendArity, VOID, VOID)
}

@Suppress("unused") // usages are generated by the compiler
internal fun initMetadataForLambdaWithStaticInterfaceMask(
    ctor: Ctor,
    parent: Ctor?,
    interfaces: Array<Int>?,
    suspendArity: Array<Int>?,
) {
    initMetadataForClassWithStaticInterfaceMask(ctor, "Lambda", VOID, parent, interfaces, suspendArity, VOID, VOID)
}

@Deprecated(level = DeprecationLevel.HIDDEN, message = "TODO: Remove this after bootstrap advance")
internal fun initMetadataForFunctionReference(ctor: Ctor, parent: Ctor?, interfaces: Array<dynamic>?, suspendArity: Array<Int>?) {
    initMetadataForFunctionReferenceWithDynamicInterfaceMask(ctor, parent, interfaces, suspendArity)
}

internal fun initMetadataForFunctionReferenceWithDynamicInterfaceMask(
    ctor: Ctor,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
) {
    initMetadataForClassWithDynamicInterfaceMask(ctor, "FunctionReference", VOID, parent, interfaces, suspendArity, VOID, VOID)
}

@Suppress("unused") // usages are generated by the compiler
internal fun initMetadataForFunctionReferenceWithStaticInterfaceMask(
    ctor: Ctor,
    parent: Ctor?,
    interfaces: Array<Int>?,
    suspendArity: Array<Int>?,
) {
    initMetadataForClassWithStaticInterfaceMask(ctor, "FunctionReference", VOID, parent, interfaces, suspendArity, VOID, VOID)
}

@Deprecated(level = DeprecationLevel.HIDDEN, message = "TODO: Remove this after bootstrap advance")
internal fun initMetadataForCoroutine(ctor: Ctor, parent: Ctor?, interfaces: Array<dynamic>?, suspendArity: Array<Int>?) {
    initMetadataForCoroutineWithDynamicInterfaceMask(ctor, parent, interfaces, suspendArity)
}

internal fun initMetadataForCoroutineWithDynamicInterfaceMask(
    ctor: Ctor,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
) {
    initMetadataForClassWithDynamicInterfaceMask(ctor, "Coroutine", VOID, parent, interfaces, suspendArity, VOID, VOID)
}

@Suppress("unused") // usages are generated by the compiler
internal fun initMetadataForCoroutineWithStaticInterfaceMask(
    ctor: Ctor,
    parent: Ctor?,
    interfaces: Array<Int>?,
    suspendArity: Array<Int>?,
) {
    initMetadataForClassWithStaticInterfaceMask(ctor, "Coroutine", VOID, parent, interfaces, suspendArity, VOID, VOID)
}

@Deprecated(level = DeprecationLevel.HIDDEN, message = "TODO: Remove this after bootstrap advance")
internal fun initMetadataForCompanion(ctor: Ctor, parent: Ctor?, interfaces: Array<dynamic>?, suspendArity: Array<Int>?) {
    initMetadataForCompanionWithDynamicInterfaceMask(ctor, parent, interfaces, suspendArity)
}

internal fun initMetadataForCompanionWithDynamicInterfaceMask(
    ctor: Ctor,
    parent: Ctor?,
    interfaces: Array<dynamic>?,
    suspendArity: Array<Int>?,
) {
    initMetadataForObjectWithDynamicInterfaceMask(ctor, "Companion", VOID, parent, interfaces, suspendArity, VOID, VOID)
}
@Suppress("unused") // usages are generated by the compiler
internal fun initMetadataForCompanionWithStaticInterfaceMask(
    ctor: Ctor,
    parent: Ctor?,
    interfaces: Array<Int>?,
    suspendArity: Array<Int>?,
) {
    initMetadataForObjectWithStaticInterfaceMask(ctor, "Companion", VOID, parent, interfaces, suspendArity, VOID, VOID)
}

// Seems like we need to disable this check if variables are used inside js annotation
@Suppress("UNUSED_PARAMETER", "UNUSED_VARIABLE")
internal fun createMetadata(
    kind: String,
    name: String?,
    defaultConstructor: dynamic,
    associatedObjectKey: Number?,
    associatedObjects: dynamic,
    suspendArity: Array<Int>?,
): Metadata {
    val undef = VOID
    val iid = if (kind == METADATA_KIND_INTERFACE) generateInterfaceId() else VOID
    return js("""({
    kind: kind,
    simpleName: name,
    associatedObjectKey: associatedObjectKey,
    associatedObjects: associatedObjects,
    suspendArity: suspendArity,
    ${'$'}kClass$: undef,
    defaultConstructor: defaultConstructor,
    iid: iid
})""")
}

internal external interface Metadata {
    val kind: String
    // This field gives fast access to the prototype of metadata owner (Object.getPrototypeOf())
    // Can be pre-initialized or lazy initialized and then should be immutable
    val simpleName: String?
    val associatedObjectKey: Number?
    val associatedObjects: dynamic
    val suspendArity: Array<Int>?
    val iid: Int?

    var `$kClass$`: dynamic
    val defaultConstructor: dynamic

    var errorInfo: Int? // Bits set for overridden properties: "message" => 0x1, "cause" => 0x2
}
