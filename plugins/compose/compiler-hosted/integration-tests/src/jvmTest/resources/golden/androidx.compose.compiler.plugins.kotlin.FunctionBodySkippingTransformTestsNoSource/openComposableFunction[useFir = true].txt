//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

open class Open {
    @Composable open fun Test() {}
}

class Impl : Open() {
    @Composable override fun Test() {
        super.Test()
    }
}

open class OpenImpl : Open() {
    @Composable override fun Test() {
        super.Test()
    }
}

//
// Transformed IR
// ------------------------------------------

@StabilityInferred(parameters = 1)
open class Open {
  @Composable
  @FunctionKeyMeta(key = 281716636, startOffset = 111, endOffset = 124)
  open fun Test(%composer: Composer?, %changed: Int) {
    %composer.startReplaceGroup(<>)
    %composer.endReplaceGroup()
  }
  static val %stable: Int = 0
}
@StabilityInferred(parameters = 1)
class Impl : Open {
  @Composable
  @FunctionKeyMeta(key = -874036878, startOffset = 211, endOffset = 274)
  override fun Test(%composer: Composer?, %changed: Int) {
    %composer = %composer.startRestartGroup(<>)
    val %dirty = %changed
    if (%changed and 0b0110 == 0) {
      %dirty = %dirty or if (%composer.changed(<this>)) 0b0100 else 0b0010
    }
    if (%composer.shouldExecute(%dirty and 0b0011 != 0b0010, %dirty and 0b0001)) {
      super<Open>.Test(%composer, 0b1110 and %dirty)
    } else {
      %composer.skipToGroupEnd()
    }
    val tmp0_rcvr = <this>
    %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
      tmp0_rcvr.Test(%composer, updateChangedFlags(%changed or 0b0001))
    }
  }
  static val %stable: Int = 0
}
@StabilityInferred(parameters = 1)
open class OpenImpl : Open {
  @Composable
  @FunctionKeyMeta(key = -46706340, startOffset = 370, endOffset = 433)
  override fun Test(%composer: Composer?, %changed: Int) {
    %composer.startReplaceGroup(<>)
    super<Open>.Test(%composer, 0b1110 and %changed)
    %composer.endReplaceGroup()
  }
  static val %stable: Int = 0
}
