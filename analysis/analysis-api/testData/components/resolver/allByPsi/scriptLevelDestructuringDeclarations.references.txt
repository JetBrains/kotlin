KtNameReferenceExpression(8,12): 'util'
  KtSimpleNameReference:
    package util

KtNameReferenceExpression(45,51): 'String'
  KtSimpleNameReference:
    (in kotlin) class String : kotlin.Comparable<kotlin.String>, kotlin.CharSequence, java.io.Serializable

KtNameReferenceExpression(102,106): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(107,125): '"a type $constant"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(116,124): 'constant'
  KtSimpleNameReference:
    (in util) const val constant: kotlin.String

KtNameReferenceExpression(127,131): 'List'
  KtSimpleNameReference:
    (in kotlin.collections) interface List<out E> : kotlin.collections.Collection<E>

KtNameReferenceExpression(133,137): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(138,163): '"a nested type $constant"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(154,162): 'constant'
  KtSimpleNameReference:
    (in util) const val constant: kotlin.String

KtNameReferenceExpression(165,175): 'Collection'
  KtSimpleNameReference:
    (in kotlin.collections) interface Collection<out E> : kotlin.collections.Iterable<E>

KtNameReferenceExpression(177,181): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(182,214): '"a nested nested type $constant"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(205,213): 'constant'
  KtSimpleNameReference:
    (in util) const val constant: kotlin.String

KtNameReferenceExpression(216,222): 'String'
  KtSimpleNameReference:
    (in kotlin) class String : kotlin.Comparable<kotlin.String>, kotlin.CharSequence, java.io.Serializable

KtNameReferenceExpression(235,239): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(240,258): '"b type $constant"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(249,257): 'constant'
  KtSimpleNameReference:
    (in util) const val constant: kotlin.String

KtNameReferenceExpression(260,265): 'Array'
  KtSimpleNameReference:
    (in kotlin) class Array<T> : kotlin.Cloneable, java.io.Serializable

KtNameReferenceExpression(267,271): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(272,297): '"b nested type $constant"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(288,296): 'constant'
  KtSimpleNameReference:
    (in util) const val constant: kotlin.String

KtNameReferenceExpression(299,303): 'List'
  KtSimpleNameReference:
    (in kotlin.collections) interface List<out E> : kotlin.collections.Collection<E>

KtNameReferenceExpression(305,309): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(310,342): '"b nested nested type $constant"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(333,341): 'constant'
  KtSimpleNameReference:
    (in util) const val constant: kotlin.String

KtNameReferenceExpression(344,347): 'Int'
  KtSimpleNameReference:
    (in kotlin) class Intprivate constructor : kotlin.Number(), kotlin.Comparable<kotlin.Int>, java.io.Serializable

KtNameReferenceExpression(377,381): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(382,397): '"destr 1 $prop"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(392,396): 'prop'
  KtSimpleNameReference:
    (in util) const val prop: kotlin.String

KtDestructuringDeclarationEntry(404,422): '@Anno("a $prop") a'
  KtDestructuringDeclarationReference:
    0: (in util) val a: @util.Anno(str = "a type s") kotlin.collections.List<@util.Anno(str = "a nested type s") kotlin.collections.Collection<@util.Anno(str = "a nested nested type s") kotlin.String>>?
    1: (in util.Pair) operator fun component1(): @util.Anno(str = "a type s") kotlin.collections.List<@util.Anno(str = "a nested type s") kotlin.collections.Collection<@util.Anno(str = "a nested nested type s") kotlin.String>>?

KtNameReferenceExpression(405,409): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(410,419): '"a $prop"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(414,418): 'prop'
  KtSimpleNameReference:
    (in util) const val prop: kotlin.String

KtDestructuringDeclarationEntry(424,442): '@Anno("b $prop") b'
  KtDestructuringDeclarationReference:
    0: (in util) val b: @util.Anno(str = "b type s") kotlin.Array<@util.Anno(str = "b nested type s") kotlin.collections.List<@util.Anno(str = "b nested nested type s") kotlin.Int>>?
    1: (in util.Pair) operator fun component2(): @util.Anno(str = "b type s") kotlin.Array<@util.Anno(str = "b nested type s") kotlin.collections.List<@util.Anno(str = "b nested nested type s") kotlin.Int>>?

KtNameReferenceExpression(425,429): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(430,439): '"b $prop"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(434,438): 'prop'
  KtSimpleNameReference:
    (in util) const val prop: kotlin.String

KtCallExpression(446,462): 'Pair(null, null)'
  KtInvokeFunctionReference:
    Nothing (Unresolved reference)

KtNameReferenceExpression(446,450): 'Pair'
  KtSimpleNameReference:
    (in util.Pair) constructor(a: @util.Anno(str = "a type s") kotlin.collections.List<@util.Anno(str = "a nested type s") kotlin.collections.Collection<@util.Anno(str = "a nested nested type s") kotlin.String>>?, b: @util.Anno(str = "b type s") kotlin.Array<@util.Anno(str = "b nested type s") kotlin.collections.List<@util.Anno(str = "b nested nested type s") kotlin.Int>>?)

KtNameReferenceExpression(465,469): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(470,485): '"destr 1 $prop"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(480,484): 'prop'
  KtSimpleNameReference:
    (in util) const val prop: kotlin.String

KtDestructuringDeclarationEntry(492,510): '@Anno("c $prop") c'
  KtDestructuringDeclarationReference:
    0: (in util) val c: @util.Anno(str = "a type s") kotlin.collections.List<@util.Anno(str = "a nested type s") kotlin.collections.Collection<@util.Anno(str = "a nested nested type s") kotlin.String>>?
    1: (in util.Pair) operator fun component1(): @util.Anno(str = "a type s") kotlin.collections.List<@util.Anno(str = "a nested type s") kotlin.collections.Collection<@util.Anno(str = "a nested nested type s") kotlin.String>>?

KtNameReferenceExpression(493,497): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(498,507): '"c $prop"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(502,506): 'prop'
  KtSimpleNameReference:
    (in util) const val prop: kotlin.String

KtDestructuringDeclarationEntry(512,530): '@Anno("d $prop") d'
  KtDestructuringDeclarationReference:
    0: (in util) val d: @util.Anno(str = "b type s") kotlin.Array<@util.Anno(str = "b nested type s") kotlin.collections.List<@util.Anno(str = "b nested nested type s") kotlin.Int>>?
    1: (in util.Pair) operator fun component2(): @util.Anno(str = "b type s") kotlin.Array<@util.Anno(str = "b nested type s") kotlin.collections.List<@util.Anno(str = "b nested nested type s") kotlin.Int>>?

KtNameReferenceExpression(513,517): 'Anno'
  KtSimpleNameReference:
    (in util.Anno) constructor(str: kotlin.String)

KtValueArgument(518,527): '"d $prop"'
  KtDefaultAnnotationArgumentReference:
    str: kotlin.String

KtNameReferenceExpression(522,526): 'prop'
  KtSimpleNameReference:
    (in util) const val prop: kotlin.String

KtCallExpression(534,550): 'Pair(null, null)'
  KtInvokeFunctionReference:
    Nothing (Unresolved reference)

KtNameReferenceExpression(534,538): 'Pair'
  KtSimpleNameReference:
    (in util.Pair) constructor(a: @util.Anno(str = "a type s") kotlin.collections.List<@util.Anno(str = "a nested type s") kotlin.collections.Collection<@util.Anno(str = "a nested nested type s") kotlin.String>>?, b: @util.Anno(str = "b type s") kotlin.Array<@util.Anno(str = "b nested type s") kotlin.collections.List<@util.Anno(str = "b nested nested type s") kotlin.Int>>?)
