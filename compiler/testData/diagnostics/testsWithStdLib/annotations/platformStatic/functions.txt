package

internal final class A {
    public constructor A()
    kotlin.platform.platformStatic() internal final fun a4(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal final fun test(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    internal object A {
        private constructor A()
        kotlin.platform.platformStatic() internal final fun a2(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    internal companion object Companion {
        private constructor Companion()
        kotlin.platform.platformStatic() internal final fun a1(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

internal interface B {
    kotlin.platform.platformStatic() internal open fun a4(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal open fun test(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    internal object A {
        private constructor A()
        kotlin.platform.platformStatic() internal final fun a2(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    internal companion object Companion {
        private constructor Companion()
        kotlin.platform.platformStatic() internal final fun a1(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
