FILE: inapplicable.kt
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun wrongFalse(x: R|kotlin/String?|): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(FALSE) -> x != null
        >
     {
        [StubStatement]
        ^wrongFalse Boolean(true)
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun wrongTrue(x: R|kotlin/String?|): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null
        >
     {
        [StubStatement]
        ^wrongTrue Boolean(false)
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun nullableConstant(x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(NULL) -> x != null
        >
     {
        [StubStatement]
        ^nullableConstant Int(1)
    }
    public final fun string(): R|kotlin/String| {
        ^string String()
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun nullableReturn(x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(NULL) -> x != null
        >
     {
        [StubStatement]
        ^nullableReturn R|/string|()
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun returnsNull(x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(NOT_NULL) -> x != null
        >
     {
        [StubStatement]
        ^returnsNull Null(null)
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun wrongReturnType(x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null
        >
     {
        [StubStatement]
        ^wrongReturnType String(true)
    }
