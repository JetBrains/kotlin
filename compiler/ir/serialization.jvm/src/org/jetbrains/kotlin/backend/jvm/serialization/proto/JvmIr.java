// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.jvm/src/JvmIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.jvm.serialization.proto;

public final class JvmIr {
  private JvmIr() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }
  public interface XStatementOrExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     * @return Whether the statement field is set.
     */
    boolean hasStatement();
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     * @return The statement.
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement();

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression();

    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.KindCase getKindCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
   */
  public  static final class XStatementOrExpression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          XStatementOrExpression, XStatementOrExpression.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
      XStatementOrExpressionOrBuilder {
    private XStatementOrExpression() {
    }
    private int kindCase_ = 0;
    private java.lang.Object kind_;
    public enum KindCase {
      STATEMENT(1),
      EXPRESSION(2),
      KIND_NOT_SET(0);
      private final int value;
      private KindCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static KindCase valueOf(int value) {
        return forNumber(value);
      }

      public static KindCase forNumber(int value) {
        switch (value) {
          case 1: return STATEMENT;
          case 2: return EXPRESSION;
          case 0: return KIND_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public KindCase
    getKindCase() {
      return KindCase.forNumber(
          kindCase_);
    }

    private void clearKind() {
      kindCase_ = 0;
      kind_ = null;
    }

    public static final int STATEMENT_FIELD_NUMBER = 1;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    @java.lang.Override
    public boolean hasStatement() {
      return kindCase_ == 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
      value.getClass();  // minimal bytecode null check
      kind_ = value;
      kindCase_ = 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
      value.getClass();  // minimal bytecode null check
      if (kindCase_ == 1 &&
          kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance()) {
        kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_)
            .mergeFrom(value).buildPartial();
      } else {
        kind_ = value;
      }
      kindCase_ = 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    private void clearStatement() {
      if (kindCase_ == 1) {
        kindCase_ = 0;
        kind_ = null;
      }
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    @java.lang.Override
    public boolean hasExpression() {
      return kindCase_ == 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      value.getClass();  // minimal bytecode null check
      kind_ = value;
      kindCase_ = 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      value.getClass();  // minimal bytecode null check
      if (kindCase_ == 2 &&
          kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
        kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_)
            .mergeFrom(value).buildPartial();
      } else {
        kind_ = value;
      }
      kindCase_ = 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    private void clearExpression() {
      if (kindCase_ == 2) {
        kindCase_ = 0;
        kind_ = null;
      }
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public KindCase
          getKindCase() {
        return instance.getKindCase();
      }

      public Builder clearKind() {
        copyOnWrite();
        instance.clearKind();
        return this;
      }


      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      @java.lang.Override
      public boolean hasStatement() {
        return instance.hasStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement() {
        return instance.getStatement();
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder setStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
        copyOnWrite();
        instance.setStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder setStatement(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder builderForValue) {
        copyOnWrite();
        instance.setStatement(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder mergeStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
        copyOnWrite();
        instance.mergeStatement(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder clearStatement() {
        copyOnWrite();
        instance.clearStatement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      @java.lang.Override
      public boolean hasExpression() {
        return instance.hasExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
        return instance.getExpression();
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
        copyOnWrite();
        instance.setExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
        copyOnWrite();
        instance.setExpression(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
        copyOnWrite();
        instance.mergeExpression(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder clearExpression() {
        copyOnWrite();
        instance.clearExpression();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "kind_",
              "kindCase_",
              org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.class,
              org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.class,
            };
            java.lang.String info =
                "\u0004\u0002\u0001\u0000\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u043c\u0000\u0002" +
                "\u043c\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
    private static final org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression DEFAULT_INSTANCE;
    static {
      XStatementOrExpression defaultInstance = new XStatementOrExpression();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        XStatementOrExpression.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ClassOrFileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> 
        getDeclarationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    int getDeclarationCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> 
        getTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrType getType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    int getTypeCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> 
        getSignatureList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getSignature(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    int getSignatureCount();

    /**
     * <code>repeated string string = 4;</code>
     * @return A list containing the string.
     */
    java.util.List<java.lang.String>
        getStringList();
    /**
     * <code>repeated string string = 4;</code>
     * @return The count of string.
     */
    int getStringCount();
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    java.lang.String getString(int index);
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> 
        getBodyList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getBody(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    int getBodyCount();

    /**
     * <code>repeated string debug_info = 6;</code>
     * @return A list containing the debugInfo.
     */
    java.util.List<java.lang.String>
        getDebugInfoList();
    /**
     * <code>repeated string debug_info = 6;</code>
     * @return The count of debugInfo.
     */
    int getDebugInfoCount();
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index of the element to return.
     * @return The debugInfo at the given index.
     */
    java.lang.String getDebugInfo(int index);
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index of the element to return.
     * @return The debugInfo at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getDebugInfoBytes(int index);

    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return Whether the fileFacadeFqName field is set.
     */
    boolean hasFileFacadeFqName();
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return The fileFacadeFqName.
     */
    java.lang.String getFileFacadeFqName();
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return The bytes for fileFacadeFqName.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getFileFacadeFqNameBytes();

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> 
        getFileEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    int getFileEntryCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile}
   */
  public  static final class ClassOrFile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          ClassOrFile, ClassOrFile.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
      ClassOrFileOrBuilder {
    private ClassOrFile() {
      declaration_ = emptyProtobufList();
      type_ = emptyProtobufList();
      signature_ = emptyProtobufList();
      string_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
      body_ = emptyProtobufList();
      debugInfo_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
      fileFacadeFqName_ = "";
      fileEntry_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int DECLARATION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> declaration_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> getDeclarationList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> 
        getDeclarationOrBuilderList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public int getDeclarationCount() {
      return declaration_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index) {
      return declaration_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder getDeclarationOrBuilder(
        int index) {
      return declaration_.get(index);
    }
    private void ensureDeclarationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> tmp = declaration_;
      if (!tmp.isModifiable()) {
        declaration_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDeclaration(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
      value.getClass();  // minimal bytecode null check
      ensureDeclarationIsMutable();
      declaration_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
      value.getClass();  // minimal bytecode null check
      ensureDeclarationIsMutable();
      declaration_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addDeclaration(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
      value.getClass();  // minimal bytecode null check
      ensureDeclarationIsMutable();
      declaration_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    private void addAllDeclaration(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> values) {
      ensureDeclarationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, declaration_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    private void clearDeclaration() {
      declaration_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    private void removeDeclaration(int index) {
      ensureDeclarationIsMutable();
      declaration_.remove(index);
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> type_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> getTypeList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder> 
        getTypeOrBuilderList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.Override
    public int getTypeCount() {
      return type_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrType getType(int index) {
      return type_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder getTypeOrBuilder(
        int index) {
      return type_.get(index);
    }
    private void ensureTypeIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> tmp = type_;
      if (!tmp.isModifiable()) {
        type_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setType(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeIsMutable();
      type_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addType(org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeIsMutable();
      type_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addType(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeIsMutable();
      type_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    private void addAllType(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrType> values) {
      ensureTypeIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, type_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    private void clearType() {
      type_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
     */
    private void removeType(int index) {
      ensureTypeIsMutable();
      type_.remove(index);
    }

    public static final int SIGNATURE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> signature_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> getSignatureList() {
      return signature_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder> 
        getSignatureOrBuilderList() {
      return signature_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.Override
    public int getSignatureCount() {
      return signature_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getSignature(int index) {
      return signature_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder getSignatureOrBuilder(
        int index) {
      return signature_.get(index);
    }
    private void ensureSignatureIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> tmp = signature_;
      if (!tmp.isModifiable()) {
        signature_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setSignature(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
      value.getClass();  // minimal bytecode null check
      ensureSignatureIsMutable();
      signature_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addSignature(org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
      value.getClass();  // minimal bytecode null check
      ensureSignatureIsMutable();
      signature_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addSignature(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
      value.getClass();  // minimal bytecode null check
      ensureSignatureIsMutable();
      signature_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    private void addAllSignature(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> values) {
      ensureSignatureIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, signature_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    private void clearSignature() {
      signature_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
     */
    private void removeSignature(int index) {
      ensureSignatureIsMutable();
      signature_.remove(index);
    }

    public static final int STRING_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> string_;
    /**
     * <code>repeated string string = 4;</code>
     * @return A list containing the string.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getStringList() {
      return string_;
    }
    /**
     * <code>repeated string string = 4;</code>
     * @return The count of string.
     */
    @java.lang.Override
    public int getStringCount() {
      return string_.size();
    }
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    @java.lang.Override
    public java.lang.String getString(int index) {
      return string_.get(index);
    }
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the string at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          string_.get(index));
    }
    private void ensureStringIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          string_;  if (!tmp.isModifiable()) {
        string_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string string = 4;</code>
     * @param index The index to set the value at.
     * @param value The string to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setString(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureStringIsMutable();
      string_.set(index, value);
    }
    /**
     * <code>repeated string string = 4;</code>
     * @param value The string to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addString(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureStringIsMutable();
      string_.add(value);
    }
    /**
     * <code>repeated string string = 4;</code>
     * @param values The string to add.
     */
    private void addAllString(
        java.lang.Iterable<java.lang.String> values) {
      ensureStringIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, string_);
    }
    /**
     * <code>repeated string string = 4;</code>
     */
    private void clearString() {
      string_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string string = 4;</code>
     * @param value The bytes of the string to add.
     */
    private void addStringBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureStringIsMutable();
      string_.add(value.toStringUtf8());
    }

    public static final int BODY_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> body_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> getBodyList() {
      return body_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder> 
        getBodyOrBuilderList() {
      return body_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.Override
    public int getBodyCount() {
      return body_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getBody(int index) {
      return body_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder getBodyOrBuilder(
        int index) {
      return body_.get(index);
    }
    private void ensureBodyIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> tmp = body_;
      if (!tmp.isModifiable()) {
        body_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBody(
        int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
      value.getClass();  // minimal bytecode null check
      ensureBodyIsMutable();
      body_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addBody(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
      value.getClass();  // minimal bytecode null check
      ensureBodyIsMutable();
      body_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addBody(
        int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
      value.getClass();  // minimal bytecode null check
      ensureBodyIsMutable();
      body_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    private void addAllBody(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> values) {
      ensureBodyIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, body_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    private void clearBody() {
      body_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
     */
    private void removeBody(int index) {
      ensureBodyIsMutable();
      body_.remove(index);
    }

    public static final int DEBUG_INFO_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> debugInfo_;
    /**
     * <code>repeated string debug_info = 6;</code>
     * @return A list containing the debugInfo.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getDebugInfoList() {
      return debugInfo_;
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @return The count of debugInfo.
     */
    @java.lang.Override
    public int getDebugInfoCount() {
      return debugInfo_.size();
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index of the element to return.
     * @return The debugInfo at the given index.
     */
    @java.lang.Override
    public java.lang.String getDebugInfo(int index) {
      return debugInfo_.get(index);
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the debugInfo at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getDebugInfoBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          debugInfo_.get(index));
    }
    private void ensureDebugInfoIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          debugInfo_;  if (!tmp.isModifiable()) {
        debugInfo_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param index The index to set the value at.
     * @param value The debugInfo to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDebugInfo(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureDebugInfoIsMutable();
      debugInfo_.set(index, value);
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param value The debugInfo to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addDebugInfo(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureDebugInfoIsMutable();
      debugInfo_.add(value);
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param values The debugInfo to add.
     */
    private void addAllDebugInfo(
        java.lang.Iterable<java.lang.String> values) {
      ensureDebugInfoIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, debugInfo_);
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     */
    private void clearDebugInfo() {
      debugInfo_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string debug_info = 6;</code>
     * @param value The bytes of the debugInfo to add.
     */
    private void addDebugInfoBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureDebugInfoIsMutable();
      debugInfo_.add(value.toStringUtf8());
    }

    public static final int FILE_FACADE_FQ_NAME_FIELD_NUMBER = 7;
    private java.lang.String fileFacadeFqName_;
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return Whether the fileFacadeFqName field is set.
     */
    @java.lang.Override
    public boolean hasFileFacadeFqName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return The fileFacadeFqName.
     */
    @java.lang.Override
    public java.lang.String getFileFacadeFqName() {
      return fileFacadeFqName_;
    }
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @return The bytes for fileFacadeFqName.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getFileFacadeFqNameBytes() {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(fileFacadeFqName_);
    }
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @param value The fileFacadeFqName to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFileFacadeFqName(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      bitField0_ |= 0x00000001;
      fileFacadeFqName_ = value;
    }
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     */
    private void clearFileFacadeFqName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fileFacadeFqName_ = getDefaultInstance().getFileFacadeFqName();
    }
    /**
     * <code>string file_facade_fq_name = 7 [features = { ... }</code>
     * @param value The bytes for fileFacadeFqName to set.
     */
    private void setFileFacadeFqNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      fileFacadeFqName_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int FILE_ENTRY_FIELD_NUMBER = 8;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> fileEntry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> getFileEntryList() {
      return fileEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder> 
        getFileEntryOrBuilderList() {
      return fileEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.Override
    public int getFileEntryCount() {
      return fileEntry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry(int index) {
      return fileEntry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder getFileEntryOrBuilder(
        int index) {
      return fileEntry_.get(index);
    }
    private void ensureFileEntryIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> tmp = fileEntry_;
      if (!tmp.isModifiable()) {
        fileEntry_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFileEntry(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureFileEntryIsMutable();
      fileEntry_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureFileEntryIsMutable();
      fileEntry_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addFileEntry(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureFileEntryIsMutable();
      fileEntry_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    private void addAllFileEntry(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> values) {
      ensureFileEntryIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, fileEntry_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    private void clearFileEntry() {
      fileEntry_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
     */
    private void removeFileEntry(int index) {
      ensureFileEntryIsMutable();
      fileEntry_.remove(index);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFileOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> getDeclarationList() {
        return java.util.Collections.unmodifiableList(
            instance.getDeclarationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      @java.lang.Override
      public int getDeclarationCount() {
        return instance.getDeclarationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index) {
        return instance.getDeclaration(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        copyOnWrite();
        instance.setDeclaration(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        copyOnWrite();
        instance.setDeclaration(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        copyOnWrite();
        instance.addDeclaration(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        copyOnWrite();
        instance.addDeclaration(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        copyOnWrite();
        instance.addDeclaration(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        copyOnWrite();
        instance.addDeclaration(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addAllDeclaration(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> values) {
        copyOnWrite();
        instance.addAllDeclaration(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder clearDeclaration() {
        copyOnWrite();
        instance.clearDeclaration();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder removeDeclaration(int index) {
        copyOnWrite();
        instance.removeDeclaration(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrType> getTypeList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypeList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      @java.lang.Override
      public int getTypeCount() {
        return instance.getTypeCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrType getType(int index) {
        return instance.getType(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
        copyOnWrite();
        instance.setType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder builderForValue) {
        copyOnWrite();
        instance.setType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addType(org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
        copyOnWrite();
        instance.addType(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType value) {
        copyOnWrite();
        instance.addType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addType(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder builderForValue) {
        copyOnWrite();
        instance.addType(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrType.Builder builderForValue) {
        copyOnWrite();
        instance.addType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder addAllType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrType> values) {
        copyOnWrite();
        instance.addAllType(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
       */
      public Builder removeType(int index) {
        copyOnWrite();
        instance.removeType(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> getSignatureList() {
        return java.util.Collections.unmodifiableList(
            instance.getSignatureList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      @java.lang.Override
      public int getSignatureCount() {
        return instance.getSignatureCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature getSignature(int index) {
        return instance.getSignature(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder setSignature(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
        copyOnWrite();
        instance.setSignature(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder setSignature(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder builderForValue) {
        copyOnWrite();
        instance.setSignature(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addSignature(org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
        copyOnWrite();
        instance.addSignature(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addSignature(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature value) {
        copyOnWrite();
        instance.addSignature(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addSignature(
          org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder builderForValue) {
        copyOnWrite();
        instance.addSignature(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addSignature(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.Builder builderForValue) {
        copyOnWrite();
        instance.addSignature(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder addAllSignature(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature> values) {
        copyOnWrite();
        instance.addAllSignature(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder clearSignature() {
        copyOnWrite();
        instance.clearSignature();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
       */
      public Builder removeSignature(int index) {
        copyOnWrite();
        instance.removeSignature(index);
        return this;
      }

      /**
       * <code>repeated string string = 4;</code>
       * @return A list containing the string.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getStringList() {
        return java.util.Collections.unmodifiableList(
            instance.getStringList());
      }
      /**
       * <code>repeated string string = 4;</code>
       * @return The count of string.
       */
      @java.lang.Override
      public int getStringCount() {
        return instance.getStringCount();
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param index The index of the element to return.
       * @return The string at the given index.
       */
      @java.lang.Override
      public java.lang.String getString(int index) {
        return instance.getString(index);
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the string at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes(int index) {
        return instance.getStringBytes(index);
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param index The index to set the value at.
       * @param value The string to set.
       * @return This builder for chaining.
       */
      public Builder setString(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setString(index, value);
        return this;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param value The string to add.
       * @return This builder for chaining.
       */
      public Builder addString(
          java.lang.String value) {
        copyOnWrite();
        instance.addString(value);
        return this;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param values The string to add.
       * @return This builder for chaining.
       */
      public Builder addAllString(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllString(values);
        return this;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearString() {
        copyOnWrite();
        instance.clearString();
        return this;
      }
      /**
       * <code>repeated string string = 4;</code>
       * @param value The bytes of the string to add.
       * @return This builder for chaining.
       */
      public Builder addStringBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addStringBytes(value);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> getBodyList() {
        return java.util.Collections.unmodifiableList(
            instance.getBodyList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      @java.lang.Override
      public int getBodyCount() {
        return instance.getBodyCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getBody(int index) {
        return instance.getBody(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder setBody(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        copyOnWrite();
        instance.setBody(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder setBody(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        copyOnWrite();
        instance.setBody(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addBody(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        copyOnWrite();
        instance.addBody(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addBody(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        copyOnWrite();
        instance.addBody(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addBody(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        copyOnWrite();
        instance.addBody(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addBody(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        copyOnWrite();
        instance.addBody(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder addAllBody(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> values) {
        copyOnWrite();
        instance.addAllBody(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder clearBody() {
        copyOnWrite();
        instance.clearBody();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
       */
      public Builder removeBody(int index) {
        copyOnWrite();
        instance.removeBody(index);
        return this;
      }

      /**
       * <code>repeated string debug_info = 6;</code>
       * @return A list containing the debugInfo.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getDebugInfoList() {
        return java.util.Collections.unmodifiableList(
            instance.getDebugInfoList());
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @return The count of debugInfo.
       */
      @java.lang.Override
      public int getDebugInfoCount() {
        return instance.getDebugInfoCount();
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param index The index of the element to return.
       * @return The debugInfo at the given index.
       */
      @java.lang.Override
      public java.lang.String getDebugInfo(int index) {
        return instance.getDebugInfo(index);
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param index The index of the value to return.
       * @return The bytes of the debugInfo at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getDebugInfoBytes(int index) {
        return instance.getDebugInfoBytes(index);
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param index The index to set the value at.
       * @param value The debugInfo to set.
       * @return This builder for chaining.
       */
      public Builder setDebugInfo(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setDebugInfo(index, value);
        return this;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param value The debugInfo to add.
       * @return This builder for chaining.
       */
      public Builder addDebugInfo(
          java.lang.String value) {
        copyOnWrite();
        instance.addDebugInfo(value);
        return this;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param values The debugInfo to add.
       * @return This builder for chaining.
       */
      public Builder addAllDebugInfo(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllDebugInfo(values);
        return this;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDebugInfo() {
        copyOnWrite();
        instance.clearDebugInfo();
        return this;
      }
      /**
       * <code>repeated string debug_info = 6;</code>
       * @param value The bytes of the debugInfo to add.
       * @return This builder for chaining.
       */
      public Builder addDebugInfoBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addDebugInfoBytes(value);
        return this;
      }

      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @return Whether the fileFacadeFqName field is set.
       */
      @java.lang.Override
      public boolean hasFileFacadeFqName() {
        return instance.hasFileFacadeFqName();
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @return The fileFacadeFqName.
       */
      @java.lang.Override
      public java.lang.String getFileFacadeFqName() {
        return instance.getFileFacadeFqName();
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @return The bytes for fileFacadeFqName.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getFileFacadeFqNameBytes() {
        return instance.getFileFacadeFqNameBytes();
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @param value The fileFacadeFqName to set.
       * @return This builder for chaining.
       */
      public Builder setFileFacadeFqName(
          java.lang.String value) {
        copyOnWrite();
        instance.setFileFacadeFqName(value);
        return this;
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFileFacadeFqName() {
        copyOnWrite();
        instance.clearFileFacadeFqName();
        return this;
      }
      /**
       * <code>string file_facade_fq_name = 7 [features = { ... }</code>
       * @param value The bytes for fileFacadeFqName to set.
       * @return This builder for chaining.
       */
      public Builder setFileFacadeFqNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFileFacadeFqNameBytes(value);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> getFileEntryList() {
        return java.util.Collections.unmodifiableList(
            instance.getFileEntryList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      @java.lang.Override
      public int getFileEntryCount() {
        return instance.getFileEntryCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getFileEntry(int index) {
        return instance.getFileEntry(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder setFileEntry(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
        copyOnWrite();
        instance.setFileEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder setFileEntry(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder builderForValue) {
        copyOnWrite();
        instance.setFileEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addFileEntry(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
        copyOnWrite();
        instance.addFileEntry(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addFileEntry(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry value) {
        copyOnWrite();
        instance.addFileEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addFileEntry(
          org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder builderForValue) {
        copyOnWrite();
        instance.addFileEntry(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addFileEntry(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder builderForValue) {
        copyOnWrite();
        instance.addFileEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder addAllFileEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry> values) {
        copyOnWrite();
        instance.addAllFileEntry(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder clearFileEntry() {
        copyOnWrite();
        instance.clearFileEntry();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 8;</code>
       */
      public Builder removeFileEntry(int index) {
        copyOnWrite();
        instance.removeFileEntry(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "declaration_",
              org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.class,
              "type_",
              org.jetbrains.kotlin.backend.common.serialization.proto.IrType.class,
              "signature_",
              org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.class,
              "string_",
              "body_",
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.class,
              "debugInfo_",
              "fileFacadeFqName_",
              "fileEntry_",
              org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.class,
            };
            java.lang.String info =
                "\u0004\b\u0000\u0001\u0001\b\b\u0000\u0007\u0006\u0001\u041b\u0002\u041b\u0003\u041b" +
                "\u0004\u001a\u0005\u041b\u0006\u001a\u0007\u1508\u0000\b\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
    private static final org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile DEFAULT_INSTANCE;
    static {
      ClassOrFile defaultInstance = new ClassOrFile();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ClassOrFile.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ClassOrFile> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ClassOrFile> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}