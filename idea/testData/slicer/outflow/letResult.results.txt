4 fun foo(<bold>p: String</bold>) { (in foo(String))
5 	val v1 = <bold>p</bold>.let { value -> bar(value) } (in foo(String))
LIB 		(INLINE CALL let) public inline fun <T, R> <bold>T</bold>.let(block: (T) -> R): R { (in let((T) -> R) on T)
LIB 			(INLINE CALL let) return block(<bold>this</bold>) (in let((T) -> R) on T)
LIB 				(INLINE CALL let) [LAMBDA PARAMETER #0] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R { (in let((T) -> R) on T)
5 					[LAMBDA PARAMETER #0] val v1 = p.let <bold>{ value -> bar(value) }</bold> (in foo(String))
5 						val v1 = p.let { <bold>value</bold> -> bar(value) } (in foo(String))
5 							val v1 = p.let { value -> bar(<bold>value</bold>) } (in foo(String))
17 								fun bar(<bold>s: String</bold>) = s (in bar(String))
17 									fun bar(s: String) = <bold>s</bold> (in bar(String))
17 										<bold>fun bar(s: String)</bold> = s
5 											val v1 = p.let { value -> <bold>bar(value)</bold> } (in foo(String))
5 												val v1 = p.let <bold>{ value -> bar(value) }</bold> (in foo(String))
5 													[LAMBDA CALLS] val v1 = p.let <bold>{ value -> bar(value) }</bold> (in foo(String))
LIB 														(INLINE CALL let) [LAMBDA CALLS] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R { (in let((T) -> R) on T)
LIB 															(INLINE CALL let) return <bold>block(this)</bold> (in let((T) -> R) on T)
5 																val v1 = p.<bold>let { value -> bar(value) }</bold> (in foo(String))
5 																	<bold>val v1</bold> = p.let { value -> bar(value) } (in foo(String))
7 	val v2 = <bold>p</bold>.let { it } (in foo(String))
LIB 		(INLINE CALL let) public inline fun <T, R> <bold>T</bold>.let(block: (T) -> R): R { (in let((T) -> R) on T)
LIB 			(INLINE CALL let) return block(<bold>this</bold>) (in let((T) -> R) on T)
LIB 				(INLINE CALL let) [LAMBDA PARAMETER #0] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R { (in let((T) -> R) on T)
7 					[LAMBDA PARAMETER #0] val v2 = p.let <bold>{ it }</bold> (in foo(String))
7 						val v2 = p.let { <bold>it</bold> } (in foo(String))
7 							val v2 = p.let <bold>{ it }</bold> (in foo(String))
7 								[LAMBDA CALLS] val v2 = p.let <bold>{ it }</bold> (in foo(String))
LIB 									(INLINE CALL let) [LAMBDA CALLS] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R { (in let((T) -> R) on T)
LIB 										(INLINE CALL let) return <bold>block(this)</bold> (in let((T) -> R) on T)
7 											val v2 = p.<bold>let { it }</bold> (in foo(String))
7 												<bold>val v2</bold> = p.let { it } (in foo(String))
9 	val v3 = <bold>p</bold>.let { (in foo(String))
LIB 		(INLINE CALL let) public inline fun <T, R> <bold>T</bold>.let(block: (T) -> R): R { (in let((T) -> R) on T)
LIB 			(INLINE CALL let) return block(<bold>this</bold>) (in let((T) -> R) on T)
LIB 				(INLINE CALL let) [LAMBDA PARAMETER #0] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R { (in let((T) -> R) on T)
9 					[LAMBDA PARAMETER #0] val v3 = p.let <bold>{</bold> (in foo(String))
14 	val v4 = <bold>p</bold>.let(::zoo) (in foo(String))
LIB 		(INLINE CALL let) public inline fun <T, R> <bold>T</bold>.let(block: (T) -> R): R { (in let((T) -> R) on T)
LIB 			(INLINE CALL let) return block(<bold>this</bold>) (in let((T) -> R) on T)
LIB 				(INLINE CALL let) [LAMBDA PARAMETER #0] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R { (in let((T) -> R) on T)
14 					[LAMBDA PARAMETER #0] val v4 = p.let(<bold>::zoo</bold>) (in foo(String))
18 						fun zoo(<bold>s: String</bold>) = s (in zoo(String))
18 							fun zoo(s: String) = <bold>s</bold> (in zoo(String))
18 								<bold>fun zoo(s: String)</bold> = s
14 									[LAMBDA CALLS] val v4 = p.let(<bold>::zoo</bold>) (in foo(String))
LIB 										(INLINE CALL let) [LAMBDA CALLS] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R { (in let((T) -> R) on T)
LIB 											(INLINE CALL let) return <bold>block(this)</bold> (in let((T) -> R) on T)
14 												val v4 = p.<bold>let(::zoo)</bold> (in foo(String))
14 													<bold>val v4</bold> = p.let(::zoo) (in foo(String))
