/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.jvm.compiler;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.jvm.compiler.AbstractLoadJavaTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({LoadJavaTestGenerated.CompiledJavaCompareWithKotlin.class, LoadJavaTestGenerated.CompiledJavaIncludeObjectMethods.class, LoadJavaTestGenerated.CompiledJava.class, LoadJavaTestGenerated.SourceJava.class, LoadJavaTestGenerated.JavaAgainstKotlin.class})
public class LoadJavaTestGenerated extends AbstractLoadJavaTest {
    @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin")
    @InnerTestClasses({CompiledJavaCompareWithKotlin.Annotation.class, CompiledJavaCompareWithKotlin.Constructor.class, CompiledJavaCompareWithKotlin.JavaBean.class, CompiledJavaCompareWithKotlin.KotlinSignature.class, CompiledJavaCompareWithKotlin.Library.class, CompiledJavaCompareWithKotlin.Modality.class, CompiledJavaCompareWithKotlin.Mutability.class, CompiledJavaCompareWithKotlin.NotNull.class, CompiledJavaCompareWithKotlin.Vararg.class})
    public static class CompiledJavaCompareWithKotlin extends AbstractLoadJavaTest {
        public void testAllFilesPresentInCompiledJavaCompareWithKotlin() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("ArrayTypeVariance.java")
        public void testArrayTypeVariance() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ArrayTypeVariance.java");
        }
        
        @TestMetadata("ClassDoesNotOverrideMethod.java")
        public void testClassDoesNotOverrideMethod() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassDoesNotOverrideMethod.java");
        }
        
        @TestMetadata("ClassWithTypeP.java")
        public void testClassWithTypeP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypeP.java");
        }
        
        @TestMetadata("ClassWithTypePExtendsIterableP.java")
        public void testClassWithTypePExtendsIterableP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePExtendsIterableP.java");
        }
        
        @TestMetadata("ClassWithTypePP.java")
        public void testClassWithTypePP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePP.java");
        }
        
        @TestMetadata("ClassWithTypePRefNext.java")
        public void testClassWithTypePRefNext() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePRefNext.java");
        }
        
        @TestMetadata("ClassWithTypePRefSelf.java")
        public void testClassWithTypePRefSelf() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePRefSelf.java");
        }
        
        @TestMetadata("ClassWithTypePRefSelfAndClass.java")
        public void testClassWithTypePRefSelfAndClass() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePRefSelfAndClass.java");
        }
        
        @TestMetadata("FieldAsVar.java")
        public void testFieldAsVar() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/FieldAsVar.java");
        }
        
        @TestMetadata("FieldOfArrayType.java")
        public void testFieldOfArrayType() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/FieldOfArrayType.java");
        }
        
        @TestMetadata("FinalFieldAsVal.java")
        public void testFinalFieldAsVal() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/FinalFieldAsVal.java");
        }
        
        @TestMetadata("InnerClass.java")
        public void testInnerClass() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/InnerClass.java");
        }
        
        @TestMetadata("InnerClassReferencesOuterTP.java")
        public void testInnerClassReferencesOuterTP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/InnerClassReferencesOuterTP.java");
        }
        
        @TestMetadata("InnerClassesInGeneric.java")
        public void testInnerClassesInGeneric() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/InnerClassesInGeneric.java");
        }
        
        @TestMetadata("MethodReferencesOuterClassTP.java")
        public void testMethodReferencesOuterClassTP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodReferencesOuterClassTP.java");
        }
        
        @TestMetadata("MethodTypePOneUpperBound.java")
        public void testMethodTypePOneUpperBound() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodTypePOneUpperBound.java");
        }
        
        @TestMetadata("MethodTypePTwoUpperBounds.java")
        public void testMethodTypePTwoUpperBounds() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodTypePTwoUpperBounds.java");
        }
        
        @TestMetadata("MethodWithTypeP.java")
        public void testMethodWithTypeP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodWithTypeP.java");
        }
        
        @TestMetadata("MethodWithTypePP.java")
        public void testMethodWithTypePP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodWithTypePP.java");
        }
        
        @TestMetadata("MethodWithTypePRefClassP.java")
        public void testMethodWithTypePRefClassP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodWithTypePRefClassP.java");
        }
        
        @TestMetadata("MethosWithPRefTP.java")
        public void testMethosWithPRefTP() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethosWithPRefTP.java");
        }
        
        @TestMetadata("MyException.java")
        public void testMyException() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MyException.java");
        }
        
        @TestMetadata("NestedClass.java")
        public void testNestedClass() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/NestedClass.java");
        }
        
        @TestMetadata("RemoveRedundantProjectionKind.java")
        public void testRemoveRedundantProjectionKind() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/RemoveRedundantProjectionKind.java");
        }
        
        @TestMetadata("Simple.java")
        public void testSimple() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/Simple.java");
        }
        
        @TestMetadata("TwoFields.java")
        public void testTwoFields() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/TwoFields.java");
        }
        
        @TestMetadata("UnboundWildcard.java")
        public void testUnboundWildcard() throws Exception {
            doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/UnboundWildcard.java");
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation")
        public static class Annotation extends AbstractLoadJavaTest {
            public void testAllFilesPresentInAnnotation() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("AnnotatedAnnotation.java")
            public void testAnnotatedAnnotation() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation/AnnotatedAnnotation.java");
            }
            
            @TestMetadata("AnnotatedMethod.java")
            public void testAnnotatedMethod() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation/AnnotatedMethod.java");
            }
            
            @TestMetadata("SimpleAnnotation.java")
            public void testSimpleAnnotation() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation/SimpleAnnotation.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor")
        public static class Constructor extends AbstractLoadJavaTest {
            public void testAllFilesPresentInConstructor() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("ConstructorGenericDeep.java")
            public void testConstructorGenericDeep() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor/ConstructorGenericDeep.java");
            }
            
            @TestMetadata("ConstructorGenericSimple.java")
            public void testConstructorGenericSimple() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor/ConstructorGenericSimple.java");
            }
            
            @TestMetadata("ConstructorGenericUpperBound.java")
            public void testConstructorGenericUpperBound() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor/ConstructorGenericUpperBound.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean")
        public static class JavaBean extends AbstractLoadJavaTest {
            public void testAllFilesPresentInJavaBean() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("DifferentGetterAndSetter.java")
            public void testDifferentGetterAndSetter() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/DifferentGetterAndSetter.java");
            }
            
            @TestMetadata("JavaBeanAbstractGetter.java")
            public void testJavaBeanAbstractGetter() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/JavaBeanAbstractGetter.java");
            }
            
            @TestMetadata("JavaBeanVal.java")
            public void testJavaBeanVal() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/JavaBeanVal.java");
            }
            
            @TestMetadata("JavaBeanVar.java")
            public void testJavaBeanVar() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/JavaBeanVar.java");
            }
            
            @TestMetadata("JavaBeanVarOfGenericType.java")
            public void testJavaBeanVarOfGenericType() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/JavaBeanVarOfGenericType.java");
            }
            
            @TestMetadata("TwoSetters.java")
            public void testTwoSetters() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/TwoSetters.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature")
        @InnerTestClasses({KotlinSignature.Error.class, KotlinSignature.Propagation.class})
        public static class KotlinSignature extends AbstractLoadJavaTest {
            public void testAllFilesPresentInKotlinSignature() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("ArrayType.java")
            public void testArrayType() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ArrayType.java");
            }
            
            @TestMetadata("ConstructorWithNewTypeParams.java")
            public void testConstructorWithNewTypeParams() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ConstructorWithNewTypeParams.java");
            }
            
            @TestMetadata("ConstructorWithParentTypeParams.java")
            public void testConstructorWithParentTypeParams() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ConstructorWithParentTypeParams.java");
            }
            
            @TestMetadata("ConstructorWithSeveralParams.java")
            public void testConstructorWithSeveralParams() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ConstructorWithSeveralParams.java");
            }
            
            @TestMetadata("ConstructorWithoutParams.java")
            public void testConstructorWithoutParams() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ConstructorWithoutParams.java");
            }
            
            @TestMetadata("CustomProjectionKind.java")
            public void testCustomProjectionKind() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/CustomProjectionKind.java");
            }
            
            @TestMetadata("MethodWithFunctionTypes.java")
            public void testMethodWithFunctionTypes() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithFunctionTypes.java");
            }
            
            @TestMetadata("MethodWithGenerics.java")
            public void testMethodWithGenerics() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithGenerics.java");
            }
            
            @TestMetadata("MethodWithMappedClasses.java")
            public void testMethodWithMappedClasses() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithMappedClasses.java");
            }
            
            @TestMetadata("MethodWithTypeParameters.java")
            public void testMethodWithTypeParameters() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithTypeParameters.java");
            }
            
            @TestMetadata("MethodWithVararg.java")
            public void testMethodWithVararg() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithVararg.java");
            }
            
            @TestMetadata("PropertyArrayTypes.java")
            public void testPropertyArrayTypes() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/PropertyArrayTypes.java");
            }
            
            @TestMetadata("PropertyComplexTypes.java")
            public void testPropertyComplexTypes() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/PropertyComplexTypes.java");
            }
            
            @TestMetadata("PropertySimpleType.java")
            public void testPropertySimpleType() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/PropertySimpleType.java");
            }
            
            @TestMetadata("StarProjection.java")
            public void testStarProjection() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/StarProjection.java");
            }
            
            @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error")
            public static class Error extends AbstractLoadJavaTest {
                @TestMetadata("AddingNullability.java")
                public void testAddingNullability() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/AddingNullability.java");
                }
                
                public void testAllFilesPresentInError() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error"), Pattern.compile("^(.+)\\.java$"), true);
                }
                
                @TestMetadata("ConflictingProjectionKind.java")
                public void testConflictingProjectionKind() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/ConflictingProjectionKind.java");
                }
                
                @TestMetadata("ExplicitFieldGettersAndSetters.java")
                public void testExplicitFieldGettersAndSetters() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/ExplicitFieldGettersAndSetters.java");
                }
                
                @TestMetadata("ExtraUpperBound.java")
                public void testExtraUpperBound() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/ExtraUpperBound.java");
                }
                
                @TestMetadata("MissingUpperBound.java")
                public void testMissingUpperBound() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/MissingUpperBound.java");
                }
                
                @TestMetadata("NoFieldTypeRef.java")
                public void testNoFieldTypeRef() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/NoFieldTypeRef.java");
                }
                
                @TestMetadata("NotVarargReplacedWithVararg.java")
                public void testNotVarargReplacedWithVararg() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/NotVarargReplacedWithVararg.java");
                }
                
                @TestMetadata("RedundantProjectionKind.java")
                public void testRedundantProjectionKind() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/RedundantProjectionKind.java");
                }
                
                @TestMetadata("ReturnTypeMissing.java")
                public void testReturnTypeMissing() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/ReturnTypeMissing.java");
                }
                
                @TestMetadata("SyntaxError.java")
                public void testSyntaxError() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/SyntaxError.java");
                }
                
                @TestMetadata("SyntaxErrorInFieldAnnotation.java")
                public void testSyntaxErrorInFieldAnnotation() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/SyntaxErrorInFieldAnnotation.java");
                }
                
                @TestMetadata("VarargReplacedWithNotVararg.java")
                public void testVarargReplacedWithNotVararg() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/VarargReplacedWithNotVararg.java");
                }
                
                @TestMetadata("WrongFieldInitializer.java")
                public void testWrongFieldInitializer() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongFieldInitializer.java");
                }
                
                @TestMetadata("WrongFieldMutability.java")
                public void testWrongFieldMutability() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongFieldMutability.java");
                }
                
                @TestMetadata("WrongFieldName.java")
                public void testWrongFieldName() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongFieldName.java");
                }
                
                @TestMetadata("WrongMethodName.java")
                public void testWrongMethodName() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongMethodName.java");
                }
                
                @TestMetadata("WrongProjectionKind.java")
                public void testWrongProjectionKind() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongProjectionKind.java");
                }
                
                @TestMetadata("WrongReturnTypeStructure.java")
                public void testWrongReturnTypeStructure() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongReturnTypeStructure.java");
                }
                
                @TestMetadata("WrongTypeName1.java")
                public void testWrongTypeName1() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeName1.java");
                }
                
                @TestMetadata("WrongTypeName2.java")
                public void testWrongTypeName2() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeName2.java");
                }
                
                @TestMetadata("WrongTypeName3.java")
                public void testWrongTypeName3() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeName3.java");
                }
                
                @TestMetadata("WrongTypeParameterBoundStructure1.java")
                public void testWrongTypeParameterBoundStructure1() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeParameterBoundStructure1.java");
                }
                
                @TestMetadata("WrongTypeParameterBoundStructure2.java")
                public void testWrongTypeParameterBoundStructure2() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeParameterBoundStructure2.java");
                }
                
                @TestMetadata("WrongTypeParametersCount.java")
                public void testWrongTypeParametersCount() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeParametersCount.java");
                }
                
                @TestMetadata("WrongValueParameterStructure1.java")
                public void testWrongValueParameterStructure1() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongValueParameterStructure1.java");
                }
                
                @TestMetadata("WrongValueParameterStructure2.java")
                public void testWrongValueParameterStructure2() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongValueParameterStructure2.java");
                }
                
                @TestMetadata("WrongValueParametersCount.java")
                public void testWrongValueParametersCount() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongValueParametersCount.java");
                }
                
            }
            
            @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation")
            @InnerTestClasses({Propagation.Parameter.class, Propagation.Return.class, Propagation.TypeParameter.class})
            public static class Propagation extends AbstractLoadJavaTest {
                public void testAllFilesPresentInPropagation() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation"), Pattern.compile("^(.+)\\.java$"), true);
                }
                
                @TestMetadata("PropagateTypeArgumentNullable.java")
                public void testPropagateTypeArgumentNullable() throws Exception {
                    doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/PropagateTypeArgumentNullable.java");
                }
                
                @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter")
                public static class Parameter extends AbstractLoadJavaTest {
                    public void testAllFilesPresentInParameter() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter"), Pattern.compile("^(.+)\\.java$"), true);
                    }
                    
                    @TestMetadata("ChangeProjectionKind1.java")
                    public void testChangeProjectionKind1() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/ChangeProjectionKind1.java");
                    }
                    
                    @TestMetadata("ChangeProjectionKind2.java")
                    public void testChangeProjectionKind2() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/ChangeProjectionKind2.java");
                    }
                    
                    @TestMetadata("DeeplySubstitutedClassParameter.java")
                    public void testDeeplySubstitutedClassParameter() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/DeeplySubstitutedClassParameter.java");
                    }
                    
                    @TestMetadata("DeeplySubstitutedClassParameter2.java")
                    public void testDeeplySubstitutedClassParameter2() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/DeeplySubstitutedClassParameter2.java");
                    }
                    
                    @TestMetadata("InheritMutability.java")
                    public void testInheritMutability() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritMutability.java");
                    }
                    
                    @TestMetadata("InheritNotVararg.java")
                    public void testInheritNotVararg() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNotVararg.java");
                    }
                    
                    @TestMetadata("InheritNotVarargInteger.java")
                    public void testInheritNotVarargInteger() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNotVarargInteger.java");
                    }
                    
                    @TestMetadata("InheritNotVarargNotNull.java")
                    public void testInheritNotVarargNotNull() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNotVarargNotNull.java");
                    }
                    
                    @TestMetadata("InheritNotVarargPrimitive.java")
                    public void testInheritNotVarargPrimitive() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNotVarargPrimitive.java");
                    }
                    
                    @TestMetadata("InheritNullability.java")
                    public void testInheritNullability() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNullability.java");
                    }
                    
                    @TestMetadata("InheritProjectionKind.java")
                    public void testInheritProjectionKind() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritProjectionKind.java");
                    }
                    
                    @TestMetadata("InheritReadOnliness.java")
                    public void testInheritReadOnliness() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritReadOnliness.java");
                    }
                    
                    @TestMetadata("InheritVararg.java")
                    public void testInheritVararg() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritVararg.java");
                    }
                    
                    @TestMetadata("InheritVarargInteger.java")
                    public void testInheritVarargInteger() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritVarargInteger.java");
                    }
                    
                    @TestMetadata("InheritVarargNotNull.java")
                    public void testInheritVarargNotNull() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritVarargNotNull.java");
                    }
                    
                    @TestMetadata("InheritVarargPrimitive.java")
                    public void testInheritVarargPrimitive() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritVarargPrimitive.java");
                    }
                    
                    @TestMetadata("Kt3302.java")
                    public void testKt3302() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/Kt3302.java");
                    }
                    
                    @TestMetadata("MutableToReadOnly.java")
                    public void testMutableToReadOnly() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/MutableToReadOnly.java");
                    }
                    
                    @TestMetadata("NotNullToNullable.java")
                    public void testNotNullToNullable() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/NotNullToNullable.java");
                    }
                    
                    @TestMetadata("NullableToNotNull.java")
                    public void testNullableToNotNull() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/NullableToNotNull.java");
                    }
                    
                    @TestMetadata("NullableToNotNullKotlinSignature.java")
                    public void testNullableToNotNullKotlinSignature() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/NullableToNotNullKotlinSignature.java");
                    }
                    
                    @TestMetadata("OverrideWithErasedParameter.java")
                    public void testOverrideWithErasedParameter() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/OverrideWithErasedParameter.java");
                    }
                    
                    @TestMetadata("ReadOnlyToMutable.java")
                    public void testReadOnlyToMutable() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/ReadOnlyToMutable.java");
                    }
                    
                    @TestMetadata("SubclassFromGenericAndNot.java")
                    public void testSubclassFromGenericAndNot() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/SubclassFromGenericAndNot.java");
                    }
                    
                    @TestMetadata("SubstitutedClassParameter.java")
                    public void testSubstitutedClassParameter() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/SubstitutedClassParameter.java");
                    }
                    
                    @TestMetadata("SubstitutedClassParameters.java")
                    public void testSubstitutedClassParameters() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/SubstitutedClassParameters.java");
                    }
                    
                }
                
                @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return")
                public static class Return extends AbstractLoadJavaTest {
                    @TestMetadata("AddNotNullJavaSubtype.java")
                    public void testAddNotNullJavaSubtype() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNotNullJavaSubtype.java");
                    }
                    
                    @TestMetadata("AddNotNullSameJavaType.java")
                    public void testAddNotNullSameJavaType() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNotNullSameJavaType.java");
                    }
                    
                    @TestMetadata("AddNullabilityJavaSubtype.java")
                    public void testAddNullabilityJavaSubtype() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNullabilityJavaSubtype.java");
                    }
                    
                    @TestMetadata("AddNullabilitySameGenericType1.java")
                    public void testAddNullabilitySameGenericType1() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNullabilitySameGenericType1.java");
                    }
                    
                    @TestMetadata("AddNullabilitySameGenericType2.java")
                    public void testAddNullabilitySameGenericType2() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNullabilitySameGenericType2.java");
                    }
                    
                    @TestMetadata("AddNullabilitySameJavaType.java")
                    public void testAddNullabilitySameJavaType() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNullabilitySameJavaType.java");
                    }
                    
                    public void testAllFilesPresentInReturn() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return"), Pattern.compile("^(.+)\\.java$"), true);
                    }
                    
                    @TestMetadata("CantMakeImmutableInSubclass.java")
                    public void testCantMakeImmutableInSubclass() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/CantMakeImmutableInSubclass.java");
                    }
                    
                    @TestMetadata("DeeplySubstitutedClassParameter.java")
                    public void testDeeplySubstitutedClassParameter() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/DeeplySubstitutedClassParameter.java");
                    }
                    
                    @TestMetadata("DeeplySubstitutedClassParameter2.java")
                    public void testDeeplySubstitutedClassParameter2() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/DeeplySubstitutedClassParameter2.java");
                    }
                    
                    @TestMetadata("HalfSubstitutedTypeParameters.java")
                    public void testHalfSubstitutedTypeParameters() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/HalfSubstitutedTypeParameters.java");
                    }
                    
                    @TestMetadata("InheritNullabilityGenericSubclassSimple.java")
                    public void testInheritNullabilityGenericSubclassSimple() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritNullabilityGenericSubclassSimple.java");
                    }
                    
                    @TestMetadata("InheritNullabilityJavaSubtype.java")
                    public void testInheritNullabilityJavaSubtype() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritNullabilityJavaSubtype.java");
                    }
                    
                    @TestMetadata("InheritNullabilitySameGenericType.java")
                    public void testInheritNullabilitySameGenericType() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritNullabilitySameGenericType.java");
                    }
                    
                    @TestMetadata("InheritNullabilitySameJavaType.java")
                    public void testInheritNullabilitySameJavaType() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritNullabilitySameJavaType.java");
                    }
                    
                    @TestMetadata("InheritProjectionKind.java")
                    public void testInheritProjectionKind() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritProjectionKind.java");
                    }
                    
                    @TestMetadata("InheritReadOnlinessOfArgument.java")
                    public void testInheritReadOnlinessOfArgument() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritReadOnlinessOfArgument.java");
                    }
                    
                    @TestMetadata("InheritReadOnlinessSameClass.java")
                    public void testInheritReadOnlinessSameClass() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritReadOnlinessSameClass.java");
                    }
                    
                    @TestMetadata("InheritReadOnlinessSubclass.java")
                    public void testInheritReadOnlinessSubclass() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritReadOnlinessSubclass.java");
                    }
                    
                    @TestMetadata("SameProjectionKind.java")
                    public void testSameProjectionKind() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SameProjectionKind.java");
                    }
                    
                    @TestMetadata("SubclassFromGenericAndNot.java")
                    public void testSubclassFromGenericAndNot() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubclassFromGenericAndNot.java");
                    }
                    
                    @TestMetadata("SubclassOfCollection.java")
                    public void testSubclassOfCollection() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubclassOfCollection.java");
                    }
                    
                    @TestMetadata("SubclassOfMapEntry.java")
                    public void testSubclassOfMapEntry() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubclassOfMapEntry.java");
                    }
                    
                    @TestMetadata("SubstitutedClassParameter.java")
                    public void testSubstitutedClassParameter() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubstitutedClassParameter.java");
                    }
                    
                    @TestMetadata("SubstitutedClassParameters.java")
                    public void testSubstitutedClassParameters() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubstitutedClassParameters.java");
                    }
                    
                    @TestMetadata("TwoSuperclassesConflictingProjectionKinds.java")
                    public void testTwoSuperclassesConflictingProjectionKinds() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesConflictingProjectionKinds.java");
                    }
                    
                    @TestMetadata("TwoSuperclassesInvariantAndCovariantInferMutability.java")
                    public void testTwoSuperclassesInvariantAndCovariantInferMutability() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesInvariantAndCovariantInferMutability.java");
                    }
                    
                    @TestMetadata("TwoSuperclassesInvariantAndCovariantInferNullability.java")
                    public void testTwoSuperclassesInvariantAndCovariantInferNullability() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesInvariantAndCovariantInferNullability.java");
                    }
                    
                    @TestMetadata("TwoSuperclassesMutableAndNot.java")
                    public void testTwoSuperclassesMutableAndNot() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesMutableAndNot.java");
                    }
                    
                    @TestMetadata("TwoSuperclassesReturnJavaSubtype.java")
                    public void testTwoSuperclassesReturnJavaSubtype() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesReturnJavaSubtype.java");
                    }
                    
                    @TestMetadata("TwoSuperclassesReturnSameJavaType.java")
                    public void testTwoSuperclassesReturnSameJavaType() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesReturnSameJavaType.java");
                    }
                    
                    @TestMetadata("TwoSuperclassesSupplementNotNull.java")
                    public void testTwoSuperclassesSupplementNotNull() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesSupplementNotNull.java");
                    }
                    
                    @TestMetadata("TypeParamOfClass.java")
                    public void testTypeParamOfClass() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TypeParamOfClass.java");
                    }
                    
                    @TestMetadata("TypeParamOfClassSubstituted.java")
                    public void testTypeParamOfClassSubstituted() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TypeParamOfClassSubstituted.java");
                    }
                    
                    @TestMetadata("TypeParamOfFun.java")
                    public void testTypeParamOfFun() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TypeParamOfFun.java");
                    }
                    
                }
                
                @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter")
                public static class TypeParameter extends AbstractLoadJavaTest {
                    public void testAllFilesPresentInTypeParameter() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter"), Pattern.compile("^(.+)\\.java$"), true);
                    }
                    
                    @TestMetadata("InheritMutability.java")
                    public void testInheritMutability() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/InheritMutability.java");
                    }
                    
                    @TestMetadata("InheritNullability.java")
                    public void testInheritNullability() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/InheritNullability.java");
                    }
                    
                    @TestMetadata("InheritReadOnliness.java")
                    public void testInheritReadOnliness() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/InheritReadOnliness.java");
                    }
                    
                    @TestMetadata("TwoBounds.java")
                    public void testTwoBounds() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/TwoBounds.java");
                    }
                    
                    @TestMetadata("TwoSuperclasses.java")
                    public void testTwoSuperclasses() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/TwoSuperclasses.java");
                    }
                    
                    @TestMetadata("TwoTypeParameters.java")
                    public void testTwoTypeParameters() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/TwoTypeParameters.java");
                    }
                    
                    @TestMetadata("UseParameterAsUpperBound.java")
                    public void testUseParameterAsUpperBound() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/UseParameterAsUpperBound.java");
                    }
                    
                    @TestMetadata("UseParameterInUpperBound.java")
                    public void testUseParameterInUpperBound() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/UseParameterInUpperBound.java");
                    }
                    
                    @TestMetadata("UseParameterInUpperBoundWithKotlinSignature.java")
                    public void testUseParameterInUpperBoundWithKotlinSignature() throws Exception {
                        doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/UseParameterInUpperBoundWithKotlinSignature.java");
                    }
                    
                }
                
                public static Test innerSuite() {
                    TestSuite suite = new TestSuite("Propagation");
                    suite.addTestSuite(Propagation.class);
                    suite.addTestSuite(Parameter.class);
                    suite.addTestSuite(Return.class);
                    suite.addTestSuite(TypeParameter.class);
                    return suite;
                }
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("KotlinSignature");
                suite.addTestSuite(KotlinSignature.class);
                suite.addTestSuite(Error.class);
                suite.addTest(Propagation.innerSuite());
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/library")
        public static class Library extends AbstractLoadJavaTest {
            public void testAllFilesPresentInLibrary() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/library"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("LoadIterable.java")
            public void testLoadIterable() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/library/LoadIterable.java");
            }
            
            @TestMetadata("LoadIterator.java")
            public void testLoadIterator() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/library/LoadIterator.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/modality")
        public static class Modality extends AbstractLoadJavaTest {
            public void testAllFilesPresentInModality() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/modality"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("ModalityOfFakeOverrides.java")
            public void testModalityOfFakeOverrides() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/modality/ModalityOfFakeOverrides.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability")
        public static class Mutability extends AbstractLoadJavaTest {
            public void testAllFilesPresentInMutability() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("LoadIterable.java")
            public void testLoadIterable() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability/LoadIterable.java");
            }
            
            @TestMetadata("LoadIterableWithConflict.java")
            public void testLoadIterableWithConflict() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability/LoadIterableWithConflict.java");
            }
            
            @TestMetadata("LoadIterableWithNullability.java")
            public void testLoadIterableWithNullability() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability/LoadIterableWithNullability.java");
            }
            
            @TestMetadata("LoadIterableWithPropagation.java")
            public void testLoadIterableWithPropagation() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability/LoadIterableWithPropagation.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull")
        public static class NotNull extends AbstractLoadJavaTest {
            public void testAllFilesPresentInNotNull() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("NotNullField.java")
            public void testNotNullField() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull/NotNullField.java");
            }
            
            @TestMetadata("NotNullMethod.java")
            public void testNotNullMethod() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull/NotNullMethod.java");
            }
            
            @TestMetadata("NotNullParameter.java")
            public void testNotNullParameter() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull/NotNullParameter.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/vararg")
        public static class Vararg extends AbstractLoadJavaTest {
            public void testAllFilesPresentInVararg() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/vararg"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("VarargInt.java")
            public void testVarargInt() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/vararg/VarargInt.java");
            }
            
            @TestMetadata("VarargString.java")
            public void testVarargString() throws Exception {
                doTest("compiler/testData/loadJava/compiledJavaCompareWithKotlin/vararg/VarargString.java");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("CompiledJavaCompareWithKotlin");
            suite.addTestSuite(CompiledJavaCompareWithKotlin.class);
            suite.addTestSuite(Annotation.class);
            suite.addTestSuite(Constructor.class);
            suite.addTestSuite(JavaBean.class);
            suite.addTest(KotlinSignature.innerSuite());
            suite.addTestSuite(Library.class);
            suite.addTestSuite(Modality.class);
            suite.addTestSuite(Mutability.class);
            suite.addTestSuite(NotNull.class);
            suite.addTestSuite(Vararg.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/loadJava/compiledJavaIncludeObjectMethods")
    public static class CompiledJavaIncludeObjectMethods extends AbstractLoadJavaTest {
        public void testAllFilesPresentInCompiledJavaIncludeObjectMethods() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaIncludeObjectMethods"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("ClassWithObjectMethod.java")
        public void testClassWithObjectMethod() throws Exception {
            doTestCompiledJavaIncludeObjectMethods("compiler/testData/loadJava/compiledJavaIncludeObjectMethods/ClassWithObjectMethod.java");
        }
        
        @TestMetadata("InterfaceWithObjectMethods.java")
        public void testInterfaceWithObjectMethods() throws Exception {
            doTestCompiledJavaIncludeObjectMethods("compiler/testData/loadJava/compiledJavaIncludeObjectMethods/InterfaceWithObjectMethods.java");
        }
        
    }
    
    @TestMetadata("compiler/testData/loadJava/compiledJava")
    @InnerTestClasses({CompiledJava.Annotations.class, CompiledJava.ProtectedPackage.class, CompiledJava.ProtectedStatic.class, CompiledJava.SignaturePropagation.class, CompiledJava.SingleAbstractMethod.class, CompiledJava.Static.class})
    public static class CompiledJava extends AbstractLoadJavaTest {
        public void testAllFilesPresentInCompiledJava() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJava"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("JavaEnum.java")
        public void testJavaEnum() throws Exception {
            doTestCompiledJava("compiler/testData/loadJava/compiledJava/JavaEnum.java");
        }
        
        @TestMetadata("PackageLocalVisibility.java")
        public void testPackageLocalVisibility() throws Exception {
            doTestCompiledJava("compiler/testData/loadJava/compiledJava/PackageLocalVisibility.java");
        }
        
        @TestMetadata("SubclassFromNested.java")
        public void testSubclassFromNested() throws Exception {
            doTestCompiledJava("compiler/testData/loadJava/compiledJava/SubclassFromNested.java");
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJava/annotations")
        public static class Annotations extends AbstractLoadJavaTest {
            public void testAllFilesPresentInAnnotations() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJava/annotations"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("AnnotationWithAnnotationInParam.java")
            public void testAnnotationWithAnnotationInParam() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/AnnotationWithAnnotationInParam.java");
            }
            
            @TestMetadata("AnnotationWithArrayOfEnumInParam.java")
            public void testAnnotationWithArrayOfEnumInParam() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/AnnotationWithArrayOfEnumInParam.java");
            }
            
            @TestMetadata("AnnotationWithArrayOfStringInParam.java")
            public void testAnnotationWithArrayOfStringInParam() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/AnnotationWithArrayOfStringInParam.java");
            }
            
            @TestMetadata("AnnotationWithEmptyArrayInParam.java")
            public void testAnnotationWithEmptyArrayInParam() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/AnnotationWithEmptyArrayInParam.java");
            }
            
            @TestMetadata("AnnotationWithEnumInParam.java")
            public void testAnnotationWithEnumInParam() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/AnnotationWithEnumInParam.java");
            }
            
            @TestMetadata("CustomAnnotation.java")
            public void testCustomAnnotation() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/CustomAnnotation.java");
            }
            
            @TestMetadata("CustomAnnotationWithDefaultParameter.java")
            public void testCustomAnnotationWithDefaultParameter() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/CustomAnnotationWithDefaultParameter.java");
            }
            
            @TestMetadata("RecursiveAnnotation.java")
            public void testRecursiveAnnotation() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/RecursiveAnnotation.java");
            }
            
            @TestMetadata("RecursiveAnnotation2.java")
            public void testRecursiveAnnotation2() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/annotations/RecursiveAnnotation2.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJava/protectedPackage")
        public static class ProtectedPackage extends AbstractLoadJavaTest {
            public void testAllFilesPresentInProtectedPackage() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJava/protectedPackage"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("ProtectedPackageConstructor.java")
            public void testProtectedPackageConstructor() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageConstructor.java");
            }
            
            @TestMetadata("ProtectedPackageFun.java")
            public void testProtectedPackageFun() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageFun.java");
            }
            
            @TestMetadata("ProtectedPackageProperty.java")
            public void testProtectedPackageProperty() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageProperty.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJava/protectedStatic")
        public static class ProtectedStatic extends AbstractLoadJavaTest {
            public void testAllFilesPresentInProtectedStatic() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJava/protectedStatic"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("ConstructorInProtectedStaticNestedClass.java")
            public void testConstructorInProtectedStaticNestedClass() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/protectedStatic/ConstructorInProtectedStaticNestedClass.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation")
        public static class SignaturePropagation extends AbstractLoadJavaTest {
            public void testAllFilesPresentInSignaturePropagation() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJava/signaturePropagation"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("ArraysInSubtypes.java")
            public void testArraysInSubtypes() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/signaturePropagation/ArraysInSubtypes.java");
            }
            
            @TestMetadata("MethodTypeParameterErased.java")
            public void testMethodTypeParameterErased() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/signaturePropagation/MethodTypeParameterErased.java");
            }
            
            @TestMetadata("RawSuperType.java")
            public void testRawSuperType() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperType.java");
            }
            
            @TestMetadata("ReturnInnerSubclassOfSupersInner.java")
            public void testReturnInnerSubclassOfSupersInner() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/signaturePropagation/ReturnInnerSubclassOfSupersInner.java");
            }
            
            @TestMetadata("SubclassWithRawType.java")
            public void testSubclassWithRawType() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/signaturePropagation/SubclassWithRawType.java");
            }
            
            @TestMetadata("TwoSuperclassesInconsistentGenericTypes.java")
            public void testTwoSuperclassesInconsistentGenericTypes() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/signaturePropagation/TwoSuperclassesInconsistentGenericTypes.java");
            }
            
            @TestMetadata("TwoSuperclassesVarargAndNot.java")
            public void testTwoSuperclassesVarargAndNot() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/signaturePropagation/TwoSuperclassesVarargAndNot.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJava/singleAbstractMethod")
        public static class SingleAbstractMethod extends AbstractLoadJavaTest {
            public void testAllFilesPresentInSingleAbstractMethod() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJava/singleAbstractMethod"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("Comparator.java")
            public void testComparator() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/singleAbstractMethod/Comparator.java");
            }
            
            @TestMetadata("FilenameFilter.java")
            public void testFilenameFilter() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/singleAbstractMethod/FilenameFilter.java");
            }
            
            @TestMetadata("GenericInterfaceParameterWithSelfBound.java")
            public void testGenericInterfaceParameterWithSelfBound() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/singleAbstractMethod/GenericInterfaceParameterWithSelfBound.java");
            }
            
            @TestMetadata("GenericInterfaceParametersWithBounds.java")
            public void testGenericInterfaceParametersWithBounds() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/singleAbstractMethod/GenericInterfaceParametersWithBounds.java");
            }
            
            @TestMetadata("GenericMethodParameters.java")
            public void testGenericMethodParameters() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/singleAbstractMethod/GenericMethodParameters.java");
            }
            
            @TestMetadata("InterfaceWithObjectMethod.java")
            public void testInterfaceWithObjectMethod() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/singleAbstractMethod/InterfaceWithObjectMethod.java");
            }
            
            @TestMetadata("Nested.java")
            public void testNested() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/singleAbstractMethod/Nested.java");
            }
            
            @TestMetadata("Runnable.java")
            public void testRunnable() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/singleAbstractMethod/Runnable.java");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJava/static")
        public static class Static extends AbstractLoadJavaTest {
            public void testAllFilesPresentInStatic() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJava/static"), Pattern.compile("^(.+)\\.java$"), true);
            }
            
            @TestMetadata("DeeplyInnerClass.java")
            public void testDeeplyInnerClass() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/static/DeeplyInnerClass.java");
            }
            
            @TestMetadata("DeeplyNestedStatic.java")
            public void testDeeplyNestedStatic() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/static/DeeplyNestedStatic.java");
            }
            
            @TestMetadata("Enum.java")
            public void testEnum() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/static/Enum.java");
            }
            
            @TestMetadata("InnerClass.java")
            public void testInnerClass() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/static/InnerClass.java");
            }
            
            @TestMetadata("Simple.java")
            public void testSimple() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/static/Simple.java");
            }
            
            @TestMetadata("StaticFinal.java")
            public void testStaticFinal() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/static/StaticFinal.java");
            }
            
            @TestMetadata("StaticMembersInEnum.java")
            public void testStaticMembersInEnum() throws Exception {
                doTestCompiledJava("compiler/testData/loadJava/compiledJava/static/StaticMembersInEnum.java");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("CompiledJava");
            suite.addTestSuite(CompiledJava.class);
            suite.addTestSuite(Annotations.class);
            suite.addTestSuite(ProtectedPackage.class);
            suite.addTestSuite(ProtectedStatic.class);
            suite.addTestSuite(SignaturePropagation.class);
            suite.addTestSuite(SingleAbstractMethod.class);
            suite.addTestSuite(Static.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/loadJava/sourceJava")
    public static class SourceJava extends AbstractLoadJavaTest {
        public void testAllFilesPresentInSourceJava() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/sourceJava"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("ErrorTypes.java")
        public void testErrorTypes() throws Exception {
            doTestSourceJava("compiler/testData/loadJava/sourceJava/ErrorTypes.java");
        }
        
        @TestMetadata("ReturnInnerSubclassOfSupersInner.java")
        public void testReturnInnerSubclassOfSupersInner() throws Exception {
            doTestSourceJava("compiler/testData/loadJava/sourceJava/ReturnInnerSubclassOfSupersInner.java");
        }
        
        @TestMetadata("ReturnNotSubtype.java")
        public void testReturnNotSubtype() throws Exception {
            doTestSourceJava("compiler/testData/loadJava/sourceJava/ReturnNotSubtype.java");
        }
        
        @TestMetadata("WrongNumberOfGenericParameters.java")
        public void testWrongNumberOfGenericParameters() throws Exception {
            doTestSourceJava("compiler/testData/loadJava/sourceJava/WrongNumberOfGenericParameters.java");
        }
        
    }
    
    @TestMetadata("compiler/testData/loadJava/javaAgainstKotlin")
    @InnerTestClasses({JavaAgainstKotlin.SignaturePropagation.class, JavaAgainstKotlin.Visibility.class})
    public static class JavaAgainstKotlin extends AbstractLoadJavaTest {
        public void testAllFilesPresentInJavaAgainstKotlin() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/javaAgainstKotlin"), Pattern.compile("^(.+)\\.txt$"), true);
        }
        
        @TestMetadata("compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation")
        @InnerTestClasses({})
        public static class SignaturePropagation extends AbstractLoadJavaTest {
            public void testAllFilesPresentInSignaturePropagation() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation"), Pattern.compile("^(.+)\\.txt$"), true);
            }
            
            @TestMetadata("DeepSubclassingKotlinInJava.txt")
            public void testDeepSubclassingKotlinInJava() throws Exception {
                doTestJavaAgainstKotlin("compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/DeepSubclassingKotlinInJava.txt");
            }
            
            @TestMetadata("SubclassingKotlinInJava.txt")
            public void testSubclassingKotlinInJava() throws Exception {
                doTestJavaAgainstKotlin("compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassingKotlinInJava.txt");
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("SignaturePropagation");
                suite.addTestSuite(SignaturePropagation.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/loadJava/javaAgainstKotlin/visibility")
        @InnerTestClasses({})
        public static class Visibility extends AbstractLoadJavaTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/javaAgainstKotlin/visibility"), Pattern.compile("^(.+)\\.txt$"), true);
            }
            
            @TestMetadata("PackageLocal.txt")
            public void testPackageLocal() throws Exception {
                doTestJavaAgainstKotlin("compiler/testData/loadJava/javaAgainstKotlin/visibility/PackageLocal.txt");
            }
            
            @TestMetadata("ProtectedPackage.txt")
            public void testProtectedPackage() throws Exception {
                doTestJavaAgainstKotlin("compiler/testData/loadJava/javaAgainstKotlin/visibility/ProtectedPackage.txt");
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Visibility");
                suite.addTestSuite(Visibility.class);
                return suite;
            }
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("JavaAgainstKotlin");
            suite.addTestSuite(JavaAgainstKotlin.class);
            suite.addTest(SignaturePropagation.innerSuite());
            suite.addTest(Visibility.innerSuite());
            return suite;
        }
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("LoadJavaTestGenerated");
        suite.addTest(CompiledJavaCompareWithKotlin.innerSuite());
        suite.addTestSuite(CompiledJavaIncludeObjectMethods.class);
        suite.addTest(CompiledJava.innerSuite());
        suite.addTestSuite(SourceJava.class);
        suite.addTest(JavaAgainstKotlin.innerSuite());
        return suite;
    }
}
