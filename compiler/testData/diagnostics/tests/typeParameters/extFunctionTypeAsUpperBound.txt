package

public val </*0*/ T : kotlin.Int.() -> kotlin.String> bar: (kotlin.Int) -> kotlin.String
public val </*0*/ T : context(kotlin.Int) () -> kotlin.String> bar2: (kotlin.Int) -> kotlin.String
public fun </*0*/ T : kotlin.Int.() -> kotlin.String> foo(): kotlin.Unit
public fun </*0*/ T : context(kotlin.Int) () -> kotlin.String> foo2(): kotlin.Unit

public final class A</*0*/ T : kotlin.Double.(kotlin.Int) -> kotlin.Unit> {
    public constructor A</*0*/ T : kotlin.Double.(kotlin.Int) -> kotlin.Unit>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class A2</*0*/ T : context(kotlin.Double) (kotlin.Int) -> kotlin.Unit> {
    public constructor A2</*0*/ T : context(kotlin.Double) (kotlin.Int) -> kotlin.Unit>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface B</*0*/ T, /*1*/ U : T.() -> kotlin.Unit> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface B2</*0*/ T, /*1*/ U : context(T) () -> kotlin.Unit> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

