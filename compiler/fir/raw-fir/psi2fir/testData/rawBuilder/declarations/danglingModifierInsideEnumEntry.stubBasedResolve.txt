FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] danglingModifierInsideEnumEntry.kt
    public final [ResolvedTo(BODY_RESOLVE)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=foo/Anno.i] i: R|kotlin/Int|): R|foo/Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val i: R|kotlin/Int| = R|<local>/i|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/Int|

    }
    public final const [ResolvedTo(CONTRACTS)] val CONSTANT: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    public final [ResolvedTo(BODY_RESOLVE)] enum class MyEnumClass : R|kotlin/Enum<foo/MyEnumClass>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyEnumClass] constructor(): R|foo/MyEnumClass| {
            super<R|kotlin/Enum<foo/MyEnumClass>|>()
        }

        public final static [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=MyEnumClass] enum entry Entry: R|foo/MyEnumClass| = LAZY_EXPRESSION
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyEnumClass] fun values(): R|kotlin/Array<foo/MyEnumClass>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyEnumClass] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|foo/MyEnumClass| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyEnumClass] val entries: R|kotlin/enums/EnumEntries<foo/MyEnumClass>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<foo/MyEnumClass>|

    }