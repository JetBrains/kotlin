/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.light.classes.symbol.source;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi")
@TestDataPath("$PROJECT_ROOT")
public class ScriptSymbolLightClassesByPsiForSourceTestGenerated extends AbstractScriptSymbolLightClassesByPsiForSourceTest {
  @Test
  public void testAllFilesPresentInLightClassByPsi() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi"), Pattern.compile("^(.+)\\.(kts)$"), null, true);
  }

  @Nested
  @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/facades")
  @TestDataPath("$PROJECT_ROOT")
  public class Facades {
    @Test
    public void testAllFilesPresentInFacades() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/facades"), Pattern.compile("^(.+)\\.(kts)$"), null, true);
    }
  }

  @Nested
  @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed")
  @TestDataPath("$PROJECT_ROOT")
  public class JvmExposeBoxed {
    @Test
    public void testAllFilesPresentInJvmExposeBoxed() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed"), Pattern.compile("^(.+)\\.(kts)$"), null, true);
    }

    @Test
    @TestMetadata("script.kts")
    public void testScript() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/script.kts");
    }

    @Nested
    @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive")
    @TestDataPath("$PROJECT_ROOT")
    public class Directive {
      @Test
      public void testAllFilesPresentInDirective() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive"), Pattern.compile("^(.+)\\.(kts)$"), null, true);
      }

      @Test
      @TestMetadata("script.kts")
      public void testScript() {
        runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/directive/script.kts");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction")
    @TestDataPath("$PROJECT_ROOT")
    public class FeatureInteraction {
      @Test
      public void testAllFilesPresentInFeatureInteraction() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/featureInteraction"), Pattern.compile("^(.+)\\.(kts)$"), null, true);
      }
    }

    @Nested
    @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit")
    @TestDataPath("$PROJECT_ROOT")
    public class Inherit {
      @Test
      public void testAllFilesPresentInInherit() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit"), Pattern.compile("^(.+)\\.(kts)$"), null, true);
      }

      @Nested
      @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit/child")
      @TestDataPath("$PROJECT_ROOT")
      public class Child {
        @Test
        public void testAllFilesPresentInChild() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/jvmExposeBoxed/inherit/child"), Pattern.compile("^(.+)\\.(kts)$"), null, true);
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts")
  @TestDataPath("$PROJECT_ROOT")
  public class Scripts {
    @Test
    public void testAllFilesPresentInScripts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts"), Pattern.compile("^(.+)\\.(kts)$"), null, true);
    }

    @Test
    @TestMetadata("FunsPropsAndFields.kts")
    public void testFunsPropsAndFields() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts/FunsPropsAndFields.kts");
    }

    @Test
    @TestMetadata("HelloWorld.kts")
    public void testHelloWorld() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts/HelloWorld.kts");
    }

    @Test
    @TestMetadata("InnerClasses.kts")
    public void testInnerClasses() {
      runTest("compiler/testData/asJava/lightClasses/lightClassByPsi/scripts/InnerClasses.kts");
    }
  }
}
