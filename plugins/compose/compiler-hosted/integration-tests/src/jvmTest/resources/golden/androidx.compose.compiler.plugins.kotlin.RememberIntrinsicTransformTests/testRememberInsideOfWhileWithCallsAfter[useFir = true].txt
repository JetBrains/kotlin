//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember


@Composable
fun Test(items: List<Int>) {
    for (item in items) {
        val foo = remember { Foo() }
        A()
        print(foo)
        print(item)
    }
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(items: List<Int>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)*<rememb...>,<A()>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changedInstance(items)) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    val <iterator> = items.iterator()
    while (<iterator>.hasNext()) {
      val item = <iterator>.next()
      val foo = <block>{
        sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
        val tmp0_group = %composer.cache(false) {
          Foo()
        }
        sourceInformationMarkerEnd(%composer)
        tmp0_group
      }
      A(%composer, 0)
      print(foo)
      print(item)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(items, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
