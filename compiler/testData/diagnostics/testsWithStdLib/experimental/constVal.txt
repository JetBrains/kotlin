// -- Module: <api> --
package

package api {
    @api.ExperimentalAPI public const val MEANING: kotlin.Int = 42

    public final annotation class Anno : kotlin.Annotation {
        public constructor Anno(/*0*/ value: kotlin.Int)
        public final val value: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    @kotlin.Experimental(changesMayBreak = {Impact.COMPILATION}, level = Level.WARNING) @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.PROPERTY, AnnotationTarget.FUNCTION}) public final annotation class ExperimentalAPI : kotlin.Annotation {
        public constructor ExperimentalAPI()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}


// -- Module: <usage1> --
package

package api {
}

package usage1 {
    @api.ExperimentalAPI @api.Anno(value = 42) public fun usage(): kotlin.Unit
}


// -- Module: <usage2> --
package

package api {
}

package usage2 {
    @api.Anno(value = 42) public fun usage(): kotlin.Unit
}


// -- Module: <usage3> --
package

package api {
}

package usage3 {
    @api.Anno(value = 42) public fun usage(): kotlin.Unit
}
