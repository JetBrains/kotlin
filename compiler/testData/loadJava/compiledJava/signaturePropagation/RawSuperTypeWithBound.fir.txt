public open class RawSuperTypeWithBound : R|kotlin/Any| {
    public constructor(): R|test/RawSuperTypeWithBound|

    public abstract interface Bound : R|kotlin/Any| {
    }
    public open inner class Derived : R|kotlin/Any|, R|Raw type test/RawSuperTypeWithBound.Super<test/RawSuperTypeWithBound.Bound!>| {
        public open fun foo(o: R|kotlin/Any!|): R|kotlin/Unit|

        @R|java/lang/Override|() public open fun foo(o: R|test/RawSuperTypeWithBound.Bound!|): R|kotlin/Unit|

        @R|java/lang/Override|() public open fun dummy(): R|kotlin/Unit|

        public test/RawSuperTypeWithBound.constructor(): R|test/RawSuperTypeWithBound.Derived|

    }
    public abstract interface Super<T : R|test/RawSuperTypeWithBound.Bound!|> : R|kotlin/Any| {
        public abstract fun foo(t: R|ft<T & Any, T?>|): R|kotlin/Unit|

        public abstract fun dummy(): R|kotlin/Unit|

    }
}
