// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference}
 */
public  final class IrClassReference extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrClassReference, IrClassReference.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference)
    IrClassReferenceOrBuilder {
  private IrClassReference() {
  }
  private int bitField0_;
  public static final int CLASS_SYMBOL_FIELD_NUMBER = 1;
  private long classSymbol_;
  /**
   * <code>int64 class_symbol = 1 [features = { ... }</code>
   * @return Whether the classSymbol field is set.
   */
  @java.lang.Override
  public boolean hasClassSymbol() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>int64 class_symbol = 1 [features = { ... }</code>
   * @return The classSymbol.
   */
  @java.lang.Override
  public long getClassSymbol() {
    return classSymbol_;
  }
  /**
   * <code>int64 class_symbol = 1 [features = { ... }</code>
   * @param value The classSymbol to set.
   */
  private void setClassSymbol(long value) {
    bitField0_ |= 0x00000001;
    classSymbol_ = value;
  }
  /**
   * <code>int64 class_symbol = 1 [features = { ... }</code>
   */
  private void clearClassSymbol() {
    bitField0_ = (bitField0_ & ~0x00000001);
    classSymbol_ = 0L;
  }

  public static final int CLASS_TYPE_FIELD_NUMBER = 2;
  private int classType_;
  /**
   * <code>int32 class_type = 2 [features = { ... }</code>
   * @return Whether the classType field is set.
   */
  @java.lang.Override
  public boolean hasClassType() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int32 class_type = 2 [features = { ... }</code>
   * @return The classType.
   */
  @java.lang.Override
  public int getClassType() {
    return classType_;
  }
  /**
   * <code>int32 class_type = 2 [features = { ... }</code>
   * @param value The classType to set.
   */
  private void setClassType(int value) {
    bitField0_ |= 0x00000002;
    classType_ = value;
  }
  /**
   * <code>int32 class_type = 2 [features = { ... }</code>
   */
  private void clearClassType() {
    bitField0_ = (bitField0_ & ~0x00000002);
    classType_ = 0;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReferenceOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>int64 class_symbol = 1 [features = { ... }</code>
     * @return Whether the classSymbol field is set.
     */
    @java.lang.Override
    public boolean hasClassSymbol() {
      return instance.hasClassSymbol();
    }
    /**
     * <code>int64 class_symbol = 1 [features = { ... }</code>
     * @return The classSymbol.
     */
    @java.lang.Override
    public long getClassSymbol() {
      return instance.getClassSymbol();
    }
    /**
     * <code>int64 class_symbol = 1 [features = { ... }</code>
     * @param value The classSymbol to set.
     * @return This builder for chaining.
     */
    public Builder setClassSymbol(long value) {
      copyOnWrite();
      instance.setClassSymbol(value);
      return this;
    }
    /**
     * <code>int64 class_symbol = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearClassSymbol() {
      copyOnWrite();
      instance.clearClassSymbol();
      return this;
    }

    /**
     * <code>int32 class_type = 2 [features = { ... }</code>
     * @return Whether the classType field is set.
     */
    @java.lang.Override
    public boolean hasClassType() {
      return instance.hasClassType();
    }
    /**
     * <code>int32 class_type = 2 [features = { ... }</code>
     * @return The classType.
     */
    @java.lang.Override
    public int getClassType() {
      return instance.getClassType();
    }
    /**
     * <code>int32 class_type = 2 [features = { ... }</code>
     * @param value The classType to set.
     * @return This builder for chaining.
     */
    public Builder setClassType(int value) {
      copyOnWrite();
      instance.setClassType(value);
      return this;
    }
    /**
     * <code>int32 class_type = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearClassType() {
      copyOnWrite();
      instance.clearClassType();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "classSymbol_",
            "classType_",
          };
          java.lang.String info =
              "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1502\u0000\u0002" +
              "\u1504\u0001";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference DEFAULT_INSTANCE;
  static {
    IrClassReference defaultInstance = new IrClassReference();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrClassReference.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrClassReference getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrClassReference> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrClassReference> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
