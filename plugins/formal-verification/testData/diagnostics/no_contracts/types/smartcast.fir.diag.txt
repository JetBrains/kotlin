/smartcast.kt:(23,38): info: Generated Viper text for smartcastReturn:
method f$smartcastReturn$TF$Int(p$n: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$intType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$n), df$rt$nullable(df$rt$intType()))
  if (!(p$n == df$rt$nullValue())) {
    ret$0 := p$n
  } else {
    ret$0 := df$rt$intToRef(0)}
  goto lbl$ret$0
  label lbl$ret$0
}

/smartcast.kt:(88,106): info: Generated Viper text for isNullOrEmptyWrong:
method f$isNullOrEmptyWrong$TF$c$pkg$kotlin$CharSequence(p$seq: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$seq), df$rt$nullable(df$rt$T$c$pkg$kotlin$CharSequence()))
  inhale p$seq != df$rt$nullValue() ==>
    acc(p$pkg$kotlin$c$CharSequence$shared(p$seq), wildcard)
  if (p$seq == df$rt$nullValue()) {
    var anon$0: Ref
    if (p$seq != df$rt$nullValue()) {
      var anon$1: Ref
      var anon$2: Ref
      anon$2 := pg$public$length(p$seq)
      anon$1 := anon$2
      inhale df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$intType())
      anon$0 := anon$1
    } else {
      anon$0 := df$rt$nullValue()}
    ret$0 := df$rt$boolToRef(anon$0 == df$rt$intToRef(0))
  } else {
    ret$0 := df$rt$boolToRef(false)}
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$public$length(this: Ref) returns (ret: Ref)
