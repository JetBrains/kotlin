// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation}
 */
public  final class IrMultiFieldValueClassRepresentation extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrMultiFieldValueClassRepresentation, IrMultiFieldValueClassRepresentation.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation)
    IrMultiFieldValueClassRepresentationOrBuilder {
  private IrMultiFieldValueClassRepresentation() {
    underlyingPropertyName_ = emptyIntList();
    underlyingPropertyType_ = emptyIntList();
  }
  public static final int UNDERLYING_PROPERTY_NAME_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.protobuf.Internal.IntList underlyingPropertyName_;
  /**
   * <code>repeated int32 underlying_property_name = 1;</code>
   * @return A list containing the underlyingPropertyName.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getUnderlyingPropertyNameList() {
    return underlyingPropertyName_;
  }
  /**
   * <code>repeated int32 underlying_property_name = 1;</code>
   * @return The count of underlyingPropertyName.
   */
  @java.lang.Override
  public int getUnderlyingPropertyNameCount() {
    return underlyingPropertyName_.size();
  }
  /**
   * <code>repeated int32 underlying_property_name = 1;</code>
   * @param index The index of the element to return.
   * @return The underlyingPropertyName at the given index.
   */
  @java.lang.Override
  public int getUnderlyingPropertyName(int index) {
    return underlyingPropertyName_.getInt(index);
  }
  private int underlyingPropertyNameMemoizedSerializedSize = -1;
  private void ensureUnderlyingPropertyNameIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = underlyingPropertyName_;
    if (!tmp.isModifiable()) {
      underlyingPropertyName_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int32 underlying_property_name = 1;</code>
   * @param index The index to set the value at.
   * @param value The underlyingPropertyName to set.
   */
  private void setUnderlyingPropertyName(
      int index, int value) {
    ensureUnderlyingPropertyNameIsMutable();
    underlyingPropertyName_.setInt(index, value);
  }
  /**
   * <code>repeated int32 underlying_property_name = 1;</code>
   * @param value The underlyingPropertyName to add.
   */
  private void addUnderlyingPropertyName(int value) {
    ensureUnderlyingPropertyNameIsMutable();
    underlyingPropertyName_.addInt(value);
  }
  /**
   * <code>repeated int32 underlying_property_name = 1;</code>
   * @param values The underlyingPropertyName to add.
   */
  private void addAllUnderlyingPropertyName(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureUnderlyingPropertyNameIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, underlyingPropertyName_);
  }
  /**
   * <code>repeated int32 underlying_property_name = 1;</code>
   */
  private void clearUnderlyingPropertyName() {
    underlyingPropertyName_ = emptyIntList();
  }

  public static final int UNDERLYING_PROPERTY_TYPE_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.protobuf.Internal.IntList underlyingPropertyType_;
  /**
   * <code>repeated int32 underlying_property_type = 2;</code>
   * @return A list containing the underlyingPropertyType.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getUnderlyingPropertyTypeList() {
    return underlyingPropertyType_;
  }
  /**
   * <code>repeated int32 underlying_property_type = 2;</code>
   * @return The count of underlyingPropertyType.
   */
  @java.lang.Override
  public int getUnderlyingPropertyTypeCount() {
    return underlyingPropertyType_.size();
  }
  /**
   * <code>repeated int32 underlying_property_type = 2;</code>
   * @param index The index of the element to return.
   * @return The underlyingPropertyType at the given index.
   */
  @java.lang.Override
  public int getUnderlyingPropertyType(int index) {
    return underlyingPropertyType_.getInt(index);
  }
  private int underlyingPropertyTypeMemoizedSerializedSize = -1;
  private void ensureUnderlyingPropertyTypeIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.IntList tmp = underlyingPropertyType_;
    if (!tmp.isModifiable()) {
      underlyingPropertyType_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <code>repeated int32 underlying_property_type = 2;</code>
   * @param index The index to set the value at.
   * @param value The underlyingPropertyType to set.
   */
  private void setUnderlyingPropertyType(
      int index, int value) {
    ensureUnderlyingPropertyTypeIsMutable();
    underlyingPropertyType_.setInt(index, value);
  }
  /**
   * <code>repeated int32 underlying_property_type = 2;</code>
   * @param value The underlyingPropertyType to add.
   */
  private void addUnderlyingPropertyType(int value) {
    ensureUnderlyingPropertyTypeIsMutable();
    underlyingPropertyType_.addInt(value);
  }
  /**
   * <code>repeated int32 underlying_property_type = 2;</code>
   * @param values The underlyingPropertyType to add.
   */
  private void addAllUnderlyingPropertyType(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureUnderlyingPropertyTypeIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, underlyingPropertyType_);
  }
  /**
   * <code>repeated int32 underlying_property_type = 2;</code>
   */
  private void clearUnderlyingPropertyType() {
    underlyingPropertyType_ = emptyIntList();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentationOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>repeated int32 underlying_property_name = 1;</code>
     * @return A list containing the underlyingPropertyName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getUnderlyingPropertyNameList() {
      return java.util.Collections.unmodifiableList(
          instance.getUnderlyingPropertyNameList());
    }
    /**
     * <code>repeated int32 underlying_property_name = 1;</code>
     * @return The count of underlyingPropertyName.
     */
    @java.lang.Override
    public int getUnderlyingPropertyNameCount() {
      return instance.getUnderlyingPropertyNameCount();
    }
    /**
     * <code>repeated int32 underlying_property_name = 1;</code>
     * @param index The index of the element to return.
     * @return The underlyingPropertyName at the given index.
     */
    @java.lang.Override
    public int getUnderlyingPropertyName(int index) {
      return instance.getUnderlyingPropertyName(index);
    }
    /**
     * <code>repeated int32 underlying_property_name = 1;</code>
     * @param value The underlyingPropertyName to set.
     * @return This builder for chaining.
     */
    public Builder setUnderlyingPropertyName(
        int index, int value) {
      copyOnWrite();
      instance.setUnderlyingPropertyName(index, value);
      return this;
    }
    /**
     * <code>repeated int32 underlying_property_name = 1;</code>
     * @param value The underlyingPropertyName to add.
     * @return This builder for chaining.
     */
    public Builder addUnderlyingPropertyName(int value) {
      copyOnWrite();
      instance.addUnderlyingPropertyName(value);
      return this;
    }
    /**
     * <code>repeated int32 underlying_property_name = 1;</code>
     * @param values The underlyingPropertyName to add.
     * @return This builder for chaining.
     */
    public Builder addAllUnderlyingPropertyName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllUnderlyingPropertyName(values);
      return this;
    }
    /**
     * <code>repeated int32 underlying_property_name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearUnderlyingPropertyName() {
      copyOnWrite();
      instance.clearUnderlyingPropertyName();
      return this;
    }

    /**
     * <code>repeated int32 underlying_property_type = 2;</code>
     * @return A list containing the underlyingPropertyType.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getUnderlyingPropertyTypeList() {
      return java.util.Collections.unmodifiableList(
          instance.getUnderlyingPropertyTypeList());
    }
    /**
     * <code>repeated int32 underlying_property_type = 2;</code>
     * @return The count of underlyingPropertyType.
     */
    @java.lang.Override
    public int getUnderlyingPropertyTypeCount() {
      return instance.getUnderlyingPropertyTypeCount();
    }
    /**
     * <code>repeated int32 underlying_property_type = 2;</code>
     * @param index The index of the element to return.
     * @return The underlyingPropertyType at the given index.
     */
    @java.lang.Override
    public int getUnderlyingPropertyType(int index) {
      return instance.getUnderlyingPropertyType(index);
    }
    /**
     * <code>repeated int32 underlying_property_type = 2;</code>
     * @param value The underlyingPropertyType to set.
     * @return This builder for chaining.
     */
    public Builder setUnderlyingPropertyType(
        int index, int value) {
      copyOnWrite();
      instance.setUnderlyingPropertyType(index, value);
      return this;
    }
    /**
     * <code>repeated int32 underlying_property_type = 2;</code>
     * @param value The underlyingPropertyType to add.
     * @return This builder for chaining.
     */
    public Builder addUnderlyingPropertyType(int value) {
      copyOnWrite();
      instance.addUnderlyingPropertyType(value);
      return this;
    }
    /**
     * <code>repeated int32 underlying_property_type = 2;</code>
     * @param values The underlyingPropertyType to add.
     * @return This builder for chaining.
     */
    public Builder addAllUnderlyingPropertyType(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllUnderlyingPropertyType(values);
      return this;
    }
    /**
     * <code>repeated int32 underlying_property_type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearUnderlyingPropertyType() {
      copyOnWrite();
      instance.clearUnderlyingPropertyType();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "underlyingPropertyName_",
            "underlyingPropertyType_",
          };
          java.lang.String info =
              "\u0004\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0002\u0000\u0001\'\u0002\'";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation DEFAULT_INSTANCE;
  static {
    IrMultiFieldValueClassRepresentation defaultInstance = new IrMultiFieldValueClassRepresentation();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrMultiFieldValueClassRepresentation.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrMultiFieldValueClassRepresentation> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrMultiFieldValueClassRepresentation> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
