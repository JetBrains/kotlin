/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.cli.jvm.analyzer;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/cli/jvm/analyzer")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IrAnalyzerTestGenerated extends AbstractIrAnalyzerTest {
    public void testAllFilesPresentInAnalyzer() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cli/jvm/analyzer"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("forLoop.kt")
    public void testForLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cli/jvm/analyzer/forLoop.kt");
        doTest(fileName);
    }

    @TestMetadata("functionCall.kt")
    public void testFunctionCall() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cli/jvm/analyzer/functionCall.kt");
        doTest(fileName);
    }

    @TestMetadata("functionDefinition.kt")
    public void testFunctionDefinition() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cli/jvm/analyzer/functionDefinition.kt");
        doTest(fileName);
    }

    @TestMetadata("functionName.kt")
    public void testFunctionName() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cli/jvm/analyzer/functionName.kt");
        doTest(fileName);
    }

    @TestMetadata("ifThenElse.kt")
    public void testIfThenElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cli/jvm/analyzer/ifThenElse.kt");
        doTest(fileName);
    }

    @TestMetadata("variableType.kt")
    public void testVariableType() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cli/jvm/analyzer/variableType.kt");
        doTest(fileName);
    }

    @TestMetadata("whileLoop.kt")
    public void testWhileLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cli/jvm/analyzer/whileLoop.kt");
        doTest(fileName);
    }
}
