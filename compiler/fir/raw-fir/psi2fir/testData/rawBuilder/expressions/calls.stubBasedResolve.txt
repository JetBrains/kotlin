FILE: [ResolvedTo(BODY_RESOLVE)] calls.kt
    public final infix [ResolvedTo(CONTRACTS)] fun [ResolvedTo(CONTRACTS)] R|kotlin/Int|.distance([ResolvedTo(CONTRACTS)] y: R|kotlin/Int|): <implicit> { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun test(): R|kotlin/Int| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun testRegular(): R|kotlin/Int| { LAZY_BLOCK }
    public final [ResolvedTo(BODY_RESOLVE)] class My : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/My.x] x: R|kotlin/Int|): R|My| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] var x: R|kotlin/Int| = R|<local>/x|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] get(): R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=My] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Int|): R|kotlin/Unit|

        public final operator [ResolvedTo(CONTRACTS)] fun invoke(): <implicit> { LAZY_BLOCK }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        public final [ResolvedTo(CONTRACTS)] fun copy(): <implicit> { LAZY_BLOCK }

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun testInvoke(): R|kotlin/Int| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun testQualified([ResolvedTo(ANNOTATION_ARGUMENTS)] first: R|My|, [ResolvedTo(ANNOTATION_ARGUMENTS)] second: R|My?|): R|kotlin/Unit| { LAZY_BLOCK }