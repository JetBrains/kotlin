package

package test {

    internal final class KFrame : javax.swing.JFrame {
        public constructor KFrame()
        invisible_fake final override /*1*/ /*fake_override*/ var acc: [ERROR : Unresolved java classifier: AccessControlContext]!
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleContext: [ERROR : Unresolved java classifier: AccessibleContext]!
        invisible_fake final override /*1*/ /*fake_override*/ var alwaysOnTop: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var anchor: kotlin.Any!
        invisible_fake final override /*1*/ /*fake_override*/ var appContext: [ERROR : Unresolved java classifier: AppContext]!
        invisible_fake final override /*1*/ /*fake_override*/ var autoFocusTransferOnDisposal: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var autoRequestFocus: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var background: [ERROR : Unresolved java classifier: Color]!
        invisible_fake final override /*1*/ /*fake_override*/ var backgroundEraseDisabled: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var beforeFirstShow: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var boundsOp: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var bufferStrategy: [ERROR : Unresolved java classifier: BufferStrategy]!
        invisible_fake final override /*1*/ /*fake_override*/ var changeSupport: [ERROR : Unresolved java classifier: PropertyChangeSupport]!
        invisible_fake final override /*1*/ /*fake_override*/ var coalescingEnabled: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var component: kotlin.(Mutable)List<java.awt.Component!>!
        invisible_fake final override /*1*/ /*fake_override*/ var componentListener: [ERROR : Unresolved java classifier: ComponentListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var componentOrientation: [ERROR : Unresolved java classifier: ComponentOrientation]!
        invisible_fake final override /*1*/ /*fake_override*/ var componentSerializedDataVersion: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var compoundShape: [ERROR : Unresolved java classifier: Region]!
        invisible_fake final override /*1*/ /*fake_override*/ var containerListener: [ERROR : Unresolved java classifier: ContainerListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var containerSerializedDataVersion: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var cursor: [ERROR : Unresolved java classifier: Cursor]!
        invisible_fake final override /*1*/ /*fake_override*/ var defaultCloseOperation: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var descendantsCount: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var dispatcher: [ERROR : Unresolved java classifier: LightweightDispatcher]!
        invisible_fake final override /*1*/ /*fake_override*/ var disposing: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var dropTarget: [ERROR : Unresolved java classifier: DropTarget]!
        invisible_fake final override /*1*/ /*fake_override*/ var enabled: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var eventCache: kotlin.Array<(out) [ERROR : Unresolved java classifier: EventQueueItem]!>!
        invisible_fake final override /*1*/ /*fake_override*/ var eventMask: kotlin.Long
        invisible_fake final override /*1*/ /*fake_override*/ var focusCycleRoot: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var focusListener: [ERROR : Unresolved java classifier: FocusListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var focusMgr: [ERROR : Unresolved java classifier: FocusManager]!
        invisible_fake final override /*1*/ /*fake_override*/ var focusTraversalKeys: kotlin.Array<(out) kotlin.(Mutable)Set<*>!>!
        invisible_fake final override /*1*/ /*fake_override*/ var focusTraversalKeysEnabled: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var focusTraversalPolicy: [ERROR : Unresolved java classifier: FocusTraversalPolicy]!
        invisible_fake final override /*1*/ /*fake_override*/ var focusTraversalPolicyProvider: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var focusable: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var focusableWindowState: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var font: [ERROR : Unresolved java classifier: Font]!
        invisible_fake final override /*1*/ /*fake_override*/ var foreground: [ERROR : Unresolved java classifier: Color]!
        invisible_fake final override /*1*/ /*fake_override*/ var frameSerializedDataVersion: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var graphicsConfig: [ERROR : Unresolved java classifier: GraphicsConfiguration]!
        invisible_fake final override /*1*/ /*fake_override*/ var height: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var hierarchyBoundsListener: [ERROR : Unresolved java classifier: HierarchyBoundsListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var hierarchyListener: [ERROR : Unresolved java classifier: HierarchyListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var icons: kotlin.(Mutable)List<[ERROR : Unresolved java classifier: Image]!>!
        invisible_fake final override /*1*/ /*fake_override*/ var ignoreRepaint: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var inputContext: [ERROR : Unresolved java classifier: InputContext]!
        invisible_fake final override /*1*/ /*fake_override*/ var inputContextLock: kotlin.Any!
        invisible_fake final override /*1*/ /*fake_override*/ var inputMethodListener: [ERROR : Unresolved java classifier: InputMethodListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var isAddNotifyComplete: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var isFocusTraversableOverridden: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var isInShow: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var isPacked: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var isTrayIconWindow: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var keyListener: [ERROR : Unresolved java classifier: KeyListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var layoutMgr: [ERROR : Unresolved java classifier: LayoutManager]!
        invisible_fake final override /*1*/ /*fake_override*/ var listeningBoundsChildren: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var listeningChildren: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var locale: java.util.Locale!
        invisible_fake final override /*1*/ /*fake_override*/ var locationByPlatform: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var maxSize: java.awt.Dimension!
        invisible_fake final override /*1*/ /*fake_override*/ var maxSizeSet: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var maximizedBounds: [ERROR : Unresolved java classifier: Rectangle]!
        invisible_fake final override /*1*/ /*fake_override*/ var mbManagement: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var menuBar: [ERROR : Unresolved java classifier: MenuBar]!
        invisible_fake final override /*1*/ /*fake_override*/ var minSize: java.awt.Dimension!
        invisible_fake final override /*1*/ /*fake_override*/ var minSizeSet: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var mixingCutoutRegion: [ERROR : Unresolved java classifier: Region]!
        invisible_fake final override /*1*/ /*fake_override*/ var modalAppContext: [ERROR : Unresolved java classifier: AppContext]!
        invisible_fake final override /*1*/ /*fake_override*/ var modalBlocker: [ERROR : Unresolved java classifier: Dialog]!
        invisible_fake final override /*1*/ /*fake_override*/ var modalComp: java.awt.Component!
        invisible_fake final override /*1*/ /*fake_override*/ var modalExclusionType: [ERROR : Unresolved java classifier: ModalExclusionType]!
        invisible_fake final override /*1*/ /*fake_override*/ var mouseListener: [ERROR : Unresolved java classifier: MouseListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var mouseMotionListener: [ERROR : Unresolved java classifier: MouseMotionListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var mouseWheelListener: [ERROR : Unresolved java classifier: MouseWheelListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var name: kotlin.String!
        invisible_fake final override /*1*/ /*fake_override*/ var nameExplicitlySet: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var newEventsOnly: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var numOfHWComponents: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var numOfLWComponents: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var objectLock: kotlin.Any!
        invisible_fake final override /*1*/ /*fake_override*/ var opacity: kotlin.Float
        invisible_fake final override /*1*/ /*fake_override*/ var ownedWindowList: [ERROR : Unresolved java classifier: Vector<WeakReference<Window>>]!
        invisible_fake final override /*1*/ /*fake_override*/ var ownedWindows: [ERROR : Unresolved java classifier: Vector]!
        invisible_fake final override /*1*/ /*fake_override*/ var parent: java.awt.Container!
        invisible_fake final override /*1*/ /*fake_override*/ var peer: [ERROR : Unresolved java classifier: ComponentPeer]!
        invisible_fake final override /*1*/ /*fake_override*/ var peerFont: [ERROR : Unresolved java classifier: Font]!
        invisible_fake final override /*1*/ /*fake_override*/ var popups: [ERROR : Unresolved java classifier: Vector]!
        invisible_fake final override /*1*/ /*fake_override*/ var prefSize: java.awt.Dimension!
        invisible_fake final override /*1*/ /*fake_override*/ var prefSizeSet: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var preserveBackgroundColor: [ERROR : Unresolved java classifier: Color]!
        invisible_fake final override /*1*/ /*fake_override*/ var printing: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var printingThreads: kotlin.(Mutable)Set<*>!
        invisible_fake final override /*1*/ /*fake_override*/ var resizable: kotlin.Boolean
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ var rootPane: [ERROR : Unresolved java classifier: JRootPane]!
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ var rootPaneCheckingEnabled: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var securityWarningAlignmentX: kotlin.Float
        invisible_fake final override /*1*/ /*fake_override*/ var securityWarningAlignmentY: kotlin.Float
        invisible_fake final override /*1*/ /*fake_override*/ var securityWarningHeight: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var securityWarningPointX: kotlin.Double
        invisible_fake final override /*1*/ /*fake_override*/ var securityWarningPointY: kotlin.Double
        invisible_fake final override /*1*/ /*fake_override*/ var securityWarningWidth: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var shape: [ERROR : Unresolved java classifier: Shape]!
        invisible_fake final override /*1*/ /*fake_override*/ var showWithParent: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var state: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var syncLWRequests: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var temporaryLostComponent: java.awt.Component!
        invisible_fake final override /*1*/ /*fake_override*/ var title: kotlin.String!
        invisible_fake final override /*1*/ /*fake_override*/ var transferHandler: [ERROR : Unresolved java classifier: TransferHandler]!
        invisible_fake final override /*1*/ /*fake_override*/ var type: java.awt.Window.Type!
        invisible_fake final override /*1*/ /*fake_override*/ var undecorated: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var valid: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var visible: kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ var warningString: kotlin.String!
        invisible_fake final override /*1*/ /*fake_override*/ var weakThis: [ERROR : Unresolved java classifier: WeakReference<Window>]!
        invisible_fake final override /*1*/ /*fake_override*/ var width: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var windowClosingException: java.lang.RuntimeException!
        invisible_fake final override /*1*/ /*fake_override*/ var windowFocusListener: [ERROR : Unresolved java classifier: WindowFocusListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var windowListener: [ERROR : Unresolved java classifier: WindowListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var windowSerializedDataVersion: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var windowStateListener: [ERROR : Unresolved java classifier: WindowStateListener]!
        invisible_fake final override /*1*/ /*fake_override*/ var x: kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ var y: kotlin.Int
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun action(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Any!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: [ERROR : Unresolved java classifier: PopupMenu]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component!): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component!, /*1*/ p1: kotlin.Any!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component!, /*1*/ p1: kotlin.Any!, /*2*/ p2: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component!, /*1*/ p1: kotlin.Int): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: kotlin.String!, /*1*/ p1: java.awt.Component!): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun addComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addContainerListener(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerListener]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun addDelicately(/*0*/ p0: java.awt.Component!, /*1*/ p1: java.awt.Container!, /*2*/ p2: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun addImpl(/*0*/ p0: java.awt.Component!, /*1*/ p1: kotlin.Any!, /*2*/ p2: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addNotify(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun addOwnedWindow(/*0*/ p0: [ERROR : Unresolved java classifier: WeakReference]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addPropertyChangeListener(/*0*/ p0: kotlin.String!, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun addToWindowList(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addWindowFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowFocusListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addWindowListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addWindowStateListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowStateListener]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun adjustDecendantsOnParent(/*0*/ p0: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun adjustDescendants(/*0*/ p0: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun adjustListeningChildren(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun adjustListeningChildrenOnParent(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun applyComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]!): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun applyCompoundShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]!): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun applyCurrentShape(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun applyCurrentShapeBelowMe(): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun applyResourceBundle(/*0*/ p0: [ERROR : Unresolved java classifier: ResourceBundle]!): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun applyResourceBundle(/*0*/ p0: kotlin.String!): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun areBoundsValid(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun areFocusTraversalKeysSet(/*0*/ p0: kotlin.Int): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun areInputMethodsEnabled(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun autoProcessMouseWheel(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]!): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun bounds(): [ERROR : Unresolved java classifier: Rectangle]!
        invisible_fake open override /*1*/ /*fake_override*/ fun calculateCurrentShape(): [ERROR : Unresolved java classifier: Region]!
        invisible_fake open override /*1*/ /*fake_override*/ fun calculateSecurityWarningPosition(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlin.Double): [ERROR : Unresolved java classifier: Point2D]!
        invisible_fake final override /*1*/ /*fake_override*/ fun canBeFocusOwner(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun canBeFocusOwnerRecursively(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun canContainFocusOwner(/*0*/ p0: java.awt.Component!): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun checkAddToSelf(/*0*/ p0: java.awt.Component!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun checkAdding(/*0*/ p0: java.awt.Component!, /*1*/ p1: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun checkCoalescing(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun checkGD(/*0*/ p0: kotlin.String!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]!, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]!): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]!): kotlin.Int
        invisible_fake open override /*1*/ /*fake_override*/ fun checkNotAWindow(/*0*/ p0: java.awt.Component!): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun checkTreeLock(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun checkWindowClosingException(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun clearCurrentFocusCycleRootOnHide(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun clearMostRecentFocusOwnerOnHide(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun closeSplashScreen(): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun coalesceEvents(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]!, /*1*/ p1: [ERROR : Unresolved java classifier: AWTEvent]!): [ERROR : Unresolved java classifier: AWTEvent]!
        invisible_fake open override /*1*/ /*fake_override*/ fun connectOwnedWindow(/*0*/ p0: java.awt.Window!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun constructComponentName(): kotlin.String!
        public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun containsFocus(): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun countComponents(): kotlin.Int
        invisible_fake open override /*1*/ /*fake_override*/ fun countHierarchyMembers(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun createBufferStrategy(/*0*/ p0: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun createBufferStrategy(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BufferCapabilities]!): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun createChildHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Boolean): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun createHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: java.awt.Component!, /*2*/ p2: java.awt.Container!, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlin.Boolean): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun createImage(/*0*/ p0: [ERROR : Unresolved java classifier: ImageProducer]!): [ERROR : Unresolved java classifier: Image]!
        public open override /*1*/ /*fake_override*/ fun createImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: Image]!
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun createRootPane(): [ERROR : Unresolved java classifier: JRootPane]!
        public open override /*1*/ /*fake_override*/ fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: VolatileImage]!
        public open override /*1*/ /*fake_override*/ fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: [ERROR : Unresolved java classifier: ImageCapabilities]!): [ERROR : Unresolved java classifier: VolatileImage]!
        invisible_fake final override /*1*/ /*fake_override*/ fun decreaseComponentCount(/*0*/ p0: java.awt.Component!): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun deliverEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun deliverMouseWheelToAncestor(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun deserializeResources(/*0*/ p0: java.io.ObjectInputStream!): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun disable(): kotlin.Unit
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun disableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun dispatchEventImpl(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun dispatchEventToSelf(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun dispatchMouseWheelToAncestor(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun dispose(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun disposeImpl(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun doDispose(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun doLayout(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun doSwingSerialization(): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun enable(): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun enable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun enableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun enableInputMethods(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun eventEnabled(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]!): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun eventTypeEnabled(/*0*/ p0: kotlin.Int): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]!): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component!
        invisible_fake final override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component!
        invisible_fake final override /*1*/ /*fake_override*/ fun findComponentAtImpl(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component!
        invisible_fake open override /*1*/ /*fake_override*/ fun findTraversalRoot(): java.awt.Container!
        invisible_fake open override /*1*/ /*fake_override*/ fun findUnderMouseInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: PointerInfo]!): java.awt.Component!
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Any!, /*2*/ p2: kotlin.Any!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlin.Byte): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Char, /*2*/ p2: kotlin.Char): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Short): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun frameInit(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun getAccessControlContext(): [ERROR : Unresolved java classifier: AccessControlContext]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getAccessibleAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]!): [ERROR : Unresolved java classifier: Accessible]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getAccessibleChild(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: Accessible]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getAccessibleChildrenCount(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getAccessibleContext(): [ERROR : Unresolved java classifier: AccessibleContext]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getAccessibleIndexInParent(): kotlin.Int
        invisible_fake open override /*1*/ /*fake_override*/ fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]!
        public open override /*1*/ /*fake_override*/ fun getAlignmentX(): kotlin.Float
        public open override /*1*/ /*fake_override*/ fun getAlignmentY(): kotlin.Float
        invisible_fake open override /*1*/ /*fake_override*/ fun getAppliedShape(): [ERROR : Unresolved java classifier: Region]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]!
        public open override /*1*/ /*fake_override*/ fun getBackground(): [ERROR : Unresolved java classifier: Color]!
        public open override /*1*/ /*fake_override*/ fun getBaseline(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getBaselineResizeBehavior(): java.awt.Component.BaselineResizeBehavior!
        invisible_fake open override /*1*/ /*fake_override*/ fun getBottommostComponentIndex(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]!
        public open override /*1*/ /*fake_override*/ fun getBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]!): [ERROR : Unresolved java classifier: Rectangle]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getBoundsOp(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getBufferStrategy(): [ERROR : Unresolved java classifier: BufferStrategy]!
        public open override /*1*/ /*fake_override*/ fun getColorModel(): [ERROR : Unresolved java classifier: ColorModel]!
        public open override /*1*/ /*fake_override*/ fun getComponent(/*0*/ p0: kotlin.Int): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun getComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]!): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun getComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun getComponentCount(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getComponentListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: ComponentListener]!>!
        public open override /*1*/ /*fake_override*/ fun getComponentOrientation(): [ERROR : Unresolved java classifier: ComponentOrientation]!
        public open override /*1*/ /*fake_override*/ fun getComponentZOrder(/*0*/ p0: java.awt.Component!): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getComponents(): kotlin.Array<(out) java.awt.Component!>!
        invisible_fake open override /*1*/ /*fake_override*/ fun getComponentsSync(): kotlin.Array<(out) java.awt.Component!>!
        invisible_fake final override /*1*/ /*fake_override*/ fun getComponents_NoClientCode(): kotlin.Array<(out) java.awt.Component!>!
        invisible_fake final override /*1*/ /*fake_override*/ fun getContainer(): java.awt.Container!
        public open override /*1*/ /*fake_override*/ fun getContainerListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: ContainerListener]!>!
        invisible_fake open override /*1*/ /*fake_override*/ fun getContainingWindow(): java.awt.Window!
        public open override /*1*/ /*fake_override*/ fun getContentPane(): java.awt.Container!
        public open override /*1*/ /*fake_override*/ fun getCursor(): [ERROR : Unresolved java classifier: Cursor]!
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun getCursorType(): kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ fun getCursor_NoClientCode(): [ERROR : Unresolved java classifier: Cursor]!
        public open override /*1*/ /*fake_override*/ fun getDefaultCloseOperation(): kotlin.Int
        invisible_fake open override /*1*/ /*fake_override*/ fun getDocumentRoot(): java.awt.Window!
        public open override /*1*/ /*fake_override*/ fun getDropTarget(): [ERROR : Unresolved java classifier: DropTarget]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getDropTargetEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun getExtendedState(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun getFocusCycleRootAncestor(): java.awt.Container!
        public open override /*1*/ /*fake_override*/ fun getFocusListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: FocusListener]!>!
        public open override /*1*/ /*fake_override*/ fun getFocusOwner(): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun getFocusTraversalKeys(/*0*/ p0: kotlin.Int): kotlin.(Mutable)Set<java.awt.AWTKeyStroke!>!
        public open override /*1*/ /*fake_override*/ fun getFocusTraversalKeysEnabled(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun getFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int): kotlin.(Mutable)Set<*>!
        public open override /*1*/ /*fake_override*/ fun getFocusTraversalPolicy(): [ERROR : Unresolved java classifier: FocusTraversalPolicy]!
        public open override /*1*/ /*fake_override*/ fun getFocusableWindowState(): kotlin.Boolean
        [ERROR : java.beans.Transient]() public open override /*1*/ /*fake_override*/ fun getFont(): [ERROR : Unresolved java classifier: Font]!
        public open override /*1*/ /*fake_override*/ fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]!): [ERROR : Unresolved java classifier: FontMetrics]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getFont_NoClientCode(): [ERROR : Unresolved java classifier: Font]!
        [ERROR : java.beans.Transient]() public open override /*1*/ /*fake_override*/ fun getForeground(): [ERROR : Unresolved java classifier: Color]!
        public open override /*1*/ /*fake_override*/ fun getGlassPane(): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun getGraphics(): [ERROR : Unresolved java classifier: Graphics]!
        public open override /*1*/ /*fake_override*/ fun getGraphicsConfiguration(): [ERROR : Unresolved java classifier: GraphicsConfiguration]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getGraphicsConfiguration_NoClientCode(): [ERROR : Unresolved java classifier: GraphicsConfiguration]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getGraphics_NoClientCode(): [ERROR : Unresolved java classifier: Graphics]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getHWPeerAboveMe(): [ERROR : Unresolved java classifier: ComponentPeer]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getHeavyweightContainer(): java.awt.Container!
        public open override /*1*/ /*fake_override*/ fun getHeight(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getHierarchyBoundsListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: HierarchyBoundsListener]!>!
        public open override /*1*/ /*fake_override*/ fun getHierarchyListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: HierarchyListener]!>!
        public open override /*1*/ /*fake_override*/ fun getIconImage(): [ERROR : Unresolved java classifier: Image]!
        public open override /*1*/ /*fake_override*/ fun getIconImages(): kotlin.(Mutable)List<[ERROR : Unresolved java classifier: Image]!>!
        public open override /*1*/ /*fake_override*/ fun getIgnoreRepaint(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun getInputContext(): [ERROR : Unresolved java classifier: InputContext]!
        public open override /*1*/ /*fake_override*/ fun getInputMethodListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: InputMethodListener]!>!
        public open override /*1*/ /*fake_override*/ fun getInputMethodRequests(): [ERROR : Unresolved java classifier: InputMethodRequests]!
        public open override /*1*/ /*fake_override*/ fun getInsets(): [ERROR : Unresolved java classifier: Insets]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getInsets_NoClientCode(): [ERROR : Unresolved java classifier: Insets]!
        public open override /*1*/ /*fake_override*/ fun getJMenuBar(): [ERROR : Unresolved java classifier: JMenuBar]!
        public open override /*1*/ /*fake_override*/ fun getKeyListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: KeyListener]!>!
        public open override /*1*/ /*fake_override*/ fun getLayeredPane(): [ERROR : Unresolved java classifier: JLayeredPane]!
        public open override /*1*/ /*fake_override*/ fun getLayout(): [ERROR : Unresolved java classifier: LayoutManager]!
        public open override /*1*/ /*fake_override*/ fun </*0*/ T : java.util.EventListener!> getListeners(/*0*/ p0: java.lang.Class<T!>!): kotlin.Array<(out) T!>!
        invisible_fake open override /*1*/ /*fake_override*/ fun getListenersCount(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getLocale(): java.util.Locale!
        public open override /*1*/ /*fake_override*/ fun getLocation(): [ERROR : Unresolved java classifier: Point]!
        public open override /*1*/ /*fake_override*/ fun getLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]!): [ERROR : Unresolved java classifier: Point]!
        public open override /*1*/ /*fake_override*/ fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getLocationOnScreen_NoTreeLock(): [ERROR : Unresolved java classifier: Point]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getLocationOnWindow(): [ERROR : Unresolved java classifier: Point]!
        public open override /*1*/ /*fake_override*/ fun getMaximizedBounds(): [ERROR : Unresolved java classifier: Rectangle]!
        public open override /*1*/ /*fake_override*/ fun getMaximumSize(): java.awt.Dimension!
        public open override /*1*/ /*fake_override*/ fun getMenuBar(): [ERROR : Unresolved java classifier: MenuBar]!
        public open override /*1*/ /*fake_override*/ fun getMinimumSize(): java.awt.Dimension!
        invisible_fake open override /*1*/ /*fake_override*/ fun getModalBlocker(): [ERROR : Unresolved java classifier: Dialog]!
        public open override /*1*/ /*fake_override*/ fun getModalExclusionType(): [ERROR : Unresolved java classifier: ModalExclusionType]!
        public open override /*1*/ /*fake_override*/ fun getMostRecentFocusOwner(): java.awt.Component!
        invisible_fake open override /*1*/ /*fake_override*/ fun getMouseEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component!
        invisible_fake final override /*1*/ /*fake_override*/ fun getMouseEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean, /*3*/ p3: ((java.awt.Component!) -> kotlin.Boolean)!, /*4*/ p4: kotlin.Boolean): java.awt.Component!
        invisible_fake open override /*1*/ /*fake_override*/ fun getMouseEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean, /*3*/ p3: java.awt.Container.EventTargetFilter!, /*4*/ p4: kotlin.Boolean): java.awt.Component!
        invisible_fake final override /*1*/ /*fake_override*/ fun getMouseEventTargetImpl(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean, /*3*/ p3: ((java.awt.Component!) -> kotlin.Boolean)!, /*4*/ p4: kotlin.Boolean, /*5*/ p5: kotlin.Boolean): java.awt.Component!
        invisible_fake open override /*1*/ /*fake_override*/ fun getMouseEventTargetImpl(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean, /*3*/ p3: java.awt.Container.EventTargetFilter!, /*4*/ p4: kotlin.Boolean, /*5*/ p5: kotlin.Boolean): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun getMouseListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: MouseListener]!>!
        public open override /*1*/ /*fake_override*/ fun getMouseMotionListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: MouseMotionListener]!>!
        public open override /*1*/ /*fake_override*/ fun getMousePosition(): [ERROR : Unresolved java classifier: Point]!
        public open override /*1*/ /*fake_override*/ fun getMousePosition(/*0*/ p0: kotlin.Boolean): [ERROR : Unresolved java classifier: Point]!
        public open override /*1*/ /*fake_override*/ fun getMouseWheelListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: MouseWheelListener]!>!
        public open override /*1*/ /*fake_override*/ fun getName(): kotlin.String!
        invisible_fake open override /*1*/ /*fake_override*/ fun getNativeContainer(): java.awt.Container!
        invisible_fake final override /*1*/ /*fake_override*/ fun getNextFocusCandidate(): java.awt.Component!
        invisible_fake final override /*1*/ /*fake_override*/ fun getNormalShape(): [ERROR : Unresolved java classifier: Region]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getObjectLock(): kotlin.Any!
        public open override /*1*/ /*fake_override*/ fun getOpacity(): kotlin.Float
        invisible_fake final override /*1*/ /*fake_override*/ fun getOpaqueShape(): [ERROR : Unresolved java classifier: Region]!
        public open override /*1*/ /*fake_override*/ fun getOwnedWindows(): kotlin.Array<(out) java.awt.Window!>!
        invisible_fake final override /*1*/ /*fake_override*/ fun getOwnedWindows_NoClientCode(): kotlin.Array<(out) java.awt.Window!>!
        public open override /*1*/ /*fake_override*/ fun getOwner(): java.awt.Window!
        invisible_fake final override /*1*/ /*fake_override*/ fun getOwner_NoClientCode(): java.awt.Window!
        public open override /*1*/ /*fake_override*/ fun getParent(): java.awt.Container!
        invisible_fake final override /*1*/ /*fake_override*/ fun getParent_NoClientCode(): java.awt.Container!
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun getPeer(): [ERROR : Unresolved java classifier: ComponentPeer]!
        public open override /*1*/ /*fake_override*/ fun getPreferredSize(): java.awt.Dimension!
        public open override /*1*/ /*fake_override*/ fun getPropertyChangeListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: PropertyChangeListener]!>!
        public open override /*1*/ /*fake_override*/ fun getPropertyChangeListeners(/*0*/ p0: kotlin.String!): kotlin.Array<(out) [ERROR : Unresolved java classifier: PropertyChangeListener]!>!
        public open override /*1*/ /*fake_override*/ fun getRootPane(): [ERROR : Unresolved java classifier: JRootPane]!
        public open override /*1*/ /*fake_override*/ fun getShape(): [ERROR : Unresolved java classifier: Shape]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getSiblingIndexAbove(): kotlin.Int
        invisible_fake final override /*1*/ /*fake_override*/ fun getSiblingIndexBelow(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getSize(): java.awt.Dimension!
        public open override /*1*/ /*fake_override*/ fun getSize(/*0*/ p0: java.awt.Dimension!): java.awt.Dimension!
        public open override /*1*/ /*fake_override*/ fun getState(): kotlin.Int
        invisible_fake open override /*1*/ /*fake_override*/ fun getTemporaryLostComponent(): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun getTitle(): kotlin.String!
        public open override /*1*/ /*fake_override*/ fun getToolkit(): [ERROR : Unresolved java classifier: Toolkit]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getToolkitImpl(): [ERROR : Unresolved java classifier: Toolkit]!
        invisible_fake open override /*1*/ /*fake_override*/ fun getTopmostComponentIndex(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getTransferHandler(): [ERROR : Unresolved java classifier: TransferHandler]!
        invisible_fake final override /*1*/ /*fake_override*/ fun getTraversalRoot(): java.awt.Container!
        public final override /*1*/ /*fake_override*/ fun getTreeLock(): kotlin.Any!
        public open override /*1*/ /*fake_override*/ fun getType(): java.awt.Window.Type!
        public final override /*1*/ /*fake_override*/ fun getWarningString(): kotlin.String!
        public open override /*1*/ /*fake_override*/ fun getWidth(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getWindowFocusListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: WindowFocusListener]!>!
        public open override /*1*/ /*fake_override*/ fun getWindowListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: WindowListener]!>!
        public open override /*1*/ /*fake_override*/ fun getWindowStateListeners(): kotlin.Array<(out) [ERROR : Unresolved java classifier: WindowStateListener]!>!
        public open override /*1*/ /*fake_override*/ fun getX(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun getY(): kotlin.Int
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun gotFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Any!): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun handleEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hasFocus(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun hasHeavyweightDescendants(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun hasLightweightDescendants(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun hide(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun imageUpdate(/*0*/ p0: [ERROR : Unresolved java classifier: Image]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun increaseComponentCount(/*0*/ p0: java.awt.Component!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun init(/*0*/ p0: [ERROR : Unresolved java classifier: GraphicsConfiguration]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun init(/*0*/ p0: kotlin.String!, /*1*/ p1: [ERROR : Unresolved java classifier: GraphicsConfiguration]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun initDeserializedWindow(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun initGC(/*0*/ p0: [ERROR : Unresolved java classifier: GraphicsConfiguration]!): [ERROR : Unresolved java classifier: GraphicsConfiguration]!
        invisible_fake open override /*1*/ /*fake_override*/ fun initializeFocusTraversalKeys(): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun insets(): [ERROR : Unresolved java classifier: Insets]!
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun inside(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun invalidate(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun invalidateIfValid(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun invalidateParent(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun invalidateTree(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun isActive(): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun isAlwaysOnTop(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isAlwaysOnTopSupported(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isAncestorOf(/*0*/ p0: java.awt.Component!): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isAutoFocusTransferOnDisposal(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isAutoRequestFocus(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isBackgroundSet(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun isCoalescingEnabled(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isCursorSet(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isDisplayable(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isDisposing(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isDoubleBuffered(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isEnabled(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun isEnabledImpl(): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun isFocusCycleRoot(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isFocusCycleRoot(/*0*/ p0: java.awt.Container!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isFocusOwner(): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun isFocusTraversable(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun isFocusTraversableOverridden(): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun isFocusTraversalPolicyProvider(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isFocusTraversalPolicySet(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isFocusable(): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun isFocusableWindow(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isFocused(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isFontSet(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isForegroundSet(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isFrameStateSupported(/*0*/ p0: kotlin.Int): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isLightweight(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isLocationByPlatform(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isMaximumSizeSet(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isMinimumSizeSet(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun isMixingNeeded(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isModalBlocked(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isModalExcluded(/*0*/ p0: [ERROR : Unresolved java classifier: ModalExclusionType]!): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun isNonOpaqueForMixing(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isOpaque(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isParentOf(/*0*/ p0: java.awt.Component!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isPreferredSizeSet(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isRecursivelyVisible(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun isRecursivelyVisibleUpToHeavyweightContainer(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isRequestFocusAccepted(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean, /*2*/ p2: [ERROR : Unresolved java classifier: Cause]!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isResizable(): kotlin.Boolean
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun isRootPaneCheckingEnabled(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun isSameOrAncestorOf(/*0*/ p0: java.awt.Component!, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isShowing(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isUndecorated(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isValid(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun isValidateRoot(): kotlin.Boolean
        [ERROR : java.beans.Transient]() public open override /*1*/ /*fake_override*/ fun isVisible(): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun isVisible_NoClientCode(): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun keyDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Int): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun keyUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Int): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun layout(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun lightweightPaint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun lightweightPrint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun list(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]!, /*1*/ p1: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: java.io.PrintStream!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: java.io.PrintStream!, /*1*/ p1: kotlin.Int): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun locate(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component!
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun location(): [ERROR : Unresolved java classifier: Point]!
        invisible_fake open override /*1*/ /*fake_override*/ fun location_NoClientCode(): [ERROR : Unresolved java classifier: Point]!
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun lostFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Any!): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun minimumSize(): java.awt.Dimension!
        invisible_fake open override /*1*/ /*fake_override*/ fun mixOnHiding(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun mixOnReshaping(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun mixOnShowing(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun mixOnValidating(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun mixOnZOrderChanging(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun mouseDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun mouseDrag(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun mouseEnter(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun mouseExit(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun mouseMove(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun mouseUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun move(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun nextFocus(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun notifyNewBounds(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun numListening(/*0*/ p0: kotlin.Long): kotlin.Int
        invisible_fake open override /*1*/ /*fake_override*/ fun ownedInit(/*0*/ p0: java.awt.Window!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun pack(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun paint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun paintAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun paintComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun paintHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun paramString(): kotlin.String!
        invisible_fake open override /*1*/ /*fake_override*/ fun pointRelativeToComponent(/*0*/ p0: [ERROR : Unresolved java classifier: Point]!): [ERROR : Unresolved java classifier: Point]!
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun postEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]!): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun postProcessKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun postWindowEvent(/*0*/ p0: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun postsOldMouseEvents(): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun preProcessKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]!): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun preferredSize(): java.awt.Dimension!
        public open override /*1*/ /*fake_override*/ fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]!, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun print(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun printAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun printComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun printHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processComponentEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processContainerEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processFocusEvent(/*0*/ p0: [ERROR : Unresolved java classifier: FocusEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processHierarchyBoundsEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processHierarchyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processInputMethodEvent(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseMotionEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseWheelEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processWindowEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processWindowFocusEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processWindowStateEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun proxyEnableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun readObject(/*0*/ p0: java.io.ObjectInputStream!): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(/*0*/ p0: kotlin.Int): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun recursiveHideHeavyweightChildren(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun recursiveRelocateHeavyweightChildren(/*0*/ p0: [ERROR : Unresolved java classifier: Point]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun recursiveShowHeavyweightChildren(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]!): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]!, /*1*/ p1: kotlin.Int): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]!, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun relocateComponent(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: [ERROR : Unresolved java classifier: MenuComponent]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: java.awt.Component!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeAll(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeContainerListener(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerListener]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun removeDelicately(/*0*/ p0: java.awt.Component!, /*1*/ p1: java.awt.Container!, /*2*/ p2: kotlin.Int): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun removeFromWindowList(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeNotify(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun removeOwnedWindow(/*0*/ p0: [ERROR : Unresolved java classifier: WeakReference]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: kotlin.String!, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeWindowFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowFocusListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeWindowListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun removeWindowStateListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowStateListener]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun repaint(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Long): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun repaintParentIfNeeded(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun reparentChild(/*0*/ p0: java.awt.Component!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun reparentTraverse(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerPeer]!, /*1*/ p1: java.awt.Container!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun requestFocus(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]!): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]!): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
        invisible_fake final override /*1*/ /*fake_override*/ fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean, /*2*/ p2: [ERROR : Unresolved java classifier: Cause]!): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun requestFocusInWindow(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]!): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]!): kotlin.Boolean
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun reshape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun reshapeNativePeer(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun resize(/*0*/ p0: java.awt.Dimension!): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun resize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun revalidate(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun setAlwaysOnTop(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun setAutoFocusTransferOnDisposal(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setAutoRequestFocus(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun setBoundsOp(/*0*/ p0: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun setClientSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setComponentZOrder(/*0*/ p0: java.awt.Component!, /*1*/ p1: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setContentPane(/*0*/ p0: java.awt.Container!): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun setCursor(/*0*/ p0: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setDefaultCloseOperation(/*0*/ p0: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setDropTarget(/*0*/ p0: [ERROR : Unresolved java classifier: DropTarget]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setExtendedState(/*0*/ p0: kotlin.Int): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun setFocusCycleRoot(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setFocusTraversalKeys(/*0*/ p0: kotlin.Int, /*1*/ p1: (kotlin.MutableSet<out java.awt.AWTKeyStroke!>..kotlin.Set<java.awt.AWTKeyStroke!>?)): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setFocusTraversalKeysEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun setFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int, /*1*/ p1: (kotlin.MutableSet<out java.awt.AWTKeyStroke!>..kotlin.Set<java.awt.AWTKeyStroke!>?)): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setFocusTraversalPolicy(/*0*/ p0: [ERROR : Unresolved java classifier: FocusTraversalPolicy]!): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun setFocusTraversalPolicyProvider(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setFocusable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setFocusableWindowState(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setGlassPane(/*0*/ p0: java.awt.Component!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun setGraphicsConfiguration(/*0*/ p0: [ERROR : Unresolved java classifier: GraphicsConfiguration]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setIconImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setIconImages(/*0*/ p0: (kotlin.MutableList<out [ERROR : Unresolved java classifier: Image]!>..kotlin.List<[ERROR : Unresolved java classifier: Image]!>?)): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setIgnoreRepaint(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setJMenuBar(/*0*/ p0: [ERROR : Unresolved java classifier: JMenuBar]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setLayeredPane(/*0*/ p0: [ERROR : Unresolved java classifier: JLayeredPane]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setLayout(/*0*/ p0: [ERROR : Unresolved java classifier: LayoutManager]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setLocale(/*0*/ p0: java.util.Locale!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setLocationByPlatform(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setLocationRelativeTo(/*0*/ p0: java.awt.Component!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setMaximizedBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setMaximumSize(/*0*/ p0: java.awt.Dimension!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setMenuBar(/*0*/ p0: [ERROR : Unresolved java classifier: MenuBar]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setMinimumSize(/*0*/ p0: java.awt.Dimension!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun setModalBlocked(/*0*/ p0: [ERROR : Unresolved java classifier: Dialog]!, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setModalExclusionType(/*0*/ p0: [ERROR : Unresolved java classifier: ModalExclusionType]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setName(/*0*/ p0: kotlin.String!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setOpacity(/*0*/ p0: kotlin.Float): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setPreferredSize(/*0*/ p0: java.awt.Dimension!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setResizable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun setRootPane(/*0*/ p0: [ERROR : Unresolved java classifier: JRootPane]!): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun setRootPaneCheckingEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setShape(/*0*/ p0: [ERROR : Unresolved java classifier: Shape]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: java.awt.Dimension!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun setTemporaryLostComponent(/*0*/ p0: java.awt.Component!): java.awt.Component!
        public open override /*1*/ /*fake_override*/ fun setTitle(/*0*/ p0: kotlin.String!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setTransferHandler(/*0*/ p0: [ERROR : Unresolved java classifier: TransferHandler]!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setType(/*0*/ p0: java.awt.Window.Type!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setUndecorated(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun setWarningString(): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun show(): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun show(/*0*/ p0: kotlin.Boolean): kotlin.Unit
        kotlin.deprecated(value = "Deprecated in Java") public open override /*1*/ /*fake_override*/ fun size(): java.awt.Dimension!
        invisible_fake open override /*1*/ /*fake_override*/ fun startLWModal(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun stopLWModal(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun subtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]!): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun subtractAndApplyShapeBelowMe(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toBack(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun toBack_NoClientCode(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toFront(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun toFront_NoClientCode(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun transferFocus(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun transferFocus(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun transferFocusBackward(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun transferFocusBackward(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun transferFocusDownCycle(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun transferFocusUpCycle(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun update(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]!): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun updateChildrenBlocking(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun updateCursorImmediately(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun updateGraphicsData(/*0*/ p0: [ERROR : Unresolved java classifier: GraphicsConfiguration]!): kotlin.Boolean
        invisible_fake open override /*1*/ /*fake_override*/ fun updateWindow(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun updateZOrder(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun validate(): kotlin.Unit
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun validateTree(): kotlin.Unit
        invisible_fake final override /*1*/ /*fake_override*/ fun validateUnconditionally(): kotlin.Unit
        invisible_fake open override /*1*/ /*fake_override*/ fun writeObject(/*0*/ p0: java.io.ObjectOutputStream!): kotlin.Unit
    }
}
