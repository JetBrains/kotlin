FILE: danglingModifierInsideEnumEntry.kt
    public final? annotation class Anno : R|kotlin/Annotation| {
        public? [ContainingClassKey=Anno] constructor([CorrespondingProperty=foo/Anno.i] i: Int): R|foo/Anno| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] val i: Int = R|<local>/i|
            public? [ContainingClassKey=Anno] get(): Int

    }
    public? final? const val CONSTANT: <implicit> = IntegerLiteral(1)
        public? get(): <implicit>
    public final? enum class MyEnumClass : R|kotlin/Enum<foo/MyEnumClass>| {
        private [ContainingClassKey=MyEnumClass] constructor(): R|foo/MyEnumClass| {
            super<R|kotlin/Enum<foo/MyEnumClass>|>()
        }

        public final static [ContainingClassKey=MyEnumClass] enum entry Entry: R|foo/MyEnumClass| = object : R|foo/MyEnumClass| {
            private [ContainingClassKey=<anonymous>] constructor(): R|foo/<anonymous>| {
                super<R|foo/MyEnumClass|>()
            }

            [ContainingClassKey=<anonymous>] @Anno(CONSTANT#) <DANGLING MODIFIER: Top level declaration expected>
        }

        public final static [ContainingClassKey=MyEnumClass] fun values(): R|kotlin/Array<foo/MyEnumClass>| {
        }

        public final static [ContainingClassKey=MyEnumClass] fun valueOf(value: R|kotlin/String|): R|foo/MyEnumClass| {
        }

        public final static [ContainingClassKey=MyEnumClass] val entries: R|kotlin/enums/EnumEntries<foo/MyEnumClass>|
            public get(): R|kotlin/enums/EnumEntries<foo/MyEnumClass>|

    }
