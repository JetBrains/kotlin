FILE: equalsToBoolean.kt
    public abstract interface A : R|kotlin/Any| {
        public abstract fun foo(): R|kotlin/Unit|

        public abstract val b: R|kotlin/Boolean|
            public get(): R|kotlin/Boolean|

    }
    public final fun test_1(b: R|kotlin/Boolean?|): R|kotlin/Unit| {
        when () {
            ==(==(R|<local>/b|, Boolean(true)), Boolean(true)) ->  {
                R|<local>/b|.R|kotlin/Boolean.not|()
            }
            else ->  {
                R|<local>/b|.<Inapplicable(WRONG_RECEIVER): kotlin/Boolean.not>#()
            }
        }

    }
    public final fun test_2(b: R|kotlin/Boolean?|): R|kotlin/Unit| {
        when () {
            !=(==(R|<local>/b|, Boolean(true)), Boolean(true)) ->  {
                R|<local>/b|.<Inapplicable(WRONG_RECEIVER): kotlin/Boolean.not>#()
            }
            else ->  {
                R|<local>/b|.R|kotlin/Boolean.not|()
            }
        }

    }
    public final fun test_3(b: R|kotlin/Boolean?|): R|kotlin/Unit| {
        when () {
            ==(==(R|<local>/b|, Boolean(true)), Boolean(false)) ->  {
                R|<local>/b|.<Inapplicable(WRONG_RECEIVER): kotlin/Boolean.not>#()
            }
            else ->  {
                R|<local>/b|.R|kotlin/Boolean.not|()
            }
        }

    }
    public final fun test_4(b: R|kotlin/Boolean?|): R|kotlin/Unit| {
        when () {
            !=(==(R|<local>/b|, Boolean(true)), Boolean(false)) ->  {
                R|<local>/b|.R|kotlin/Boolean.not|()
            }
            else ->  {
                R|<local>/b|.<Inapplicable(WRONG_RECEIVER): kotlin/Boolean.not>#()
            }
        }

    }
    public final fun test_5(b: R|kotlin/Boolean?|): R|kotlin/Unit| {
        when () {
            ==(!=(R|<local>/b|, Boolean(true)), Boolean(true)) ->  {
                R|<local>/b|.<Inapplicable(WRONG_RECEIVER): kotlin/Boolean.not>#()
            }
            else ->  {
                R|<local>/b|.R|kotlin/Boolean.not|()
            }
        }

    }
    public final fun test_6(b: R|kotlin/Boolean?|): R|kotlin/Unit| {
        when () {
            !=(!=(R|<local>/b|, Boolean(true)), Boolean(true)) ->  {
                R|<local>/b|.R|kotlin/Boolean.not|()
            }
            else ->  {
                R|<local>/b|.<Inapplicable(WRONG_RECEIVER): kotlin/Boolean.not>#()
            }
        }

    }
    public final fun test_7(b: R|kotlin/Boolean?|): R|kotlin/Unit| {
        when () {
            ==(!=(R|<local>/b|, Boolean(true)), Boolean(false)) ->  {
                R|<local>/b|.R|kotlin/Boolean.not|()
            }
            else ->  {
                R|<local>/b|.<Inapplicable(WRONG_RECEIVER): kotlin/Boolean.not>#()
            }
        }

    }
    public final fun test_8(b: R|kotlin/Boolean?|): R|kotlin/Unit| {
        when () {
            !=(!=(R|<local>/b|, Boolean(true)), Boolean(false)) ->  {
                R|<local>/b|.<Inapplicable(WRONG_RECEIVER): kotlin/Boolean.not>#()
            }
            else ->  {
                R|<local>/b|.R|kotlin/Boolean.not|()
            }
        }

    }
