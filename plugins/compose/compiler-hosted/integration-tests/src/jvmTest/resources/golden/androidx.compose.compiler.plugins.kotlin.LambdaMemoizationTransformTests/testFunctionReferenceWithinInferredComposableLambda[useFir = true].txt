//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable

fun Problem() {
    fun foo() { }
    val lambda: @Composable ()->Unit = {
        ::foo
    }
}

//
// Transformed IR
// ------------------------------------------

fun Problem() {
  fun foo() { }
  val lambda = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C<::foo>:Test.kt")
    if (%changed and 0b0011 != 0b0010 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
      val tmp0_group = %composer.cache(false) {
        ::foo
      }
      sourceInformationMarkerEnd(%composer)
      tmp0_group
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
}
