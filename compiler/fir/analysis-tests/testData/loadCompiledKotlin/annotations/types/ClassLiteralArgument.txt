public final class A : R|kotlin/Any| {
    public final fun arrays(s: @R|test/Ann|(klass = <getClass>(<getClass>(R|kotlin/Int|))) R|kotlin/Array<kotlin/Int>|, t: @R|test/Ann|(klass = <getClass>(<getClass>(R|kotlin/IntArray|))) R|kotlin/Array<kotlin/IntArray>|, u: @R|test/Ann|(klass = <getClass>(<getClass>(R|kotlin/Int|))) R|kotlin/Array<kotlin/Array<kotlin/Int>>|, v: @R|test/Ann|(klass = <getClass>(<getClass>(R|kotlin/String|))) R|kotlin/Array<kotlin/Array<kotlin/Array<kotlin/String>>>|): R|kotlin/Unit|

    public final fun generic(s: @R|test/Ann|(klass = <getClass>(<getClass>(R|test/Generic|))) R|kotlin/String|): R|kotlin/Unit|

    public final fun innerGeneric(s: @R|test/Ann|(klass = <getClass>(<getClass>(R|test/InnerGeneric.Inner|))) R|kotlin/String|): R|kotlin/Unit|

    public final fun simple(s: @R|test/Ann|(klass = <getClass>(<getClass>(R|test/Simple|))) R|kotlin/String|): R|kotlin/Unit|

    public constructor(): R|test/A|

}

@R|kotlin/annotation/Target|(allowedTargets = <implicitArrayOf>(R|kotlin/annotation/AnnotationTarget.TYPE|())) public final annotation class Ann : R|kotlin/Annotation| {
    public final val klass: R|kotlin/reflect/KClass<*>|
        public get(): R|kotlin/reflect/KClass<*>|

    public constructor(klass: R|kotlin/reflect/KClass<*>|): R|test/Ann|

}

public final class Generic<T> : R|kotlin/Any| {
    public constructor<T>(): R|test/Generic<T>|

}

public final class InnerGeneric<A, B> : R|kotlin/Any| {
    public constructor<A, B>(): R|test/InnerGeneric<A, B>|

    public final inner class Inner<in C, D : R|A|> : R|kotlin/Any| {
        public constructor<in C, D : R|A|>(): R|test/InnerGeneric.Inner<C, D>|

    }

}

public final class Simple : R|kotlin/Any| {
    public constructor(): R|test/Simple|

}
