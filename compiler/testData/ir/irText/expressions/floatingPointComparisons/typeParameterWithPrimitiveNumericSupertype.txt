FILE fqName:<root> fileName:/typeParameterWithPrimitiveNumericSupertype.kt
  FUN name:test0 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T) returnType:Boolean flags:
    TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Any?]
      superClassifiers:
        CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Any modality:OPEN visibility:public flags:
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:
    VALUE_PARAMETER name:y index:1 type:T flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test0(Any, T): Boolean'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:
              GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
            then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
              arg1: GET_VAR 'value-parameter y: T' type=T origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:test1 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T) returnType:Boolean flags:
    TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Float]
      superClassifiers:
        CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:
    VALUE_PARAMETER name:y index:1 type:T flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test1(Any, T): Boolean'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
              typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
              GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
            then: CALL 'ieee754equals(Float?, Float?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: TYPE_OP type=kotlin.Float origin=IMPLICIT_CAST typeOperand=kotlin.Float
                typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
                GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
              arg1: GET_VAR 'value-parameter y: T' type=T origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:test2 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T) returnType:Boolean flags:
    TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Double]
      superClassifiers:
        CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:
    VALUE_PARAMETER name:y index:1 type:T flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test2(Any, T): Boolean'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
              typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
              GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
            then: CALL 'ieee754equals(Double?, Double?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: CALL 'toDouble(): Double' type=kotlin.Double origin=null
                $this: TYPE_OP type=kotlin.Float origin=IMPLICIT_CAST typeOperand=kotlin.Float
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
                  GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
              arg1: GET_VAR 'value-parameter y: T' type=T origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:test3 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T) returnType:Boolean flags:
    TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Float]
      superClassifiers:
        CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:
    VALUE_PARAMETER name:y index:1 type:T flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test3(Any, T): Boolean'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:
              GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
            then: CALL 'ieee754equals(Float?, Float?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: CALL 'toFloat(): Float' type=kotlin.Float origin=null
                $this: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:
                  GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
              arg1: GET_VAR 'value-parameter y: T' type=T origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:test4 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T) returnType:Boolean flags:
    TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Float?]
      superClassifiers:
        CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:
    VALUE_PARAMETER name:y index:1 type:T flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test4(Any, T): Boolean'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:
              GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
            then: CALL 'ieee754equals(Float?, Float?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: CALL 'toFloat(): Float' type=kotlin.Float origin=null
                $this: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:
                  GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
              arg1: GET_VAR 'value-parameter y: T' type=T origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:test5 visibility:public modality:FINAL <T, R> (x:kotlin.Any, y:R) returnType:Boolean flags:
    TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Float?]
      superClassifiers:
        CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
    TYPE_PARAMETER name:R index:1 variance: upperBounds:[T]
      superClassifiers:
        TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Float?]
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:
    VALUE_PARAMETER name:y index:1 type:R flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test5(Any, R): Boolean'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:
              GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
            then: CALL 'ieee754equals(Float?, Float?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: CALL 'toFloat(): Float' type=kotlin.Float origin=null
                $this: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:
                  GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
              arg1: GET_VAR 'value-parameter y: R' type=R origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:test6 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T) returnType:Boolean flags:
    TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Number]
      superClassifiers:
        CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Number modality:ABSTRACT visibility:public flags:
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:
    VALUE_PARAMETER name:y index:1 type:T flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test6(Any, T): Boolean'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:
              GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
            then: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'value-parameter x: Any' type=kotlin.Any origin=null
              arg1: GET_VAR 'value-parameter y: T' type=T origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  CLASS CLASS name:F modality:FINAL visibility:public flags:
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:F<T> flags:
    superClasses:
      CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Any modality:OPEN visibility:public flags:
    TYPE_PARAMETER name:T index:0 variance: upperBounds:[kotlin.Float]
      superClassifiers:
        CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:
    CONSTRUCTOR visibility:public <> () returnType:F<T> flags:primary
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'constructor Any()'
        INSTANCE_INITIALIZER_CALL classDescriptor='F'
    FUN name:testCapturedType visibility:public modality:FINAL <> ($this:F<T>, x:T, y:kotlin.Any) returnType:Boolean flags:
      $this: VALUE_PARAMETER name:<this> type:F<T> flags:
      VALUE_PARAMETER name:x index:0 type:T flags:
      VALUE_PARAMETER name:y index:1 type:kotlin.Any flags:
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='testCapturedType(T, Any): Boolean'
          WHEN type=kotlin.Boolean origin=ANDAND
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:
                GET_VAR 'value-parameter y: Any' type=kotlin.Any origin=null
              then: CALL 'ieee754equals(Double?, Double?): Boolean' type=kotlin.Boolean origin=EQEQ
                arg0: CALL 'toDouble(): Double' type=kotlin.Double origin=null
                  $this: GET_VAR 'value-parameter x: T' type=T origin=null
                arg1: TYPE_OP type=kotlin.Double origin=IMPLICIT_CAST typeOperand=kotlin.Double
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:
                  GET_VAR 'value-parameter y: Any' type=kotlin.Any origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Boolean type=kotlin.Boolean value=false
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:Boolean flags:
      overridden:
        FUN IR_EXTERNAL_DECLARATION_STUB name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:Boolean flags:
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any flags:
      VALUE_PARAMETER name:other index:0 type:kotlin.Any? flags:
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:Int flags:
      overridden:
        FUN IR_EXTERNAL_DECLARATION_STUB name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:Int flags:
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any flags:
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:String flags:
      overridden:
        FUN IR_EXTERNAL_DECLARATION_STUB name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:String flags:
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any flags:

