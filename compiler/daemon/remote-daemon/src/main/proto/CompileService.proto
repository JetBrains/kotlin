syntax = "proto3";

option java_multiple_files = true;
option java_outer_classname = "CompileServiceProto";
package org.jetbrains.kotlin.server;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service CompileService {
  rpc Compile (stream CompileRequestGrpc) returns (stream CompileResponseGrpc) {}
  rpc Cleanup (google.protobuf.Empty) returns (google.protobuf.Empty);
}

message CompileRequestGrpc {
  oneof request_payload {
    CompilationMetadataGrpc metadata = 1;
    FileTransferRequestGrpc file_transfer_request = 2;
    FileChunkGrpc source_file_chunk = 3;
    DirectoryTransferRequestGrpc directory_transfer_request = 4;
    DirectoryEntryChunkGrpc directory_entry_chunk = 5;
  }
}

message CompileResponseGrpc {
  oneof response_payload{
    CompilerMessageGrpc compiler_message = 1;
    FileChunkGrpc compiled_file_chunk = 2;
    FileTransferReplyGrpc file_transfer_reply = 3;
    DirectoryTransferReplyGrpc directory_transfer_reply = 4;
    CompilationResultGrpc compilation_result = 5;
  }
}

message CompilationMetadataGrpc{
  string project_name = 1;
  int32 source_files_count = 2;
  int32 dependency_files_count = 3;
  int32 compiler_plugin_file_count = 4;
  map<string, string> compiler_arguments = 5;
  CompilationOptionsGrpc compilation_options = 6;
}

message CompilationOptionsGrpc {
  CompilerModeGrpc compiler_mode = 1;
  TargetPlatformGrpc target_platform = 2;
  repeated int32 report_categories = 3;
  int32 report_severity = 4;
  repeated int32 requested_compilation_results = 5; // idk what it is
  repeated string kotlin_script_extensions = 6;
}

message CompilationResultGrpc{
  uint32 exit_code = 1;
  CompilationResultSourceGrpc result_source = 2;
  // TODO, here it would be maybe good to send info what chunking of source file do we use so client can process the files accordingly
//  uint32 file_count = 2;
}


// TODO: could metadata be somewhere useful in our use case?
//  google.protobuf.Timestamp modified_at = 3;
//  google.protobuf.Timestamp created_at = 4;
message FileChunkGrpc {
  string file_path = 1;
  ArtifactTypeGrpc file_type = 2;
  bytes content = 3;
  bool is_last = 4;
}

message CompilerMessageGrpc{
  CompilerMessageSeverityGrpc compiler_message_severity = 1;
  string message = 2;
  optional CompilerMessageSourceLocationGrpc compiler_message_source_location = 3;
}

enum ArtifactTypeGrpc {
  SOURCE = 0;
  DEPENDENCY = 1;
  COMPILER_PLUGIN = 2;
  RESULT = 3;
}

enum CompilerModeGrpc {
    NON_INCREMENTAL_COMPILER = 0;
    INCREMENTAL_COMPILER = 1;
    JPS_COMPILER = 2;
}

enum TargetPlatformGrpc {
    JVM = 0;
    JS = 1;
    METADATA = 2;
}

enum CompilerMessageSeverityGrpc {
  EXCEPTION = 0;
  ERROR = 1;
  STRONG_WARNING = 2;
  FIXED_WARNING = 3;
  WARNING = 4;
  INFO = 5;
  LOGGING = 6;
  OUTPUT = 7;
}

enum CompilationResultSourceGrpc {
  COMPILER = 0;
  CACHE = 1;
}

message FileTransferRequestGrpc{
  string file_path = 1;
  string file_fingerprint = 2;
  ArtifactTypeGrpc artifact_type = 3;
}

message DirectoryTransferRequestGrpc{
  string directory_path = 1;
  string directory_fingerprint = 2;
  ArtifactTypeGrpc artifact_type = 3;
  repeated FileTransferRequestGrpc directory_files = 4;
}

message FileTransferReplyGrpc{
  string file_path = 1;
  bool is_present = 2;
  ArtifactTypeGrpc file_type = 3;
}

message DirectoryTransferReplyGrpc{
  string directory_path = 1;
  string directory_fingerprint = 2;
  bool is_entire_directory_present = 3;
  ArtifactTypeGrpc artifact_type = 4;
  repeated FileIdentifierGrpc missing_files = 5;
}

message FileIdentifierGrpc {
  string file_path = 1;
  string file_fingerprint = 2;
}

message DirectoryEntryChunkGrpc{
  string directory_path = 1;
  bool is_last_directory_entry = 2;
  FileChunkGrpc file_chunk = 3;
}

message CompilerMessageSourceLocationGrpc {
  string path = 1;
  int32 line = 2;
  int32 column = 3;
  int32 line_end = 4;
  int32 column_end = 5;
  optional string line_content = 6;
}