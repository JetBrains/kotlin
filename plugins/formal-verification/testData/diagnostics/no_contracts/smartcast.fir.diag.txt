/smartcast.kt:(4,19): info: Generated Viper text for smartcastReturn:
method global$fun_smartcastReturn$fun_take$NT_Int$return$T_Int(local$n: dom$Nullable[Int])
  returns (ret$0: Int)
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$n): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  if (!(local$n == (dom$Nullable$null(): dom$Nullable[Int]) &&
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) ==
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) ||
  local$n != (dom$Nullable$null(): dom$Nullable[Int]) &&
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) !=
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) &&
  (dom$Casting$cast(local$n, dom$Type$Int()): Int) ==
  (dom$Casting$cast((dom$Nullable$null(): dom$Nullable[dom$Unit]), dom$Type$Int()): Int))) {
    ret$0 := (dom$Casting$cast(local$n, dom$Type$Int()): Int)
  } else {
    ret$0 := 0}
  goto label$ret$0
  label label$ret$0
}

/smartcast.kt:(69,87): info: Generated Viper text for isNullOrEmptyWrong:
method global$fun_isNullOrEmptyWrong$fun_take$NT_class_pkg$kotlin$global$class_CharSequence$return$T_Boolean(local$seq: dom$Nullable[Ref])
  returns (ret$0: Bool)
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$seq): dom$Type), dom$Type$special$Nullable(dom$Type$pkg$kotlin$global$class_CharSequence()))
  if (local$seq == (dom$Nullable$null(): dom$Nullable[Ref]) &&
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) ==
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) ||
  local$seq != (dom$Nullable$null(): dom$Nullable[Ref]) &&
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) !=
  (dom$Nullable$null(): dom$Nullable[dom$Unit]) &&
  (dom$Casting$cast(local$seq, dom$Type$pkg$kotlin$global$class_CharSequence()): Ref) ==
  (dom$Casting$cast((dom$Nullable$null(): dom$Nullable[dom$Unit]), dom$Type$pkg$kotlin$global$class_CharSequence()): Ref)) {
    var anonymous$0: dom$Nullable[Int]
    if ((dom$Casting$cast(local$seq, dom$Type$special$Nullable(dom$Type$Nothing())): dom$Nullable[dom$Unit]) !=
    (dom$Nullable$null(): dom$Nullable[dom$Unit])) {
      var anonymous$1: Int
      anonymous$1 := pkg$kotlin$class_CharSequence$getter_length((dom$Casting$cast((dom$Casting$cast(local$seq,
        dom$Type$special$Nullable(dom$Type$Nothing())): dom$Nullable[dom$Unit]),
        dom$Type$pkg$kotlin$global$class_CharSequence()): Ref))
      anonymous$0 := (dom$Casting$cast(anonymous$1, dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int])
    } else {
      anonymous$0 := (dom$Nullable$null(): dom$Nullable[Int])}
    ret$0 := anonymous$0 != (dom$Nullable$null(): dom$Nullable[Int]) &&
      (dom$Casting$cast(anonymous$0, dom$Type$Int()): Int) == 0
  } else {
    ret$0 := false}
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Int)

