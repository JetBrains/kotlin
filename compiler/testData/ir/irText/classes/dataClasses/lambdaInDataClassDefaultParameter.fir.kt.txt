data class A {
  val runA: @ExtensionFunctionType Function2<A, String, Unit>
    field = runA
    get

  constructor(runA: @ExtensionFunctionType Function2<A, String, Unit> = local fun A.<anonymous>(it: String) {
    return Unit
  }
) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): @ExtensionFunctionType Function2<A, String, Unit> {
    return <this>.#runA
  }

  fun copy(runA: @ExtensionFunctionType Function2<A, String, Unit> = <this>.#runA): A {
    return A(runA = runA)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is A -> return false
    }
    val tmp_0: A = other as A
    when {
      EQEQ(arg0 = <this>.#runA, arg1 = tmp_0.#runA).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#runA.hashCode()
  }

  override fun toString(): String {
    return "A(" + "runA=" + <this>.#runA + ")"
  }

}

data class B {
  val x: Any
    field = x
    get

  constructor(x: Any = { // BLOCK
    local class <no name provided> {
      constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

    }

    <no name provided>()
  }) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): Any {
    return <this>.#x
  }

  fun copy(x: Any = <this>.#x): B {
    return B(x = x)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is B -> return false
    }
    val tmp_1: B = other as B
    when {
      EQEQ(arg0 = <this>.#x, arg1 = tmp_1.#x).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#x.hashCode()
  }

  override fun toString(): String {
    return "B(" + "x=" + <this>.#x + ")"
  }

}

