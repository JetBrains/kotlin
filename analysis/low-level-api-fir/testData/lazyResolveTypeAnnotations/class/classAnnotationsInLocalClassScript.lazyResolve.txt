RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public? final? [ResolvedTo(COMPANION_GENERATION)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public? final? [ResolvedTo(SUPER_TYPES)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


TYPES:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public? final? [ResolvedTo(TYPES)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


STATUS:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(CONTRACTS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        @Target[Unresolved](LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION, LAZY_EXPRESSION) public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

        }

        public open [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor<[ResolvedTo(RAW_FIR)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.VALUE_PARAMETER|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE_PARAMETER|) public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.position] position: R|kotlin/String|): R|Anno| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

        }

        public open [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor<[ResolvedTo(STATUS)] T>(): R|A<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit| {
            [ResolvedTo(BODY_RESOLVE)] lval localProp: R|kotlin/Int| = Int(1)
            @R|Anno|[Types](position = <strcat>(String(class ), R|<local>/localProp|)) local final [ResolvedTo(BODY_RESOLVE)] class OriginalClass<@R|Anno|[Types](position = <strcat>(String(type param ), R|<local>/localProp|)) [ResolvedTo(BODY_RESOLVE)] T : R|@R|Anno|(position = <strcat>(String(bound ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), R|<local>/localProp|))  kotlin/Int>|> : R|@R|Anno|(position = <strcat>(String(super type ), R|<local>/localProp|))  A<@R|Anno|(position = <strcat>(String(nested super type ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested nested super type ), R|<local>/localProp|))  kotlin/Int>>| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OriginalClass] constructor<@R|Anno|[Types](position = <strcat>(String(type param ), R|<local>/localProp|)) [ResolvedTo(BODY_RESOLVE)] T : R|@R|Anno|(position = <strcat>(String(bound ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), R|<local>/localProp|))  kotlin/Int>|>(): R|<local>/OriginalClass<T>| {
                    super<R|@R|Anno|(position = <strcat>(String(super type ), R|<local>/localProp|))  A<@R|Anno|(position = <strcat>(String(nested super type ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested nested super type ), R|<local>/localProp|))  kotlin/Int>>|>()
                }

                public final [ResolvedTo(BODY_RESOLVE)] val prop: R|kotlin/Int| = Int(0)
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OriginalClass] get(): R|kotlin/Int|

                @R|Anno|[Types](position = <strcat>(String(class ), this@R|<local>/OriginalClass|.R|<local>/prop|)) local final [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OriginalClass] class InnerClass<@R|Anno|[Types](position = <strcat>(String(type param ), this@R|<local>/OriginalClass|.R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] T : R|@R|Anno|(position = <strcat>(String(bound ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/Int>|, @R|Anno|[Types](position = <strcat>(String(type param ), R|<local>/localProp|)) [ResolvedTo(BODY_RESOLVE)] Outer(T) : R|@R|Anno|(position = <strcat>(String(bound ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), R|<local>/localProp|))  kotlin/Int>|> : R|@R|Anno|(position = <strcat>(String(super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  A<@R|Anno|(position = <strcat>(String(nested super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested nested super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/Int>>| {
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=InnerClass] constructor<@R|Anno|[Types](position = <strcat>(String(type param ), this@R|<local>/OriginalClass|.R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] T : R|@R|Anno|(position = <strcat>(String(bound ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/Int>|>(): R|<local>/OriginalClass.InnerClass<T, T>| {
                        super<R|@R|Anno|(position = <strcat>(String(super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  A<@R|Anno|(position = <strcat>(String(nested super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested nested super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/Int>>|>()
                    }

                }

            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] classAnnotationsInLocalClassScript.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-classAnnotationsInLocalClassScript.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.VALUE_PARAMETER|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE_PARAMETER|)) public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Anno.position] position: R|kotlin/String|): R|Anno| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/String|

        }

        public open [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-classAnnotationsInLocalClassScript.kts>] class A<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor<[ResolvedTo(BODY_RESOLVE)] T>(): R|A<T>| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit| {
            [ResolvedTo(BODY_RESOLVE)] lval localProp: R|kotlin/Int| = Int(1)
            @R|Anno|[Types](position = <strcat>(String(class ), R|<local>/localProp|)) local final [ResolvedTo(BODY_RESOLVE)] class OriginalClass<@R|Anno|[Types](position = <strcat>(String(type param ), R|<local>/localProp|)) [ResolvedTo(BODY_RESOLVE)] T : R|@R|Anno|(position = <strcat>(String(bound ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), R|<local>/localProp|))  kotlin/Int>|> : R|@R|Anno|(position = <strcat>(String(super type ), R|<local>/localProp|))  A<@R|Anno|(position = <strcat>(String(nested super type ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested nested super type ), R|<local>/localProp|))  kotlin/Int>>| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OriginalClass] constructor<@R|Anno|[Types](position = <strcat>(String(type param ), R|<local>/localProp|)) [ResolvedTo(BODY_RESOLVE)] T : R|@R|Anno|(position = <strcat>(String(bound ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), R|<local>/localProp|))  kotlin/Int>|>(): R|<local>/OriginalClass<T>| {
                    super<R|@R|Anno|(position = <strcat>(String(super type ), R|<local>/localProp|))  A<@R|Anno|(position = <strcat>(String(nested super type ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested nested super type ), R|<local>/localProp|))  kotlin/Int>>|>()
                }

                public final [ResolvedTo(BODY_RESOLVE)] val prop: R|kotlin/Int| = Int(0)
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OriginalClass] get(): R|kotlin/Int|

                @R|Anno|[Types](position = <strcat>(String(class ), this@R|<local>/OriginalClass|.R|<local>/prop|)) local final [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OriginalClass] class InnerClass<@R|Anno|[Types](position = <strcat>(String(type param ), this@R|<local>/OriginalClass|.R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] T : R|@R|Anno|(position = <strcat>(String(bound ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/Int>|, @R|Anno|[Types](position = <strcat>(String(type param ), R|<local>/localProp|)) [ResolvedTo(BODY_RESOLVE)] Outer(T) : R|@R|Anno|(position = <strcat>(String(bound ), R|<local>/localProp|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), R|<local>/localProp|))  kotlin/Int>|> : R|@R|Anno|(position = <strcat>(String(super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  A<@R|Anno|(position = <strcat>(String(nested super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested nested super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/Int>>| {
                    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=InnerClass] constructor<@R|Anno|[Types](position = <strcat>(String(type param ), this@R|<local>/OriginalClass|.R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] T : R|@R|Anno|(position = <strcat>(String(bound ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested bound ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/Int>|>(): R|<local>/OriginalClass.InnerClass<T, T>| {
                        super<R|@R|Anno|(position = <strcat>(String(super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  A<@R|Anno|(position = <strcat>(String(nested super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/collections/List<@R|Anno|(position = <strcat>(String(nested nested super type ), this@R|<local>/OriginalClass|.R|<local>/prop|))  kotlin/Int>>|>()
                    }

                }

            }

        }

