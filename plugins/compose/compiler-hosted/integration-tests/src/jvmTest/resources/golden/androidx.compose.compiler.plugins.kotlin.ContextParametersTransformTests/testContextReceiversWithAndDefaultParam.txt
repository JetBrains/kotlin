//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable


@Composable
fun Test(foo: Foo) {
    with(foo) {
      "Hello".A(2)
    }
}

//
// Transformed IR
// ------------------------------------------

@Composable
@FunctionKeyMeta(key = 526939746, startOffset = 57, endOffset = 120)
fun Test(foo: Foo, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)N(foo)*<A(2)>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(foo)) 0b0100 else 0b0010
  }
  if (%composer.shouldExecute(%dirty and 0b0011 != 0b0010, %dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    with(foo) {
      "Hello".A(%this%with, 2, null, %composer, 0b000110110000, 0b0010)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(foo, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
