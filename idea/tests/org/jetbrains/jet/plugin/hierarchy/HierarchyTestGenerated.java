/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.hierarchy;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.hierarchy.AbstractHierarchyTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({HierarchyTestGenerated.Type.class, HierarchyTestGenerated.Super.class, HierarchyTestGenerated.Sub.class})
public class HierarchyTestGenerated extends AbstractHierarchyTest {
    @TestMetadata("idea/testData/hierarchy/class/type")
    public static class Type extends AbstractHierarchyTest {
        public void testAllFilesPresentInType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/hierarchy/class/type"), Pattern.compile("^(.+)$"), false);
        }
        
        @TestMetadata("CaretAtAnnotation")
        public void testCaretAtAnnotation() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtAnnotation");
        }
        
        @TestMetadata("CaretAtConstructor")
        public void testCaretAtConstructor() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtConstructor");
        }
        
        @TestMetadata("CaretAtFabricMethod")
        public void testCaretAtFabricMethod() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtFabricMethod");
        }
        
        @TestMetadata("CaretAtImport")
        public void testCaretAtImport() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtImport");
        }
        
        @TestMetadata("CaretAtJavaType")
        public void testCaretAtJavaType() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtJavaType");
        }
        
        @TestMetadata("CaretAtModifierList")
        public void testCaretAtModifierList() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtModifierList");
        }
        
        @TestMetadata("CaretAtReceiverExtFun")
        public void testCaretAtReceiverExtFun() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtReceiverExtFun");
        }
        
        @TestMetadata("CaretAtSuperCall")
        public void testCaretAtSuperCall() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtSuperCall");
        }
        
        @TestMetadata("CaretAtSupertypesList")
        public void testCaretAtSupertypesList() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtSupertypesList");
        }
        
        @TestMetadata("CaretAtTypeReference")
        public void testCaretAtTypeReference() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretAtTypeReference");
        }
        
        @TestMetadata("CaretInClassBody")
        public void testCaretInClassBody() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/CaretInClassBody");
        }
        
        @TestMetadata("ClassFromClass")
        public void testClassFromClass() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/ClassFromClass");
        }
        
        @TestMetadata("ClassFromObject")
        public void testClassFromObject() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/ClassFromObject");
        }
        
        @TestMetadata("ClassInClassObject")
        public void testClassInClassObject() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/ClassInClassObject");
        }
        
        @TestMetadata("ClassInPackage")
        public void testClassInPackage() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/ClassInPackage");
        }
        
        @TestMetadata("InnerClass")
        public void testInnerClass() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/InnerClass");
        }
        
        @TestMetadata("JKJHierarchy")
        public void testJKJHierarchy() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/JKJHierarchy");
        }
        
        @TestMetadata("JavaFromKotlin")
        public void testJavaFromKotlin() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/JavaFromKotlin");
        }
        
        @TestMetadata("JavaFromKotlinForKotlinClass")
        public void testJavaFromKotlinForKotlinClass() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/JavaFromKotlinForKotlinClass");
        }
        
        @TestMetadata("KotlinFromJava")
        public void testKotlinFromJava() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/KotlinFromJava");
        }
        
        @TestMetadata("Object")
        public void testObject() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/Object");
        }
        
        @TestMetadata("TwoChildren")
        public void testTwoChildren() throws Exception {
            doTypeClassHierarchyTest("idea/testData/hierarchy/class/type/TwoChildren");
        }
        
    }
    
    @TestMetadata("idea/testData/hierarchy/class/super")
    public static class Super extends AbstractHierarchyTest {
        public void testAllFilesPresentInSuper() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/hierarchy/class/super"), Pattern.compile("^(.+)$"), false);
        }
        
        @TestMetadata("TwoTraits")
        public void testTwoTraits() throws Exception {
            doSuperClassHierarchyTest("idea/testData/hierarchy/class/super/TwoTraits");
        }
        
    }
    
    @TestMetadata("idea/testData/hierarchy/class/sub")
    public static class Sub extends AbstractHierarchyTest {
        public void testAllFilesPresentInSub() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/hierarchy/class/sub"), Pattern.compile("^(.+)$"), false);
        }
        
        @TestMetadata("ClassFromClass")
        public void testClassFromClass() throws Exception {
            doSubClassHierarchyTest("idea/testData/hierarchy/class/sub/ClassFromClass");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("HierarchyTestGenerated");
        suite.addTestSuite(Type.class);
        suite.addTestSuite(Super.class);
        suite.addTestSuite(Sub.class);
        return suite;
    }
}
