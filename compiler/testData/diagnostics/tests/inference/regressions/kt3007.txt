package

package a {
    public fun tempFun(): a.SomeEnum
    public fun </*0*/ T, /*1*/ R> kotlin.collections.Iterable<T>.fold(/*0*/ initial: R, /*1*/ operation: (R, T) -> R): R
    public fun kotlin.collections.Iterable<kotlin.Int>.some(): kotlin.Unit
    public fun kotlin.collections.Iterable<kotlin.Int>.someInt(): kotlin.Unit
    public fun kotlin.collections.Iterable<kotlin.Int>.someSimple(): kotlin.Unit
    public fun kotlin.collections.Iterable<kotlin.Int>.someSimpleWithFun(): kotlin.Unit

    public final enum class SomeEnum : kotlin.Enum<a.SomeEnum> {
        enum entry FIRST

        enum entry SECOND

        private constructor SomeEnum()
        public final override /*1*/ /*fake_override*/ val name: kotlin.String
        public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: a.SomeEnum): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<a.SomeEnum!>!
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): a.SomeEnum
        public final /*synthesized*/ fun values(): kotlin.Array<a.SomeEnum>
    }
}
