/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.js.test.fir;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateJsTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/boxError")
@TestDataPath("$PROJECT_ROOT")
public class FirJsES6CodegenBoxErrorTestGenerated extends AbstractFirJsES6CodegenBoxErrorTest {
  @Test
  public void testAllFilesPresentInBoxError() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/boxError"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS_IR_ES6, true, "compileKotlinAgainstKotlin");
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/boxError/semantic")
  @TestDataPath("$PROJECT_ROOT")
  public class Semantic {
    @Test
    public void testAllFilesPresentInSemantic() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/boxError/semantic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS_IR_ES6, true);
    }

    @Test
    @TestMetadata("castToErrorType.kt")
    public void testCastToErrorType() {
      runTest("compiler/testData/codegen/boxError/semantic/castToErrorType.kt");
    }

    @Test
    @TestMetadata("catchErrorType.kt")
    public void testCatchErrorType() {
      runTest("compiler/testData/codegen/boxError/semantic/catchErrorType.kt");
    }

    @Test
    @TestMetadata("evaluationOrder.kt")
    public void testEvaluationOrder() {
      runTest("compiler/testData/codegen/boxError/semantic/evaluationOrder.kt");
    }

    @Test
    @TestMetadata("mismatchTypeParameters.kt")
    public void testMismatchTypeParameters() {
      runTest("compiler/testData/codegen/boxError/semantic/mismatchTypeParameters.kt");
    }

    @Test
    @TestMetadata("missedBody.kt")
    public void testMissedBody() {
      runTest("compiler/testData/codegen/boxError/semantic/missedBody.kt");
    }

    @Test
    @TestMetadata("reifiedNonInline.kt")
    public void testReifiedNonInline() {
      runTest("compiler/testData/codegen/boxError/semantic/reifiedNonInline.kt");
    }

    @Test
    @TestMetadata("reifiedWithWrongArguments.kt")
    public void testReifiedWithWrongArguments() {
      runTest("compiler/testData/codegen/boxError/semantic/reifiedWithWrongArguments.kt");
    }

    @Test
    @TestMetadata("typeMismatch.kt")
    public void testTypeMismatch() {
      runTest("compiler/testData/codegen/boxError/semantic/typeMismatch.kt");
    }

    @Test
    @TestMetadata("unmatchedArguments.kt")
    public void testUnmatchedArguments() {
      runTest("compiler/testData/codegen/boxError/semantic/unmatchedArguments.kt");
    }

    @Test
    @TestMetadata("unresolvedFunctionReferece.kt")
    public void testUnresolvedFunctionReferece() {
      runTest("compiler/testData/codegen/boxError/semantic/unresolvedFunctionReferece.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/boxError/syntax")
  @TestDataPath("$PROJECT_ROOT")
  public class Syntax {
    @Test
    public void testAllFilesPresentInSyntax() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/boxError/syntax"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS_IR_ES6, true);
    }

    @Test
    @TestMetadata("arrowReference.kt")
    public void testArrowReference() {
      runTest("compiler/testData/codegen/boxError/syntax/arrowReference.kt");
    }

    @Test
    @TestMetadata("evaluationOrder.kt")
    public void testEvaluationOrder() {
      runTest("compiler/testData/codegen/boxError/syntax/evaluationOrder.kt");
    }

    @Test
    @TestMetadata("incorectLexicalName.kt")
    public void testIncorectLexicalName() {
      runTest("compiler/testData/codegen/boxError/syntax/incorectLexicalName.kt");
    }

    @Test
    @TestMetadata("missedArgument.kt")
    public void testMissedArgument() {
      runTest("compiler/testData/codegen/boxError/syntax/missedArgument.kt");
    }
  }
}
