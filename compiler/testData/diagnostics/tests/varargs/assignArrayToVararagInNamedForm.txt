package

public fun foo(): kotlin.Unit
public fun test_ann(/*0*/ s: kotlin.String, /*1*/ arr: kotlin.Array<kotlin.String>): kotlin.Unit
public fun test_fun(/*0*/ s: kotlin.String, /*1*/ arr: kotlin.Array<kotlin.String>): kotlin.Unit
public fun withVararg(/*0*/ vararg s: kotlin.String /*kotlin.Array<out kotlin.String>*/): kotlin.Unit

@kotlin.annotation.Retention(value = AnnotationRetention.SOURCE) @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.EXPRESSION}) public final annotation class Ann : kotlin.Annotation {
    public constructor Ann(/*0*/ vararg s: kotlin.String /*kotlin.Array<out kotlin.String>*/, /*1*/ x: kotlin.Int)
    public final val s: kotlin.Array<out kotlin.String>
    public final val x: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
