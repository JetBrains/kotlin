FILE fqName:<root> fileName:/kt44804.kt
  CLASS CLASS name:AbstractInsnNode modality:ABSTRACT visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.AbstractInsnNode
    PROPERTY name:next visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:next type:<root>.AbstractInsnNode? visibility:private [final]
        EXPRESSION_BODY
          GET_VAR 'next: <root>.AbstractInsnNode? declared in <root>.AbstractInsnNode.<init>' type=<root>.AbstractInsnNode? origin=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-next> visibility:public modality:FINAL returnType:<root>.AbstractInsnNode?
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AbstractInsnNode
        correspondingProperty: PROPERTY name:next visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-next> (): <root>.AbstractInsnNode? declared in <root>.AbstractInsnNode'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:next type:<root>.AbstractInsnNode? visibility:private [final]' type=<root>.AbstractInsnNode? origin=null
              receiver: GET_VAR '<this>: <root>.AbstractInsnNode declared in <root>.AbstractInsnNode.<get-next>' type=<root>.AbstractInsnNode origin=null
    CONSTRUCTOR visibility:public returnType:<root>.AbstractInsnNode [primary]
      VALUE_PARAMETER kind:Regular name:next index:0 type:<root>.AbstractInsnNode?
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value=null
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:AbstractInsnNode modality:ABSTRACT visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
  CLASS CLASS name:LabelNode modality:FINAL visibility:public superTypes:[<root>.AbstractInsnNode]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.LabelNode
    CONSTRUCTOR visibility:public returnType:<root>.LabelNode [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> (next: <root>.AbstractInsnNode?) declared in <root>.AbstractInsnNode'
          ARG next: CONST Null type=kotlin.Nothing? value=null
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:LabelNode modality:FINAL visibility:public superTypes:[<root>.AbstractInsnNode]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in <root>.AbstractInsnNode
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in <root>.AbstractInsnNode
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in <root>.AbstractInsnNode
    PROPERTY FAKE_OVERRIDE name:next visibility:public modality:FINAL [fake_override,val]
      overridden:
        public final next: <root>.AbstractInsnNode? declared in <root>.AbstractInsnNode
      FUN FAKE_OVERRIDE name:<get-next> visibility:public modality:FINAL returnType:<root>.AbstractInsnNode? [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AbstractInsnNode
        correspondingProperty: PROPERTY FAKE_OVERRIDE name:next visibility:public modality:FINAL [fake_override,val]
        overridden:
          public final fun <get-next> (): <root>.AbstractInsnNode? declared in <root>.AbstractInsnNode
  CLASS CLASS name:LineNumberNode modality:FINAL visibility:public superTypes:[<root>.AbstractInsnNode]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.LineNumberNode
    PROPERTY name:line visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:line type:kotlin.Int visibility:private [final]
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=1
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-line> visibility:public modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LineNumberNode
        correspondingProperty: PROPERTY name:line visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-line> (): kotlin.Int declared in <root>.LineNumberNode'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:line type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.LineNumberNode declared in <root>.LineNumberNode.<get-line>' type=<root>.LineNumberNode origin=null
    CONSTRUCTOR visibility:public returnType:<root>.LineNumberNode [primary]
      VALUE_PARAMETER kind:Regular name:next index:0 type:<root>.AbstractInsnNode?
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value=null
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> (next: <root>.AbstractInsnNode?) declared in <root>.AbstractInsnNode'
          ARG next: GET_VAR 'next: <root>.AbstractInsnNode? declared in <root>.LineNumberNode.<init>' type=<root>.AbstractInsnNode? origin=null
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:LineNumberNode modality:FINAL visibility:public superTypes:[<root>.AbstractInsnNode]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in <root>.AbstractInsnNode
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in <root>.AbstractInsnNode
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in <root>.AbstractInsnNode
    PROPERTY FAKE_OVERRIDE name:next visibility:public modality:FINAL [fake_override,val]
      overridden:
        public final next: <root>.AbstractInsnNode? declared in <root>.AbstractInsnNode
      FUN FAKE_OVERRIDE name:<get-next> visibility:public modality:FINAL returnType:<root>.AbstractInsnNode? [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.AbstractInsnNode
        correspondingProperty: PROPERTY FAKE_OVERRIDE name:next visibility:public modality:FINAL [fake_override,val]
        overridden:
          public final fun <get-next> (): <root>.AbstractInsnNode? declared in <root>.AbstractInsnNode
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:node type:<root>.LineNumberNode [val]
        CONSTRUCTOR_CALL 'public constructor <init> (next: <root>.AbstractInsnNode?) declared in <root>.LineNumberNode' type=<root>.LineNumberNode origin=null
          ARG next: CONSTRUCTOR_CALL 'public constructor <init> (next: <root>.AbstractInsnNode?) declared in <root>.LineNumberNode' type=<root>.LineNumberNode origin=null
            ARG next: CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.LabelNode' type=<root>.LabelNode origin=null
      VAR name:result type:kotlin.Boolean [val]
        CALL 'public final fun isDeadLineNumber (insn: <root>.LineNumberNode, index: kotlin.Int, frames: kotlin.Array<out kotlin.Any?>): kotlin.Boolean declared in <root>' type=kotlin.Boolean origin=null
          ARG insn: GET_VAR 'val node: <root>.LineNumberNode declared in <root>.box' type=<root>.LineNumberNode origin=null
          ARG index: CONST Int type=kotlin.Int value=0
          ARG frames: CALL 'public final fun arrayOf <T> (vararg elements: T of kotlin.arrayOf): kotlin.Array<T of kotlin.arrayOf> declared in kotlin' type=kotlin.Array<kotlin.String?> origin=null
            TYPE_ARG T: kotlin.String?
            ARG elements: VARARG type=kotlin.Array<out kotlin.String?> varargElementType=kotlin.String?
              CONST Null type=kotlin.Nothing? value=null
              CONST Null type=kotlin.Nothing? value=null
              CONST String type=kotlin.String value="aaa"
              CONST String type=kotlin.String value="bbb"
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: GET_VAR 'val result: kotlin.Boolean declared in <root>.box' type=kotlin.Boolean origin=null
            then: CONST String type=kotlin.String value="OK"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST String type=kotlin.String value="fail"
  FUN name:isDeadLineNumber visibility:public modality:FINAL returnType:kotlin.Boolean
    VALUE_PARAMETER kind:Regular name:insn index:0 type:<root>.LineNumberNode
    VALUE_PARAMETER kind:Regular name:index index:1 type:kotlin.Int
    VALUE_PARAMETER kind:Regular name:frames index:2 type:kotlin.Array<out kotlin.Any?>
    BLOCK_BODY
      VAR name:finger type:<root>.AbstractInsnNode [var]
        GET_VAR 'insn: <root>.LineNumberNode declared in <root>.isDeadLineNumber' type=<root>.LineNumberNode origin=null
      VAR name:fingerIndex type:kotlin.Int [var]
        GET_VAR 'index: kotlin.Int declared in <root>.isDeadLineNumber' type=kotlin.Int origin=null
      VAR name:hasDeadInsn type:kotlin.Boolean [var]
        CONST Boolean type=kotlin.Boolean value=false
      WHILE label=loop origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          SET_VAR 'var finger: <root>.AbstractInsnNode declared in <root>.isDeadLineNumber' type=kotlin.Unit origin=EQ
            BLOCK type=<root>.AbstractInsnNode origin=ELVIS
              VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:<root>.AbstractInsnNode? [val]
                CALL 'public final fun <get-next> (): <root>.AbstractInsnNode? declared in <root>.AbstractInsnNode' type=<root>.AbstractInsnNode? origin=GET_PROPERTY
                  ARG <this>: GET_VAR 'var finger: <root>.AbstractInsnNode declared in <root>.isDeadLineNumber' type=<root>.AbstractInsnNode origin=null
              WHEN type=<root>.AbstractInsnNode origin=null
                BRANCH
                  if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    ARG arg0: GET_VAR 'val tmp_0: <root>.AbstractInsnNode? declared in <root>.isDeadLineNumber' type=<root>.AbstractInsnNode? origin=null
                    ARG arg1: CONST Null type=kotlin.Nothing? value=null
                  then: BREAK label=null loop.label=loop
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: GET_VAR 'val tmp_0: <root>.AbstractInsnNode? declared in <root>.isDeadLineNumber' type=<root>.AbstractInsnNode? origin=null
          TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
            BLOCK type=kotlin.Int origin=POSTFIX_INCR
              VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:kotlin.Int [val]
                GET_VAR 'var fingerIndex: kotlin.Int declared in <root>.isDeadLineNumber' type=kotlin.Int origin=POSTFIX_INCR
              SET_VAR 'var fingerIndex: kotlin.Int declared in <root>.isDeadLineNumber' type=kotlin.Unit origin=POSTFIX_INCR
                CALL 'public final fun inc (): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=POSTFIX_INCR
                  ARG <this>: GET_VAR 'val tmp_1: kotlin.Int declared in <root>.isDeadLineNumber' type=kotlin.Int origin=null
              GET_VAR 'val tmp_1: kotlin.Int declared in <root>.isDeadLineNumber' type=kotlin.Int origin=null
          BLOCK type=kotlin.Unit origin=WHEN
            VAR IR_TEMPORARY_VARIABLE name:tmp_2 type:<root>.AbstractInsnNode [val]
              GET_VAR 'var finger: <root>.AbstractInsnNode declared in <root>.isDeadLineNumber' type=<root>.AbstractInsnNode origin=null
            WHEN type=kotlin.Unit origin=WHEN
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=<root>.LabelNode
                  GET_VAR 'val tmp_2: <root>.AbstractInsnNode declared in <root>.isDeadLineNumber' type=<root>.AbstractInsnNode origin=null
                then: CONTINUE label=loop loop.label=loop
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=<root>.LineNumberNode
                  GET_VAR 'val tmp_2: <root>.AbstractInsnNode declared in <root>.isDeadLineNumber' type=<root>.AbstractInsnNode origin=null
                then: WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
                      ARG <this>: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                        ARG arg0: CALL 'public final fun <get-line> (): kotlin.Int declared in <root>.LineNumberNode' type=kotlin.Int origin=GET_PROPERTY
                          ARG <this>: TYPE_OP type=<root>.LineNumberNode origin=IMPLICIT_CAST typeOperand=<root>.LineNumberNode
                            GET_VAR 'var finger: <root>.AbstractInsnNode declared in <root>.isDeadLineNumber' type=<root>.AbstractInsnNode origin=null
                        ARG arg1: CALL 'public final fun <get-line> (): kotlin.Int declared in <root>.LineNumberNode' type=kotlin.Int origin=GET_PROPERTY
                          ARG <this>: GET_VAR 'insn: <root>.LineNumberNode declared in <root>.isDeadLineNumber' type=<root>.LineNumberNode origin=null
                    then: RETURN type=kotlin.Nothing from='public final fun isDeadLineNumber (insn: <root>.LineNumberNode, index: kotlin.Int, frames: kotlin.Array<out kotlin.Any?>): kotlin.Boolean declared in <root>'
                      GET_VAR 'var hasDeadInsn: kotlin.Boolean declared in <root>.isDeadLineNumber' type=kotlin.Boolean origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: BLOCK type=kotlin.Unit origin=null
                  WHEN type=kotlin.Unit origin=IF
                    BRANCH
                      if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
                        ARG <this>: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                          ARG arg0: CALL 'public final fun get (index: kotlin.Int): T of kotlin.Array declared in kotlin.Array' type=kotlin.Any? origin=GET_ARRAY_ELEMENT
                            ARG <this>: GET_VAR 'frames: kotlin.Array<out kotlin.Any?> declared in <root>.isDeadLineNumber' type=kotlin.Array<out kotlin.Any?> origin=null
                            ARG index: GET_VAR 'var fingerIndex: kotlin.Int declared in <root>.isDeadLineNumber' type=kotlin.Int origin=null
                          ARG arg1: CONST Null type=kotlin.Nothing? value=null
                      then: RETURN type=kotlin.Nothing from='public final fun isDeadLineNumber (insn: <root>.LineNumberNode, index: kotlin.Int, frames: kotlin.Array<out kotlin.Any?>): kotlin.Boolean declared in <root>'
                        CONST Boolean type=kotlin.Boolean value=false
                  SET_VAR 'var hasDeadInsn: kotlin.Boolean declared in <root>.isDeadLineNumber' type=kotlin.Unit origin=EQ
                    CONST Boolean type=kotlin.Boolean value=true
      RETURN type=kotlin.Nothing from='public final fun isDeadLineNumber (insn: <root>.LineNumberNode, index: kotlin.Int, frames: kotlin.Array<out kotlin.Any?>): kotlin.Boolean declared in <root>'
        CONST Boolean type=kotlin.Boolean value=true
