RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] anonymousObjectInInvalidPosition.kt
    private final? [ResolvedTo(RAW_FIR)] val resolveMe: A = LAZY_EXPRESSION
        private [ResolvedTo(RAW_FIR)] get(): A
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final? [ResolvedTo(RAW_FIR)] val resolveMe: A = LAZY_EXPRESSION
        private [ResolvedTo(RAW_FIR)] get(): A
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] val resolveMe: A = LAZY_EXPRESSION
        private [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] get(): A
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final? [ResolvedTo(COMPANION_GENERATION)] val resolveMe: A = LAZY_EXPRESSION
        private [ResolvedTo(COMPANION_GENERATION)] get(): A
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final? [ResolvedTo(SUPER_TYPES)] val resolveMe: A = LAZY_EXPRESSION
        private [ResolvedTo(SUPER_TYPES)] get(): A
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final? [ResolvedTo(TYPES)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = LAZY_EXPRESSION
        private [ResolvedTo(TYPES)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final [ResolvedTo(STATUS)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = LAZY_EXPRESSION
        private [ResolvedTo(STATUS)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = LAZY_EXPRESSION
        private [ResolvedTo(EXPECT_ACTUAL_MATCHING)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final [ResolvedTo(CONTRACTS)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)Null(null) = object : A<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit| {
        }

    }

        private [ResolvedTo(CONTRACTS)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)Null(null) = object : A<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit| {
        }

    }

        private [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final [ResolvedTo(CONSTANT_EVALUATION)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)Null(null) = object : A<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit| {
        }

    }

        private [ResolvedTo(CONSTANT_EVALUATION)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final [ResolvedTo(ANNOTATION_ARGUMENTS)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)Null(null) = object : A<Int> {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit| {
        }

    }

        private [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public final? [ResolvedTo(RAW_FIR)] interface A<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun x(): R|kotlin/Unit|

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] anonymousObjectInInvalidPosition.kt
    private final [ResolvedTo(BODY_RESOLVE)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)Null(null) = object : R|A<kotlin/Int>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun x(): R|kotlin/Unit| {
        }

    }

        private [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public abstract [ResolvedTo(STATUS)] interface A<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun x(): R|kotlin/Unit|

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] anonymousObjectInInvalidPosition.kt
    private final [ResolvedTo(BODY_RESOLVE)] val resolveMe: <ERROR TYPE REF: Wrong number of type arguments> = ERROR_EXPR(Should have initializer)Null(null) = object : R|A<kotlin/Int>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun x(): R|kotlin/Unit| {
        }

    }

        private [ResolvedTo(BODY_RESOLVE)] get(): <ERROR TYPE REF: Wrong number of type arguments>
    public abstract [ResolvedTo(BODY_RESOLVE)] interface A<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun x(): R|kotlin/Unit|

    }
