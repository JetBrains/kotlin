/*
 * Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.resolve;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class ReferenceResolveInJavaTestGenerated extends AbstractReferenceResolveInJavaTest {
    @TestMetadata("idea/testData/resolve/referenceInJava/binaryAndSource")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BinaryAndSource extends AbstractReferenceResolveInJavaTest {
        public void testAllFilesPresentInBinaryAndSource() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/resolve/referenceInJava/binaryAndSource"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("Class.java")
        public void testClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/Class.java");
            doTest(fileName);
        }

        @TestMetadata("ClassObjectField.java")
        public void testClassObjectField() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/ClassObjectField.java");
            doTest(fileName);
        }

        @TestMetadata("Constructor.java")
        public void testConstructor() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/Constructor.java");
            doTest(fileName);
        }

        @TestMetadata("EnumEntry.java")
        public void testEnumEntry() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/EnumEntry.java");
            doTest(fileName);
        }

        @TestMetadata("Field.java")
        public void testField() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/Field.java");
            doTest(fileName);
        }

        @TestMetadata("FileFacade.java")
        public void testFileFacade() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/FileFacade.java");
            doTest(fileName);
        }

        @TestMetadata("Getter.java")
        public void testGetter() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/Getter.java");
            doTest(fileName);
        }

        @TestMetadata("Method.java")
        public void testMethod() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/Method.java");
            doTest(fileName);
        }

        @TestMetadata("MethodOfDeeplyNested.java")
        public void testMethodOfDeeplyNested() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/MethodOfDeeplyNested.java");
            doTest(fileName);
        }

        @TestMetadata("MethodWithParameters.java")
        public void testMethodWithParameters() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/MethodWithParameters.java");
            doTest(fileName);
        }

        @TestMetadata("ObjectInstance.java")
        public void testObjectInstance() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/ObjectInstance.java");
            doTest(fileName);
        }

        @TestMetadata("PlatformStaticFun.java")
        public void testPlatformStaticFun() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/binaryAndSource/PlatformStaticFun.java");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/resolve/referenceInJava/sourceOnly")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SourceOnly extends AbstractReferenceResolveInJavaTest {
        public void testAllFilesPresentInSourceOnly() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/resolve/referenceInJava/sourceOnly"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("AnnotationParameterReference.java")
        public void testAnnotationParameterReference() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/sourceOnly/AnnotationParameterReference.java");
            doTest(fileName);
        }

        @TestMetadata("AutoGeneratedOverloads.java")
        public void testAutoGeneratedOverloads() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/sourceOnly/AutoGeneratedOverloads.java");
            doTest(fileName);
        }

        @TestMetadata("ClassObjectStaticField.java")
        public void testClassObjectStaticField() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/sourceOnly/ClassObjectStaticField.java");
            doTest(fileName);
        }

        @TestMetadata("DelegatedMethodFromTraitNoImpl.java")
        public void testDelegatedMethodFromTraitNoImpl() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/sourceOnly/DelegatedMethodFromTraitNoImpl.java");
            doTest(fileName);
        }

        @TestMetadata("DelegatedMethodFromTraitWithImpl.java")
        public void testDelegatedMethodFromTraitWithImpl() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/resolve/referenceInJava/sourceOnly/DelegatedMethodFromTraitWithImpl.java");
            doTest(fileName);
        }
    }
}
