/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.low.level.api.fir;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir")
@TestDataPath("$PROJECT_ROOT")
public class OutOfContentRootGetOrBuildFirTestGenerated extends AbstractOutOfContentRootGetOrBuildFirTest {
    @Test
    public void testAllFilesPresentInGetOrBuildFir() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
    }

    @Test
    @TestMetadata("kt60638.kt")
    public void testKt60638() throws Exception {
        runTest("analysis/low-level-api-fir/testData/getOrBuildFir/kt60638.kt");
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
        @Test
        public void testAllFilesPresentInAnnotations() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/annotations"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("annotationApplicationArgument.kt")
        public void testAnnotationApplicationArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationApplicationArgument.kt");
        }

        @Test
        @TestMetadata("annotationApplicationArgumentList.kt")
        public void testAnnotationApplicationArgumentList() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationApplicationArgumentList.kt");
        }

        @Test
        @TestMetadata("annotationApplicationCallExpression.kt")
        public void testAnnotationApplicationCallExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationApplicationCallExpression.kt");
        }

        @Test
        @TestMetadata("annotationApplicationVarargArgument.kt")
        public void testAnnotationApplicationVarargArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationApplicationVarargArgument.kt");
        }

        @Test
        @TestMetadata("annotationApplicationWithArguments.kt")
        public void testAnnotationApplicationWithArguments() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationApplicationWithArguments.kt");
        }

        @Test
        @TestMetadata("annotationApplicationWithArgumentsOnCallSite.kt")
        public void testAnnotationApplicationWithArgumentsOnCallSite() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationApplicationWithArgumentsOnCallSite.kt");
        }

        @Test
        @TestMetadata("annotationInsideWhereFunction.kt")
        public void testAnnotationInsideWhereFunction() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationInsideWhereFunction.kt");
        }

        @Test
        @TestMetadata("annotationInsideWhereProperty.kt")
        public void testAnnotationInsideWhereProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationInsideWhereProperty.kt");
        }

        @Test
        @TestMetadata("annotationOnConstructorProperty.kt")
        public void testAnnotationOnConstructorProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationOnConstructorProperty.kt");
        }

        @Test
        @TestMetadata("annotationOnEnumClass.kt")
        public void testAnnotationOnEnumClass() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationOnEnumClass.kt");
        }

        @Test
        @TestMetadata("annotationOnReturnType.kt")
        public void testAnnotationOnReturnType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/annotationOnReturnType.kt");
        }

        @Test
        @TestMetadata("danglingAnnotation.kt")
        public void testDanglingAnnotation() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/danglingAnnotation.kt");
        }

        @Test
        @TestMetadata("danglingAnnotationInClass.kt")
        public void testDanglingAnnotationInClass() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/danglingAnnotationInClass.kt");
        }

        @Test
        @TestMetadata("fileAnnotation.kt")
        public void testFileAnnotation() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/fileAnnotation.kt");
        }

        @Test
        @TestMetadata("jvmFieldAnnotationOnConstructorProperty.kt")
        public void testJvmFieldAnnotationOnConstructorProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/jvmFieldAnnotationOnConstructorProperty.kt");
        }

        @Test
        @TestMetadata("retentionValue.kt")
        public void testRetentionValue() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/retentionValue.kt");
        }

        @Test
        @TestMetadata("superCallAnnotation.kt")
        public void testSuperCallAnnotation() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/superCallAnnotation.kt");
        }

        @Test
        @TestMetadata("superCallAnnotation2.kt")
        public void testSuperCallAnnotation2() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/superCallAnnotation2.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnConstructorParameter.kt")
        public void testTypeOnAnnotationOnConstructorParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnConstructorParameter.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnConstructorParameterExpression.kt")
        public void testTypeOnAnnotationOnConstructorParameterExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnConstructorParameterExpression.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnConstructorProperty.kt")
        public void testTypeOnAnnotationOnConstructorProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnConstructorProperty.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnConstructorPropertyAndParameter.kt")
        public void testTypeOnAnnotationOnConstructorPropertyAndParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnConstructorPropertyAndParameter.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnConstructorPropertyWithArguments.kt")
        public void testTypeOnAnnotationOnConstructorPropertyWithArguments() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnConstructorPropertyWithArguments.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnFunctionParameter.kt")
        public void testTypeOnAnnotationOnFunctionParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnFunctionParameter.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnFunctionParameterWithArguments.kt")
        public void testTypeOnAnnotationOnFunctionParameterWithArguments() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnFunctionParameterWithArguments.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnReceiverFunction.kt")
        public void testTypeOnAnnotationOnReceiverFunction() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnReceiverFunction.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnReceiverParameter.kt")
        public void testTypeOnAnnotationOnReceiverParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnReceiverParameter.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnReceiverProperty.kt")
        public void testTypeOnAnnotationOnReceiverProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnReceiverProperty.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnReceiverPropertyCall.kt")
        public void testTypeOnAnnotationOnReceiverPropertyCall() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnReceiverPropertyCall.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnReturnFunction.kt")
        public void testTypeOnAnnotationOnReturnFunction() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnReturnFunction.kt");
        }

        @Test
        @TestMetadata("typeOnAnnotationOnReturnProperty.kt")
        public void testTypeOnAnnotationOnReturnProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/typeOnAnnotationOnReturnProperty.kt");
        }

        @Nested
        @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite")
        @TestDataPath("$PROJECT_ROOT")
        public class UseSite {
            @Test
            public void testAllFilesPresentInUseSite() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
            }

            @Test
            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite/delegate.kt");
            }

            @Test
            @TestMetadata("field.kt")
            public void testField() throws Exception {
                runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite/field.kt");
            }

            @Test
            @TestMetadata("file.kt")
            public void testFile() throws Exception {
                runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite/file.kt");
            }

            @Test
            @TestMetadata("getter.kt")
            public void testGetter() throws Exception {
                runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite/getter.kt");
            }

            @Test
            @TestMetadata("param.kt")
            public void testParam() throws Exception {
                runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite/param.kt");
            }

            @Test
            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite/property.kt");
            }

            @Test
            @TestMetadata("setParam.kt")
            public void testSetParam() throws Exception {
                runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite/setParam.kt");
            }

            @Test
            @TestMetadata("setter.kt")
            public void testSetter() throws Exception {
                runTest("analysis/low-level-api-fir/testData/getOrBuildFir/annotations/useSite/setter.kt");
            }
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/calls")
    @TestDataPath("$PROJECT_ROOT")
    public class Calls {
        @Test
        public void testAllFilesPresentInCalls() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/calls"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("arrayMinusAssignOperatorsInVariousScopes.kt")
        public void testArrayMinusAssignOperatorsInVariousScopes() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/arrayMinusAssignOperatorsInVariousScopes.kt");
        }

        @Test
        @TestMetadata("arrayTimesAssignOperatorsInVariousScopes.kt")
        public void testArrayTimesAssignOperatorsInVariousScopes() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/arrayTimesAssignOperatorsInVariousScopes.kt");
        }

        @Test
        @TestMetadata("callArgument.kt")
        public void testCallArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/callArgument.kt");
        }

        @Test
        @TestMetadata("callInsideLambdaInsideSuperCallAndExplicitConstructor.kt")
        public void testCallInsideLambdaInsideSuperCallAndExplicitConstructor() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/callInsideLambdaInsideSuperCallAndExplicitConstructor.kt");
        }

        @Test
        @TestMetadata("callInsideLambdaInsideSuperCallAndImplicitConstructor.kt")
        public void testCallInsideLambdaInsideSuperCallAndImplicitConstructor() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/callInsideLambdaInsideSuperCallAndImplicitConstructor.kt");
        }

        @Test
        @TestMetadata("callInsideLambdaInsideSuperCallFromSecondaryConstructor.kt")
        public void testCallInsideLambdaInsideSuperCallFromSecondaryConstructor() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/callInsideLambdaInsideSuperCallFromSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("callInsideLambdaInsideSuperCallFromSingleSecondaryConstructor.kt")
        public void testCallInsideLambdaInsideSuperCallFromSingleSecondaryConstructor() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/callInsideLambdaInsideSuperCallFromSingleSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("callInsideLambdaInsideSuperCallInsideImplicitConstructor.kt")
        public void testCallInsideLambdaInsideSuperCallInsideImplicitConstructor() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/callInsideLambdaInsideSuperCallInsideImplicitConstructor.kt");
        }

        @Test
        @TestMetadata("calllTypeArguments.kt")
        public void testCalllTypeArguments() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/calllTypeArguments.kt");
        }

        @Test
        @TestMetadata("compoundAssignOnVal.kt")
        public void testCompoundAssignOnVal() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignOnVal.kt");
        }

        @Test
        @TestMetadata("compoundAssignOnVal_lhs.kt")
        public void testCompoundAssignOnVal_lhs() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignOnVal_lhs.kt");
        }

        @Test
        @TestMetadata("compoundAssignOnVar.kt")
        public void testCompoundAssignOnVar() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignOnVar.kt");
        }

        @Test
        @TestMetadata("compoundAssignOnVar_lhs.kt")
        public void testCompoundAssignOnVar_lhs() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignOnVar_lhs.kt");
        }

        @Test
        @TestMetadata("compoundAssignWithArrayAccessConvention.kt")
        public void testCompoundAssignWithArrayAccessConvention() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignWithArrayAccessConvention.kt");
        }

        @Test
        @TestMetadata("compoundAssignWithArrayAccessConvention_lhs.kt")
        public void testCompoundAssignWithArrayAccessConvention_lhs() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignWithArrayAccessConvention_lhs.kt");
        }

        @Test
        @TestMetadata("compoundAssignWithArrayAccessConvention_propertyAccess.kt")
        public void testCompoundAssignWithArrayAccessConvention_propertyAccess() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignWithArrayAccessConvention_propertyAccess.kt");
        }

        @Test
        @TestMetadata("compoundAssignWithArrayGetConvention.kt")
        public void testCompoundAssignWithArrayGetConvention() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignWithArrayGetConvention.kt");
        }

        @Test
        @TestMetadata("compoundAssignWithArrayGetConvention_lhs.kt")
        public void testCompoundAssignWithArrayGetConvention_lhs() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/compoundAssignWithArrayGetConvention_lhs.kt");
        }

        @Test
        @TestMetadata("constructorDelegationSuperCall.kt")
        public void testConstructorDelegationSuperCall() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/constructorDelegationSuperCall.kt");
        }

        @Test
        @TestMetadata("constructorDelegationThisCall.kt")
        public void testConstructorDelegationThisCall() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/constructorDelegationThisCall.kt");
        }

        @Test
        @TestMetadata("functionCallArgumentList.kt")
        public void testFunctionCallArgumentList() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/functionCallArgumentList.kt");
        }

        @Test
        @TestMetadata("incWithArrayAccessConvention.kt")
        public void testIncWithArrayAccessConvention() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/incWithArrayAccessConvention.kt");
        }

        @Test
        @TestMetadata("incWithArrayAccessConvention_propertyAccess.kt")
        public void testIncWithArrayAccessConvention_propertyAccess() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/incWithArrayAccessConvention_propertyAccess.kt");
        }

        @Test
        @TestMetadata("incWithArrayAccessConvention_set.kt")
        public void testIncWithArrayAccessConvention_set() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/incWithArrayAccessConvention_set.kt");
        }

        @Test
        @TestMetadata("invokeCallArgumentList.kt")
        public void testInvokeCallArgumentList() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/invokeCallArgumentList.kt");
        }

        @Test
        @TestMetadata("noReceiverOnLambda.kt")
        public void testNoReceiverOnLambda() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/noReceiverOnLambda.kt");
        }

        @Test
        @TestMetadata("qualifiedCallInsidePropertyInsideConstructor.kt")
        public void testQualifiedCallInsidePropertyInsideConstructor() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/qualifiedCallInsidePropertyInsideConstructor.kt");
        }

        @Test
        @TestMetadata("qualifiedCallInsideSuperCall.kt")
        public void testQualifiedCallInsideSuperCall() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/qualifiedCallInsideSuperCall.kt");
        }

        @Test
        @TestMetadata("qualifiedCallInsideSuperCall2.kt")
        public void testQualifiedCallInsideSuperCall2() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/qualifiedCallInsideSuperCall2.kt");
        }

        @Test
        @TestMetadata("qualifiedCallInsideSuperCall3.kt")
        public void testQualifiedCallInsideSuperCall3() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/qualifiedCallInsideSuperCall3.kt");
        }

        @Test
        @TestMetadata("qualifiedCallInsideSuperCall4.kt")
        public void testQualifiedCallInsideSuperCall4() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/qualifiedCallInsideSuperCall4.kt");
        }

        @Test
        @TestMetadata("qualifiedCallInsideSuperCall5.kt")
        public void testQualifiedCallInsideSuperCall5() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/qualifiedCallInsideSuperCall5.kt");
        }

        @Test
        @TestMetadata("qualifiedCallSelector.kt")
        public void testQualifiedCallSelector() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/qualifiedCallSelector.kt");
        }

        @Test
        @TestMetadata("qualifiedWholeCall.kt")
        public void testQualifiedWholeCall() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/qualifiedWholeCall.kt");
        }

        @Test
        @TestMetadata("setOperator.kt")
        public void testSetOperator() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/setOperator.kt");
        }

        @Test
        @TestMetadata("superType.kt")
        public void testSuperType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/calls/superType.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/declarations")
    @TestDataPath("$PROJECT_ROOT")
    public class Declarations {
        @Test
        public void testAllFilesPresentInDeclarations() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/declarations"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("constructorParameter.kt")
        public void testConstructorParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/constructorParameter.kt");
        }

        @Test
        @TestMetadata("constructorProperty.kt")
        public void testConstructorProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/constructorProperty.kt");
        }

        @Test
        @TestMetadata("destructionWithNoRValue.kt")
        public void testDestructionWithNoRValue() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/destructionWithNoRValue.kt");
        }

        @Test
        @TestMetadata("destructuring.kt")
        public void testDestructuring() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/destructuring.kt");
        }

        @Test
        @TestMetadata("destructuringEntry.kt")
        public void testDestructuringEntry() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/destructuringEntry.kt");
        }

        @Test
        @TestMetadata("initializerConflict.kt")
        public void testInitializerConflict() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/initializerConflict.kt");
        }

        @Test
        @TestMetadata("kt60387.kt")
        public void testKt60387() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/kt60387.kt");
        }

        @Test
        @TestMetadata("ktij23263.kt")
        public void testKtij23263() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/ktij23263.kt");
        }

        @Test
        @TestMetadata("ktij24730.kt")
        public void testKtij24730() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/ktij24730.kt");
        }

        @Test
        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/objectLiteral.kt");
        }

        @Test
        @TestMetadata("objectLiteralExpression.kt")
        public void testObjectLiteralExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/objectLiteralExpression.kt");
        }

        @Test
        @TestMetadata("propertyDelegate.kt")
        public void testPropertyDelegate() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/propertyDelegate.kt");
        }

        @Test
        @TestMetadata("propertyDelegateExpression.kt")
        public void testPropertyDelegateExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/propertyDelegateExpression.kt");
        }

        @Test
        @TestMetadata("whereClause1.kt")
        public void testWhereClause1() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/whereClause1.kt");
        }

        @Test
        @TestMetadata("whereClause2.kt")
        public void testWhereClause2() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/declarations/whereClause2.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/deserialized")
    @TestDataPath("$PROJECT_ROOT")
    public class Deserialized {
        @Test
        public void testAllFilesPresentInDeserialized() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/deserialized"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("annotationWithEnumEntryArgument.kt")
        public void testAnnotationWithEnumEntryArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/deserialized/annotationWithEnumEntryArgument.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring")
    @TestDataPath("$PROJECT_ROOT")
    public class Destructuring {
        @Test
        public void testAllFilesPresentInDestructuring() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("destructuringDeclaration.kt")
        public void testDestructuringDeclaration() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring/destructuringDeclaration.kt");
        }

        @Test
        @TestMetadata("destructuringDeclarationInLambda.kt")
        public void testDestructuringDeclarationInLambda() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring/destructuringDeclarationInLambda.kt");
        }

        @Test
        @TestMetadata("destructuringDeclarationParameterInLambda.kt")
        public void testDestructuringDeclarationParameterInLambda() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring/destructuringDeclarationParameterInLambda.kt");
        }

        @Test
        @TestMetadata("entryInDestructuringDeclaration.kt")
        public void testEntryInDestructuringDeclaration() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring/entryInDestructuringDeclaration.kt");
        }

        @Test
        @TestMetadata("entryInDestructuringDeclarationParameterInLambda.kt")
        public void testEntryInDestructuringDeclarationParameterInLambda() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring/entryInDestructuringDeclarationParameterInLambda.kt");
        }

        @Test
        @TestMetadata("entryUnderscoreInDestructuringDeclaration.kt")
        public void testEntryUnderscoreInDestructuringDeclaration() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring/entryUnderscoreInDestructuringDeclaration.kt");
        }

        @Test
        @TestMetadata("entryUnderscoreInDestructuringDeclarationParameterInLambda.kt")
        public void testEntryUnderscoreInDestructuringDeclarationParameterInLambda() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/destructuring/entryUnderscoreInDestructuringDeclarationParameterInLambda.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/expressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Expressions {
        @Test
        public void testAllFilesPresentInExpressions() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/expressions"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("arrayAccessExpression.kt")
        public void testArrayAccessExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/arrayAccessExpression.kt");
        }

        @Test
        @TestMetadata("arrayIndexExpressionWithInc.kt")
        public void testArrayIndexExpressionWithInc() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/arrayIndexExpressionWithInc.kt");
        }

        @Test
        @TestMetadata("asExpression.kt")
        public void testAsExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/asExpression.kt");
        }

        @Test
        @TestMetadata("binaryExpression.kt")
        public void testBinaryExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/binaryExpression.kt");
        }

        @Test
        @TestMetadata("binaryExpressionOperator.kt")
        public void testBinaryExpressionOperator() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/binaryExpressionOperator.kt");
        }

        @Test
        @TestMetadata("blockExpression.kt")
        public void testBlockExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/blockExpression.kt");
        }

        @Test
        @TestMetadata("boolLiteral.kt")
        public void testBoolLiteral() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/boolLiteral.kt");
        }

        @Test
        @TestMetadata("classAccessExpression.kt")
        public void testClassAccessExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/classAccessExpression.kt");
        }

        @Test
        @TestMetadata("forExpression.kt")
        public void testForExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/forExpression.kt");
        }

        @Test
        @TestMetadata("forExpressionRange.kt")
        public void testForExpressionRange() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/forExpressionRange.kt");
        }

        @Test
        @TestMetadata("forExpressionVariable.kt")
        public void testForExpressionVariable() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/forExpressionVariable.kt");
        }

        @Test
        @TestMetadata("ifExpression.kt")
        public void testIfExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/ifExpression.kt");
        }

        @Test
        @TestMetadata("incExpression.kt")
        public void testIncExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/incExpression.kt");
        }

        @Test
        @TestMetadata("insidePlusAssignTarget.kt")
        public void testInsidePlusAssignTarget() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/insidePlusAssignTarget.kt");
        }

        @Test
        @TestMetadata("intLiteral.kt")
        public void testIntLiteral() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/intLiteral.kt");
        }

        @Test
        @TestMetadata("intLiteral_minusOne_entire.kt")
        public void testIntLiteral_minusOne_entire() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/intLiteral_minusOne_entire.kt");
        }

        @Test
        @TestMetadata("intLiteral_minusOne_justOne.kt")
        public void testIntLiteral_minusOne_justOne() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/intLiteral_minusOne_justOne.kt");
        }

        @Test
        @TestMetadata("intLiteral_plusOne_entire.kt")
        public void testIntLiteral_plusOne_entire() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/intLiteral_plusOne_entire.kt");
        }

        @Test
        @TestMetadata("intLiteral_plusOne_justOne.kt")
        public void testIntLiteral_plusOne_justOne() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/intLiteral_plusOne_justOne.kt");
        }

        @Test
        @TestMetadata("isExpression.kt")
        public void testIsExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/isExpression.kt");
        }

        @Test
        @TestMetadata("lambdaExpression.kt")
        public void testLambdaExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/lambdaExpression.kt");
        }

        @Test
        @TestMetadata("objectLiteralExpression.kt")
        public void testObjectLiteralExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/objectLiteralExpression.kt");
        }

        @Test
        @TestMetadata("parenthesizedExpression.kt")
        public void testParenthesizedExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/parenthesizedExpression.kt");
        }

        @Test
        @TestMetadata("propertyReferenceExpression.kt")
        public void testPropertyReferenceExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/propertyReferenceExpression.kt");
        }

        @Test
        @TestMetadata("stringLiteral.kt")
        public void testStringLiteral() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/stringLiteral.kt");
        }

        @Test
        @TestMetadata("stringTemplateExpressionEntry.kt")
        public void testStringTemplateExpressionEntry() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/stringTemplateExpressionEntry.kt");
        }

        @Test
        @TestMetadata("throwExpression.kt")
        public void testThrowExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/throwExpression.kt");
        }

        @Test
        @TestMetadata("tryExpression.kt")
        public void testTryExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/tryExpression.kt");
        }

        @Test
        @TestMetadata("unraryExpression.kt")
        public void testUnraryExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/unraryExpression.kt");
        }

        @Test
        @TestMetadata("unraryExpressionOperator.kt")
        public void testUnraryExpressionOperator() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/unraryExpressionOperator.kt");
        }

        @Test
        @TestMetadata("whenExpression.kt")
        public void testWhenExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/whenExpression.kt");
        }

        @Test
        @TestMetadata("whileExpression.kt")
        public void testWhileExpression() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/whileExpression.kt");
        }

        @Test
        @TestMetadata("wholeStringTemplate.kt")
        public void testWholeStringTemplate() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/expressions/wholeStringTemplate.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/inImport")
    @TestDataPath("$PROJECT_ROOT")
    public class InImport {
        @Test
        public void testAllFilesPresentInInImport() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/inImport"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("firstImportNamePart.kt")
        public void testFirstImportNamePart() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inImport/firstImportNamePart.kt");
        }

        @Test
        @TestMetadata("importList.kt")
        public void testImportList() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inImport/importList.kt");
        }

        @Test
        @TestMetadata("middleImportNamePart.kt")
        public void testMiddleImportNamePart() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inImport/middleImportNamePart.kt");
        }

        @Test
        @TestMetadata("qualifiedImportNamePart.kt")
        public void testQualifiedImportNamePart() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inImport/qualifiedImportNamePart.kt");
        }

        @Test
        @TestMetadata("wholeImportDirective.kt")
        public void testWholeImportDirective() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inImport/wholeImportDirective.kt");
        }

        @Test
        @TestMetadata("wholeImportName.kt")
        public void testWholeImportName() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inImport/wholeImportName.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/inPackage")
    @TestDataPath("$PROJECT_ROOT")
    public class InPackage {
        @Test
        public void testAllFilesPresentInInPackage() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/inPackage"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("firstPackageNamePart.kt")
        public void testFirstPackageNamePart() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inPackage/firstPackageNamePart.kt");
        }

        @Test
        @TestMetadata("middlePackageNamePart.kt")
        public void testMiddlePackageNamePart() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inPackage/middlePackageNamePart.kt");
        }

        @Test
        @TestMetadata("qualifiedPackageNamePart.kt")
        public void testQualifiedPackageNamePart() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inPackage/qualifiedPackageNamePart.kt");
        }

        @Test
        @TestMetadata("wholePackageDirective.kt")
        public void testWholePackageDirective() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inPackage/wholePackageDirective.kt");
        }

        @Test
        @TestMetadata("wholePackageName.kt")
        public void testWholePackageName() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/inPackage/wholePackageName.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode")
    @TestDataPath("$PROJECT_ROOT")
    public class InvalidCode {
        @Test
        public void testAllFilesPresentInInvalidCode() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("delegatedProperty.kt")
        public void testDelegatedProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode/delegatedProperty.kt");
        }

        @Test
        @TestMetadata("duplicatedClasses.kt")
        public void testDuplicatedClasses() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode/duplicatedClasses.kt");
        }

        @Test
        @TestMetadata("duplicatedClassesFunctionParameter.kt")
        public void testDuplicatedClassesFunctionParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode/duplicatedClassesFunctionParameter.kt");
        }

        @Test
        @TestMetadata("expectAndActualInTheSameFile.kt")
        public void testExpectAndActualInTheSameFile() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode/expectAndActualInTheSameFile.kt");
        }

        @Test
        @TestMetadata("incompletePropertyWithAnnotation.kt")
        public void testIncompletePropertyWithAnnotation() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode/incompletePropertyWithAnnotation.kt");
        }

        @Test
        @TestMetadata("javaClassLiteral.kt")
        public void testJavaClassLiteral() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode/javaClassLiteral.kt");
        }

        @Test
        @TestMetadata("missedTypeArgumentsInAnnotationCall.kt")
        public void testMissedTypeArgumentsInAnnotationCall() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode/missedTypeArgumentsInAnnotationCall.kt");
        }

        @Test
        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/invalidCode/secondaryConstructor.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/qualifiedExpressions")
    @TestDataPath("$PROJECT_ROOT")
    public class QualifiedExpressions {
        @Test
        public void testAllFilesPresentInQualifiedExpressions() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/qualifiedExpressions"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("firstPartOfQualifiedCallWithNestedClasses.kt")
        public void testFirstPartOfQualifiedCallWithNestedClasses() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/qualifiedExpressions/firstPartOfQualifiedCallWithNestedClasses.kt");
        }

        @Test
        @TestMetadata("lastPartOfQualifiedCallWithNestedClasses.kt")
        public void testLastPartOfQualifiedCallWithNestedClasses() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/qualifiedExpressions/lastPartOfQualifiedCallWithNestedClasses.kt");
        }

        @Test
        @TestMetadata("middlePartOfQualifiedCallWithNestedClasses.kt")
        public void testMiddlePartOfQualifiedCallWithNestedClasses() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/qualifiedExpressions/middlePartOfQualifiedCallWithNestedClasses.kt");
        }

        @Test
        @TestMetadata("qualifiedPartOfQualifiedCallUnresolved.kt")
        public void testQualifiedPartOfQualifiedCallUnresolved() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/qualifiedExpressions/qualifiedPartOfQualifiedCallUnresolved.kt");
        }

        @Test
        @TestMetadata("qualifiedPartOfQualifiedCallWithNestedClasses.kt")
        public void testQualifiedPartOfQualifiedCallWithNestedClasses() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/qualifiedExpressions/qualifiedPartOfQualifiedCallWithNestedClasses.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/types")
    @TestDataPath("$PROJECT_ROOT")
    public class Types {
        @Test
        public void testAllFilesPresentInTypes() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/types"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("functionalType.kt")
        public void testFunctionalType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/functionalType.kt");
        }

        @Test
        @TestMetadata("functionalTypeArgument.kt")
        public void testFunctionalTypeArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/functionalTypeArgument.kt");
        }

        @Test
        @TestMetadata("invalidTypeArgumentsCount.kt")
        public void testInvalidTypeArgumentsCount() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/invalidTypeArgumentsCount.kt");
        }

        @Test
        @TestMetadata("invalidTypeArgumentsCountArgument.kt")
        public void testInvalidTypeArgumentsCountArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/invalidTypeArgumentsCountArgument.kt");
        }

        @Test
        @TestMetadata("invalidTypeArgumentsCountFirstArgument.kt")
        public void testInvalidTypeArgumentsCountFirstArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/invalidTypeArgumentsCountFirstArgument.kt");
        }

        @Test
        @TestMetadata("invalidTypeArgumentsCountLastArgument.kt")
        public void testInvalidTypeArgumentsCountLastArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/invalidTypeArgumentsCountLastArgument.kt");
        }

        @Test
        @TestMetadata("nestedClassFromJava.kt")
        public void testNestedClassFromJava() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/nestedClassFromJava.kt");
        }

        @Test
        @TestMetadata("nestedClassFromKotlin.kt")
        public void testNestedClassFromKotlin() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/nestedClassFromKotlin.kt");
        }

        @Test
        @TestMetadata("nestedClassType.kt")
        public void testNestedClassType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/nestedClassType.kt");
        }

        @Test
        @TestMetadata("nestedTypeArgument.kt")
        public void testNestedTypeArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/nestedTypeArgument.kt");
        }

        @Test
        @TestMetadata("nullableType.kt")
        public void testNullableType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/nullableType.kt");
        }

        @Test
        @TestMetadata("nullableTypeWithooutQuestionMark.kt")
        public void testNullableTypeWithooutQuestionMark() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/nullableTypeWithooutQuestionMark.kt");
        }

        @Test
        @TestMetadata("receiverType.kt")
        public void testReceiverType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/receiverType.kt");
        }

        @Test
        @TestMetadata("superType.kt")
        public void testSuperType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/superType.kt");
        }

        @Test
        @TestMetadata("superType2.kt")
        public void testSuperType2() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/superType2.kt");
        }

        @Test
        @TestMetadata("superType3.kt")
        public void testSuperType3() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/superType3.kt");
        }

        @Test
        @TestMetadata("superTypeAndGeneratedProperty.kt")
        public void testSuperTypeAndGeneratedProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/superTypeAndGeneratedProperty.kt");
        }

        @Test
        @TestMetadata("superTypeInObject.kt")
        public void testSuperTypeInObject() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/superTypeInObject.kt");
        }

        @Test
        @TestMetadata("superTypeInObject2.kt")
        public void testSuperTypeInObject2() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/superTypeInObject2.kt");
        }

        @Test
        @TestMetadata("superTypeInObject3.kt")
        public void testSuperTypeInObject3() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/superTypeInObject3.kt");
        }

        @Test
        @TestMetadata("superTypeOnEnumClass.kt")
        public void testSuperTypeOnEnumClass() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/superTypeOnEnumClass.kt");
        }

        @Test
        @TestMetadata("typeArgument.kt")
        public void testTypeArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/typeArgument.kt");
        }

        @Test
        @TestMetadata("typeParameterBound.kt")
        public void testTypeParameterBound() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/typeParameterBound.kt");
        }

        @Test
        @TestMetadata("typeParameterBoundNested.kt")
        public void testTypeParameterBoundNested() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/typeParameterBoundNested.kt");
        }

        @Test
        @TestMetadata("unresolvedTypeArgumentResolvedTypeConsturctor.kt")
        public void testUnresolvedTypeArgumentResolvedTypeConsturctor() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/unresolvedTypeArgumentResolvedTypeConsturctor.kt");
        }

        @Test
        @TestMetadata("unresolvedTypeConsturctorResolvedNestedTypeArgument.kt")
        public void testUnresolvedTypeConsturctorResolvedNestedTypeArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/unresolvedTypeConsturctorResolvedNestedTypeArgument.kt");
        }

        @Test
        @TestMetadata("unresolvedTypeConsturctorResolvedTypeArgument.kt")
        public void testUnresolvedTypeConsturctorResolvedTypeArgument() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/unresolvedTypeConsturctorResolvedTypeArgument.kt");
        }

        @Test
        @TestMetadata("whereFunction.kt")
        public void testWhereFunction() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/whereFunction.kt");
        }

        @Test
        @TestMetadata("whereProperty.kt")
        public void testWhereProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/whereProperty.kt");
        }

        @Test
        @TestMetadata("wholeType.kt")
        public void testWholeType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/types/wholeType.kt");
        }
    }

    @Nested
    @TestMetadata("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration")
    @TestDataPath("$PROJECT_ROOT")
    public class WholeDeclaration {
        @Test
        public void testAllFilesPresentInWholeDeclaration() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration"), Pattern.compile("^(.+)\\.(kt)$"), null, true);
        }

        @Test
        @TestMetadata("classTypeParemeter.kt")
        public void testClassTypeParemeter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/classTypeParemeter.kt");
        }

        @Test
        @TestMetadata("delegate.kt")
        public void testDelegate() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/delegate.kt");
        }

        @Test
        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/enum.kt");
        }

        @Test
        @TestMetadata("enumEntry.kt")
        public void testEnumEntry() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/enumEntry.kt");
        }

        @Test
        @TestMetadata("externalJavaAnnotation.kt")
        public void testExternalJavaAnnotation() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/externalJavaAnnotation.kt");
        }

        @Test
        @TestMetadata("functionTypeParemeter.kt")
        public void testFunctionTypeParemeter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/functionTypeParemeter.kt");
        }

        @Test
        @TestMetadata("functionValueParameter.kt")
        public void testFunctionValueParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/functionValueParameter.kt");
        }

        @Test
        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/getter.kt");
        }

        @Test
        @TestMetadata("lambdaAsSAMInterfaceWithAnnotation.kt")
        public void testLambdaAsSAMInterfaceWithAnnotation() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/lambdaAsSAMInterfaceWithAnnotation.kt");
        }

        @Test
        @TestMetadata("localClass.kt")
        public void testLocalClass() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/localClass.kt");
        }

        @Test
        @TestMetadata("localDelegatedPropertyWithPropagatedType.kt")
        public void testLocalDelegatedPropertyWithPropagatedType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/localDelegatedPropertyWithPropagatedType.kt");
        }

        @Test
        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/localFunction.kt");
        }

        @Test
        @TestMetadata("localProperty.kt")
        public void testLocalProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/localProperty.kt");
        }

        @Test
        @TestMetadata("localPropertyWithPropagatedType.kt")
        public void testLocalPropertyWithPropagatedType() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/localPropertyWithPropagatedType.kt");
        }

        @Test
        @TestMetadata("memberFunction.kt")
        public void testMemberFunction() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/memberFunction.kt");
        }

        @Test
        @TestMetadata("memberProperty.kt")
        public void testMemberProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/memberProperty.kt");
        }

        @Test
        @TestMetadata("memberTypeAlias.kt")
        public void testMemberTypeAlias() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/memberTypeAlias.kt");
        }

        @Test
        @TestMetadata("nestedClass.kt")
        public void testNestedClass() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/nestedClass.kt");
        }

        @Test
        @TestMetadata("notNullJavaAnnotation.kt")
        public void testNotNullJavaAnnotation() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/notNullJavaAnnotation.kt");
        }

        @Test
        @TestMetadata("primaryConstructorValValueParameter.kt")
        public void testPrimaryConstructorValValueParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/primaryConstructorValValueParameter.kt");
        }

        @Test
        @TestMetadata("primaryConstructorValueParameter.kt")
        public void testPrimaryConstructorValueParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/primaryConstructorValueParameter.kt");
        }

        @Test
        @TestMetadata("propagateFlexibleTypeToAnonymousFunction.kt")
        public void testPropagateFlexibleTypeToAnonymousFunction() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/propagateFlexibleTypeToAnonymousFunction.kt");
        }

        @Test
        @TestMetadata("propagateFlexibleTypeToAnonymousFunction2.kt")
        public void testPropagateFlexibleTypeToAnonymousFunction2() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/propagateFlexibleTypeToAnonymousFunction2.kt");
        }

        @Test
        @TestMetadata("secondaryConstructorValueParameter.kt")
        public void testSecondaryConstructorValueParameter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/secondaryConstructorValueParameter.kt");
        }

        @Test
        @TestMetadata("setter.kt")
        public void testSetter() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/setter.kt");
        }

        @Test
        @TestMetadata("topLevelClass.kt")
        public void testTopLevelClass() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/topLevelClass.kt");
        }

        @Test
        @TestMetadata("topLevelFunction.kt")
        public void testTopLevelFunction() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/topLevelFunction.kt");
        }

        @Test
        @TestMetadata("topLevelProperty.kt")
        public void testTopLevelProperty() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/topLevelProperty.kt");
        }

        @Test
        @TestMetadata("topLevelTypelTypeAlias.kt")
        public void testTopLevelTypelTypeAlias() throws Exception {
            runTest("analysis/low-level-api-fir/testData/getOrBuildFir/wholeDeclaration/topLevelTypelTypeAlias.kt");
        }
    }
}
