
RAW_FIR:
FILE: functionInValueClass.kt
    @JvmInline() public? final? inline [RAW_FIR] class Value : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Value] constructor([RAW_FIR] [CorrespondingProperty=/Value.value] value: Int): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [RAW_FIR] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [RAW_FIR] [ContainingClassKey=Value] get(): Int

        public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

    }

IMPORTS:
FILE: functionInValueClass.kt
    @JvmInline() public? final? inline [RAW_FIR] class Value : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Value] constructor([RAW_FIR] [CorrespondingProperty=/Value.value] value: Int): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [RAW_FIR] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [RAW_FIR] [ContainingClassKey=Value] get(): Int

        public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: functionInValueClass.kt
    @JvmInline() public? final? inline [RAW_FIR] class Value : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Value] constructor([RAW_FIR] [CorrespondingProperty=/Value.value] value: Int): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [RAW_FIR] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [RAW_FIR] [ContainingClassKey=Value] get(): Int

        public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

    }

COMPANION_GENERATION:
FILE: functionInValueClass.kt
    @JvmInline() public? final? inline [RAW_FIR] class Value : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Value] constructor([RAW_FIR] [CorrespondingProperty=/Value.value] value: Int): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [RAW_FIR] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [RAW_FIR] [ContainingClassKey=Value] get(): Int

        public? final? [COMPANION_GENERATION] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

    }

SUPER_TYPES:
FILE: functionInValueClass.kt
    @JvmInline() public? final? inline [RAW_FIR] class Value : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Value] constructor([RAW_FIR] [CorrespondingProperty=/Value.value] value: Int): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [RAW_FIR] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [RAW_FIR] [ContainingClassKey=Value] get(): Int

        public? final? [SUPER_TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

    }

TYPES:
FILE: functionInValueClass.kt
    @R|kotlin/jvm/JvmInline|() public? final? inline [SUPER_TYPES] class Value : R|kotlin/Any| {
        public? [SUPER_TYPES] [ContainingClassKey=Value] constructor([SUPER_TYPES] [CorrespondingProperty=/Value.value] value: Int): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [SUPER_TYPES] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [SUPER_TYPES] [ContainingClassKey=Value] get(): Int

        public? final? [TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

    }

STATUS:
FILE: functionInValueClass.kt
    @R|kotlin/jvm/JvmInline|() public final inline [SUPER_TYPES] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=kotlin/Int)] class Value : R|kotlin/Any| {
        public? [TYPES] [ContainingClassKey=Value] constructor([TYPES] [CorrespondingProperty=/Value.value] value: R|kotlin/Int|): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [SUPER_TYPES] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [SUPER_TYPES] [ContainingClassKey=Value] get(): Int

        public final [STATUS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: functionInValueClass.kt
    @R|kotlin/jvm/JvmInline|() public final inline [SUPER_TYPES] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=kotlin/Int)] class Value : R|kotlin/Any| {
        public? [TYPES] [ContainingClassKey=Value] constructor([TYPES] [CorrespondingProperty=/Value.value] value: R|kotlin/Int|): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [SUPER_TYPES] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [SUPER_TYPES] [ContainingClassKey=Value] get(): Int

        public final [ARGUMENTS_OF_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

    }

CONTRACTS:
FILE: functionInValueClass.kt
    @R|kotlin/jvm/JvmInline|() public final inline [SUPER_TYPES] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=kotlin/Int)] class Value : R|kotlin/Any| {
        public? [TYPES] [ContainingClassKey=Value] constructor([TYPES] [CorrespondingProperty=/Value.value] value: R|kotlin/Int|): R|Value| {
            super<R|kotlin/Any|>()
        }

        public? final? [SUPER_TYPES] [IsFromPrimaryConstructor=true] val value: Int = R|<local>/value|
            public? [SUPER_TYPES] [ContainingClassKey=Value] get(): Int

        public final [CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: functionInValueClass.kt
    @R|kotlin/jvm/JvmInline|() public final inline [STATUS] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=kotlin/Int)] class Value : R|kotlin/Any| {
        public [STATUS] [ContainingClassKey=Value] constructor([STATUS] [CorrespondingProperty=/Value.value] value: R|kotlin/Int|): R|Value| {
            super<R|kotlin/Any|>()
        }

        public final [STATUS] [IsFromPrimaryConstructor=true] val value: R|kotlin/Int| = R|<local>/value|
            public [STATUS] [ContainingClassKey=Value] get(): R|kotlin/Int|

        public final [IMPLICIT_TYPES_BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: functionInValueClass.kt
    @R|kotlin/jvm/JvmInline|() public final inline [STATUS] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=kotlin/Int)] class Value : R|kotlin/Any| {
        public [STATUS] [ContainingClassKey=Value] constructor([STATUS] [CorrespondingProperty=/Value.value] value: R|kotlin/Int|): R|Value| {
            super<R|kotlin/Any|>()
        }

        public final [STATUS] [IsFromPrimaryConstructor=true] val value: R|kotlin/Int| = R|<local>/value|
            public [STATUS] [ContainingClassKey=Value] get(): R|kotlin/Int|

        public final [EXPECT_ACTUAL_MATCHING] fun resolveMe(): R|kotlin/Unit| {
        }

    }

BODY_RESOLVE:
FILE: functionInValueClass.kt
    @R|kotlin/jvm/JvmInline|() public final inline [STATUS] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=kotlin/Int)] class Value : R|kotlin/Any| {
        public [STATUS] [ContainingClassKey=Value] constructor([STATUS] [CorrespondingProperty=/Value.value] value: R|kotlin/Int|): R|Value| {
            super<R|kotlin/Any|>()
        }

        public final [STATUS] [IsFromPrimaryConstructor=true] val value: R|kotlin/Int| = R|<local>/value|
            public [STATUS] [ContainingClassKey=Value] get(): R|kotlin/Int|

        public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        }

    }

FILE RAW TO BODY:
FILE: functionInValueClass.kt
    @R|kotlin/jvm/JvmInline|() public final inline [BODY_RESOLVE] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=kotlin/Int)] class Value : R|kotlin/Any| {
        public [BODY_RESOLVE] [ContainingClassKey=Value] constructor([BODY_RESOLVE] [CorrespondingProperty=/Value.value] value: R|kotlin/Int|): R|Value| {
            super<R|kotlin/Any|>()
        }

        public final [BODY_RESOLVE] [IsFromPrimaryConstructor=true] val value: R|kotlin/Int| = R|<local>/value|
            public [BODY_RESOLVE] [ContainingClassKey=Value] get(): R|kotlin/Int|

        public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        }

    }
