FILE fqName:<root> fileName:/LoopTest.kt
  CLASS CLASS name:LoopTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.LoopTest
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=0
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-a$volatile>' type=<root>.LoopTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<set-a$volatile>' type=<root>.LoopTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.LoopTest.<set-a$volatile>' type=kotlin.Int origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:a1$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=1
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-a1$volatile> visibility:private modality:FINAL returnType:kotlin.Int
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a1$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a1$volatile> (): kotlin.Int declared in <root>.LoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-a1$volatile>' type=<root>.LoopTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-a1$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Int
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:a1$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-a1$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:a1$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<set-a1$volatile>' type=<root>.LoopTest origin=null
              value: GET_VAR 'value: kotlin.Int declared in <root>.LoopTest.<set-a1$volatile>' type=kotlin.Int origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:b$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Boolean type=kotlin.Boolean value=true
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-b$volatile> visibility:private modality:FINAL returnType:kotlin.Boolean
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:b$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' type=kotlin.Boolean origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-b$volatile>' type=<root>.LoopTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-b$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Boolean
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:b$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<set-b$volatile>' type=<root>.LoopTest origin=null
              value: GET_VAR 'value: kotlin.Boolean declared in <root>.LoopTest.<set-b$volatile>' type=kotlin.Boolean origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:l$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST Long type=kotlin.Long value=5000000000
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-l$volatile> visibility:private modality:FINAL returnType:kotlin.Long
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:l$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' type=kotlin.Long origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-l$volatile>' type=<root>.LoopTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-l$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Long
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:l$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<set-l$volatile>' type=<root>.LoopTest origin=null
              value: GET_VAR 'value: kotlin.Long declared in <root>.LoopTest.<set-l$volatile>' type=kotlin.Long origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:r$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaaa"
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-r$volatile> visibility:private modality:FINAL returnType:kotlin.Any?
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:r$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' type=kotlin.Any? origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-r$volatile>' type=<root>.LoopTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-r$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Any?
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:r$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<set-r$volatile>' type=<root>.LoopTest origin=null
              value: GET_VAR 'value: kotlin.Any? declared in <root>.LoopTest.<set-r$volatile>' type=kotlin.Any? origin=null
    PROPERTY ATOMICFU_GENERATED_PROPERTY name:rs$volatile visibility:private modality:FINAL [var]
      FIELD ATOMICFU_GENERATED_FIELD name:rs$volatile type:kotlin.Any? visibility:private
        annotations:
          Volatile
        EXPRESSION_BODY
          CONST String type=kotlin.String value="bbbb"
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<get-rs$volatile> visibility:private modality:FINAL returnType:kotlin.Any?
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:rs$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-rs$volatile> (): kotlin.Any? declared in <root>.LoopTest'
            GET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:rs$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' type=kotlin.Any? origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-rs$volatile>' type=<root>.LoopTest origin=null
      FUN ATOMICFU_GENERATED_PROPERTY_ACCESSOR name:<set-rs$volatile> visibility:private modality:FINAL returnType:kotlin.Unit
        VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        VALUE_PARAMETER kind:Regular name:value index:1 type:kotlin.Any?
        correspondingProperty: PROPERTY ATOMICFU_GENERATED_PROPERTY name:rs$volatile visibility:private modality:FINAL [var]
        BLOCK_BODY
          RETURN type=kotlin.Unit from='private final fun <set-rs$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest'
            SET_FIELD 'FIELD ATOMICFU_GENERATED_FIELD name:rs$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' type=kotlin.Unit origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<set-rs$volatile>' type=<root>.LoopTest origin=null
              value: GET_VAR 'value: kotlin.Any? declared in <root>.LoopTest.<set-rs$volatile>' type=kotlin.Any? origin=null
    CLASS CLASS name:A modality:FINAL visibility:public superTypes:[kotlin.Any]
      thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.LoopTest.A
      PROPERTY name:s visibility:public modality:FINAL [val]
        FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]
          EXPRESSION_BODY
            GET_VAR 's: kotlin.String declared in <root>.LoopTest.A.<init>' type=kotlin.String origin=INITIALIZE_PROPERTY_FROM_PARAMETER
        FUN DEFAULT_PROPERTY_ACCESSOR name:<get-s> visibility:public modality:FINAL returnType:kotlin.String
          VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest.A
          correspondingProperty: PROPERTY name:s visibility:public modality:FINAL [val]
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A'
              GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
                receiver: GET_VAR '<this>: <root>.LoopTest.A declared in <root>.LoopTest.A.<get-s>' type=<root>.LoopTest.A origin=null
      CONSTRUCTOR visibility:public returnType:<root>.LoopTest.A [primary]
        VALUE_PARAMETER kind:Regular name:s index:0 type:kotlin.String
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:A modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
      FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
        overridden:
          public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        overridden:
          public open fun hashCode (): kotlin.Int declared in kotlin.Any
      FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        overridden:
          public open fun toString (): kotlin.String declared in kotlin.Any
    CONSTRUCTOR visibility:public returnType:<root>.LoopTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:LoopTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.Any? [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Any?, kotlin.Any?>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Any?> origin=null
                ARG p1: GET_VAR 'val tmp_0: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Any?
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_0: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_1: R of kotlin.Function1 declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Any? declared in <root>.LoopTest'
                  GET_VAR 'val tmp_0: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Boolean, kotlin.Boolean>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_2 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Boolean
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_3 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=null
                ARG p1: GET_VAR 'val tmp_2: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Boolean
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_2: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_3: R of kotlin.Function1 declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.LoopTest'
                  GET_VAR 'val tmp_2: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Int, kotlin.Int>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_4 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_5 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=null
                ARG p1: GET_VAR 'val tmp_4: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Int
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_4: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_5: R of kotlin.Function1 declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in <root>.LoopTest'
                  GET_VAR 'val tmp_4: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Long, kotlin.Long>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_6 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_7 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=null
                ARG p1: GET_VAR 'val tmp_6: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Long
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_6: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_7: R of kotlin.Function1 declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in <root>.LoopTest'
                  GET_VAR 'val tmp_6: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Any?, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_8 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit> declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_8: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Boolean, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_9 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Boolean
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit> declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_9: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Int, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_10 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit> declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_10: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:loop$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Long, kotlin.Unit>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=R of kotlin.Function1 origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_11 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
              ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit> declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=null
              ARG p1: GET_VAR 'val tmp_11: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.loop$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:update$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Any?, kotlin.Any?>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_12 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_13 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Any?> origin=null
                ARG p1: GET_VAR 'val tmp_12: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Any?
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_12: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_13: R of kotlin.Function1 declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Any' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun update$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Unit declared in <root>.LoopTest'
                  GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:update$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Boolean, kotlin.Boolean>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_14 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Boolean
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_15 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=null
                ARG p1: GET_VAR 'val tmp_14: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Boolean
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_14: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_15: R of kotlin.Function1 declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun update$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Unit declared in <root>.LoopTest'
                  GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:update$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Int, kotlin.Int>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_16 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_17 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=null
                ARG p1: GET_VAR 'val tmp_16: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Int
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_16: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_17: R of kotlin.Function1 declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Int' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun update$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Unit declared in <root>.LoopTest'
                  GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:update$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Unit [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Long, kotlin.Long>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_18 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_19 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=null
                ARG p1: GET_VAR 'val tmp_18: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Long
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_18: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_19: R of kotlin.Function1 declared in <root>.LoopTest.update$atomicfu$NATIVE_PROPERTY_REF$Long' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun update$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Unit declared in <root>.LoopTest'
                  GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN ATOMICFU_GENERATED_FUNCTION name:updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any visibility:private modality:FINAL returnType:kotlin.Any? [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Any?, kotlin.Any?>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_20 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_21 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function1<kotlin.Any?, kotlin.Any?> origin=null
                ARG p1: GET_VAR 'val tmp_20: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Any?
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_20: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_21: R of kotlin.Function1 declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Any? declared in <root>.LoopTest'
                  GET_VAR 'val tmp_21: R of kotlin.Function1 declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any' type=R of kotlin.Function1 origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean visibility:private modality:FINAL returnType:kotlin.Boolean [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Boolean, kotlin.Boolean>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_22 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Boolean
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_23 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=null
                ARG p1: GET_VAR 'val tmp_22: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Boolean
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_22: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_23: R of kotlin.Function1 declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.LoopTest'
                  GET_VAR 'val tmp_23: R of kotlin.Function1 declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean' type=R of kotlin.Function1 origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int visibility:private modality:FINAL returnType:kotlin.Int [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Int, kotlin.Int>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_24 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Int
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_25 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=null
                ARG p1: GET_VAR 'val tmp_24: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Int
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_24: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_25: R of kotlin.Function1 declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in <root>.LoopTest'
                  GET_VAR 'val tmp_25: R of kotlin.Function1 declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int' type=R of kotlin.Function1 origin=null
    FUN ATOMICFU_GENERATED_FUNCTION name:updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long visibility:private modality:FINAL returnType:kotlin.Long [inline]
      VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:handler$atomicfu index:1 type:kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> [crossinline]
      VALUE_PARAMETER kind:Regular name:action$atomicfu index:2 type:kotlin.Function1<kotlin.Long, kotlin.Long>
      BLOCK_BODY
        WHILE label=null origin=null
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_26 type:T of kotlin.concurrent.atomicGetField [val]
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Long
                ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                  ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
            VAR IR_TEMPORARY_VARIABLE name:tmp_27 type:R of kotlin.Function1 [val]
              CALL 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 declared in kotlin.Function1' type=R of kotlin.Function1 origin=null
                ARG <this>: GET_VAR 'action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=null
                ARG p1: GET_VAR 'val tmp_26: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
            WHEN type=kotlin.Unit origin=null
              BRANCH
                if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                  TYPE_ARG T: kotlin.Long
                  ARG <this>: CALL 'public abstract fun invoke (): R of kotlin.Function0 declared in kotlin.Function0' type=R of kotlin.Function0 origin=null
                    ARG <this>: GET_VAR 'handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long' type=kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>> origin=null
                  ARG expectedValue: GET_VAR 'val tmp_26: T of kotlin.concurrent.atomicGetField declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long' type=T of kotlin.concurrent.atomicGetField origin=null
                  ARG newValue: GET_VAR 'val tmp_27: R of kotlin.Function1 declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long' type=R of kotlin.Function1 origin=null
                then: RETURN type=kotlin.Nothing from='private final fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in <root>.LoopTest'
                  GET_VAR 'val tmp_27: R of kotlin.Function1 declared in <root>.LoopTest.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long' type=R of kotlin.Function1 origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:atomicfuBooleanGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Boolean type=kotlin.Boolean value=false
        VAR name:resBool type:kotlin.Boolean [val]
          CALL 'private final fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.LoopTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=null
            ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Boolean> origin=LAMBDA
              FUN ATOMICFU_GENERATED_FUNCTION name:<b$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Boolean [inline]
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <b$volatile-getter> (): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest'
                    PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest'
                    WHEN type=kotlin.Boolean origin=IF
                      BRANCH
                        if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                          ARG <this>: GET_VAR 'value: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest.<anonymous>' type=kotlin.Boolean origin=null
                        then: BLOCK type=kotlin.Boolean origin=null
                          CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                            TYPE_ARG T: kotlin.Boolean
                            ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG expectedValue: CONST Boolean type=kotlin.Boolean value=false
                            ARG newValue: CONST Boolean type=kotlin.Boolean value=true
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Boolean origin=null
                          CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: GET_VAR 'val resBool: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=kotlin.Boolean origin=null
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Boolean
              ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuBooleanLoopTest visibility:public modality:FINAL returnType:kotlin.Boolean
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:newValue index:1 type:kotlin.Boolean
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Boolean type=kotlin.Boolean value=true
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=null
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Boolean> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<b$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Boolean [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <b$volatile-getter> (): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanLoopTest'
                  PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: GET_VAR 'cur: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanLoopTest.<anonymous>' type=kotlin.Boolean origin=null
                      ARG arg1: CONST Boolean type=kotlin.Boolean value=false
                    then: BLOCK type=kotlin.Unit origin=null
                      WHEN type=kotlin.Unit origin=IF
                        BRANCH
                          if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                            TYPE_ARG T: kotlin.Boolean
                            ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG expectedValue: CONST Boolean type=kotlin.Boolean value=false
                            ARG newValue: GET_VAR 'newValue: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=kotlin.Boolean origin=null
                          then: BLOCK type=kotlin.Unit origin=null
                            CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                              TYPE_ARG T: kotlin.Boolean
                              ARG expected: GET_VAR 'newValue: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=kotlin.Boolean origin=null
                              ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                                CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                                  TYPE_ARG T: kotlin.Boolean
                                  ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            RETURN type=kotlin.Nothing from='public final fun atomicfuBooleanLoopTest (newValue: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest'
                              TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
                                CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                                  TYPE_ARG T: kotlin.Boolean
                                  ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: BLOCK type=kotlin.Unit origin=null
                      CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.Boolean
                        ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                          ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                        ARG newValue: CONST Boolean type=kotlin.Boolean value=false
    FUN name:atomicfuBooleanUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Boolean type=kotlin.Boolean value=false
        VAR name:resBool type:kotlin.Boolean [val]
          CALL 'private final fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in <root>.LoopTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=null
            ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Boolean> origin=LAMBDA
              FUN ATOMICFU_GENERATED_FUNCTION name:<b$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Boolean [inline]
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <b$volatile-getter> (): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest'
                    PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest'
                    WHEN type=kotlin.Boolean origin=IF
                      BRANCH
                        if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                          ARG <this>: GET_VAR 'value: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest.<anonymous>' type=kotlin.Boolean origin=null
                        then: BLOCK type=kotlin.Boolean origin=null
                          CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                            TYPE_ARG T: kotlin.Boolean
                            ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG expectedValue: CONST Boolean type=kotlin.Boolean value=false
                            ARG newValue: CONST Boolean type=kotlin.Boolean value=true
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Boolean origin=null
                          CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: GET_VAR 'val resBool: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=kotlin.Boolean origin=null
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Boolean
              ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuBooleanUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Boolean type=kotlin.Boolean value=false
        CALL 'private final fun update$atomicfu$NATIVE_PROPERTY_REF$Boolean (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Boolean>>, action$atomicfu: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=null
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Boolean> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<b$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Boolean [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <b$volatile-getter> (): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateTest'
                  PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateTest'
                  WHEN type=kotlin.Boolean origin=IF
                    BRANCH
                      if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                        ARG <this>: GET_VAR 'value: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateTest.<anonymous>' type=kotlin.Boolean origin=null
                      then: BLOCK type=kotlin.Boolean origin=null
                        CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                          TYPE_ARG T: kotlin.Boolean
                          ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                          ARG expectedValue: CONST Boolean type=kotlin.Boolean value=false
                          ARG newValue: CONST Boolean type=kotlin.Boolean value=true
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Boolean origin=null
                        CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG expected: CONST Boolean type=kotlin.Boolean value=true
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Boolean
              ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: TYPE_OP type=kotlin.Boolean origin=CAST typeOperand=kotlin.Boolean
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Boolean
              ARG <this>: PROPERTY_REFERENCE 'private final b$volatile: kotlin.Boolean declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:b$volatile type:kotlin.Boolean visibility:private declared in <root>.LoopTest' getter='private final fun <get-b$volatile> (): kotlin.Boolean declared in <root>.LoopTest' setter='private final fun <set-b$volatile> (value: kotlin.Boolean): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Boolean origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun atomicfuIntGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuBooleanGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuLongGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuRefGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuIntGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Int type=kotlin.Int value=0
        VAR name:resInt type:kotlin.Int [val]
          CALL 'private final fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in <root>.LoopTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=null
            ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Int> origin=LAMBDA
              FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Int [inline]
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Int declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest'
                    PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest'
                    WHEN type=kotlin.Int origin=IF
                      BRANCH
                        if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                          ARG arg0: GET_VAR 'value: kotlin.Int declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest.<anonymous>' type=kotlin.Int origin=null
                          ARG arg1: CONST Int type=kotlin.Int value=10
                        then: BLOCK type=kotlin.Int origin=null
                          CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
                            ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                              ARG delta: CONST Int type=kotlin.Int value=1
                            ARG other: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Int origin=null
                          CONST Int type=kotlin.Int value=2147483647
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=10
          ARG actual: GET_VAR 'val resInt: kotlin.Int declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=kotlin.Int origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2147483647
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuIntLoopTest visibility:public modality:FINAL returnType:kotlin.Int
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:newValue index:1 type:kotlin.Int
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Int type=kotlin.Int value=0
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=null
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Int> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Int [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Int declared in <root>.LoopTest.atomicfuIntLoopTest'
                  PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  WHEN type=kotlin.Int origin=IF
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: GET_VAR 'cur: kotlin.Int declared in <root>.LoopTest.atomicfuIntLoopTest.<anonymous>' type=kotlin.Int origin=null
                        ARG arg1: CONST Int type=kotlin.Int value=10
                      then: BLOCK type=kotlin.Unit origin=null
                        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                          CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                            TYPE_ARG T: kotlin.Int
                            ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG expectedValue: CONST Int type=kotlin.Int value=10
                            ARG newValue: GET_VAR 'newValue: kotlin.Int declared in <root>.LoopTest.atomicfuIntLoopTest' type=kotlin.Int origin=null
                        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                          TYPE_ARG T: kotlin.Int
                          ARG expected: GET_VAR 'newValue: kotlin.Int declared in <root>.LoopTest.atomicfuIntLoopTest' type=kotlin.Int origin=null
                          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                              TYPE_ARG T: kotlin.Int
                              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                        RETURN type=kotlin.Nothing from='public final fun atomicfuIntLoopTest (newValue: kotlin.Int): kotlin.Int declared in <root>.LoopTest'
                          TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
                            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                              TYPE_ARG T: kotlin.Int
                              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Int origin=null
                        CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
                          ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                            ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG delta: CONST Int type=kotlin.Int value=1
                          ARG other: CONST Int type=kotlin.Int value=1
    FUN name:atomicfuIntUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Int type=kotlin.Int value=0
        VAR name:resInt type:kotlin.Int [val]
          CALL 'private final fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in <root>.LoopTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=null
            ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Int> origin=LAMBDA
              FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Int [inline]
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest'
                    PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest'
                    WHEN type=kotlin.Int origin=IF
                      BRANCH
                        if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                          ARG arg0: GET_VAR 'value: kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest.<anonymous>' type=kotlin.Int origin=null
                          ARG arg1: CONST Int type=kotlin.Int value=10
                        then: BLOCK type=kotlin.Int origin=null
                          CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
                            ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                              ARG delta: CONST Int type=kotlin.Int value=1
                            ARG other: CONST Int type=kotlin.Int value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Int origin=null
                          CONST Int type=kotlin.Int value=2147483647
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2147483647
          ARG actual: GET_VAR 'val resInt: kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=kotlin.Int origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2147483647
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuIntUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Int type=kotlin.Int value=0
        CALL 'private final fun update$atomicfu$NATIVE_PROPERTY_REF$Int (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Int>>, action$atomicfu: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=null
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Int> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<a$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Int [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <a$volatile-getter> (): kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateTest'
                  PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateTest'
                  WHEN type=kotlin.Int origin=IF
                    BRANCH
                      if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                        ARG arg0: GET_VAR 'value: kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateTest.<anonymous>' type=kotlin.Int origin=null
                        ARG arg1: CONST Int type=kotlin.Int value=10
                      then: BLOCK type=kotlin.Int origin=null
                        CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
                          ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Int>, delta: kotlin.Int): kotlin.Int declared in kotlin.concurrent' type=kotlin.Int origin=null
                            ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG delta: CONST Int type=kotlin.Int value=1
                          ARG other: CONST Int type=kotlin.Int value=1
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Int origin=null
                        CONST Int type=kotlin.Int value=2147483647
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=2147483647
          ARG actual: TYPE_OP type=kotlin.Int origin=CAST typeOperand=kotlin.Int
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: PROPERTY_REFERENCE 'private final a$volatile: kotlin.Int declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:a$volatile type:kotlin.Int visibility:private declared in <root>.LoopTest' getter='private final fun <get-a$volatile> (): kotlin.Int declared in <root>.LoopTest' setter='private final fun <set-a$volatile> (value: kotlin.Int): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Int origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuLongGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Long type=kotlin.Long value=0
        VAR name:resLong type:kotlin.Long [val]
          CALL 'private final fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in <root>.LoopTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=null
            ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Long> origin=LAMBDA
              FUN ATOMICFU_GENERATED_FUNCTION name:<l$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Long [inline]
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <l$volatile-getter> (): kotlin.Long declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest'
                    PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Long
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Long): kotlin.Long declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest'
                    WHEN type=kotlin.Long origin=IF
                      BRANCH
                        if: CALL 'public final fun less (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                          ARG arg0: GET_VAR 'value: kotlin.Long declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest.<anonymous>' type=kotlin.Long origin=null
                          ARG arg1: CALL 'public open fun toLong (): kotlin.Long declared in kotlin.Int' type=kotlin.Long origin=null
                            ARG <this>: CONST Int type=kotlin.Int value=10
                        then: BLOCK type=kotlin.Long origin=null
                          CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
                            ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                              ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                              ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                                CONST Long type=kotlin.Long value=1
                            ARG other: CONST Long type=kotlin.Long value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Long origin=null
                          CONST Long type=kotlin.Long value=9223372036854775807
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9223372036854775807
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Long
              ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=10
          ARG actual: GET_VAR 'val resLong: kotlin.Long declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=kotlin.Long origin=null
    FUN name:atomicfuLongLoopTest visibility:public modality:FINAL returnType:kotlin.Long
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:newValue index:1 type:kotlin.Long
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Long type=kotlin.Long value=5000000000
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=null
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Long> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<l$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Long [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <l$volatile-getter> (): kotlin.Long declared in <root>.LoopTest.atomicfuLongLoopTest'
                  PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  WHEN type=kotlin.Any origin=IF
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: GET_VAR 'cur: kotlin.Long declared in <root>.LoopTest.atomicfuLongLoopTest.<anonymous>' type=kotlin.Long origin=null
                        ARG arg1: CONST Long type=kotlin.Long value=5000000010
                      then: BLOCK type=kotlin.Unit origin=null
                        WHEN type=kotlin.Unit origin=IF
                          BRANCH
                            if: CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                              TYPE_ARG T: kotlin.Long
                              ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                              ARG expectedValue: CONST Long type=kotlin.Long value=5000000010
                              ARG newValue: GET_VAR 'newValue: kotlin.Long declared in <root>.LoopTest.atomicfuLongLoopTest' type=kotlin.Long origin=null
                            then: BLOCK type=kotlin.Unit origin=null
                              CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                                TYPE_ARG T: kotlin.Long
                                ARG expected: GET_VAR 'newValue: kotlin.Long declared in <root>.LoopTest.atomicfuLongLoopTest' type=kotlin.Long origin=null
                                ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                                  CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                                    TYPE_ARG T: kotlin.Long
                                    ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                              RETURN type=kotlin.Nothing from='public final fun atomicfuLongLoopTest (newValue: kotlin.Long): kotlin.Long declared in <root>.LoopTest'
                                TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
                                  CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                                    TYPE_ARG T: kotlin.Long
                                    ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Long origin=null
                        CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
                          ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                            ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                              CONST Long type=kotlin.Long value=1
                          ARG other: CONST Long type=kotlin.Long value=1
    FUN name:atomicfuLongUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Long type=kotlin.Long value=0
        VAR name:resLong type:kotlin.Long [val]
          CALL 'private final fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in <root>.LoopTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=null
            ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Long> origin=LAMBDA
              FUN ATOMICFU_GENERATED_FUNCTION name:<l$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Long [inline]
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <l$volatile-getter> (): kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest'
                    PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Long
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Long): kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest'
                    WHEN type=kotlin.Long origin=IF
                      BRANCH
                        if: CALL 'public final fun less (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                          ARG arg0: GET_VAR 'value: kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest.<anonymous>' type=kotlin.Long origin=null
                          ARG arg1: CALL 'public open fun toLong (): kotlin.Long declared in kotlin.Int' type=kotlin.Long origin=null
                            ARG <this>: CONST Int type=kotlin.Int value=10
                        then: BLOCK type=kotlin.Long origin=null
                          CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
                            ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                              ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                              ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                                CONST Long type=kotlin.Long value=1
                            ARG other: CONST Long type=kotlin.Long value=1
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Long origin=null
                          CONST Long type=kotlin.Long value=9223372036854775807
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9223372036854775807
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Long
              ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9223372036854775807
          ARG actual: GET_VAR 'val resLong: kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=kotlin.Long origin=null
    FUN name:atomicfuLongUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONST Long type=kotlin.Long value=0
        CALL 'private final fun update$atomicfu$NATIVE_PROPERTY_REF$Long (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Long>>, action$atomicfu: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=null
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Long> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<l$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Long [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <l$volatile-getter> (): kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateTest'
                  PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Long
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Long): kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateTest'
                  WHEN type=kotlin.Long origin=IF
                    BRANCH
                      if: CALL 'public final fun less (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                        ARG arg0: GET_VAR 'value: kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateTest.<anonymous>' type=kotlin.Long origin=null
                        ARG arg1: CALL 'public open fun toLong (): kotlin.Long declared in kotlin.Int' type=kotlin.Long origin=null
                          ARG <this>: CONST Int type=kotlin.Int value=10
                      then: BLOCK type=kotlin.Long origin=null
                        CALL 'public final fun plus (other: kotlin.Long): kotlin.Long declared in kotlin.Long' type=kotlin.Long origin=null
                          ARG <this>: CALL 'internal final fun getAndAddField (<this>: kotlin.reflect.KMutableProperty0<kotlin.Long>, delta: kotlin.Long): kotlin.Long declared in kotlin.concurrent' type=kotlin.Long origin=null
                            ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG delta: TYPE_OP type=kotlin.Long origin=IMPLICIT_CAST typeOperand=kotlin.Long
                              CONST Long type=kotlin.Long value=1
                          ARG other: CONST Long type=kotlin.Long value=1
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Long origin=null
                        CONST Long type=kotlin.Long value=9223372036854775807
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9223372036854775807
          ARG actual: TYPE_OP type=kotlin.Long origin=CAST typeOperand=kotlin.Long
            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
              TYPE_ARG T: kotlin.Long
              ARG <this>: PROPERTY_REFERENCE 'private final l$volatile: kotlin.Long declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:l$volatile type:kotlin.Long visibility:private declared in <root>.LoopTest' getter='private final fun <get-l$volatile> (): kotlin.Long declared in <root>.LoopTest' setter='private final fun <set-l$volatile> (value: kotlin.Long): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Long origin=null
                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuLoopTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=777
          ARG actual: CALL 'public final fun atomicfuIntLoopTest (newValue: kotlin.Int): kotlin.Int declared in <root>.LoopTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG newValue: CONST Int type=kotlin.Int value=777
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun atomicfuBooleanLoopTest (newValue: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG newValue: CONST Boolean type=kotlin.Boolean value=false
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9000000000
          ARG actual: CALL 'public final fun atomicfuLongLoopTest (newValue: kotlin.Long): kotlin.Long declared in <root>.LoopTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG newValue: CONST Long type=kotlin.Long value=9000000000
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="bbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun atomicfuRefLoopTest (newValue: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest' type=<root>.LoopTest.A origin=null
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
              ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                ARG s: CONST String type=kotlin.String value="bbbb"
    FUN name:atomicfuRefGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaaa"
        VAR name:resRef type:<root>.LoopTest.A [val]
          CALL 'private final fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Any? declared in <root>.LoopTest' type=kotlin.Any? origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=null
            ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Any?> origin=LAMBDA
              FUN ATOMICFU_GENERATED_FUNCTION name:<r$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Any? [inline]
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <r$volatile-getter> (): kotlin.Any? declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest'
                    PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<<root>.LoopTest.A, <root>.LoopTest.A> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.LoopTest.A
                VALUE_PARAMETER kind:Regular name:value index:0 type:<root>.LoopTest.A
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest'
                    WHEN type=<root>.LoopTest.A origin=IF
                      BRANCH
                        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          ARG arg0: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                            ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest.<anonymous>' type=<root>.LoopTest.A origin=null
                          ARG arg1: CONST String type=kotlin.String value="aaaa"
                        then: BLOCK type=<root>.LoopTest.A origin=null
                          CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                            TYPE_ARG T: kotlin.Any?
                            ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                              ARG s: CONST String type=kotlin.String value="bbbb"
                          TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                              TYPE_ARG T: kotlin.Any?
                              ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=<root>.LoopTest.A origin=null
                          CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                            ARG s: STRING_CONCATENATION type=kotlin.String
                              CONST String type=kotlin.String value="cccc"
                              CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                                ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest.<anonymous>' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="bbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: GET_VAR 'val resRef: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="ccccbbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                  ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuRefLoopTest visibility:public modality:FINAL returnType:<root>.LoopTest.A
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:newValue index:1 type:<root>.LoopTest.A
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaa"
        CALL 'private final fun loop$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Unit>): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=null
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Any?> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<r$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Any? [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <r$volatile-getter> (): kotlin.Any? declared in <root>.LoopTest.atomicfuRefLoopTest'
                  PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<<root>.LoopTest.A, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:<root>.LoopTest.A
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                        ARG <this>: GET_VAR 'cur: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefLoopTest.<anonymous>' type=<root>.LoopTest.A origin=null
                      ARG arg1: CONST String type=kotlin.String value="bbb"
                    then: BLOCK type=kotlin.Unit origin=null
                      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                        CALL 'internal final fun compareAndSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.compareAndSetField>, expectedValue: T of kotlin.concurrent.compareAndSetField, newValue: T of kotlin.concurrent.compareAndSetField): kotlin.Boolean declared in kotlin.concurrent' type=kotlin.Boolean origin=null
                          TYPE_ARG T: kotlin.Any?
                          ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                          ARG expectedValue: GET_VAR 'cur: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefLoopTest.<anonymous>' type=<root>.LoopTest.A origin=null
                          ARG newValue: GET_VAR 'newValue: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest.A origin=null
                      CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.String
                        ARG expected: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                          ARG <this>: GET_VAR 'newValue: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest.A origin=null
                        ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                          ARG <this>: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                              TYPE_ARG T: kotlin.Any?
                              ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      RETURN type=kotlin.Nothing from='public final fun atomicfuRefLoopTest (newValue: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest'
                        TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                          CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                            TYPE_ARG T: kotlin.Any?
                            ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: BLOCK type=kotlin.Unit origin=null
                      CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.Any?
                        ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                          ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                        ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                          ARG s: CONST String type=kotlin.String value="bbb"
    FUN name:atomicfuRefUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaaa"
        VAR name:resRef type:<root>.LoopTest.A [val]
          CALL 'private final fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Any? declared in <root>.LoopTest' type=kotlin.Any? origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=null
            ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Any?> origin=LAMBDA
              FUN ATOMICFU_GENERATED_FUNCTION name:<r$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Any? [inline]
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <r$volatile-getter> (): kotlin.Any? declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest'
                    PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                      ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<<root>.LoopTest.A, <root>.LoopTest.A> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.LoopTest.A
                VALUE_PARAMETER kind:Regular name:value index:0 type:<root>.LoopTest.A
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest'
                    WHEN type=<root>.LoopTest.A origin=IF
                      BRANCH
                        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          ARG arg0: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                            ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest.<anonymous>' type=<root>.LoopTest.A origin=null
                          ARG arg1: CONST String type=kotlin.String value="aaaa"
                        then: BLOCK type=<root>.LoopTest.A origin=null
                          CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                            TYPE_ARG T: kotlin.Any?
                            ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                              ARG s: CONST String type=kotlin.String value="bbbb"
                          TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                            CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                              TYPE_ARG T: kotlin.Any?
                              ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                                ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=<root>.LoopTest.A origin=null
                          CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                            ARG s: STRING_CONCATENATION type=kotlin.String
                              CONST String type=kotlin.String value="cccc"
                              CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                                ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest.<anonymous>' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="ccccbbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: GET_VAR 'val resRef: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="ccccbbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                  ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuRefUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Any?
          ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaaa"
        CALL 'private final fun update$atomicfu$NATIVE_PROPERTY_REF$Any (handler$atomicfu: kotlin.Function0<kotlin.reflect.KMutableProperty0<kotlin.Any?>>, action$atomicfu: kotlin.Function1<kotlin.Any?, kotlin.Any?>): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=null
          ARG handler$atomicfu: FUN_EXPR type=kotlin.Function0<kotlin.Any?> origin=LAMBDA
            FUN ATOMICFU_GENERATED_FUNCTION name:<r$volatile-getter> visibility:local modality:FINAL returnType:kotlin.Any? [inline]
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <r$volatile-getter> (): kotlin.Any? declared in <root>.LoopTest.atomicfuRefUpdateTest'
                  PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                    ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action$atomicfu: FUN_EXPR type=kotlin.Function1<<root>.LoopTest.A, <root>.LoopTest.A> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.LoopTest.A
              VALUE_PARAMETER kind:Regular name:value index:0 type:<root>.LoopTest.A
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateTest'
                  WHEN type=<root>.LoopTest.A origin=IF
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                          ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateTest.<anonymous>' type=<root>.LoopTest.A origin=null
                        ARG arg1: CONST String type=kotlin.String value="aaaa"
                      then: BLOCK type=<root>.LoopTest.A origin=null
                        CALL 'internal final fun atomicSetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicSetField>, newValue: T of kotlin.concurrent.atomicSetField): kotlin.Unit declared in kotlin.concurrent' type=kotlin.Unit origin=null
                          TYPE_ARG T: kotlin.Any?
                          ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                            ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                          ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                            ARG s: CONST String type=kotlin.String value="bbbb"
                        TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
                          CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                            TYPE_ARG T: kotlin.Any?
                            ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                              ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=<root>.LoopTest.A origin=null
                        CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                          ARG s: STRING_CONCATENATION type=kotlin.String
                            CONST String type=kotlin.String value="cccc"
                            CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                              ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateTest.<anonymous>' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="ccccbbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: TYPE_OP type=kotlin.Any? origin=CAST typeOperand=kotlin.Any?
              CALL 'internal final fun atomicGetField <T> (<this>: kotlin.reflect.KMutableProperty0<T of kotlin.concurrent.atomicGetField>): T of kotlin.concurrent.atomicGetField declared in kotlin.concurrent' type=T of kotlin.concurrent.atomicGetField origin=null
                TYPE_ARG T: kotlin.Any?
                ARG <this>: PROPERTY_REFERENCE 'private final r$volatile: kotlin.Any? declared in <root>.LoopTest' field='FIELD ATOMICFU_GENERATED_FIELD name:r$volatile type:kotlin.Any? visibility:private declared in <root>.LoopTest' getter='private final fun <get-r$volatile> (): kotlin.Any? declared in <root>.LoopTest' setter='private final fun <set-r$volatile> (value: kotlin.Any?): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Any? origin=null
                  ARG 1: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun atomicfuIntUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuBooleanUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuLongUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuRefUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun atomicfuIntUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuBooleanUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuLongUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuRefUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:testClass type:<root>.LoopTest [val]
        CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.LoopTest' type=<root>.LoopTest origin=null
      CALL 'public final fun atomicfuLoopTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.LoopTest declared in <root>.box' type=<root>.LoopTest origin=null
      CALL 'public final fun atomicfuUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.LoopTest declared in <root>.box' type=<root>.LoopTest origin=null
      CALL 'public final fun atomicfuUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.LoopTest declared in <root>.box' type=<root>.LoopTest origin=null
      CALL 'public final fun atomicfuGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.LoopTest declared in <root>.box' type=<root>.LoopTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
