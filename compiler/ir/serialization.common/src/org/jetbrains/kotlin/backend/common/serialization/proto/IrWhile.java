// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile}
 */
public final class IrWhile extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)
    IrWhileOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      IrWhile.class.getName());
  }
  // Use IrWhile.newBuilder() to construct.
  private IrWhile(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IrWhile() {
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhile_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhile_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.Builder.class);
  }

  private int bitField0_;
  public static final int LOOP_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
   * @return Whether the loop field is set.
   */
  @java.lang.Override
  public boolean hasLoop() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
   * @return The loop.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.Loop getLoop() {
    return loop_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.Loop.getDefaultInstance() : loop_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.LoopOrBuilder getLoopOrBuilder() {
    return loop_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.Loop.getDefaultInstance() : loop_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasLoop()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getLoop().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getLoop());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, getLoop());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile other = (org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile) obj;

    if (hasLoop() != other.hasLoop()) return false;
    if (hasLoop()) {
      if (!getLoop()
          .equals(other.getLoop())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasLoop()) {
      hash = (37 * hash) + LOOP_FIELD_NUMBER;
      hash = (53 * hash) + getLoop().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrWhileOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhile_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getLoopFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      loop_ = null;
      if (loopBuilder_ != null) {
        loopBuilder_.dispose();
        loopBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhile_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.loop_ = loopBuilder_ == null
            ? loop_
            : loopBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile.getDefaultInstance()) return this;
      if (other.hasLoop()) {
        mergeLoop(other.getLoop());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasLoop()) {
        return false;
      }
      if (!getLoop().isInitialized()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getLoopFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop_;
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.Loop, org.jetbrains.kotlin.backend.common.serialization.proto.Loop.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.LoopOrBuilder> loopBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     * @return Whether the loop field is set.
     */
    public boolean hasLoop() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     * @return The loop.
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.Loop getLoop() {
      if (loopBuilder_ == null) {
        return loop_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.Loop.getDefaultInstance() : loop_;
      } else {
        return loopBuilder_.getMessage();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public Builder setLoop(org.jetbrains.kotlin.backend.common.serialization.proto.Loop value) {
      if (loopBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        loop_ = value;
      } else {
        loopBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public Builder setLoop(
        org.jetbrains.kotlin.backend.common.serialization.proto.Loop.Builder builderForValue) {
      if (loopBuilder_ == null) {
        loop_ = builderForValue.build();
      } else {
        loopBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public Builder mergeLoop(org.jetbrains.kotlin.backend.common.serialization.proto.Loop value) {
      if (loopBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          loop_ != null &&
          loop_ != org.jetbrains.kotlin.backend.common.serialization.proto.Loop.getDefaultInstance()) {
          getLoopBuilder().mergeFrom(value);
        } else {
          loop_ = value;
        }
      } else {
        loopBuilder_.mergeFrom(value);
      }
      if (loop_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public Builder clearLoop() {
      bitField0_ = (bitField0_ & ~0x00000001);
      loop_ = null;
      if (loopBuilder_ != null) {
        loopBuilder_.dispose();
        loopBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.Loop.Builder getLoopBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getLoopFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.LoopOrBuilder getLoopOrBuilder() {
      if (loopBuilder_ != null) {
        return loopBuilder_.getMessageOrBuilder();
      } else {
        return loop_ == null ?
            org.jetbrains.kotlin.backend.common.serialization.proto.Loop.getDefaultInstance() : loop_;
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.Loop loop = 1 [features = { ... }</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.Loop, org.jetbrains.kotlin.backend.common.serialization.proto.Loop.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.LoopOrBuilder> 
        getLoopFieldBuilder() {
      if (loopBuilder_ == null) {
        loopBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.Loop, org.jetbrains.kotlin.backend.common.serialization.proto.Loop.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.LoopOrBuilder>(
                getLoop(),
                getParentForChildren(),
                isClean());
        loop_ = null;
      }
      return loopBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<IrWhile>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IrWhile>() {
    @java.lang.Override
    public IrWhile parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<IrWhile> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrWhile> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrWhile getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
