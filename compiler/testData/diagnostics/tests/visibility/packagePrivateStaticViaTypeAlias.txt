package

public fun foo(): kotlin.Unit

public final class Child : TypeAliasedParent /* = javapackage.PublicParentClass */ {
    public constructor Child()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun foo(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
public typealias TypeAliasedParent = javapackage.PublicParentClass

package javapackage {

    public/*package*/ abstract class PackagePrivateGrandparentAbstractClass {
        public/*package*/ constructor PackagePrivateGrandparentAbstractClass()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public open fun publicStaticMethod(): kotlin.Unit
    }

    public open class PublicParentClass : javapackage.PackagePrivateGrandparentAbstractClass {
        public constructor PublicParentClass()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public open override /*1*/ /*fake_override*/ fun publicStaticMethod(): kotlin.Unit
    }
}
