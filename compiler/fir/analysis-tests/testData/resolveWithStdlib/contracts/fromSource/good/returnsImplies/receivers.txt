FILE: receivers.kt
    public abstract interface A : R|kotlin/Any| {
    }
    public final fun R|A|.foo(): R|kotlin/Unit| {
    }
    public final fun R|kotlin/Any?|.myRequireNotNull(): R|kotlin/Unit|
        [R|Contract description]
         <
            Returns(WILDCARD) -> this != null
        >
     {
        [StubStatement]
        when () {
            ==(this@R|/myRequireNotNull|, Null(null)) ->  {
                throw R|java/lang/IllegalStateException.IllegalStateException|()
            }
        }

    }
    public final fun test_1(x: R|A?|): R|kotlin/Unit| {
        R|<local>/x|.R|/myRequireNotNull|()
        R|<local>/x|.R|/foo|()
    }
    public final fun test_2(x: R|A?|): R|kotlin/Unit| {
        R|<local>/x|.R|/myRequireNotNull|()
        R|kotlin/with|<R|A|, R|kotlin/Unit|>(R|<local>/x|, <L> = with@fun R|A|.<anonymous>(): R|kotlin/Unit| <kind=EXACTLY_ONCE>  {
            this@R|special/anonymous|.R|/foo|()
        }
        )
    }
    public final fun test_3(x: R|A?|): R|kotlin/Unit| {
        R|kotlin/with|<R|A?|, R|kotlin/Unit|>(R|<local>/x|, <L> = with@fun R|A?|.<anonymous>(): R|kotlin/Unit| <kind=EXACTLY_ONCE>  {
            this@R|special/anonymous|.R|/myRequireNotNull|()
        }
        )
        R|<local>/x|.<Inapplicable(WRONG_RECEIVER): /foo>#()
    }
    public final fun test_4(x: R|A?|): R|kotlin/Unit| {
        R|kotlin/with|<R|A?|, R|kotlin/Unit|>(R|<local>/x|, <L> = with@fun R|A?|.<anonymous>(): R|kotlin/Unit| <kind=EXACTLY_ONCE>  {
            this@R|special/anonymous|.R|/myRequireNotNull|()
            this@R|special/anonymous|.R|/foo|()
        }
        )
    }
    public final fun R|A?|.test_5(): R|kotlin/Unit| {
        this@R|/test_5|.R|/myRequireNotNull|()
        this@R|/test_5|.R|/foo|()
    }
