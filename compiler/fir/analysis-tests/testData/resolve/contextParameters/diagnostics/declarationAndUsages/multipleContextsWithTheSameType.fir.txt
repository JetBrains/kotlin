FILE: multipleContextsWithTheSameType.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun foo(a: R|kotlin/String|): R|kotlin/String| {
            ^foo R|<local>/a|
        }

    }
    context(ctx: R|T|)
    public final fun <T> implicit(): R|T| {
        ^implicit R|<local>/ctx|
    }
    context(a: R|A|, a2: R|A|)
    public final fun test(): R|kotlin/Unit| {
        R|<local>/a|.R|/A.foo|(String())
        R|<local>/a2|.R|/A.foo|(String())
        R|/implicit<Inapplicable(INAPPLICABLE): /implicit>#|<R|A|>().R|/A.foo|(String())
    }
    context(a: R|A|, a2: R|A|)
    public final val property: R|kotlin/String|
        public get(): R|kotlin/String| {
            R|<local>/a|.R|/A.foo|(String())
            R|<local>/a2|.R|/A.foo|(String())
            ^ R|/implicit<Inapplicable(INAPPLICABLE): /implicit>#|<R|A|>().R|/A.foo|(String())
        }
    public final fun inTypePosition(a: R|@ContextFunctionTypeParams (A, A) -> kotlin/Unit|): R|kotlin/Unit| {
    }
    public final fun usage(): R|kotlin/Unit| {
        R|kotlin/with|<R|A|, R|kotlin/String|>(R|/A.A|(), <L> = with@fun R|A|.<anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {
            R|/test|()
            ^ R|/property|
        }
        )
        R|/inTypePosition|(<L> = inTypePosition@fun <anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            R|/implicit<Inapplicable(INAPPLICABLE): /implicit>#|<R|A|>().R|/A.foo|(String())
        }
        )
    }
