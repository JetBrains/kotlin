FILE fqName:<root> fileName:/for_loops_array_break_continue.kt
  PROPERTY name:sb visibility:public modality:FINAL [val]
    FIELD PROPERTY_BACKING_FIELD name:sb type:java.lang.StringBuilder visibility:private [final,static]
      EXPRESSION_BODY
        CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-sb> visibility:public modality:FINAL returnType:java.lang.StringBuilder
      correspondingProperty: PROPERTY name:sb visibility:public modality:FINAL [val]
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun <get-sb> (): java.lang.StringBuilder declared in <root>'
          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:sb type:java.lang.StringBuilder visibility:private [final,static]' type=java.lang.StringBuilder origin=null
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:intArray type:kotlin.IntArray [val]
        CALL 'public final fun intArrayOf (vararg elements: kotlin.Int): kotlin.IntArray declared in kotlin' type=kotlin.IntArray origin=null
          ARG elements: VARARG type=kotlin.IntArray varargElementType=kotlin.Int
            CONST Int type=kotlin.Int value=4
            CONST Int type=kotlin.Int value=0
            CONST Int type=kotlin.Int value=3
            CONST Int type=kotlin.Int value=5
      VAR name:emptyArray type:kotlin.Array<kotlin.Any> [val]
        CALL 'public final fun arrayOf <T> (vararg elements: T of kotlin.arrayOf): kotlin.Array<T of kotlin.arrayOf> declared in kotlin' type=kotlin.Array<kotlin.Any> origin=null
          TYPE_ARG T: kotlin.Any
      BLOCK type=kotlin.Unit origin=FOR_LOOP
        VAR FOR_LOOP_ITERATOR name:tmp_0 type:kotlin.collections.IntIterator [val]
          CALL 'public final fun iterator (): kotlin.collections.IntIterator declared in kotlin.IntArray' type=kotlin.collections.IntIterator origin=FOR_LOOP_ITERATOR
            ARG <this>: GET_VAR 'val intArray: kotlin.IntArray declared in <root>.box' type=kotlin.IntArray origin=null
        WHILE label=null origin=FOR_LOOP_INNER_WHILE
          condition: CALL 'public abstract fun hasNext (): kotlin.Boolean declared in kotlin.collections.IntIterator' type=kotlin.Boolean origin=FOR_LOOP_HAS_NEXT
            ARG <this>: GET_VAR 'val tmp_0: kotlin.collections.IntIterator declared in <root>.box' type=kotlin.collections.IntIterator origin=null
          body: BLOCK type=kotlin.Unit origin=FOR_LOOP_INNER_WHILE
            VAR FOR_LOOP_VARIABLE name:element type:kotlin.Int [val]
              CALL 'public final fun next (): kotlin.Int declared in kotlin.collections.IntIterator' type=kotlin.Int origin=FOR_LOOP_NEXT
                ARG <this>: GET_VAR 'val tmp_0: kotlin.collections.IntIterator declared in <root>.box' type=kotlin.collections.IntIterator origin=null
            BLOCK type=kotlin.Unit origin=null
              TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                CALL 'public open fun append (p0: kotlin.Int): @[FlexibleNullability] java.lang.StringBuilder? declared in java.lang.StringBuilder' type=@[FlexibleNullability] java.lang.StringBuilder? origin=null
                  ARG <this>: CALL 'public final fun <get-sb> (): java.lang.StringBuilder declared in <root>' type=java.lang.StringBuilder origin=GET_PROPERTY
                  ARG p0: GET_VAR 'val element: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
              WHEN type=kotlin.Unit origin=IF
                BRANCH
                  if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    ARG arg0: GET_VAR 'val element: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
                    ARG arg1: CONST Int type=kotlin.Int value=3
                  then: BLOCK type=kotlin.Unit origin=null
                    BREAK label=null loop.label=null
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        CALL 'public final fun appendLine (<this>: java.lang.StringBuilder): java.lang.StringBuilder declared in kotlin.text' type=java.lang.StringBuilder origin=null
          ARG <this>: CALL 'public final fun <get-sb> (): java.lang.StringBuilder declared in <root>' type=java.lang.StringBuilder origin=GET_PROPERTY
      BLOCK type=kotlin.Unit origin=FOR_LOOP
        VAR FOR_LOOP_ITERATOR name:tmp_1 type:kotlin.collections.Iterator<kotlin.Any> [val]
          CALL 'public final fun iterator (): kotlin.collections.Iterator<T of kotlin.Array> declared in kotlin.Array' type=kotlin.collections.Iterator<kotlin.Any> origin=FOR_LOOP_ITERATOR
            ARG <this>: GET_VAR 'val emptyArray: kotlin.Array<kotlin.Any> declared in <root>.box' type=kotlin.Array<kotlin.Any> origin=null
        WHILE label=null origin=FOR_LOOP_INNER_WHILE
          condition: CALL 'public abstract fun hasNext (): kotlin.Boolean declared in kotlin.collections.Iterator' type=kotlin.Boolean origin=FOR_LOOP_HAS_NEXT
            ARG <this>: GET_VAR 'val tmp_1: kotlin.collections.Iterator<kotlin.Any> declared in <root>.box' type=kotlin.collections.Iterator<kotlin.Any> origin=null
          body: BLOCK type=kotlin.Unit origin=FOR_LOOP_INNER_WHILE
            VAR FOR_LOOP_VARIABLE name:element type:kotlin.Any [val]
              CALL 'public abstract fun next (): T of kotlin.collections.Iterator declared in kotlin.collections.Iterator' type=kotlin.Any origin=FOR_LOOP_NEXT
                ARG <this>: GET_VAR 'val tmp_1: kotlin.collections.Iterator<kotlin.Any> declared in <root>.box' type=kotlin.collections.Iterator<kotlin.Any> origin=null
            BLOCK type=kotlin.Unit origin=null
              TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                CALL 'public open fun append (p0: @[FlexibleNullability] kotlin.Any?): @[FlexibleNullability] java.lang.StringBuilder? declared in java.lang.StringBuilder' type=@[FlexibleNullability] java.lang.StringBuilder? origin=null
                  ARG <this>: CALL 'public final fun <get-sb> (): java.lang.StringBuilder declared in <root>' type=java.lang.StringBuilder origin=GET_PROPERTY
                  ARG p0: GET_VAR 'val element: kotlin.Any declared in <root>.box' type=kotlin.Any origin=null
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        CALL 'public final fun appendLine (<this>: java.lang.StringBuilder): java.lang.StringBuilder declared in kotlin.text' type=java.lang.StringBuilder origin=null
          ARG <this>: CALL 'public final fun <get-sb> (): java.lang.StringBuilder declared in <root>' type=java.lang.StringBuilder origin=GET_PROPERTY
      CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
        TYPE_ARG T: kotlin.String
        ARG expected: CONST String type=kotlin.String value="403\n\n"
        ARG actual: TYPE_OP type=kotlin.String origin=IMPLICIT_NOTNULL typeOperand=kotlin.String
          CALL 'public open fun toString (): @[EnhancedNullability] kotlin.String declared in java.lang.StringBuilder' type=@[EnhancedNullability] kotlin.String origin=null
            ARG <this>: CALL 'public final fun <get-sb> (): java.lang.StringBuilder declared in <root>' type=java.lang.StringBuilder origin=GET_PROPERTY
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
