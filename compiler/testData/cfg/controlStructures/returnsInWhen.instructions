== illegalWhenBlock ==
fun illegalWhenBlock(a: Any): Any {
    when(a) {
        is Int -> return a
    }
}
---------------------
L0:
  1 <START>
    v(a: Any)
    w(a)
  2 mark({ when(a) { is Int -> return a } })
    mark(when(a) { is Int -> return a })
    r(a)
    mark(is Int -> return a)
    jmp?(L4)                                    NEXT:[<END>, r(a)]
L3:
    r(a)
    ret(*) L1                                   NEXT:[<END>]
-   jmp(L2)                                     PREV:[]
L1:
L2:
L4:
  1 <END>                                       NEXT:[<SINK>]                                      PREV:[jmp?(L4), ret(*) L1]
error:
    <ERROR>                                     PREV:[]
sink:
    <SINK>                                      PREV:[<ERROR>, <END>]
=====================
