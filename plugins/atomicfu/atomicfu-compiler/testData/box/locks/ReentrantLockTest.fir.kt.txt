class ReentrantLockFieldTest {
  private val lock: SynchronizedObject
    field = reentrantLock()
    private get

  private var state: Int
    field = 0
    private get
    private set

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testLock() {
    withLock<Unit>(/* <this> = <this>.<get-lock>(), */ block = local fun <anonymous>() {
      <this>.<set-state>(<set-?> = 1)
    }
)
    assertEquals<Int>(expected = 1, actual = <this>.<get-state>())
    assertTrue(actual = <this>.<get-lock>().tryLock())
    <this>.<get-lock>().unlock()
  }

}

fun box(): String {
  val testClass: ReentrantLockFieldTest = ReentrantLockFieldTest()
  testClass.testLock()
  return "OK"
}
