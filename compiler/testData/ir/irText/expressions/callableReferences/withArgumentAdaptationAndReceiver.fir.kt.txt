class Host {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testBoundReceiverExpression() {
    use(fn = { // BLOCK
      local fun Host.withVararg(p0: Int) {
        receiver.withVararg(xs = [p0]) /*~> Unit */
      }

      ::withVararg/*(receiver = Host()) */
    })
  }

  fun testBoundReceiverLocalVal() {
    val h: Host = Host()
    use(fn = { // BLOCK
      local fun Host.withVararg(p0: Int) {
        receiver.withVararg(xs = [p0]) /*~> Unit */
      }

      ::withVararg/*(receiver = h) */
    })
  }

  fun testBoundReceiverLocalVar() {
    var h: Host = Host()
    use(fn = { // BLOCK
      local fun Host.withVararg(p0: Int) {
        receiver.withVararg(xs = [p0]) /*~> Unit */
      }

      ::withVararg/*(receiver = h) */
    })
  }

  fun testBoundReceiverParameter(h: Host) {
    use(fn = { // BLOCK
      local fun Host.withVararg(p0: Int) {
        receiver.withVararg(xs = [p0]) /*~> Unit */
      }

      ::withVararg/*(receiver = h) */
    })
  }

  fun testImplicitThis() {
    use(fn = { // BLOCK
      local fun Host.withVararg(p0: Int) {
        receiver.withVararg(xs = [p0]) /*~> Unit */
      }

      ::withVararg/*(receiver = <this>) */
    })
  }

  fun withVararg(vararg xs: Int): String {
    return ""
  }

}

fun use(fn: Function1<Int, Unit>) {
  fn.invoke(p1 = 1)
}

