
RAW_FIR:
FILE: functionWithParameter.kt
    public? final? [RAW_FIR] interface I : R|kotlin/Any| {
    }
    public? final? [RAW_FIR] fun resolveMe([RAW_FIR] param: I): <implicit> { LAZY_BLOCK }

IMPORTS:
FILE: functionWithParameter.kt
    public? final? [RAW_FIR] interface I : R|kotlin/Any| {
    }
    public? final? [RAW_FIR] fun resolveMe([RAW_FIR] param: I): <implicit> { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: functionWithParameter.kt
    public? final? [RAW_FIR] interface I : R|kotlin/Any| {
    }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun resolveMe([COMPILER_REQUIRED_ANNOTATIONS] param: I): <implicit> { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: functionWithParameter.kt
    public? final? [RAW_FIR] interface I : R|kotlin/Any| {
    }
    public? final? [COMPANION_GENERATION] fun resolveMe([COMPANION_GENERATION] param: I): <implicit> { LAZY_BLOCK }

SUPER_TYPES:
FILE: functionWithParameter.kt
    public? final? [RAW_FIR] interface I : R|kotlin/Any| {
    }
    public? final? [SUPER_TYPES] fun resolveMe([SUPER_TYPES] param: I): <implicit> { LAZY_BLOCK }

TYPES:
FILE: functionWithParameter.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface I : R|kotlin/Any| {
    }
    public? final? [TYPES] fun resolveMe([TYPES] param: R|I|): <implicit> { LAZY_BLOCK }

STATUS:
FILE: functionWithParameter.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface I : R|kotlin/Any| {
    }
    public final [STATUS] fun resolveMe([STATUS] param: R|I|): <implicit> { LAZY_BLOCK }

ARGUMENTS_OF_ANNOTATIONS:
FILE: functionWithParameter.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface I : R|kotlin/Any| {
    }
    public final [ARGUMENTS_OF_ANNOTATIONS] fun resolveMe([ARGUMENTS_OF_ANNOTATIONS] param: R|I|): <implicit> { LAZY_BLOCK }

CONTRACTS:
FILE: functionWithParameter.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface I : R|kotlin/Any| {
    }
    public final [CONTRACTS] fun resolveMe([CONTRACTS] param: R|I|): <implicit> {
        ^resolveMe Unit#
    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: functionWithParameter.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface I : R|kotlin/Any| {
    }
    public final [IMPLICIT_TYPES_BODY_RESOLVE] fun resolveMe([IMPLICIT_TYPES_BODY_RESOLVE] param: R|I|): R|kotlin/Unit| {
        ^resolveMe Q|kotlin/Unit|
    }

EXPECT_ACTUAL_MATCHING:
FILE: functionWithParameter.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface I : R|kotlin/Any| {
    }
    public final [EXPECT_ACTUAL_MATCHING] fun resolveMe([EXPECT_ACTUAL_MATCHING] param: R|I|): R|kotlin/Unit| {
        ^resolveMe Q|kotlin/Unit|
    }

BODY_RESOLVE:
FILE: functionWithParameter.kt
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] interface I : R|kotlin/Any| {
    }
    public final [BODY_RESOLVE] fun resolveMe([BODY_RESOLVE] param: R|I|): R|kotlin/Unit| {
        ^resolveMe Q|kotlin/Unit|
    }

FILE RAW TO BODY:
FILE: functionWithParameter.kt
    public abstract [BODY_RESOLVE] interface I : R|kotlin/Any| {
    }
    public final [BODY_RESOLVE] fun resolveMe([BODY_RESOLVE] param: R|I|): R|kotlin/Unit| {
        ^resolveMe Q|kotlin/Unit|
    }
