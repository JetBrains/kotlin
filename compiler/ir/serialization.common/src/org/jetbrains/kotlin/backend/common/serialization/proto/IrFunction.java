// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction}
 */
public  final class IrFunction extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrFunction, IrFunction.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction)
    IrFunctionOrBuilder {
  private IrFunction() {
    overridden_ = emptyLongList();
  }
  private int bitField0_;
  public static final int BASE_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public boolean hasBase() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase getBase() {
    return base_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase.getDefaultInstance() : base_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase value) {
    value.getClass();  // minimal bytecode null check
    base_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase value) {
    value.getClass();  // minimal bytecode null check
    if (base_ != null &&
        base_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase.getDefaultInstance()) {
      base_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase.newBuilder(base_).mergeFrom(value).buildPartial();
    } else {
      base_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
   */
  private void clearBase() {  base_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int OVERRIDDEN_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.protobuf.Internal.LongList overridden_;
  /**
   * <pre>
   * TODO: supposed to be deleted
   * </pre>
   *
   * <code>repeated int64 overridden = 2;</code>
   * @return A list containing the overridden.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getOverriddenList() {
    return overridden_;
  }
  /**
   * <pre>
   * TODO: supposed to be deleted
   * </pre>
   *
   * <code>repeated int64 overridden = 2;</code>
   * @return The count of overridden.
   */
  @java.lang.Override
  public int getOverriddenCount() {
    return overridden_.size();
  }
  /**
   * <pre>
   * TODO: supposed to be deleted
   * </pre>
   *
   * <code>repeated int64 overridden = 2;</code>
   * @param index The index of the element to return.
   * @return The overridden at the given index.
   */
  @java.lang.Override
  public long getOverridden(int index) {
    return overridden_.getLong(index);
  }
  private int overriddenMemoizedSerializedSize = -1;
  private void ensureOverriddenIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.LongList tmp = overridden_;
    if (!tmp.isModifiable()) {
      overridden_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * TODO: supposed to be deleted
   * </pre>
   *
   * <code>repeated int64 overridden = 2;</code>
   * @param index The index to set the value at.
   * @param value The overridden to set.
   */
  private void setOverridden(
      int index, long value) {
    ensureOverriddenIsMutable();
    overridden_.setLong(index, value);
  }
  /**
   * <pre>
   * TODO: supposed to be deleted
   * </pre>
   *
   * <code>repeated int64 overridden = 2;</code>
   * @param value The overridden to add.
   */
  private void addOverridden(long value) {
    ensureOverriddenIsMutable();
    overridden_.addLong(value);
  }
  /**
   * <pre>
   * TODO: supposed to be deleted
   * </pre>
   *
   * <code>repeated int64 overridden = 2;</code>
   * @param values The overridden to add.
   */
  private void addAllOverridden(
      java.lang.Iterable<? extends java.lang.Long> values) {
    ensureOverriddenIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, overridden_);
  }
  /**
   * <pre>
   * TODO: supposed to be deleted
   * </pre>
   *
   * <code>repeated int64 overridden = 2;</code>
   */
  private void clearOverridden() {
    overridden_ = emptyLongList();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasBase() {
      return instance.hasBase();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase getBase() {
      return instance.getBase();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase value) {
      copyOnWrite();
      instance.setBase(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
     */
    public Builder setBase(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase.Builder builderForValue) {
      copyOnWrite();
      instance.setBase(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
     */
    public Builder mergeBase(org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase value) {
      copyOnWrite();
      instance.mergeBase(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1 [features = { ... }</code>
     */
    public Builder clearBase() {  copyOnWrite();
      instance.clearBase();
      return this;
    }

    /**
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     *
     * <code>repeated int64 overridden = 2;</code>
     * @return A list containing the overridden.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getOverriddenList() {
      return java.util.Collections.unmodifiableList(
          instance.getOverriddenList());
    }
    /**
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     *
     * <code>repeated int64 overridden = 2;</code>
     * @return The count of overridden.
     */
    @java.lang.Override
    public int getOverriddenCount() {
      return instance.getOverriddenCount();
    }
    /**
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     *
     * <code>repeated int64 overridden = 2;</code>
     * @param index The index of the element to return.
     * @return The overridden at the given index.
     */
    @java.lang.Override
    public long getOverridden(int index) {
      return instance.getOverridden(index);
    }
    /**
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     *
     * <code>repeated int64 overridden = 2;</code>
     * @param value The overridden to set.
     * @return This builder for chaining.
     */
    public Builder setOverridden(
        int index, long value) {
      copyOnWrite();
      instance.setOverridden(index, value);
      return this;
    }
    /**
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     *
     * <code>repeated int64 overridden = 2;</code>
     * @param value The overridden to add.
     * @return This builder for chaining.
     */
    public Builder addOverridden(long value) {
      copyOnWrite();
      instance.addOverridden(value);
      return this;
    }
    /**
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     *
     * <code>repeated int64 overridden = 2;</code>
     * @param values The overridden to add.
     * @return This builder for chaining.
     */
    public Builder addAllOverridden(
        java.lang.Iterable<? extends java.lang.Long> values) {
      copyOnWrite();
      instance.addAllOverridden(values);
      return this;
    }
    /**
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     *
     * <code>repeated int64 overridden = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearOverridden() {
      copyOnWrite();
      instance.clearOverridden();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "base_",
            "overridden_",
          };
          java.lang.String info =
              "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0001\u0001\u1509\u0000\u0002" +
              "%";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction DEFAULT_INSTANCE;
  static {
    IrFunction defaultInstance = new IrFunction();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrFunction.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrFunction> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrFunction> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
