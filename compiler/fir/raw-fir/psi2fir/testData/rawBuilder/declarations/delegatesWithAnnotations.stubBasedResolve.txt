FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] delegatesWithAnnotations.kt
    @<ERROR TYPE REF: Symbol not found for Anno>[Types]() public final [ResolvedTo(ANNOTATION_ARGUMENTS)] val x: R|kotlin/Int|by LAZY_EXPRESSION
        public [ResolvedTo(ANNOTATION_ARGUMENTS)] get(): R|kotlin/Int| { LAZY_BLOCK }
    @<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) field:@PROPERTY_DELEGATE_FIELD:<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) public final [ResolvedTo(CONTRACTS)] val delegate: <implicit> = LAZY_EXPRESSION
        public [ResolvedTo(CONTRACTS)] get(): <implicit>
    @<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) field:@PROPERTY_DELEGATE_FIELD:<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) public final [ResolvedTo(CONTRACTS)] val value: <implicit>by LAZY_EXPRESSION
        @PROPERTY_GETTER:<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) public [ResolvedTo(CONTRACTS)] get(): <implicit> { LAZY_BLOCK }
    @<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) field:@PROPERTY_DELEGATE_FIELD:<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) public final [ResolvedTo(CONTRACTS)] var variable: <implicit>by LAZY_EXPRESSION
        @PROPERTY_GETTER:<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) public [ResolvedTo(CONTRACTS)] get(): <implicit> { LAZY_BLOCK }
        @PROPERTY_SETTER:<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) public [ResolvedTo(CONTRACTS)] set([ResolvedTo(CONTRACTS)] @SETTER_PARAMETER:<ERROR TYPE REF: Symbol not found for Anno>[Types](LAZY_EXPRESSION) <set-?>: <implicit>): R|kotlin/Unit| { LAZY_BLOCK }
