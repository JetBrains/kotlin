Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Implicit receiver:
            FirRegularClassSymbol public final class Foo : R|kotlin/Any|
                Type: Foo
    Element 7
        Scope: FirLocalScope
    Element 8
        Scope: FirLocalScope
    Element 9
        Scope: FirLocalScope
            Properties:
                FirPropertySymbol lval localProperty: R|kotlin/Int|

FILE: [ResolvedTo(IMPORTS)] errorProperty.kt
    public final [ResolvedTo(STATUS)] class Foo : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] constructor(): R|Foo| {
            LAZY_super<R|kotlin/Any|>
        }

        <ERROR PROPERTY: Destructuring declarations are only allowed for local variables/values>

    }
    public final [ResolvedTo(CONTRACTS)] fun <[ResolvedTo(CONTRACTS)] T> transformation([ResolvedTo(CONTRACTS)] body: R|() -> T|): R|T| { LAZY_BLOCK }
    public final data [ResolvedTo(STATUS)] class MyPair : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] constructor([ResolvedTo(STATUS)] l: R|kotlin/Int|, [ResolvedTo(STATUS)] r: R|kotlin/String|): R|MyPair| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] val l: R|kotlin/Int| = R|<local>/l|
            public [ResolvedTo(STATUS)] get(): R|kotlin/Int|

        public final operator [ResolvedTo(STATUS)] fun component1(): R|kotlin/Int|

        public final [ResolvedTo(STATUS)] fun copy([ResolvedTo(STATUS)] l: R|kotlin/Int| = this@R|/MyPair|.R|/MyPair.l|): R|MyPair|

    }