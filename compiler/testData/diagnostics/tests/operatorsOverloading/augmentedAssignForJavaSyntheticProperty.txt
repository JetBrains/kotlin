package

public open class Base {
    public constructor Base()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun getDependsOn(): kotlin.collections.(Mutable)Set<kotlin.Any!>!
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open fun setDependsOn(/*0*/ dependsOn: kotlin.collections.(Mutable)Iterable<*>!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Derived : Base {
    public constructor Derived()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun getDependsOn(): kotlin.collections.(Mutable)Set<kotlin.Any!>!
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun setDependsOn(/*0*/ dependsOn: kotlin.collections.(Mutable)Iterable<*>!): kotlin.Unit
    public final fun test(/*0*/ s: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
