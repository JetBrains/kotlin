A.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package foo.TopLevelMembers

  @kotlin.annotation.Target public final annotation class A public constructor() : kotlin.Annotation {
  }

D.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package foo.TopLevelMembers

  public final class D public constructor() {
  }

Nothing.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package foo.TopLevelMembers

  public final class Nothing public constructor() {
  }

TopLevelMembersKt.class:
  // IntelliJ API Decompiler stub source generated from a class file
  // Implementation of methods is not available

  package foo.TopLevelMembers

  public val immutable: kotlin.Double /* compiled code */ /* hasBackingField: true */

  public var mutable: kotlin.Float /* compiled code */ /* hasBackingField: true */

  public val kotlin.String.ext: kotlin.String /* compiled code */ /* hasBackingField: false */
      public final get() { /* compiled code */ }

  private val certainlyNothing: kotlin.Nothing /* compiled code */ /* hasBackingField: true */

  public val foo.TopLevelMembers.D.Main: foo.TopLevelMembers.D? /* compiled code */ /* hasBackingField: false */
      public final get() { /* compiled code */ }

  @field:foo.TopLevelMembers.A internal val Main: foo.TopLevelMembers.D? /* compiled code */ /* hasBackingField: true */

  public fun funWithBlockBody(): kotlin.Unit { /* compiled code */ }

  private fun funWithExprBody(): kotlin.Int { /* compiled code */ }

  private fun funWithParams(c: kotlin.Int): kotlin.Unit { /* compiled code */ }

  public fun kotlin.Int.ext(i: kotlin.Int = COMPILED_CODE): kotlin.Int { /* compiled code */ }

  private fun funWithVarargParam(c: kotlin.Int, vararg v: kotlin.Int): kotlin.Unit { /* compiled code */ }

  private fun probablyNothing(): foo.TopLevelMembers.Nothing { /* compiled code */ }

  private typealias Alias<E> = (E) -> E
