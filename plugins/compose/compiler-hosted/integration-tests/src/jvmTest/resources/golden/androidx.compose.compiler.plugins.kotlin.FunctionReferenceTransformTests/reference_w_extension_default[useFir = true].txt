//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun Ref(content: @Composable Cls.(Int) -> Unit) {
    Ref(Cls::Fn)
}

//
// Transformed IR
// ------------------------------------------

@Composable
@FunctionKeyMeta(key = -154244234, startOffset = 84, endOffset = 176)
fun Ref(content: @[ExtensionFunctionType] Function4<Cls, Int, Composer, Int, Unit>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Ref)N(content)<Cls::F...>,<Ref(Cl...>:Test.kt")
  if (%composer.shouldExecute(%changed and 0b0001 != 0, %changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    Ref(<block>{
      sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
      val tmp0_group = %composer.cache(false) {
        @Composable
        fun Cls.Fn(int: Int, %composer: Composer?, %changed: Int) {
          receiver.Fn(int, %composer, 0b1110 and %changed or 0b01110000 and %changed, 0)
        }
        ::Fn
      }
      sourceInformationMarkerEnd(%composer)
      tmp0_group
    }, %composer, 0b0110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Ref(content, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
