// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression}
 */
public  final class IrDynamicOperatorExpression extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        IrDynamicOperatorExpression, IrDynamicOperatorExpression.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression)
    IrDynamicOperatorExpressionOrBuilder {
  private IrDynamicOperatorExpression() {
    operator_ = 1;
    argument_ = emptyProtobufList();
  }
  /**
   * Protobuf enum {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator}
   */
  public enum IrDynamicOperator
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    /**
     * <code>UNARY_PLUS = 1;</code>
     */
    UNARY_PLUS(1),
    /**
     * <code>UNARY_MINUS = 2;</code>
     */
    UNARY_MINUS(2),
    /**
     * <code>EXCL = 3;</code>
     */
    EXCL(3),
    /**
     * <code>PREFIX_INCREMENT = 4;</code>
     */
    PREFIX_INCREMENT(4),
    /**
     * <code>POSTFIX_INCREMENT = 5;</code>
     */
    POSTFIX_INCREMENT(5),
    /**
     * <code>PREFIX_DECREMENT = 6;</code>
     */
    PREFIX_DECREMENT(6),
    /**
     * <code>POSTFIX_DECREMENT = 7;</code>
     */
    POSTFIX_DECREMENT(7),
    /**
     * <code>BINARY_PLUS = 8;</code>
     */
    BINARY_PLUS(8),
    /**
     * <code>BINARY_MINUS = 9;</code>
     */
    BINARY_MINUS(9),
    /**
     * <code>MUL = 10;</code>
     */
    MUL(10),
    /**
     * <code>DIV = 11;</code>
     */
    DIV(11),
    /**
     * <code>MOD = 12;</code>
     */
    MOD(12),
    /**
     * <code>GT = 13;</code>
     */
    GT(13),
    /**
     * <code>LT = 14;</code>
     */
    LT(14),
    /**
     * <code>GE = 15;</code>
     */
    GE(15),
    /**
     * <code>LE = 16;</code>
     */
    LE(16),
    /**
     * <code>EQEQ = 17;</code>
     */
    EQEQ(17),
    /**
     * <code>EXCLEQ = 18;</code>
     */
    EXCLEQ(18),
    /**
     * <code>EQEQEQ = 19;</code>
     */
    EQEQEQ(19),
    /**
     * <code>EXCLEQEQ = 20;</code>
     */
    EXCLEQEQ(20),
    /**
     * <code>ANDAND = 21;</code>
     */
    ANDAND(21),
    /**
     * <code>OROR = 22;</code>
     */
    OROR(22),
    /**
     * <code>EQ = 23;</code>
     */
    EQ(23),
    /**
     * <code>PLUSEQ = 24;</code>
     */
    PLUSEQ(24),
    /**
     * <code>MINUSEQ = 25;</code>
     */
    MINUSEQ(25),
    /**
     * <code>MULEQ = 26;</code>
     */
    MULEQ(26),
    /**
     * <code>DIVEQ = 27;</code>
     */
    DIVEQ(27),
    /**
     * <code>MODEQ = 28;</code>
     */
    MODEQ(28),
    /**
     * <code>ARRAY_ACCESS = 29;</code>
     */
    ARRAY_ACCESS(29),
    /**
     * <code>INVOKE = 30;</code>
     */
    INVOKE(30),
    ;

    /**
     * <code>UNARY_PLUS = 1;</code>
     */
    public static final int UNARY_PLUS_VALUE = 1;
    /**
     * <code>UNARY_MINUS = 2;</code>
     */
    public static final int UNARY_MINUS_VALUE = 2;
    /**
     * <code>EXCL = 3;</code>
     */
    public static final int EXCL_VALUE = 3;
    /**
     * <code>PREFIX_INCREMENT = 4;</code>
     */
    public static final int PREFIX_INCREMENT_VALUE = 4;
    /**
     * <code>POSTFIX_INCREMENT = 5;</code>
     */
    public static final int POSTFIX_INCREMENT_VALUE = 5;
    /**
     * <code>PREFIX_DECREMENT = 6;</code>
     */
    public static final int PREFIX_DECREMENT_VALUE = 6;
    /**
     * <code>POSTFIX_DECREMENT = 7;</code>
     */
    public static final int POSTFIX_DECREMENT_VALUE = 7;
    /**
     * <code>BINARY_PLUS = 8;</code>
     */
    public static final int BINARY_PLUS_VALUE = 8;
    /**
     * <code>BINARY_MINUS = 9;</code>
     */
    public static final int BINARY_MINUS_VALUE = 9;
    /**
     * <code>MUL = 10;</code>
     */
    public static final int MUL_VALUE = 10;
    /**
     * <code>DIV = 11;</code>
     */
    public static final int DIV_VALUE = 11;
    /**
     * <code>MOD = 12;</code>
     */
    public static final int MOD_VALUE = 12;
    /**
     * <code>GT = 13;</code>
     */
    public static final int GT_VALUE = 13;
    /**
     * <code>LT = 14;</code>
     */
    public static final int LT_VALUE = 14;
    /**
     * <code>GE = 15;</code>
     */
    public static final int GE_VALUE = 15;
    /**
     * <code>LE = 16;</code>
     */
    public static final int LE_VALUE = 16;
    /**
     * <code>EQEQ = 17;</code>
     */
    public static final int EQEQ_VALUE = 17;
    /**
     * <code>EXCLEQ = 18;</code>
     */
    public static final int EXCLEQ_VALUE = 18;
    /**
     * <code>EQEQEQ = 19;</code>
     */
    public static final int EQEQEQ_VALUE = 19;
    /**
     * <code>EXCLEQEQ = 20;</code>
     */
    public static final int EXCLEQEQ_VALUE = 20;
    /**
     * <code>ANDAND = 21;</code>
     */
    public static final int ANDAND_VALUE = 21;
    /**
     * <code>OROR = 22;</code>
     */
    public static final int OROR_VALUE = 22;
    /**
     * <code>EQ = 23;</code>
     */
    public static final int EQ_VALUE = 23;
    /**
     * <code>PLUSEQ = 24;</code>
     */
    public static final int PLUSEQ_VALUE = 24;
    /**
     * <code>MINUSEQ = 25;</code>
     */
    public static final int MINUSEQ_VALUE = 25;
    /**
     * <code>MULEQ = 26;</code>
     */
    public static final int MULEQ_VALUE = 26;
    /**
     * <code>DIVEQ = 27;</code>
     */
    public static final int DIVEQ_VALUE = 27;
    /**
     * <code>MODEQ = 28;</code>
     */
    public static final int MODEQ_VALUE = 28;
    /**
     * <code>ARRAY_ACCESS = 29;</code>
     */
    public static final int ARRAY_ACCESS_VALUE = 29;
    /**
     * <code>INVOKE = 30;</code>
     */
    public static final int INVOKE_VALUE = 30;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IrDynamicOperator valueOf(int value) {
      return forNumber(value);
    }

    public static IrDynamicOperator forNumber(int value) {
      switch (value) {
        case 1: return UNARY_PLUS;
        case 2: return UNARY_MINUS;
        case 3: return EXCL;
        case 4: return PREFIX_INCREMENT;
        case 5: return POSTFIX_INCREMENT;
        case 6: return PREFIX_DECREMENT;
        case 7: return POSTFIX_DECREMENT;
        case 8: return BINARY_PLUS;
        case 9: return BINARY_MINUS;
        case 10: return MUL;
        case 11: return DIV;
        case 12: return MOD;
        case 13: return GT;
        case 14: return LT;
        case 15: return GE;
        case 16: return LE;
        case 17: return EQEQ;
        case 18: return EXCLEQ;
        case 19: return EQEQEQ;
        case 20: return EXCLEQEQ;
        case 21: return ANDAND;
        case 22: return OROR;
        case 23: return EQ;
        case 24: return PLUSEQ;
        case 25: return MINUSEQ;
        case 26: return MULEQ;
        case 27: return DIVEQ;
        case 28: return MODEQ;
        case 29: return ARRAY_ACCESS;
        case 30: return INVOKE;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrDynamicOperator>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        IrDynamicOperator> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<IrDynamicOperator>() {
            @java.lang.Override
            public IrDynamicOperator findValueByNumber(int number) {
              return IrDynamicOperator.forNumber(number);
            }
          };

    public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return IrDynamicOperatorVerifier.INSTANCE;
    }

    private static final class IrDynamicOperatorVerifier implements 
         org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
            static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new IrDynamicOperatorVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return IrDynamicOperator.forNumber(number) != null;
            }
          };

    private final int value;

    private IrDynamicOperator(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator)
  }

  private int bitField0_;
  public static final int OPERATOR_FIELD_NUMBER = 1;
  private int operator_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator operator = 1 [features = { ... }</code>
   * @return Whether the operator field is set.
   */
  @java.lang.Override
  public boolean hasOperator() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator operator = 1 [features = { ... }</code>
   * @return The operator.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator getOperator() {
    org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator result = org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator.forNumber(operator_);
    return result == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator.UNARY_PLUS : result;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator operator = 1 [features = { ... }</code>
   * @param value The operator to set.
   */
  private void setOperator(org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator value) {
    operator_ = value.getNumber();
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator operator = 1 [features = { ... }</code>
   */
  private void clearOperator() {
    bitField0_ = (bitField0_ & ~0x00000001);
    operator_ = 1;
  }

  public static final int RECEIVER_FIELD_NUMBER = 2;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
   */
  @java.lang.Override
  public boolean hasReceiver() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getReceiver() {
    return receiver_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : receiver_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    receiver_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
  private void mergeReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    if (receiver_ != null &&
        receiver_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
      receiver_ =
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder(receiver_).mergeFrom(value).buildPartial();
    } else {
      receiver_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
   */
  private void clearReceiver() {  receiver_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int ARGUMENT_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> argument_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  @java.lang.Override
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> getArgumentList() {
    return argument_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
      getArgumentOrBuilderList() {
    return argument_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  @java.lang.Override
  public int getArgumentCount() {
    return argument_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getArgument(int index) {
    return argument_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getArgumentOrBuilder(
      int index) {
    return argument_.get(index);
  }
  private void ensureArgumentIsMutable() {
    org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> tmp = argument_;
    if (!tmp.isModifiable()) {
      argument_ =
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void setArgument(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureArgumentIsMutable();
    argument_.set(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addArgument(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureArgumentIsMutable();
    argument_.add(value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  @java.lang.SuppressWarnings("ReturnValueIgnored")
  private void addArgument(
      int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
    value.getClass();  // minimal bytecode null check
    ensureArgumentIsMutable();
    argument_.add(index, value);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  private void addAllArgument(
      java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> values) {
    ensureArgumentIsMutable();
    org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
        values, argument_);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  private void clearArgument() {
    argument_ = emptyProtobufList();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
   */
  private void removeArgument(int index) {
    ensureArgumentIsMutable();
    argument_.remove(index);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpressionOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator operator = 1 [features = { ... }</code>
     * @return Whether the operator field is set.
     */
    @java.lang.Override
    public boolean hasOperator() {
      return instance.hasOperator();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator operator = 1 [features = { ... }</code>
     * @return The operator.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator getOperator() {
      return instance.getOperator();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator operator = 1 [features = { ... }</code>
     * @param value The enum numeric value on the wire for operator to set.
     * @return This builder for chaining.
     */
    public Builder setOperator(org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator value) {
      copyOnWrite();
      instance.setOperator(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator operator = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearOperator() {
      copyOnWrite();
      instance.clearOperator();
      return this;
    }

    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public boolean hasReceiver() {
      return instance.hasReceiver();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getReceiver() {
      return instance.getReceiver();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
     */
    public Builder setReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.setReceiver(value);
      return this;
      }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
     */
    public Builder setReceiver(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setReceiver(builderForValue.build());
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
     */
    public Builder mergeReceiver(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.mergeReceiver(value);
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2 [features = { ... }</code>
     */
    public Builder clearReceiver() {  copyOnWrite();
      instance.clearReceiver();
      return this;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> getArgumentList() {
      return java.util.Collections.unmodifiableList(
          instance.getArgumentList());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return instance.getArgumentCount();
    }/**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getArgument(int index) {
      return instance.getArgument(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder setArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.setArgument(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder setArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setArgument(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder addArgument(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.addArgument(value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder addArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      copyOnWrite();
      instance.addArgument(index, value);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder addArgument(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.addArgument(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder addArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      copyOnWrite();
      instance.addArgument(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder addAllArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> values) {
      copyOnWrite();
      instance.addAllArgument(values);
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder clearArgument() {
      copyOnWrite();
      instance.clearArgument();
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3;</code>
     */
    public Builder removeArgument(int index) {
      copyOnWrite();
      instance.removeArgument(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "operator_",
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.IrDynamicOperator.internalGetVerifier(),
            "receiver_",
            "argument_",
            org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.class,
          };
          java.lang.String info =
              "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0001\u0003\u0001\u1d0c\u0000\u0002" +
              "\u1509\u0001\u0003\u041b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression DEFAULT_INSTANCE;
  static {
    IrDynamicOperatorExpression defaultInstance = new IrDynamicOperatorExpression();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      IrDynamicOperatorExpression.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicOperatorExpression getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<IrDynamicOperatorExpression> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<IrDynamicOperatorExpression> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
